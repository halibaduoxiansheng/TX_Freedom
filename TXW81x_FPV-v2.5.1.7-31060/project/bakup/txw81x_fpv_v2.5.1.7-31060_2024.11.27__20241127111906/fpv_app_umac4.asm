
.//Obj/fpv_app_umac4.elf:     file format elf32-csky-little


Disassembly of section .text:

18000000 <__Vectors>:
18000000:	68 0a 00 18 b8 09 00 18 b8 09 00 18 b8 09 00 18     h...............
18000010:	b8 09 00 18 b8 09 00 18 b8 09 00 18 b8 09 00 18     ................
18000020:	b8 09 00 18 b8 09 00 18 b8 09 00 18 b8 09 00 18     ................
18000030:	b8 09 00 18 b8 09 00 18 b8 09 00 18 b8 09 00 18     ................
18000040:	b8 09 00 18 b8 09 00 18 b8 09 00 18 b8 09 00 18     ................
18000050:	b8 09 00 18 b8 09 00 18 00 0a 00 18 b8 09 00 18     ................
18000060:	b8 09 00 18 b8 09 00 18 b8 09 00 18 b8 09 00 18     ................
18000070:	b8 09 00 18 b8 09 00 18 b8 09 00 18 b8 09 00 18     ................
18000080:	78 38 00 18 a0 38 00 18 c8 38 00 18 f0 38 00 18     x8...8...8...8..
18000090:	18 39 00 18 40 39 00 18 68 39 00 18 90 39 00 18     .9..@9..h9...9..
180000a0:	b8 39 00 18 e0 39 00 18 08 3a 00 18 30 3a 00 18     .9...9...:..0:..
180000b0:	58 3a 00 18 80 3a 00 18 a8 3a 00 18 d0 3a 00 18     X:...:...:...:..
180000c0:	f8 3a 00 18 24 3b 00 18 50 3b 00 18 7c 3b 00 18     .:..$;..P;..|;..
180000d0:	a8 3b 00 18 f0 5e 01 18 d4 3b 00 18 00 3c 00 18     .;...^...;...<..
180000e0:	2c 3c 00 18 fc 36 00 18 20 37 00 18 58 3c 00 18     ,<...6.. 7..X<..
180000f0:	84 3c 00 18 b0 3c 00 18 dc 3c 00 18 08 3d 00 18     .<...<...<...=..
18000100:	34 3d 00 18 60 3d 00 18 8c 3d 00 18 b8 3d 00 18     4=..`=...=...=..
18000110:	e4 3d 00 18 f0 37 00 18 b8 09 00 18 10 3e 00 18     .=...7.......>..
18000120:	3c 3e 00 18 b8 09 00 18 68 3e 00 18 94 3e 00 18     <>......h>...>..
18000130:	c0 3e 00 18 ec 3e 00 18 18 3f 00 18 44 3f 00 18     .>...>...?..D?..
18000140:	70 3f 00 18 9c 3f 00 18 88 37 00 18 c8 3f 00 18     p?...?...7...?..
18000150:	b8 09 00 18 b8 09 00 18 b8 09 00 18 b8 09 00 18     ................
18000160:	b8 09 00 18 b8 09 00 18 f4 3f 00 18 b8 09 00 18     .........?......
18000170:	b8 09 00 18 b8 09 00 18 b8 09 00 18 b8 09 00 18     ................

18000180 <sys_factory_param>:
18000180:	00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

18000980 <__get_PC>:
 * default exception handler
 ******************************************************************************/
    .global __get_PC
    .type   __get_PC, %function
__get_PC:
	grs r0, __get_PC
18000980:	cc0c0000 	grs      	r0, 0x18000980	// 18000980 <__get_PC>
	jmp r15
18000984:	783c      	jmp      	r15

18000986 <trap>:
 * default exception handler
 ******************************************************************************/
    .global trap
    .type   trap, %function
trap:
    psrset  ee
18000986:	c1007420 	psrset      	ee
    subi    sp, 4
1800098a:	1421      	subi      	r14, r14, 4
    stw     r0, (sp)
1800098c:	b800      	st.w      	r0, (r14, 0x0)

    lrw     r0, g_top_trapstack
1800098e:	100c      	lrw      	r0, 0x20001928	// 180009bc <Default_Handler+0x4>
    subi    r0, 76
18000990:	284b      	subi      	r0, 76
    stm     r0-r15, (r0)
18000992:	d4001c2f 	stm      	r0-r15, (r0)
    stw     r28, (r0, 64)
18000996:	df802010 	st.w      	r28, (r0, 0x40)

    ldw     r1, (sp)
1800099a:	9820      	ld.w      	r1, (r14, 0x0)
    addi    sp, 4
1800099c:	1401      	addi      	r14, r14, 4
    stw     sp, (r0, 56) /* save r14 */
1800099e:	ddc0200e 	st.w      	r14, (r0, 0x38)
    mov     sp, r0
180009a2:	6f83      	mov      	r14, r0
    stw     r1, (sp)     /* save r0 */
180009a4:	b820      	st.w      	r1, (r14, 0x0)

    mfcr    r1, epsr
180009a6:	c0026021 	mfcr      	r1, cr<2, 0>
    stw     r1, (sp, 68)
180009aa:	b831      	st.w      	r1, (r14, 0x44)
    mfcr    r1, epc
180009ac:	c0046021 	mfcr      	r1, cr<4, 0>
    stw     r1, (sp, 72)
180009b0:	b832      	st.w      	r1, (r14, 0x48)

    jbsr    trap_c
180009b2:	e00023b7 	bsr      	0x18005120	// 18005120 <trap_c>
	...

180009b8 <Default_Handler>:

    .align  2
    .weak   Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    br      trap
180009b8:	07e7      	br      	0x18000986	// 18000986 <trap>
180009ba:	0000      	.short	0x0000
180009bc:	20001928 	.long	0x20001928

180009c0 <cpu_intrpt_save>:
 *     void   cpu_intrpt_restore(size_t psr);
 ******************************************************************************/

.type cpu_intrpt_save, %function
cpu_intrpt_save:
    mfcr    r0, psr
180009c0:	c0006020 	mfcr      	r0, cr<0, 0>
    psrclr  ie
180009c4:	c0807020 	psrclr      	ie
    rts
180009c8:	783c      	jmp      	r15

180009ca <cpu_intrpt_restore>:

.type cpu_intrpt_restore, %function
cpu_intrpt_restore:
    mtcr    r0, psr
180009ca:	c0006420 	mtcr      	r0, cr<0, 0>
    btsti   r0, 6
180009ce:	38c6      	btsti      	r0, 6
    bf      .Lret
180009d0:	0c0a      	bf      	0x180009e4	// 180009e4 <cpu_intrpt_restore+0x1a>
    lrw     r1, 0x00ff0000
180009d2:	ea2100ff 	movih      	r1, 255
    and     r1, r0
180009d6:	6840      	and      	r1, r0
    cmpnei  r1, 0
180009d8:	3940      	cmpnei      	r1, 0
    bt      .Lret
180009da:	0805      	bt      	0x180009e4	// 180009e4 <cpu_intrpt_restore+0x1a>
    lrw     r1, VIC_TSPDR
180009dc:	103f      	lrw      	r1, 0xe000ec08	// 18000a58 <__tspend_handler_nosave+0x2a>
.Lloop:
    ldw     r2, (r1)
180009de:	9140      	ld.w      	r2, (r1, 0x0)
    btsti   r2, 0
180009e0:	3ac0      	btsti      	r2, 0
    bt      .Lloop
180009e2:	0bfe      	bt      	0x180009de	// 180009de <cpu_intrpt_restore+0x14>
.Lret:
    rts
180009e4:	783c      	jmp      	r15

180009e6 <cpu_task_switch>:
 *     void cpu_task_switch(void);
 ******************************************************************************/

.type cpu_task_switch, %function
cpu_task_switch:
    lrw    r0, VIC_TSPDR
180009e6:	101d      	lrw      	r0, 0xe000ec08	// 18000a58 <__tspend_handler_nosave+0x2a>
    bgeni  r1, 0
180009e8:	ea010001 	movi      	r1, 1
    stw    r1, (r0)
180009ec:	b020      	st.w      	r1, (r0, 0x0)
    rts
180009ee:	783c      	jmp      	r15

180009f0 <cpu_intrpt_switch>:

.type cpu_intrpt_switch, %function
cpu_intrpt_switch:
    lrw    r0, VIC_TSPDR
180009f0:	101a      	lrw      	r0, 0xe000ec08	// 18000a58 <__tspend_handler_nosave+0x2a>
    bgeni  r1, 0
180009f2:	ea010001 	movi      	r1, 1
    stw    r1, (r0)
180009f6:	b020      	st.w      	r1, (r0, 0x0)
    rts
180009f8:	783c      	jmp      	r15

180009fa <cpu_first_task_start>:
 *     void cpu_first_task_start(void);
 ******************************************************************************/

.type cpu_first_task_start, %function
cpu_first_task_start:
    psrclr  ie
180009fa:	c0807020 	psrclr      	ie
    jbr     __tspend_handler_nosave
180009fe:	0418      	br      	0x18000a2e	// 18000a2e <__tspend_handler_nosave>

18000a00 <tspend_handler>:
 ******************************************************************************/

.type tspend_handler, %function
tspend_handler:
#ifdef __CK803__
    subi    sp, 72
18000a00:	1432      	subi      	r14, r14, 72
#else
    subi    sp, 68
#endif
    stm     r0-r13, (sp)
18000a02:	d40e1c2d 	stm      	r0-r13, (r14)
    stw     r15, (sp, 56)
18000a06:	ddee200e 	st.w      	r15, (r14, 0x38)
    mfcr    r0, epsr
18000a0a:	c0026020 	mfcr      	r0, cr<2, 0>
    stw     r0, (sp, 60)
18000a0e:	b80f      	st.w      	r0, (r14, 0x3c)
    mfcr    r0, epc
18000a10:	c0046020 	mfcr      	r0, cr<4, 0>
    stw     r0, (sp, 64)
18000a14:	b810      	st.w      	r0, (r14, 0x40)
#ifdef __CK803__    
    stw     r28, (sp, 68)
18000a16:	df8e2011 	st.w      	r28, (r14, 0x44)
#endif

    lrw     r0, g_sched_lock
18000a1a:	1011      	lrw      	r0, 0x20002944	// 18000a5c <__tspend_handler_nosave+0x2e>
    ldb     r1, (r0)
18000a1c:	8020      	ld.b      	r1, (r0, 0x0)
    cmpnei  r1, 0
18000a1e:	3940      	cmpnei      	r1, 0
    bt      .Lnot_switch
18000a20:	080d      	bt      	0x18000a3a	// 18000a3a <__tspend_handler_nosave+0xc>

    lrw     r2, g_active_task
18000a22:	1050      	lrw      	r2, 0x20002828	// 18000a60 <__tspend_handler_nosave+0x32>
    ldw     r2, (r2)
18000a24:	9240      	ld.w      	r2, (r2, 0x0)
    stw     sp, (r2)
18000a26:	ddc22000 	st.w      	r14, (r2, 0x0)

#if (RHINO_CONFIG_TASK_STACK_OVF_CHECK > 0)
    jbsr    krhino_stack_ovf_check
18000a2a:	e0006ce1 	bsr      	0x1800e3ec	// 1800e3ec <krhino_stack_ovf_check>

18000a2e <__tspend_handler_nosave>:
#if (RHINO_CONFIG_TASK_SCHED_STATS > 0)
    jbsr    krhino_task_sched_stats_get
#endif

__tspend_handler_nosave:
    lrw     r4, g_active_task
18000a2e:	108d      	lrw      	r4, 0x20002828	// 18000a60 <__tspend_handler_nosave+0x32>
    lrw     r5, g_preferred_ready_task
18000a30:	10ad      	lrw      	r5, 0x2000282c	// 18000a64 <__tspend_handler_nosave+0x36>
    ldw     r6, (r5)
18000a32:	95c0      	ld.w      	r6, (r5, 0x0)
    stw     r6, (r4)
18000a34:	b4c0      	st.w      	r6, (r4, 0x0)

#ifdef CONFIG_STACK_GUARD
    jbsr    csky_set_stackbound
#endif

    ldw     sp, (r6)
18000a36:	d9c62000 	ld.w      	r14, (r6, 0x0)
    mtcr    r3, cr<0, 4>
#endif

.Lnot_switch:
#ifdef __CK803__
    ldw     r28, (sp, 68)
18000a3a:	db8e2011 	ld.w      	r28, (r14, 0x44)
#endif
    ldw     r0, (sp, 64)
18000a3e:	9810      	ld.w      	r0, (r14, 0x40)
    mtcr    r0, epc
18000a40:	c0006424 	mtcr      	r0, cr<4, 0>
    ldw     r0, (sp, 60)
18000a44:	980f      	ld.w      	r0, (r14, 0x3c)
    mtcr    r0, epsr
18000a46:	c0006422 	mtcr      	r0, cr<2, 0>
    ldw     r15, (sp, 56)
18000a4a:	d9ee200e 	ld.w      	r15, (r14, 0x38)
    ldm     r0-r13, (sp)
18000a4e:	d00e1c2d 	ldm      	r0-r13, (r14)
#ifdef __CK803__
    addi    sp, 72
18000a52:	1412      	addi      	r14, r14, 72
#else
    addi    sp, 68
#endif
    rte
18000a54:	c0004020 	rte
18000a58:	e000ec08 	.long	0xe000ec08
18000a5c:	20002944 	.long	0x20002944
18000a60:	20002828 	.long	0x20002828
18000a64:	2000282c 	.long	0x2000282c

18000a68 <Reset_Handler>:
18000a68:	c1807020 	psrclr      	ee, ie
18000a6c:	101f      	lrw      	r0, 0xc053781b	// 18000ae8 <._load_loop_done+0x2>
18000a6e:	ea214002 	movih      	r1, 16386
18000a72:	b100      	st.w      	r0, (r1, 0x0)
18000a74:	101e      	lrw      	r0, 0xb3a2164c	// 18000aec <._load_loop_done+0x6>
18000a76:	b100      	st.w      	r0, (r1, 0x0)
18000a78:	101e      	lrw      	r0, 0x80000200	// 18000af0 <._load_loop_done+0xa>
18000a7a:	c0006420 	mtcr      	r0, cr<0, 0>
18000a7e:	c01f6020 	mfcr      	r0, cr<31, 0>
18000a82:	3883      	bclri      	r0, 3
18000a84:	c000643f 	mtcr      	r0, cr<31, 0>
18000a88:	101b      	lrw      	r0, 0x20001728	// 18000af4 <._load_loop_done+0xe>
18000a8a:	6f83      	mov      	r14, r0
18000a8c:	e0008542 	bsr      	0x18011510	// 18011510 <system_qspi_pretect_all>
18000a90:	103a      	lrw      	r1, 0x0	// 18000af8 <._load_loop_done+0x12>
18000a92:	105b      	lrw      	r2, 0x0	// 18000afc <._load_loop_done+0x16>
18000a94:	107b      	lrw      	r3, 0x0	// 18000b00 <._load_loop_done+0x1a>
18000a96:	e000001c 	bsr      	0x18000ace	// 18000ace <load_data_section>
18000a9a:	103b      	lrw      	r1, 0x18019450	// 18000b04 <._load_loop_done+0x1e>
18000a9c:	105b      	lrw      	r2, 0x20000000	// 18000b08 <._load_loop_done+0x22>
18000a9e:	107c      	lrw      	r3, 0x20001328	// 18000b0c <._load_loop_done+0x26>
18000aa0:	e0000017 	bsr      	0x18000ace	// 18000ace <load_data_section>
18000aa4:	103b      	lrw      	r1, 0x20001950	// 18000b10 <._load_loop_done+0x2a>
18000aa6:	105c      	lrw      	r2, 0x20002c7c	// 18000b14 <._load_loop_done+0x2e>
18000aa8:	e0000009 	bsr      	0x18000aba	// 18000aba <clear_bss_section>
18000aac:	e000856c 	bsr      	0x18011584	// 18011584 <qsip_flash_protect>
18000ab0:	e00021b4 	bsr      	0x18004e18	// 18004e18 <SystemInit>
18000ab4:	e00022c6 	bsr      	0x18005040	// 18005040 <pre_main>

18000ab8 <__exit>:
18000ab8:	0400      	br      	0x18000ab8	// 18000ab8 <__exit>

18000aba <clear_bss_section>:
18000aba:	3000      	movi      	r0, 0
18000abc:	6086      	subu      	r2, r1
18000abe:	3a40      	cmpnei      	r2, 0
18000ac0:	0c06      	bf      	0x18000acc	// 18000acc <._clear_loop_done>

18000ac2 <._clear_loop>:
18000ac2:	b100      	st.w      	r0, (r1, 0x0)
18000ac4:	2103      	addi      	r1, 4
18000ac6:	2a03      	subi      	r2, 4
18000ac8:	3a40      	cmpnei      	r2, 0
18000aca:	0bfc      	bt      	0x18000ac2	// 18000ac2 <._clear_loop>

18000acc <._clear_loop_done>:
18000acc:	783c      	jmp      	r15

18000ace <load_data_section>:
18000ace:	6486      	cmpne      	r1, r2
18000ad0:	0c0b      	bf      	0x18000ae6	// 18000ae6 <._load_loop_done>
18000ad2:	60ca      	subu      	r3, r2
18000ad4:	3b40      	cmpnei      	r3, 0
18000ad6:	0c08      	bf      	0x18000ae6	// 18000ae6 <._load_loop_done>

18000ad8 <._load_loop>:
18000ad8:	9100      	ld.w      	r0, (r1, 0x0)
18000ada:	b200      	st.w      	r0, (r2, 0x0)
18000adc:	2103      	addi      	r1, 4
18000ade:	2203      	addi      	r2, 4
18000ae0:	2b03      	subi      	r3, 4
18000ae2:	3b40      	cmpnei      	r3, 0
18000ae4:	0bfa      	bt      	0x18000ad8	// 18000ad8 <._load_loop>

18000ae6 <._load_loop_done>:
18000ae6:	783c      	jmp      	r15
18000ae8:	c053781b 	.long	0xc053781b
18000aec:	b3a2164c 	.long	0xb3a2164c
18000af0:	80000200 	.long	0x80000200
18000af4:	20001728 	.long	0x20001728
	...
18000b04:	18019450 	.long	0x18019450
18000b08:	20000000 	.long	0x20000000
18000b0c:	20001328 	.long	0x20001328
18000b10:	20001950 	.long	0x20001950
18000b14:	20002c7c 	.long	0x20002c7c

18000b18 <__muldi3>:
18000b18:	14c3      	push      	r4-r6
18000b1a:	c602484d 	lsri      	r13, r2, 16
18000b1e:	c40055ec 	zext      	r12, r0, 15, 0
18000b22:	4890      	lsri      	r4, r0, 16
18000b24:	c40255e5 	zext      	r5, r2, 15, 0
18000b28:	c4ac8426 	mult      	r6, r12, r5
18000b2c:	7d50      	mult      	r5, r4
18000b2e:	7f34      	mult      	r12, r13
18000b30:	7d34      	mult      	r4, r13
18000b32:	c4ac002d 	addu      	r13, r12, r5
18000b36:	c606484c 	lsri      	r12, r6, 16
18000b3a:	6334      	addu      	r12, r13
18000b3c:	6570      	cmphs      	r12, r5
18000b3e:	0804      	bt      	0x18000b46	// 18000b46 <__muldi3+0x2e>
18000b40:	ea2d0001 	movih      	r13, 1
18000b44:	6134      	addu      	r4, r13
18000b46:	c60c484d 	lsri      	r13, r12, 16
18000b4a:	7cc0      	mult      	r3, r0
18000b4c:	7c48      	mult      	r1, r2
18000b4e:	6134      	addu      	r4, r13
18000b50:	c60c482c 	lsli      	r12, r12, 16
18000b54:	c40655e6 	zext      	r6, r6, 15, 0
18000b58:	604c      	addu      	r1, r3
18000b5a:	c4cc0020 	addu      	r0, r12, r6
18000b5e:	6050      	addu      	r1, r4
18000b60:	1483      	pop      	r4-r6
	...

18000b64 <__udivdi3>:
18000b64:	14c5      	push      	r4-r8
18000b66:	6f4b      	mov      	r13, r2
18000b68:	6d4f      	mov      	r5, r3
18000b6a:	6d03      	mov      	r4, r0
18000b6c:	6f07      	mov      	r12, r1
18000b6e:	e9230054 	bnez      	r3, 0x18000c16	// 18000c16 <__udivdi3+0xb2>
18000b72:	6484      	cmphs      	r1, r2
18000b74:	0870      	bt      	0x18000c54	// 18000c54 <__udivdi3+0xf0>
18000b76:	eb02ffff 	cmphsi      	r2, 65536
18000b7a:	0cc4      	bf      	0x18000d02	// 18000d02 <__udivdi3+0x19e>
18000b7c:	c6e05023 	bmaski      	r3, 24
18000b80:	648c      	cmphs      	r3, r2
18000b82:	3518      	movi      	r5, 24
18000b84:	3310      	movi      	r3, 16
18000b86:	c4a30c40 	inct      	r5, r3, 0
18000b8a:	01dc      	lrw      	r6, 0x18015f34	// 18000e94 <__udivdi3+0x330>
18000b8c:	c4a24043 	lsr      	r3, r2, r5
18000b90:	d0660023 	ldr.b      	r3, (r6, r3 << 0)
18000b94:	614c      	addu      	r5, r3
18000b96:	3320      	movi      	r3, 32
18000b98:	60d6      	subu      	r3, r5
18000b9a:	e903000c 	bez      	r3, 0x18000bb2	// 18000bb2 <__udivdi3+0x4e>
18000b9e:	c462402d 	lsl      	r13, r2, r3
18000ba2:	c4a04045 	lsr      	r5, r0, r5
18000ba6:	c4614022 	lsl      	r2, r1, r3
18000baa:	c445242c 	or      	r12, r5, r2
18000bae:	c4604024 	lsl      	r4, r0, r3
18000bb2:	c60d4841 	lsri      	r1, r13, 16
18000bb6:	c42c8022 	divu      	r2, r12, r1
18000bba:	c4228423 	mult      	r3, r2, r1
18000bbe:	630e      	subu      	r12, r3
18000bc0:	c60c4823 	lsli      	r3, r12, 16
18000bc4:	c40d55e5 	zext      	r5, r13, 15, 0
18000bc8:	c604484c 	lsri      	r12, r4, 16
18000bcc:	c4458420 	mult      	r0, r5, r2
18000bd0:	6f0c      	or      	r12, r3
18000bd2:	6430      	cmphs      	r12, r0
18000bd4:	0808      	bt      	0x18000be4	// 18000be4 <__udivdi3+0x80>
18000bd6:	6334      	addu      	r12, r13
18000bd8:	6770      	cmphs      	r12, r13
18000bda:	5a63      	subi      	r3, r2, 1
18000bdc:	0c03      	bf      	0x18000be2	// 18000be2 <__udivdi3+0x7e>
18000bde:	6430      	cmphs      	r12, r0
18000be0:	0d56      	bf      	0x18000e8c	// 18000e8c <__udivdi3+0x328>
18000be2:	6c8f      	mov      	r2, r3
18000be4:	6302      	subu      	r12, r0
18000be6:	c42c8020 	divu      	r0, r12, r1
18000bea:	7c40      	mult      	r1, r0
18000bec:	6306      	subu      	r12, r1
18000bee:	c60c482c 	lsli      	r12, r12, 16
18000bf2:	c40455e4 	zext      	r4, r4, 15, 0
18000bf6:	7d40      	mult      	r5, r0
18000bf8:	6d30      	or      	r4, r12
18000bfa:	6550      	cmphs      	r4, r5
18000bfc:	6c43      	mov      	r1, r0
18000bfe:	0808      	bt      	0x18000c0e	// 18000c0e <__udivdi3+0xaa>
18000c00:	6134      	addu      	r4, r13
18000c02:	6750      	cmphs      	r4, r13
18000c04:	5863      	subi      	r3, r0, 1
18000c06:	0d21      	bf      	0x18000e48	// 18000e48 <__udivdi3+0x2e4>
18000c08:	6550      	cmphs      	r4, r5
18000c0a:	091f      	bt      	0x18000e48	// 18000e48 <__udivdi3+0x2e4>
18000c0c:	2901      	subi      	r1, 2
18000c0e:	4210      	lsli      	r0, r2, 16
18000c10:	6c04      	or      	r0, r1
18000c12:	3100      	movi      	r1, 0
18000c14:	1485      	pop      	r4-r8
18000c16:	64c4      	cmphs      	r1, r3
18000c18:	0c6b      	bf      	0x18000cee	// 18000cee <__udivdi3+0x18a>
18000c1a:	eb03ffff 	cmphsi      	r3, 65536
18000c1e:	0c6b      	bf      	0x18000cf4	// 18000cf4 <__udivdi3+0x190>
18000c20:	c6e0502c 	bmaski      	r12, 24
18000c24:	64f0      	cmphs      	r12, r3
18000c26:	ea0d0018 	movi      	r13, 24
18000c2a:	ea0c0010 	movi      	r12, 16
18000c2e:	c58d0c20 	incf      	r12, r13, 0
18000c32:	0386      	lrw      	r4, 0x18015f34	// 18000e94 <__udivdi3+0x330>
18000c34:	c583404d 	lsr      	r13, r3, r12
18000c38:	d1a4002d 	ldr.b      	r13, (r4, r13 << 0)
18000c3c:	6370      	addu      	r13, r12
18000c3e:	3520      	movi      	r5, 32
18000c40:	6176      	subu      	r5, r13
18000c42:	e925006c 	bnez      	r5, 0x18000d1a	// 18000d1a <__udivdi3+0x1b6>
18000c46:	644c      	cmphs      	r3, r1
18000c48:	0d0d      	bf      	0x18000e62	// 18000e62 <__udivdi3+0x2fe>
18000c4a:	6480      	cmphs      	r0, r2
18000c4c:	c4000500 	mvc      	r0
18000c50:	6c57      	mov      	r1, r5
18000c52:	1485      	pop      	r4-r8
18000c54:	e9220006 	bnez      	r2, 0x18000c60	// 18000c60 <__udivdi3+0xfc>
18000c58:	ea0d0001 	movi      	r13, 1
18000c5c:	c44d802d 	divu      	r13, r13, r2
18000c60:	eb0dffff 	cmphsi      	r13, 65536
18000c64:	0c55      	bf      	0x18000d0e	// 18000d0e <__udivdi3+0x1aa>
18000c66:	c6e05023 	bmaski      	r3, 24
18000c6a:	674c      	cmphs      	r3, r13
18000c6c:	3518      	movi      	r5, 24
18000c6e:	3310      	movi      	r3, 16
18000c70:	c4a30c40 	inct      	r5, r3, 0
18000c74:	0357      	lrw      	r2, 0x18015f34	// 18000e94 <__udivdi3+0x330>
18000c76:	c4ad4043 	lsr      	r3, r13, r5
18000c7a:	d0620023 	ldr.b      	r3, (r2, r3 << 0)
18000c7e:	614c      	addu      	r5, r3
18000c80:	3620      	movi      	r6, 32
18000c82:	6196      	subu      	r6, r5
18000c84:	e926009f 	bnez      	r6, 0x18000dc2	// 18000dc2 <__udivdi3+0x25e>
18000c88:	c5a10082 	subu      	r2, r1, r13
18000c8c:	c60d4846 	lsri      	r6, r13, 16
18000c90:	c40d55e5 	zext      	r5, r13, 15, 0
18000c94:	3101      	movi      	r1, 1
18000c96:	c4c2802c 	divu      	r12, r2, r6
18000c9a:	c4cc8423 	mult      	r3, r12, r6
18000c9e:	608e      	subu      	r2, r3
18000ca0:	4250      	lsli      	r2, r2, 16
18000ca2:	4c70      	lsri      	r3, r4, 16
18000ca4:	c4ac8420 	mult      	r0, r12, r5
18000ca8:	6cc8      	or      	r3, r2
18000caa:	640c      	cmphs      	r3, r0
18000cac:	0809      	bt      	0x18000cbe	// 18000cbe <__udivdi3+0x15a>
18000cae:	60f4      	addu      	r3, r13
18000cb0:	674c      	cmphs      	r3, r13
18000cb2:	e44c1000 	subi      	r2, r12, 1
18000cb6:	0c03      	bf      	0x18000cbc	// 18000cbc <__udivdi3+0x158>
18000cb8:	640c      	cmphs      	r3, r0
18000cba:	0ce5      	bf      	0x18000e84	// 18000e84 <__udivdi3+0x320>
18000cbc:	6f0b      	mov      	r12, r2
18000cbe:	60c2      	subu      	r3, r0
18000cc0:	c4c38020 	divu      	r0, r3, r6
18000cc4:	7d80      	mult      	r6, r0
18000cc6:	60da      	subu      	r3, r6
18000cc8:	4370      	lsli      	r3, r3, 16
18000cca:	c40455e4 	zext      	r4, r4, 15, 0
18000cce:	7d40      	mult      	r5, r0
18000cd0:	6cd0      	or      	r3, r4
18000cd2:	654c      	cmphs      	r3, r5
18000cd4:	6c83      	mov      	r2, r0
18000cd6:	0808      	bt      	0x18000ce6	// 18000ce6 <__udivdi3+0x182>
18000cd8:	60f4      	addu      	r3, r13
18000cda:	674c      	cmphs      	r3, r13
18000cdc:	2800      	subi      	r0, 1
18000cde:	0cb3      	bf      	0x18000e44	// 18000e44 <__udivdi3+0x2e0>
18000ce0:	654c      	cmphs      	r3, r5
18000ce2:	08b1      	bt      	0x18000e44	// 18000e44 <__udivdi3+0x2e0>
18000ce4:	2a01      	subi      	r2, 2
18000ce6:	c60c4820 	lsli      	r0, r12, 16
18000cea:	6c08      	or      	r0, r2
18000cec:	1485      	pop      	r4-r8
18000cee:	3100      	movi      	r1, 0
18000cf0:	6c07      	mov      	r0, r1
18000cf2:	1485      	pop      	r4-r8
18000cf4:	eb0300ff 	cmphsi      	r3, 256
18000cf8:	c400050d 	mvc      	r13
18000cfc:	c46d482c 	lsli      	r12, r13, 3
18000d00:	0799      	br      	0x18000c32	// 18000c32 <__udivdi3+0xce>
18000d02:	eb0200ff 	cmphsi      	r2, 256
18000d06:	3308      	movi      	r3, 8
18000d08:	c4a30c40 	inct      	r5, r3, 0
18000d0c:	073f      	br      	0x18000b8a	// 18000b8a <__udivdi3+0x26>
18000d0e:	eb0d00ff 	cmphsi      	r13, 256
18000d12:	3308      	movi      	r3, 8
18000d14:	c4a30c40 	inct      	r5, r3, 0
18000d18:	07ae      	br      	0x18000c74	// 18000c74 <__udivdi3+0x110>
18000d1a:	c5a24046 	lsr      	r6, r2, r13
18000d1e:	70d4      	lsl      	r3, r5
18000d20:	6d8c      	or      	r6, r3
18000d22:	c5a14044 	lsr      	r4, r1, r13
18000d26:	4ef0      	lsri      	r7, r6, 16
18000d28:	c4e48023 	divu      	r3, r4, r7
18000d2c:	c4a1402c 	lsl      	r12, r1, r5
18000d30:	c5a04041 	lsr      	r1, r0, r13
18000d34:	c4e3842d 	mult      	r13, r3, r7
18000d38:	6c70      	or      	r1, r12
18000d3a:	6136      	subu      	r4, r13
18000d3c:	c40655ec 	zext      	r12, r6, 15, 0
18000d40:	4490      	lsli      	r4, r4, 16
18000d42:	c601484d 	lsri      	r13, r1, 16
18000d46:	c46c8428 	mult      	r8, r12, r3
18000d4a:	6f50      	or      	r13, r4
18000d4c:	6634      	cmphs      	r13, r8
18000d4e:	7094      	lsl      	r2, r5
18000d50:	0806      	bt      	0x18000d5c	// 18000d5c <__udivdi3+0x1f8>
18000d52:	6358      	addu      	r13, r6
18000d54:	65b4      	cmphs      	r13, r6
18000d56:	5b83      	subi      	r4, r3, 1
18000d58:	088d      	bt      	0x18000e72	// 18000e72 <__udivdi3+0x30e>
18000d5a:	6cd3      	mov      	r3, r4
18000d5c:	6362      	subu      	r13, r8
18000d5e:	c4ed8024 	divu      	r4, r13, r7
18000d62:	7dd0      	mult      	r7, r4
18000d64:	635e      	subu      	r13, r7
18000d66:	c60d482d 	lsli      	r13, r13, 16
18000d6a:	c48c8427 	mult      	r7, r12, r4
18000d6e:	c40155ec 	zext      	r12, r1, 15, 0
18000d72:	6f34      	or      	r12, r13
18000d74:	65f0      	cmphs      	r12, r7
18000d76:	0806      	bt      	0x18000d82	// 18000d82 <__udivdi3+0x21e>
18000d78:	6318      	addu      	r12, r6
18000d7a:	65b0      	cmphs      	r12, r6
18000d7c:	5c23      	subi      	r1, r4, 1
18000d7e:	0875      	bt      	0x18000e68	// 18000e68 <__udivdi3+0x304>
18000d80:	6d07      	mov      	r4, r1
18000d82:	4370      	lsli      	r3, r3, 16
18000d84:	6cd0      	or      	r3, r4
18000d86:	c40355e1 	zext      	r1, r3, 15, 0
18000d8a:	c40255e4 	zext      	r4, r2, 15, 0
18000d8e:	c603484d 	lsri      	r13, r3, 16
18000d92:	4a50      	lsri      	r2, r2, 16
18000d94:	c4818426 	mult      	r6, r1, r4
18000d98:	7d34      	mult      	r4, r13
18000d9a:	7c48      	mult      	r1, r2
18000d9c:	7f48      	mult      	r13, r2
18000d9e:	6050      	addu      	r1, r4
18000da0:	4e50      	lsri      	r2, r6, 16
18000da2:	6084      	addu      	r2, r1
18000da4:	6508      	cmphs      	r2, r4
18000da6:	631e      	subu      	r12, r7
18000da8:	0804      	bt      	0x18000db0	// 18000db0 <__udivdi3+0x24c>
18000daa:	ea210001 	movih      	r1, 1
18000dae:	6344      	addu      	r13, r1
18000db0:	4a30      	lsri      	r1, r2, 16
18000db2:	6344      	addu      	r13, r1
18000db4:	6770      	cmphs      	r12, r13
18000db6:	0c53      	bf      	0x18000e5c	// 18000e5c <__udivdi3+0x2f8>
18000db8:	6772      	cmpne      	r12, r13
18000dba:	0c49      	bf      	0x18000e4c	// 18000e4c <__udivdi3+0x2e8>
18000dbc:	6c0f      	mov      	r0, r3
18000dbe:	3100      	movi      	r1, 0
18000dc0:	1485      	pop      	r4-r8
18000dc2:	7358      	lsl      	r13, r6
18000dc4:	c4a1404c 	lsr      	r12, r1, r5
18000dc8:	c4c14022 	lsl      	r2, r1, r6
18000dcc:	c4c04024 	lsl      	r4, r0, r6
18000dd0:	c60d4846 	lsri      	r6, r13, 16
18000dd4:	c4a04045 	lsr      	r5, r0, r5
18000dd8:	c4cc8020 	divu      	r0, r12, r6
18000ddc:	c4c08421 	mult      	r1, r0, r6
18000de0:	c4452423 	or      	r3, r5, r2
18000de4:	6306      	subu      	r12, r1
18000de6:	c40d55e5 	zext      	r5, r13, 15, 0
18000dea:	c60c482c 	lsli      	r12, r12, 16
18000dee:	4b30      	lsri      	r1, r3, 16
18000df0:	c4058422 	mult      	r2, r5, r0
18000df4:	6c70      	or      	r1, r12
18000df6:	6484      	cmphs      	r1, r2
18000df8:	080a      	bt      	0x18000e0c	// 18000e0c <__udivdi3+0x2a8>
18000dfa:	6074      	addu      	r1, r13
18000dfc:	6744      	cmphs      	r1, r13
18000dfe:	e5801000 	subi      	r12, r0, 1
18000e02:	0c3f      	bf      	0x18000e80	// 18000e80 <__udivdi3+0x31c>
18000e04:	6484      	cmphs      	r1, r2
18000e06:	083d      	bt      	0x18000e80	// 18000e80 <__udivdi3+0x31c>
18000e08:	2801      	subi      	r0, 2
18000e0a:	6074      	addu      	r1, r13
18000e0c:	604a      	subu      	r1, r2
18000e0e:	c4c1802c 	divu      	r12, r1, r6
18000e12:	c4cc8422 	mult      	r2, r12, r6
18000e16:	5949      	subu      	r2, r1, r2
18000e18:	4250      	lsli      	r2, r2, 16
18000e1a:	c40355e3 	zext      	r3, r3, 15, 0
18000e1e:	c5858421 	mult      	r1, r5, r12
18000e22:	6c8c      	or      	r2, r3
18000e24:	6448      	cmphs      	r2, r1
18000e26:	080b      	bt      	0x18000e3c	// 18000e3c <__udivdi3+0x2d8>
18000e28:	60b4      	addu      	r2, r13
18000e2a:	6748      	cmphs      	r2, r13
18000e2c:	e46c1000 	subi      	r3, r12, 1
18000e30:	0c26      	bf      	0x18000e7c	// 18000e7c <__udivdi3+0x318>
18000e32:	6448      	cmphs      	r2, r1
18000e34:	0824      	bt      	0x18000e7c	// 18000e7c <__udivdi3+0x318>
18000e36:	e58c1001 	subi      	r12, r12, 2
18000e3a:	60b4      	addu      	r2, r13
18000e3c:	6086      	subu      	r2, r1
18000e3e:	4030      	lsli      	r1, r0, 16
18000e40:	6c70      	or      	r1, r12
18000e42:	072a      	br      	0x18000c96	// 18000c96 <__udivdi3+0x132>
18000e44:	6c83      	mov      	r2, r0
18000e46:	0750      	br      	0x18000ce6	// 18000ce6 <__udivdi3+0x182>
18000e48:	6c4f      	mov      	r1, r3
18000e4a:	06e2      	br      	0x18000c0e	// 18000c0e <__udivdi3+0xaa>
18000e4c:	4250      	lsli      	r2, r2, 16
18000e4e:	c40655e6 	zext      	r6, r6, 15, 0
18000e52:	c4a04021 	lsl      	r1, r0, r5
18000e56:	6098      	addu      	r2, r6
18000e58:	6484      	cmphs      	r1, r2
18000e5a:	0bb1      	bt      	0x18000dbc	// 18000dbc <__udivdi3+0x258>
18000e5c:	5b03      	subi      	r0, r3, 1
18000e5e:	3100      	movi      	r1, 0
18000e60:	1485      	pop      	r4-r8
18000e62:	6c57      	mov      	r1, r5
18000e64:	3001      	movi      	r0, 1
18000e66:	1485      	pop      	r4-r8
18000e68:	65f0      	cmphs      	r12, r7
18000e6a:	0b8b      	bt      	0x18000d80	// 18000d80 <__udivdi3+0x21c>
18000e6c:	2c01      	subi      	r4, 2
18000e6e:	6318      	addu      	r12, r6
18000e70:	0789      	br      	0x18000d82	// 18000d82 <__udivdi3+0x21e>
18000e72:	6634      	cmphs      	r13, r8
18000e74:	0b73      	bt      	0x18000d5a	// 18000d5a <__udivdi3+0x1f6>
18000e76:	2b01      	subi      	r3, 2
18000e78:	6358      	addu      	r13, r6
18000e7a:	0771      	br      	0x18000d5c	// 18000d5c <__udivdi3+0x1f8>
18000e7c:	6f0f      	mov      	r12, r3
18000e7e:	07df      	br      	0x18000e3c	// 18000e3c <__udivdi3+0x2d8>
18000e80:	6c33      	mov      	r0, r12
18000e82:	07c5      	br      	0x18000e0c	// 18000e0c <__udivdi3+0x2a8>
18000e84:	e58c1001 	subi      	r12, r12, 2
18000e88:	60f4      	addu      	r3, r13
18000e8a:	071a      	br      	0x18000cbe	// 18000cbe <__udivdi3+0x15a>
18000e8c:	2a01      	subi      	r2, 2
18000e8e:	6334      	addu      	r12, r13
18000e90:	06aa      	br      	0x18000be4	// 18000be4 <__udivdi3+0x80>
18000e92:	0000      	.short	0x0000
18000e94:	18015f34 	.long	0x18015f34

18000e98 <__umoddi3>:
18000e98:	14c6      	push      	r4-r9
18000e9a:	6d4b      	mov      	r5, r2
18000e9c:	6f4f      	mov      	r13, r3
18000e9e:	6d83      	mov      	r6, r0
18000ea0:	6f07      	mov      	r12, r1
18000ea2:	e923004a 	bnez      	r3, 0x18000f36	// 18000f36 <__umoddi3+0x9e>
18000ea6:	6484      	cmphs      	r1, r2
18000ea8:	086b      	bt      	0x18000f7e	// 18000f7e <__umoddi3+0xe6>
18000eaa:	eb02ffff 	cmphsi      	r2, 65536
18000eae:	0cc0      	bf      	0x1800102e	// 1800102e <__umoddi3+0x196>
18000eb0:	c6e05023 	bmaski      	r3, 24
18000eb4:	648c      	cmphs      	r3, r2
18000eb6:	ea0d0018 	movi      	r13, 24
18000eba:	3310      	movi      	r3, 16
18000ebc:	c5a30c40 	inct      	r13, r3, 0
18000ec0:	0281      	lrw      	r4, 0x18015f34	// 180011b8 <__umoddi3+0x320>
18000ec2:	c5a24043 	lsr      	r3, r2, r13
18000ec6:	d0640023 	ldr.b      	r3, (r4, r3 << 0)
18000eca:	634c      	addu      	r13, r3
18000ecc:	3420      	movi      	r4, 32
18000ece:	6136      	subu      	r4, r13
18000ed0:	e904000b 	bez      	r4, 0x18000ee6	// 18000ee6 <__umoddi3+0x4e>
18000ed4:	7050      	lsl      	r1, r4
18000ed6:	c5a0404d 	lsr      	r13, r0, r13
18000eda:	c4824025 	lsl      	r5, r2, r4
18000ede:	c42d242c 	or      	r12, r13, r1
18000ee2:	c4804026 	lsl      	r6, r0, r4
18000ee6:	c605484d 	lsri      	r13, r5, 16
18000eea:	c5ac8021 	divu      	r1, r12, r13
18000eee:	c5a18422 	mult      	r2, r1, r13
18000ef2:	c40555e0 	zext      	r0, r5, 15, 0
18000ef6:	c44c0082 	subu      	r2, r12, r2
18000efa:	c4208423 	mult      	r3, r0, r1
18000efe:	4250      	lsli      	r2, r2, 16
18000f00:	4e30      	lsri      	r1, r6, 16
18000f02:	6c48      	or      	r1, r2
18000f04:	64c4      	cmphs      	r1, r3
18000f06:	0808      	bt      	0x18000f16	// 18000f16 <__umoddi3+0x7e>
18000f08:	6054      	addu      	r1, r5
18000f0a:	6544      	cmphs      	r1, r5
18000f0c:	0c05      	bf      	0x18000f16	// 18000f16 <__umoddi3+0x7e>
18000f0e:	5954      	addu      	r2, r1, r5
18000f10:	64c4      	cmphs      	r1, r3
18000f12:	c4220c20 	incf      	r1, r2, 0
18000f16:	604e      	subu      	r1, r3
18000f18:	c5a18023 	divu      	r3, r1, r13
18000f1c:	7f4c      	mult      	r13, r3
18000f1e:	6076      	subu      	r1, r13
18000f20:	7c0c      	mult      	r0, r3
18000f22:	4130      	lsli      	r1, r1, 16
18000f24:	c40655e3 	zext      	r3, r6, 15, 0
18000f28:	6cc4      	or      	r3, r1
18000f2a:	640c      	cmphs      	r3, r0
18000f2c:	0c69      	bf      	0x18000ffe	// 18000ffe <__umoddi3+0x166>
18000f2e:	5b01      	subu      	r0, r3, r0
18000f30:	7011      	lsr      	r0, r4
18000f32:	3100      	movi      	r1, 0
18000f34:	1486      	pop      	r4-r9
18000f36:	64c4      	cmphs      	r1, r3
18000f38:	0ffe      	bf      	0x18000f34	// 18000f34 <__umoddi3+0x9c>
18000f3a:	eb03ffff 	cmphsi      	r3, 65536
18000f3e:	0c6b      	bf      	0x18001014	// 18001014 <__umoddi3+0x17c>
18000f40:	c6e0502d 	bmaski      	r13, 24
18000f44:	64f4      	cmphs      	r13, r3
18000f46:	3518      	movi      	r5, 24
18000f48:	ea0d0010 	movi      	r13, 16
18000f4c:	c5a50c20 	incf      	r13, r5, 0
18000f50:	03a5      	lrw      	r5, 0x18015f34	// 180011b8 <__umoddi3+0x320>
18000f52:	c5a34044 	lsr      	r4, r3, r13
18000f56:	d0850025 	ldr.b      	r5, (r5, r4 << 0)
18000f5a:	6174      	addu      	r5, r13
18000f5c:	3420      	movi      	r4, 32
18000f5e:	6116      	subu      	r4, r5
18000f60:	e924006d 	bnez      	r4, 0x1800103a	// 1800103a <__umoddi3+0x1a2>
18000f64:	644c      	cmphs      	r3, r1
18000f66:	0c03      	bf      	0x18000f6c	// 18000f6c <__umoddi3+0xd4>
18000f68:	6480      	cmphs      	r0, r2
18000f6a:	0d20      	bf      	0x180011aa	// 180011aa <__umoddi3+0x312>
18000f6c:	5889      	subu      	r4, r0, r2
18000f6e:	6500      	cmphs      	r0, r4
18000f70:	c461008c 	subu      	r12, r1, r3
18000f74:	6443      	mvcv      	r1
18000f76:	6306      	subu      	r12, r1
18000f78:	6c13      	mov      	r0, r4
18000f7a:	6c73      	mov      	r1, r12
18000f7c:	1486      	pop      	r4-r9
18000f7e:	e9220005 	bnez      	r2, 0x18000f88	// 18000f88 <__umoddi3+0xf0>
18000f82:	3501      	movi      	r5, 1
18000f84:	c4458025 	divu      	r5, r5, r2
18000f88:	eb05ffff 	cmphsi      	r5, 65536
18000f8c:	0c4b      	bf      	0x18001022	// 18001022 <__umoddi3+0x18a>
18000f8e:	c6e05023 	bmaski      	r3, 24
18000f92:	654c      	cmphs      	r3, r5
18000f94:	ea0d0018 	movi      	r13, 24
18000f98:	3310      	movi      	r3, 16
18000f9a:	c5a30c40 	inct      	r13, r3, 0
18000f9e:	0358      	lrw      	r2, 0x18015f34	// 180011b8 <__umoddi3+0x320>
18000fa0:	c5a54043 	lsr      	r3, r5, r13
18000fa4:	d0620023 	ldr.b      	r3, (r2, r3 << 0)
18000fa8:	634c      	addu      	r13, r3
18000faa:	3420      	movi      	r4, 32
18000fac:	6136      	subu      	r4, r13
18000fae:	e92400af 	bnez      	r4, 0x1800110c	// 1800110c <__umoddi3+0x274>
18000fb2:	c4a1008c 	subu      	r12, r1, r5
18000fb6:	4df0      	lsri      	r7, r5, 16
18000fb8:	c40555e2 	zext      	r2, r5, 15, 0
18000fbc:	c4ec8021 	divu      	r1, r12, r7
18000fc0:	c4e18423 	mult      	r3, r1, r7
18000fc4:	630e      	subu      	r12, r3
18000fc6:	c60c482c 	lsli      	r12, r12, 16
18000fca:	c4418423 	mult      	r3, r1, r2
18000fce:	4e30      	lsri      	r1, r6, 16
18000fd0:	6c70      	or      	r1, r12
18000fd2:	64c4      	cmphs      	r1, r3
18000fd4:	0808      	bt      	0x18000fe4	// 18000fe4 <__umoddi3+0x14c>
18000fd6:	6054      	addu      	r1, r5
18000fd8:	6544      	cmphs      	r1, r5
18000fda:	0c05      	bf      	0x18000fe4	// 18000fe4 <__umoddi3+0x14c>
18000fdc:	5914      	addu      	r0, r1, r5
18000fde:	64c4      	cmphs      	r1, r3
18000fe0:	c4200c20 	incf      	r1, r0, 0
18000fe4:	604e      	subu      	r1, r3
18000fe6:	c4e18020 	divu      	r0, r1, r7
18000fea:	7dc0      	mult      	r7, r0
18000fec:	605e      	subu      	r1, r7
18000fee:	4130      	lsli      	r1, r1, 16
18000ff0:	c40655e6 	zext      	r6, r6, 15, 0
18000ff4:	7c08      	mult      	r0, r2
18000ff6:	c4c12423 	or      	r3, r1, r6
18000ffa:	640c      	cmphs      	r3, r0
18000ffc:	0808      	bt      	0x1800100c	// 1800100c <__umoddi3+0x174>
18000ffe:	60d4      	addu      	r3, r5
18001000:	654c      	cmphs      	r3, r5
18001002:	0c05      	bf      	0x1800100c	// 1800100c <__umoddi3+0x174>
18001004:	614c      	addu      	r5, r3
18001006:	640c      	cmphs      	r3, r0
18001008:	c4650c20 	incf      	r3, r5, 0
1800100c:	5b01      	subu      	r0, r3, r0
1800100e:	7011      	lsr      	r0, r4
18001010:	3100      	movi      	r1, 0
18001012:	1486      	pop      	r4-r9
18001014:	eb0300ff 	cmphsi      	r3, 256
18001018:	c4000505 	mvc      	r5
1800101c:	c465482d 	lsli      	r13, r5, 3
18001020:	0798      	br      	0x18000f50	// 18000f50 <__umoddi3+0xb8>
18001022:	eb0500ff 	cmphsi      	r5, 256
18001026:	3308      	movi      	r3, 8
18001028:	c5a30c40 	inct      	r13, r3, 0
1800102c:	07b9      	br      	0x18000f9e	// 18000f9e <__umoddi3+0x106>
1800102e:	eb0200ff 	cmphsi      	r2, 256
18001032:	3308      	movi      	r3, 8
18001034:	c5a30c40 	inct      	r13, r3, 0
18001038:	0744      	br      	0x18000ec0	// 18000ec0 <__umoddi3+0x28>
1800103a:	70d0      	lsl      	r3, r4
1800103c:	c4a24047 	lsr      	r7, r2, r5
18001040:	6dcc      	or      	r7, r3
18001042:	c4a14046 	lsr      	r6, r1, r5
18001046:	c481402c 	lsl      	r12, r1, r4
1800104a:	c4a04041 	lsr      	r1, r0, r5
1800104e:	6c70      	or      	r1, r12
18001050:	c607484c 	lsri      	r12, r7, 16
18001054:	c5868028 	divu      	r8, r6, r12
18001058:	c4824023 	lsl      	r3, r2, r4
1800105c:	c5888422 	mult      	r2, r8, r12
18001060:	618a      	subu      	r6, r2
18001062:	c40755ed 	zext      	r13, r7, 15, 0
18001066:	46d0      	lsli      	r6, r6, 16
18001068:	4950      	lsri      	r2, r1, 16
1800106a:	c50d8429 	mult      	r9, r13, r8
1800106e:	6c98      	or      	r2, r6
18001070:	6648      	cmphs      	r2, r9
18001072:	7010      	lsl      	r0, r4
18001074:	0807      	bt      	0x18001082	// 18001082 <__umoddi3+0x1ea>
18001076:	609c      	addu      	r2, r7
18001078:	65c8      	cmphs      	r2, r7
1800107a:	e4c81000 	subi      	r6, r8, 1
1800107e:	088a      	bt      	0x18001192	// 18001192 <__umoddi3+0x2fa>
18001080:	6e1b      	mov      	r8, r6
18001082:	60a6      	subu      	r2, r9
18001084:	c5828026 	divu      	r6, r2, r12
18001088:	7f18      	mult      	r12, r6
1800108a:	60b2      	subu      	r2, r12
1800108c:	4250      	lsli      	r2, r2, 16
1800108e:	c40155e1 	zext      	r1, r1, 15, 0
18001092:	7f58      	mult      	r13, r6
18001094:	6c48      	or      	r1, r2
18001096:	6744      	cmphs      	r1, r13
18001098:	0806      	bt      	0x180010a4	// 180010a4 <__umoddi3+0x20c>
1800109a:	605c      	addu      	r1, r7
1800109c:	65c4      	cmphs      	r1, r7
1800109e:	5e43      	subi      	r2, r6, 1
180010a0:	0874      	bt      	0x18001188	// 18001188 <__umoddi3+0x2f0>
180010a2:	6d8b      	mov      	r6, r2
180010a4:	c6084822 	lsli      	r2, r8, 16
180010a8:	6c98      	or      	r2, r6
180010aa:	c40255e8 	zext      	r8, r2, 15, 0
180010ae:	c603484c 	lsri      	r12, r3, 16
180010b2:	4a50      	lsri      	r2, r2, 16
180010b4:	c5a1008d 	subu      	r13, r1, r13
180010b8:	c40355e1 	zext      	r1, r3, 15, 0
180010bc:	c4288426 	mult      	r6, r8, r1
180010c0:	7c48      	mult      	r1, r2
180010c2:	7e30      	mult      	r8, r12
180010c4:	7cb0      	mult      	r2, r12
180010c6:	6204      	addu      	r8, r1
180010c8:	c606484c 	lsri      	r12, r6, 16
180010cc:	6320      	addu      	r12, r8
180010ce:	6470      	cmphs      	r12, r1
180010d0:	0804      	bt      	0x180010d8	// 180010d8 <__umoddi3+0x240>
180010d2:	ea210001 	movih      	r1, 1
180010d6:	6084      	addu      	r2, r1
180010d8:	c60c4841 	lsri      	r1, r12, 16
180010dc:	6048      	addu      	r1, r2
180010de:	6474      	cmphs      	r13, r1
180010e0:	c60c482c 	lsli      	r12, r12, 16
180010e4:	c40655e6 	zext      	r6, r6, 15, 0
180010e8:	6318      	addu      	r12, r6
180010ea:	0c46      	bf      	0x18001176	// 18001176 <__umoddi3+0x2de>
180010ec:	6476      	cmpne      	r13, r1
180010ee:	0c60      	bf      	0x180011ae	// 180011ae <__umoddi3+0x316>
180010f0:	c42d0081 	subu      	r1, r13, r1
180010f4:	6cf3      	mov      	r3, r12
180010f6:	586d      	subu      	r3, r0, r3
180010f8:	64c0      	cmphs      	r0, r3
180010fa:	6743      	mvcv      	r13
180010fc:	6076      	subu      	r1, r13
180010fe:	c4a14025 	lsl      	r5, r1, r5
18001102:	c4834040 	lsr      	r0, r3, r4
18001106:	6c14      	or      	r0, r5
18001108:	7051      	lsr      	r1, r4
1800110a:	1486      	pop      	r4-r9
1800110c:	7150      	lsl      	r5, r4
1800110e:	c5a14048 	lsr      	r8, r1, r13
18001112:	4df0      	lsri      	r7, r5, 16
18001114:	c5a0404d 	lsr      	r13, r0, r13
18001118:	7050      	lsl      	r1, r4
1800111a:	6c74      	or      	r1, r13
1800111c:	c4e8802d 	divu      	r13, r8, r7
18001120:	c4ed8423 	mult      	r3, r13, r7
18001124:	c40555e2 	zext      	r2, r5, 15, 0
18001128:	620e      	subu      	r8, r3
1800112a:	c5a2842c 	mult      	r12, r2, r13
1800112e:	c6084828 	lsli      	r8, r8, 16
18001132:	c601484d 	lsri      	r13, r1, 16
18001136:	6f60      	or      	r13, r8
18001138:	6734      	cmphs      	r13, r12
1800113a:	c4804026 	lsl      	r6, r0, r4
1800113e:	0804      	bt      	0x18001146	// 18001146 <__umoddi3+0x2ae>
18001140:	6354      	addu      	r13, r5
18001142:	6574      	cmphs      	r13, r5
18001144:	082d      	bt      	0x1800119e	// 1800119e <__umoddi3+0x306>
18001146:	6372      	subu      	r13, r12
18001148:	c4ed8023 	divu      	r3, r13, r7
1800114c:	c4e3842c 	mult      	r12, r3, r7
18001150:	6372      	subu      	r13, r12
18001152:	c60d482c 	lsli      	r12, r13, 16
18001156:	c40155e1 	zext      	r1, r1, 15, 0
1800115a:	7cc8      	mult      	r3, r2
1800115c:	6f04      	or      	r12, r1
1800115e:	64f0      	cmphs      	r12, r3
18001160:	0809      	bt      	0x18001172	// 18001172 <__umoddi3+0x2da>
18001162:	6314      	addu      	r12, r5
18001164:	6570      	cmphs      	r12, r5
18001166:	0c06      	bf      	0x18001172	// 18001172 <__umoddi3+0x2da>
18001168:	c4ac0021 	addu      	r1, r12, r5
1800116c:	64f0      	cmphs      	r12, r3
1800116e:	c5810c20 	incf      	r12, r1, 0
18001172:	630e      	subu      	r12, r3
18001174:	0724      	br      	0x18000fbc	// 18000fbc <__umoddi3+0x124>
18001176:	c46c0083 	subu      	r3, r12, r3
1800117a:	64f0      	cmphs      	r12, r3
1800117c:	605e      	subu      	r1, r7
1800117e:	65c3      	mvcv      	r7
18001180:	605e      	subu      	r1, r7
18001182:	c42d0081 	subu      	r1, r13, r1
18001186:	07b8      	br      	0x180010f6	// 180010f6 <__umoddi3+0x25e>
18001188:	6744      	cmphs      	r1, r13
1800118a:	0b8c      	bt      	0x180010a2	// 180010a2 <__umoddi3+0x20a>
1800118c:	2e01      	subi      	r6, 2
1800118e:	605c      	addu      	r1, r7
18001190:	078a      	br      	0x180010a4	// 180010a4 <__umoddi3+0x20c>
18001192:	6648      	cmphs      	r2, r9
18001194:	0b76      	bt      	0x18001080	// 18001080 <__umoddi3+0x1e8>
18001196:	e5081001 	subi      	r8, r8, 2
1800119a:	609c      	addu      	r2, r7
1800119c:	0773      	br      	0x18001082	// 18001082 <__umoddi3+0x1ea>
1800119e:	c4ad0023 	addu      	r3, r13, r5
180011a2:	6734      	cmphs      	r13, r12
180011a4:	c5a30c20 	incf      	r13, r3, 0
180011a8:	07cf      	br      	0x18001146	// 18001146 <__umoddi3+0x2ae>
180011aa:	6d03      	mov      	r4, r0
180011ac:	06e6      	br      	0x18000f78	// 18000f78 <__umoddi3+0xe0>
180011ae:	6700      	cmphs      	r0, r12
180011b0:	0fe3      	bf      	0x18001176	// 18001176 <__umoddi3+0x2de>
180011b2:	6cf3      	mov      	r3, r12
180011b4:	3100      	movi      	r1, 0
180011b6:	07a0      	br      	0x180010f6	// 180010f6 <__umoddi3+0x25e>
180011b8:	18015f34 	.long	0x18015f34

180011bc <_fpadd_parts>:
180011bc:	14c8      	push      	r4-r11
180011be:	1423      	subi      	r14, r14, 12
180011c0:	9060      	ld.w      	r3, (r0, 0x0)
180011c2:	3501      	movi      	r5, 1
180011c4:	64d4      	cmphs      	r5, r3
180011c6:	0871      	bt      	0x180012a8	// 180012a8 <_fpadd_parts+0xec>
180011c8:	d9812000 	ld.w      	r12, (r1, 0x0)
180011cc:	6714      	cmphs      	r5, r12
180011ce:	086f      	bt      	0x180012ac	// 180012ac <_fpadd_parts+0xf0>
180011d0:	3b44      	cmpnei      	r3, 4
180011d2:	0cef      	bf      	0x180013b0	// 180013b0 <_fpadd_parts+0x1f4>
180011d4:	eb4c0004 	cmpnei      	r12, 4
180011d8:	0c6a      	bf      	0x180012ac	// 180012ac <_fpadd_parts+0xf0>
180011da:	eb4c0002 	cmpnei      	r12, 2
180011de:	0cc7      	bf      	0x1800136c	// 1800136c <_fpadd_parts+0x1b0>
180011e0:	3b42      	cmpnei      	r3, 2
180011e2:	0c65      	bf      	0x180012ac	// 180012ac <_fpadd_parts+0xf0>
180011e4:	9062      	ld.w      	r3, (r0, 0x8)
180011e6:	d9812002 	ld.w      	r12, (r1, 0x8)
180011ea:	c583008d 	subu      	r13, r3, r12
180011ee:	c40d0208 	abs      	r8, r13
180011f2:	eb28003f 	cmplti      	r8, 64
180011f6:	90c3      	ld.w      	r6, (r0, 0xc)
180011f8:	90e4      	ld.w      	r7, (r0, 0x10)
180011fa:	b8c0      	st.w      	r6, (r14, 0x0)
180011fc:	b8e1      	st.w      	r7, (r14, 0x4)
180011fe:	d9412003 	ld.w      	r10, (r1, 0xc)
18001202:	d9612004 	ld.w      	r11, (r1, 0x10)
18001206:	0856      	bt      	0x180012b2	// 180012b2 <_fpadd_parts+0xf6>
18001208:	64f1      	cmplt      	r12, r3
1800120a:	0cc9      	bf      	0x1800139c	// 1800139c <_fpadd_parts+0x1e0>
1800120c:	ea0a0000 	movi      	r10, 0
18001210:	ea0b0000 	movi      	r11, 0
18001214:	9001      	ld.w      	r0, (r0, 0x4)
18001216:	9121      	ld.w      	r1, (r1, 0x4)
18001218:	6442      	cmpne      	r0, r1
1800121a:	0c82      	bf      	0x1800131e	// 1800131e <_fpadd_parts+0x162>
1800121c:	d98e2000 	ld.w      	r12, (r14, 0x0)
18001220:	d9ae2001 	ld.w      	r13, (r14, 0x4)
18001224:	e90000b8 	bez      	r0, 0x18001394	// 18001394 <_fpadd_parts+0x1d8>
18001228:	6730      	cmphs      	r12, r12
1800122a:	c58a010c 	subc      	r12, r10, r12
1800122e:	c5ab010d 	subc      	r13, r11, r13
18001232:	e98d00c9 	blz      	r13, 0x180013c4	// 180013c4 <_fpadd_parts+0x208>
18001236:	3100      	movi      	r1, 0
18001238:	b221      	st.w      	r1, (r2, 0x4)
1800123a:	b262      	st.w      	r3, (r2, 0x8)
1800123c:	dd822003 	st.w      	r12, (r2, 0xc)
18001240:	dda22004 	st.w      	r13, (r2, 0x10)
18001244:	6c33      	mov      	r0, r12
18001246:	6c77      	mov      	r1, r13
18001248:	3840      	cmpnei      	r0, 0
1800124a:	c4210c81 	decf      	r1, r1, 1
1800124e:	2800      	subi      	r0, 1
18001250:	c7605023 	bmaski      	r3, 28
18001254:	644c      	cmphs      	r3, r1
18001256:	0c71      	bf      	0x18001338	// 18001338 <_fpadd_parts+0x17c>
18001258:	64c6      	cmpne      	r1, r3
1800125a:	0d0d      	bf      	0x18001474	// 18001474 <_fpadd_parts+0x2b8>
1800125c:	9262      	ld.w      	r3, (r2, 0x8)
1800125e:	3600      	movi      	r6, 0
18001260:	3700      	movi      	r7, 0
18001262:	ea0a0000 	movi      	r10, 0
18001266:	2b00      	subi      	r3, 1
18001268:	2e00      	subi      	r6, 1
1800126a:	2f00      	subi      	r7, 1
1800126c:	c7605028 	bmaski      	r8, 28
18001270:	e54a1001 	subi      	r10, r10, 2
18001274:	0403      	br      	0x1800127a	// 1800127a <_fpadd_parts+0xbe>
18001276:	6606      	cmpne      	r1, r8
18001278:	0c8b      	bf      	0x1800138e	// 1800138e <_fpadd_parts+0x1d2>
1800127a:	6511      	cmplt      	r4, r4
1800127c:	c58c0044 	addc      	r4, r12, r12
18001280:	c5ad0045 	addc      	r5, r13, r13
18001284:	6401      	cmplt      	r0, r0
18001286:	c4c40040 	addc      	r0, r4, r6
1800128a:	c4e50041 	addc      	r1, r5, r7
1800128e:	6460      	cmphs      	r8, r1
18001290:	6e4f      	mov      	r9, r3
18001292:	6f13      	mov      	r12, r4
18001294:	6f57      	mov      	r13, r5
18001296:	2b00      	subi      	r3, 1
18001298:	0bef      	bt      	0x18001276	// 18001276 <_fpadd_parts+0xba>
1800129a:	3303      	movi      	r3, 3
1800129c:	b283      	st.w      	r4, (r2, 0xc)
1800129e:	b2a4      	st.w      	r5, (r2, 0x10)
180012a0:	dd222002 	st.w      	r9, (r2, 0x8)
180012a4:	b260      	st.w      	r3, (r2, 0x0)
180012a6:	6c0b      	mov      	r0, r2
180012a8:	1403      	addi      	r14, r14, 12
180012aa:	1488      	pop      	r4-r11
180012ac:	6c07      	mov      	r0, r1
180012ae:	1403      	addi      	r14, r14, 12
180012b0:	1488      	pop      	r4-r11
180012b2:	e96d009a 	blsz      	r13, 0x180013e6	// 180013e6 <_fpadd_parts+0x22a>
180012b6:	ea0d001f 	movi      	r13, 31
180012ba:	c42b4826 	lsli      	r6, r11, 1
180012be:	6362      	subu      	r13, r8
180012c0:	e588101f 	subi      	r12, r8, 32
180012c4:	c5a6402d 	lsl      	r13, r6, r13
180012c8:	c50a4046 	lsr      	r6, r10, r8
180012cc:	c7ec2880 	btsti      	r12, 31
180012d0:	c58b4049 	lsr      	r9, r11, r12
180012d4:	3400      	movi      	r4, 0
180012d6:	6db4      	or      	r6, r13
180012d8:	c4c90c20 	incf      	r6, r9, 0
180012dc:	6f53      	mov      	r13, r4
180012de:	c5854029 	lsl      	r9, r5, r12
180012e2:	c505402c 	lsl      	r12, r5, r8
180012e6:	c50b4047 	lsr      	r7, r11, r8
180012ea:	c5a90c20 	incf      	r13, r9, 0
180012ee:	c5840c20 	incf      	r12, r4, 0
180012f2:	c4e40c20 	incf      	r7, r4, 0
180012f6:	eb4c0000 	cmpnei      	r12, 0
180012fa:	c5ad0c81 	decf      	r13, r13, 1
180012fe:	e58c1000 	subi      	r12, r12, 1
18001302:	6b28      	and      	r12, r10
18001304:	6b6c      	and      	r13, r11
18001306:	6f34      	or      	r12, r13
18001308:	eb4c0000 	cmpnei      	r12, 0
1800130c:	9001      	ld.w      	r0, (r0, 0x4)
1800130e:	9121      	ld.w      	r1, (r1, 0x4)
18001310:	c400050a 	mvc      	r10
18001314:	6442      	cmpne      	r0, r1
18001316:	6ed3      	mov      	r11, r4
18001318:	6e98      	or      	r10, r6
1800131a:	6edc      	or      	r11, r7
1800131c:	0b80      	bt      	0x1800121c	// 1800121c <_fpadd_parts+0x60>
1800131e:	d98e2000 	ld.w      	r12, (r14, 0x0)
18001322:	d9ae2001 	ld.w      	r13, (r14, 0x4)
18001326:	6731      	cmplt      	r12, r12
18001328:	6329      	addc      	r12, r10
1800132a:	636d      	addc      	r13, r11
1800132c:	b201      	st.w      	r0, (r2, 0x4)
1800132e:	b262      	st.w      	r3, (r2, 0x8)
18001330:	dd822003 	st.w      	r12, (r2, 0xc)
18001334:	dda22004 	st.w      	r13, (r2, 0x10)
18001338:	3303      	movi      	r3, 3
1800133a:	b260      	st.w      	r3, (r2, 0x0)
1800133c:	c7805023 	bmaski      	r3, 29
18001340:	674c      	cmphs      	r3, r13
18001342:	0812      	bt      	0x18001366	// 18001366 <_fpadd_parts+0x1aa>
18001344:	c7ed4823 	lsli      	r3, r13, 31
18001348:	c42c4840 	lsri      	r0, r12, 1
1800134c:	6c0c      	or      	r0, r3
1800134e:	c42d4841 	lsri      	r1, r13, 1
18001352:	9262      	ld.w      	r3, (r2, 0x8)
18001354:	e48c2001 	andi      	r4, r12, 1
18001358:	3500      	movi      	r5, 0
1800135a:	6c10      	or      	r0, r4
1800135c:	6c54      	or      	r1, r5
1800135e:	2300      	addi      	r3, 1
18001360:	b203      	st.w      	r0, (r2, 0xc)
18001362:	b224      	st.w      	r1, (r2, 0x10)
18001364:	b262      	st.w      	r3, (r2, 0x8)
18001366:	6c0b      	mov      	r0, r2
18001368:	1403      	addi      	r14, r14, 12
1800136a:	1488      	pop      	r4-r11
1800136c:	3b42      	cmpnei      	r3, 2
1800136e:	0b9d      	bt      	0x180012a8	// 180012a8 <_fpadd_parts+0xec>
18001370:	b260      	st.w      	r3, (r2, 0x0)
18001372:	9061      	ld.w      	r3, (r0, 0x4)
18001374:	b261      	st.w      	r3, (r2, 0x4)
18001376:	9062      	ld.w      	r3, (r0, 0x8)
18001378:	b262      	st.w      	r3, (r2, 0x8)
1800137a:	9063      	ld.w      	r3, (r0, 0xc)
1800137c:	b263      	st.w      	r3, (r2, 0xc)
1800137e:	9064      	ld.w      	r3, (r0, 0x10)
18001380:	9121      	ld.w      	r1, (r1, 0x4)
18001382:	b264      	st.w      	r3, (r2, 0x10)
18001384:	9061      	ld.w      	r3, (r0, 0x4)
18001386:	68c4      	and      	r3, r1
18001388:	b261      	st.w      	r3, (r2, 0x4)
1800138a:	6c0b      	mov      	r0, r2
1800138c:	078e      	br      	0x180012a8	// 180012a8 <_fpadd_parts+0xec>
1800138e:	6428      	cmphs      	r10, r0
18001390:	0b75      	bt      	0x1800127a	// 1800127a <_fpadd_parts+0xbe>
18001392:	0784      	br      	0x1800129a	// 1800129a <_fpadd_parts+0xde>
18001394:	6730      	cmphs      	r12, r12
18001396:	632b      	subc      	r12, r10
18001398:	636f      	subc      	r13, r11
1800139a:	074c      	br      	0x18001232	// 18001232 <_fpadd_parts+0x76>
1800139c:	6cf3      	mov      	r3, r12
1800139e:	ea0d0000 	movi      	r13, 0
180013a2:	ea0c0000 	movi      	r12, 0
180013a6:	dd8e2000 	st.w      	r12, (r14, 0x0)
180013aa:	ddae2001 	st.w      	r13, (r14, 0x4)
180013ae:	0733      	br      	0x18001214	// 18001214 <_fpadd_parts+0x58>
180013b0:	eb4c0004 	cmpnei      	r12, 4
180013b4:	0b7a      	bt      	0x180012a8	// 180012a8 <_fpadd_parts+0xec>
180013b6:	9041      	ld.w      	r2, (r0, 0x4)
180013b8:	9161      	ld.w      	r3, (r1, 0x4)
180013ba:	64ca      	cmpne      	r2, r3
180013bc:	124b      	lrw      	r2, 0x18015f20	// 180014e8 <__subdf3+0x38>
180013be:	c4020c40 	inct      	r0, r2, 0
180013c2:	0773      	br      	0x180012a8	// 180012a8 <_fpadd_parts+0xec>
180013c4:	ea0a0000 	movi      	r10, 0
180013c8:	ea0b0000 	movi      	r11, 0
180013cc:	3101      	movi      	r1, 1
180013ce:	6730      	cmphs      	r12, r12
180013d0:	c58a010c 	subc      	r12, r10, r12
180013d4:	c5ab010d 	subc      	r13, r11, r13
180013d8:	b221      	st.w      	r1, (r2, 0x4)
180013da:	b262      	st.w      	r3, (r2, 0x8)
180013dc:	dd822003 	st.w      	r12, (r2, 0xc)
180013e0:	dda22004 	st.w      	r13, (r2, 0x10)
180013e4:	0730      	br      	0x18001244	// 18001244 <_fpadd_parts+0x88>
180013e6:	e90dff17 	bez      	r13, 0x18001214	// 18001214 <_fpadd_parts+0x58>
180013ea:	98c0      	ld.w      	r6, (r14, 0x0)
180013ec:	98e1      	ld.w      	r7, (r14, 0x4)
180013ee:	ea0d001f 	movi      	r13, 31
180013f2:	47c1      	lsli      	r6, r7, 1
180013f4:	6362      	subu      	r13, r8
180013f6:	c5a6402d 	lsl      	r13, r6, r13
180013fa:	ddae2002 	st.w      	r13, (r14, 0x8)
180013fe:	d9ae2000 	ld.w      	r13, (r14, 0x0)
18001402:	e588101f 	subi      	r12, r8, 32
18001406:	c50d4046 	lsr      	r6, r13, r8
1800140a:	d9ae2002 	ld.w      	r13, (r14, 0x8)
1800140e:	c7ec2880 	btsti      	r12, 31
18001412:	3400      	movi      	r4, 0
18001414:	c5874049 	lsr      	r9, r7, r12
18001418:	6db4      	or      	r6, r13
1800141a:	d9ae2001 	ld.w      	r13, (r14, 0x4)
1800141e:	c4c90c20 	incf      	r6, r9, 0
18001422:	c50d4047 	lsr      	r7, r13, r8
18001426:	c5854029 	lsl      	r9, r5, r12
1800142a:	6f53      	mov      	r13, r4
1800142c:	c505402c 	lsl      	r12, r5, r8
18001430:	c5a90c20 	incf      	r13, r9, 0
18001434:	c5840c20 	incf      	r12, r4, 0
18001438:	c4e40c20 	incf      	r7, r4, 0
1800143c:	60e0      	addu      	r3, r8
1800143e:	eb4c0000 	cmpnei      	r12, 0
18001442:	c5ad0c81 	decf      	r13, r13, 1
18001446:	e58c1000 	subi      	r12, r12, 1
1800144a:	d90e2000 	ld.w      	r8, (r14, 0x0)
1800144e:	d92e2001 	ld.w      	r9, (r14, 0x4)
18001452:	6a30      	and      	r8, r12
18001454:	6a74      	and      	r9, r13
18001456:	6f23      	mov      	r12, r8
18001458:	6f67      	mov      	r13, r9
1800145a:	6f34      	or      	r12, r13
1800145c:	eb4c0000 	cmpnei      	r12, 0
18001460:	c400050c 	mvc      	r12
18001464:	6f53      	mov      	r13, r4
18001466:	c5862424 	or      	r4, r6, r12
1800146a:	c5a72425 	or      	r5, r7, r13
1800146e:	b880      	st.w      	r4, (r14, 0x0)
18001470:	b8a1      	st.w      	r5, (r14, 0x4)
18001472:	06d1      	br      	0x18001214	// 18001214 <_fpadd_parts+0x58>
18001474:	3300      	movi      	r3, 0
18001476:	2b01      	subi      	r3, 2
18001478:	640c      	cmphs      	r3, r0
1800147a:	0af1      	bt      	0x1800125c	// 1800125c <_fpadd_parts+0xa0>
1800147c:	075e      	br      	0x18001338	// 18001338 <_fpadd_parts+0x17c>
	...

18001480 <__adddf3>:
18001480:	14d0      	push      	r15
18001482:	1433      	subi      	r14, r14, 76
18001484:	b800      	st.w      	r0, (r14, 0x0)
18001486:	b821      	st.w      	r1, (r14, 0x4)
18001488:	6c3b      	mov      	r0, r14
1800148a:	1904      	addi      	r1, r14, 16
1800148c:	b863      	st.w      	r3, (r14, 0xc)
1800148e:	b842      	st.w      	r2, (r14, 0x8)
18001490:	e000032a 	bsr      	0x18001ae4	// 18001ae4 <__unpack_d>
18001494:	1909      	addi      	r1, r14, 36
18001496:	1802      	addi      	r0, r14, 8
18001498:	e0000326 	bsr      	0x18001ae4	// 18001ae4 <__unpack_d>
1800149c:	1a0e      	addi      	r2, r14, 56
1800149e:	1909      	addi      	r1, r14, 36
180014a0:	1804      	addi      	r0, r14, 16
180014a2:	e3fffe8d 	bsr      	0x180011bc	// 180011bc <_fpadd_parts>
180014a6:	e0000257 	bsr      	0x18001954	// 18001954 <__pack_d>
180014aa:	1413      	addi      	r14, r14, 76
180014ac:	1490      	pop      	r15
	...

180014b0 <__subdf3>:
180014b0:	14d0      	push      	r15
180014b2:	1433      	subi      	r14, r14, 76
180014b4:	b800      	st.w      	r0, (r14, 0x0)
180014b6:	b821      	st.w      	r1, (r14, 0x4)
180014b8:	6c3b      	mov      	r0, r14
180014ba:	1904      	addi      	r1, r14, 16
180014bc:	b842      	st.w      	r2, (r14, 0x8)
180014be:	b863      	st.w      	r3, (r14, 0xc)
180014c0:	e0000312 	bsr      	0x18001ae4	// 18001ae4 <__unpack_d>
180014c4:	1909      	addi      	r1, r14, 36
180014c6:	1802      	addi      	r0, r14, 8
180014c8:	e000030e 	bsr      	0x18001ae4	// 18001ae4 <__unpack_d>
180014cc:	986a      	ld.w      	r3, (r14, 0x28)
180014ce:	e4634001 	xori      	r3, r3, 1
180014d2:	1a0e      	addi      	r2, r14, 56
180014d4:	1909      	addi      	r1, r14, 36
180014d6:	1804      	addi      	r0, r14, 16
180014d8:	b86a      	st.w      	r3, (r14, 0x28)
180014da:	e3fffe71 	bsr      	0x180011bc	// 180011bc <_fpadd_parts>
180014de:	e000023b 	bsr      	0x18001954	// 18001954 <__pack_d>
180014e2:	1413      	addi      	r14, r14, 76
180014e4:	1490      	pop      	r15
180014e6:	0000      	.short	0x0000
180014e8:	18015f20 	.long	0x18015f20

180014ec <__muldf3>:
180014ec:	14d8      	push      	r4-r11, r15
180014ee:	1436      	subi      	r14, r14, 88
180014f0:	b803      	st.w      	r0, (r14, 0xc)
180014f2:	b824      	st.w      	r1, (r14, 0x10)
180014f4:	1803      	addi      	r0, r14, 12
180014f6:	1907      	addi      	r1, r14, 28
180014f8:	b866      	st.w      	r3, (r14, 0x18)
180014fa:	b845      	st.w      	r2, (r14, 0x14)
180014fc:	e00002f4 	bsr      	0x18001ae4	// 18001ae4 <__unpack_d>
18001500:	190c      	addi      	r1, r14, 48
18001502:	1805      	addi      	r0, r14, 20
18001504:	e00002f0 	bsr      	0x18001ae4	// 18001ae4 <__unpack_d>
18001508:	9867      	ld.w      	r3, (r14, 0x1c)
1800150a:	3b01      	cmphsi      	r3, 2
1800150c:	0ca4      	bf      	0x18001654	// 18001654 <__muldf3+0x168>
1800150e:	984c      	ld.w      	r2, (r14, 0x30)
18001510:	3a01      	cmphsi      	r2, 2
18001512:	0c94      	bf      	0x1800163a	// 1800163a <__muldf3+0x14e>
18001514:	3b44      	cmpnei      	r3, 4
18001516:	0c9d      	bf      	0x18001650	// 18001650 <__muldf3+0x164>
18001518:	3a44      	cmpnei      	r2, 4
1800151a:	0c8e      	bf      	0x18001636	// 18001636 <__muldf3+0x14a>
1800151c:	3b42      	cmpnei      	r3, 2
1800151e:	0c9b      	bf      	0x18001654	// 18001654 <__muldf3+0x168>
18001520:	3a42      	cmpnei      	r2, 2
18001522:	0c8c      	bf      	0x1800163a	// 1800163a <__muldf3+0x14e>
18001524:	d98e200f 	ld.w      	r12, (r14, 0x3c)
18001528:	d90e200a 	ld.w      	r8, (r14, 0x28)
1800152c:	3300      	movi      	r3, 0
1800152e:	6c33      	mov      	r0, r12
18001530:	6ca3      	mov      	r2, r8
18001532:	6c4f      	mov      	r1, r3
18001534:	dd8e2002 	st.w      	r12, (r14, 0x8)
18001538:	d96e2010 	ld.w      	r11, (r14, 0x40)
1800153c:	e3fffaee 	bsr      	0x18000b18	// 18000b18 <__muldi3>
18001540:	3300      	movi      	r3, 0
18001542:	6ca3      	mov      	r2, r8
18001544:	6d83      	mov      	r6, r0
18001546:	6dc7      	mov      	r7, r1
18001548:	6c4f      	mov      	r1, r3
1800154a:	6c2f      	mov      	r0, r11
1800154c:	e3fffae6 	bsr      	0x18000b18	// 18000b18 <__muldi3>
18001550:	d94e200b 	ld.w      	r10, (r14, 0x2c)
18001554:	3300      	movi      	r3, 0
18001556:	6e03      	mov      	r8, r0
18001558:	6e47      	mov      	r9, r1
1800155a:	6caf      	mov      	r2, r11
1800155c:	6c4f      	mov      	r1, r3
1800155e:	6c2b      	mov      	r0, r10
18001560:	e3fffadc 	bsr      	0x18000b18	// 18000b18 <__muldi3>
18001564:	d98e2002 	ld.w      	r12, (r14, 0x8)
18001568:	3300      	movi      	r3, 0
1800156a:	b800      	st.w      	r0, (r14, 0x0)
1800156c:	b821      	st.w      	r1, (r14, 0x4)
1800156e:	6cb3      	mov      	r2, r12
18001570:	6c2b      	mov      	r0, r10
18001572:	6c4f      	mov      	r1, r3
18001574:	e3fffad2 	bsr      	0x18000b18	// 18000b18 <__muldi3>
18001578:	6401      	cmplt      	r0, r0
1800157a:	6021      	addc      	r0, r8
1800157c:	6065      	addc      	r1, r9
1800157e:	6644      	cmphs      	r1, r9
18001580:	0c80      	bf      	0x18001680	// 18001680 <__muldf3+0x194>
18001582:	6466      	cmpne      	r9, r1
18001584:	0c7c      	bf      	0x1800167c	// 1800167c <__muldf3+0x190>
18001586:	ea080000 	movi      	r8, 0
1800158a:	ea090000 	movi      	r9, 0
1800158e:	3200      	movi      	r2, 0
18001590:	6cc3      	mov      	r3, r0
18001592:	6489      	cmplt      	r2, r2
18001594:	6099      	addc      	r2, r6
18001596:	60dd      	addc      	r3, r7
18001598:	65cc      	cmphs      	r3, r7
1800159a:	0c6a      	bf      	0x1800166e	// 1800166e <__muldf3+0x182>
1800159c:	64de      	cmpne      	r7, r3
1800159e:	0c66      	bf      	0x1800166a	// 1800166a <__muldf3+0x17e>
180015a0:	6f07      	mov      	r12, r1
180015a2:	ea0d0000 	movi      	r13, 0
180015a6:	9800      	ld.w      	r0, (r14, 0x0)
180015a8:	9821      	ld.w      	r1, (r14, 0x4)
180015aa:	6401      	cmplt      	r0, r0
180015ac:	6031      	addc      	r0, r12
180015ae:	6075      	addc      	r1, r13
180015b0:	6621      	cmplt      	r8, r8
180015b2:	6201      	addc      	r8, r0
180015b4:	6245      	addc      	r9, r1
180015b6:	980e      	ld.w      	r0, (r14, 0x38)
180015b8:	9829      	ld.w      	r1, (r14, 0x24)
180015ba:	6040      	addu      	r1, r0
180015bc:	590e      	addi      	r0, r1, 4
180015be:	b813      	st.w      	r0, (r14, 0x4c)
180015c0:	d98e2008 	ld.w      	r12, (r14, 0x20)
180015c4:	980d      	ld.w      	r0, (r14, 0x34)
180015c6:	6432      	cmpne      	r12, r0
180015c8:	c780502a 	bmaski      	r10, 29
180015cc:	c4000500 	mvc      	r0
180015d0:	6668      	cmphs      	r10, r9
180015d2:	b812      	st.w      	r0, (r14, 0x48)
180015d4:	086f      	bt      	0x180016b2	// 180016b2 <__muldf3+0x1c6>
180015d6:	2104      	addi      	r1, 5
180015d8:	ea0c0000 	movi      	r12, 0
180015dc:	ea2d8000 	movih      	r13, 32768
180015e0:	e4082001 	andi      	r0, r8, 1
180015e4:	6ec7      	mov      	r11, r1
180015e6:	e900000a 	bez      	r0, 0x180015fa	// 180015fa <__muldf3+0x10e>
180015ea:	431f      	lsli      	r0, r3, 31
180015ec:	4a81      	lsri      	r4, r2, 1
180015ee:	6d00      	or      	r4, r0
180015f0:	4ba1      	lsri      	r5, r3, 1
180015f2:	c5842422 	or      	r2, r4, r12
180015f6:	c5a52423 	or      	r3, r5, r13
180015fa:	c4294840 	lsri      	r0, r9, 1
180015fe:	6428      	cmphs      	r10, r0
18001600:	c7e94827 	lsli      	r7, r9, 31
18001604:	c4284846 	lsri      	r6, r8, 1
18001608:	c4c72428 	or      	r8, r7, r6
1800160c:	6e43      	mov      	r9, r0
1800160e:	2100      	addi      	r1, 1
18001610:	0fe8      	bf      	0x180015e0	// 180015e0 <__muldf3+0xf4>
18001612:	dd6e2013 	st.w      	r11, (r14, 0x4c)
18001616:	e42820ff 	andi      	r1, r8, 255
1800161a:	eb410080 	cmpnei      	r1, 128
1800161e:	0c36      	bf      	0x1800168a	// 1800168a <__muldf3+0x19e>
18001620:	3303      	movi      	r3, 3
18001622:	dd0e2014 	st.w      	r8, (r14, 0x50)
18001626:	dd2e2015 	st.w      	r9, (r14, 0x54)
1800162a:	b871      	st.w      	r3, (r14, 0x44)
1800162c:	1811      	addi      	r0, r14, 68
1800162e:	e0000193 	bsr      	0x18001954	// 18001954 <__pack_d>
18001632:	1416      	addi      	r14, r14, 88
18001634:	1498      	pop      	r4-r11, r15
18001636:	3b42      	cmpnei      	r3, 2
18001638:	0c3b      	bf      	0x180016ae	// 180016ae <__muldf3+0x1c2>
1800163a:	986d      	ld.w      	r3, (r14, 0x34)
1800163c:	9848      	ld.w      	r2, (r14, 0x20)
1800163e:	64ca      	cmpne      	r2, r3
18001640:	c4000503 	mvc      	r3
18001644:	180c      	addi      	r0, r14, 48
18001646:	b86d      	st.w      	r3, (r14, 0x34)
18001648:	e0000186 	bsr      	0x18001954	// 18001954 <__pack_d>
1800164c:	1416      	addi      	r14, r14, 88
1800164e:	1498      	pop      	r4-r11, r15
18001650:	3a42      	cmpnei      	r2, 2
18001652:	0c2e      	bf      	0x180016ae	// 180016ae <__muldf3+0x1c2>
18001654:	9848      	ld.w      	r2, (r14, 0x20)
18001656:	986d      	ld.w      	r3, (r14, 0x34)
18001658:	64ca      	cmpne      	r2, r3
1800165a:	c4000503 	mvc      	r3
1800165e:	1807      	addi      	r0, r14, 28
18001660:	b868      	st.w      	r3, (r14, 0x20)
18001662:	e0000179 	bsr      	0x18001954	// 18001954 <__pack_d>
18001666:	1416      	addi      	r14, r14, 88
18001668:	1498      	pop      	r4-r11, r15
1800166a:	6588      	cmphs      	r2, r6
1800166c:	0b9a      	bt      	0x180015a0	// 180015a0 <__muldf3+0xb4>
1800166e:	e5080000 	addi      	r8, r8, 1
18001672:	eb480000 	cmpnei      	r8, 0
18001676:	c5290c21 	incf      	r9, r9, 1
1800167a:	0793      	br      	0x180015a0	// 180015a0 <__muldf3+0xb4>
1800167c:	6600      	cmphs      	r0, r8
1800167e:	0b84      	bt      	0x18001586	// 18001586 <__muldf3+0x9a>
18001680:	ea080000 	movi      	r8, 0
18001684:	ea090001 	movi      	r9, 1
18001688:	0783      	br      	0x1800158e	// 1800158e <__muldf3+0xa2>
1800168a:	e4282100 	andi      	r1, r8, 256
1800168e:	e921ffc9 	bnez      	r1, 0x18001620	// 18001620 <__muldf3+0x134>
18001692:	6c8c      	or      	r2, r3
18001694:	e902ffc6 	bez      	r2, 0x18001620	// 18001620 <__muldf3+0x134>
18001698:	3280      	movi      	r2, 128
1800169a:	3300      	movi      	r3, 0
1800169c:	3100      	movi      	r1, 0
1800169e:	6489      	cmplt      	r2, r2
180016a0:	60a1      	addc      	r2, r8
180016a2:	60e5      	addc      	r3, r9
180016a4:	29ff      	subi      	r1, 256
180016a6:	c4222028 	and      	r8, r2, r1
180016aa:	6e4f      	mov      	r9, r3
180016ac:	07ba      	br      	0x18001620	// 18001620 <__muldf3+0x134>
180016ae:	100f      	lrw      	r0, 0x18015f20	// 180016e8 <__muldf3+0x1fc>
180016b0:	07bf      	br      	0x1800162e	// 1800162e <__muldf3+0x142>
180016b2:	c760502c 	bmaski      	r12, 28
180016b6:	6670      	cmphs      	r12, r9
180016b8:	0faf      	bf      	0x18001616	// 18001616 <__muldf3+0x12a>
180016ba:	2102      	addi      	r1, 3
180016bc:	3401      	movi      	r4, 1
180016be:	3500      	movi      	r5, 0
180016c0:	6da3      	mov      	r6, r8
180016c2:	6de7      	mov      	r7, r9
180016c4:	6c07      	mov      	r0, r1
180016c6:	6621      	cmplt      	r8, r8
180016c8:	6219      	addc      	r8, r6
180016ca:	625d      	addc      	r9, r7
180016cc:	e9a30004 	bhsz      	r3, 0x180016d4	// 180016d4 <__muldf3+0x1e8>
180016d0:	6e10      	or      	r8, r4
180016d2:	6e54      	or      	r9, r5
180016d4:	6d8b      	mov      	r6, r2
180016d6:	6dcf      	mov      	r7, r3
180016d8:	6489      	cmplt      	r2, r2
180016da:	6099      	addc      	r2, r6
180016dc:	60dd      	addc      	r3, r7
180016de:	6670      	cmphs      	r12, r9
180016e0:	2900      	subi      	r1, 1
180016e2:	0bef      	bt      	0x180016c0	// 180016c0 <__muldf3+0x1d4>
180016e4:	b813      	st.w      	r0, (r14, 0x4c)
180016e6:	0798      	br      	0x18001616	// 18001616 <__muldf3+0x12a>
180016e8:	18015f20 	.long	0x18015f20

180016ec <__divdf3>:
180016ec:	14d6      	push      	r4-r9, r15
180016ee:	142e      	subi      	r14, r14, 56
180016f0:	b800      	st.w      	r0, (r14, 0x0)
180016f2:	b821      	st.w      	r1, (r14, 0x4)
180016f4:	6c3b      	mov      	r0, r14
180016f6:	1904      	addi      	r1, r14, 16
180016f8:	b863      	st.w      	r3, (r14, 0xc)
180016fa:	b842      	st.w      	r2, (r14, 0x8)
180016fc:	e00001f4 	bsr      	0x18001ae4	// 18001ae4 <__unpack_d>
18001700:	1909      	addi      	r1, r14, 36
18001702:	1802      	addi      	r0, r14, 8
18001704:	e00001f0 	bsr      	0x18001ae4	// 18001ae4 <__unpack_d>
18001708:	9864      	ld.w      	r3, (r14, 0x10)
1800170a:	3b01      	cmphsi      	r3, 2
1800170c:	0c51      	bf      	0x180017ae	// 180017ae <__divdf3+0xc2>
1800170e:	9829      	ld.w      	r1, (r14, 0x24)
18001710:	3201      	movi      	r2, 1
18001712:	6448      	cmphs      	r2, r1
18001714:	0873      	bt      	0x180017fa	// 180017fa <__divdf3+0x10e>
18001716:	9845      	ld.w      	r2, (r14, 0x14)
18001718:	980a      	ld.w      	r0, (r14, 0x28)
1800171a:	3b44      	cmpnei      	r3, 4
1800171c:	6c81      	xor      	r2, r0
1800171e:	b845      	st.w      	r2, (r14, 0x14)
18001720:	0c4c      	bf      	0x180017b8	// 180017b8 <__divdf3+0xcc>
18001722:	3b42      	cmpnei      	r3, 2
18001724:	0c4a      	bf      	0x180017b8	// 180017b8 <__divdf3+0xcc>
18001726:	3944      	cmpnei      	r1, 4
18001728:	0c4c      	bf      	0x180017c0	// 180017c0 <__divdf3+0xd4>
1800172a:	3942      	cmpnei      	r1, 2
1800172c:	0c63      	bf      	0x180017f2	// 180017f2 <__divdf3+0x106>
1800172e:	9807      	ld.w      	r0, (r14, 0x1c)
18001730:	9828      	ld.w      	r1, (r14, 0x20)
18001732:	98cc      	ld.w      	r6, (r14, 0x30)
18001734:	98ed      	ld.w      	r7, (r14, 0x34)
18001736:	9866      	ld.w      	r3, (r14, 0x18)
18001738:	984b      	ld.w      	r2, (r14, 0x2c)
1800173a:	65c4      	cmphs      	r1, r7
1800173c:	60ca      	subu      	r3, r2
1800173e:	b866      	st.w      	r3, (r14, 0x18)
18001740:	0c05      	bf      	0x1800174a	// 1800174a <__divdf3+0x5e>
18001742:	645e      	cmpne      	r7, r1
18001744:	080a      	bt      	0x18001758	// 18001758 <__divdf3+0x6c>
18001746:	6580      	cmphs      	r0, r6
18001748:	0808      	bt      	0x18001758	// 18001758 <__divdf3+0x6c>
1800174a:	6f03      	mov      	r12, r0
1800174c:	6f47      	mov      	r13, r1
1800174e:	2b00      	subi      	r3, 1
18001750:	6401      	cmplt      	r0, r0
18001752:	6031      	addc      	r0, r12
18001754:	6075      	addc      	r1, r13
18001756:	b866      	st.w      	r3, (r14, 0x18)
18001758:	ea0c003d 	movi      	r12, 61
1800175c:	3400      	movi      	r4, 0
1800175e:	3500      	movi      	r5, 0
18001760:	3200      	movi      	r2, 0
18001762:	ea231000 	movih      	r3, 4096
18001766:	65c4      	cmphs      	r1, r7
18001768:	0c0a      	bf      	0x1800177c	// 1800177c <__divdf3+0x90>
1800176a:	645e      	cmpne      	r7, r1
1800176c:	0803      	bt      	0x18001772	// 18001772 <__divdf3+0x86>
1800176e:	6580      	cmphs      	r0, r6
18001770:	0c06      	bf      	0x1800177c	// 1800177c <__divdf3+0x90>
18001772:	6d08      	or      	r4, r2
18001774:	6d4c      	or      	r5, r3
18001776:	6400      	cmphs      	r0, r0
18001778:	601b      	subc      	r0, r6
1800177a:	605f      	subc      	r1, r7
1800177c:	c7e34829 	lsli      	r9, r3, 31
18001780:	c4224848 	lsri      	r8, r2, 1
18001784:	c423484d 	lsri      	r13, r3, 1
18001788:	c5092422 	or      	r2, r9, r8
1800178c:	e58c1000 	subi      	r12, r12, 1
18001790:	6e03      	mov      	r8, r0
18001792:	6e47      	mov      	r9, r1
18001794:	6cf7      	mov      	r3, r13
18001796:	6401      	cmplt      	r0, r0
18001798:	6021      	addc      	r0, r8
1800179a:	6065      	addc      	r1, r9
1800179c:	e92cffe5 	bnez      	r12, 0x18001766	// 18001766 <__divdf3+0x7a>
180017a0:	e46420ff 	andi      	r3, r4, 255
180017a4:	eb430080 	cmpnei      	r3, 128
180017a8:	0c13      	bf      	0x180017ce	// 180017ce <__divdf3+0xe2>
180017aa:	b887      	st.w      	r4, (r14, 0x1c)
180017ac:	b8a8      	st.w      	r5, (r14, 0x20)
180017ae:	1804      	addi      	r0, r14, 16
180017b0:	e00000d2 	bsr      	0x18001954	// 18001954 <__pack_d>
180017b4:	140e      	addi      	r14, r14, 56
180017b6:	1496      	pop      	r4-r9, r15
180017b8:	644e      	cmpne      	r3, r1
180017ba:	0bfa      	bt      	0x180017ae	// 180017ae <__divdf3+0xc2>
180017bc:	1011      	lrw      	r0, 0x18015f20	// 18001800 <__divdf3+0x114>
180017be:	07f9      	br      	0x180017b0	// 180017b0 <__divdf3+0xc4>
180017c0:	3300      	movi      	r3, 0
180017c2:	3400      	movi      	r4, 0
180017c4:	b867      	st.w      	r3, (r14, 0x1c)
180017c6:	b888      	st.w      	r4, (r14, 0x20)
180017c8:	b866      	st.w      	r3, (r14, 0x18)
180017ca:	1804      	addi      	r0, r14, 16
180017cc:	07f2      	br      	0x180017b0	// 180017b0 <__divdf3+0xc4>
180017ce:	e4642100 	andi      	r3, r4, 256
180017d2:	e923ffec 	bnez      	r3, 0x180017aa	// 180017aa <__divdf3+0xbe>
180017d6:	6c04      	or      	r0, r1
180017d8:	e900ffe9 	bez      	r0, 0x180017aa	// 180017aa <__divdf3+0xbe>
180017dc:	3280      	movi      	r2, 128
180017de:	3300      	movi      	r3, 0
180017e0:	3100      	movi      	r1, 0
180017e2:	6489      	cmplt      	r2, r2
180017e4:	6091      	addc      	r2, r4
180017e6:	60d5      	addc      	r3, r5
180017e8:	29ff      	subi      	r1, 256
180017ea:	c4222024 	and      	r4, r2, r1
180017ee:	6d4f      	mov      	r5, r3
180017f0:	07dd      	br      	0x180017aa	// 180017aa <__divdf3+0xbe>
180017f2:	3304      	movi      	r3, 4
180017f4:	b864      	st.w      	r3, (r14, 0x10)
180017f6:	1804      	addi      	r0, r14, 16
180017f8:	07dc      	br      	0x180017b0	// 180017b0 <__divdf3+0xc4>
180017fa:	1809      	addi      	r0, r14, 36
180017fc:	07da      	br      	0x180017b0	// 180017b0 <__divdf3+0xc4>
180017fe:	0000      	.short	0x0000
18001800:	18015f20 	.long	0x18015f20

18001804 <__gtdf2>:
18001804:	14d0      	push      	r15
18001806:	142e      	subi      	r14, r14, 56
18001808:	b800      	st.w      	r0, (r14, 0x0)
1800180a:	b821      	st.w      	r1, (r14, 0x4)
1800180c:	6c3b      	mov      	r0, r14
1800180e:	1904      	addi      	r1, r14, 16
18001810:	b842      	st.w      	r2, (r14, 0x8)
18001812:	b863      	st.w      	r3, (r14, 0xc)
18001814:	e0000168 	bsr      	0x18001ae4	// 18001ae4 <__unpack_d>
18001818:	1909      	addi      	r1, r14, 36
1800181a:	1802      	addi      	r0, r14, 8
1800181c:	e0000164 	bsr      	0x18001ae4	// 18001ae4 <__unpack_d>
18001820:	9844      	ld.w      	r2, (r14, 0x10)
18001822:	3301      	movi      	r3, 1
18001824:	648c      	cmphs      	r3, r2
18001826:	080a      	bt      	0x1800183a	// 1800183a <__gtdf2+0x36>
18001828:	9849      	ld.w      	r2, (r14, 0x24)
1800182a:	648c      	cmphs      	r3, r2
1800182c:	0807      	bt      	0x1800183a	// 1800183a <__gtdf2+0x36>
1800182e:	1909      	addi      	r1, r14, 36
18001830:	1804      	addi      	r0, r14, 16
18001832:	e00001cb 	bsr      	0x18001bc8	// 18001bc8 <__fpcmp_parts_d>
18001836:	140e      	addi      	r14, r14, 56
18001838:	1490      	pop      	r15
1800183a:	3000      	movi      	r0, 0
1800183c:	2800      	subi      	r0, 1
1800183e:	140e      	addi      	r14, r14, 56
18001840:	1490      	pop      	r15
	...

18001844 <__ltdf2>:
18001844:	14d0      	push      	r15
18001846:	142e      	subi      	r14, r14, 56
18001848:	b800      	st.w      	r0, (r14, 0x0)
1800184a:	b821      	st.w      	r1, (r14, 0x4)
1800184c:	6c3b      	mov      	r0, r14
1800184e:	1904      	addi      	r1, r14, 16
18001850:	b863      	st.w      	r3, (r14, 0xc)
18001852:	b842      	st.w      	r2, (r14, 0x8)
18001854:	e0000148 	bsr      	0x18001ae4	// 18001ae4 <__unpack_d>
18001858:	1802      	addi      	r0, r14, 8
1800185a:	1909      	addi      	r1, r14, 36
1800185c:	e0000144 	bsr      	0x18001ae4	// 18001ae4 <__unpack_d>
18001860:	9864      	ld.w      	r3, (r14, 0x10)
18001862:	3001      	movi      	r0, 1
18001864:	64c0      	cmphs      	r0, r3
18001866:	0808      	bt      	0x18001876	// 18001876 <__ltdf2+0x32>
18001868:	9869      	ld.w      	r3, (r14, 0x24)
1800186a:	64c0      	cmphs      	r0, r3
1800186c:	0805      	bt      	0x18001876	// 18001876 <__ltdf2+0x32>
1800186e:	1909      	addi      	r1, r14, 36
18001870:	1804      	addi      	r0, r14, 16
18001872:	e00001ab 	bsr      	0x18001bc8	// 18001bc8 <__fpcmp_parts_d>
18001876:	140e      	addi      	r14, r14, 56
18001878:	1490      	pop      	r15
	...

1800187c <__floatsidf>:
1800187c:	14d0      	push      	r15
1800187e:	1425      	subi      	r14, r14, 20
18001880:	3303      	movi      	r3, 3
18001882:	b860      	st.w      	r3, (r14, 0x0)
18001884:	487f      	lsri      	r3, r0, 31
18001886:	b861      	st.w      	r3, (r14, 0x4)
18001888:	e9200009 	bnez      	r0, 0x1800189a	// 1800189a <__floatsidf+0x1e>
1800188c:	3302      	movi      	r3, 2
1800188e:	b860      	st.w      	r3, (r14, 0x0)
18001890:	6c3b      	mov      	r0, r14
18001892:	e0000061 	bsr      	0x18001954	// 18001954 <__pack_d>
18001896:	1405      	addi      	r14, r14, 20
18001898:	1490      	pop      	r15
1800189a:	e9a00008 	bhsz      	r0, 0x180018aa	// 180018aa <__floatsidf+0x2e>
1800189e:	ea238000 	movih      	r3, 32768
180018a2:	64c2      	cmpne      	r0, r3
180018a4:	0c1c      	bf      	0x180018dc	// 180018dc <__floatsidf+0x60>
180018a6:	3300      	movi      	r3, 0
180018a8:	5b01      	subu      	r0, r3, r0
180018aa:	c4007c42 	ff1      	r2, r0
180018ae:	e422001c 	addi      	r1, r2, 29
180018b2:	ea0c001f 	movi      	r12, 31
180018b6:	2a02      	subi      	r2, 3
180018b8:	4861      	lsri      	r3, r0, 1
180018ba:	6306      	subu      	r12, r1
180018bc:	c440402d 	lsl      	r13, r0, r2
180018c0:	3adf      	btsti      	r2, 31
180018c2:	70f1      	lsr      	r3, r12
180018c4:	c46d0c20 	incf      	r3, r13, 0
180018c8:	7004      	lsl      	r0, r1
180018ca:	b864      	st.w      	r3, (r14, 0x10)
180018cc:	3300      	movi      	r3, 0
180018ce:	c4030c20 	incf      	r0, r3, 0
180018d2:	333c      	movi      	r3, 60
180018d4:	60c6      	subu      	r3, r1
180018d6:	b803      	st.w      	r0, (r14, 0xc)
180018d8:	b862      	st.w      	r3, (r14, 0x8)
180018da:	07db      	br      	0x18001890	// 18001890 <__floatsidf+0x14>
180018dc:	3000      	movi      	r0, 0
180018de:	ea21c1e0 	movih      	r1, 49632
180018e2:	07da      	br      	0x18001896	// 18001896 <__floatsidf+0x1a>

180018e4 <__fixdfsi>:
180018e4:	14d0      	push      	r15
180018e6:	1427      	subi      	r14, r14, 28
180018e8:	b800      	st.w      	r0, (r14, 0x0)
180018ea:	b821      	st.w      	r1, (r14, 0x4)
180018ec:	6c3b      	mov      	r0, r14
180018ee:	1902      	addi      	r1, r14, 8
180018f0:	e00000fa 	bsr      	0x18001ae4	// 18001ae4 <__unpack_d>
180018f4:	9862      	ld.w      	r3, (r14, 0x8)
180018f6:	3202      	movi      	r2, 2
180018f8:	64c8      	cmphs      	r2, r3
180018fa:	082a      	bt      	0x1800194e	// 1800194e <__fixdfsi+0x6a>
180018fc:	3b44      	cmpnei      	r3, 4
180018fe:	0c06      	bf      	0x1800190a	// 1800190a <__fixdfsi+0x26>
18001900:	9804      	ld.w      	r0, (r14, 0x10)
18001902:	e9800026 	blz      	r0, 0x1800194e	// 1800194e <__fixdfsi+0x6a>
18001906:	383e      	cmplti      	r0, 31
18001908:	080a      	bt      	0x1800191c	// 1800191c <__fixdfsi+0x38>
1800190a:	9863      	ld.w      	r3, (r14, 0xc)
1800190c:	3b40      	cmpnei      	r3, 0
1800190e:	c4000500 	mvc      	r0
18001912:	c7c05023 	bmaski      	r3, 31
18001916:	600c      	addu      	r0, r3
18001918:	1407      	addi      	r14, r14, 28
1800191a:	1490      	pop      	r15
1800191c:	323c      	movi      	r2, 60
1800191e:	5a21      	subu      	r1, r2, r0
18001920:	e581101f 	subi      	r12, r1, 32
18001924:	9866      	ld.w      	r3, (r14, 0x18)
18001926:	321f      	movi      	r2, 31
18001928:	c5834040 	lsr      	r0, r3, r12
1800192c:	6086      	subu      	r2, r1
1800192e:	4361      	lsli      	r3, r3, 1
18001930:	70c8      	lsl      	r3, r2
18001932:	9845      	ld.w      	r2, (r14, 0x14)
18001934:	7085      	lsr      	r2, r1
18001936:	6c8c      	or      	r2, r3
18001938:	9863      	ld.w      	r3, (r14, 0xc)
1800193a:	c7ec2880 	btsti      	r12, 31
1800193e:	c4020c40 	inct      	r0, r2, 0
18001942:	e903ffeb 	bez      	r3, 0x18001918	// 18001918 <__fixdfsi+0x34>
18001946:	3300      	movi      	r3, 0
18001948:	5b01      	subu      	r0, r3, r0
1800194a:	1407      	addi      	r14, r14, 28
1800194c:	1490      	pop      	r15
1800194e:	3000      	movi      	r0, 0
18001950:	1407      	addi      	r14, r14, 28
18001952:	1490      	pop      	r15

18001954 <__pack_d>:
18001954:	14c5      	push      	r4-r8
18001956:	9020      	ld.w      	r1, (r0, 0x0)
18001958:	3901      	cmphsi      	r1, 2
1800195a:	9043      	ld.w      	r2, (r0, 0xc)
1800195c:	9064      	ld.w      	r3, (r0, 0x10)
1800195e:	d9a02001 	ld.w      	r13, (r0, 0x4)
18001962:	0c47      	bf      	0x180019f0	// 180019f0 <__pack_d+0x9c>
18001964:	3944      	cmpnei      	r1, 4
18001966:	0c40      	bf      	0x180019e6	// 180019e6 <__pack_d+0x92>
18001968:	3942      	cmpnei      	r1, 2
1800196a:	0c28      	bf      	0x180019ba	// 180019ba <__pack_d+0x66>
1800196c:	c4622421 	or      	r1, r2, r3
18001970:	e9010025 	bez      	r1, 0x180019ba	// 180019ba <__pack_d+0x66>
18001974:	9022      	ld.w      	r1, (r0, 0x8)
18001976:	ea0003fd 	movi      	r0, 1021
1800197a:	6c02      	nor      	r0, r0
1800197c:	6405      	cmplt      	r1, r0
1800197e:	0855      	bt      	0x18001a28	// 18001a28 <__pack_d+0xd4>
18001980:	eb2103ff 	cmplti      	r1, 1024
18001984:	0c31      	bf      	0x180019e6	// 180019e6 <__pack_d+0x92>
18001986:	e40220ff 	andi      	r0, r2, 255
1800198a:	eb400080 	cmpnei      	r0, 128
1800198e:	0c43      	bf      	0x18001a14	// 18001a14 <__pack_d+0xc0>
18001990:	347f      	movi      	r4, 127
18001992:	3500      	movi      	r5, 0
18001994:	6489      	cmplt      	r2, r2
18001996:	6091      	addc      	r2, r4
18001998:	60d5      	addc      	r3, r5
1800199a:	c7805020 	bmaski      	r0, 29
1800199e:	64c0      	cmphs      	r0, r3
180019a0:	0c19      	bf      	0x180019d2	// 180019d2 <__pack_d+0x7e>
180019a2:	e58103fe 	addi      	r12, r1, 1023
180019a6:	4b28      	lsri      	r1, r3, 8
180019a8:	4398      	lsli      	r4, r3, 24
180019aa:	4a08      	lsri      	r0, r2, 8
180019ac:	c4015663 	zext      	r3, r1, 19, 0
180019b0:	6c4f      	mov      	r1, r3
180019b2:	6c10      	or      	r0, r4
180019b4:	e46c27ff 	andi      	r3, r12, 2047
180019b8:	0404      	br      	0x180019c0	// 180019c0 <__pack_d+0x6c>
180019ba:	3300      	movi      	r3, 0
180019bc:	3000      	movi      	r0, 0
180019be:	3100      	movi      	r1, 0
180019c0:	3200      	movi      	r2, 0
180019c2:	c4415e60 	ins      	r2, r1, 19, 0
180019c6:	c4435d54 	ins      	r2, r3, 30, 20
180019ca:	c44d5c1f 	ins      	r2, r13, 31, 31
180019ce:	6c4b      	mov      	r1, r2
180019d0:	1485      	pop      	r4-r8
180019d2:	439f      	lsli      	r4, r3, 31
180019d4:	c422484c 	lsri      	r12, r2, 1
180019d8:	4b01      	lsri      	r0, r3, 1
180019da:	c5842422 	or      	r2, r4, r12
180019de:	6cc3      	mov      	r3, r0
180019e0:	e58103ff 	addi      	r12, r1, 1024
180019e4:	07e1      	br      	0x180019a6	// 180019a6 <__pack_d+0x52>
180019e6:	ea0307ff 	movi      	r3, 2047
180019ea:	3000      	movi      	r0, 0
180019ec:	3100      	movi      	r1, 0
180019ee:	07e9      	br      	0x180019c0	// 180019c0 <__pack_d+0x6c>
180019f0:	c703482c 	lsli      	r12, r3, 24
180019f4:	4a48      	lsri      	r2, r2, 8
180019f6:	c44c2420 	or      	r0, r12, r2
180019fa:	c5035741 	zext      	r1, r3, 26, 8
180019fe:	3200      	movi      	r2, 0
18001a00:	ea230008 	movih      	r3, 8
18001a04:	6c08      	or      	r0, r2
18001a06:	6c4c      	or      	r1, r3
18001a08:	c4015663 	zext      	r3, r1, 19, 0
18001a0c:	6c4f      	mov      	r1, r3
18001a0e:	ea0307ff 	movi      	r3, 2047
18001a12:	07d7      	br      	0x180019c0	// 180019c0 <__pack_d+0x6c>
18001a14:	e4022100 	andi      	r0, r2, 256
18001a18:	e900ffc1 	bez      	r0, 0x1800199a	// 1800199a <__pack_d+0x46>
18001a1c:	3480      	movi      	r4, 128
18001a1e:	3500      	movi      	r5, 0
18001a20:	6489      	cmplt      	r2, r2
18001a22:	6091      	addc      	r2, r4
18001a24:	60d5      	addc      	r3, r5
18001a26:	07ba      	br      	0x1800199a	// 1800199a <__pack_d+0x46>
18001a28:	5825      	subu      	r1, r0, r1
18001a2a:	eb210038 	cmplti      	r1, 57
18001a2e:	0fc6      	bf      	0x180019ba	// 180019ba <__pack_d+0x66>
18001a30:	341f      	movi      	r4, 31
18001a32:	c423482c 	lsli      	r12, r3, 1
18001a36:	6106      	subu      	r4, r1
18001a38:	e401101f 	subi      	r0, r1, 32
18001a3c:	7310      	lsl      	r12, r4
18001a3e:	c4224046 	lsr      	r6, r2, r1
18001a42:	38df      	btsti      	r0, 31
18001a44:	c4034045 	lsr      	r5, r3, r0
18001a48:	ea080000 	movi      	r8, 0
18001a4c:	6db0      	or      	r6, r12
18001a4e:	ea0c0001 	movi      	r12, 1
18001a52:	c4c50c20 	incf      	r6, r5, 0
18001a56:	c40c4020 	lsl      	r0, r12, r0
18001a5a:	6d63      	mov      	r5, r8
18001a5c:	c42c4024 	lsl      	r4, r12, r1
18001a60:	c4234047 	lsr      	r7, r3, r1
18001a64:	c4a00c20 	incf      	r5, r0, 0
18001a68:	c4880c20 	incf      	r4, r8, 0
18001a6c:	c4e80c20 	incf      	r7, r8, 0
18001a70:	3c40      	cmpnei      	r4, 0
18001a72:	c4a50c81 	decf      	r5, r5, 1
18001a76:	2c00      	subi      	r4, 1
18001a78:	6890      	and      	r2, r4
18001a7a:	68d4      	and      	r3, r5
18001a7c:	6c8c      	or      	r2, r3
18001a7e:	3a40      	cmpnei      	r2, 0
18001a80:	c4000502 	mvc      	r2
18001a84:	6ce3      	mov      	r3, r8
18001a86:	6d88      	or      	r6, r2
18001a88:	6dcc      	or      	r7, r3
18001a8a:	e46620ff 	andi      	r3, r6, 255
18001a8e:	eb430080 	cmpnei      	r3, 128
18001a92:	0814      	bt      	0x18001aba	// 18001aba <__pack_d+0x166>
18001a94:	e4662100 	andi      	r3, r6, 256
18001a98:	e9230023 	bnez      	r3, 0x18001ade	// 18001ade <__pack_d+0x18a>
18001a9c:	4758      	lsli      	r2, r7, 24
18001a9e:	4f28      	lsri      	r1, r7, 8
18001aa0:	4e08      	lsri      	r0, r6, 8
18001aa2:	6c08      	or      	r0, r2
18001aa4:	c4015662 	zext      	r2, r1, 19, 0
18001aa8:	6c4b      	mov      	r1, r2
18001aaa:	c7605022 	bmaski      	r2, 28
18001aae:	65c8      	cmphs      	r2, r7
18001ab0:	0c02      	bf      	0x18001ab4	// 18001ab4 <__pack_d+0x160>
18001ab2:	6f0f      	mov      	r12, r3
18001ab4:	e46c2001 	andi      	r3, r12, 1
18001ab8:	0784      	br      	0x180019c0	// 180019c0 <__pack_d+0x6c>
18001aba:	327f      	movi      	r2, 127
18001abc:	3300      	movi      	r3, 0
18001abe:	6599      	cmplt      	r6, r6
18001ac0:	6189      	addc      	r6, r2
18001ac2:	61cd      	addc      	r7, r3
18001ac4:	4778      	lsli      	r3, r7, 24
18001ac6:	4f28      	lsri      	r1, r7, 8
18001ac8:	4e08      	lsri      	r0, r6, 8
18001aca:	6c0c      	or      	r0, r3
18001acc:	c4015663 	zext      	r3, r1, 19, 0
18001ad0:	6c4f      	mov      	r1, r3
18001ad2:	c7605023 	bmaski      	r3, 28
18001ad6:	65cc      	cmphs      	r3, r7
18001ad8:	0fee      	bf      	0x18001ab4	// 18001ab4 <__pack_d+0x160>
18001ada:	6f23      	mov      	r12, r8
18001adc:	07ec      	br      	0x18001ab4	// 18001ab4 <__pack_d+0x160>
18001ade:	3280      	movi      	r2, 128
18001ae0:	07ee      	br      	0x18001abc	// 18001abc <__pack_d+0x168>
	...

18001ae4 <__unpack_d>:
18001ae4:	1421      	subi      	r14, r14, 4
18001ae6:	dd6e2000 	st.w      	r11, (r14, 0x0)
18001aea:	8863      	ld.h      	r3, (r0, 0x6)
18001aec:	8047      	ld.b      	r2, (r0, 0x7)
18001aee:	c48355c3 	zext      	r3, r3, 14, 4
18001af2:	d9802001 	ld.w      	r12, (r0, 0x4)
18001af6:	4a47      	lsri      	r2, r2, 7
18001af8:	d9a02000 	ld.w      	r13, (r0, 0x0)
18001afc:	c40c566c 	zext      	r12, r12, 19, 0
18001b00:	b141      	st.w      	r2, (r1, 0x4)
18001b02:	e9230025 	bnez      	r3, 0x18001b4c	// 18001b4c <__unpack_d+0x68>
18001b06:	c58d2423 	or      	r3, r13, r12
18001b0a:	e903003c 	bez      	r3, 0x18001b82	// 18001b82 <__unpack_d+0x9e>
18001b0e:	c70d4840 	lsri      	r0, r13, 24
18001b12:	c50c4823 	lsli      	r3, r12, 8
18001b16:	6cc0      	or      	r3, r0
18001b18:	3003      	movi      	r0, 3
18001b1a:	c50d4822 	lsli      	r2, r13, 8
18001b1e:	b100      	st.w      	r0, (r1, 0x0)
18001b20:	c760502d 	bmaski      	r13, 28
18001b24:	ea0003fe 	movi      	r0, 1022
18001b28:	6c02      	nor      	r0, r0
18001b2a:	6ecb      	mov      	r11, r2
18001b2c:	6f0f      	mov      	r12, r3
18001b2e:	6489      	cmplt      	r2, r2
18001b30:	60ad      	addc      	r2, r11
18001b32:	60f1      	addc      	r3, r12
18001b34:	64f4      	cmphs      	r13, r3
18001b36:	6f03      	mov      	r12, r0
18001b38:	2800      	subi      	r0, 1
18001b3a:	0bf8      	bt      	0x18001b2a	// 18001b2a <__unpack_d+0x46>
18001b3c:	dd812002 	st.w      	r12, (r1, 0x8)
18001b40:	b143      	st.w      	r2, (r1, 0xc)
18001b42:	b164      	st.w      	r3, (r1, 0x10)
18001b44:	d96e2000 	ld.w      	r11, (r14, 0x0)
18001b48:	1401      	addi      	r14, r14, 4
18001b4a:	783c      	jmp      	r15
18001b4c:	eb4307ff 	cmpnei      	r3, 2047
18001b50:	0c1f      	bf      	0x18001b8e	// 18001b8e <__unpack_d+0xaa>
18001b52:	e46313fe 	subi      	r3, r3, 1023
18001b56:	b162      	st.w      	r3, (r1, 0x8)
18001b58:	3303      	movi      	r3, 3
18001b5a:	c70d4840 	lsri      	r0, r13, 24
18001b5e:	b160      	st.w      	r3, (r1, 0x0)
18001b60:	c50c4823 	lsli      	r3, r12, 8
18001b64:	c50d4822 	lsli      	r2, r13, 8
18001b68:	6cc0      	or      	r3, r0
18001b6a:	ea0c0000 	movi      	r12, 0
18001b6e:	ea2d1000 	movih      	r13, 4096
18001b72:	6cb0      	or      	r2, r12
18001b74:	6cf4      	or      	r3, r13
18001b76:	b143      	st.w      	r2, (r1, 0xc)
18001b78:	b164      	st.w      	r3, (r1, 0x10)
18001b7a:	d96e2000 	ld.w      	r11, (r14, 0x0)
18001b7e:	1401      	addi      	r14, r14, 4
18001b80:	783c      	jmp      	r15
18001b82:	3302      	movi      	r3, 2
18001b84:	b160      	st.w      	r3, (r1, 0x0)
18001b86:	d96e2000 	ld.w      	r11, (r14, 0x0)
18001b8a:	1401      	addi      	r14, r14, 4
18001b8c:	783c      	jmp      	r15
18001b8e:	c58d2423 	or      	r3, r13, r12
18001b92:	e9030018 	bez      	r3, 0x18001bc2	// 18001bc2 <__unpack_d+0xde>
18001b96:	ea230008 	movih      	r3, 8
18001b9a:	68f0      	and      	r3, r12
18001b9c:	3b40      	cmpnei      	r3, 0
18001b9e:	3201      	movi      	r2, 1
18001ba0:	c4620c40 	inct      	r3, r2, 0
18001ba4:	b160      	st.w      	r3, (r1, 0x0)
18001ba6:	c50c482c 	lsli      	r12, r12, 8
18001baa:	c70d4843 	lsri      	r3, r13, 24
18001bae:	6f0c      	or      	r12, r3
18001bb0:	c50d482d 	lsli      	r13, r13, 8
18001bb4:	c76c282c 	bclri      	r12, r12, 27
18001bb8:	dda12003 	st.w      	r13, (r1, 0xc)
18001bbc:	dd812004 	st.w      	r12, (r1, 0x10)
18001bc0:	07dd      	br      	0x18001b7a	// 18001b7a <__unpack_d+0x96>
18001bc2:	3304      	movi      	r3, 4
18001bc4:	b160      	st.w      	r3, (r1, 0x0)
18001bc6:	07da      	br      	0x18001b7a	// 18001b7a <__unpack_d+0x96>

18001bc8 <__fpcmp_parts_d>:
18001bc8:	9040      	ld.w      	r2, (r0, 0x0)
18001bca:	3301      	movi      	r3, 1
18001bcc:	648c      	cmphs      	r3, r2
18001bce:	0830      	bt      	0x18001c2e	// 18001c2e <__fpcmp_parts_d+0x66>
18001bd0:	d9812000 	ld.w      	r12, (r1, 0x0)
18001bd4:	670c      	cmphs      	r3, r12
18001bd6:	082c      	bt      	0x18001c2e	// 18001c2e <__fpcmp_parts_d+0x66>
18001bd8:	3a44      	cmpnei      	r2, 4
18001bda:	0c1f      	bf      	0x18001c18	// 18001c18 <__fpcmp_parts_d+0x50>
18001bdc:	eb4c0004 	cmpnei      	r12, 4
18001be0:	0c14      	bf      	0x18001c08	// 18001c08 <__fpcmp_parts_d+0x40>
18001be2:	3a42      	cmpnei      	r2, 2
18001be4:	0c0f      	bf      	0x18001c02	// 18001c02 <__fpcmp_parts_d+0x3a>
18001be6:	eb4c0002 	cmpnei      	r12, 2
18001bea:	0c1a      	bf      	0x18001c1e	// 18001c1e <__fpcmp_parts_d+0x56>
18001bec:	9041      	ld.w      	r2, (r0, 0x4)
18001bee:	d9812001 	ld.w      	r12, (r1, 0x4)
18001bf2:	670a      	cmpne      	r2, r12
18001bf4:	0c1f      	bf      	0x18001c32	// 18001c32 <__fpcmp_parts_d+0x6a>
18001bf6:	3000      	movi      	r0, 0
18001bf8:	2800      	subi      	r0, 1
18001bfa:	3a40      	cmpnei      	r2, 0
18001bfc:	c4030c20 	incf      	r0, r3, 0
18001c00:	783c      	jmp      	r15
18001c02:	eb4c0002 	cmpnei      	r12, 2
18001c06:	0c2a      	bf      	0x18001c5a	// 18001c5a <__fpcmp_parts_d+0x92>
18001c08:	9141      	ld.w      	r2, (r1, 0x4)
18001c0a:	3300      	movi      	r3, 0
18001c0c:	2b00      	subi      	r3, 1
18001c0e:	3a40      	cmpnei      	r2, 0
18001c10:	3001      	movi      	r0, 1
18001c12:	c4030c20 	incf      	r0, r3, 0
18001c16:	783c      	jmp      	r15
18001c18:	eb4c0004 	cmpnei      	r12, 4
18001c1c:	0c21      	bf      	0x18001c5e	// 18001c5e <__fpcmp_parts_d+0x96>
18001c1e:	9061      	ld.w      	r3, (r0, 0x4)
18001c20:	3000      	movi      	r0, 0
18001c22:	3b40      	cmpnei      	r3, 0
18001c24:	2800      	subi      	r0, 1
18001c26:	3301      	movi      	r3, 1
18001c28:	c4030c20 	incf      	r0, r3, 0
18001c2c:	783c      	jmp      	r15
18001c2e:	6c0f      	mov      	r0, r3
18001c30:	783c      	jmp      	r15
18001c32:	d9a02002 	ld.w      	r13, (r0, 0x8)
18001c36:	d9812002 	ld.w      	r12, (r1, 0x8)
18001c3a:	6771      	cmplt      	r12, r13
18001c3c:	0bdd      	bt      	0x18001bf6	// 18001bf6 <__fpcmp_parts_d+0x2e>
18001c3e:	6735      	cmplt      	r13, r12
18001c40:	0c13      	bf      	0x18001c66	// 18001c66 <__fpcmp_parts_d+0x9e>
18001c42:	3000      	movi      	r0, 0
18001c44:	2800      	subi      	r0, 1
18001c46:	3a40      	cmpnei      	r2, 0
18001c48:	c4030c40 	inct      	r0, r3, 0
18001c4c:	07da      	br      	0x18001c00	// 18001c00 <__fpcmp_parts_d+0x38>
18001c4e:	644c      	cmphs      	r3, r1
18001c50:	0fdd      	bf      	0x18001c0a	// 18001c0a <__fpcmp_parts_d+0x42>
18001c52:	64c6      	cmpne      	r1, r3
18001c54:	0803      	bt      	0x18001c5a	// 18001c5a <__fpcmp_parts_d+0x92>
18001c56:	6430      	cmphs      	r12, r0
18001c58:	0fd9      	bf      	0x18001c0a	// 18001c0a <__fpcmp_parts_d+0x42>
18001c5a:	3000      	movi      	r0, 0
18001c5c:	07d2      	br      	0x18001c00	// 18001c00 <__fpcmp_parts_d+0x38>
18001c5e:	9161      	ld.w      	r3, (r1, 0x4)
18001c60:	9001      	ld.w      	r0, (r0, 0x4)
18001c62:	5b01      	subu      	r0, r3, r0
18001c64:	07ce      	br      	0x18001c00	// 18001c00 <__fpcmp_parts_d+0x38>
18001c66:	9064      	ld.w      	r3, (r0, 0x10)
18001c68:	d9802003 	ld.w      	r12, (r0, 0xc)
18001c6c:	9103      	ld.w      	r0, (r1, 0xc)
18001c6e:	9124      	ld.w      	r1, (r1, 0x10)
18001c70:	64c4      	cmphs      	r1, r3
18001c72:	0c05      	bf      	0x18001c7c	// 18001c7c <__fpcmp_parts_d+0xb4>
18001c74:	644e      	cmpne      	r3, r1
18001c76:	0bec      	bt      	0x18001c4e	// 18001c4e <__fpcmp_parts_d+0x86>
18001c78:	6700      	cmphs      	r0, r12
18001c7a:	0bea      	bt      	0x18001c4e	// 18001c4e <__fpcmp_parts_d+0x86>
18001c7c:	3000      	movi      	r0, 0
18001c7e:	2800      	subi      	r0, 1
18001c80:	3a40      	cmpnei      	r2, 0
18001c82:	3301      	movi      	r3, 1
18001c84:	c4030c20 	incf      	r0, r3, 0
18001c88:	07bc      	br      	0x18001c00	// 18001c00 <__fpcmp_parts_d+0x38>
	...

18001c8c <__cskyvprintfvsprintf>:
18001c8c:	14d0      	push      	r15
18001c8e:	6ccb      	mov      	r3, r2
18001c90:	6c87      	mov      	r2, r1
18001c92:	3100      	movi      	r1, 0
18001c94:	2900      	subi      	r1, 1
18001c96:	e0000031 	bsr      	0x18001cf8	// 18001cf8 <__cskyvprintfvsnprintf>
18001c9a:	1490      	pop      	r15

18001c9c <__cskyvprintfsprintf>:
18001c9c:	1423      	subi      	r14, r14, 12
18001c9e:	b862      	st.w      	r3, (r14, 0x8)
18001ca0:	b841      	st.w      	r2, (r14, 0x4)
18001ca2:	b820      	st.w      	r1, (r14, 0x0)
18001ca4:	14d0      	push      	r15
18001ca6:	1a02      	addi      	r2, r14, 8
18001ca8:	9821      	ld.w      	r1, (r14, 0x4)
18001caa:	e3fffff1 	bsr      	0x18001c8c	// 18001c8c <__cskyvprintfvsprintf>
18001cae:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18001cb2:	1404      	addi      	r14, r14, 16
18001cb4:	783c      	jmp      	r15
	...

18001cb8 <swrite>:
18001cb8:	14d3      	push      	r4-r6, r15
18001cba:	9261      	ld.w      	r3, (r2, 0x4)
18001cbc:	6d4b      	mov      	r5, r2
18001cbe:	9242      	ld.w      	r2, (r2, 0x8)
18001cc0:	608e      	subu      	r2, r3
18001cc2:	6d87      	mov      	r6, r1
18001cc4:	e9020018 	bez      	r2, 0x18001cf4	// 18001cf4 <swrite+0x3c>
18001cc8:	6484      	cmphs      	r1, r2
18001cca:	d9852000 	ld.w      	r12, (r5, 0x0)
18001cce:	c4410c20 	incf      	r2, r1, 0
18001cd2:	6d0b      	mov      	r4, r2
18001cd4:	e90c000e 	bez      	r12, 0x18001cf0	// 18001cf0 <swrite+0x38>
18001cd8:	6c43      	mov      	r1, r0
18001cda:	c46c0020 	addu      	r0, r12, r3
18001cde:	e000a0bf 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
18001ce2:	9560      	ld.w      	r3, (r5, 0x0)
18001ce4:	60d0      	addu      	r3, r4
18001ce6:	9541      	ld.w      	r2, (r5, 0x4)
18001ce8:	3100      	movi      	r1, 0
18001cea:	d4430021 	str.b      	r1, (r3, r2 << 0)
18001cee:	9561      	ld.w      	r3, (r5, 0x4)
18001cf0:	5c0c      	addu      	r0, r4, r3
18001cf2:	b501      	st.w      	r0, (r5, 0x4)
18001cf4:	6c1b      	mov      	r0, r6
18001cf6:	1493      	pop      	r4-r6, r15

18001cf8 <__cskyvprintfvsnprintf>:
18001cf8:	14d4      	push      	r4-r7, r15
18001cfa:	1425      	subi      	r14, r14, 20
18001cfc:	6d43      	mov      	r5, r0
18001cfe:	6d07      	mov      	r4, r1
18001d00:	1802      	addi      	r0, r14, 8
18001d02:	3600      	movi      	r6, 0
18001d04:	6c4b      	mov      	r1, r2
18001d06:	b0a0      	st.w      	r5, (r0, 0x0)
18001d08:	b0c1      	st.w      	r6, (r0, 0x4)
18001d0a:	e904001c 	bez      	r4, 0x18001d42	// 18001d42 <__cskyvprintfvsnprintf+0x4a>
18001d0e:	5ce3      	subi      	r7, r4, 1
18001d10:	b0e2      	st.w      	r7, (r0, 0x8)
18001d12:	b800      	st.w      	r0, (r14, 0x0)
18001d14:	6c8f      	mov      	r2, r3
18001d16:	ea8c0013 	lrw      	r12, 0x18001cb8	// 18001d60 <__cskyvprintfvsnprintf+0x68>
18001d1a:	6c3b      	mov      	r0, r14
18001d1c:	dd8e2001 	st.w      	r12, (r14, 0x4)
18001d20:	e00000de 	bsr      	0x18001edc	// 18001edc <__v2_printf>
18001d24:	e905000d 	bez      	r5, 0x18001d3e	// 18001d3e <__cskyvprintfvsnprintf+0x46>
18001d28:	e980000b 	blz      	r0, 0x18001d3e	// 18001d3e <__cskyvprintfvsnprintf+0x46>
18001d2c:	6cdb      	mov      	r3, r6
18001d2e:	2b00      	subi      	r3, 1
18001d30:	64d2      	cmpne      	r4, r3
18001d32:	0c03      	bf      	0x18001d38	// 18001d38 <__cskyvprintfvsnprintf+0x40>
18001d34:	6500      	cmphs      	r0, r4
18001d36:	0810      	bt      	0x18001d56	// 18001d56 <__cskyvprintfvsnprintf+0x5e>
18001d38:	3100      	movi      	r1, 0
18001d3a:	d4050021 	str.b      	r1, (r5, r0 << 0)
18001d3e:	1405      	addi      	r14, r14, 20
18001d40:	1494      	pop      	r4-r7, r15
18001d42:	1048      	lrw      	r2, 0x18001cb8	// 18001d60 <__cskyvprintfvsnprintf+0x68>
18001d44:	b841      	st.w      	r2, (r14, 0x4)
18001d46:	b082      	st.w      	r4, (r0, 0x8)
18001d48:	b800      	st.w      	r0, (r14, 0x0)
18001d4a:	6c8f      	mov      	r2, r3
18001d4c:	6c3b      	mov      	r0, r14
18001d4e:	e00000c7 	bsr      	0x18001edc	// 18001edc <__v2_printf>
18001d52:	1405      	addi      	r14, r14, 20
18001d54:	1494      	pop      	r4-r7, r15
18001d56:	d4e50026 	str.b      	r6, (r5, r7 << 0)
18001d5a:	1405      	addi      	r14, r14, 20
18001d5c:	1494      	pop      	r4-r7, r15
18001d5e:	0000      	.short	0x0000
18001d60:	18001cb8 	.long	0x18001cb8

18001d64 <__strlen_fast>:
18001d64:	6c43      	mov      	r1, r0
18001d66:	e4002003 	andi      	r0, r0, 3
18001d6a:	e9000009 	bez      	r0, 0x18001d7c	// 18001d7c <__strlen_fast+0x18>
18001d6e:	3000      	movi      	r0, 0
18001d70:	8140      	ld.b      	r2, (r1, 0x0)
18001d72:	e9020017 	bez      	r2, 0x18001da0	// 18001da0 <__strlen_fast+0x3c>
18001d76:	2100      	addi      	r1, 1
18001d78:	2000      	addi      	r0, 1
18001d7a:	07fb      	br      	0x18001d70	// 18001d70 <__strlen_fast+0xc>
18001d7c:	9140      	ld.w      	r2, (r1, 0x0)
18001d7e:	680b      	tstnbz      	r2
18001d80:	0c04      	bf      	0x18001d88	// 18001d88 <__strlen_fast+0x24>
18001d82:	2103      	addi      	r1, 4
18001d84:	2003      	addi      	r0, 4
18001d86:	07fb      	br      	0x18001d7c	// 18001d7c <__strlen_fast+0x18>
18001d88:	c4027103 	xtrb3      	r3, r2
18001d8c:	0c0a      	bf      	0x18001da0	// 18001da0 <__strlen_fast+0x3c>
18001d8e:	2000      	addi      	r0, 1
18001d90:	c4027083 	xtrb2      	r3, r2
18001d94:	0c06      	bf      	0x18001da0	// 18001da0 <__strlen_fast+0x3c>
18001d96:	2000      	addi      	r0, 1
18001d98:	c4027043 	xtrb1      	r3, r2
18001d9c:	0c02      	bf      	0x18001da0	// 18001da0 <__strlen_fast+0x3c>
18001d9e:	2000      	addi      	r0, 1
18001da0:	783c      	jmp      	r15
	...

18001da4 <__strcpy_fast>:
18001da4:	6f03      	mov      	r12, r0
18001da6:	c5812422 	or      	r2, r1, r12
18001daa:	e4422003 	andi      	r2, r2, 3
18001dae:	e902000b 	bez      	r2, 0x18001dc4	// 18001dc4 <__strcpy_fast+0x20>
18001db2:	8160      	ld.b      	r3, (r1, 0x0)
18001db4:	dc6c0000 	st.b      	r3, (r12, 0x0)
18001db8:	2100      	addi      	r1, 1
18001dba:	e58c0000 	addi      	r12, r12, 1
18001dbe:	e923fffa 	bnez      	r3, 0x18001db2	// 18001db2 <__strcpy_fast+0xe>
18001dc2:	783c      	jmp      	r15
18001dc4:	9160      	ld.w      	r3, (r1, 0x0)
18001dc6:	680f      	tstnbz      	r3
18001dc8:	0c3e      	bf      	0x18001e44	// 18001e44 <__strcpy_fast+0xa0>
18001dca:	dc6c2000 	st.w      	r3, (r12, 0x0)
18001dce:	9161      	ld.w      	r3, (r1, 0x4)
18001dd0:	680f      	tstnbz      	r3
18001dd2:	0c25      	bf      	0x18001e1c	// 18001e1c <__strcpy_fast+0x78>
18001dd4:	dc6c2001 	st.w      	r3, (r12, 0x4)
18001dd8:	9162      	ld.w      	r3, (r1, 0x8)
18001dda:	680f      	tstnbz      	r3
18001ddc:	0c23      	bf      	0x18001e22	// 18001e22 <__strcpy_fast+0x7e>
18001dde:	dc6c2002 	st.w      	r3, (r12, 0x8)
18001de2:	9163      	ld.w      	r3, (r1, 0xc)
18001de4:	680f      	tstnbz      	r3
18001de6:	0c21      	bf      	0x18001e28	// 18001e28 <__strcpy_fast+0x84>
18001de8:	dc6c2003 	st.w      	r3, (r12, 0xc)
18001dec:	9164      	ld.w      	r3, (r1, 0x10)
18001dee:	680f      	tstnbz      	r3
18001df0:	0c1f      	bf      	0x18001e2e	// 18001e2e <__strcpy_fast+0x8a>
18001df2:	dc6c2004 	st.w      	r3, (r12, 0x10)
18001df6:	9165      	ld.w      	r3, (r1, 0x14)
18001df8:	680f      	tstnbz      	r3
18001dfa:	0c1d      	bf      	0x18001e34	// 18001e34 <__strcpy_fast+0x90>
18001dfc:	dc6c2005 	st.w      	r3, (r12, 0x14)
18001e00:	9166      	ld.w      	r3, (r1, 0x18)
18001e02:	680f      	tstnbz      	r3
18001e04:	0c1b      	bf      	0x18001e3a	// 18001e3a <__strcpy_fast+0x96>
18001e06:	dc6c2006 	st.w      	r3, (r12, 0x18)
18001e0a:	9167      	ld.w      	r3, (r1, 0x1c)
18001e0c:	680f      	tstnbz      	r3
18001e0e:	0c19      	bf      	0x18001e40	// 18001e40 <__strcpy_fast+0x9c>
18001e10:	dc6c2007 	st.w      	r3, (r12, 0x1c)
18001e14:	e58c001f 	addi      	r12, r12, 32
18001e18:	211f      	addi      	r1, 32
18001e1a:	07d5      	br      	0x18001dc4	// 18001dc4 <__strcpy_fast+0x20>
18001e1c:	e58c0003 	addi      	r12, r12, 4
18001e20:	0412      	br      	0x18001e44	// 18001e44 <__strcpy_fast+0xa0>
18001e22:	e58c0007 	addi      	r12, r12, 8
18001e26:	040f      	br      	0x18001e44	// 18001e44 <__strcpy_fast+0xa0>
18001e28:	e58c000b 	addi      	r12, r12, 12
18001e2c:	040c      	br      	0x18001e44	// 18001e44 <__strcpy_fast+0xa0>
18001e2e:	e58c000f 	addi      	r12, r12, 16
18001e32:	0409      	br      	0x18001e44	// 18001e44 <__strcpy_fast+0xa0>
18001e34:	e58c0013 	addi      	r12, r12, 20
18001e38:	0406      	br      	0x18001e44	// 18001e44 <__strcpy_fast+0xa0>
18001e3a:	e58c0017 	addi      	r12, r12, 24
18001e3e:	0403      	br      	0x18001e44	// 18001e44 <__strcpy_fast+0xa0>
18001e40:	e58c001b 	addi      	r12, r12, 28
18001e44:	c4037102 	xtrb3      	r2, r3
18001e48:	dc4c0000 	st.b      	r2, (r12, 0x0)
18001e4c:	e9020010 	bez      	r2, 0x18001e6c	// 18001e6c <__strcpy_fast+0xc8>
18001e50:	c4037082 	xtrb2      	r2, r3
18001e54:	dc4c0001 	st.b      	r2, (r12, 0x1)
18001e58:	e902000a 	bez      	r2, 0x18001e6c	// 18001e6c <__strcpy_fast+0xc8>
18001e5c:	c4037042 	xtrb1      	r2, r3
18001e60:	dc4c0002 	st.b      	r2, (r12, 0x2)
18001e64:	e9020004 	bez      	r2, 0x18001e6c	// 18001e6c <__strcpy_fast+0xc8>
18001e68:	dc6c2000 	st.w      	r3, (r12, 0x0)
18001e6c:	783c      	jmp      	r15
	...

18001e70 <__GI_strchr>:
18001e70:	8040      	ld.b      	r2, (r0, 0x0)
18001e72:	644a      	cmpne      	r2, r1
18001e74:	0c06      	bf      	0x18001e80	// 18001e80 <__GI_strchr+0x10>
18001e76:	e9020004 	bez      	r2, 0x18001e7e	// 18001e7e <__GI_strchr+0xe>
18001e7a:	2000      	addi      	r0, 1
18001e7c:	07fa      	br      	0x18001e70	// 18001e70 <__GI_strchr>
18001e7e:	6c0b      	mov      	r0, r2
18001e80:	783c      	jmp      	r15
	...

18001e84 <__GI_strerror>:
18001e84:	eb00008f 	cmphsi      	r0, 144
18001e88:	0805      	bt      	0x18001e92	// 18001e92 <__GI_strerror+0xe>
18001e8a:	1064      	lrw      	r3, 0x18016034	// 18001e98 <__GI_strerror+0x14>
18001e8c:	d0030880 	ldr.w      	r0, (r3, r0 << 2)
18001e90:	783c      	jmp      	r15
18001e92:	1003      	lrw      	r0, 0x18019320	// 18001e9c <__GI_strerror+0x18>
18001e94:	783c      	jmp      	r15
18001e96:	0000      	.short	0x0000
18001e98:	18016034 	.long	0x18016034
18001e9c:	18019320 	.long	0x18019320

18001ea0 <PAD.1851>:
18001ea0:	14d4      	push      	r4-r7, r15
18001ea2:	6d03      	mov      	r4, r0
18001ea4:	6d87      	mov      	r6, r1
18001ea6:	6df3      	mov      	r7, r12
18001ea8:	e9600011 	blsz      	r0, 0x18001eca	// 18001eca <PAD.1851+0x2a>
18001eac:	6d43      	mov      	r5, r0
18001eae:	3d30      	cmplti      	r5, 17
18001eb0:	9760      	ld.w      	r3, (r7, 0x0)
18001eb2:	0c0d      	bf      	0x18001ecc	// 18001ecc <PAD.1851+0x2c>
18001eb4:	3200      	movi      	r2, 0
18001eb6:	5c23      	subi      	r1, r4, 1
18001eb8:	2a0f      	subi      	r2, 16
18001eba:	c4412020 	and      	r0, r1, r2
18001ebe:	5c21      	subu      	r1, r4, r0
18001ec0:	d9832001 	ld.w      	r12, (r3, 0x4)
18001ec4:	9340      	ld.w      	r2, (r3, 0x0)
18001ec6:	6c1b      	mov      	r0, r6
18001ec8:	7bf1      	jsr      	r12
18001eca:	1494      	pop      	r4-r7, r15
18001ecc:	d9a32001 	ld.w      	r13, (r3, 0x4)
18001ed0:	9340      	ld.w      	r2, (r3, 0x0)
18001ed2:	3110      	movi      	r1, 16
18001ed4:	6c1b      	mov      	r0, r6
18001ed6:	7bf5      	jsr      	r13
18001ed8:	2d0f      	subi      	r5, 16
18001eda:	07ea      	br      	0x18001eae	// 18001eae <PAD.1851+0xe>

18001edc <__v2_printf>:
18001edc:	14d8      	push      	r4-r11, r15
18001ede:	1437      	subi      	r14, r14, 92
18001ee0:	1b20      	addi      	r3, r14, 128
18001ee2:	b80b      	st.w      	r0, (r14, 0x2c)
18001ee4:	b823      	st.w      	r1, (r14, 0xc)
18001ee6:	3000      	movi      	r0, 0
18001ee8:	0222      	lrw      	r1, 0x20002614	// 180021dc <__v2_printf+0x300>
18001eea:	6ecb      	mov      	r11, r2
18001eec:	b86c      	st.w      	r3, (r14, 0x30)
18001eee:	b805      	st.w      	r0, (r14, 0x14)
18001ef0:	b804      	st.w      	r0, (r14, 0x10)
18001ef2:	b826      	st.w      	r1, (r14, 0x18)
18001ef4:	9883      	ld.w      	r4, (r14, 0xc)
18001ef6:	8440      	ld.b      	r2, (r4, 0x0)
18001ef8:	e9020005 	bez      	r2, 0x18001f02	// 18001f02 <__v2_printf+0x26>
18001efc:	eb420025 	cmpnei      	r2, 37
18001f00:	0848      	bt      	0x18001f90	// 18001f90 <__v2_printf+0xb4>
18001f02:	98a3      	ld.w      	r5, (r14, 0xc)
18001f04:	5cb5      	subu      	r5, r4, r5
18001f06:	e905000e 	bez      	r5, 0x18001f22	// 18001f22 <__v2_printf+0x46>
18001f0a:	d9ae200b 	ld.w      	r13, (r14, 0x2c)
18001f0e:	6c57      	mov      	r1, r5
18001f10:	d98d2001 	ld.w      	r12, (r13, 0x4)
18001f14:	d84d2000 	ld.w      	r2, (r13, 0x0)
18001f18:	9803      	ld.w      	r0, (r14, 0xc)
18001f1a:	7bf1      	jsr      	r12
18001f1c:	9864      	ld.w      	r3, (r14, 0x10)
18001f1e:	60d4      	addu      	r3, r5
18001f20:	b864      	st.w      	r3, (r14, 0x10)
18001f22:	8400      	ld.b      	r0, (r4, 0x0)
18001f24:	e9000369 	bez      	r0, 0x180025f6	// 180025f6 <__v2_printf+0x71a>
18001f28:	3300      	movi      	r3, 0
18001f2a:	6dcf      	mov      	r7, r3
18001f2c:	5c22      	addi      	r1, r4, 1
18001f2e:	2f00      	subi      	r7, 1
18001f30:	3400      	movi      	r4, 0
18001f32:	dc8e0027 	st.b      	r4, (r14, 0x27)
18001f36:	6c8f      	mov      	r2, r3
18001f38:	b862      	st.w      	r3, (r14, 0x8)
18001f3a:	6d0f      	mov      	r4, r3
18001f3c:	6d8f      	mov      	r6, r3
18001f3e:	ea0d000a 	movi      	r13, 10
18001f42:	6d5f      	mov      	r5, r7
18001f44:	5902      	addi      	r0, r1, 1
18001f46:	b803      	st.w      	r0, (r14, 0xc)
18001f48:	d9410000 	ld.b      	r10, (r1, 0x0)
18001f4c:	eb4a0064 	cmpnei      	r10, 100
18001f50:	e8400216 	bf      	0x1800237c	// 1800237c <__v2_printf+0x4a0>
18001f54:	eb2a0064 	cmplti      	r10, 101
18001f58:	0c4a      	bf      	0x18001fec	// 18001fec <__v2_printf+0x110>
18001f5a:	eb4a002e 	cmpnei      	r10, 46
18001f5e:	0d59      	bf      	0x18002210	// 18002210 <__v2_printf+0x334>
18001f60:	eb2a002e 	cmplti      	r10, 47
18001f64:	0c23      	bf      	0x18001faa	// 18001faa <__v2_printf+0xce>
18001f66:	eb4a002a 	cmpnei      	r10, 42
18001f6a:	0d48      	bf      	0x180021fa	// 180021fa <__v2_printf+0x31e>
18001f6c:	eb2a002a 	cmplti      	r10, 43
18001f70:	0c14      	bf      	0x18001f98	// 18001f98 <__v2_printf+0xbc>
18001f72:	eb4a0020 	cmpnei      	r10, 32
18001f76:	0d39      	bf      	0x180021e8	// 180021e8 <__v2_printf+0x30c>
18001f78:	eb4a0023 	cmpnei      	r10, 35
18001f7c:	0d3c      	bf      	0x180021f4	// 180021f4 <__v2_printf+0x318>
18001f7e:	e90a033c 	bez      	r10, 0x180025f6	// 180025f6 <__v2_printf+0x71a>
18001f82:	3600      	movi      	r6, 0
18001f84:	dcce0027 	st.b      	r6, (r14, 0x27)
18001f88:	dd4e0034 	st.b      	r10, (r14, 0x34)
18001f8c:	6daf      	mov      	r6, r11
18001f8e:	042a      	br      	0x18001fe2	// 18001fe2 <__v2_printf+0x106>
18001f90:	2400      	addi      	r4, 1
18001f92:	07b2      	br      	0x18001ef6	// 18001ef6 <__v2_printf+0x1a>
18001f94:	6eeb      	mov      	r11, r10
18001f96:	052d      	br      	0x180021f0	// 180021f0 <__v2_printf+0x314>
18001f98:	eb4a002b 	cmpnei      	r10, 43
18001f9c:	0d28      	bf      	0x180021ec	// 180021ec <__v2_printf+0x310>
18001f9e:	eb4a002d 	cmpnei      	r10, 45
18001fa2:	0bee      	bt      	0x18001f7e	// 18001f7e <__v2_printf+0xa2>
18001fa4:	ec840004 	ori      	r4, r4, 4
18001fa8:	0524      	br      	0x180021f0	// 180021f0 <__v2_printf+0x314>
18001faa:	eb2a0039 	cmplti      	r10, 58
18001fae:	0c0a      	bf      	0x18001fc2	// 18001fc2 <__v2_printf+0xe6>
18001fb0:	eb2a0030 	cmplti      	r10, 49
18001fb4:	0d4f      	bf      	0x18002252	// 18002252 <__v2_printf+0x376>
18001fb6:	eb4a0030 	cmpnei      	r10, 48
18001fba:	0be2      	bt      	0x18001f7e	// 18001f7e <__v2_printf+0xa2>
18001fbc:	ec840080 	ori      	r4, r4, 128
18001fc0:	0518      	br      	0x180021f0	// 180021f0 <__v2_printf+0x314>
18001fc2:	eb4a0058 	cmpnei      	r10, 88
18001fc6:	0ce9      	bf      	0x18002198	// 18002198 <__v2_printf+0x2bc>
18001fc8:	eb4a0063 	cmpnei      	r10, 99
18001fcc:	0bd9      	bt      	0x18001f7e	// 18001f7e <__v2_printf+0xa2>
18001fce:	d8eb0000 	ld.b      	r7, (r11, 0x0)
18001fd2:	e4cb0003 	addi      	r6, r11, 4
18001fd6:	ea0b0000 	movi      	r11, 0
18001fda:	dcee0034 	st.b      	r7, (r14, 0x34)
18001fde:	dd6e0027 	st.b      	r11, (r14, 0x27)
18001fe2:	3701      	movi      	r7, 1
18001fe4:	ea0a0000 	movi      	r10, 0
18001fe8:	1d0d      	addi      	r5, r14, 52
18001fea:	055e      	br      	0x180022a6	// 180022a6 <__v2_printf+0x3ca>
18001fec:	eb4a006d 	cmpnei      	r10, 109
18001ff0:	0d4c      	bf      	0x18002288	// 18002288 <__v2_printf+0x3ac>
18001ff2:	eb2a006d 	cmplti      	r10, 110
18001ff6:	0c96      	bf      	0x18002122	// 18002122 <__v2_printf+0x246>
18001ff8:	eb4a0068 	cmpnei      	r10, 104
18001ffc:	0d40      	bf      	0x1800227c	// 1800227c <__v2_printf+0x3a0>
18001ffe:	eb2a0068 	cmplti      	r10, 105
18002002:	0c7f      	bf      	0x18002100	// 18002100 <__v2_printf+0x224>
18002004:	eb2a0065 	cmplti      	r10, 102
18002008:	0bbb      	bt      	0x18001f7e	// 18001f7e <__v2_printf+0xa2>
1800200a:	e9030004 	bez      	r3, 0x18002012	// 18002012 <__v2_printf+0x136>
1800200e:	dc4e0027 	st.b      	r2, (r14, 0x27)
18002012:	d80b2000 	ld.w      	r0, (r11, 0x0)
18002016:	d82b2001 	ld.w      	r1, (r11, 0x4)
1800201a:	98a2      	ld.w      	r5, (r14, 0x8)
1800201c:	ea0c0001 	movi      	r12, 1
18002020:	e4cb0007 	addi      	r6, r11, 8
18002024:	ea0b0000 	movi      	r11, 0
18002028:	3d40      	cmpnei      	r5, 0
1800202a:	9842      	ld.w      	r2, (r14, 0x8)
1800202c:	62f2      	subu      	r11, r12
1800202e:	c44c0c20 	incf      	r2, r12, 0
18002032:	66de      	cmpne      	r7, r11
18002034:	ea0c0006 	movi      	r12, 6
18002038:	c5870c40 	inct      	r12, r7, 0
1800203c:	1d0d      	addi      	r5, r14, 52
1800203e:	b842      	st.w      	r2, (r14, 0x8)
18002040:	b840      	st.w      	r2, (r14, 0x0)
18002042:	dd8e2001 	st.w      	r12, (r14, 0x4)
18002046:	3328      	movi      	r3, 40
18002048:	6c97      	mov      	r2, r5
1800204a:	dd8e2008 	st.w      	r12, (r14, 0x20)
1800204e:	e00002d7 	bsr      	0x180025fc	// 180025fc <__GI___dtostr>
18002052:	66de      	cmpne      	r7, r11
18002054:	b807      	st.w      	r0, (r14, 0x1c)
18002056:	0c1e      	bf      	0x18002092	// 18002092 <__v2_printf+0x1b6>
18002058:	312e      	movi      	r1, 46
1800205a:	e40e0034 	addi      	r0, r14, 53
1800205e:	e3ffff09 	bsr      	0x18001e70	// 18001e70 <__GI_strchr>
18002062:	98e7      	ld.w      	r7, (r14, 0x1c)
18002064:	e90001bf 	bez      	r0, 0x180023e2	// 180023e2 <__v2_printf+0x506>
18002068:	d96e2008 	ld.w      	r11, (r14, 0x20)
1800206c:	e92b0006 	bnez      	r11, 0x18002078	// 18002078 <__v2_printf+0x19c>
18002070:	e5842001 	andi      	r12, r4, 1
18002074:	e90c01b5 	bez      	r12, 0x180023de	// 180023de <__v2_printf+0x502>
18002078:	5862      	addi      	r3, r0, 1
1800207a:	e4eb0000 	addi      	r7, r11, 1
1800207e:	5f4d      	subu      	r2, r7, r3
18002080:	6080      	addu      	r2, r0
18002082:	e9620006 	blsz      	r2, 0x1800208e	// 1800208e <__v2_printf+0x1b2>
18002086:	2300      	addi      	r3, 1
18002088:	8320      	ld.b      	r1, (r3, 0x0)
1800208a:	e921fffa 	bnez      	r1, 0x1800207e	// 1800207e <__v2_printf+0x1a2>
1800208e:	3000      	movi      	r0, 0
18002090:	a300      	st.b      	r0, (r3, 0x0)
18002092:	eb4a0067 	cmpnei      	r10, 103
18002096:	0826      	bt      	0x180020e2	// 180020e2 <__v2_printf+0x206>
18002098:	312e      	movi      	r1, 46
1800209a:	6c17      	mov      	r0, r5
1800209c:	e3fffeea 	bsr      	0x18001e70	// 18001e70 <__GI_strchr>
180020a0:	6dc3      	mov      	r7, r0
180020a2:	e9000020 	bez      	r0, 0x180020e2	// 180020e2 <__v2_printf+0x206>
180020a6:	3165      	movi      	r1, 101
180020a8:	e3fffee4 	bsr      	0x18001e70	// 18001e70 <__GI_strchr>
180020ac:	6c43      	mov      	r1, r0
180020ae:	d9470000 	ld.b      	r10, (r7, 0x0)
180020b2:	e92a01a3 	bnez      	r10, 0x180023f8	// 180023f8 <__v2_printf+0x51c>
180020b6:	3940      	cmpnei      	r1, 0
180020b8:	c4e10c40 	inct      	r7, r1, 0
180020bc:	5f63      	subi      	r3, r7, 1
180020be:	d9a30000 	ld.b      	r13, (r3, 0x0)
180020c2:	eb4d0030 	cmpnei      	r13, 48
180020c6:	0d9b      	bf      	0x180023fc	// 180023fc <__v2_printf+0x520>
180020c8:	eb4d002e 	cmpnei      	r13, 46
180020cc:	c4e30c20 	incf      	r7, r3, 0
180020d0:	ea0b0000 	movi      	r11, 0
180020d4:	dd670000 	st.b      	r11, (r7, 0x0)
180020d8:	e9010005 	bez      	r1, 0x180020e2	// 180020e2 <__v2_printf+0x206>
180020dc:	6c1f      	mov      	r0, r7
180020de:	e3fffe63 	bsr      	0x18001da4	// 18001da4 <__strcpy_fast>
180020e2:	d9850000 	ld.b      	r12, (r5, 0x0)
180020e6:	eb4c002d 	cmpnei      	r12, 45
180020ea:	e8600257 	bt      	0x18002598	// 18002598 <__v2_printf+0x6bc>
180020ee:	dd8e0027 	st.b      	r12, (r14, 0x27)
180020f2:	e4ae0034 	addi      	r5, r14, 53
180020f6:	6c17      	mov      	r0, r5
180020f8:	e3fffe36 	bsr      	0x18001d64	// 18001d64 <__strlen_fast>
180020fc:	6dc3      	mov      	r7, r0
180020fe:	04d2      	br      	0x180022a2	// 180022a2 <__v2_printf+0x3c6>
18002100:	eb4a0069 	cmpnei      	r10, 105
18002104:	0d3c      	bf      	0x1800237c	// 1800237c <__v2_printf+0x4a0>
18002106:	eb4a006c 	cmpnei      	r10, 108
1800210a:	0b3a      	bt      	0x18001f7e	// 18001f7e <__v2_printf+0xa2>
1800210c:	9823      	ld.w      	r1, (r14, 0xc)
1800210e:	8100      	ld.b      	r0, (r1, 0x0)
18002110:	eb40006c 	cmpnei      	r0, 108
18002114:	08b7      	bt      	0x18002282	// 18002282 <__v2_printf+0x3a6>
18002116:	9823      	ld.w      	r1, (r14, 0xc)
18002118:	2100      	addi      	r1, 1
1800211a:	b823      	st.w      	r1, (r14, 0xc)
1800211c:	ec840020 	ori      	r4, r4, 32
18002120:	0468      	br      	0x180021f0	// 180021f0 <__v2_printf+0x314>
18002122:	eb4a0071 	cmpnei      	r10, 113
18002126:	0ffb      	bf      	0x1800211c	// 1800211c <__v2_printf+0x240>
18002128:	eb2a0071 	cmplti      	r10, 114
1800212c:	0c1a      	bf      	0x18002160	// 18002160 <__v2_printf+0x284>
1800212e:	eb4a006f 	cmpnei      	r10, 111
18002132:	0d67      	bf      	0x18002400	// 18002400 <__v2_printf+0x524>
18002134:	eb4a0070 	cmpnei      	r10, 112
18002138:	0b23      	bt      	0x18001f7e	// 18001f7e <__v2_printf+0xa2>
1800213a:	3230      	movi      	r2, 48
1800213c:	ea0a0078 	movi      	r10, 120
18002140:	1168      	lrw      	r3, 0x18019411	// 180021e0 <__v2_printf+0x304>
18002142:	e4cb0003 	addi      	r6, r11, 4
18002146:	d90b2000 	ld.w      	r8, (r11, 0x0)
1800214a:	ea090000 	movi      	r9, 0
1800214e:	ec840002 	ori      	r4, r4, 2
18002152:	dc4e0028 	st.b      	r2, (r14, 0x28)
18002156:	dd4e0029 	st.b      	r10, (r14, 0x29)
1800215a:	b865      	st.w      	r3, (r14, 0x14)
1800215c:	3002      	movi      	r0, 2
1800215e:	055c      	br      	0x18002416	// 18002416 <__v2_printf+0x53a>
18002160:	eb4a0075 	cmpnei      	r10, 117
18002164:	0d93      	bf      	0x1800248a	// 1800248a <__v2_printf+0x5ae>
18002166:	eb4a0078 	cmpnei      	r10, 120
1800216a:	0db2      	bf      	0x180024ce	// 180024ce <__v2_printf+0x5f2>
1800216c:	eb4a0073 	cmpnei      	r10, 115
18002170:	0b07      	bt      	0x18001f7e	// 18001f7e <__v2_printf+0xa2>
18002172:	3000      	movi      	r0, 0
18002174:	2800      	subi      	r0, 1
18002176:	641e      	cmpne      	r7, r0
18002178:	ea0d0000 	movi      	r13, 0
1800217c:	e4cb0003 	addi      	r6, r11, 4
18002180:	d8ab2000 	ld.w      	r5, (r11, 0x0)
18002184:	ddae0027 	st.b      	r13, (r14, 0x27)
18002188:	0975      	bt      	0x18002472	// 18002472 <__v2_printf+0x596>
1800218a:	6dd7      	mov      	r7, r5
1800218c:	d9670000 	ld.b      	r11, (r7, 0x0)
18002190:	e92b017b 	bnez      	r11, 0x18002486	// 18002486 <__v2_printf+0x5aa>
18002194:	61d6      	subu      	r7, r5
18002196:	0486      	br      	0x180022a2	// 180022a2 <__v2_printf+0x3c6>
18002198:	e9030004 	bez      	r3, 0x180021a0	// 180021a0 <__v2_printf+0x2c4>
1800219c:	dc4e0027 	st.b      	r2, (r14, 0x27)
180021a0:	10b1      	lrw      	r5, 0x18019400	// 180021e4 <__v2_printf+0x308>
180021a2:	e4642020 	andi      	r3, r4, 32
180021a6:	b8a5      	st.w      	r5, (r14, 0x14)
180021a8:	e9030199 	bez      	r3, 0x180024da	// 180024da <__v2_printf+0x5fe>
180021ac:	e4cb0007 	addi      	r6, r11, 8
180021b0:	d90b2000 	ld.w      	r8, (r11, 0x0)
180021b4:	d92b2001 	ld.w      	r9, (r11, 0x4)
180021b8:	e5a42001 	andi      	r13, r4, 1
180021bc:	e90dffd0 	bez      	r13, 0x1800215c	// 1800215c <__v2_printf+0x280>
180021c0:	c5282420 	or      	r0, r8, r9
180021c4:	e900ffcc 	bez      	r0, 0x1800215c	// 1800215c <__v2_printf+0x280>
180021c8:	ea0b0030 	movi      	r11, 48
180021cc:	dd6e0028 	st.b      	r11, (r14, 0x28)
180021d0:	dd4e0029 	st.b      	r10, (r14, 0x29)
180021d4:	ec840002 	ori      	r4, r4, 2
180021d8:	07c2      	br      	0x1800215c	// 1800215c <__v2_printf+0x280>
180021da:	0000      	.short	0x0000
180021dc:	20002614 	.long	0x20002614
180021e0:	18019411 	.long	0x18019411
180021e4:	18019400 	.long	0x18019400
180021e8:	e9220004 	bnez      	r2, 0x180021f0	// 180021f0 <__v2_printf+0x314>
180021ec:	3301      	movi      	r3, 1
180021ee:	6cab      	mov      	r2, r10
180021f0:	9823      	ld.w      	r1, (r14, 0xc)
180021f2:	06a9      	br      	0x18001f44	// 18001f44 <__v2_printf+0x68>
180021f4:	ec840001 	ori      	r4, r4, 1
180021f8:	07fc      	br      	0x180021f0	// 180021f0 <__v2_printf+0x314>
180021fa:	d82b2000 	ld.w      	r1, (r11, 0x0)
180021fe:	e54b0003 	addi      	r10, r11, 4
18002202:	b822      	st.w      	r1, (r14, 0x8)
18002204:	e9a1fec8 	bhsz      	r1, 0x18001f94	// 18001f94 <__v2_printf+0xb8>
18002208:	5e05      	subu      	r0, r6, r1
1800220a:	b802      	st.w      	r0, (r14, 0x8)
1800220c:	6eeb      	mov      	r11, r10
1800220e:	06cb      	br      	0x18001fa4	// 18001fa4 <__v2_printf+0xc8>
18002210:	d98e2003 	ld.w      	r12, (r14, 0xc)
18002214:	9823      	ld.w      	r1, (r14, 0xc)
18002216:	d94c0000 	ld.b      	r10, (r12, 0x0)
1800221a:	eb4a002a 	cmpnei      	r10, 42
1800221e:	2100      	addi      	r1, 1
18002220:	0c0a      	bf      	0x18002234	// 18002234 <__v2_printf+0x358>
18002222:	3700      	movi      	r7, 0
18002224:	e58a102f 	subi      	r12, r10, 48
18002228:	eb0c0009 	cmphsi      	r12, 10
1800222c:	6c07      	mov      	r0, r1
1800222e:	0c0c      	bf      	0x18002246	// 18002246 <__v2_printf+0x36a>
18002230:	b803      	st.w      	r0, (r14, 0xc)
18002232:	068d      	br      	0x18001f4c	// 18001f4c <__v2_printf+0x70>
18002234:	d8eb2000 	ld.w      	r7, (r11, 0x0)
18002238:	3fdf      	btsti      	r7, 31
1800223a:	c4e50c40 	inct      	r7, r5, 0
1800223e:	e56b0003 	addi      	r11, r11, 4
18002242:	b823      	st.w      	r1, (r14, 0xc)
18002244:	07d6      	br      	0x180021f0	// 180021f0 <__v2_printf+0x314>
18002246:	7df4      	mult      	r7, r13
18002248:	d9410000 	ld.b      	r10, (r1, 0x0)
1800224c:	61f0      	addu      	r7, r12
1800224e:	2100      	addi      	r1, 1
18002250:	07ea      	br      	0x18002224	// 18002224 <__v2_printf+0x348>
18002252:	ea0c0000 	movi      	r12, 0
18002256:	dd8e2002 	st.w      	r12, (r14, 0x8)
1800225a:	9822      	ld.w      	r1, (r14, 0x8)
1800225c:	7c74      	mult      	r1, r13
1800225e:	e54a102f 	subi      	r10, r10, 48
18002262:	c42a0020 	addu      	r0, r10, r1
18002266:	9823      	ld.w      	r1, (r14, 0xc)
18002268:	b802      	st.w      	r0, (r14, 0x8)
1800226a:	d9410000 	ld.b      	r10, (r1, 0x0)
1800226e:	5902      	addi      	r0, r1, 1
18002270:	e42a102f 	subi      	r1, r10, 48
18002274:	3909      	cmphsi      	r1, 10
18002276:	b803      	st.w      	r0, (r14, 0xc)
18002278:	0ff1      	bf      	0x1800225a	// 1800225a <__v2_printf+0x37e>
1800227a:	07db      	br      	0x18002230	// 18002230 <__v2_printf+0x354>
1800227c:	ec840040 	ori      	r4, r4, 64
18002280:	07b8      	br      	0x180021f0	// 180021f0 <__v2_printf+0x314>
18002282:	ec840010 	ori      	r4, r4, 16
18002286:	07b5      	br      	0x180021f0	// 180021f0 <__v2_printf+0x314>
18002288:	e9030004 	bez      	r3, 0x18002290	// 18002290 <__v2_printf+0x3b4>
1800228c:	dc4e0027 	st.b      	r2, (r14, 0x27)
18002290:	98e6      	ld.w      	r7, (r14, 0x18)
18002292:	6daf      	mov      	r6, r11
18002294:	9700      	ld.w      	r0, (r7, 0x0)
18002296:	e3fffdf7 	bsr      	0x18001e84	// 18001e84 <__GI_strerror>
1800229a:	6d43      	mov      	r5, r0
1800229c:	e3fffd64 	bsr      	0x18001d64	// 18001d64 <__strlen_fast>
180022a0:	6dc3      	mov      	r7, r0
180022a2:	ea0a0000 	movi      	r10, 0
180022a6:	65e9      	cmplt      	r10, r7
180022a8:	6edf      	mov      	r11, r7
180022aa:	d86e0027 	ld.b      	r3, (r14, 0x27)
180022ae:	c56a0c20 	incf      	r11, r10, 0
180022b2:	e4442002 	andi      	r2, r4, 2
180022b6:	3b40      	cmpnei      	r3, 0
180022b8:	e5842084 	andi      	r12, r4, 132
180022bc:	c5ab0c20 	incf      	r13, r11, 0
180022c0:	c5ab0c41 	inct      	r13, r11, 1
180022c4:	3a40      	cmpnei      	r2, 0
180022c6:	c56d0c20 	incf      	r11, r13, 0
180022ca:	c56d0c42 	inct      	r11, r13, 2
180022ce:	dd8e2007 	st.w      	r12, (r14, 0x1c)
180022d2:	e92c0009 	bnez      	r12, 0x180022e4	// 180022e4 <__v2_printf+0x408>
180022d6:	9802      	ld.w      	r0, (r14, 0x8)
180022d8:	e58e002b 	addi      	r12, r14, 44
180022dc:	0234      	lrw      	r1, 0x18016274	// 18002588 <__v2_printf+0x6ac>
180022de:	602e      	subu      	r0, r11
180022e0:	e3fffde0 	bsr      	0x18001ea0	// 18001ea0 <PAD.1851>
180022e4:	d82e0027 	ld.b      	r1, (r14, 0x27)
180022e8:	e901000a 	bez      	r1, 0x180022fc	// 180022fc <__v2_printf+0x420>
180022ec:	986b      	ld.w      	r3, (r14, 0x2c)
180022ee:	3101      	movi      	r1, 1
180022f0:	d9a32001 	ld.w      	r13, (r3, 0x4)
180022f4:	9340      	ld.w      	r2, (r3, 0x0)
180022f6:	e40e0026 	addi      	r0, r14, 39
180022fa:	7bf5      	jsr      	r13
180022fc:	e4442002 	andi      	r2, r4, 2
18002300:	e9020009 	bez      	r2, 0x18002312	// 18002312 <__v2_printf+0x436>
18002304:	980b      	ld.w      	r0, (r14, 0x2c)
18002306:	3102      	movi      	r1, 2
18002308:	d9802001 	ld.w      	r12, (r0, 0x4)
1800230c:	9040      	ld.w      	r2, (r0, 0x0)
1800230e:	180a      	addi      	r0, r14, 40
18002310:	7bf1      	jsr      	r12
18002312:	e4242084 	andi      	r1, r4, 132
18002316:	eb410080 	cmpnei      	r1, 128
1800231a:	0809      	bt      	0x1800232c	// 1800232c <__v2_printf+0x450>
1800231c:	9862      	ld.w      	r3, (r14, 0x8)
1800231e:	e58e002b 	addi      	r12, r14, 44
18002322:	0324      	lrw      	r1, 0x18016284	// 1800258c <__v2_printf+0x6b0>
18002324:	c5630080 	subu      	r0, r3, r11
18002328:	e3fffdbc 	bsr      	0x18001ea0	// 18001ea0 <PAD.1851>
1800232c:	e58e002b 	addi      	r12, r14, 44
18002330:	0328      	lrw      	r1, 0x18016284	// 1800258c <__v2_printf+0x6b0>
18002332:	c4ea0080 	subu      	r0, r10, r7
18002336:	e3fffdb5 	bsr      	0x18001ea0	// 18001ea0 <PAD.1851>
1800233a:	d9ae200b 	ld.w      	r13, (r14, 0x2c)
1800233e:	6c17      	mov      	r0, r5
18002340:	e4a42004 	andi      	r5, r4, 4
18002344:	d98d2001 	ld.w      	r12, (r13, 0x4)
18002348:	d84d2000 	ld.w      	r2, (r13, 0x0)
1800234c:	6c5f      	mov      	r1, r7
1800234e:	7bf1      	jsr      	r12
18002350:	e905000a 	bez      	r5, 0x18002364	// 18002364 <__v2_printf+0x488>
18002354:	9882      	ld.w      	r4, (r14, 0x8)
18002356:	e58e002b 	addi      	r12, r14, 44
1800235a:	0333      	lrw      	r1, 0x18016274	// 18002588 <__v2_printf+0x6ac>
1800235c:	c5640080 	subu      	r0, r4, r11
18002360:	e3fffda0 	bsr      	0x18001ea0	// 18001ea0 <PAD.1851>
18002364:	9802      	ld.w      	r0, (r14, 0x8)
18002366:	66c1      	cmplt      	r0, r11
18002368:	c40b0c40 	inct      	r0, r11, 0
1800236c:	d96e2004 	ld.w      	r11, (r14, 0x10)
18002370:	62c0      	addu      	r11, r0
18002372:	dd6e2004 	st.w      	r11, (r14, 0x10)
18002376:	6edb      	mov      	r11, r6
18002378:	e800fdbe 	br      	0x18001ef4	// 18001ef4 <__v2_printf+0x18>
1800237c:	e9030004 	bez      	r3, 0x18002384	// 18002384 <__v2_printf+0x4a8>
18002380:	dc4e0027 	st.b      	r2, (r14, 0x27)
18002384:	e4c42020 	andi      	r6, r4, 32
18002388:	e9060016 	bez      	r6, 0x180023b4	// 180023b4 <__v2_printf+0x4d8>
1800238c:	e4cb0007 	addi      	r6, r11, 8
18002390:	d90b2000 	ld.w      	r8, (r11, 0x0)
18002394:	d92b2001 	ld.w      	r9, (r11, 0x4)
18002398:	e9a9000c 	bhsz      	r9, 0x180023b0	// 180023b0 <__v2_printf+0x4d4>
1800239c:	3300      	movi      	r3, 0
1800239e:	3200      	movi      	r2, 0
180023a0:	6620      	cmphs      	r8, r8
180023a2:	c5020108 	subc      	r8, r2, r8
180023a6:	c5230109 	subc      	r9, r3, r9
180023aa:	332d      	movi      	r3, 45
180023ac:	dc6e0027 	st.b      	r3, (r14, 0x27)
180023b0:	3001      	movi      	r0, 1
180023b2:	0435      	br      	0x1800241c	// 1800241c <__v2_printf+0x540>
180023b4:	e5842010 	andi      	r12, r4, 16
180023b8:	e4cb0003 	addi      	r6, r11, 4
180023bc:	e90c0007 	bez      	r12, 0x180023ca	// 180023ca <__v2_printf+0x4ee>
180023c0:	d90b2000 	ld.w      	r8, (r11, 0x0)
180023c4:	c7e84889 	asri      	r9, r8, 31
180023c8:	07e8      	br      	0x18002398	// 18002398 <__v2_printf+0x4bc>
180023ca:	e4a42040 	andi      	r5, r4, 64
180023ce:	d92b2000 	ld.w      	r9, (r11, 0x0)
180023d2:	e9050004 	bez      	r5, 0x180023da	// 180023da <__v2_printf+0x4fe>
180023d6:	7627      	sexth      	r8, r9
180023d8:	07f6      	br      	0x180023c4	// 180023c4 <__v2_printf+0x4e8>
180023da:	6e27      	mov      	r8, r9
180023dc:	07f4      	br      	0x180023c4	// 180023c4 <__v2_printf+0x4e8>
180023de:	6cc3      	mov      	r3, r0
180023e0:	0657      	br      	0x1800208e	// 1800208e <__v2_printf+0x1b2>
180023e2:	e4242001 	andi      	r1, r4, 1
180023e6:	e901fe56 	bez      	r1, 0x18002092	// 18002092 <__v2_printf+0x1b6>
180023ea:	ea0d002e 	movi      	r13, 46
180023ee:	d4e5002d 	str.b      	r13, (r5, r7 << 0)
180023f2:	61d4      	addu      	r7, r5
180023f4:	a701      	st.b      	r0, (r7, 0x1)
180023f6:	064e      	br      	0x18002092	// 18002092 <__v2_printf+0x1b6>
180023f8:	2700      	addi      	r7, 1
180023fa:	065a      	br      	0x180020ae	// 180020ae <__v2_printf+0x1d2>
180023fc:	6dcf      	mov      	r7, r3
180023fe:	065f      	br      	0x180020bc	// 180020bc <__v2_printf+0x1e0>
18002400:	e4042020 	andi      	r0, r4, 32
18002404:	e9000021 	bez      	r0, 0x18002446	// 18002446 <__v2_printf+0x56a>
18002408:	e4cb0007 	addi      	r6, r11, 8
1800240c:	d90b2000 	ld.w      	r8, (r11, 0x0)
18002410:	d92b2001 	ld.w      	r9, (r11, 0x4)
18002414:	3000      	movi      	r0, 0
18002416:	3200      	movi      	r2, 0
18002418:	dc4e0027 	st.b      	r2, (r14, 0x27)
1800241c:	3200      	movi      	r2, 0
1800241e:	2a00      	subi      	r2, 1
18002420:	649e      	cmpne      	r7, r2
18002422:	c528242d 	or      	r13, r8, r9
18002426:	0cc1      	bf      	0x180025a8	// 180025a8 <__v2_printf+0x6cc>
18002428:	c4e4282b 	bclri      	r11, r4, 7
1800242c:	e92d00c1 	bnez      	r13, 0x180025ae	// 180025ae <__v2_printf+0x6d2>
18002430:	e90700a3 	bez      	r7, 0x18002576	// 18002576 <__v2_printf+0x69a>
18002434:	3841      	cmpnei      	r0, 1
18002436:	0c6a      	bf      	0x1800250a	// 1800250a <__v2_printf+0x62e>
18002438:	3842      	cmpnei      	r0, 2
1800243a:	0c85      	bf      	0x18002544	// 18002544 <__v2_printf+0x668>
1800243c:	ea080000 	movi      	r8, 0
18002440:	ea090000 	movi      	r9, 0
18002444:	04b9      	br      	0x180025b6	// 180025b6 <__v2_printf+0x6da>
18002446:	e5042010 	andi      	r8, r4, 16
1800244a:	e4cb0003 	addi      	r6, r11, 4
1800244e:	e9080006 	bez      	r8, 0x1800245a	// 1800245a <__v2_printf+0x57e>
18002452:	d90b2000 	ld.w      	r8, (r11, 0x0)
18002456:	6e43      	mov      	r9, r0
18002458:	07df      	br      	0x18002416	// 18002416 <__v2_printf+0x53a>
1800245a:	e5242040 	andi      	r9, r4, 64
1800245e:	e9090007 	bez      	r9, 0x1800246c	// 1800246c <__v2_printf+0x590>
18002462:	d90b1000 	ld.h      	r8, (r11, 0x0)
18002466:	ea090000 	movi      	r9, 0
1800246a:	07d5      	br      	0x18002414	// 18002414 <__v2_printf+0x538>
1800246c:	d90b2000 	ld.w      	r8, (r11, 0x0)
18002470:	07fb      	br      	0x18002466	// 18002466 <__v2_printf+0x58a>
18002472:	5d3c      	addu      	r1, r5, r7
18002474:	6c97      	mov      	r2, r5
18002476:	644a      	cmpne      	r2, r1
18002478:	0f15      	bf      	0x180022a2	// 180022a2 <__v2_printf+0x3c6>
1800247a:	d9820000 	ld.b      	r12, (r2, 0x0)
1800247e:	e90c0093 	bez      	r12, 0x180025a4	// 180025a4 <__v2_printf+0x6c8>
18002482:	2200      	addi      	r2, 1
18002484:	07f9      	br      	0x18002476	// 18002476 <__v2_printf+0x59a>
18002486:	2700      	addi      	r7, 1
18002488:	0682      	br      	0x1800218c	// 1800218c <__v2_printf+0x2b0>
1800248a:	e5442020 	andi      	r10, r4, 32
1800248e:	e90a000a 	bez      	r10, 0x180024a2	// 180024a2 <__v2_printf+0x5c6>
18002492:	e4cb0007 	addi      	r6, r11, 8
18002496:	d90b2000 	ld.w      	r8, (r11, 0x0)
1800249a:	d92b2001 	ld.w      	r9, (r11, 0x4)
1800249e:	3001      	movi      	r0, 1
180024a0:	07bb      	br      	0x18002416	// 18002416 <__v2_printf+0x53a>
180024a2:	e5042010 	andi      	r8, r4, 16
180024a6:	e4cb0003 	addi      	r6, r11, 4
180024aa:	e9080006 	bez      	r8, 0x180024b6	// 180024b6 <__v2_printf+0x5da>
180024ae:	d90b2000 	ld.w      	r8, (r11, 0x0)
180024b2:	6e6b      	mov      	r9, r10
180024b4:	07f5      	br      	0x1800249e	// 1800249e <__v2_printf+0x5c2>
180024b6:	e4242040 	andi      	r1, r4, 64
180024ba:	e9010007 	bez      	r1, 0x180024c8	// 180024c8 <__v2_printf+0x5ec>
180024be:	d90b1000 	ld.h      	r8, (r11, 0x0)
180024c2:	ea090000 	movi      	r9, 0
180024c6:	07ec      	br      	0x1800249e	// 1800249e <__v2_printf+0x5c2>
180024c8:	d90b2000 	ld.w      	r8, (r11, 0x0)
180024cc:	07fb      	br      	0x180024c2	// 180024c2 <__v2_printf+0x5e6>
180024ce:	e9030004 	bez      	r3, 0x180024d6	// 180024d6 <__v2_printf+0x5fa>
180024d2:	dc4e0027 	st.b      	r2, (r14, 0x27)
180024d6:	11af      	lrw      	r5, 0x18019411	// 18002590 <__v2_printf+0x6b4>
180024d8:	0665      	br      	0x180021a2	// 180021a2 <__v2_printf+0x2c6>
180024da:	e5242010 	andi      	r9, r4, 16
180024de:	e4cb0003 	addi      	r6, r11, 4
180024e2:	e9090006 	bez      	r9, 0x180024ee	// 180024ee <__v2_printf+0x612>
180024e6:	d90b2000 	ld.w      	r8, (r11, 0x0)
180024ea:	6e4f      	mov      	r9, r3
180024ec:	0666      	br      	0x180021b8	// 180021b8 <__v2_printf+0x2dc>
180024ee:	e4642040 	andi      	r3, r4, 64
180024f2:	e903fffa 	bez      	r3, 0x180024e6	// 180024e6 <__v2_printf+0x60a>
180024f6:	d90b1000 	ld.h      	r8, (r11, 0x0)
180024fa:	065f      	br      	0x180021b8	// 180021b8 <__v2_printf+0x2dc>
180024fc:	6d17      	mov      	r4, r5
180024fe:	045d      	br      	0x180025b8	// 180025b8 <__v2_printf+0x6dc>
18002500:	e929000c 	bnez      	r9, 0x18002518	// 18002518 <__v2_printf+0x63c>
18002504:	eb080009 	cmphsi      	r8, 10
18002508:	0808      	bt      	0x18002518	// 18002518 <__v2_printf+0x63c>
1800250a:	e548002f 	addi      	r10, r8, 48
1800250e:	dd4e005b 	st.b      	r10, (r14, 0x5b)
18002512:	e4ae005a 	addi      	r5, r14, 91
18002516:	046b      	br      	0x180025ec	// 180025ec <__v2_printf+0x710>
18002518:	1d17      	addi      	r5, r14, 92
1800251a:	320a      	movi      	r2, 10
1800251c:	3300      	movi      	r3, 0
1800251e:	6c23      	mov      	r0, r8
18002520:	6c67      	mov      	r1, r9
18002522:	e3fff4bb 	bsr      	0x18000e98	// 18000e98 <__umoddi3>
18002526:	2d00      	subi      	r5, 1
18002528:	202f      	addi      	r0, 48
1800252a:	a500      	st.b      	r0, (r5, 0x0)
1800252c:	320a      	movi      	r2, 10
1800252e:	6c23      	mov      	r0, r8
18002530:	6c67      	mov      	r1, r9
18002532:	3300      	movi      	r3, 0
18002534:	e3fff318 	bsr      	0x18000b64	// 18000b64 <__udivdi3>
18002538:	6e03      	mov      	r8, r0
1800253a:	6e47      	mov      	r9, r1
1800253c:	6c24      	or      	r0, r9
1800253e:	e920ffee 	bnez      	r0, 0x1800251a	// 1800251a <__v2_printf+0x63e>
18002542:	0455      	br      	0x180025ec	// 180025ec <__v2_printf+0x710>
18002544:	ea080000 	movi      	r8, 0
18002548:	ea090000 	movi      	r9, 0
1800254c:	1d17      	addi      	r5, r14, 92
1800254e:	e5a8200f 	andi      	r13, r8, 15
18002552:	c789482c 	lsli      	r12, r9, 28
18002556:	c4884848 	lsri      	r8, r8, 4
1800255a:	d94e2005 	ld.w      	r10, (r14, 0x14)
1800255e:	c4894849 	lsri      	r9, r9, 4
18002562:	6e30      	or      	r8, r12
18002564:	2d00      	subi      	r5, 1
18002566:	c5282421 	or      	r1, r8, r9
1800256a:	d1aa0022 	ldr.b      	r2, (r10, r13 << 0)
1800256e:	a540      	st.b      	r2, (r5, 0x0)
18002570:	e921ffef 	bnez      	r1, 0x1800254e	// 1800254e <__v2_printf+0x672>
18002574:	043c      	br      	0x180025ec	// 180025ec <__v2_printf+0x710>
18002576:	e920000f 	bnez      	r0, 0x18002594	// 18002594 <__v2_printf+0x6b8>
1800257a:	e4842001 	andi      	r4, r4, 1
1800257e:	e904000b 	bez      	r4, 0x18002594	// 18002594 <__v2_printf+0x6b8>
18002582:	ea0a0030 	movi      	r10, 48
18002586:	07c4      	br      	0x1800250e	// 1800250e <__v2_printf+0x632>
18002588:	18016274 	.long	0x18016274
1800258c:	18016284 	.long	0x18016284
18002590:	18019411 	.long	0x18019411
18002594:	1d17      	addi      	r5, r14, 92
18002596:	042b      	br      	0x180025ec	// 180025ec <__v2_printf+0x710>
18002598:	eb4c002b 	cmpnei      	r12, 43
1800259c:	e860fdad 	bt      	0x180020f6	// 180020f6 <__v2_printf+0x21a>
180025a0:	e800fda9 	br      	0x180020f2	// 180020f2 <__v2_printf+0x216>
180025a4:	5af5      	subu      	r7, r2, r5
180025a6:	067e      	br      	0x180022a2	// 180022a2 <__v2_printf+0x3c6>
180025a8:	6ed3      	mov      	r11, r4
180025aa:	e90dff45 	bez      	r13, 0x18002434	// 18002434 <__v2_printf+0x558>
180025ae:	3841      	cmpnei      	r0, 1
180025b0:	0fa8      	bf      	0x18002500	// 18002500 <__v2_printf+0x624>
180025b2:	3842      	cmpnei      	r0, 2
180025b4:	0fcc      	bf      	0x1800254c	// 1800254c <__v2_printf+0x670>
180025b6:	1c17      	addi      	r4, r14, 92
180025b8:	e4482007 	andi      	r2, r8, 7
180025bc:	c7a9482c 	lsli      	r12, r9, 29
180025c0:	c4684848 	lsri      	r8, r8, 3
180025c4:	c4694849 	lsri      	r9, r9, 3
180025c8:	6e30      	or      	r8, r12
180025ca:	5ca3      	subi      	r5, r4, 1
180025cc:	c5282421 	or      	r1, r8, r9
180025d0:	222f      	addi      	r2, 48
180025d2:	a540      	st.b      	r2, (r5, 0x0)
180025d4:	e921ff94 	bnez      	r1, 0x180024fc	// 180024fc <__v2_printf+0x620>
180025d8:	e40b2001 	andi      	r0, r11, 1
180025dc:	e9000008 	bez      	r0, 0x180025ec	// 180025ec <__v2_printf+0x710>
180025e0:	eb420030 	cmpnei      	r2, 48
180025e4:	0c04      	bf      	0x180025ec	// 180025ec <__v2_printf+0x710>
180025e6:	5ca7      	subi      	r5, r4, 2
180025e8:	3330      	movi      	r3, 48
180025ea:	a560      	st.b      	r3, (r5, 0x0)
180025ec:	6e9f      	mov      	r10, r7
180025ee:	1f17      	addi      	r7, r14, 92
180025f0:	61d6      	subu      	r7, r5
180025f2:	6d2f      	mov      	r4, r11
180025f4:	0659      	br      	0x180022a6	// 180022a6 <__v2_printf+0x3ca>
180025f6:	9804      	ld.w      	r0, (r14, 0x10)
180025f8:	1417      	addi      	r14, r14, 92
180025fa:	1498      	pop      	r4-r11, r15

180025fc <__GI___dtostr>:
180025fc:	14d8      	push      	r4-r11, r15
180025fe:	1429      	subi      	r14, r14, 36
18002600:	6d4b      	mov      	r5, r2
18002602:	6d0f      	mov      	r4, r3
18002604:	9853      	ld.w      	r2, (r14, 0x4c)
18002606:	9872      	ld.w      	r3, (r14, 0x48)
18002608:	b803      	st.w      	r0, (r14, 0xc)
1800260a:	b822      	st.w      	r1, (r14, 0x8)
1800260c:	b865      	st.w      	r3, (r14, 0x14)
1800260e:	b844      	st.w      	r2, (r14, 0x10)
18002610:	e0000218 	bsr      	0x18002a40	// 18002a40 <__isinf>
18002614:	6dc3      	mov      	r7, r0
18002616:	e900001d 	bez      	r0, 0x18002650	// 18002650 <__GI___dtostr+0x54>
1800261a:	6d93      	mov      	r6, r4
1800261c:	e9640119 	blsz      	r4, 0x1800284e	// 1800284e <__GI___dtostr+0x252>
18002620:	3c41      	cmpnei      	r4, 1
18002622:	3269      	movi      	r2, 105
18002624:	a540      	st.b      	r2, (r5, 0x0)
18002626:	0c0e      	bf      	0x18002642	// 18002642 <__GI___dtostr+0x46>
18002628:	3c42      	cmpnei      	r4, 2
1800262a:	ea0c006e 	movi      	r12, 110
1800262e:	dd850001 	st.b      	r12, (r5, 0x1)
18002632:	0c08      	bf      	0x18002642	// 18002642 <__GI___dtostr+0x46>
18002634:	3366      	movi      	r3, 102
18002636:	3c43      	cmpnei      	r4, 3
18002638:	a562      	st.b      	r3, (r5, 0x2)
1800263a:	0c07      	bf      	0x18002648	// 18002648 <__GI___dtostr+0x4c>
1800263c:	3400      	movi      	r4, 0
1800263e:	a583      	st.b      	r4, (r5, 0x3)
18002640:	3604      	movi      	r6, 4
18002642:	6c1b      	mov      	r0, r6
18002644:	1409      	addi      	r14, r14, 36
18002646:	1498      	pop      	r4-r11, r15
18002648:	3603      	movi      	r6, 3
1800264a:	6c1b      	mov      	r0, r6
1800264c:	1409      	addi      	r14, r14, 36
1800264e:	1498      	pop      	r4-r11, r15
18002650:	9803      	ld.w      	r0, (r14, 0xc)
18002652:	9822      	ld.w      	r1, (r14, 0x8)
18002654:	e00001e2 	bsr      	0x18002a18	// 18002a18 <__isnan>
18002658:	6d83      	mov      	r6, r0
1800265a:	e900000e 	bez      	r0, 0x18002676	// 18002676 <__GI___dtostr+0x7a>
1800265e:	6d93      	mov      	r6, r4
18002660:	e96400f7 	blsz      	r4, 0x1800284e	// 1800284e <__GI___dtostr+0x252>
18002664:	3c41      	cmpnei      	r4, 1
18002666:	336e      	movi      	r3, 110
18002668:	a560      	st.b      	r3, (r5, 0x0)
1800266a:	0fec      	bf      	0x18002642	// 18002642 <__GI___dtostr+0x46>
1800266c:	3c42      	cmpnei      	r4, 2
1800266e:	3061      	movi      	r0, 97
18002670:	a501      	st.b      	r0, (r5, 0x1)
18002672:	0be2      	bt      	0x18002636	// 18002636 <__GI___dtostr+0x3a>
18002674:	07e7      	br      	0x18002642	// 18002642 <__GI___dtostr+0x46>
18002676:	6c83      	mov      	r2, r0
18002678:	6cc3      	mov      	r3, r0
1800267a:	9822      	ld.w      	r1, (r14, 0x8)
1800267c:	9803      	ld.w      	r0, (r14, 0xc)
1800267e:	e00001f7 	bsr      	0x18002a6c	// 18002a6c <__eqdf2>
18002682:	e9200015 	bnez      	r0, 0x180026ac	// 180026ac <__GI___dtostr+0xb0>
18002686:	9864      	ld.w      	r3, (r14, 0x10)
18002688:	e92300c7 	bnez      	r3, 0x18002816	// 18002816 <__GI___dtostr+0x21a>
1800268c:	e92401b4 	bnez      	r4, 0x180029f4	// 180029f4 <__GI___dtostr+0x3f8>
18002690:	98c2      	ld.w      	r6, (r14, 0x8)
18002692:	e986018e 	blz      	r6, 0x180029ae	// 180029ae <__GI___dtostr+0x3b2>
18002696:	3108      	movi      	r1, 8
18002698:	3300      	movi      	r3, 0
1800269a:	5d4c      	addu      	r2, r5, r3
1800269c:	3630      	movi      	r6, 48
1800269e:	2300      	addi      	r3, 1
180026a0:	644c      	cmphs      	r3, r1
180026a2:	a2c0      	st.b      	r6, (r2, 0x0)
180026a4:	2200      	addi      	r2, 1
180026a6:	0ffc      	bf      	0x1800269e	// 1800269e <__GI___dtostr+0xa2>
180026a8:	6d8f      	mov      	r6, r3
180026aa:	04bb      	br      	0x18002820	// 18002820 <__GI___dtostr+0x224>
180026ac:	6c9b      	mov      	r2, r6
180026ae:	6cdb      	mov      	r3, r6
180026b0:	9803      	ld.w      	r0, (r14, 0xc)
180026b2:	9822      	ld.w      	r1, (r14, 0x8)
180026b4:	e3fff8c8 	bsr      	0x18001844	// 18001844 <__ltdf2>
180026b8:	e9800156 	blz      	r0, 0x18002964	// 18002964 <__GI___dtostr+0x368>
180026bc:	b8a6      	st.w      	r5, (r14, 0x18)
180026be:	98e2      	ld.w      	r7, (r14, 0x8)
180026c0:	d96e2004 	ld.w      	r11, (r14, 0x10)
180026c4:	e90b0194 	bez      	r11, 0x180029ec	// 180029ec <__GI___dtostr+0x3f0>
180026c8:	3000      	movi      	r0, 0
180026ca:	ea213fe0 	movih      	r1, 16352
180026ce:	6e83      	mov      	r10, r0
180026d0:	ea8800c0 	lrw      	r8, 0x9999999a	// 180029d0 <__GI___dtostr+0x3d4>
180026d4:	ea8900c0 	lrw      	r9, 0x3fb99999	// 180029d4 <__GI___dtostr+0x3d8>
180026d8:	6ca3      	mov      	r2, r8
180026da:	6ce7      	mov      	r3, r9
180026dc:	e54a0000 	addi      	r10, r10, 1
180026e0:	e3fff706 	bsr      	0x180014ec	// 180014ec <__muldf3>
180026e4:	66ae      	cmpne      	r11, r10
180026e6:	0bf9      	bt      	0x180026d8	// 180026d8 <__GI___dtostr+0xdc>
180026e8:	6c83      	mov      	r2, r0
180026ea:	6cc7      	mov      	r3, r1
180026ec:	9803      	ld.w      	r0, (r14, 0xc)
180026ee:	6c5f      	mov      	r1, r7
180026f0:	e3fff6c8 	bsr      	0x18001480	// 18001480 <__adddf3>
180026f4:	3200      	movi      	r2, 0
180026f6:	ea233ff0 	movih      	r3, 16368
180026fa:	6dc3      	mov      	r7, r0
180026fc:	6e07      	mov      	r8, r1
180026fe:	e3fff8a3 	bsr      	0x18001844	// 18001844 <__ltdf2>
18002702:	e9800128 	blz      	r0, 0x18002952	// 18002952 <__GI___dtostr+0x356>
18002706:	d9ae2002 	ld.w      	r13, (r14, 0x8)
1800270a:	c68d57c2 	zext      	r2, r13, 30, 20
1800270e:	e40213fe 	subi      	r0, r2, 1023
18002712:	e3fff8b5 	bsr      	0x1800187c	// 1800187c <__floatsidf>
18002716:	024e      	lrw      	r2, 0x509f79ff	// 180029d8 <__GI___dtostr+0x3dc>
18002718:	026e      	lrw      	r3, 0x3fd34413	// 180029dc <__GI___dtostr+0x3e0>
1800271a:	e3fff6e9 	bsr      	0x180014ec	// 180014ec <__muldf3>
1800271e:	e3fff8e3 	bsr      	0x180018e4	// 180018e4 <__fixdfsi>
18002722:	5822      	addi      	r1, r0, 1
18002724:	b828      	st.w      	r1, (r14, 0x20)
18002726:	e9610111 	blsz      	r1, 0x18002948	// 18002948 <__GI___dtostr+0x34c>
1800272a:	392a      	cmplti      	r1, 11
1800272c:	6e47      	mov      	r9, r1
1800272e:	0888      	bt      	0x1800283e	// 1800283e <__GI___dtostr+0x242>
18002730:	3000      	movi      	r0, 0
18002732:	ea214024 	movih      	r1, 16420
18002736:	ea222000 	movih      	r2, 8192
1800273a:	0275      	lrw      	r3, 0x4202a05f	// 180029e0 <__GI___dtostr+0x3e4>
1800273c:	e5291009 	subi      	r9, r9, 10
18002740:	e3fff6d6 	bsr      	0x180014ec	// 180014ec <__muldf3>
18002744:	eb09000a 	cmphsi      	r9, 11
18002748:	0bf7      	bt      	0x18002736	// 18002736 <__GI___dtostr+0x13a>
1800274a:	eb490001 	cmpnei      	r9, 1
1800274e:	6e83      	mov      	r10, r0
18002750:	6ec7      	mov      	r11, r1
18002752:	0c0f      	bf      	0x18002770	// 18002770 <__GI___dtostr+0x174>
18002754:	6c2b      	mov      	r0, r10
18002756:	6c6f      	mov      	r1, r11
18002758:	3200      	movi      	r2, 0
1800275a:	ea234024 	movih      	r3, 16420
1800275e:	e5291000 	subi      	r9, r9, 1
18002762:	e3fff6c5 	bsr      	0x180014ec	// 180014ec <__muldf3>
18002766:	eb490001 	cmpnei      	r9, 1
1800276a:	0bf7      	bt      	0x18002758	// 18002758 <__GI___dtostr+0x15c>
1800276c:	6e83      	mov      	r10, r0
1800276e:	6ec7      	mov      	r11, r1
18002770:	0342      	lrw      	r2, 0xcccccccd	// 180029e4 <__GI___dtostr+0x3e8>
18002772:	0361      	lrw      	r3, 0x3feccccc	// 180029e8 <__GI___dtostr+0x3ec>
18002774:	6c2b      	mov      	r0, r10
18002776:	6c6f      	mov      	r1, r11
18002778:	e3fff846 	bsr      	0x18001804	// 18001804 <__gtdf2>
1800277c:	e960003b 	blsz      	r0, 0x180027f2	// 180027f2 <__GI___dtostr+0x1f6>
18002780:	b8c7      	st.w      	r6, (r14, 0x1c)
18002782:	ea090001 	movi      	r9, 1
18002786:	98c6      	ld.w      	r6, (r14, 0x18)
18002788:	6cab      	mov      	r2, r10
1800278a:	6cef      	mov      	r3, r11
1800278c:	6c1f      	mov      	r0, r7
1800278e:	6c63      	mov      	r1, r8
18002790:	e3fff7ae 	bsr      	0x180016ec	// 180016ec <__divdf3>
18002794:	e3fff8a8 	bsr      	0x180018e4	// 180018e4 <__fixdfsi>
18002798:	7480      	zextb      	r2, r0
1800279a:	e9090004 	bez      	r9, 0x180027a2	// 180027a2 <__GI___dtostr+0x1a6>
1800279e:	e9020019 	bez      	r2, 0x180027d0	// 180027d0 <__GI___dtostr+0x1d4>
180027a2:	222f      	addi      	r2, 48
180027a4:	a640      	st.b      	r2, (r6, 0x0)
180027a6:	2600      	addi      	r6, 1
180027a8:	e9040091 	bez      	r4, 0x180028ca	// 180028ca <__GI___dtostr+0x2ce>
180027ac:	7400      	zextb      	r0, r0
180027ae:	e3fff867 	bsr      	0x1800187c	// 1800187c <__floatsidf>
180027b2:	6cab      	mov      	r2, r10
180027b4:	6cef      	mov      	r3, r11
180027b6:	e3fff69b 	bsr      	0x180014ec	// 180014ec <__muldf3>
180027ba:	6c83      	mov      	r2, r0
180027bc:	6cc7      	mov      	r3, r1
180027be:	6c1f      	mov      	r0, r7
180027c0:	6c63      	mov      	r1, r8
180027c2:	e3fff677 	bsr      	0x180014b0	// 180014b0 <__subdf3>
180027c6:	6dc3      	mov      	r7, r0
180027c8:	6e07      	mov      	r8, r1
180027ca:	2c00      	subi      	r4, 1
180027cc:	ea090000 	movi      	r9, 0
180027d0:	3200      	movi      	r2, 0
180027d2:	ea234024 	movih      	r3, 16420
180027d6:	6c2b      	mov      	r0, r10
180027d8:	6c6f      	mov      	r1, r11
180027da:	e3fff789 	bsr      	0x180016ec	// 180016ec <__divdf3>
180027de:	035d      	lrw      	r2, 0xcccccccd	// 180029e4 <__GI___dtostr+0x3e8>
180027e0:	037d      	lrw      	r3, 0x3feccccc	// 180029e8 <__GI___dtostr+0x3ec>
180027e2:	6e83      	mov      	r10, r0
180027e4:	6ec7      	mov      	r11, r1
180027e6:	e3fff80f 	bsr      	0x18001804	// 18001804 <__gtdf2>
180027ea:	e940ffcf 	bhz      	r0, 0x18002788	// 18002788 <__GI___dtostr+0x18c>
180027ee:	b8c6      	st.w      	r6, (r14, 0x18)
180027f0:	98c7      	ld.w      	r6, (r14, 0x1c)
180027f2:	9866      	ld.w      	r3, (r14, 0x18)
180027f4:	654e      	cmpne      	r3, r5
180027f6:	0ce3      	bf      	0x180029bc	// 180029bc <__GI___dtostr+0x3c0>
180027f8:	d9ae2004 	ld.w      	r13, (r14, 0x10)
180027fc:	e92d002b 	bnez      	r13, 0x18002852	// 18002852 <__GI___dtostr+0x256>
18002800:	9806      	ld.w      	r0, (r14, 0x18)
18002802:	6016      	subu      	r0, r5
18002804:	5842      	addi      	r2, r0, 1
18002806:	9825      	ld.w      	r1, (r14, 0x14)
18002808:	6448      	cmphs      	r2, r1
1800280a:	0cb9      	bf      	0x1800297c	// 1800297c <__GI___dtostr+0x380>
1800280c:	6d83      	mov      	r6, r0
1800280e:	9806      	ld.w      	r0, (r14, 0x18)
18002810:	3200      	movi      	r2, 0
18002812:	a040      	st.b      	r2, (r0, 0x0)
18002814:	0717      	br      	0x18002642	// 18002642 <__GI___dtostr+0x46>
18002816:	2301      	addi      	r3, 2
18002818:	64d0      	cmphs      	r4, r3
1800281a:	0f3b      	bf      	0x18002690	// 18002690 <__GI___dtostr+0x94>
1800281c:	e92300ed 	bnez      	r3, 0x180029f6	// 180029f6 <__GI___dtostr+0x3fa>
18002820:	d9850000 	ld.b      	r12, (r5, 0x0)
18002824:	eb4c0030 	cmpnei      	r12, 48
18002828:	c4000500 	mvc      	r0
1800282c:	2000      	addi      	r0, 1
1800282e:	312e      	movi      	r1, 46
18002830:	ea0d0000 	movi      	r13, 0
18002834:	d4050021 	str.b      	r1, (r5, r0 << 0)
18002838:	d465002d 	str.b      	r13, (r5, r3 << 0)
1800283c:	0703      	br      	0x18002642	// 18002642 <__GI___dtostr+0x46>
1800283e:	9868      	ld.w      	r3, (r14, 0x20)
18002840:	3b41      	cmpnei      	r3, 1
18002842:	ea0a0000 	movi      	r10, 0
18002846:	ea2b4024 	movih      	r11, 16420
1800284a:	0b85      	bt      	0x18002754	// 18002754 <__GI___dtostr+0x158>
1800284c:	079a      	br      	0x18002780	// 18002780 <__GI___dtostr+0x184>
1800284e:	3600      	movi      	r6, 0
18002850:	06f9      	br      	0x18002642	// 18002642 <__GI___dtostr+0x46>
18002852:	e904fef8 	bez      	r4, 0x18002642	// 18002642 <__GI___dtostr+0x46>
18002856:	2c00      	subi      	r4, 1
18002858:	9824      	ld.w      	r1, (r14, 0x10)
1800285a:	d9ae2006 	ld.w      	r13, (r14, 0x18)
1800285e:	6450      	cmphs      	r4, r1
18002860:	322e      	movi      	r2, 46
18002862:	dc4d0000 	st.b      	r2, (r13, 0x0)
18002866:	e52d0000 	addi      	r9, r13, 1
1800286a:	0eec      	bf      	0x18002642	// 18002642 <__GI___dtostr+0x46>
1800286c:	9884      	ld.w      	r4, (r14, 0x10)
1800286e:	6124      	addu      	r4, r9
18002870:	b886      	st.w      	r4, (r14, 0x18)
18002872:	6d93      	mov      	r6, r4
18002874:	6cab      	mov      	r2, r10
18002876:	6cef      	mov      	r3, r11
18002878:	6c1f      	mov      	r0, r7
1800287a:	6c63      	mov      	r1, r8
1800287c:	e3fff738 	bsr      	0x180016ec	// 180016ec <__divdf3>
18002880:	e3fff832 	bsr      	0x180018e4	// 180018e4 <__fixdfsi>
18002884:	e460002f 	addi      	r3, r0, 48
18002888:	dc690000 	st.b      	r3, (r9, 0x0)
1800288c:	7400      	zextb      	r0, r0
1800288e:	e3fff7f7 	bsr      	0x1800187c	// 1800187c <__floatsidf>
18002892:	6cab      	mov      	r2, r10
18002894:	6cef      	mov      	r3, r11
18002896:	e3fff62b 	bsr      	0x180014ec	// 180014ec <__muldf3>
1800289a:	6c83      	mov      	r2, r0
1800289c:	6cc7      	mov      	r3, r1
1800289e:	6c1f      	mov      	r0, r7
180028a0:	6c63      	mov      	r1, r8
180028a2:	e3fff607 	bsr      	0x180014b0	// 180014b0 <__subdf3>
180028a6:	e5290000 	addi      	r9, r9, 1
180028aa:	6dc3      	mov      	r7, r0
180028ac:	6e07      	mov      	r8, r1
180028ae:	6c2b      	mov      	r0, r10
180028b0:	6c6f      	mov      	r1, r11
180028b2:	3200      	movi      	r2, 0
180028b4:	ea234024 	movih      	r3, 16420
180028b8:	e3fff71a 	bsr      	0x180016ec	// 180016ec <__divdf3>
180028bc:	65a6      	cmpne      	r9, r6
180028be:	6e83      	mov      	r10, r0
180028c0:	6ec7      	mov      	r11, r1
180028c2:	0bd9      	bt      	0x18002874	// 18002874 <__GI___dtostr+0x278>
180028c4:	9806      	ld.w      	r0, (r14, 0x18)
180028c6:	58d5      	subu      	r6, r0, r5
180028c8:	07a3      	br      	0x1800280e	// 1800280e <__GI___dtostr+0x212>
180028ca:	6cab      	mov      	r2, r10
180028cc:	6cef      	mov      	r3, r11
180028ce:	9803      	ld.w      	r0, (r14, 0xc)
180028d0:	9822      	ld.w      	r1, (r14, 0x8)
180028d2:	e3fff70d 	bsr      	0x180016ec	// 180016ec <__divdf3>
180028d6:	d98e2004 	ld.w      	r12, (r14, 0x10)
180028da:	d9ae2005 	ld.w      	r13, (r14, 0x14)
180028de:	dd8e2001 	st.w      	r12, (r14, 0x4)
180028e2:	ddae2000 	st.w      	r13, (r14, 0x0)
180028e6:	6cd3      	mov      	r3, r4
180028e8:	6c97      	mov      	r2, r5
180028ea:	6ddb      	mov      	r7, r6
180028ec:	98c7      	ld.w      	r6, (r14, 0x1c)
180028ee:	e3fffe87 	bsr      	0x180025fc	// 180025fc <__GI___dtostr>
180028f2:	e900fea8 	bez      	r0, 0x18002642	// 18002642 <__GI___dtostr+0x46>
180028f6:	6d1f      	mov      	r4, r7
180028f8:	6100      	addu      	r4, r0
180028fa:	3265      	movi      	r2, 101
180028fc:	a440      	st.b      	r2, (r4, 0x0)
180028fe:	3101      	movi      	r1, 1
18002900:	c4002482 	nor      	r2, r0, r0
18002904:	2400      	addi      	r4, 1
18002906:	3004      	movi      	r0, 4
18002908:	ea0303e8 	movi      	r3, 1000
1800290c:	ea0c000a 	movi      	r12, 10
18002910:	d9ae2008 	ld.w      	r13, (r14, 0x20)
18002914:	64f5      	cmplt      	r13, r3
18002916:	0c03      	bf      	0x1800291c	// 1800291c <__GI___dtostr+0x320>
18002918:	e921000e 	bnez      	r1, 0x18002934	// 18002934 <__GI___dtostr+0x338>
1800291c:	c46d8041 	divs      	r1, r13, r3
18002920:	e9020006 	bez      	r2, 0x1800292c	// 1800292c <__GI___dtostr+0x330>
18002924:	e4e1002f 	addi      	r7, r1, 48
18002928:	a4e0      	st.b      	r7, (r4, 0x0)
1800292a:	2400      	addi      	r4, 1
1800292c:	7c4c      	mult      	r1, r3
1800292e:	6346      	subu      	r13, r1
18002930:	2a00      	subi      	r2, 1
18002932:	3100      	movi      	r1, 0
18002934:	2800      	subi      	r0, 1
18002936:	c5838043 	divs      	r3, r3, r12
1800293a:	e920ffed 	bnez      	r0, 0x18002914	// 18002914 <__GI___dtostr+0x318>
1800293e:	b886      	st.w      	r4, (r14, 0x18)
18002940:	e902fe81 	bez      	r2, 0x18002642	// 18002642 <__GI___dtostr+0x46>
18002944:	5cd5      	subu      	r6, r4, r5
18002946:	0764      	br      	0x1800280e	// 1800280e <__GI___dtostr+0x212>
18002948:	ea8a0022 	lrw      	r10, 0x9999999a	// 180029d0 <__GI___dtostr+0x3d4>
1800294c:	ea8b0022 	lrw      	r11, 0x3fb99999	// 180029d4 <__GI___dtostr+0x3d8>
18002950:	0751      	br      	0x180027f2	// 180027f2 <__GI___dtostr+0x1f6>
18002952:	9806      	ld.w      	r0, (r14, 0x18)
18002954:	ea0c0030 	movi      	r12, 48
18002958:	dd800000 	st.b      	r12, (r0, 0x0)
1800295c:	2000      	addi      	r0, 1
1800295e:	2c00      	subi      	r4, 1
18002960:	b806      	st.w      	r0, (r14, 0x18)
18002962:	06d2      	br      	0x18002706	// 18002706 <__GI___dtostr+0x10a>
18002964:	9802      	ld.w      	r0, (r14, 0x8)
18002966:	ea218000 	movih      	r1, 32768
1800296a:	ea08002d 	movi      	r8, 45
1800296e:	5d62      	addi      	r3, r5, 1
18002970:	58e4      	addu      	r7, r0, r1
18002972:	dd050000 	st.b      	r8, (r5, 0x0)
18002976:	2c00      	subi      	r4, 1
18002978:	b866      	st.w      	r3, (r14, 0x18)
1800297a:	06a3      	br      	0x180026c0	// 180026c0 <__GI___dtostr+0xc4>
1800297c:	e904fe63 	bez      	r4, 0x18002642	// 18002642 <__GI___dtostr+0x46>
18002980:	d92e2006 	ld.w      	r9, (r14, 0x18)
18002984:	332e      	movi      	r3, 46
18002986:	dc690000 	st.b      	r3, (r9, 0x0)
1800298a:	9805      	ld.w      	r0, (r14, 0x14)
1800298c:	e5290000 	addi      	r9, r9, 1
18002990:	c4a9008c 	subu      	r12, r9, r5
18002994:	2000      	addi      	r0, 1
18002996:	6032      	subu      	r0, r12
18002998:	2c00      	subi      	r4, 1
1800299a:	6410      	cmphs      	r4, r0
1800299c:	b804      	st.w      	r0, (r14, 0x10)
1800299e:	0e52      	bf      	0x18002642	// 18002642 <__GI___dtostr+0x46>
180029a0:	9884      	ld.w      	r4, (r14, 0x10)
180029a2:	e924ff65 	bnez      	r4, 0x1800286c	// 1800286c <__GI___dtostr+0x270>
180029a6:	6db3      	mov      	r6, r12
180029a8:	dd2e2006 	st.w      	r9, (r14, 0x18)
180029ac:	0731      	br      	0x1800280e	// 1800280e <__GI___dtostr+0x212>
180029ae:	ea0c002d 	movi      	r12, 45
180029b2:	dd850000 	st.b      	r12, (r5, 0x0)
180029b6:	3109      	movi      	r1, 9
180029b8:	3301      	movi      	r3, 1
180029ba:	0670      	br      	0x1800269a	// 1800269a <__GI___dtostr+0x9e>
180029bc:	e904fe43 	bez      	r4, 0x18002642	// 18002642 <__GI___dtostr+0x46>
180029c0:	ea0c0030 	movi      	r12, 48
180029c4:	dd830000 	st.b      	r12, (r3, 0x0)
180029c8:	2300      	addi      	r3, 1
180029ca:	2c00      	subi      	r4, 1
180029cc:	b866      	st.w      	r3, (r14, 0x18)
180029ce:	0715      	br      	0x180027f8	// 180027f8 <__GI___dtostr+0x1fc>
180029d0:	9999999a 	.long	0x9999999a
180029d4:	3fb99999 	.long	0x3fb99999
180029d8:	509f79ff 	.long	0x509f79ff
180029dc:	3fd34413 	.long	0x3fd34413
180029e0:	4202a05f 	.long	0x4202a05f
180029e4:	cccccccd 	.long	0xcccccccd
180029e8:	3feccccc 	.long	0x3feccccc
180029ec:	9804      	ld.w      	r0, (r14, 0x10)
180029ee:	ea213fe0 	movih      	r1, 16352
180029f2:	067b      	br      	0x180026e8	// 180026e8 <__GI___dtostr+0xec>
180029f4:	3301      	movi      	r3, 1
180029f6:	d9ae2002 	ld.w      	r13, (r14, 0x8)
180029fa:	e9ad000b 	bhsz      	r13, 0x18002a10	// 18002a10 <__GI___dtostr+0x414>
180029fe:	5b22      	addi      	r1, r3, 1
18002a00:	3301      	movi      	r3, 1
18002a02:	644c      	cmphs      	r3, r1
18002a04:	342d      	movi      	r4, 45
18002a06:	a580      	st.b      	r4, (r5, 0x0)
18002a08:	0e49      	bf      	0x1800269a	// 1800269a <__GI___dtostr+0x9e>
18002a0a:	6d8f      	mov      	r6, r3
18002a0c:	3002      	movi      	r0, 2
18002a0e:	0710      	br      	0x1800282e	// 1800282e <__GI___dtostr+0x232>
18002a10:	6c4f      	mov      	r1, r3
18002a12:	3300      	movi      	r3, 0
18002a14:	0643      	br      	0x1800269a	// 1800269a <__GI___dtostr+0x9e>
	...

18002a18 <__isnan>:
18002a18:	c4015663 	zext      	r3, r1, 19, 0
18002a1c:	6c0c      	or      	r0, r3
18002a1e:	e9000010 	bez      	r0, 0x18002a3e	// 18002a3e <__isnan+0x26>
18002a22:	ea207ff0 	movih      	r0, 32752
18002a26:	c4012023 	and      	r3, r1, r0
18002a2a:	3200      	movi      	r2, 0
18002a2c:	3000      	movi      	r0, 0
18002a2e:	ea217ff0 	movih      	r1, 32752
18002a32:	6c81      	xor      	r2, r0
18002a34:	6cc5      	xor      	r3, r1
18002a36:	6c8c      	or      	r2, r3
18002a38:	3a40      	cmpnei      	r2, 0
18002a3a:	6443      	mvcv      	r1
18002a3c:	7404      	zextb      	r0, r1
18002a3e:	783c      	jmp      	r15

18002a40 <__isinf>:
18002a40:	6c83      	mov      	r2, r0
18002a42:	6cc7      	mov      	r3, r1
18002a44:	e900000d 	bez      	r0, 0x18002a5e	// 18002a5e <__isinf+0x1e>
18002a48:	3000      	movi      	r0, 0
18002a4a:	ea21fff0 	movih      	r1, 65520
18002a4e:	6c81      	xor      	r2, r0
18002a50:	6cc5      	xor      	r3, r1
18002a52:	6c8c      	or      	r2, r3
18002a54:	3a40      	cmpnei      	r2, 0
18002a56:	64c3      	mvcv      	r3
18002a58:	3000      	movi      	r0, 0
18002a5a:	600e      	subu      	r0, r3
18002a5c:	783c      	jmp      	r15
18002a5e:	ea217ff0 	movih      	r1, 32752
18002a62:	644e      	cmpne      	r3, r1
18002a64:	0bf2      	bt      	0x18002a48	// 18002a48 <__isinf+0x8>
18002a66:	3001      	movi      	r0, 1
18002a68:	783c      	jmp      	r15
	...

18002a6c <__eqdf2>:
18002a6c:	14d0      	push      	r15
18002a6e:	142e      	subi      	r14, r14, 56
18002a70:	b800      	st.w      	r0, (r14, 0x0)
18002a72:	b821      	st.w      	r1, (r14, 0x4)
18002a74:	6c3b      	mov      	r0, r14
18002a76:	1904      	addi      	r1, r14, 16
18002a78:	b863      	st.w      	r3, (r14, 0xc)
18002a7a:	b842      	st.w      	r2, (r14, 0x8)
18002a7c:	e3fff834 	bsr      	0x18001ae4	// 18001ae4 <__unpack_d>
18002a80:	1802      	addi      	r0, r14, 8
18002a82:	1909      	addi      	r1, r14, 36
18002a84:	e3fff830 	bsr      	0x18001ae4	// 18001ae4 <__unpack_d>
18002a88:	9864      	ld.w      	r3, (r14, 0x10)
18002a8a:	3001      	movi      	r0, 1
18002a8c:	64c0      	cmphs      	r0, r3
18002a8e:	0808      	bt      	0x18002a9e	// 18002a9e <__eqdf2+0x32>
18002a90:	9869      	ld.w      	r3, (r14, 0x24)
18002a92:	64c0      	cmphs      	r0, r3
18002a94:	0805      	bt      	0x18002a9e	// 18002a9e <__eqdf2+0x32>
18002a96:	1909      	addi      	r1, r14, 36
18002a98:	1804      	addi      	r0, r14, 16
18002a9a:	e3fff897 	bsr      	0x18001bc8	// 18001bc8 <__fpcmp_parts_d>
18002a9e:	140e      	addi      	r14, r14, 56
18002aa0:	1490      	pop      	r15
	...

18002aa4 <main>:
    }
}


int main(void)
{
18002aa4:	14d2      	push      	r4-r5, r15
    uint32 sysheap_freesize(struct sys_heap *heap);
    os_printf("freemem:%d\r\n",sysheap_freesize(&sram_heap));
18002aa6:	111f      	lrw      	r0, 0x200021f0	// 18002ba0 <main+0xfc>
18002aa8:	e000887a 	bsr      	0x18013b9c	// 18013b9c <sysheap_freesize>
18002aac:	6c43      	mov      	r1, r0
18002aae:	111e      	lrw      	r0, 0x18016318	// 18002ba4 <main+0x100>
18002ab0:	e000500a 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>

	#ifdef PSRAM_HEAP
		while(!get_psram_status())
		{
			os_printf("psram no ready:%d\n",get_psram_status());
18002ab4:	119d      	lrw      	r4, 0x180162a1	// 18002ba8 <main+0x104>
		while(!get_psram_status())
18002ab6:	e0006be1 	bsr      	0x18010278	// 18010278 <get_psram_status>
18002aba:	e9000061 	bez      	r0, 0x18002b7c	// 18002b7c <main+0xd8>

	#ifdef PSRAM_HEAP
		#ifdef CUSTOM_PSRAM_SIZE
			#if CUSTOM_PSRAM_SIZE > 0
			{
				void *custom_buf = (void*)os_malloc_psram(CUSTOM_PSRAM_SIZE);
18002abe:	30fa      	movi      	r0, 250
18002ac0:	400b      	lsli      	r0, r0, 11
18002ac2:	e0004f5b 	bsr      	0x1800c978	// 1800c978 <_os_malloc_psram>
				custom_mem_psram_init(custom_buf,CUSTOM_PSRAM_SIZE);
18002ac6:	31fa      	movi      	r1, 250
18002ac8:	412b      	lsli      	r1, r1, 11
18002aca:	e00050f1 	bsr      	0x1800ccac	// 1800ccac <custom_mem_psram_init>
				print_custom_psram();
18002ace:	e0005117 	bsr      	0x1800ccfc	// 1800ccfc <print_custom_psram>
	#endif

    #ifdef CUSTOM_SIZE
        #if CUSTOM_SIZE > 0
        {
            void *custom_buf = (void*)os_malloc(CUSTOM_SIZE);
18002ad2:	30a0      	movi      	r0, 160
18002ad4:	4005      	lsli      	r0, r0, 5
18002ad6:	e0004f25 	bsr      	0x1800c920	// 1800c920 <_os_malloc>
            custom_mem_init(custom_buf,CUSTOM_SIZE);
18002ada:	31a0      	movi      	r1, 160
18002adc:	4125      	lsli      	r1, r1, 5
18002ade:	e00050b3 	bsr      	0x1800cc44	// 1800cc44 <custom_mem_init>
            print_custom_sram();
18002ae2:	e00050d7 	bsr      	0x1800cc90	// 1800cc90 <print_custom_sram>
    //do_global_ctors();
    //wifi_qc_mode_inspect();
    //sys_watchdog_pre_init();

    
    skbpool_init(SKB_POOL_ADDR, SKB_POOL_SIZE, 80, 0);
18002ae6:	1172      	lrw      	r3, 0x20001bac	// 18002bac <main+0x108>
18002ae8:	ea0c00b1 	movi      	r12, 177
18002aec:	9300      	ld.w      	r0, (r3, 0x0)
18002aee:	c54c482c 	lsli      	r12, r12, 10
18002af2:	1170      	lrw      	r3, 0x20001ba8	// 18002bb0 <main+0x10c>
18002af4:	3250      	movi      	r2, 80
18002af6:	9320      	ld.w      	r1, (r3, 0x0)
18002af8:	116f      	lrw      	r3, 0xfffd3c00	// 18002bb4 <main+0x110>
18002afa:	604c      	addu      	r1, r3
18002afc:	6042      	subu      	r1, r0
18002afe:	3300      	movi      	r3, 0
18002b00:	6030      	addu      	r0, r12
18002b02:	e0008a3d 	bsr      	0x18013f7c	// 18013f7c <skbpool_init>
    struct sys_config *sys_cfgs_tmp = (struct sys_config*)malloc(sizeof(struct sys_config));
18002b06:	30c4      	movi      	r0, 196
18002b08:	e0004f0c 	bsr      	0x1800c920	// 1800c920 <_os_malloc>
18002b0c:	6d43      	mov      	r5, r0
    if(sys_cfgs_tmp) /*apply succuess*/
18002b0e:	e9000006 	bez      	r0, 0x18002b1a	// 18002b1a <main+0x76>
        memcpy(sys_cfgs_tmp,&sys_cfgs,sizeof(struct sys_config));
18002b12:	32c4      	movi      	r2, 196
18002b14:	1129      	lrw      	r1, 0x20000a64	// 18002bb8 <main+0x114>
18002b16:	e00099a3 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
    if (syscfg_init(&sys_cfgs, sizeof(sys_cfgs)) == RET_OK) {
18002b1a:	1188      	lrw      	r4, 0x20000a64	// 18002bb8 <main+0x114>
18002b1c:	31c4      	movi      	r1, 196
18002b1e:	6c13      	mov      	r0, r4
18002b20:	e0008c3c 	bsr      	0x18014398	// 18014398 <syscfg_init>
18002b24:	e920000d 	bnez      	r0, 0x18002b3e	// 18002b3e <main+0x9a>
        os_printf("old cfg_ver:%d\n",sys_cfgs.cfg_ver); 
18002b28:	8c23      	ld.h      	r1, (r4, 0x6)
18002b2a:	1105      	lrw      	r0, 0x180162b5	// 18002bbc <main+0x118>
18002b2c:	e0004fcc 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
		if(sys_cfgs.cfg_ver == CFG_VERSION_NUM) { /* same ver ! */
18002b30:	8c63      	ld.h      	r3, (r4, 0x6)
18002b32:	eb430103 	cmpnei      	r3, 259
18002b36:	0c13      	bf      	0x18002b5c	// 18002b5c <main+0xb8>
		sys_cfgs.cfg_ver = CFG_VERSION_NUM;  //change version to same as flash version
18002b38:	ea030103 	movi      	r3, 259
18002b3c:	ac63      	st.h      	r3, (r4, 0x6)
    if(sys_cfgs_tmp)
18002b3e:	e9050007 	bez      	r5, 0x18002b4c	// 18002b4c <main+0xa8>
        memcpy(&sys_cfgs,sys_cfgs_tmp,sizeof(struct sys_config)); /*Clear sys_cfgs*/
18002b42:	32c4      	movi      	r2, 196
18002b44:	6c57      	mov      	r1, r5
18002b46:	101d      	lrw      	r0, 0x20000a64	// 18002bb8 <main+0x114>
18002b48:	e000998a 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
    os_printf("use default params(%x).\r\n",sys_cfgs.cfg_ver);
18002b4c:	8c23      	ld.h      	r1, (r4, 0x6)
18002b4e:	101d      	lrw      	r0, 0x180162c6	// 18002bc0 <main+0x11c>
18002b50:	e0004fba 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    syscfg_set_default_val();
18002b54:	e00001fc 	bsr      	0x18002f4c	// 18002f4c <syscfg_set_default_val>
    syscfg_save(); /* save to falsh */
18002b58:	e00001f2 	bsr      	0x18002f3c	// 18002f3c <syscfg_save>
    if(sys_cfgs_tmp)
18002b5c:	e905001b 	bez      	r5, 0x18002b92	// 18002b92 <main+0xee>
        free(sys_cfgs_tmp);
18002b60:	6c17      	mov      	r0, r5
18002b62:	e0004f07 	bsr      	0x1800c970	// 1800c970 <_os_free>
    sys_cfg_load();


    
    pmu_clr_deadcode_pending();
18002b66:	ea038003 	movi      	r3, 32771
18002b6a:	c5e34903 	rotli      	r3, r3, 15
18002b6e:	1016      	lrw      	r0, 0x40018034	// 18002bc4 <main+0x120>
18002b70:	932d      	ld.w      	r1, (r3, 0x34)
18002b72:	3981      	bclri      	r1, 1
18002b74:	e0006e56 	bsr      	0x18010820	// 18010820 <pmu_reg_write>
    return 0;
}
18002b78:	3000      	movi      	r0, 0
18002b7a:	1492      	pop      	r4-r5, r15
			os_printf("psram no ready:%d\n",get_psram_status());
18002b7c:	e0006b7e 	bsr      	0x18010278	// 18010278 <get_psram_status>
18002b80:	6c43      	mov      	r1, r0
18002b82:	6c13      	mov      	r0, r4
18002b84:	e0004fa0 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
			os_sleep_ms(1000);
18002b88:	30fa      	movi      	r0, 250
18002b8a:	4002      	lsli      	r0, r0, 2
18002b8c:	e0008dc8 	bsr      	0x1801471c	// 1801471c <os_sleep_ms>
18002b90:	0793      	br      	0x18002ab6	// 18002ab6 <main+0x12>
        os_printf("%s:%d err,malloc sys_config err\n",__FUNCTION__,__LINE__);
18002b92:	3294      	movi      	r2, 148
18002b94:	102d      	lrw      	r1, 0x18016294	// 18002bc8 <main+0x124>
18002b96:	100e      	lrw      	r0, 0x180162e1	// 18002bcc <main+0x128>
18002b98:	e0004f96 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18002b9c:	07e5      	br      	0x18002b66	// 18002b66 <main+0xc2>
18002b9e:	0000      	.short	0x0000
18002ba0:	200021f0 	.long	0x200021f0
18002ba4:	18016318 	.long	0x18016318
18002ba8:	180162a1 	.long	0x180162a1
18002bac:	20001bac 	.long	0x20001bac
18002bb0:	20001ba8 	.long	0x20001ba8
18002bb4:	fffd3c00 	.long	0xfffd3c00
18002bb8:	20000a64 	.long	0x20000a64
18002bbc:	180162b5 	.long	0x180162b5
18002bc0:	180162c6 	.long	0x180162c6
18002bc4:	40018034 	.long	0x40018034
18002bc8:	18016294 	.long	0x18016294
18002bcc:	180162e1 	.long	0x180162e1

18002bd0 <device_init>:
    .mode        = SPI_NOR_XIP_MODE,
};
#endif
extern uint32_t get_flash_cap();
void device_init(void)
{
18002bd0:	14d2      	push      	r4-r5, r15
    extern void *console_handle;
    uint32_t flash_size = get_flash_cap();
18002bd2:	e0006b59 	bsr      	0x18010284	// 18010284 <get_flash_cap>
    if (flash_size > 0) {
18002bd6:	e9000004 	bez      	r0, 0x18002bde	// 18002bde <device_init+0xe>
        flash0.size = flash_size;
18002bda:	1377      	lrw      	r3, 0x20000148	// 18002db4 <device_init+0x1e4>
18002bdc:	b308      	st.w      	r0, (r3, 0x20)
    }

    hggpio_v4_attach(HG_GPIOA_DEVID, &gpioa);
18002bde:	1337      	lrw      	r1, 0x20000194	// 18002db8 <device_init+0x1e8>
18002be0:	3023      	movi      	r0, 35
18002be2:	e0001923 	bsr      	0x18005e28	// 18005e28 <hggpio_v4_attach>
    hggpio_v4_attach(HG_GPIOB_DEVID, &gpiob);
18002be6:	1336      	lrw      	r1, 0x20000234	// 18002dbc <device_init+0x1ec>
18002be8:	3024      	movi      	r0, 36
18002bea:	e000191f 	bsr      	0x18005e28	// 18005e28 <hggpio_v4_attach>
    hggpio_v4_attach(HG_GPIOC_DEVID, &gpioc);
18002bee:	1335      	lrw      	r1, 0x200002d4	// 18002dc0 <device_init+0x1f0>
18002bf0:	3025      	movi      	r0, 37
18002bf2:	e000191b 	bsr      	0x18005e28	// 18005e28 <hggpio_v4_attach>
    hggpio_v4_attach(HG_GPIOE_DEVID, &gpioe);
18002bf6:	1334      	lrw      	r1, 0x20000374	// 18002dc4 <device_init+0x1f4>
18002bf8:	3027      	movi      	r0, 39
18002bfa:	e0001917 	bsr      	0x18005e28	// 18005e28 <hggpio_v4_attach>

    hgi2s_v0_attach(HG_IIS0_DEVID, &i2s0);
18002bfe:	1333      	lrw      	r1, 0x20000414	// 18002dc8 <device_init+0x1f8>
18002c00:	3080      	movi      	r0, 128
18002c02:	e0001f87 	bsr      	0x18006b10	// 18006b10 <hgi2s_v0_attach>
    hgi2s_v0_attach(HG_IIS1_DEVID, &i2s1);
18002c06:	1332      	lrw      	r1, 0x20000430	// 18002dcc <device_init+0x1fc>
18002c08:	3081      	movi      	r0, 129
18002c0a:	e0001f83 	bsr      	0x18006b10	// 18006b10 <hgi2s_v0_attach>
    //hguart_v3_attach(HG_UART4_DEVID, &uart4);
    //hguart_v3_attach(HG_UART5_DEVID, &uart5);
    //hgspi_v2_attach(HG_SPI5_DEVID, &spi5);
    //hgspi_v2_attach(HG_SPI6_DEVID, &spi6);
    hgpdm_v0_attach(HG_PDM0_DEVID, &pdm);
18002c0e:	1331      	lrw      	r1, 0x20000518	// 18002dd0 <device_init+0x200>
18002c10:	304d      	movi      	r0, 77
18002c12:	e00038d3 	bsr      	0x18009db8	// 18009db8 <hgpdm_v0_attach>
    //hgled_v0_attach(HG_LED0_DEVID, &led);
    //hgtimer_v4_attach(HG_TIMER0_DEVID, &timer0);
    //hgtimer_v4_attach(HG_TIMER1_DEVID, &timer1);
    //hgtimer_v5_attach(HG_LED_TIMER0_DEVID, &led_timer0);
    //hgtimer_v6_attach(HG_SUPTMR0_DEVID, &super_timer0);
    hgpwm_v0_attach(HG_PWM0_DEVID, &pwm);
18002c16:	1330      	lrw      	r1, 0x20000554	// 18002dd4 <device_init+0x204>
18002c18:	307c      	movi      	r0, 124
18002c1a:	e0003a1b 	bsr      	0x1800a050	// 1800a050 <hgpwm_v0_attach>
    //hgcapture_v0_attach(HG_CAPTURE0_DEVID, &capture);
    //hgadc_v0_attach(HG_ADC1_DEVID, &adc1);
    hgadc_v0_attach(HG_ADC0_DEVID, &adc);

    hguart_v2_attach(HG_UART0_DEVID, &uart0);
18002c1e:	138f      	lrw      	r4, 0x20000874	// 18002dd8 <device_init+0x208>
    hgadc_v0_attach(HG_ADC0_DEVID, &adc);
18002c20:	132f      	lrw      	r1, 0x20000000	// 18002ddc <device_init+0x20c>
18002c22:	3074      	movi      	r0, 116
18002c24:	e000419a 	bsr      	0x1800af58	// 1800af58 <hgadc_v0_attach>
    hguart_v2_attach(HG_UART0_DEVID, &uart0);
18002c28:	6c53      	mov      	r1, r4
18002c2a:	3001      	movi      	r0, 1
18002c2c:	e0002ec6 	bsr      	0x180089b8	// 180089b8 <hguart_v2_attach>
    hguart_v2_attach(HG_UART1_DEVID, &uart1);
18002c30:	132c      	lrw      	r1, 0x20000890	// 18002de0 <device_init+0x210>
18002c32:	3002      	movi      	r0, 2
18002c34:	e0002ec2 	bsr      	0x180089b8	// 180089b8 <hguart_v2_attach>
	
	hguart_v4_attach(HG_UART4_DEVID, &uart4);
#ifdef MACBUS_SDIO
    //hgsdio20_slave_attach(HG_SDIOSLAVE_DEVID, &sdioslave);
#endif
    hg_m2m_dma_dev_attach(HG_M2MDMA_DEVID, &mem_dma);
18002c38:	13ab      	lrw      	r5, 0x200004e4	// 18002de4 <device_init+0x214>
	hguart_v4_attach(HG_UART4_DEVID, &uart4);
18002c3a:	132c      	lrw      	r1, 0x200008ac	// 18002de8 <device_init+0x218>
18002c3c:	3005      	movi      	r0, 5
18002c3e:	e0002ba1 	bsr      	0x18008380	// 18008380 <hguart_v4_attach>
    hg_m2m_dma_dev_attach(HG_M2MDMA_DEVID, &mem_dma);
18002c42:	6c57      	mov      	r1, r5
18002c44:	3036      	movi      	r0, 54
18002c46:	e0001465 	bsr      	0x18005510	// 18005510 <hg_m2m_dma_dev_attach>
    m2mdma = (struct dma_device *)&mem_dma;
18002c4a:	1369      	lrw      	r3, 0x20002258	// 18002dec <device_init+0x21c>
    dev_register(HG_WPHY_DEVID, (struct dev_obj *)&wphy);
#endif

#if USB_EN
#if USB_HOST_EN
    hgusb20_host_attach(HG_USBDEV_DEVID, &usb20_dev);
18002c4c:	1329      	lrw      	r1, 0x200008f0	// 18002df0 <device_init+0x220>
18002c4e:	300b      	movi      	r0, 11
    m2mdma = (struct dma_device *)&mem_dma;
18002c50:	b3a0      	st.w      	r5, (r3, 0x0)
    hgusb20_host_attach(HG_USBDEV_DEVID, &usb20_dev);
18002c52:	e00079a1 	bsr      	0x18011f94	// 18011f94 <hgusb20_host_attach>
#endif
#endif

    //hguart_attach(HG_UART0_DEVID, &uart0);
#if DVP_EN
    hgdvp_attach(HG_DVP_DEVID, &dvp);
18002c56:	1328      	lrw      	r1, 0x200000e0	// 18002df4 <device_init+0x224>
18002c58:	3040      	movi      	r0, 64
18002c5a:	e0003b7b 	bsr      	0x1800a350	// 1800a350 <hgdvp_attach>
#endif

#if JPG_EN
    hgjpg_attach(HG_JPG0_DEVID, &jpg0);
18002c5e:	1327      	lrw      	r1, 0x2000047c	// 18002df8 <device_init+0x228>
18002c60:	3042      	movi      	r0, 66
18002c62:	e0007c1b 	bsr      	0x18012498	// 18012498 <hgjpg_attach>
	hgjpg_attach(HG_JPG1_DEVID, &jpg1);
18002c66:	1326      	lrw      	r1, 0x200004a0	// 18002dfc <device_init+0x22c>
18002c68:	3043      	movi      	r0, 67
18002c6a:	e0007c17 	bsr      	0x18012498	// 18012498 <hgjpg_attach>
#endif

#if PRC_EN
	hgprc_attach(HG_PRC_DEVID, &prc);
18002c6e:	1325      	lrw      	r1, 0x20000534	// 18002e00 <device_init+0x230>
18002c70:	3045      	movi      	r0, 69
18002c72:	e000474f 	bsr      	0x1800bb10	// 1800bb10 <hgprc_attach>
#endif

#if OF_EN
	hgof_attach(HG_OF_DEVID, &of);
18002c76:	1324      	lrw      	r1, 0x200004fc	// 18002e04 <device_init+0x234>
18002c78:	3046      	movi      	r0, 70
18002c7a:	e0004dc5 	bsr      	0x1800c804	// 1800c804 <hgof_attach>
#endif

#if SCALE_EN
	hgscale1_attach(HG_SCALE1_DEVID, &scale1);
18002c7e:	1323      	lrw      	r1, 0x20000580	// 18002e08 <device_init+0x238>
18002c80:	3047      	movi      	r0, 71
18002c82:	e0004a6d 	bsr      	0x1800c15c	// 1800c15c <hgscale1_attach>
	hgscale2_attach(HG_SCALE2_DEVID, &scale2);
18002c86:	1322      	lrw      	r1, 0x200005a0	// 18002e0c <device_init+0x23c>
18002c88:	3048      	movi      	r0, 72
18002c8a:	e0004a85 	bsr      	0x1800c194	// 1800c194 <hgscale2_attach>
	hgscale3_attach(HG_SCALE3_DEVID, &scale3);
18002c8e:	1321      	lrw      	r1, 0x200005c0	// 18002e10 <device_init+0x240>
18002c90:	3049      	movi      	r0, 73
18002c92:	e0004a9d 	bsr      	0x1800c1cc	// 1800c1cc <hgscale3_attach>
#endif

#if LCD_EN
	hglcdc_attach(HG_LCDC_DEVID,&lcdc);
18002c96:	1320      	lrw      	r1, 0x200004c4	// 18002e14 <device_init+0x244>
18002c98:	3041      	movi      	r0, 65
18002c9a:	e0004669 	bsr      	0x1800b96c	// 1800b96c <hglcdc_attach>
#endif

#if VPP_EN
	hgvpp_attach(HG_VPP_DEVID, &vpp);
18002c9e:	123f      	lrw      	r1, 0x20000a44	// 18002e18 <device_init+0x248>
18002ca0:	3044      	movi      	r0, 68
18002ca2:	e0004d4b 	bsr      	0x1800c738	// 1800c738 <hgvpp_attach>
#endif

#if SDH_EN
    hgsdh_attach(HG_SDIOHOST_DEVID, &sdh);
18002ca6:	123e      	lrw      	r1, 0x200005e0	// 18002e1c <device_init+0x24c>
18002ca8:	304c      	movi      	r0, 76
18002caa:	e0003529 	bsr      	0x180096fc	// 180096fc <hgsdh_attach>
#endif

    hgpwm_v0_attach(HG_PWM0_DEVID, &pwm);
18002cae:	122a      	lrw      	r1, 0x20000554	// 18002dd4 <device_init+0x204>
18002cb0:	307c      	movi      	r0, 124
18002cb2:	e00039cf 	bsr      	0x1800a050	// 1800a050 <hgpwm_v0_attach>
    hgtimer_v4_attach(HG_TIMER0_DEVID, &timer0);
18002cb6:	123b      	lrw      	r1, 0x200007fc	// 18002e20 <device_init+0x250>
18002cb8:	302a      	movi      	r0, 42
18002cba:	e000289b 	bsr      	0x18007df0	// 18007df0 <hgtimer_v4_attach>
    hgcapture_v0_attach(HG_CAPTURE0_DEVID, &capture);
#endif
//    hg_gmac_v2_attach(HG_ETH_GMAC_DEVID, &gmac);


    hg_crc_attach(HG_CRC_DEVID, &crc32_module);
18002cbe:	123a      	lrw      	r1, 0x200000ac	// 18002e24 <device_init+0x254>
18002cc0:	303b      	movi      	r0, 59
18002cc2:	e0003005 	bsr      	0x18008ccc	// 18008ccc <hg_crc_attach>
    hg_sysaes_v3_attach(HG_HWAES0_DEVID, &sysaes);
18002cc6:	1239      	lrw      	r1, 0x200007d4	// 18002e28 <device_init+0x258>
18002cc8:	300c      	movi      	r0, 12
18002cca:	e0003705 	bsr      	0x18009ad4	// 18009ad4 <hg_sysaes_v3_attach>
//    hgtimer_attach(HG_TIMER4_DEVID, &timer4);
//    hgtimer_attach(HG_TIMER5_DEVID, &timer5);
//    hgtimer_attach(HG_TIMER6_DEVID, &timer6);
//    hgtimer_attach(HG_TIMER7_DEVID, &timer7);

    hgspi_v3_attach(HG_SPI0_DEVID, &spi0);
18002cce:	1238      	lrw      	r1, 0x20000748	// 18002e2c <device_init+0x25c>
18002cd0:	300e      	movi      	r0, 14
18002cd2:	e0002503 	bsr      	0x180076d8	// 180076d8 <hgspi_v3_attach>
	//hgspi_v3_attach(HG_SPI1_DEVID, &spi1);
    hgspi_xip_attach(HG_SPI7_DEVID, &spi7);
18002cd6:	1237      	lrw      	r1, 0x200007c0	// 18002e30 <device_init+0x260>
18002cd8:	3015      	movi      	r0, 21
18002cda:	e0007fb7 	bsr      	0x18012c48	// 18012c48 <hgspi_xip_attach>
//    hgspi_v1_attach(SPI3_DEVID, &spi3);
	spi_nor_attach(&flash0, HG_FLASH0_DEVID);
18002cde:	3137      	movi      	r1, 55
18002ce0:	1115      	lrw      	r0, 0x20000148	// 18002db4 <device_init+0x1e4>
18002ce2:	e0000369 	bsr      	0x180033b4	// 180033b4 <spi_nor_attach>

//    hgi2c_v1_attach(HG_I2C0_DEVID, &iic0);
    hgspi_v3_attach(HG_SPI1_DEVID, &spi1);
18002ce6:	1234      	lrw      	r1, 0x20000784	// 18002e34 <device_init+0x264>
18002ce8:	300f      	movi      	r0, 15
18002cea:	e00024f7 	bsr      	0x180076d8	// 180076d8 <hgspi_v3_attach>
    hgi2c_v1_attach(HG_I2C2_DEVID, &iic2);
18002cee:	1233      	lrw      	r1, 0x2000044c	// 18002e38 <device_init+0x268>
18002cf0:	301b      	movi      	r0, 27
18002cf2:	e0001cb9 	bsr      	0x18006664	// 18006664 <hgi2c_v1_attach>
//    hgi2c_attach(HG_I2C3_DEVID, &iic3);

    //hgcqspi_attach(HG_QSPI_DEVID, &cqspi);

    eth_mdio_bus_attach(HG_ETH_MDIOBUS0_DEVID, &mdio_bus0);
18002cf6:	1232      	lrw      	r1, 0x20002124	// 18002e3c <device_init+0x26c>
18002cf8:	303e      	movi      	r0, 62
18002cfa:	e0006349 	bsr      	0x1800f38c	// 1800f38c <eth_mdio_bus_attach>
    eth_phy_attach(HG_ETHPHY0_DEVID, &ethernet_phy0);
18002cfe:	1231      	lrw      	r1, 0x20000100	// 18002e40 <device_init+0x270>
18002d00:	303c      	movi      	r0, 60
18002d02:	e000634b 	bsr      	0x1800f398	// 1800f398 <eth_phy_attach>


    hg_audio_v0_attach(HG_AUADC_DEVID, &auadc);
18002d06:	1230      	lrw      	r1, 0x20000050	// 18002e44 <device_init+0x274>
18002d08:	3091      	movi      	r0, 145
18002d0a:	e0007fb1 	bsr      	0x18012c6c	// 18012c6c <hg_audio_v0_attach>
    hg_audio_v0_attach(HG_AUDAC_DEVID, &audac);
18002d0e:	122f      	lrw      	r1, 0x20000074	// 18002e48 <device_init+0x278>
18002d10:	3092      	movi      	r0, 146
18002d12:	e0007fad 	bsr      	0x18012c6c	// 18012c6c <hg_audio_v0_attach>
    //hg_audio_v0_attach(HG_AUALAW_DEVID, &aualaw);

    uart_open((struct uart_device *)&uart0, 921600);
18002d16:	31e1      	movi      	r1, 225
18002d18:	412c      	lsli      	r1, r1, 12
18002d1a:	6c13      	mov      	r0, r4
18002d1c:	e0000374 	bsr      	0x18003404	// 18003404 <uart_open>
    console_handle = (void*)&uart0;
18002d20:	126b      	lrw      	r3, 0x20002260	// 18002e4c <device_init+0x27c>
        SCHED->CTRL_CON &= ~(BIT(4));
    }
}

__STATIC_INLINE void ll_sysctrl_dma2ahb_pri_switch(uint32 pri) {
		SCHED->CTRL_CON &= ~(0xfff<<8);
18002d22:	c6605021 	bmaski      	r1, 20
18002d26:	c6814901 	rotli      	r1, r1, 20
18002d2a:	b380      	st.w      	r4, (r3, 0x0)
        SCHED->CTRL_CON |= (BIT(4));
18002d2c:	ea032000 	movi      	r3, 8192
18002d30:	3bbe      	bseti      	r3, 30

    //ll_sysctrl_dma2ahb_m2m1_wr_lmac_wave_wr_priority_switch(1);
    ll_sysctrl_dma2ahb_osd_enc_rd_lmac_wave_rd_priority_switch(1);
    ll_sysctrl_dma2ahb_pri_switch(0xE00);
    
    ll_sysctrl_dma2ahb_burst_set(DMA2AHB_BURST_CH_LMAC_WAVE_RD, DMA2AHB_BURST_SIZE_32);
18002d32:	3005      	movi      	r0, 5
18002d34:	9340      	ld.w      	r2, (r3, 0x0)
18002d36:	ec420010 	ori      	r2, r2, 16
18002d3a:	b340      	st.w      	r2, (r3, 0x0)
		SCHED->CTRL_CON &= ~(0xfff<<8);
18002d3c:	9340      	ld.w      	r2, (r3, 0x0)
18002d3e:	6884      	and      	r2, r1
18002d40:	b340      	st.w      	r2, (r3, 0x0)
        SCHED->CTRL_CON |= (pri<<8);
18002d42:	31e0      	movi      	r1, 224
18002d44:	9340      	ld.w      	r2, (r3, 0x0)
18002d46:	412c      	lsli      	r1, r1, 12
18002d48:	6c84      	or      	r2, r1
18002d4a:	b340      	st.w      	r2, (r3, 0x0)
18002d4c:	3102      	movi      	r1, 2
18002d4e:	e000737b 	bsr      	0x18011444	// 18011444 <ll_sysctrl_dma2ahb_burst_set>
    ll_sysctrl_dma2ahb_burst_set(DMA2AHB_BURST_CH_LMAC_WAVE_WR, DMA2AHB_BURST_SIZE_32);
18002d52:	3102      	movi      	r1, 2
18002d54:	3006      	movi      	r0, 6
18002d56:	e0007377 	bsr      	0x18011444	// 18011444 <ll_sysctrl_dma2ahb_burst_set>
    
    //ll_sysctrl_dma2ahb_burst_set(DMA2AHB_BURST_CH_MJPEG1_SCALE2_YUV_WR, DMA2AHB_BURST_SIZE_64);
    //ll_sysctrl_dma2ahb_burst_set(DMA2AHB_BURST_CH_MJPEG1_RD, DMA2AHB_BURST_SIZE_64);
    ll_sysctrl_dma2ahb_burst_set(DMA2AHB_BURST_CH_M2M0_RD, DMA2AHB_BURST_SIZE_32);
18002d5a:	3102      	movi      	r1, 2
18002d5c:	3016      	movi      	r0, 22
18002d5e:	e0007373 	bsr      	0x18011444	// 18011444 <ll_sysctrl_dma2ahb_burst_set>
    ll_sysctrl_dma2ahb_burst_set(DMA2AHB_BURST_CH_M2M0_WR, DMA2AHB_BURST_SIZE_32);
18002d62:	3102      	movi      	r1, 2
18002d64:	3017      	movi      	r0, 23
18002d66:	e000736f 	bsr      	0x18011444	// 18011444 <ll_sysctrl_dma2ahb_burst_set>
    ll_sysctrl_dma2ahb_burst_set(DMA2AHB_BURST_CH_M2M1_RD, DMA2AHB_BURST_SIZE_32);
18002d6a:	3102      	movi      	r1, 2
18002d6c:	3018      	movi      	r0, 24
18002d6e:	e000736b 	bsr      	0x18011444	// 18011444 <ll_sysctrl_dma2ahb_burst_set>
    ll_sysctrl_dma2ahb_burst_set(DMA2AHB_BURST_CH_M2M1_WR, DMA2AHB_BURST_SIZE_32);
18002d72:	3102      	movi      	r1, 2
18002d74:	3019      	movi      	r0, 25
18002d76:	e0007367 	bsr      	0x18011444	// 18011444 <ll_sysctrl_dma2ahb_burst_set>
    ll_sysctrl_dma2ahb_burst_set(DMA2AHB_BURST_CH_SCALE3_Y_WR, DMA2AHB_BURST_SIZE_32);
18002d7a:	3102      	movi      	r1, 2
18002d7c:	3008      	movi      	r0, 8
18002d7e:	e0007363 	bsr      	0x18011444	// 18011444 <ll_sysctrl_dma2ahb_burst_set>
    ll_sysctrl_dma2ahb_burst_set(DMA2AHB_BURST_CH_SCALE3_U_WR, DMA2AHB_BURST_SIZE_32);
18002d82:	3102      	movi      	r1, 2
18002d84:	3009      	movi      	r0, 9
18002d86:	e000735f 	bsr      	0x18011444	// 18011444 <ll_sysctrl_dma2ahb_burst_set>
    ll_sysctrl_dma2ahb_burst_set(DMA2AHB_BURST_CH_SCALE3_V_WR, DMA2AHB_BURST_SIZE_32);  
18002d8a:	3102      	movi      	r1, 2
18002d8c:	300a      	movi      	r0, 10
18002d8e:	e000735b 	bsr      	0x18011444	// 18011444 <ll_sysctrl_dma2ahb_burst_set>
    ll_sysctrl_dma2ahb_burst_set(DMA2AHB_BURST_CH_LCD_ROTATE_RD, DMA2AHB_BURST_SIZE_16);
18002d92:	3101      	movi      	r1, 1
18002d94:	3000      	movi      	r0, 0
18002d96:	e0007357 	bsr      	0x18011444	// 18011444 <ll_sysctrl_dma2ahb_burst_set>
    ll_sysctrl_dma2ahb_burst_set(DMA2AHB_BURST_CH_OSD_ENC_RD, DMA2AHB_BURST_SIZE_32);
18002d9a:	3102      	movi      	r1, 2
18002d9c:	300f      	movi      	r0, 15
18002d9e:	e0007353 	bsr      	0x18011444	// 18011444 <ll_sysctrl_dma2ahb_burst_set>
    ll_sysctrl_dma2ahb_burst_set(DMA2AHB_BURST_CH_OSD_ENC_WR, DMA2AHB_BURST_SIZE_32);
18002da2:	3102      	movi      	r1, 2
18002da4:	3010      	movi      	r0, 16
18002da6:	e000734f 	bsr      	0x18011444	// 18011444 <ll_sysctrl_dma2ahb_burst_set>
    ll_sysctrl_dma2ahb_burst_set(DMA2AHB_BURST_CH_OSD0_RD, DMA2AHB_BURST_SIZE_32);
18002daa:	3102      	movi      	r1, 2
18002dac:	6c07      	mov      	r0, r1
18002dae:	e000734b 	bsr      	0x18011444	// 18011444 <ll_sysctrl_dma2ahb_burst_set>

    //psram_init(APS3208K_OKUD, (60*1000000));
}
18002db2:	1492      	pop      	r4-r5, r15
18002db4:	20000148 	.long	0x20000148
18002db8:	20000194 	.long	0x20000194
18002dbc:	20000234 	.long	0x20000234
18002dc0:	200002d4 	.long	0x200002d4
18002dc4:	20000374 	.long	0x20000374
18002dc8:	20000414 	.long	0x20000414
18002dcc:	20000430 	.long	0x20000430
18002dd0:	20000518 	.long	0x20000518
18002dd4:	20000554 	.long	0x20000554
18002dd8:	20000874 	.long	0x20000874
18002ddc:	20000000 	.long	0x20000000
18002de0:	20000890 	.long	0x20000890
18002de4:	200004e4 	.long	0x200004e4
18002de8:	200008ac 	.long	0x200008ac
18002dec:	20002258 	.long	0x20002258
18002df0:	200008f0 	.long	0x200008f0
18002df4:	200000e0 	.long	0x200000e0
18002df8:	2000047c 	.long	0x2000047c
18002dfc:	200004a0 	.long	0x200004a0
18002e00:	20000534 	.long	0x20000534
18002e04:	200004fc 	.long	0x200004fc
18002e08:	20000580 	.long	0x20000580
18002e0c:	200005a0 	.long	0x200005a0
18002e10:	200005c0 	.long	0x200005c0
18002e14:	200004c4 	.long	0x200004c4
18002e18:	20000a44 	.long	0x20000a44
18002e1c:	200005e0 	.long	0x200005e0
18002e20:	200007fc 	.long	0x200007fc
18002e24:	200000ac 	.long	0x200000ac
18002e28:	200007d4 	.long	0x200007d4
18002e2c:	20000748 	.long	0x20000748
18002e30:	200007c0 	.long	0x200007c0
18002e34:	20000784 	.long	0x20000784
18002e38:	2000044c 	.long	0x2000044c
18002e3c:	20002124 	.long	0x20002124
18002e40:	20000100 	.long	0x20000100
18002e44:	20000050 	.long	0x20000050
18002e48:	20000074 	.long	0x20000074
18002e4c:	20002260 	.long	0x20002260

18002e50 <gpio_get>:

struct gpio_device *gpio_get(uint32 pin)
{
    if (pin >= gpioa.pin_num[0] && pin <= gpioa.pin_num[1]) {
18002e50:	1075      	lrw      	r3, 0x20000194	// 18002ea4 <gpio_get+0x54>
18002e52:	d8432025 	ld.w      	r2, (r3, 0x94)
18002e56:	6480      	cmphs      	r0, r2
18002e58:	0c05      	bf      	0x18002e62	// 18002e62 <gpio_get+0x12>
18002e5a:	d8432026 	ld.w      	r2, (r3, 0x98)
18002e5e:	6408      	cmphs      	r2, r0
18002e60:	081e      	bt      	0x18002e9c	// 18002e9c <gpio_get+0x4c>
        return (struct gpio_device *)&gpioa;
    } else if (pin >= gpiob.pin_num[0] && pin <= gpiob.pin_num[1]) {
18002e62:	1072      	lrw      	r3, 0x20000234	// 18002ea8 <gpio_get+0x58>
18002e64:	d8432025 	ld.w      	r2, (r3, 0x94)
18002e68:	6480      	cmphs      	r0, r2
18002e6a:	0c05      	bf      	0x18002e74	// 18002e74 <gpio_get+0x24>
18002e6c:	d8432026 	ld.w      	r2, (r3, 0x98)
18002e70:	6408      	cmphs      	r2, r0
18002e72:	0815      	bt      	0x18002e9c	// 18002e9c <gpio_get+0x4c>
        return (struct gpio_device *)&gpiob;
    } else if (pin >= gpioc.pin_num[0] && pin <= gpioc.pin_num[1]) {
18002e74:	106e      	lrw      	r3, 0x200002d4	// 18002eac <gpio_get+0x5c>
18002e76:	d8432025 	ld.w      	r2, (r3, 0x94)
18002e7a:	6480      	cmphs      	r0, r2
18002e7c:	0c05      	bf      	0x18002e86	// 18002e86 <gpio_get+0x36>
18002e7e:	d8432026 	ld.w      	r2, (r3, 0x98)
18002e82:	6408      	cmphs      	r2, r0
18002e84:	080c      	bt      	0x18002e9c	// 18002e9c <gpio_get+0x4c>
        return (struct gpio_device *)&gpioc;
    } else if (pin >= gpioe.pin_num[0] && pin <= gpioe.pin_num[1]) {
18002e86:	106b      	lrw      	r3, 0x20000374	// 18002eb0 <gpio_get+0x60>
18002e88:	d8432025 	ld.w      	r2, (r3, 0x94)
18002e8c:	6480      	cmphs      	r0, r2
18002e8e:	0c09      	bf      	0x18002ea0	// 18002ea0 <gpio_get+0x50>
18002e90:	d8432026 	ld.w      	r2, (r3, 0x98)
        return (struct gpio_device *)&gpioe;
18002e94:	6408      	cmphs      	r2, r0
18002e96:	3000      	movi      	r0, 0
18002e98:	c4600c20 	incf      	r3, r0, 0
    }
    return NULL;
}
18002e9c:	6c0f      	mov      	r0, r3
18002e9e:	783c      	jmp      	r15
    return NULL;
18002ea0:	3300      	movi      	r3, 0
18002ea2:	07fd      	br      	0x18002e9c	// 18002e9c <gpio_get+0x4c>
18002ea4:	20000194 	.long	0x20000194
18002ea8:	20000234 	.long	0x20000234
18002eac:	200002d4 	.long	0x200002d4
18002eb0:	20000374 	.long	0x20000374

18002eb4 <syscfg_info_get>:

int32 syscfg_info_get(struct syscfg_info *pinfo)
{
18002eb4:	14d1      	push      	r4, r15
#if SYSCFG_ENABLE
    pinfo->flash1 = &flash0;
18002eb6:	105d      	lrw      	r2, 0x20000148	// 18002f28 <syscfg_info_get+0x74>
{
18002eb8:	6d03      	mov      	r4, r0
    pinfo->flash2 = &flash0;
    pinfo->size  = pinfo->flash1->sector_size;
18002eba:	9229      	ld.w      	r1, (r2, 0x24)
    pinfo->flash1 = &flash0;
18002ebc:	b040      	st.w      	r2, (r0, 0x0)
    pinfo->flash2 = &flash0;
18002ebe:	b041      	st.w      	r2, (r0, 0x4)
    pinfo->addr1 = pinfo->flash1->size - (2 * pinfo->size);
18002ec0:	9268      	ld.w      	r3, (r2, 0x20)
    pinfo->size  = pinfo->flash1->sector_size;
18002ec2:	b024      	st.w      	r1, (r0, 0x10)
    pinfo->addr1 = pinfo->flash1->size - (2 * pinfo->size);
18002ec4:	5904      	addu      	r0, r1, r1
18002ec6:	60c2      	subu      	r3, r0
    pinfo->addr2 = pinfo->flash1->size - pinfo->size;
18002ec8:	594c      	addu      	r2, r1, r3
18002eca:	b443      	st.w      	r2, (r4, 0xc)
    ASSERT((pinfo->addr1 & ~(pinfo->flash1->sector_size - 1)) == pinfo->addr1);
18002ecc:	3200      	movi      	r2, 0
18002ece:	6086      	subu      	r2, r1
18002ed0:	688c      	and      	r2, r3
18002ed2:	648e      	cmpne      	r3, r2
    pinfo->addr1 = pinfo->flash1->size - (2 * pinfo->size);
18002ed4:	b462      	st.w      	r3, (r4, 0x8)
    ASSERT((pinfo->addr1 & ~(pinfo->flash1->sector_size - 1)) == pinfo->addr1);
18002ed6:	0c07      	bf      	0x18002ee4	// 18002ee4 <syscfg_info_get+0x30>
18002ed8:	1055      	lrw      	r2, 0x18016336	// 18002f2c <syscfg_info_get+0x78>
18002eda:	ea01024e 	movi      	r1, 590
18002ede:	1015      	lrw      	r0, 0x18016326	// 18002f30 <syscfg_info_get+0x7c>
18002ee0:	e000009a 	bsr      	0x18003014	// 18003014 <assert_internal>
    ASSERT((pinfo->addr2 & ~(pinfo->flash2->sector_size - 1)) == pinfo->addr2);
18002ee4:	9461      	ld.w      	r3, (r4, 0x4)
18002ee6:	9443      	ld.w      	r2, (r4, 0xc)
18002ee8:	9329      	ld.w      	r1, (r3, 0x24)
18002eea:	3300      	movi      	r3, 0
18002eec:	60c6      	subu      	r3, r1
18002eee:	68c8      	and      	r3, r2
18002ef0:	64ca      	cmpne      	r2, r3
18002ef2:	0c07      	bf      	0x18002f00	// 18002f00 <syscfg_info_get+0x4c>
18002ef4:	1050      	lrw      	r2, 0x18016379	// 18002f34 <syscfg_info_get+0x80>
18002ef6:	ea01024f 	movi      	r1, 591
18002efa:	100e      	lrw      	r0, 0x18016326	// 18002f30 <syscfg_info_get+0x7c>
18002efc:	e000008c 	bsr      	0x18003014	// 18003014 <assert_internal>
    ASSERT((pinfo->size >= sizeof(struct sys_config)) && 
18002f00:	9444      	ld.w      	r2, (r4, 0x10)
18002f02:	eb0200c3 	cmphsi      	r2, 196
18002f06:	0c08      	bf      	0x18002f16	// 18002f16 <syscfg_info_get+0x62>
18002f08:	9460      	ld.w      	r3, (r4, 0x0)
18002f0a:	9329      	ld.w      	r1, (r3, 0x24)
18002f0c:	3300      	movi      	r3, 0
18002f0e:	60c6      	subu      	r3, r1
18002f10:	68c8      	and      	r3, r2
18002f12:	64ca      	cmpne      	r2, r3
18002f14:	0c07      	bf      	0x18002f22	// 18002f22 <syscfg_info_get+0x6e>
18002f16:	1049      	lrw      	r2, 0x180163bc	// 18002f38 <syscfg_info_get+0x84>
18002f18:	ea010251 	movi      	r1, 593
18002f1c:	1005      	lrw      	r0, 0x18016326	// 18002f30 <syscfg_info_get+0x7c>
18002f1e:	e000007b 	bsr      	0x18003014	// 18003014 <assert_internal>
           (pinfo->size == (pinfo->size & ~(pinfo->flash1->sector_size - 1))));
    return 0;
#else
    return -1;
#endif
}
18002f22:	3000      	movi      	r0, 0
18002f24:	1491      	pop      	r4, r15
18002f26:	0000      	.short	0x0000
18002f28:	20000148 	.long	0x20000148
18002f2c:	18016336 	.long	0x18016336
18002f30:	18016326 	.long	0x18016326
18002f34:	18016379 	.long	0x18016379
18002f38:	180163bc 	.long	0x180163bc

18002f3c <syscfg_save>:
    .ble_pair_status = 0,//ble 默认是0,没有配网,设置为1的时候,代表已经配过网络
    .wireless_paircode = 0,
};

int32 syscfg_save(void)
{
18002f3c:	14d0      	push      	r15
    return syscfg_write(&sys_cfgs, sizeof(sys_cfgs));
18002f3e:	31c4      	movi      	r1, 196
18002f40:	1002      	lrw      	r0, 0x20000a64	// 18002f48 <syscfg_save+0xc>
18002f42:	e0008917 	bsr      	0x18014170	// 18014170 <syscfg_write>
}
18002f46:	1490      	pop      	r15
18002f48:	20000a64 	.long	0x20000a64

18002f4c <syscfg_set_default_val>:
}

#endif

void syscfg_set_default_val()
{
18002f4c:	14d1      	push      	r4, r15
18002f4e:	1423      	subi      	r14, r14, 12
    sysctrl_efuse_mac_addr_calc(sys_cfgs.mac);
18002f50:	109f      	lrw      	r4, 0x20000a64	// 18002fcc <syscfg_set_default_val+0x80>
18002f52:	e4040015 	addi      	r0, r4, 22
18002f56:	e0006c13 	bsr      	0x1801077c	// 1801077c <sysctrl_efuse_mac_addr_calc>
    if (IS_ZERO_ADDR(sys_cfgs.mac)) {
18002f5a:	8457      	ld.b      	r2, (r4, 0x17)
18002f5c:	8476      	ld.b      	r3, (r4, 0x16)
18002f5e:	6cc8      	or      	r3, r2
18002f60:	8458      	ld.b      	r2, (r4, 0x18)
18002f62:	6cc8      	or      	r3, r2
18002f64:	8459      	ld.b      	r2, (r4, 0x19)
18002f66:	6cc8      	or      	r3, r2
18002f68:	845a      	ld.b      	r2, (r4, 0x1a)
18002f6a:	6cc8      	or      	r3, r2
18002f6c:	845b      	ld.b      	r2, (r4, 0x1b)
18002f6e:	6cc8      	or      	r3, r2
18002f70:	e9230016 	bnez      	r3, 0x18002f9c	// 18002f9c <syscfg_set_default_val+0x50>
        os_random_bytes(sys_cfgs.mac, 6);
18002f74:	3106      	movi      	r1, 6
18002f76:	e4040015 	addi      	r0, r4, 22
18002f7a:	e0004d2b 	bsr      	0x1800c9d0	// 1800c9d0 <os_random_bytes>
        sys_cfgs.mac[0] &= 0xfe;
        os_printf("use random mac "MACSTR"\r\n", MAC2STR(sys_cfgs.mac));
18002f7e:	841b      	ld.b      	r0, (r4, 0x1b)
18002f80:	b802      	st.w      	r0, (r14, 0x8)
18002f82:	841a      	ld.b      	r0, (r4, 0x1a)
        sys_cfgs.mac[0] &= 0xfe;
18002f84:	8436      	ld.b      	r1, (r4, 0x16)
        os_printf("use random mac "MACSTR"\r\n", MAC2STR(sys_cfgs.mac));
18002f86:	b801      	st.w      	r0, (r14, 0x4)
18002f88:	8419      	ld.b      	r0, (r4, 0x19)
        sys_cfgs.mac[0] &= 0xfe;
18002f8a:	e42120fe 	andi      	r1, r1, 254
        os_printf("use random mac "MACSTR"\r\n", MAC2STR(sys_cfgs.mac));
18002f8e:	b800      	st.w      	r0, (r14, 0x0)
18002f90:	8478      	ld.b      	r3, (r4, 0x18)
18002f92:	8457      	ld.b      	r2, (r4, 0x17)
18002f94:	100f      	lrw      	r0, 0x18016436	// 18002fd0 <syscfg_set_default_val+0x84>
        sys_cfgs.mac[0] &= 0xfe;
18002f96:	a436      	st.b      	r1, (r4, 0x16)
        os_printf("use random mac "MACSTR"\r\n", MAC2STR(sys_cfgs.mac));
18002f98:	e0004d96 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    }
    os_sprintf(sys_cfgs.ssid,"%s%02x%02x%02x",SSID_DEFAULT,sys_cfgs.mac[5],sys_cfgs.mac[4],sys_cfgs.mac[3]);
18002f9c:	8459      	ld.b      	r2, (r4, 0x19)
18002f9e:	b841      	st.w      	r2, (r14, 0x4)
18002fa0:	845a      	ld.b      	r2, (r4, 0x1a)
18002fa2:	847b      	ld.b      	r3, (r4, 0x1b)
18002fa4:	b840      	st.w      	r2, (r14, 0x0)
18002fa6:	100c      	lrw      	r0, 0x20000a80	// 18002fd4 <syscfg_set_default_val+0x88>
18002fa8:	104c      	lrw      	r2, 0x18016466	// 18002fd8 <syscfg_set_default_val+0x8c>
18002faa:	102d      	lrw      	r1, 0x18016471	// 18002fdc <syscfg_set_default_val+0x90>
18002fac:	e3fff678 	bsr      	0x18001c9c	// 18001c9c <__cskyvprintfsprintf>
    os_sprintf(sys_cfgs.passwd,"%s","12345678");
18002fb0:	102c      	lrw      	r1, 0x1801642d	// 18002fe0 <syscfg_set_default_val+0x94>
18002fb2:	100d      	lrw      	r0, 0x20000ac0	// 18002fe4 <syscfg_set_default_val+0x98>
18002fb4:	e3fff6f8 	bsr      	0x18001da4	// 18001da4 <__strcpy_fast>
#ifdef CONFIG_UMAC4
    wpa_passphrase(sys_cfgs.ssid, sys_cfgs.passwd, sys_cfgs.psk);
18002fb8:	104c      	lrw      	r2, 0x20000aa0	// 18002fe8 <syscfg_set_default_val+0x9c>
18002fba:	e422001f 	addi      	r1, r2, 32
18002fbe:	e401103f 	subi      	r0, r1, 64
18002fc2:	e0008ea9 	bsr      	0x18014d14	// 18014d14 <wpa_passphrase>
#else
    os_strcpy(sys_cfgs.key, "12345678");
#endif
}
18002fc6:	1403      	addi      	r14, r14, 12
18002fc8:	1491      	pop      	r4, r15
18002fca:	0000      	.short	0x0000
18002fcc:	20000a64 	.long	0x20000a64
18002fd0:	18016436 	.long	0x18016436
18002fd4:	20000a80 	.long	0x20000a80
18002fd8:	18016466 	.long	0x18016466
18002fdc:	18016471 	.long	0x18016471
18002fe0:	1801642d 	.long	0x1801642d
18002fe4:	20000ac0 	.long	0x20000ac0
18002fe8:	20000aa0 	.long	0x20000aa0

18002fec <disable_print>:
    return uart_putc((struct uart_device *)handle, ch);
}

void disable_print(int8_t dis)
{
    __disable_print__ = dis;
18002fec:	1062      	lrw      	r3, 0x2000225d	// 18002ff4 <disable_print+0x8>
18002fee:	a300      	st.b      	r0, (r3, 0x0)
}
18002ff0:	783c      	jmp      	r15
18002ff2:	0000      	.short	0x0000
18002ff4:	2000225d 	.long	0x2000225d

18002ff8 <krhino_mm_alloc>:

#include "csi_core.h"

#ifdef MPOOL_ALLOC
void *krhino_mm_alloc(size_t size, void *caller)
{
18002ff8:	14d0      	push      	r15
#if defined(PSRAM_HEAP) && defined(PSRAM_TASK_STACK)
    return sysheap_alloc(&psram_heap, size, caller, 0);
#else
    return sysheap_alloc(&sram_heap, size, caller, 0);
18002ffa:	6c87      	mov      	r2, r1
18002ffc:	3300      	movi      	r3, 0
18002ffe:	6c43      	mov      	r1, r0
18003000:	1002      	lrw      	r0, 0x200021f0	// 18003008 <krhino_mm_alloc+0x10>
18003002:	e00085a3 	bsr      	0x18013b48	// 18013b48 <sysheap_alloc>
#endif
}
18003006:	1490      	pop      	r15
18003008:	200021f0 	.long	0x200021f0

1800300c <krhino_mm_free>:

void krhino_mm_free(void *ptr)
{
1800300c:	14d0      	push      	r15
#if defined(PSRAM_HEAP) && defined(PSRAM_TASK_STACK)
    os_free_psram(ptr);
#else
    os_free(ptr);
1800300e:	e0004cb1 	bsr      	0x1800c970	// 1800c970 <_os_free>
#endif
}
18003012:	1490      	pop      	r15

18003014 <assert_internal>:
#include "osal/string.h"
#include "csi_core.h"

__bobj uint8_t assert_holdup;
void assert_internal(const char *__function, unsigned int __line, const char *__assertion)
{
18003014:	14d5      	push      	r4-r8, r15
18003016:	6dc3      	mov      	r7, r0
    int i = 0;

    disable_print(0);
18003018:	3000      	movi      	r0, 0
{
1800301a:	6d8b      	mov      	r6, r2
1800301c:	6e07      	mov      	r8, r1
    disable_print(0);
1800301e:	e3ffffe7 	bsr      	0x18002fec	// 18002fec <disable_print>
    if (assert_holdup) {
18003022:	106d      	lrw      	r3, 0x2000213c	// 18003054 <assert_internal+0x40>
18003024:	6d0f      	mov      	r4, r3
18003026:	8340      	ld.b      	r2, (r3, 0x0)
18003028:	e9020008 	bez      	r2, 0x18003038	// 18003038 <assert_internal+0x24>
        mcu_watchdog_timeout(0); //disable watchdog
1800302c:	3000      	movi      	r0, 0
1800302e:	e0007171 	bsr      	0x18011310	// 18011310 <mcu_watchdog_timeout>
        jtag_map_set(1);
18003032:	3001      	movi      	r0, 1
18003034:	e0006c12 	bsr      	0x18010858	// 18010858 <jtag_map_set>
    }

    do {
        os_printf(KERN_ERR"assertation \"%s\" failed: function: %s, line %d\r\n", __assertion, __function, __line);
18003038:	10a8      	lrw      	r5, 0x18016480	// 18003058 <assert_internal+0x44>
1800303a:	6ce3      	mov      	r3, r8
1800303c:	6c9f      	mov      	r2, r7
1800303e:	6c5b      	mov      	r1, r6
18003040:	6c17      	mov      	r0, r5
18003042:	e0004d41 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
        for (i = 0; i < 20000000; i++);
    } while (assert_holdup);
18003046:	8460      	ld.b      	r3, (r4, 0x0)
18003048:	e923fff9 	bnez      	r3, 0x1800303a	// 1800303a <assert_internal+0x26>

    mcu_reset();
1800304c:	e0007136 	bsr      	0x180112b8	// 180112b8 <mcu_reset>
}
18003050:	1495      	pop      	r4-r8, r15
18003052:	0000      	.short	0x0000
18003054:	2000213c 	.long	0x2000213c
18003058:	18016480 	.long	0x18016480

1800305c <dev_init>:
};

__bobj static struct dev_mgr s_dev_mgr;

__init int32 dev_init()
{
1800305c:	14d1      	push      	r4, r15
    os_mutex_init(&s_dev_mgr.mutex);
1800305e:	1084      	lrw      	r4, 0x20001950	// 1800306c <dev_init+0x10>
18003060:	5c0e      	addi      	r0, r4, 4
18003062:	e00089b3 	bsr      	0x180143c8	// 180143c8 <os_mutex_init>
    s_dev_mgr.next = NULL;
18003066:	3000      	movi      	r0, 0
18003068:	b400      	st.w      	r0, (r4, 0x0)
    return RET_OK;
}
1800306a:	1491      	pop      	r4, r15
1800306c:	20001950 	.long	0x20001950

18003070 <dev_get>:

struct dev_obj *dev_get(int32 dev_id)
{
18003070:	14d2      	push      	r4-r5, r15
    struct dev_obj *dev = NULL;

    os_mutex_lock(&s_dev_mgr.mutex, OS_MUTEX_WAIT_FOREVER);
18003072:	108b      	lrw      	r4, 0x20001950	// 1800309c <dev_get+0x2c>
18003074:	3100      	movi      	r1, 0
{
18003076:	6d43      	mov      	r5, r0
    os_mutex_lock(&s_dev_mgr.mutex, OS_MUTEX_WAIT_FOREVER);
18003078:	2900      	subi      	r1, 1
1800307a:	5c0e      	addi      	r0, r4, 4
1800307c:	e00089c8 	bsr      	0x1801440c	// 1801440c <os_mutex_lock>
    dev = s_dev_mgr.next;
18003080:	9480      	ld.w      	r4, (r4, 0x0)
    while (dev) {
18003082:	e9240007 	bnez      	r4, 0x18003090	// 18003090 <dev_get+0x20>
        if (dev->dev_id == dev_id) {
            break;
        }
        dev = dev->next;
    }
    os_mutex_unlock(&s_dev_mgr.mutex);
18003086:	1007      	lrw      	r0, 0x20001954	// 180030a0 <dev_get+0x30>
18003088:	e00089dc 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
    return dev;
}
1800308c:	6c13      	mov      	r0, r4
1800308e:	1492      	pop      	r4-r5, r15
        if (dev->dev_id == dev_id) {
18003090:	9460      	ld.w      	r3, (r4, 0x0)
18003092:	654e      	cmpne      	r3, r5
18003094:	0ff9      	bf      	0x18003086	// 18003086 <dev_get+0x16>
        dev = dev->next;
18003096:	9481      	ld.w      	r4, (r4, 0x4)
18003098:	07f5      	br      	0x18003082	// 18003082 <dev_get+0x12>
1800309a:	0000      	.short	0x0000
1800309c:	20001950 	.long	0x20001950
180030a0:	20001954 	.long	0x20001954

180030a4 <dev_register>:

__init int32 dev_register(uint32 dev_id, struct dev_obj *device)
{
180030a4:	14d3      	push      	r4-r6, r15
180030a6:	6d43      	mov      	r5, r0
180030a8:	6d87      	mov      	r6, r1
    struct dev_obj *dev = dev_get(dev_id);
180030aa:	e3ffffe3 	bsr      	0x18003070	// 18003070 <dev_get>
180030ae:	6d03      	mov      	r4, r0
    if (dev) {
180030b0:	e9200011 	bnez      	r0, 0x180030d2	// 180030d2 <dev_register+0x2e>
        return -EEXIST;
    }
    device->dev_id = dev_id;
180030b4:	b6a0      	st.w      	r5, (r6, 0x0)
    os_mutex_lock(&s_dev_mgr.mutex, OS_MUTEX_WAIT_FOREVER);
180030b6:	3100      	movi      	r1, 0
180030b8:	10a8      	lrw      	r5, 0x20001950	// 180030d8 <dev_register+0x34>
180030ba:	2900      	subi      	r1, 1
180030bc:	5d0e      	addi      	r0, r5, 4
180030be:	e00089a7 	bsr      	0x1801440c	// 1801440c <os_mutex_lock>
    device->next   = s_dev_mgr.next;
180030c2:	9560      	ld.w      	r3, (r5, 0x0)
180030c4:	b661      	st.w      	r3, (r6, 0x4)
    s_dev_mgr.next = device;
    os_mutex_unlock(&s_dev_mgr.mutex);
180030c6:	5d0e      	addi      	r0, r5, 4
    s_dev_mgr.next = device;
180030c8:	b5c0      	st.w      	r6, (r5, 0x0)
    os_mutex_unlock(&s_dev_mgr.mutex);
180030ca:	e00089bb 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
    return RET_OK;
180030ce:	6c13      	mov      	r0, r4
}
180030d0:	1493      	pop      	r4-r6, r15
        return -EEXIST;
180030d2:	3000      	movi      	r0, 0
180030d4:	2810      	subi      	r0, 17
180030d6:	07fd      	br      	0x180030d0	// 180030d0 <dev_register+0x2c>
180030d8:	20001950 	.long	0x20001950

180030dc <gpio_set_mode>:
  * @return
  *         - RET_OK  : GPIO set mode successfully.
  *         - RET_ERR : GPIO set mode unsuccessfully.
  */
int32 gpio_set_mode(uint32 pin, enum gpio_pin_mode mode, enum gpio_pull_level level)
{
180030dc:	14d3      	push      	r4-r6, r15
180030de:	6d03      	mov      	r4, r0
180030e0:	6d47      	mov      	r5, r1
180030e2:	6d8b      	mov      	r6, r2
    struct gpio_device *gpio = gpio_get(pin);
180030e4:	e3fffeb6 	bsr      	0x18002e50	// 18002e50 <gpio_get>
    if (gpio && ((const struct gpio_hal_ops *)gpio->dev.ops)->mode) {
180030e8:	e900000c 	bez      	r0, 0x18003100	// 18003100 <gpio_set_mode+0x24>
180030ec:	9062      	ld.w      	r3, (r0, 0x8)
180030ee:	d9832000 	ld.w      	r12, (r3, 0x0)
180030f2:	e90c0007 	bez      	r12, 0x18003100	// 18003100 <gpio_set_mode+0x24>
        return ((const struct gpio_hal_ops *)gpio->dev.ops)->mode(gpio, pin, mode, level);
180030f6:	6cdb      	mov      	r3, r6
180030f8:	6c97      	mov      	r2, r5
180030fa:	6c53      	mov      	r1, r4
180030fc:	7bf1      	jsr      	r12
    }

    return RET_ERR;
}
180030fe:	1493      	pop      	r4-r6, r15
    return RET_ERR;
18003100:	3000      	movi      	r0, 0
18003102:	2800      	subi      	r0, 1
18003104:	07fd      	br      	0x180030fe	// 180030fe <gpio_set_mode+0x22>
	...

18003108 <gpio_set_dir>:
  * @return
  *         - RET_OK  : GPIO set direction successfully.
  *         - RET_ERR : GPIO set direction unsuccessfully.
  */
int32 gpio_set_dir(uint32 pin, enum gpio_pin_direction direction)
{
18003108:	14d2      	push      	r4-r5, r15
1800310a:	6d03      	mov      	r4, r0
1800310c:	6d47      	mov      	r5, r1
    struct gpio_device *gpio = gpio_get(pin);
1800310e:	e3fffea1 	bsr      	0x18002e50	// 18002e50 <gpio_get>
    if (gpio && ((const struct gpio_hal_ops *)gpio->dev.ops)->dir) {
18003112:	e900000a 	bez      	r0, 0x18003126	// 18003126 <gpio_set_dir+0x1e>
18003116:	9062      	ld.w      	r3, (r0, 0x8)
18003118:	9361      	ld.w      	r3, (r3, 0x4)
1800311a:	e9030006 	bez      	r3, 0x18003126	// 18003126 <gpio_set_dir+0x1e>
        return ((const struct gpio_hal_ops *)gpio->dev.ops)->dir(gpio, pin, direction);
1800311e:	6c97      	mov      	r2, r5
18003120:	6c53      	mov      	r1, r4
18003122:	7bcd      	jsr      	r3
    }
    return RET_ERR;
}
18003124:	1492      	pop      	r4-r5, r15
    return RET_ERR;
18003126:	3000      	movi      	r0, 0
18003128:	2800      	subi      	r0, 1
1800312a:	07fd      	br      	0x18003124	// 18003124 <gpio_set_dir+0x1c>

1800312c <gpio_ioctl>:
  * @return
  *         - RET_OK  : GPIO module configure successfully.
  *         - RET_ERR : GPIO module configure unsuccessfully.
  */
int32 gpio_ioctl(uint32 pin, int32 cmd, int32 param1, int32 param2)
{
1800312c:	14d4      	push      	r4-r7, r15
1800312e:	1421      	subi      	r14, r14, 4
18003130:	6d03      	mov      	r4, r0
18003132:	6d47      	mov      	r5, r1
18003134:	6d8b      	mov      	r6, r2
18003136:	6dcf      	mov      	r7, r3
    struct gpio_device *gpio = gpio_get(pin);
18003138:	e3fffe8c 	bsr      	0x18002e50	// 18002e50 <gpio_get>
    if (gpio && ((const struct gpio_hal_ops *)gpio->dev.ops)->ioctl) {
1800313c:	e900000e 	bez      	r0, 0x18003158	// 18003158 <gpio_ioctl+0x2c>
18003140:	9062      	ld.w      	r3, (r0, 0x8)
18003142:	d9832006 	ld.w      	r12, (r3, 0x18)
18003146:	e90c0009 	bez      	r12, 0x18003158	// 18003158 <gpio_ioctl+0x2c>
        return ((const struct gpio_hal_ops *)gpio->dev.ops)->ioctl(gpio, pin, cmd, param1, param2);
1800314a:	b8e0      	st.w      	r7, (r14, 0x0)
1800314c:	6cdb      	mov      	r3, r6
1800314e:	6c97      	mov      	r2, r5
18003150:	6c53      	mov      	r1, r4
18003152:	7bf1      	jsr      	r12
    }
    return RET_ERR;
}
18003154:	1401      	addi      	r14, r14, 4
18003156:	1494      	pop      	r4-r7, r15
    return RET_ERR;
18003158:	3000      	movi      	r0, 0
1800315a:	2800      	subi      	r0, 1
1800315c:	07fc      	br      	0x18003154	// 18003154 <gpio_ioctl+0x28>
	...

18003160 <timer_device_ioctl>:
    }
    return RET_ERR;
}

int32 timer_device_ioctl(struct timer_device *timer, uint32 cmd, uint32 param1, uint32 param2)
{
18003160:	14d0      	push      	r15
    if (timer && ((const struct timer_hal_ops *)timer->dev.ops)->ioctl) {
18003162:	e900000a 	bez      	r0, 0x18003176	// 18003176 <timer_device_ioctl+0x16>
18003166:	d9802002 	ld.w      	r12, (r0, 0x8)
1800316a:	d98c2006 	ld.w      	r12, (r12, 0x18)
1800316e:	e90c0004 	bez      	r12, 0x18003176	// 18003176 <timer_device_ioctl+0x16>
        return ((const struct timer_hal_ops *)timer->dev.ops)->ioctl(timer, cmd, param1, param2);
18003172:	7bf1      	jsr      	r12
    }
    return RET_ERR;
}
18003174:	1490      	pop      	r15
    return RET_ERR;
18003176:	3000      	movi      	r0, 0
18003178:	2800      	subi      	r0, 1
1800317a:	07fd      	br      	0x18003174	// 18003174 <timer_device_ioctl+0x14>

1800317c <spi_open>:
#include "errno.h"
#include "dev.h"
#include "hal/spi.h"

int32 spi_open(struct spi_device *spi, uint32 clk_freq, uint32 work_mode, uint32 wire_mode, uint32 clk_mode)
{
1800317c:	14d0      	push      	r15
1800317e:	1421      	subi      	r14, r14, 4
18003180:	d9ae2002 	ld.w      	r13, (r14, 0x8)
    if (spi && ((const struct spi_hal_ops *)spi->dev.ops)->open) {
18003184:	e900000d 	bez      	r0, 0x1800319e	// 1800319e <spi_open+0x22>
18003188:	d9802002 	ld.w      	r12, (r0, 0x8)
1800318c:	d98c2000 	ld.w      	r12, (r12, 0x0)
18003190:	e90c0007 	bez      	r12, 0x1800319e	// 1800319e <spi_open+0x22>
        return ((const struct spi_hal_ops *)spi->dev.ops)->open(spi, clk_freq, work_mode, wire_mode, clk_mode);
18003194:	ddae2000 	st.w      	r13, (r14, 0x0)
18003198:	7bf1      	jsr      	r12
    }
    return RET_ERR;
}
1800319a:	1401      	addi      	r14, r14, 4
1800319c:	1490      	pop      	r15
    return RET_ERR;
1800319e:	3000      	movi      	r0, 0
180031a0:	2800      	subi      	r0, 1
180031a2:	07fc      	br      	0x1800319a	// 1800319a <spi_open+0x1e>

180031a4 <spi_close>:

int32 spi_close(struct spi_device *spi)
{
180031a4:	14d0      	push      	r15
    if (spi && ((const struct spi_hal_ops *)spi->dev.ops)->close) {
180031a6:	e9000008 	bez      	r0, 0x180031b6	// 180031b6 <spi_close+0x12>
180031aa:	9062      	ld.w      	r3, (r0, 0x8)
180031ac:	9361      	ld.w      	r3, (r3, 0x4)
180031ae:	e9030004 	bez      	r3, 0x180031b6	// 180031b6 <spi_close+0x12>
        return ((const struct spi_hal_ops *)spi->dev.ops)->close(spi);
180031b2:	7bcd      	jsr      	r3
    }
    return RET_ERR;
}
180031b4:	1490      	pop      	r15
    return RET_ERR;
180031b6:	3000      	movi      	r0, 0
180031b8:	2800      	subi      	r0, 1
180031ba:	07fd      	br      	0x180031b4	// 180031b4 <spi_close+0x10>

180031bc <spi_ioctl>:

int32 spi_ioctl(struct spi_device *spi, uint32 cmd, uint32 param1, uint32 param2)
{
180031bc:	14d0      	push      	r15
    if (spi && ((const struct spi_hal_ops *)spi->dev.ops)->ioctl) {
180031be:	e900000a 	bez      	r0, 0x180031d2	// 180031d2 <spi_ioctl+0x16>
180031c2:	d9802002 	ld.w      	r12, (r0, 0x8)
180031c6:	d98c2002 	ld.w      	r12, (r12, 0x8)
180031ca:	e90c0004 	bez      	r12, 0x180031d2	// 180031d2 <spi_ioctl+0x16>
        return ((const struct spi_hal_ops *)spi->dev.ops)->ioctl(spi, cmd, param1, param2);
180031ce:	7bf1      	jsr      	r12
    }
    return RET_ERR;
}
180031d0:	1490      	pop      	r15
    return RET_ERR;
180031d2:	3000      	movi      	r0, 0
180031d4:	2800      	subi      	r0, 1
180031d6:	07fd      	br      	0x180031d0	// 180031d0 <spi_ioctl+0x14>

180031d8 <spi_read>:

int32 spi_read(struct spi_device *spi, void *buf, uint32 size)
{
180031d8:	14d0      	push      	r15
    if (spi && ((const struct spi_hal_ops *)spi->dev.ops)->read) {
180031da:	e9000008 	bez      	r0, 0x180031ea	// 180031ea <spi_read+0x12>
180031de:	9062      	ld.w      	r3, (r0, 0x8)
180031e0:	9363      	ld.w      	r3, (r3, 0xc)
180031e2:	e9030004 	bez      	r3, 0x180031ea	// 180031ea <spi_read+0x12>
        return ((const struct spi_hal_ops *)spi->dev.ops)->read(spi, buf, size);
180031e6:	7bcd      	jsr      	r3
    }
    return RET_ERR;
}
180031e8:	1490      	pop      	r15
    return RET_ERR;
180031ea:	3000      	movi      	r0, 0
180031ec:	2800      	subi      	r0, 1
180031ee:	07fd      	br      	0x180031e8	// 180031e8 <spi_read+0x10>

180031f0 <spi_write>:

int32 spi_write(struct spi_device *spi, const void *buf, uint32 size)
{
180031f0:	14d0      	push      	r15
    if (spi && ((const struct spi_hal_ops *)spi->dev.ops)->write) {
180031f2:	e9000008 	bez      	r0, 0x18003202	// 18003202 <spi_write+0x12>
180031f6:	9062      	ld.w      	r3, (r0, 0x8)
180031f8:	9364      	ld.w      	r3, (r3, 0x10)
180031fa:	e9030004 	bez      	r3, 0x18003202	// 18003202 <spi_write+0x12>
        return ((const struct spi_hal_ops *)spi->dev.ops)->write(spi, buf, size);
180031fe:	7bcd      	jsr      	r3
    }
    return RET_ERR;
}
18003200:	1490      	pop      	r15
    return RET_ERR;
18003202:	3000      	movi      	r0, 0
18003204:	2800      	subi      	r0, 1
18003206:	07fd      	br      	0x18003200	// 18003200 <spi_write+0x10>

18003208 <spi_set_cs>:
    }
    return RET_ERR;
}

inline int32 spi_set_cs(struct spi_device *spi, uint32 cs, uint32 value)
{
18003208:	14d0      	push      	r15
1800320a:	6ccb      	mov      	r3, r2
    if (spi && ((const struct spi_hal_ops *)spi->dev.ops)->ioctl) {
1800320c:	e900000b 	bez      	r0, 0x18003222	// 18003222 <spi_set_cs+0x1a>
18003210:	9042      	ld.w      	r2, (r0, 0x8)
18003212:	d9822002 	ld.w      	r12, (r2, 0x8)
18003216:	e90c0006 	bez      	r12, 0x18003222	// 18003222 <spi_set_cs+0x1a>
        return ((const struct spi_hal_ops *)spi->dev.ops)->ioctl(spi, SPI_SET_CS, cs, value);
1800321a:	6c87      	mov      	r2, r1
1800321c:	3105      	movi      	r1, 5
1800321e:	7bf1      	jsr      	r12
    }
    return RET_ERR;
}
18003220:	1490      	pop      	r15
    return RET_ERR;
18003222:	3000      	movi      	r0, 0
18003224:	2800      	subi      	r0, 1
18003226:	07fd      	br      	0x18003220	// 18003220 <spi_set_cs+0x18>

18003228 <spi_nor_open>:
#include "osal/mutex.h"
#include "hal/spi.h"
#include "hal/spi_nor.h"

int32 spi_nor_open(struct spi_nor_flash *flash)
{
18003228:	14d3      	push      	r4-r6, r15
1800322a:	1421      	subi      	r14, r14, 4
    int32 ret;

    ASSERT(flash->bus);
1800322c:	9072      	ld.w      	r3, (r0, 0x48)
{
1800322e:	6d03      	mov      	r4, r0
    ASSERT(flash->bus);
18003230:	e9230007 	bnez      	r3, 0x1800323e	// 1800323e <spi_nor_open+0x16>
18003234:	1055      	lrw      	r2, 0x18016530	// 18003288 <spi_nor_open+0x60>
18003236:	310d      	movi      	r1, 13
18003238:	1015      	lrw      	r0, 0x180164b4	// 1800328c <spi_nor_open+0x64>
1800323a:	e3fffeed 	bsr      	0x18003014	// 18003014 <assert_internal>
    os_mutex_lock(&flash->lock, osWaitForever);
1800323e:	e4c4003b 	addi      	r6, r4, 60
18003242:	3100      	movi      	r1, 0
18003244:	2900      	subi      	r1, 1
18003246:	6c1b      	mov      	r0, r6
18003248:	e00088e2 	bsr      	0x1801440c	// 1801440c <os_mutex_lock>
    ret = spi_open(flash->spidev, flash->spi_config.clk, SPI_MASTER_MODE,
1800324c:	9465      	ld.w      	r3, (r4, 0x14)
1800324e:	b860      	st.w      	r3, (r14, 0x0)
18003250:	3200      	movi      	r2, 0
18003252:	9466      	ld.w      	r3, (r4, 0x18)
18003254:	9424      	ld.w      	r1, (r4, 0x10)
18003256:	9403      	ld.w      	r0, (r4, 0xc)
18003258:	e3ffff92 	bsr      	0x1800317c	// 1800317c <spi_open>
1800325c:	6d43      	mov      	r5, r0
                   flash->spi_config.wire_mode, flash->spi_config.clk_mode);
    ASSERT(!ret);
1800325e:	e9000007 	bez      	r0, 0x1800326c	// 1800326c <spi_nor_open+0x44>
18003262:	104c      	lrw      	r2, 0x1801653b	// 18003290 <spi_nor_open+0x68>
18003264:	3111      	movi      	r1, 17
18003266:	100a      	lrw      	r0, 0x180164b4	// 1800328c <spi_nor_open+0x64>
18003268:	e3fffed6 	bsr      	0x18003014	// 18003014 <assert_internal>
    if (flash->bus->open) {
1800326c:	9472      	ld.w      	r3, (r4, 0x48)
1800326e:	9360      	ld.w      	r3, (r3, 0x0)
18003270:	e9030004 	bez      	r3, 0x18003278	// 18003278 <spi_nor_open+0x50>
        flash->bus->open(flash);
18003274:	6c13      	mov      	r0, r4
18003276:	7bcd      	jsr      	r3
    }
    if(ret){
18003278:	e9050005 	bez      	r5, 0x18003282	// 18003282 <spi_nor_open+0x5a>
        os_mutex_unlock(&flash->lock);
1800327c:	6c1b      	mov      	r0, r6
1800327e:	e00088e1 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
    }
    return ret;
}
18003282:	6c17      	mov      	r0, r5
18003284:	1401      	addi      	r14, r14, 4
18003286:	1493      	pop      	r4-r6, r15
18003288:	18016530 	.long	0x18016530
1800328c:	180164b4 	.long	0x180164b4
18003290:	1801653b 	.long	0x1801653b

18003294 <spi_nor_close>:

void spi_nor_close(struct spi_nor_flash *flash)
{
18003294:	14d1      	push      	r4, r15
    ASSERT(flash->bus);
18003296:	9072      	ld.w      	r3, (r0, 0x48)
{
18003298:	6d03      	mov      	r4, r0
    ASSERT(flash->bus);
1800329a:	e9230007 	bnez      	r3, 0x180032a8	// 180032a8 <spi_nor_close+0x14>
1800329e:	104d      	lrw      	r2, 0x18016530	// 180032d0 <spi_nor_close+0x3c>
180032a0:	311d      	movi      	r1, 29
180032a2:	100d      	lrw      	r0, 0x180164c1	// 180032d4 <spi_nor_close+0x40>
180032a4:	e3fffeb8 	bsr      	0x18003014	// 18003014 <assert_internal>
    if (flash->bus->close) {
180032a8:	9472      	ld.w      	r3, (r4, 0x48)
180032aa:	9361      	ld.w      	r3, (r3, 0x4)
180032ac:	e9030004 	bez      	r3, 0x180032b4	// 180032b4 <spi_nor_close+0x20>
        flash->bus->close(flash);
180032b0:	6c13      	mov      	r0, r4
180032b2:	7bcd      	jsr      	r3
    }
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
180032b4:	3201      	movi      	r2, 1
180032b6:	9427      	ld.w      	r1, (r4, 0x1c)
180032b8:	9403      	ld.w      	r0, (r4, 0xc)
180032ba:	e3ffffa7 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_close(flash->spidev);
180032be:	9403      	ld.w      	r0, (r4, 0xc)
180032c0:	e3ffff72 	bsr      	0x180031a4	// 180031a4 <spi_close>
    os_mutex_unlock(&flash->lock);
180032c4:	e404003b 	addi      	r0, r4, 60
180032c8:	e00088bc 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
}
180032cc:	1491      	pop      	r4, r15
180032ce:	0000      	.short	0x0000
180032d0:	18016530 	.long	0x18016530
180032d4:	180164c1 	.long	0x180164c1

180032d8 <spi_nor_read>:

void spi_nor_read(struct spi_nor_flash *flash, uint32 addr, uint8 *buf, uint32 len)
{
180032d8:	14d3      	push      	r4-r6, r15
180032da:	1421      	subi      	r14, r14, 4
180032dc:	6d8b      	mov      	r6, r2
    ASSERT(flash->bus);
180032de:	9052      	ld.w      	r2, (r0, 0x48)
{
180032e0:	6d03      	mov      	r4, r0
180032e2:	6d47      	mov      	r5, r1
    ASSERT(flash->bus);
180032e4:	e9220009 	bnez      	r2, 0x180032f6	// 180032f6 <spi_nor_read+0x1e>
180032e8:	1048      	lrw      	r2, 0x18016530	// 18003308 <spi_nor_read+0x30>
180032ea:	3128      	movi      	r1, 40
180032ec:	1008      	lrw      	r0, 0x180164cf	// 1800330c <spi_nor_read+0x34>
180032ee:	b860      	st.w      	r3, (r14, 0x0)
180032f0:	e3fffe92 	bsr      	0x18003014	// 18003014 <assert_internal>
180032f4:	9860      	ld.w      	r3, (r14, 0x0)
    return flash->bus->read(flash, addr, buf, len);
180032f6:	9452      	ld.w      	r2, (r4, 0x48)
180032f8:	6c57      	mov      	r1, r5
180032fa:	d9822002 	ld.w      	r12, (r2, 0x8)
180032fe:	6c13      	mov      	r0, r4
18003300:	6c9b      	mov      	r2, r6
18003302:	7bf1      	jsr      	r12
}
18003304:	1401      	addi      	r14, r14, 4
18003306:	1493      	pop      	r4-r6, r15
18003308:	18016530 	.long	0x18016530
1800330c:	180164cf 	.long	0x180164cf

18003310 <spi_nor_write>:

void spi_nor_write(struct spi_nor_flash *flash, uint32 addr, uint8 *buf, uint32 len)
{
18003310:	14d5      	push      	r4-r8, r15
18003312:	6e0f      	mov      	r8, r3
    ASSERT(flash->bus);
18003314:	9072      	ld.w      	r3, (r0, 0x48)
{
18003316:	6d43      	mov      	r5, r0
18003318:	6d87      	mov      	r6, r1
1800331a:	6dcb      	mov      	r7, r2
    ASSERT(flash->bus);
1800331c:	e9230007 	bnez      	r3, 0x1800332a	// 1800332a <spi_nor_write+0x1a>
18003320:	1058      	lrw      	r2, 0x18016530	// 18003380 <spi_nor_write+0x70>
18003322:	312e      	movi      	r1, 46
18003324:	1018      	lrw      	r0, 0x180164dc	// 18003384 <spi_nor_write+0x74>
18003326:	e3fffe77 	bsr      	0x18003014	// 18003014 <assert_internal>
    
    uint32 remain_size;
    
    /* Flash is written according to page */
    remain_size = flash->page_size - (addr % flash->page_size);
1800332a:	958a      	ld.w      	r4, (r5, 0x28)
1800332c:	c4868023 	divu      	r3, r6, r4
18003330:	7cd0      	mult      	r3, r4
18003332:	5e6d      	subu      	r3, r6, r3
18003334:	610e      	subu      	r4, r3
    if(remain_size && (len > remain_size)) {
18003336:	e904000f 	bez      	r4, 0x18003354	// 18003354 <spi_nor_write+0x44>
1800333a:	6610      	cmphs      	r4, r8
1800333c:	080c      	bt      	0x18003354	// 18003354 <spi_nor_write+0x44>
        flash->bus->program(flash, addr, buf, remain_size);
1800333e:	9572      	ld.w      	r3, (r5, 0x48)
18003340:	6c9f      	mov      	r2, r7
18003342:	d9832003 	ld.w      	r12, (r3, 0xc)
18003346:	6c5b      	mov      	r1, r6
18003348:	6cd3      	mov      	r3, r4
1800334a:	6c17      	mov      	r0, r5
1800334c:	7bf1      	jsr      	r12
        addr += remain_size;
1800334e:	6190      	addu      	r6, r4
        buf  += remain_size;
18003350:	61d0      	addu      	r7, r4
        len  -= remain_size;
18003352:	6212      	subu      	r8, r4
    }
    while(len > flash->page_size) {
18003354:	956a      	ld.w      	r3, (r5, 0x28)
18003356:	9552      	ld.w      	r2, (r5, 0x48)
18003358:	660c      	cmphs      	r3, r8
        flash->bus->program(flash, addr, buf, flash->page_size);
1800335a:	d9822003 	ld.w      	r12, (r2, 0xc)
    while(len > flash->page_size) {
1800335e:	0c07      	bf      	0x1800336c	// 1800336c <spi_nor_write+0x5c>
        addr += flash->page_size;
        buf  += flash->page_size;
        len  -= flash->page_size;
    }
    
    return flash->bus->program(flash, addr, buf, len);
18003360:	6ce3      	mov      	r3, r8
18003362:	6c9f      	mov      	r2, r7
18003364:	6c5b      	mov      	r1, r6
18003366:	6c17      	mov      	r0, r5
18003368:	7bf1      	jsr      	r12
}
1800336a:	1495      	pop      	r4-r8, r15
        flash->bus->program(flash, addr, buf, flash->page_size);
1800336c:	6c9f      	mov      	r2, r7
1800336e:	6c5b      	mov      	r1, r6
18003370:	6c17      	mov      	r0, r5
18003372:	7bf1      	jsr      	r12
        addr += flash->page_size;
18003374:	956a      	ld.w      	r3, (r5, 0x28)
18003376:	618c      	addu      	r6, r3
        buf  += flash->page_size;
18003378:	61cc      	addu      	r7, r3
        len  -= flash->page_size;
1800337a:	620e      	subu      	r8, r3
1800337c:	07ec      	br      	0x18003354	// 18003354 <spi_nor_write+0x44>
1800337e:	0000      	.short	0x0000
18003380:	18016530 	.long	0x18016530
18003384:	180164dc 	.long	0x180164dc

18003388 <spi_nor_sector_erase>:

void spi_nor_sector_erase(struct spi_nor_flash *flash, uint32 sector_addr)
{
18003388:	14d2      	push      	r4-r5, r15
    ASSERT(flash->bus);
1800338a:	9072      	ld.w      	r3, (r0, 0x48)
{
1800338c:	6d03      	mov      	r4, r0
1800338e:	6d47      	mov      	r5, r1
    ASSERT(flash->bus);
18003390:	e9230007 	bnez      	r3, 0x1800339e	// 1800339e <spi_nor_sector_erase+0x16>
18003394:	1046      	lrw      	r2, 0x18016530	// 180033ac <spi_nor_sector_erase+0x24>
18003396:	3146      	movi      	r1, 70
18003398:	1006      	lrw      	r0, 0x180164ea	// 180033b0 <spi_nor_sector_erase+0x28>
1800339a:	e3fffe3d 	bsr      	0x18003014	// 18003014 <assert_internal>
    return flash->bus->sector_erase(flash, sector_addr);
1800339e:	9472      	ld.w      	r3, (r4, 0x48)
180033a0:	6c57      	mov      	r1, r5
180033a2:	9364      	ld.w      	r3, (r3, 0x10)
180033a4:	6c13      	mov      	r0, r4
180033a6:	7bcd      	jsr      	r3
}
180033a8:	1492      	pop      	r4-r5, r15
180033aa:	0000      	.short	0x0000
180033ac:	18016530 	.long	0x18016530
180033b0:	180164ea 	.long	0x180164ea

180033b4 <spi_nor_attach>:
    return -1;
}


__init int32 spi_nor_attach(struct spi_nor_flash *flash, uint32 dev_id)
{
180033b4:	14d2      	push      	r4-r5, r15
    int32 ret = 0;

    ASSERT(flash->size && flash->sector_size);
180033b6:	9068      	ld.w      	r3, (r0, 0x20)
{
180033b8:	6d03      	mov      	r4, r0
180033ba:	6d47      	mov      	r5, r1
    ASSERT(flash->size && flash->sector_size);
180033bc:	e9030005 	bez      	r3, 0x180033c6	// 180033c6 <spi_nor_attach+0x12>
180033c0:	9069      	ld.w      	r3, (r0, 0x24)
180033c2:	e9230007 	bnez      	r3, 0x180033d0	// 180033d0 <spi_nor_attach+0x1c>
180033c6:	104d      	lrw      	r2, 0x1801650e	// 180033f8 <spi_nor_attach+0x44>
180033c8:	318a      	movi      	r1, 138
180033ca:	100d      	lrw      	r0, 0x180164ff	// 180033fc <spi_nor_attach+0x48>
180033cc:	e3fffe24 	bsr      	0x18003014	// 18003014 <assert_internal>
    os_mutex_init(&flash->lock);
180033d0:	e404003b 	addi      	r0, r4, 60
180033d4:	e00087fa 	bsr      	0x180143c8	// 180143c8 <os_mutex_init>
    flash->bus = spi_nor_bus_get(flash->mode);
180033d8:	940e      	ld.w      	r0, (r4, 0x38)
180033da:	e00066fd 	bsr      	0x180101d4	// 180101d4 <spi_nor_bus_get>
180033de:	b412      	st.w      	r0, (r4, 0x48)
    ASSERT(flash->bus);
180033e0:	e9200007 	bnez      	r0, 0x180033ee	// 180033ee <spi_nor_attach+0x3a>
180033e4:	1047      	lrw      	r2, 0x18016530	// 18003400 <spi_nor_attach+0x4c>
180033e6:	318d      	movi      	r1, 141
180033e8:	1005      	lrw      	r0, 0x180164ff	// 180033fc <spi_nor_attach+0x48>
180033ea:	e3fffe15 	bsr      	0x18003014	// 18003014 <assert_internal>
    ret = dev_register(dev_id, (struct dev_obj *)flash);
180033ee:	6c53      	mov      	r1, r4
180033f0:	6c17      	mov      	r0, r5
180033f2:	e3fffe59 	bsr      	0x180030a4	// 180030a4 <dev_register>
    return ret;
}
180033f6:	1492      	pop      	r4-r5, r15
180033f8:	1801650e 	.long	0x1801650e
180033fc:	180164ff 	.long	0x180164ff
18003400:	18016530 	.long	0x18016530

18003404 <uart_open>:
  *         The default configuration is full duplex mode, no parity mode,\n
  *         data bit is 8bit, stop bit is 1bit.If you need to change the configuration,\n
  *         you can use the @ref uart_ioctl function to make changes after initialization is complete.
  */
int32 uart_open(struct uart_device *uart, uint32 baudrate)
{
18003404:	14d0      	push      	r15
    if (uart) {
18003406:	e9000006 	bez      	r0, 0x18003412	// 18003412 <uart_open+0xe>
        return ((const struct uart_hal_ops *)uart->dev.ops)->open(uart, baudrate);
1800340a:	9062      	ld.w      	r3, (r0, 0x8)
1800340c:	9360      	ld.w      	r3, (r3, 0x0)
1800340e:	7bcd      	jsr      	r3
    }
    return RET_ERR;
}
18003410:	1490      	pop      	r15
    return RET_ERR;
18003412:	3000      	movi      	r0, 0
18003414:	2800      	subi      	r0, 1
18003416:	07fd      	br      	0x18003410	// 18003410 <uart_open+0xc>

18003418 <uart_putc>:
  * @note
  *         If the UART configuration data bit is 8bit, one frame of data is 8bit;\n
  *         if the data bit is 9bit, one frame of data is 9bit.
  */
int32 uart_putc(struct uart_device *uart, int8 value)
{
18003418:	14d0      	push      	r15
    if (uart) {
1800341a:	e9000006 	bez      	r0, 0x18003426	// 18003426 <uart_putc+0xe>
        return ((const struct uart_hal_ops *)uart->dev.ops)->putc(uart, value);
1800341e:	9062      	ld.w      	r3, (r0, 0x8)
18003420:	9362      	ld.w      	r3, (r3, 0x8)
18003422:	7bcd      	jsr      	r3
    }
    return RET_ERR;
}
18003424:	1490      	pop      	r15
    return RET_ERR;
18003426:	3000      	movi      	r0, 0
18003428:	2800      	subi      	r0, 1
1800342a:	07fd      	br      	0x18003424	// 18003424 <uart_putc+0xc>

1800342c <sys_dcache_clean_range>:
#ifdef PSRAM_HEAP
/** use when DMA source is psram 
 *  1、usage( this -> DMA kick) 
 */
__STATIC_INLINE void sys_dcache_clean_range (uint32_t *addr, int32_t dsize)
{
1800342c:	14d2      	push      	r4-r5, r15
    if (((uint32)addr >= PSRAM_BASE) && 
1800342e:	33c8      	movi      	r3, 200
18003430:	4378      	lsli      	r3, r3, 24
18003432:	584c      	addu      	r2, r0, r3
18003434:	c6e05023 	bmaski      	r3, 24
18003438:	648c      	cmphs      	r3, r2
{
1800343a:	6d03      	mov      	r4, r0
1800343c:	6d47      	mov      	r5, r1
    if (((uint32)addr >= PSRAM_BASE) && 
1800343e:	0c2f      	bf      	0x1800349c	// 1800349c <sys_dcache_clean_range+0x70>
}

__STATIC_INLINE uint32_t csi_is_cache_enable (void)
{
#if (__DCACHE_PRESENT == 1U)
    return (CACHE->CER & CACHE_CER_EN_Msk);  
18003440:	1166      	lrw      	r3, 0xe000f000	// 180034d8 <sys_dcache_clean_range+0xac>
18003442:	9360      	ld.w      	r3, (r3, 0x0)
18003444:	e4632001 	andi      	r3, r3, 1
        ((uint32)addr < PSRAM_END_ADDR) && 
18003448:	e903002a 	bez      	r3, 0x1800349c	// 1800349c <sys_dcache_clean_range+0x70>
        csi_is_cache_enable()) {
        ASSERT(!(((uint32)addr) & (BIT(CACHE_CIR_INV_ADDR_Pos)-1)));
1800344c:	e460200f 	andi      	r3, r0, 15
18003450:	e9030008 	bez      	r3, 0x18003460	// 18003460 <sys_dcache_clean_range+0x34>
18003454:	3188      	movi      	r1, 136
18003456:	1142      	lrw      	r2, 0x1801659a	// 180034dc <sys_dcache_clean_range+0xb0>
18003458:	4121      	lsli      	r1, r1, 1
1800345a:	1102      	lrw      	r0, 0x18016540	// 180034e0 <sys_dcache_clean_range+0xb4>
1800345c:	e3fffddc 	bsr      	0x18003014	// 18003014 <assert_internal>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void csi_dcache_clean_range (uint32_t *addr, int32_t dsize)
{
#if (__DCACHE_PRESENT == 1)
    int32_t op_size = dsize + (int32_t)addr % 16;
18003460:	c7c05023 	bmaski      	r3, 31
18003464:	230f      	addi      	r3, 16
18003466:	c4642021 	and      	r1, r4, r3
1800346a:	e9a10007 	bhsz      	r1, 0x18003478	// 18003478 <sys_dcache_clean_range+0x4c>
1800346e:	3300      	movi      	r3, 0
18003470:	2900      	subi      	r1, 1
18003472:	2b0f      	subi      	r3, 16
18003474:	6c4c      	or      	r1, r3
18003476:	2100      	addi      	r1, 1
    uint32_t op_addr = (uint32_t)addr & CACHE_CIR_INV_ADDR_Msk;
18003478:	3300      	movi      	r3, 0
1800347a:	2b0f      	subi      	r3, 16
1800347c:	c4642020 	and      	r0, r4, r3
    int32_t op_size = dsize + (int32_t)addr % 16;
18003480:	6054      	addu      	r1, r5
    int32_t linesize = 16;

    op_addr |= _VAL2FLD(CACHE_CIR_CLR_ONE, 1);
18003482:	ec000008 	ori      	r0, r0, 8

    while (op_size >= 128) {
        CACHE->CIR = op_addr;
18003486:	1075      	lrw      	r3, 0xe000f000	// 180034d8 <sys_dcache_clean_range+0xac>
    while (op_size >= 128) {
18003488:	eb21007f 	cmplti      	r1, 128
1800348c:	0c09      	bf      	0x1800349e	// 1800349e <sys_dcache_clean_range+0x72>
1800348e:	6004      	addu      	r0, r1

        op_size -= 128;
    }

    while (op_size > 0) {
        CACHE->CIR = op_addr;
18003490:	1052      	lrw      	r2, 0xe000f000	// 180034d8 <sys_dcache_clean_range+0xac>
18003492:	5865      	subu      	r3, r0, r1
    while (op_size > 0) {
18003494:	e941001e 	bhz      	r1, 0x180034d0	// 180034d0 <sys_dcache_clean_range+0xa4>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__ALWAYS_STATIC_INLINE void __DSB(void)
{
    __ASM volatile("sync"::: "memory");
18003498:	c0000420 	sync
        csi_dcache_clean_range(addr, dsize);
    }
}
1800349c:	1492      	pop      	r4-r5, r15
        op_addr += linesize;
1800349e:	e440000f 	addi      	r2, r0, 16
        CACHE->CIR = op_addr;
180034a2:	b301      	st.w      	r0, (r3, 0x4)
        CACHE->CIR = op_addr;
180034a4:	b341      	st.w      	r2, (r3, 0x4)
        op_addr += linesize;
180034a6:	e440001f 	addi      	r2, r0, 32
        CACHE->CIR = op_addr;
180034aa:	b341      	st.w      	r2, (r3, 0x4)
        op_addr += linesize;
180034ac:	e440002f 	addi      	r2, r0, 48
        CACHE->CIR = op_addr;
180034b0:	b341      	st.w      	r2, (r3, 0x4)
        op_addr += linesize;
180034b2:	e440003f 	addi      	r2, r0, 64
        CACHE->CIR = op_addr;
180034b6:	b341      	st.w      	r2, (r3, 0x4)
        op_addr += linesize;
180034b8:	e440004f 	addi      	r2, r0, 80
        CACHE->CIR = op_addr;
180034bc:	b341      	st.w      	r2, (r3, 0x4)
        op_addr += linesize;
180034be:	e440005f 	addi      	r2, r0, 96
        CACHE->CIR = op_addr;
180034c2:	b341      	st.w      	r2, (r3, 0x4)
        op_addr += linesize;
180034c4:	e440006f 	addi      	r2, r0, 112
        CACHE->CIR = op_addr;
180034c8:	b341      	st.w      	r2, (r3, 0x4)
        op_addr += linesize;
180034ca:	207f      	addi      	r0, 128
        op_size -= 128;
180034cc:	297f      	subi      	r1, 128
180034ce:	07dd      	br      	0x18003488	// 18003488 <sys_dcache_clean_range+0x5c>
        CACHE->CIR = op_addr;
180034d0:	b261      	st.w      	r3, (r2, 0x4)
        op_addr += linesize;
        op_size -= linesize;
180034d2:	290f      	subi      	r1, 16
180034d4:	07df      	br      	0x18003492	// 18003492 <sys_dcache_clean_range+0x66>
180034d6:	0000      	.short	0x0000
180034d8:	e000f000 	.long	0xe000f000
180034dc:	1801659a 	.long	0x1801659a
180034e0:	18016540 	.long	0x18016540

180034e4 <csi_dcache_clean_invalid_range.constprop.0>:
*/
__STATIC_INLINE void csi_dcache_clean_invalid_range (uint32_t *addr, int32_t dsize)
{
#if (__DCACHE_PRESENT == 1U)
    int32_t op_size = dsize + (int32_t)addr % 16;
    uint32_t op_addr = (uint32_t)addr & CACHE_CIR_INV_ADDR_Msk;
180034e4:	3300      	movi      	r3, 0
180034e6:	2b0f      	subi      	r3, 16
180034e8:	68c0      	and      	r3, r0

        op_size -= 128;
    }

    while (op_size > 0) {
        CACHE->CIR = op_addr;
180034ea:	104b      	lrw      	r2, 0xe000f000	// 18003514 <csi_dcache_clean_invalid_range.constprop.0+0x30>
    op_addr |= _VAL2FLD(CACHE_CIR_CLR_ONE, 1) | _VAL2FLD(CACHE_CIR_INV_ONE, 1);
180034ec:	ec63000a 	ori      	r3, r3, 10
        CACHE->CIR = op_addr;
180034f0:	b261      	st.w      	r3, (r2, 0x4)
    int32_t op_size = dsize + (int32_t)addr % 16;
180034f2:	c7c05022 	bmaski      	r2, 31
180034f6:	220f      	addi      	r2, 16
180034f8:	6808      	and      	r0, r2
        op_addr += linesize;
180034fa:	230f      	addi      	r3, 16
    int32_t op_size = dsize + (int32_t)addr % 16;
180034fc:	e9a00007 	bhsz      	r0, 0x1800350a	// 1800350a <csi_dcache_clean_invalid_range.constprop.0+0x26>
18003500:	3200      	movi      	r2, 0
18003502:	2800      	subi      	r0, 1
18003504:	2a0f      	subi      	r2, 16
18003506:	6c08      	or      	r0, r2
18003508:	2000      	addi      	r0, 1
    while (op_size > 0) {
1800350a:	e9600004 	blsz      	r0, 0x18003512	// 18003512 <csi_dcache_clean_invalid_range.constprop.0+0x2e>
        CACHE->CIR = op_addr;
1800350e:	1042      	lrw      	r2, 0xe000f000	// 18003514 <csi_dcache_clean_invalid_range.constprop.0+0x30>
18003510:	b261      	st.w      	r3, (r2, 0x4)
        op_size -= linesize;
    }
#endif
}
18003512:	783c      	jmp      	r15
18003514:	e000f000 	.long	0xe000f000

18003518 <sys_dcache_clean_invalid_range>:

/** use when DMA destination is psram 
 *  1、usage : (  this -> DMA) ; 
 */
__STATIC_INLINE void sys_dcache_clean_invalid_range (uint32_t *addr, int32_t dsize)
{
18003518:	14d2      	push      	r4-r5, r15
    if (((uint32)addr >= PSRAM_BASE) && 
1800351a:	33c8      	movi      	r3, 200
1800351c:	4378      	lsli      	r3, r3, 24
1800351e:	584c      	addu      	r2, r0, r3
18003520:	c6e05023 	bmaski      	r3, 24
18003524:	648c      	cmphs      	r3, r2
{
18003526:	6d03      	mov      	r4, r0
18003528:	6d47      	mov      	r5, r1
    if (((uint32)addr >= PSRAM_BASE) && 
1800352a:	0c33      	bf      	0x18003590	// 18003590 <sys_dcache_clean_invalid_range+0x78>
    return (CACHE->CER & CACHE_CER_EN_Msk);  
1800352c:	1168      	lrw      	r3, 0xe000f000	// 180035cc <sys_dcache_clean_invalid_range+0xb4>
1800352e:	9360      	ld.w      	r3, (r3, 0x0)
18003530:	e4632001 	andi      	r3, r3, 1
        ((uint32)addr < PSRAM_END_ADDR) && 
18003534:	e903002e 	bez      	r3, 0x18003590	// 18003590 <sys_dcache_clean_invalid_range+0x78>
        csi_is_cache_enable()) {
        //ASSERT(!(((uint32)addr) & (BIT(CACHE_CIR_INV_ADDR_Pos)-1)));
        /* data head */
        if ((uint32_t)addr & 0xF) {
18003538:	e460200f 	andi      	r3, r0, 15
1800353c:	e9030004 	bez      	r3, 0x18003544	// 18003544 <sys_dcache_clean_invalid_range+0x2c>
            csi_dcache_clean_invalid_range(addr, 16);
18003540:	e3ffffd2 	bsr      	0x180034e4	// 180034e4 <csi_dcache_clean_invalid_range.constprop.0>
        }
        
        /* data tail */
        if (((uint32_t)addr+dsize) & 0xF) {
18003544:	5c74      	addu      	r3, r4, r5
18003546:	e463200f 	andi      	r3, r3, 15
1800354a:	e9030006 	bez      	r3, 0x18003556	// 18003556 <sys_dcache_clean_invalid_range+0x3e>
            csi_dcache_clean_invalid_range((addr+dsize), 16);
1800354e:	4502      	lsli      	r0, r5, 2
18003550:	6010      	addu      	r0, r4
18003552:	e3ffffc9 	bsr      	0x180034e4	// 180034e4 <csi_dcache_clean_invalid_range.constprop.0>
    int32_t op_size = dsize + (int32_t)addr % 16;
18003556:	c7c05023 	bmaski      	r3, 31
1800355a:	230f      	addi      	r3, 16
1800355c:	68d0      	and      	r3, r4
1800355e:	e9a30007 	bhsz      	r3, 0x1800356c	// 1800356c <sys_dcache_clean_invalid_range+0x54>
18003562:	3200      	movi      	r2, 0
18003564:	2b00      	subi      	r3, 1
18003566:	2a0f      	subi      	r2, 16
18003568:	6cc8      	or      	r3, r2
1800356a:	2300      	addi      	r3, 1
    uint32_t op_addr = (uint32_t)addr & CACHE_CIR_INV_ADDR_Msk;
1800356c:	3200      	movi      	r2, 0
1800356e:	2a0f      	subi      	r2, 16
18003570:	c4442020 	and      	r0, r4, r2
    int32_t op_size = dsize + (int32_t)addr % 16;
18003574:	60d4      	addu      	r3, r5
    op_addr |= _VAL2FLD(CACHE_CIR_INV_ONE, 1);
18003576:	ec000002 	ori      	r0, r0, 2
        CACHE->CIR = op_addr;
1800357a:	1055      	lrw      	r2, 0xe000f000	// 180035cc <sys_dcache_clean_invalid_range+0xb4>
    while (op_size >= 128) {
1800357c:	eb23007f 	cmplti      	r3, 128
18003580:	0c09      	bf      	0x18003592	// 18003592 <sys_dcache_clean_invalid_range+0x7a>
18003582:	600c      	addu      	r0, r3
        CACHE->CIR = op_addr;
18003584:	1032      	lrw      	r1, 0xe000f000	// 180035cc <sys_dcache_clean_invalid_range+0xb4>
18003586:	584d      	subu      	r2, r0, r3
    while (op_size > 0) {
18003588:	e943001e 	bhz      	r3, 0x180035c4	// 180035c4 <sys_dcache_clean_invalid_range+0xac>
1800358c:	c0000420 	sync
        }
        
        /* data all */
        csi_dcache_invalid_range(addr, dsize);
    }
}
18003590:	1492      	pop      	r4-r5, r15
        op_addr += linesize;
18003592:	e420000f 	addi      	r1, r0, 16
        CACHE->CIR = op_addr;
18003596:	b201      	st.w      	r0, (r2, 0x4)
        CACHE->CIR = op_addr;
18003598:	b221      	st.w      	r1, (r2, 0x4)
        op_addr += linesize;
1800359a:	e420001f 	addi      	r1, r0, 32
        CACHE->CIR = op_addr;
1800359e:	b221      	st.w      	r1, (r2, 0x4)
        op_addr += linesize;
180035a0:	e420002f 	addi      	r1, r0, 48
        CACHE->CIR = op_addr;
180035a4:	b221      	st.w      	r1, (r2, 0x4)
        op_addr += linesize;
180035a6:	e420003f 	addi      	r1, r0, 64
        CACHE->CIR = op_addr;
180035aa:	b221      	st.w      	r1, (r2, 0x4)
        op_addr += linesize;
180035ac:	e420004f 	addi      	r1, r0, 80
        CACHE->CIR = op_addr;
180035b0:	b221      	st.w      	r1, (r2, 0x4)
        op_addr += linesize;
180035b2:	e420005f 	addi      	r1, r0, 96
        CACHE->CIR = op_addr;
180035b6:	b221      	st.w      	r1, (r2, 0x4)
        op_addr += linesize;
180035b8:	e420006f 	addi      	r1, r0, 112
        CACHE->CIR = op_addr;
180035bc:	b221      	st.w      	r1, (r2, 0x4)
        op_addr += linesize;
180035be:	207f      	addi      	r0, 128
        op_size -= 128;
180035c0:	2b7f      	subi      	r3, 128
180035c2:	07dd      	br      	0x1800357c	// 1800357c <sys_dcache_clean_invalid_range+0x64>
        CACHE->CIR = op_addr;
180035c4:	b141      	st.w      	r2, (r1, 0x4)
        op_size -= linesize;
180035c6:	2b0f      	subi      	r3, 16
180035c8:	07df      	br      	0x18003586	// 18003586 <sys_dcache_clean_invalid_range+0x6e>
180035ca:	0000      	.short	0x0000
180035cc:	e000f000 	.long	0xe000f000

180035d0 <dma_memcpy>:
    return RET_ERR;
}


void dma_memcpy(struct dma_device *dma, void *dst, const void *src, uint32 n)
{
180035d0:	14d5      	push      	r4-r8, r15
180035d2:	1431      	subi      	r14, r14, 68
180035d4:	6e03      	mov      	r8, r0
180035d6:	6d47      	mov      	r5, r1
180035d8:	6d0b      	mov      	r4, r2
180035da:	6d8f      	mov      	r6, r3
	uint8 dma_buf[32];
	uint8_t *s,*d;
	uint8_t *s1,*d1,*s2,*d2;
	uint32_t i = 0;
	uint32 addr;
    ASSERT(dma && ((const struct dma_hal_ops *)dma->dev.ops)->xfer);
180035dc:	e9000006 	bez      	r0, 0x180035e8	// 180035e8 <dma_memcpy+0x18>
180035e0:	9062      	ld.w      	r3, (r0, 0x8)
180035e2:	9362      	ld.w      	r3, (r3, 0x8)
180035e4:	e9230007 	bnez      	r3, 0x180035f2	// 180035f2 <dma_memcpy+0x22>
180035e8:	115b      	lrw      	r2, 0x18016562	// 180036d4 <dma_memcpy+0x104>
180035ea:	311f      	movi      	r1, 31
180035ec:	111b      	lrw      	r0, 0x18016557	// 180036d8 <dma_memcpy+0x108>
180035ee:	e3fffd13 	bsr      	0x18003014	// 18003014 <assert_internal>
	
    struct dma_xfer_data xfer_data;
	if(n <= 32){
180035f2:	eb060020 	cmphsi      	r6, 33
180035f6:	080b      	bt      	0x1800360c	// 1800360c <dma_memcpy+0x3c>
180035f8:	6190      	addu      	r6, r4
		s1 = (uint8_t *)src;
		d1 = (uint8_t *)dst;
		for(i = 0;i < n;i++){
180035fa:	651a      	cmpne      	r6, r4
180035fc:	0803      	bt      	0x18003602	// 18003602 <dma_memcpy+0x32>
		d1[i] = dma_buf[i];
	}
	for(i = 0;i < 16;i++){        //处理尾
		d2[i] = dma_buf[i+16];
	}
}
180035fe:	1411      	addi      	r14, r14, 68
18003600:	1495      	pop      	r4-r8, r15
			d1[i] = s1[i];
18003602:	8460      	ld.b      	r3, (r4, 0x0)
18003604:	a560      	st.b      	r3, (r5, 0x0)
18003606:	2400      	addi      	r4, 1
18003608:	2500      	addi      	r5, 1
1800360a:	07f8      	br      	0x180035fa	// 180035fa <dma_memcpy+0x2a>
1800360c:	3300      	movi      	r3, 0
		dma_buf[i] = s1[i];
1800360e:	d0640022 	ldr.b      	r2, (r4, r3 << 0)
18003612:	d46e0022 	str.b      	r2, (r14, r3 << 0)
	for(i = 0;i < 16;i++){        //处理头
18003616:	2300      	addi      	r3, 1
18003618:	3b50      	cmpnei      	r3, 16
1800361a:	0bfa      	bt      	0x1800360e	// 1800360e <dma_memcpy+0x3e>
	s2 = (uint8_t *)src+n-16;
1800361c:	e4e6100f 	subi      	r7, r6, 16
18003620:	5c3c      	addu      	r1, r4, r7
	for(i = 0;i < 16;i++){        //处理头
18003622:	3300      	movi      	r3, 0
	d2 = (uint8_t *)dst+n-16;
18003624:	61d4      	addu      	r7, r5
		dma_buf[i+16] = s2[i];
18003626:	c46e0022 	addu      	r2, r14, r3
1800362a:	d0610020 	ldr.b      	r0, (r1, r3 << 0)
	for(i = 0;i < 16;i++){        //处理头
1800362e:	2300      	addi      	r3, 1
18003630:	3b50      	cmpnei      	r3, 16
		dma_buf[i+16] = s2[i];
18003632:	a210      	st.b      	r0, (r2, 0x10)
	for(i = 0;i < 16;i++){        //处理头
18003634:	0bf9      	bt      	0x18003626	// 18003626 <dma_memcpy+0x56>
    xfer_data.element_per_width = DMA_SLAVE_BUSWIDTH_1_BYTE;
18003636:	3200      	movi      	r2, 0
18003638:	b84d      	st.w      	r2, (r14, 0x34)
    xfer_data.dir               = ((((uint32)dst) < SRAM_BASE) || (((uint32)src) < SRAM_BASE)) ? DMA_XFER_DIR_M2D : DMA_XFER_DIR_M2M;
1800363a:	c7805022 	bmaski      	r2, 29
1800363e:	6548      	cmphs      	r2, r5
	d = (uint8_t *)dst+16;
18003640:	e465000f 	addi      	r3, r5, 16
	s = (uint8_t *)src+16;
18003644:	e404000f 	addi      	r0, r4, 16
	n = n - 32;
18003648:	2e1f      	subi      	r6, 32
    xfer_data.dest              = (uint32)d;
1800364a:	b868      	st.w      	r3, (r14, 0x20)
    xfer_data.src               = (uint32)s;
1800364c:	b809      	st.w      	r0, (r14, 0x24)
    xfer_data.element_num       = n;
1800364e:	b8ce      	st.w      	r6, (r14, 0x38)
    xfer_data.dir               = ((((uint32)dst) < SRAM_BASE) || (((uint32)src) < SRAM_BASE)) ? DMA_XFER_DIR_M2D : DMA_XFER_DIR_M2M;
18003650:	0840      	bt      	0x180036d0	// 180036d0 <dma_memcpy+0x100>
18003652:	6508      	cmphs      	r2, r4
18003654:	c4000502 	mvc      	r2
18003658:	2200      	addi      	r2, 1
1800365a:	d98e0030 	ld.b      	r12, (r14, 0x30)
1800365e:	c5825c40 	ins      	r12, r2, 2, 0
    xfer_data.src_addr_mode     = DMA_XFER_MODE_INCREASE;
18003662:	d84e002b 	ld.b      	r2, (r14, 0x2b)
18003666:	3400      	movi      	r4, 0
    xfer_data.dst_addr_mode     = DMA_XFER_MODE_INCREASE;
18003668:	e44220cf 	andi      	r2, r2, 207
    xfer_data.dir               = ((((uint32)dst) < SRAM_BASE) || (((uint32)src) < SRAM_BASE)) ? DMA_XFER_DIR_M2D : DMA_XFER_DIR_M2M;
1800366c:	dd8e0030 	st.b      	r12, (r14, 0x30)
    xfer_data.dst_addr_mode     = DMA_XFER_MODE_INCREASE;
18003670:	c4445c26 	ins      	r2, r4, 7, 6
18003674:	dc4e002b 	st.b      	r2, (r14, 0x2b)
    xfer_data.dst_id            = 0;
18003678:	d84e1018 	ld.h      	r2, (r14, 0x30)
1800367c:	c4445ce5 	ins      	r2, r4, 12, 5
18003680:	dc4e1018 	st.h      	r2, (r14, 0x30)
	addr = addr&CACHE_CIR_INV_ADDR_Msk;
18003684:	3200      	movi      	r2, 0
18003686:	2a0f      	subi      	r2, 16
18003688:	6808      	and      	r0, r2
	addr = addr&CACHE_CIR_INV_ADDR_Msk;
1800368a:	c4432026 	and      	r6, r3, r2
    sys_dcache_clean_range((void *)s, (int32_t)s2-(int32_t)s);           //sram->psram
1800368e:	6042      	subu      	r1, r0
    xfer_data.src_id            = 0;
18003690:	dc8e002f 	st.b      	r4, (r14, 0x2f)
    xfer_data.irq_hdl           = NULL;
18003694:	b890      	st.w      	r4, (r14, 0x40)
    sys_dcache_clean_range((void *)s, (int32_t)s2-(int32_t)s);           //sram->psram
18003696:	e3fffecb 	bsr      	0x1800342c	// 1800342c <sys_dcache_clean_range>
	sys_dcache_clean_invalid_range((void *)d, (int32_t)d2-(int32_t)d);	//psram cache invalid  //最后一行可能没有无效化	
1800369a:	5f39      	subu      	r1, r7, r6
1800369c:	6c1b      	mov      	r0, r6
1800369e:	e3ffff3d 	bsr      	0x18003518	// 18003518 <sys_dcache_clean_invalid_range>
    ((const struct dma_hal_ops *)dma->dev.ops)->xfer(dma, &xfer_data);
180036a2:	d8682002 	ld.w      	r3, (r8, 0x8)
180036a6:	1908      	addi      	r1, r14, 32
180036a8:	9362      	ld.w      	r3, (r3, 0x8)
180036aa:	6c23      	mov      	r0, r8
180036ac:	7bcd      	jsr      	r3
		d1[i] = dma_buf[i];
180036ae:	d08e0023 	ldr.b      	r3, (r14, r4 << 0)
180036b2:	d4850023 	str.b      	r3, (r5, r4 << 0)
	for(i = 0;i < 16;i++){        //处理头
180036b6:	2400      	addi      	r4, 1
180036b8:	3c50      	cmpnei      	r4, 16
180036ba:	0bfa      	bt      	0x180036ae	// 180036ae <dma_memcpy+0xde>
180036bc:	3300      	movi      	r3, 0
		d2[i] = dma_buf[i+16];
180036be:	c46e0022 	addu      	r2, r14, r3
180036c2:	8250      	ld.b      	r2, (r2, 0x10)
180036c4:	d4670022 	str.b      	r2, (r7, r3 << 0)
	for(i = 0;i < 16;i++){        //处理尾
180036c8:	2300      	addi      	r3, 1
180036ca:	3b50      	cmpnei      	r3, 16
180036cc:	0bf9      	bt      	0x180036be	// 180036be <dma_memcpy+0xee>
180036ce:	0798      	br      	0x180035fe	// 180035fe <dma_memcpy+0x2e>
    xfer_data.dir               = ((((uint32)dst) < SRAM_BASE) || (((uint32)src) < SRAM_BASE)) ? DMA_XFER_DIR_M2D : DMA_XFER_DIR_M2M;
180036d0:	3202      	movi      	r2, 2
180036d2:	07c4      	br      	0x1800365a	// 1800365a <dma_memcpy+0x8a>
180036d4:	18016562 	.long	0x18016562
180036d8:	18016557 	.long	0x18016557

180036dc <request_irq>:
    }


int32_t request_irq(uint32_t irq_num, irq_handle handle, void *data)
{
    if (irq_num < IRQ_NUM) {
180036dc:	eb000047 	cmphsi      	r0, 72
180036e0:	0809      	bt      	0x180036f2	// 180036f2 <request_irq+0x16>
        sys_irqs[irq_num].data = data;
180036e2:	1066      	lrw      	r3, 0x2000195c	// 180036f8 <request_irq+0x1c>
180036e4:	d4030902 	str.w      	r2, (r3, r0 << 3)
        sys_irqs[irq_num].handle = handle;
180036e8:	4003      	lsli      	r0, r0, 3
180036ea:	600c      	addu      	r0, r3
180036ec:	b021      	st.w      	r1, (r0, 0x4)
        return RET_OK;
180036ee:	3000      	movi      	r0, 0
    } else {
        return -EINVAL;
    }
}
180036f0:	783c      	jmp      	r15
        return -EINVAL;
180036f2:	3000      	movi      	r0, 0
180036f4:	2815      	subi      	r0, 22
180036f6:	07fd      	br      	0x180036f0	// 180036f0 <request_irq+0x14>
180036f8:	2000195c 	.long	0x2000195c

180036fc <CORET_IRQHandler>:
#endif
    return tot_time;
}

ATTRIBUTE_ISR void CORET_IRQHandler(void)
{
180036fc:	1460      	nie
180036fe:	1462      	ipush
18003700:	14d0      	push      	r15
    SYS_IRQ_STATE_ST(CORET_IRQn);
    CSI_INTRPT_ENTER();
18003702:	e0004b9f 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
    readl(0xE000E010);
18003706:	1066      	lrw      	r3, 0xe000e000	// 1800371c <CORET_IRQHandler+0x20>
18003708:	9364      	ld.w      	r3, (r3, 0x10)
    SYSTICK_HANDLER();
1800370a:	e0005e09 	bsr      	0x1800f31c	// 1800f31c <systick_handler>
    CSI_INTRPT_EXIT();
1800370e:	e0004ba3 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
    SYS_IRQ_STATE_END(CORET_IRQn);
}
18003712:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003716:	1401      	addi      	r14, r14, 4
18003718:	1463      	ipop
1800371a:	1461      	nir
1800371c:	e000e000 	.long	0xe000e000

18003720 <SYSAES_IRQHandler>:
#define AES_INTERUPT_ON_OFF (*(unsigned int *)0x40012040) & BIT(3)
#define AES_INETRUPT_PENDING (*(unsigned int *)0x40012044)
#define SHA_INTERUPT_ON_OFF ((*(unsigned int *)0x40014008) & BIT(0))
#define SHA_INTERUPT_PENDING (*(unsigned int *)0x4001400C)
ATTRIBUTE_ISR void SYSAES_IRQHandler(void)
{
18003720:	1460      	nie
18003722:	1462      	ipush
18003724:	14d1      	push      	r4, r15
        SYS_IRQ_STATE_ST(SHA_VIRTUAL_IRQn);
        CSI_INTRPT_ENTER();
        if (sys_irqs[SPACC_PKA_IRQn].handle && AES_INTERUPT_ON_OFF && AES_INETRUPT_PENDING ) {
18003726:	1098      	lrw      	r4, 0x2000195c	// 18003784 <SYSAES_IRQHandler+0x64>
        CSI_INTRPT_ENTER();
18003728:	e0004b8c 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
        if (sys_irqs[SPACC_PKA_IRQn].handle && AES_INTERUPT_ON_OFF && AES_INETRUPT_PENDING ) {
1800372c:	d8442035 	ld.w      	r2, (r4, 0xd4)
18003730:	e9020010 	bez      	r2, 0x18003750	// 18003750 <SYSAES_IRQHandler+0x30>
18003734:	ea214001 	movih      	r1, 16385
18003738:	39ad      	bseti      	r1, 13
1800373a:	9170      	ld.w      	r3, (r1, 0x40)
1800373c:	e4632008 	andi      	r3, r3, 8
18003740:	e9030008 	bez      	r3, 0x18003750	// 18003750 <SYSAES_IRQHandler+0x30>
18003744:	9171      	ld.w      	r3, (r1, 0x44)
18003746:	e9030005 	bez      	r3, 0x18003750	// 18003750 <SYSAES_IRQHandler+0x30>
            sys_irqs[SPACC_PKA_IRQn].handle(sys_irqs[SPACC_PKA_IRQn].data);
1800374a:	d8042034 	ld.w      	r0, (r4, 0xd0)
1800374e:	7bc9      	jsr      	r2
        }
        if (sys_irqs[SHA_VIRTUAL_IRQn].handle && SHA_INTERUPT_ON_OFF && SHA_INTERUPT_PENDING ) {
18003750:	d8442081 	ld.w      	r2, (r4, 0x204)
18003754:	e9020010 	bez      	r2, 0x18003774	// 18003774 <SYSAES_IRQHandler+0x54>
18003758:	ea214001 	movih      	r1, 16385
1800375c:	39ae      	bseti      	r1, 14
1800375e:	9162      	ld.w      	r3, (r1, 0x8)
18003760:	e4632001 	andi      	r3, r3, 1
18003764:	e9030008 	bez      	r3, 0x18003774	// 18003774 <SYSAES_IRQHandler+0x54>
18003768:	9163      	ld.w      	r3, (r1, 0xc)
1800376a:	e9030005 	bez      	r3, 0x18003774	// 18003774 <SYSAES_IRQHandler+0x54>
            sys_irqs[SHA_VIRTUAL_IRQn].handle(sys_irqs[SHA_VIRTUAL_IRQn].data);
1800376e:	d8042080 	ld.w      	r0, (r4, 0x200)
18003772:	7bc9      	jsr      	r2
        }
        CSI_INTRPT_EXIT();
18003774:	e0004b70 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
        SYS_IRQ_STATE_END(SHA_VIRTUAL_IRQn);
}
18003778:	d9ee2001 	ld.w      	r15, (r14, 0x4)
1800377c:	9880      	ld.w      	r4, (r14, 0x0)
1800377e:	1402      	addi      	r14, r14, 8
18003780:	1463      	ipop
18003782:	1461      	nir
18003784:	2000195c 	.long	0x2000195c

18003788 <UART45_IRQHandler>:


#define UART4_IE_ENABLE (*(unsigned int *)0x40004b70) & 0x80000383
#define UART5_IE_ENABLE (*(unsigned int *)0x40004b90) & 0x80000383
ATTRIBUTE_ISR void UART45_IRQHandler(void)
{
18003788:	1460      	nie
1800378a:	1462      	ipush
1800378c:	14d1      	push      	r4, r15
        CSI_INTRPT_ENTER();
        if (sys_irqs[UART4_IRQn].handle && UART4_IE_ENABLE ) {
1800378e:	1098      	lrw      	r4, 0x2000195c	// 180037ec <UART45_IRQHandler+0x64>
        CSI_INTRPT_ENTER();
18003790:	e0004b58 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
        if (sys_irqs[UART4_IRQn].handle && UART4_IE_ENABLE ) {
18003794:	d8442085 	ld.w      	r2, (r4, 0x214)
18003798:	e9020010 	bez      	r2, 0x180037b8	// 180037b8 <UART45_IRQHandler+0x30>
1800379c:	ea034b00 	movi      	r3, 19200
180037a0:	3bbe      	bseti      	r3, 30
180037a2:	ea218000 	movih      	r1, 32768
180037a6:	e4210382 	addi      	r1, r1, 899
180037aa:	937c      	ld.w      	r3, (r3, 0x70)
180037ac:	68c4      	and      	r3, r1
180037ae:	e9030005 	bez      	r3, 0x180037b8	// 180037b8 <UART45_IRQHandler+0x30>
            sys_irqs[UART4_IRQn].handle(sys_irqs[UART4_IRQn].data);
180037b2:	d8042084 	ld.w      	r0, (r4, 0x210)
180037b6:	7bc9      	jsr      	r2
        }
        if (sys_irqs[UART5_IRQn].handle && UART5_IE_ENABLE ) {
180037b8:	d8442087 	ld.w      	r2, (r4, 0x21c)
180037bc:	e9020010 	bez      	r2, 0x180037dc	// 180037dc <UART45_IRQHandler+0x54>
180037c0:	ea034b80 	movi      	r3, 19328
180037c4:	3bbe      	bseti      	r3, 30
180037c6:	ea218000 	movih      	r1, 32768
180037ca:	e4210382 	addi      	r1, r1, 899
180037ce:	9364      	ld.w      	r3, (r3, 0x10)
180037d0:	68c4      	and      	r3, r1
180037d2:	e9030005 	bez      	r3, 0x180037dc	// 180037dc <UART45_IRQHandler+0x54>
            sys_irqs[UART5_IRQn].handle(sys_irqs[UART5_IRQn].data);
180037d6:	d8042086 	ld.w      	r0, (r4, 0x218)
180037da:	7bc9      	jsr      	r2
        }
        CSI_INTRPT_EXIT();
180037dc:	e0004b3c 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
}
180037e0:	d9ee2001 	ld.w      	r15, (r14, 0x4)
180037e4:	9880      	ld.w      	r4, (r14, 0x0)
180037e6:	1402      	addi      	r14, r14, 8
180037e8:	1463      	ipop
180037ea:	1461      	nir
180037ec:	2000195c 	.long	0x2000195c

180037f0 <GPIO_IRQHandler>:
#define GPIOA_IE_ENABLE (*(unsigned int *)0x40020A3C) & 0x0000FFFF
#define GPIOB_IE_ENABLE (*(unsigned int *)0x40020B3C) & 0x0000FFFF
#define GPIOC_IE_ENABLE (*(unsigned int *)0x40020C3C) & 0x0000FFFF
#define GPIOE_IE_ENABLE (*(unsigned int *)0x40020E3C) & 0x0000FFFF
ATTRIBUTE_ISR void GPIO_IRQHandler(void)
{
180037f0:	1460      	nie
180037f2:	1462      	ipush
180037f4:	14d1      	push      	r4, r15
        CSI_INTRPT_ENTER();
        if (sys_irqs[GPIOA_IRQn].handle && GPIOA_IE_ENABLE ) {
180037f6:	109c      	lrw      	r4, 0x2000195c	// 18003864 <GPIO_IRQHandler+0x74>
        CSI_INTRPT_ENTER();
180037f8:	e0004b24 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
        if (sys_irqs[GPIOA_IRQn].handle && GPIOA_IE_ENABLE ) {
180037fc:	d8642089 	ld.w      	r3, (r4, 0x224)
18003800:	e9030009 	bez      	r3, 0x18003812	// 18003812 <GPIO_IRQHandler+0x22>
18003804:	1059      	lrw      	r2, 0x40020a00	// 18003868 <GPIO_IRQHandler+0x78>
18003806:	8a5e      	ld.h      	r2, (r2, 0x3c)
18003808:	e9020005 	bez      	r2, 0x18003812	// 18003812 <GPIO_IRQHandler+0x22>
            sys_irqs[GPIOA_IRQn].handle(sys_irqs[GPIOA_IRQn].data);
1800380c:	d8042088 	ld.w      	r0, (r4, 0x220)
18003810:	7bcd      	jsr      	r3
        }

		if (sys_irqs[GPIOB_IRQn].handle && GPIOB_IE_ENABLE ) {
18003812:	d864208b 	ld.w      	r3, (r4, 0x22c)
18003816:	e9030009 	bez      	r3, 0x18003828	// 18003828 <GPIO_IRQHandler+0x38>
1800381a:	1055      	lrw      	r2, 0x40020b00	// 1800386c <GPIO_IRQHandler+0x7c>
1800381c:	8a5e      	ld.h      	r2, (r2, 0x3c)
1800381e:	e9020005 	bez      	r2, 0x18003828	// 18003828 <GPIO_IRQHandler+0x38>
            sys_irqs[GPIOB_IRQn].handle(sys_irqs[GPIOB_IRQn].data);
18003822:	d804208a 	ld.w      	r0, (r4, 0x228)
18003826:	7bcd      	jsr      	r3
        }

		if (sys_irqs[GPIOC_IRQn].handle && GPIOC_IE_ENABLE ) {
18003828:	d864208d 	ld.w      	r3, (r4, 0x234)
1800382c:	e9030009 	bez      	r3, 0x1800383e	// 1800383e <GPIO_IRQHandler+0x4e>
18003830:	1050      	lrw      	r2, 0x40020c00	// 18003870 <GPIO_IRQHandler+0x80>
18003832:	8a5e      	ld.h      	r2, (r2, 0x3c)
18003834:	e9020005 	bez      	r2, 0x1800383e	// 1800383e <GPIO_IRQHandler+0x4e>
            sys_irqs[GPIOC_IRQn].handle(sys_irqs[GPIOC_IRQn].data);
18003838:	d804208c 	ld.w      	r0, (r4, 0x230)
1800383c:	7bcd      	jsr      	r3
        }

		if (sys_irqs[GPIOE_IRQn].handle && GPIOE_IE_ENABLE ) {
1800383e:	d864208f 	ld.w      	r3, (r4, 0x23c)
18003842:	e9030009 	bez      	r3, 0x18003854	// 18003854 <GPIO_IRQHandler+0x64>
18003846:	104c      	lrw      	r2, 0x40020e00	// 18003874 <GPIO_IRQHandler+0x84>
18003848:	8a5e      	ld.h      	r2, (r2, 0x3c)
1800384a:	e9020005 	bez      	r2, 0x18003854	// 18003854 <GPIO_IRQHandler+0x64>
            sys_irqs[GPIOE_IRQn].handle(sys_irqs[GPIOE_IRQn].data);
1800384e:	d804208e 	ld.w      	r0, (r4, 0x238)
18003852:	7bcd      	jsr      	r3
        }
        CSI_INTRPT_EXIT();
18003854:	e0004b00 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
}
18003858:	d9ee2001 	ld.w      	r15, (r14, 0x4)
1800385c:	9880      	ld.w      	r4, (r14, 0x0)
1800385e:	1402      	addi      	r14, r14, 8
18003860:	1463      	ipop
18003862:	1461      	nir
18003864:	2000195c 	.long	0x2000195c
18003868:	40020a00 	.long	0x40020a00
1800386c:	40020b00 	.long	0x40020b00
18003870:	40020c00 	.long	0x40020c00
18003874:	40020e00 	.long	0x40020e00

18003878 <USB20DMA_IRQHandler>:



//0
SYSTEM_IRQ_HANDLE_FUNC(USB20DMA_IRQHandler, USB20DMA_IRQn)
18003878:	1460      	nie
1800387a:	1462      	ipush
1800387c:	14d0      	push      	r15
1800387e:	e0004ae1 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003882:	1047      	lrw      	r2, 0x2000195c	// 1800389c <USB20DMA_IRQHandler+0x24>
18003884:	9261      	ld.w      	r3, (r2, 0x4)
18003886:	e9030004 	bez      	r3, 0x1800388e	// 1800388e <USB20DMA_IRQHandler+0x16>
1800388a:	9200      	ld.w      	r0, (r2, 0x0)
1800388c:	7bcd      	jsr      	r3
1800388e:	e0004ae3 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003892:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003896:	1401      	addi      	r14, r14, 4
18003898:	1463      	ipop
1800389a:	1461      	nir
1800389c:	2000195c 	.long	0x2000195c

180038a0 <USB20MC_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(USB20MC_IRQHandler, USB20MC_IRQn)
180038a0:	1460      	nie
180038a2:	1462      	ipush
180038a4:	14d0      	push      	r15
180038a6:	e0004acd 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
180038aa:	1047      	lrw      	r2, 0x2000195c	// 180038c4 <USB20MC_IRQHandler+0x24>
180038ac:	9263      	ld.w      	r3, (r2, 0xc)
180038ae:	e9030004 	bez      	r3, 0x180038b6	// 180038b6 <USB20MC_IRQHandler+0x16>
180038b2:	9202      	ld.w      	r0, (r2, 0x8)
180038b4:	7bcd      	jsr      	r3
180038b6:	e0004acf 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
180038ba:	d9ee2000 	ld.w      	r15, (r14, 0x0)
180038be:	1401      	addi      	r14, r14, 4
180038c0:	1463      	ipop
180038c2:	1461      	nir
180038c4:	2000195c 	.long	0x2000195c

180038c8 <UART0_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(UART0_IRQHandler, UART0_IRQn)
180038c8:	1460      	nie
180038ca:	1462      	ipush
180038cc:	14d0      	push      	r15
180038ce:	e0004ab9 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
180038d2:	1047      	lrw      	r2, 0x2000195c	// 180038ec <UART0_IRQHandler+0x24>
180038d4:	9265      	ld.w      	r3, (r2, 0x14)
180038d6:	e9030004 	bez      	r3, 0x180038de	// 180038de <UART0_IRQHandler+0x16>
180038da:	9204      	ld.w      	r0, (r2, 0x10)
180038dc:	7bcd      	jsr      	r3
180038de:	e0004abb 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
180038e2:	d9ee2000 	ld.w      	r15, (r14, 0x0)
180038e6:	1401      	addi      	r14, r14, 4
180038e8:	1463      	ipop
180038ea:	1461      	nir
180038ec:	2000195c 	.long	0x2000195c

180038f0 <UART1_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(UART1_IRQHandler, UART1_IRQn)
180038f0:	1460      	nie
180038f2:	1462      	ipush
180038f4:	14d0      	push      	r15
180038f6:	e0004aa5 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
180038fa:	1047      	lrw      	r2, 0x2000195c	// 18003914 <UART1_IRQHandler+0x24>
180038fc:	9267      	ld.w      	r3, (r2, 0x1c)
180038fe:	e9030004 	bez      	r3, 0x18003906	// 18003906 <UART1_IRQHandler+0x16>
18003902:	9206      	ld.w      	r0, (r2, 0x18)
18003904:	7bcd      	jsr      	r3
18003906:	e0004aa7 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
1800390a:	d9ee2000 	ld.w      	r15, (r14, 0x0)
1800390e:	1401      	addi      	r14, r14, 4
18003910:	1463      	ipop
18003912:	1461      	nir
18003914:	2000195c 	.long	0x2000195c

18003918 <LCD_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(LCD_IRQHandler, LCD_IRQn)
18003918:	1460      	nie
1800391a:	1462      	ipush
1800391c:	14d0      	push      	r15
1800391e:	e0004a91 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003922:	1047      	lrw      	r2, 0x2000195c	// 1800393c <LCD_IRQHandler+0x24>
18003924:	9269      	ld.w      	r3, (r2, 0x24)
18003926:	e9030004 	bez      	r3, 0x1800392e	// 1800392e <LCD_IRQHandler+0x16>
1800392a:	9208      	ld.w      	r0, (r2, 0x20)
1800392c:	7bcd      	jsr      	r3
1800392e:	e0004a93 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003932:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003936:	1401      	addi      	r14, r14, 4
18003938:	1463      	ipop
1800393a:	1461      	nir
1800393c:	2000195c 	.long	0x2000195c

18003940 <QSPI_IRQHandler>:

//5
SYSTEM_IRQ_HANDLE_FUNC(QSPI_IRQHandler, QSPI_IRQn)
18003940:	1460      	nie
18003942:	1462      	ipush
18003944:	14d0      	push      	r15
18003946:	e0004a7d 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
1800394a:	1047      	lrw      	r2, 0x2000195c	// 18003964 <QSPI_IRQHandler+0x24>
1800394c:	926b      	ld.w      	r3, (r2, 0x2c)
1800394e:	e9030004 	bez      	r3, 0x18003956	// 18003956 <QSPI_IRQHandler+0x16>
18003952:	920a      	ld.w      	r0, (r2, 0x28)
18003954:	7bcd      	jsr      	r3
18003956:	e0004a7f 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
1800395a:	d9ee2000 	ld.w      	r15, (r14, 0x0)
1800395e:	1401      	addi      	r14, r14, 4
18003960:	1463      	ipop
18003962:	1461      	nir
18003964:	2000195c 	.long	0x2000195c

18003968 <SPI0_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(SPI0_IRQHandler, SPI0_IRQn)
18003968:	1460      	nie
1800396a:	1462      	ipush
1800396c:	14d0      	push      	r15
1800396e:	e0004a69 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003972:	1047      	lrw      	r2, 0x2000195c	// 1800398c <SPI0_IRQHandler+0x24>
18003974:	926d      	ld.w      	r3, (r2, 0x34)
18003976:	e9030004 	bez      	r3, 0x1800397e	// 1800397e <SPI0_IRQHandler+0x16>
1800397a:	920c      	ld.w      	r0, (r2, 0x30)
1800397c:	7bcd      	jsr      	r3
1800397e:	e0004a6b 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003982:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003986:	1401      	addi      	r14, r14, 4
18003988:	1463      	ipop
1800398a:	1461      	nir
1800398c:	2000195c 	.long	0x2000195c

18003990 <SPI1_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(SPI1_IRQHandler, SPI1_IRQn)
18003990:	1460      	nie
18003992:	1462      	ipush
18003994:	14d0      	push      	r15
18003996:	e0004a55 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
1800399a:	1047      	lrw      	r2, 0x2000195c	// 180039b4 <SPI1_IRQHandler+0x24>
1800399c:	926f      	ld.w      	r3, (r2, 0x3c)
1800399e:	e9030004 	bez      	r3, 0x180039a6	// 180039a6 <SPI1_IRQHandler+0x16>
180039a2:	920e      	ld.w      	r0, (r2, 0x38)
180039a4:	7bcd      	jsr      	r3
180039a6:	e0004a57 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
180039aa:	d9ee2000 	ld.w      	r15, (r14, 0x0)
180039ae:	1401      	addi      	r14, r14, 4
180039b0:	1463      	ipop
180039b2:	1461      	nir
180039b4:	2000195c 	.long	0x2000195c

180039b8 <SPI2_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(SPI2_IRQHandler, SPI2_IRQn)
180039b8:	1460      	nie
180039ba:	1462      	ipush
180039bc:	14d0      	push      	r15
180039be:	e0004a41 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
180039c2:	1047      	lrw      	r2, 0x2000195c	// 180039dc <SPI2_IRQHandler+0x24>
180039c4:	9271      	ld.w      	r3, (r2, 0x44)
180039c6:	e9030004 	bez      	r3, 0x180039ce	// 180039ce <SPI2_IRQHandler+0x16>
180039ca:	9210      	ld.w      	r0, (r2, 0x40)
180039cc:	7bcd      	jsr      	r3
180039ce:	e0004a43 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
180039d2:	d9ee2000 	ld.w      	r15, (r14, 0x0)
180039d6:	1401      	addi      	r14, r14, 4
180039d8:	1463      	ipop
180039da:	1461      	nir
180039dc:	2000195c 	.long	0x2000195c

180039e0 <OSPI_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(OSPI_IRQHandler, OSPI_IRQn)
180039e0:	1460      	nie
180039e2:	1462      	ipush
180039e4:	14d0      	push      	r15
180039e6:	e0004a2d 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
180039ea:	1047      	lrw      	r2, 0x2000195c	// 18003a04 <OSPI_IRQHandler+0x24>
180039ec:	9273      	ld.w      	r3, (r2, 0x4c)
180039ee:	e9030004 	bez      	r3, 0x180039f6	// 180039f6 <OSPI_IRQHandler+0x16>
180039f2:	9212      	ld.w      	r0, (r2, 0x48)
180039f4:	7bcd      	jsr      	r3
180039f6:	e0004a2f 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
180039fa:	d9ee2000 	ld.w      	r15, (r14, 0x0)
180039fe:	1401      	addi      	r14, r14, 4
18003a00:	1463      	ipop
18003a02:	1461      	nir
18003a04:	2000195c 	.long	0x2000195c

18003a08 <TIM0_IRQHandler>:

//10
SYSTEM_IRQ_HANDLE_FUNC(TIM0_IRQHandler, TIM0_IRQn)
18003a08:	1460      	nie
18003a0a:	1462      	ipush
18003a0c:	14d0      	push      	r15
18003a0e:	e0004a19 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003a12:	1047      	lrw      	r2, 0x2000195c	// 18003a2c <TIM0_IRQHandler+0x24>
18003a14:	9275      	ld.w      	r3, (r2, 0x54)
18003a16:	e9030004 	bez      	r3, 0x18003a1e	// 18003a1e <TIM0_IRQHandler+0x16>
18003a1a:	9214      	ld.w      	r0, (r2, 0x50)
18003a1c:	7bcd      	jsr      	r3
18003a1e:	e0004a1b 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003a22:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003a26:	1401      	addi      	r14, r14, 4
18003a28:	1463      	ipop
18003a2a:	1461      	nir
18003a2c:	2000195c 	.long	0x2000195c

18003a30 <TIM1_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(TIM1_IRQHandler, TIM1_IRQn)
18003a30:	1460      	nie
18003a32:	1462      	ipush
18003a34:	14d0      	push      	r15
18003a36:	e0004a05 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003a3a:	1047      	lrw      	r2, 0x2000195c	// 18003a54 <TIM1_IRQHandler+0x24>
18003a3c:	9277      	ld.w      	r3, (r2, 0x5c)
18003a3e:	e9030004 	bez      	r3, 0x18003a46	// 18003a46 <TIM1_IRQHandler+0x16>
18003a42:	9216      	ld.w      	r0, (r2, 0x58)
18003a44:	7bcd      	jsr      	r3
18003a46:	e0004a07 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003a4a:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003a4e:	1401      	addi      	r14, r14, 4
18003a50:	1463      	ipop
18003a52:	1461      	nir
18003a54:	2000195c 	.long	0x2000195c

18003a58 <TIM2_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(TIM2_IRQHandler, TIM2_IRQn)
18003a58:	1460      	nie
18003a5a:	1462      	ipush
18003a5c:	14d0      	push      	r15
18003a5e:	e00049f1 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003a62:	1047      	lrw      	r2, 0x2000195c	// 18003a7c <TIM2_IRQHandler+0x24>
18003a64:	9279      	ld.w      	r3, (r2, 0x64)
18003a66:	e9030004 	bez      	r3, 0x18003a6e	// 18003a6e <TIM2_IRQHandler+0x16>
18003a6a:	9218      	ld.w      	r0, (r2, 0x60)
18003a6c:	7bcd      	jsr      	r3
18003a6e:	e00049f3 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003a72:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003a76:	1401      	addi      	r14, r14, 4
18003a78:	1463      	ipop
18003a7a:	1461      	nir
18003a7c:	2000195c 	.long	0x2000195c

18003a80 <TIM3_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(TIM3_IRQHandler, TIM3_IRQn)
18003a80:	1460      	nie
18003a82:	1462      	ipush
18003a84:	14d0      	push      	r15
18003a86:	e00049dd 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003a8a:	1047      	lrw      	r2, 0x2000195c	// 18003aa4 <TIM3_IRQHandler+0x24>
18003a8c:	927b      	ld.w      	r3, (r2, 0x6c)
18003a8e:	e9030004 	bez      	r3, 0x18003a96	// 18003a96 <TIM3_IRQHandler+0x16>
18003a92:	921a      	ld.w      	r0, (r2, 0x68)
18003a94:	7bcd      	jsr      	r3
18003a96:	e00049df 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003a9a:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003a9e:	1401      	addi      	r14, r14, 4
18003aa0:	1463      	ipop
18003aa2:	1461      	nir
18003aa4:	2000195c 	.long	0x2000195c

18003aa8 <SCALE1_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(SCALE1_IRQHandler, SCALE1_IRQn)
18003aa8:	1460      	nie
18003aaa:	1462      	ipush
18003aac:	14d0      	push      	r15
18003aae:	e00049c9 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003ab2:	1047      	lrw      	r2, 0x2000195c	// 18003acc <SCALE1_IRQHandler+0x24>
18003ab4:	927d      	ld.w      	r3, (r2, 0x74)
18003ab6:	e9030004 	bez      	r3, 0x18003abe	// 18003abe <SCALE1_IRQHandler+0x16>
18003aba:	921c      	ld.w      	r0, (r2, 0x70)
18003abc:	7bcd      	jsr      	r3
18003abe:	e00049cb 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003ac2:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003ac6:	1401      	addi      	r14, r14, 4
18003ac8:	1463      	ipop
18003aca:	1461      	nir
18003acc:	2000195c 	.long	0x2000195c

18003ad0 <AUDIO_VAD_HS_ALAW_IRQHandler>:

//15
SYSTEM_IRQ_HANDLE_FUNC(AUDIO_VAD_HS_ALAW_IRQHandler, AUDIO_SUBSYS0_IRQn)
18003ad0:	1460      	nie
18003ad2:	1462      	ipush
18003ad4:	14d0      	push      	r15
18003ad6:	e00049b5 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003ada:	1047      	lrw      	r2, 0x2000195c	// 18003af4 <AUDIO_VAD_HS_ALAW_IRQHandler+0x24>
18003adc:	927f      	ld.w      	r3, (r2, 0x7c)
18003ade:	e9030004 	bez      	r3, 0x18003ae6	// 18003ae6 <AUDIO_VAD_HS_ALAW_IRQHandler+0x16>
18003ae2:	921e      	ld.w      	r0, (r2, 0x78)
18003ae4:	7bcd      	jsr      	r3
18003ae6:	e00049b7 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003aea:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003aee:	1401      	addi      	r14, r14, 4
18003af0:	1463      	ipop
18003af2:	1461      	nir
18003af4:	2000195c 	.long	0x2000195c

18003af8 <AUDIO_ADC_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(AUDIO_ADC_IRQHandler, AUDIO_SUBSYS1_IRQn)
18003af8:	1460      	nie
18003afa:	1462      	ipush
18003afc:	14d0      	push      	r15
18003afe:	e00049a1 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003b02:	1048      	lrw      	r2, 0x2000195c	// 18003b20 <AUDIO_ADC_IRQHandler+0x28>
18003b04:	d8622021 	ld.w      	r3, (r2, 0x84)
18003b08:	e9030005 	bez      	r3, 0x18003b12	// 18003b12 <AUDIO_ADC_IRQHandler+0x1a>
18003b0c:	d8022020 	ld.w      	r0, (r2, 0x80)
18003b10:	7bcd      	jsr      	r3
18003b12:	e00049a1 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003b16:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003b1a:	1401      	addi      	r14, r14, 4
18003b1c:	1463      	ipop
18003b1e:	1461      	nir
18003b20:	2000195c 	.long	0x2000195c

18003b24 <AUDIO_DAC_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(AUDIO_DAC_IRQHandler, AUDIO_SUBSYS2_IRQn)
18003b24:	1460      	nie
18003b26:	1462      	ipush
18003b28:	14d0      	push      	r15
18003b2a:	e000498b 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003b2e:	1048      	lrw      	r2, 0x2000195c	// 18003b4c <AUDIO_DAC_IRQHandler+0x28>
18003b30:	d8622023 	ld.w      	r3, (r2, 0x8c)
18003b34:	e9030005 	bez      	r3, 0x18003b3e	// 18003b3e <AUDIO_DAC_IRQHandler+0x1a>
18003b38:	d8022022 	ld.w      	r0, (r2, 0x88)
18003b3c:	7bcd      	jsr      	r3
18003b3e:	e000498b 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003b42:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003b46:	1401      	addi      	r14, r14, 4
18003b48:	1463      	ipop
18003b4a:	1461      	nir
18003b4c:	2000195c 	.long	0x2000195c

18003b50 <SDIO_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(SDIO_IRQHandler, SDIO_IRQn)
18003b50:	1460      	nie
18003b52:	1462      	ipush
18003b54:	14d0      	push      	r15
18003b56:	e0004975 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003b5a:	1048      	lrw      	r2, 0x2000195c	// 18003b78 <SDIO_IRQHandler+0x28>
18003b5c:	d8622025 	ld.w      	r3, (r2, 0x94)
18003b60:	e9030005 	bez      	r3, 0x18003b6a	// 18003b6a <SDIO_IRQHandler+0x1a>
18003b64:	d8022024 	ld.w      	r0, (r2, 0x90)
18003b68:	7bcd      	jsr      	r3
18003b6a:	e0004975 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003b6e:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003b72:	1401      	addi      	r14, r14, 4
18003b74:	1463      	ipop
18003b76:	1461      	nir
18003b78:	2000195c 	.long	0x2000195c

18003b7c <SDIO_RST_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(SDIO_RST_IRQHandler, SDIO_RST_IRQn)
18003b7c:	1460      	nie
18003b7e:	1462      	ipush
18003b80:	14d0      	push      	r15
18003b82:	e000495f 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003b86:	1048      	lrw      	r2, 0x2000195c	// 18003ba4 <SDIO_RST_IRQHandler+0x28>
18003b88:	d8622027 	ld.w      	r3, (r2, 0x9c)
18003b8c:	e9030005 	bez      	r3, 0x18003b96	// 18003b96 <SDIO_RST_IRQHandler+0x1a>
18003b90:	d8022026 	ld.w      	r0, (r2, 0x98)
18003b94:	7bcd      	jsr      	r3
18003b96:	e000495f 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003b9a:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003b9e:	1401      	addi      	r14, r14, 4
18003ba0:	1463      	ipop
18003ba2:	1461      	nir
18003ba4:	2000195c 	.long	0x2000195c

18003ba8 <SDHOST_IRQHandler>:

//20
SYSTEM_IRQ_HANDLE_FUNC(SDHOST_IRQHandler, SDHOST_IRQn)
18003ba8:	1460      	nie
18003baa:	1462      	ipush
18003bac:	14d0      	push      	r15
18003bae:	e0004949 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003bb2:	1048      	lrw      	r2, 0x2000195c	// 18003bd0 <SDHOST_IRQHandler+0x28>
18003bb4:	d8622029 	ld.w      	r3, (r2, 0xa4)
18003bb8:	e9030005 	bez      	r3, 0x18003bc2	// 18003bc2 <SDHOST_IRQHandler+0x1a>
18003bbc:	d8022028 	ld.w      	r0, (r2, 0xa0)
18003bc0:	7bcd      	jsr      	r3
18003bc2:	e0004949 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003bc6:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003bca:	1401      	addi      	r14, r14, 4
18003bcc:	1463      	ipop
18003bce:	1461      	nir
18003bd0:	2000195c 	.long	0x2000195c

18003bd4 <GMAC_IRQHandler>:
__attribute__((section(".ram_func"))) SYSTEM_IRQ_HANDLE_FUNC(LMAC_IRQHandler, LMAC_IRQn)
SYSTEM_IRQ_HANDLE_FUNC(GMAC_IRQHandler, GMAC_IRQn)
18003bd4:	1460      	nie
18003bd6:	1462      	ipush
18003bd8:	14d0      	push      	r15
18003bda:	e0004933 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003bde:	1048      	lrw      	r2, 0x2000195c	// 18003bfc <GMAC_IRQHandler+0x28>
18003be0:	d862202d 	ld.w      	r3, (r2, 0xb4)
18003be4:	e9030005 	bez      	r3, 0x18003bee	// 18003bee <GMAC_IRQHandler+0x1a>
18003be8:	d802202c 	ld.w      	r0, (r2, 0xb0)
18003bec:	7bcd      	jsr      	r3
18003bee:	e0004933 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003bf2:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003bf6:	1401      	addi      	r14, r14, 4
18003bf8:	1463      	ipop
18003bfa:	1461      	nir
18003bfc:	2000195c 	.long	0x2000195c

18003c00 <M2M0_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(M2M0_IRQHandler, M2M0_IRQn)
18003c00:	1460      	nie
18003c02:	1462      	ipush
18003c04:	14d0      	push      	r15
18003c06:	e000491d 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003c0a:	1048      	lrw      	r2, 0x2000195c	// 18003c28 <M2M0_IRQHandler+0x28>
18003c0c:	d862202f 	ld.w      	r3, (r2, 0xbc)
18003c10:	e9030005 	bez      	r3, 0x18003c1a	// 18003c1a <M2M0_IRQHandler+0x1a>
18003c14:	d802202e 	ld.w      	r0, (r2, 0xb8)
18003c18:	7bcd      	jsr      	r3
18003c1a:	e000491d 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003c1e:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003c22:	1401      	addi      	r14, r14, 4
18003c24:	1463      	ipop
18003c26:	1461      	nir
18003c28:	2000195c 	.long	0x2000195c

18003c2c <M2M1_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(M2M1_IRQHandler, M2M1_IRQn)
18003c2c:	1460      	nie
18003c2e:	1462      	ipush
18003c30:	14d0      	push      	r15
18003c32:	e0004907 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003c36:	1048      	lrw      	r2, 0x2000195c	// 18003c54 <M2M1_IRQHandler+0x28>
18003c38:	d8622031 	ld.w      	r3, (r2, 0xc4)
18003c3c:	e9030005 	bez      	r3, 0x18003c46	// 18003c46 <M2M1_IRQHandler+0x1a>
18003c40:	d8022030 	ld.w      	r0, (r2, 0xc0)
18003c44:	7bcd      	jsr      	r3
18003c46:	e0004907 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003c4a:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003c4e:	1401      	addi      	r14, r14, 4
18003c50:	1463      	ipop
18003c52:	1461      	nir
18003c54:	2000195c 	.long	0x2000195c

18003c58 <CRC_IRQHandler>:

//25
//SYSTEM_IRQ_HANDLE_FUNC(CORET_IRQHandler, CORET_IRQn)
//SYSTEM_IRQ_HANDLE_FUNC(SYSAES_IRQHandler, SPACC_PKA_IRQn)
SYSTEM_IRQ_HANDLE_FUNC(CRC_IRQHandler, CRC_IRQn)
18003c58:	1460      	nie
18003c5a:	1462      	ipush
18003c5c:	14d0      	push      	r15
18003c5e:	e00048f1 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003c62:	1048      	lrw      	r2, 0x2000195c	// 18003c80 <CRC_IRQHandler+0x28>
18003c64:	d8622037 	ld.w      	r3, (r2, 0xdc)
18003c68:	e9030005 	bez      	r3, 0x18003c72	// 18003c72 <CRC_IRQHandler+0x1a>
18003c6c:	d8022036 	ld.w      	r0, (r2, 0xd8)
18003c70:	7bcd      	jsr      	r3
18003c72:	e00048f1 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003c76:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003c7a:	1401      	addi      	r14, r14, 4
18003c7c:	1463      	ipop
18003c7e:	1461      	nir
18003c80:	2000195c 	.long	0x2000195c

18003c84 <ADKEY_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(ADKEY_IRQHandler, ADKEY01_IRQn)
18003c84:	1460      	nie
18003c86:	1462      	ipush
18003c88:	14d0      	push      	r15
18003c8a:	e00048db 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003c8e:	1048      	lrw      	r2, 0x2000195c	// 18003cac <ADKEY_IRQHandler+0x28>
18003c90:	d8622039 	ld.w      	r3, (r2, 0xe4)
18003c94:	e9030005 	bez      	r3, 0x18003c9e	// 18003c9e <ADKEY_IRQHandler+0x1a>
18003c98:	d8022038 	ld.w      	r0, (r2, 0xe0)
18003c9c:	7bcd      	jsr      	r3
18003c9e:	e00048db 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003ca2:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003ca6:	1401      	addi      	r14, r14, 4
18003ca8:	1463      	ipop
18003caa:	1461      	nir
18003cac:	2000195c 	.long	0x2000195c

18003cb0 <PD_TMR_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(PD_TMR_IRQHandler, PD_TMR_IRQn)
18003cb0:	1460      	nie
18003cb2:	1462      	ipush
18003cb4:	14d0      	push      	r15
18003cb6:	e00048c5 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003cba:	1048      	lrw      	r2, 0x2000195c	// 18003cd8 <PD_TMR_IRQHandler+0x28>
18003cbc:	d862203b 	ld.w      	r3, (r2, 0xec)
18003cc0:	e9030005 	bez      	r3, 0x18003cca	// 18003cca <PD_TMR_IRQHandler+0x1a>
18003cc4:	d802203a 	ld.w      	r0, (r2, 0xe8)
18003cc8:	7bcd      	jsr      	r3
18003cca:	e00048c5 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003cce:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003cd2:	1401      	addi      	r14, r14, 4
18003cd4:	1463      	ipop
18003cd6:	1461      	nir
18003cd8:	2000195c 	.long	0x2000195c

18003cdc <WKPND_IRQHandler>:

//30
SYSTEM_IRQ_HANDLE_FUNC(WKPND_IRQHandler, WKPND_IRQn)
18003cdc:	1460      	nie
18003cde:	1462      	ipush
18003ce0:	14d0      	push      	r15
18003ce2:	e00048af 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003ce6:	1048      	lrw      	r2, 0x2000195c	// 18003d04 <WKPND_IRQHandler+0x28>
18003ce8:	d862203d 	ld.w      	r3, (r2, 0xf4)
18003cec:	e9030005 	bez      	r3, 0x18003cf6	// 18003cf6 <WKPND_IRQHandler+0x1a>
18003cf0:	d802203c 	ld.w      	r0, (r2, 0xf0)
18003cf4:	7bcd      	jsr      	r3
18003cf6:	e00048af 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003cfa:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003cfe:	1401      	addi      	r14, r14, 4
18003d00:	1463      	ipop
18003d02:	1461      	nir
18003d04:	2000195c 	.long	0x2000195c

18003d08 <PDWKPND_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(PDWKPND_IRQHandler, PDWKPND_IRQn)
18003d08:	1460      	nie
18003d0a:	1462      	ipush
18003d0c:	14d0      	push      	r15
18003d0e:	e0004899 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003d12:	1048      	lrw      	r2, 0x2000195c	// 18003d30 <PDWKPND_IRQHandler+0x28>
18003d14:	d862203f 	ld.w      	r3, (r2, 0xfc)
18003d18:	e9030005 	bez      	r3, 0x18003d22	// 18003d22 <PDWKPND_IRQHandler+0x1a>
18003d1c:	d802203e 	ld.w      	r0, (r2, 0xf8)
18003d20:	7bcd      	jsr      	r3
18003d22:	e0004899 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003d26:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003d2a:	1401      	addi      	r14, r14, 4
18003d2c:	1463      	ipop
18003d2e:	1461      	nir
18003d30:	2000195c 	.long	0x2000195c

18003d34 <LVD_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(LVD_IRQHandler, LVD_IRQn)
18003d34:	1460      	nie
18003d36:	1462      	ipush
18003d38:	14d0      	push      	r15
18003d3a:	e0004883 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003d3e:	1048      	lrw      	r2, 0x2000195c	// 18003d5c <LVD_IRQHandler+0x28>
18003d40:	d8622041 	ld.w      	r3, (r2, 0x104)
18003d44:	e9030005 	bez      	r3, 0x18003d4e	// 18003d4e <LVD_IRQHandler+0x1a>
18003d48:	d8022040 	ld.w      	r0, (r2, 0x100)
18003d4c:	7bcd      	jsr      	r3
18003d4e:	e0004883 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003d52:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003d56:	1401      	addi      	r14, r14, 4
18003d58:	1463      	ipop
18003d5a:	1461      	nir
18003d5c:	2000195c 	.long	0x2000195c

18003d60 <WDT_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(WDT_IRQHandler, WDT_IRQn)
18003d60:	1460      	nie
18003d62:	1462      	ipush
18003d64:	14d0      	push      	r15
18003d66:	e000486d 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003d6a:	1048      	lrw      	r2, 0x2000195c	// 18003d88 <WDT_IRQHandler+0x28>
18003d6c:	d8622043 	ld.w      	r3, (r2, 0x10c)
18003d70:	e9030005 	bez      	r3, 0x18003d7a	// 18003d7a <WDT_IRQHandler+0x1a>
18003d74:	d8022042 	ld.w      	r0, (r2, 0x108)
18003d78:	7bcd      	jsr      	r3
18003d7a:	e000486d 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003d7e:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003d82:	1401      	addi      	r14, r14, 4
18003d84:	1463      	ipop
18003d86:	1461      	nir
18003d88:	2000195c 	.long	0x2000195c

18003d8c <SYS_ERR_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(SYS_ERR_IRQHandler, SYS_ERR_IRQn)
18003d8c:	1460      	nie
18003d8e:	1462      	ipush
18003d90:	14d0      	push      	r15
18003d92:	e0004857 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003d96:	1048      	lrw      	r2, 0x2000195c	// 18003db4 <SYS_ERR_IRQHandler+0x28>
18003d98:	d8622045 	ld.w      	r3, (r2, 0x114)
18003d9c:	e9030005 	bez      	r3, 0x18003da6	// 18003da6 <SYS_ERR_IRQHandler+0x1a>
18003da0:	d8022044 	ld.w      	r0, (r2, 0x110)
18003da4:	7bcd      	jsr      	r3
18003da6:	e0004857 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003daa:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003dae:	1401      	addi      	r14, r14, 4
18003db0:	1463      	ipop
18003db2:	1461      	nir
18003db4:	2000195c 	.long	0x2000195c

18003db8 <IIS0_IRQHandler>:

//35
SYSTEM_IRQ_HANDLE_FUNC(IIS0_IRQHandler, IIS0_IRQn)
18003db8:	1460      	nie
18003dba:	1462      	ipush
18003dbc:	14d0      	push      	r15
18003dbe:	e0004841 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003dc2:	1048      	lrw      	r2, 0x2000195c	// 18003de0 <IIS0_IRQHandler+0x28>
18003dc4:	d8622047 	ld.w      	r3, (r2, 0x11c)
18003dc8:	e9030005 	bez      	r3, 0x18003dd2	// 18003dd2 <IIS0_IRQHandler+0x1a>
18003dcc:	d8022046 	ld.w      	r0, (r2, 0x118)
18003dd0:	7bcd      	jsr      	r3
18003dd2:	e0004841 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003dd6:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003dda:	1401      	addi      	r14, r14, 4
18003ddc:	1463      	ipop
18003dde:	1461      	nir
18003de0:	2000195c 	.long	0x2000195c

18003de4 <IIS1_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(IIS1_IRQHandler, IIS1_IRQn)
18003de4:	1460      	nie
18003de6:	1462      	ipush
18003de8:	14d0      	push      	r15
18003dea:	e000482b 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003dee:	1048      	lrw      	r2, 0x2000195c	// 18003e0c <IIS1_IRQHandler+0x28>
18003df0:	d8622049 	ld.w      	r3, (r2, 0x124)
18003df4:	e9030005 	bez      	r3, 0x18003dfe	// 18003dfe <IIS1_IRQHandler+0x1a>
18003df8:	d8022048 	ld.w      	r0, (r2, 0x120)
18003dfc:	7bcd      	jsr      	r3
18003dfe:	e000482b 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003e02:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003e06:	1401      	addi      	r14, r14, 4
18003e08:	1463      	ipop
18003e0a:	1461      	nir
18003e0c:	2000195c 	.long	0x2000195c

18003e10 <DVP_IRQHandler>:
//SYSTEM_IRQ_HANDLE_FUNC(GPIO_IRQHandler, GPIOABCE_IRQn)
SYSTEM_IRQ_HANDLE_FUNC(DVP_IRQHandler, DVP_IRQn)
18003e10:	1460      	nie
18003e12:	1462      	ipush
18003e14:	14d0      	push      	r15
18003e16:	e0004815 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003e1a:	1048      	lrw      	r2, 0x2000195c	// 18003e38 <DVP_IRQHandler+0x28>
18003e1c:	d862204f 	ld.w      	r3, (r2, 0x13c)
18003e20:	e9030005 	bez      	r3, 0x18003e2a	// 18003e2a <DVP_IRQHandler+0x1a>
18003e24:	d802204e 	ld.w      	r0, (r2, 0x138)
18003e28:	7bcd      	jsr      	r3
18003e2a:	e0004815 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003e2e:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003e32:	1401      	addi      	r14, r14, 4
18003e34:	1463      	ipop
18003e36:	1461      	nir
18003e38:	2000195c 	.long	0x2000195c

18003e3c <JPG_IRQHandler>:
//RES: default_handler

//40
SYSTEM_IRQ_HANDLE_FUNC(JPG_IRQHandler, MJPEG01_IRQn)
18003e3c:	1460      	nie
18003e3e:	1462      	ipush
18003e40:	14d0      	push      	r15
18003e42:	e00047ff 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003e46:	1048      	lrw      	r2, 0x2000195c	// 18003e64 <JPG_IRQHandler+0x28>
18003e48:	d8622051 	ld.w      	r3, (r2, 0x144)
18003e4c:	e9030005 	bez      	r3, 0x18003e56	// 18003e56 <JPG_IRQHandler+0x1a>
18003e50:	d8022050 	ld.w      	r0, (r2, 0x140)
18003e54:	7bcd      	jsr      	r3
18003e56:	e00047ff 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003e5a:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003e5e:	1401      	addi      	r14, r14, 4
18003e60:	1463      	ipop
18003e62:	1461      	nir
18003e64:	2000195c 	.long	0x2000195c

18003e68 <VPP_IRQHandler>:
//RES: default_handler
SYSTEM_IRQ_HANDLE_FUNC(VPP_IRQHandler, VPP_IRQn)
18003e68:	1460      	nie
18003e6a:	1462      	ipush
18003e6c:	14d0      	push      	r15
18003e6e:	e00047e9 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003e72:	1048      	lrw      	r2, 0x2000195c	// 18003e90 <VPP_IRQHandler+0x28>
18003e74:	d8622055 	ld.w      	r3, (r2, 0x154)
18003e78:	e9030005 	bez      	r3, 0x18003e82	// 18003e82 <VPP_IRQHandler+0x1a>
18003e7c:	d8022054 	ld.w      	r0, (r2, 0x150)
18003e80:	7bcd      	jsr      	r3
18003e82:	e00047e9 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003e86:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003e8a:	1401      	addi      	r14, r14, 4
18003e8c:	1463      	ipop
18003e8e:	1461      	nir
18003e90:	2000195c 	.long	0x2000195c

18003e94 <PRC_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(PRC_IRQHandler, PRC_IRQn)
18003e94:	1460      	nie
18003e96:	1462      	ipush
18003e98:	14d0      	push      	r15
18003e9a:	e00047d3 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003e9e:	1048      	lrw      	r2, 0x2000195c	// 18003ebc <PRC_IRQHandler+0x28>
18003ea0:	d8622057 	ld.w      	r3, (r2, 0x15c)
18003ea4:	e9030005 	bez      	r3, 0x18003eae	// 18003eae <PRC_IRQHandler+0x1a>
18003ea8:	d8022056 	ld.w      	r0, (r2, 0x158)
18003eac:	7bcd      	jsr      	r3
18003eae:	e00047d3 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003eb2:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003eb6:	1401      	addi      	r14, r14, 4
18003eb8:	1463      	ipop
18003eba:	1461      	nir
18003ebc:	2000195c 	.long	0x2000195c

18003ec0 <STMR_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(STMR_IRQHandler, STMR012345_IRQn)
18003ec0:	1460      	nie
18003ec2:	1462      	ipush
18003ec4:	14d0      	push      	r15
18003ec6:	e00047bd 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003eca:	1048      	lrw      	r2, 0x2000195c	// 18003ee8 <STMR_IRQHandler+0x28>
18003ecc:	d8622059 	ld.w      	r3, (r2, 0x164)
18003ed0:	e9030005 	bez      	r3, 0x18003eda	// 18003eda <STMR_IRQHandler+0x1a>
18003ed4:	d8022058 	ld.w      	r0, (r2, 0x160)
18003ed8:	7bcd      	jsr      	r3
18003eda:	e00047bd 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003ede:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003ee2:	1401      	addi      	r14, r14, 4
18003ee4:	1463      	ipop
18003ee6:	1461      	nir
18003ee8:	2000195c 	.long	0x2000195c

18003eec <PDM_IRQHandler>:

//45
SYSTEM_IRQ_HANDLE_FUNC(PDM_IRQHandler, PDM_IRQn)
18003eec:	1460      	nie
18003eee:	1462      	ipush
18003ef0:	14d0      	push      	r15
18003ef2:	e00047a7 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003ef6:	1048      	lrw      	r2, 0x2000195c	// 18003f14 <PDM_IRQHandler+0x28>
18003ef8:	d862205b 	ld.w      	r3, (r2, 0x16c)
18003efc:	e9030005 	bez      	r3, 0x18003f06	// 18003f06 <PDM_IRQHandler+0x1a>
18003f00:	d802205a 	ld.w      	r0, (r2, 0x168)
18003f04:	7bcd      	jsr      	r3
18003f06:	e00047a7 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003f0a:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003f0e:	1401      	addi      	r14, r14, 4
18003f10:	1463      	ipop
18003f12:	1461      	nir
18003f14:	2000195c 	.long	0x2000195c

18003f18 <LED_TMR_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(LED_TMR_IRQHandler, LED_TMR_IRQn)
18003f18:	1460      	nie
18003f1a:	1462      	ipush
18003f1c:	14d0      	push      	r15
18003f1e:	e0004791 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003f22:	1048      	lrw      	r2, 0x2000195c	// 18003f40 <LED_TMR_IRQHandler+0x28>
18003f24:	d862205d 	ld.w      	r3, (r2, 0x174)
18003f28:	e9030005 	bez      	r3, 0x18003f32	// 18003f32 <LED_TMR_IRQHandler+0x1a>
18003f2c:	d802205c 	ld.w      	r0, (r2, 0x170)
18003f30:	7bcd      	jsr      	r3
18003f32:	e0004791 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003f36:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003f3a:	1401      	addi      	r14, r14, 4
18003f3c:	1463      	ipop
18003f3e:	1461      	nir
18003f40:	2000195c 	.long	0x2000195c

18003f44 <SCALE2_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(SCALE2_IRQHandler, SCALE2_IRQn)
18003f44:	1460      	nie
18003f46:	1462      	ipush
18003f48:	14d0      	push      	r15
18003f4a:	e000477b 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003f4e:	1048      	lrw      	r2, 0x2000195c	// 18003f6c <SCALE2_IRQHandler+0x28>
18003f50:	d862205f 	ld.w      	r3, (r2, 0x17c)
18003f54:	e9030005 	bez      	r3, 0x18003f5e	// 18003f5e <SCALE2_IRQHandler+0x1a>
18003f58:	d802205e 	ld.w      	r0, (r2, 0x178)
18003f5c:	7bcd      	jsr      	r3
18003f5e:	e000477b 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003f62:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003f66:	1401      	addi      	r14, r14, 4
18003f68:	1463      	ipop
18003f6a:	1461      	nir
18003f6c:	2000195c 	.long	0x2000195c

18003f70 <GFSK_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(GFSK_IRQHandler, GFSK_IRQn)
18003f70:	1460      	nie
18003f72:	1462      	ipush
18003f74:	14d0      	push      	r15
18003f76:	e0004765 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003f7a:	1048      	lrw      	r2, 0x2000195c	// 18003f98 <GFSK_IRQHandler+0x28>
18003f7c:	d8622061 	ld.w      	r3, (r2, 0x184)
18003f80:	e9030005 	bez      	r3, 0x18003f8a	// 18003f8a <GFSK_IRQHandler+0x1a>
18003f84:	d8022060 	ld.w      	r0, (r2, 0x180)
18003f88:	7bcd      	jsr      	r3
18003f8a:	e0004765 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003f8e:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003f92:	1401      	addi      	r14, r14, 4
18003f94:	1463      	ipop
18003f96:	1461      	nir
18003f98:	2000195c 	.long	0x2000195c

18003f9c <CMP_IRQHandler>:
SYSTEM_IRQ_HANDLE_FUNC(CMP_IRQHandler, CMPOUT01_IRQn)
18003f9c:	1460      	nie
18003f9e:	1462      	ipush
18003fa0:	14d0      	push      	r15
18003fa2:	e000474f 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003fa6:	1048      	lrw      	r2, 0x2000195c	// 18003fc4 <CMP_IRQHandler+0x28>
18003fa8:	d8622063 	ld.w      	r3, (r2, 0x18c)
18003fac:	e9030005 	bez      	r3, 0x18003fb6	// 18003fb6 <CMP_IRQHandler+0x1a>
18003fb0:	d8022062 	ld.w      	r0, (r2, 0x188)
18003fb4:	7bcd      	jsr      	r3
18003fb6:	e000474f 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003fba:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003fbe:	1401      	addi      	r14, r14, 4
18003fc0:	1463      	ipop
18003fc2:	1461      	nir
18003fc4:	2000195c 	.long	0x2000195c

18003fc8 <SCALE3_IRQHandler>:

//50
//SYSTEM_IRQ_HANDLE_FUNC(UART45_IRQHandler, UART45_IRQn)
SYSTEM_IRQ_HANDLE_FUNC(SCALE3_IRQHandler, SCALE3_IRQn)
18003fc8:	1460      	nie
18003fca:	1462      	ipush
18003fcc:	14d0      	push      	r15
18003fce:	e0004739 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003fd2:	1048      	lrw      	r2, 0x2000195c	// 18003ff0 <SCALE3_IRQHandler+0x28>
18003fd4:	d8622067 	ld.w      	r3, (r2, 0x19c)
18003fd8:	e9030005 	bez      	r3, 0x18003fe2	// 18003fe2 <SCALE3_IRQHandler+0x1a>
18003fdc:	d8022066 	ld.w      	r0, (r2, 0x198)
18003fe0:	7bcd      	jsr      	r3
18003fe2:	e0004739 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18003fe6:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18003fea:	1401      	addi      	r14, r14, 4
18003fec:	1463      	ipop
18003fee:	1461      	nir
18003ff0:	2000195c 	.long	0x2000195c

18003ff4 <USB20PHY_RTC_IRQHandler>:

//50
//RES: default_handler
//RES: default_handler
//RES: default_handler
SYSTEM_IRQ_HANDLE_FUNC(USB20PHY_RTC_IRQHandler, USB20PHY_RTC_IRQn)
18003ff4:	1460      	nie
18003ff6:	1462      	ipush
18003ff8:	14d0      	push      	r15
18003ffa:	e0004723 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18003ffe:	1048      	lrw      	r2, 0x2000195c	// 1800401c <USB20PHY_RTC_IRQHandler+0x28>
18004000:	d8622075 	ld.w      	r3, (r2, 0x1d4)
18004004:	e9030005 	bez      	r3, 0x1800400e	// 1800400e <USB20PHY_RTC_IRQHandler+0x1a>
18004008:	d8022074 	ld.w      	r0, (r2, 0x1d0)
1800400c:	7bcd      	jsr      	r3
1800400e:	e0004723 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18004012:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18004016:	1401      	addi      	r14, r14, 4
18004018:	1463      	ipop
1800401a:	1461      	nir
1800401c:	2000195c 	.long	0x2000195c

18004020 <user_pin_func>:
#include "devid.h"
#include "hal/gpio.h"
#include "lib/lcd/lcd.h"


__weak void user_pin_func(int dev_id, int request) {};
18004020:	783c      	jmp      	r15
	...

18004024 <gpio_driver_strength>:
  * @return
  *         - RET_OK  : Configure the GPIO pin driver strength successfully.
  *         - RET_ERR : Configure the GPIO pin driver strength unsuccessfully.
  */
int32 gpio_driver_strength(uint32 pin, enum pin_driver_strength strength)
{
18004024:	14d2      	push      	r4-r5, r15
18004026:	1421      	subi      	r14, r14, 4
18004028:	6d03      	mov      	r4, r0
1800402a:	6d47      	mov      	r5, r1
    struct gpio_device *gpio = gpio_get(pin);
1800402c:	e3fff712 	bsr      	0x18002e50	// 18002e50 <gpio_get>
    if (gpio && ((const struct gpio_hal_ops *)gpio->dev.ops)->ioctl) {
18004030:	e9000010 	bez      	r0, 0x18004050	// 18004050 <gpio_driver_strength+0x2c>
18004034:	9062      	ld.w      	r3, (r0, 0x8)
18004036:	d9832006 	ld.w      	r12, (r3, 0x18)
1800403a:	e90c000b 	bez      	r12, 0x18004050	// 18004050 <gpio_driver_strength+0x2c>
        return ((const struct gpio_hal_ops *)gpio->dev.ops)->ioctl(gpio, pin, GPIO_CMD_DRIVER_STRENGTH, strength, 0);
1800403e:	3300      	movi      	r3, 0
18004040:	b860      	st.w      	r3, (r14, 0x0)
18004042:	ea020105 	movi      	r2, 261
18004046:	6cd7      	mov      	r3, r5
18004048:	6c53      	mov      	r1, r4
1800404a:	7bf1      	jsr      	r12
    }
    return RET_ERR;
}
1800404c:	1401      	addi      	r14, r14, 4
1800404e:	1492      	pop      	r4-r5, r15
    return RET_ERR;
18004050:	3000      	movi      	r0, 0
18004052:	2800      	subi      	r0, 1
18004054:	07fc      	br      	0x1800404c	// 1800404c <gpio_driver_strength+0x28>
	...

18004058 <gpio_set_altnt_func>:
  * @return
  *         - RET_OK  : GPIO module configure AFIO successfully.
  *         - RET_ERR : GPIO module configure AFIO unsuccessfully.
  */
int32 gpio_set_altnt_func(uint32 pin, enum gpio_afio_set afio)
{
18004058:	14d2      	push      	r4-r5, r15
1800405a:	1421      	subi      	r14, r14, 4
1800405c:	6d03      	mov      	r4, r0
1800405e:	6d47      	mov      	r5, r1
    struct gpio_device *gpio = gpio_get(pin);
18004060:	e3fff6f8 	bsr      	0x18002e50	// 18002e50 <gpio_get>
    if (gpio && ((const struct gpio_hal_ops *)gpio->dev.ops)->ioctl) {
18004064:	e9000010 	bez      	r0, 0x18004084	// 18004084 <gpio_set_altnt_func+0x2c>
18004068:	9062      	ld.w      	r3, (r0, 0x8)
1800406a:	d9832006 	ld.w      	r12, (r3, 0x18)
1800406e:	e90c000b 	bez      	r12, 0x18004084	// 18004084 <gpio_set_altnt_func+0x2c>
        return ((const struct gpio_hal_ops *)gpio->dev.ops)->ioctl(gpio, pin, GPIO_CMD_AFIO_SET, afio, 0);
18004072:	3300      	movi      	r3, 0
18004074:	b860      	st.w      	r3, (r14, 0x0)
18004076:	ea020101 	movi      	r2, 257
1800407a:	6cd7      	mov      	r3, r5
1800407c:	6c53      	mov      	r1, r4
1800407e:	7bf1      	jsr      	r12
    }
    return RET_ERR;
}
18004080:	1401      	addi      	r14, r14, 4
18004082:	1492      	pop      	r4-r5, r15
    return RET_ERR;
18004084:	3000      	movi      	r0, 0
18004086:	2800      	subi      	r0, 1
18004088:	07fc      	br      	0x18004080	// 18004080 <gpio_set_altnt_func+0x28>
	...

1800408c <gpio_iomap_output>:
  * @return
  *         - RET_OK  : GPIO module configure IOMAP_OUTPUT successfully.
  *         - RET_ERR : GPIO module configure IOMAP_OUTPUT unsuccessfully.
  */
int32 gpio_iomap_output(uint32 pin, enum gpio_iomap_out_func func_sel)
{
1800408c:	14d2      	push      	r4-r5, r15
1800408e:	1421      	subi      	r14, r14, 4
18004090:	6d03      	mov      	r4, r0
18004092:	6d47      	mov      	r5, r1

    struct gpio_device *gpio = gpio_get(pin);
18004094:	e3fff6de 	bsr      	0x18002e50	// 18002e50 <gpio_get>
    if (gpio && ((const struct gpio_hal_ops *)gpio->dev.ops)->ioctl) {
18004098:	e9000010 	bez      	r0, 0x180040b8	// 180040b8 <gpio_iomap_output+0x2c>
1800409c:	9062      	ld.w      	r3, (r0, 0x8)
1800409e:	d9832006 	ld.w      	r12, (r3, 0x18)
180040a2:	e90c000b 	bez      	r12, 0x180040b8	// 180040b8 <gpio_iomap_output+0x2c>
        return ((const struct gpio_hal_ops *)gpio->dev.ops)->ioctl(gpio, pin, GPIO_CMD_IOMAP_OUT_FUNC, func_sel, 0);
180040a6:	3300      	movi      	r3, 0
180040a8:	3281      	movi      	r2, 129
180040aa:	b860      	st.w      	r3, (r14, 0x0)
180040ac:	4241      	lsli      	r2, r2, 1
180040ae:	6cd7      	mov      	r3, r5
180040b0:	6c53      	mov      	r1, r4
180040b2:	7bf1      	jsr      	r12
    }

    return RET_ERR;
}
180040b4:	1401      	addi      	r14, r14, 4
180040b6:	1492      	pop      	r4-r5, r15
    return RET_ERR;
180040b8:	3000      	movi      	r0, 0
180040ba:	2800      	subi      	r0, 1
180040bc:	07fc      	br      	0x180040b4	// 180040b4 <gpio_iomap_output+0x28>
	...

180040c0 <gpio_iomap_input>:
  * @return
  *         - RET_OK  : GPIO module configure IOMAP_INPUT successfully.
  *         - RET_ERR : GPIO module configure IOMAP_INPUT unsuccessfully.
  */
int32 gpio_iomap_input(uint32 pin, enum gpio_iomap_in_func func_sel)
{
180040c0:	14d2      	push      	r4-r5, r15
180040c2:	1421      	subi      	r14, r14, 4
180040c4:	6d03      	mov      	r4, r0
180040c6:	6d47      	mov      	r5, r1

    struct gpio_device *gpio = gpio_get(pin);
180040c8:	e3fff6c4 	bsr      	0x18002e50	// 18002e50 <gpio_get>
    if (gpio && ((const struct gpio_hal_ops *)gpio->dev.ops)->ioctl) {
180040cc:	e9000010 	bez      	r0, 0x180040ec	// 180040ec <gpio_iomap_input+0x2c>
180040d0:	9062      	ld.w      	r3, (r0, 0x8)
180040d2:	d9832006 	ld.w      	r12, (r3, 0x18)
180040d6:	e90c000b 	bez      	r12, 0x180040ec	// 180040ec <gpio_iomap_input+0x2c>
        return ((const struct gpio_hal_ops *)gpio->dev.ops)->ioctl(gpio, pin, GPIO_CMD_IOMAP_IN_FUNC, func_sel, 0);
180040da:	3300      	movi      	r3, 0
180040dc:	b860      	st.w      	r3, (r14, 0x0)
180040de:	ea020103 	movi      	r2, 259
180040e2:	6cd7      	mov      	r3, r5
180040e4:	6c53      	mov      	r1, r4
180040e6:	7bf1      	jsr      	r12
    }

    return RET_ERR;
}
180040e8:	1401      	addi      	r14, r14, 4
180040ea:	1492      	pop      	r4-r5, r15
    return RET_ERR;
180040ec:	3000      	movi      	r0, 0
180040ee:	2800      	subi      	r0, 1
180040f0:	07fc      	br      	0x180040e8	// 180040e8 <gpio_iomap_input+0x28>
	...

180040f4 <gpio_iomap_inout>:
  * @return
  *         - RET_OK  : GPIO module configure IOMAP_INOUT successfully.
  *         - RET_ERR : GPIO module configure IOMAP_INOUT unsuccessfully.
  */
int32 gpio_iomap_inout(uint32 pin, enum gpio_iomap_in_func in_func_sel, enum gpio_iomap_out_func out_func_sel)
{
180040f4:	14d3      	push      	r4-r6, r15
180040f6:	1421      	subi      	r14, r14, 4
180040f8:	6d03      	mov      	r4, r0
180040fa:	6d47      	mov      	r5, r1
180040fc:	6d8b      	mov      	r6, r2

    struct gpio_device *gpio = gpio_get(pin);
180040fe:	e3fff6a9 	bsr      	0x18002e50	// 18002e50 <gpio_get>
    if (gpio && ((const struct gpio_hal_ops *)gpio->dev.ops)->ioctl) {
18004102:	e900000f 	bez      	r0, 0x18004120	// 18004120 <gpio_iomap_inout+0x2c>
18004106:	9062      	ld.w      	r3, (r0, 0x8)
18004108:	d9832006 	ld.w      	r12, (r3, 0x18)
1800410c:	e90c000a 	bez      	r12, 0x18004120	// 18004120 <gpio_iomap_inout+0x2c>
        return ((const struct gpio_hal_ops *)gpio->dev.ops)->ioctl(gpio, pin, GPIO_CMD_IOMAP_INOUT_FUNC, in_func_sel, out_func_sel);
18004110:	3282      	movi      	r2, 130
18004112:	b8c0      	st.w      	r6, (r14, 0x0)
18004114:	6cd7      	mov      	r3, r5
18004116:	4241      	lsli      	r2, r2, 1
18004118:	6c53      	mov      	r1, r4
1800411a:	7bf1      	jsr      	r12
    }

    return RET_ERR;
}
1800411c:	1401      	addi      	r14, r14, 4
1800411e:	1493      	pop      	r4-r6, r15
    return RET_ERR;
18004120:	3000      	movi      	r0, 0
18004122:	2800      	subi      	r0, 1
18004124:	07fc      	br      	0x1800411c	// 1800411c <gpio_iomap_inout+0x28>
	...

18004128 <pin_func>:
    return ret;
}


int pin_func(int dev_id, int request)
{
18004128:	14d4      	push      	r4-r7, r15
    int ret = RET_OK;

    sysctrl_unlock();

    switch (dev_id) {
1800412a:	eb400040 	cmpnei      	r0, 64
{
1800412e:	6d83      	mov      	r6, r0
18004130:	6d07      	mov      	r4, r1
    switch (dev_id) {
18004132:	e84002c3 	bf      	0x180046b8	// 180046b8 <pin_func+0x590>
18004136:	eb200040 	cmplti      	r0, 65
1800413a:	0c96      	bf      	0x18004266	// 18004266 <pin_func+0x13e>
1800413c:	3834      	cmplti      	r0, 21
1800413e:	0c3d      	bf      	0x180041b8	// 180041b8 <pin_func+0x90>
18004140:	3832      	cmplti      	r0, 19
18004142:	0c13      	bf      	0x18004168	// 18004168 <pin_func+0x40>
18004144:	3826      	cmplti      	r0, 7
18004146:	0c0d      	bf      	0x18004160	// 18004160 <pin_func+0x38>
18004148:	3824      	cmplti      	r0, 5
1800414a:	0d0c      	bf      	0x18004362	// 18004362 <pin_func+0x23a>
1800414c:	5863      	subi      	r3, r0, 1
1800414e:	3b01      	cmphsi      	r3, 2
18004150:	0d09      	bf      	0x18004362	// 18004362 <pin_func+0x23a>
    int ret = RET_OK;
18004152:	3500      	movi      	r5, 0
			break;
        default:
            break;
    }

    user_pin_func(dev_id, request);
18004154:	6c1b      	mov      	r0, r6
18004156:	6c53      	mov      	r1, r4
18004158:	e3ffff64 	bsr      	0x18004020	// 18004020 <user_pin_func>
    sysctrl_lock();
    return ret;
}
1800415c:	6c17      	mov      	r0, r5
1800415e:	1494      	pop      	r4-r7, r15
    switch (dev_id) {
18004160:	e460100d 	subi      	r3, r0, 14
18004164:	3b03      	cmphsi      	r3, 4
18004166:	0bf6      	bt      	0x18004152	// 18004152 <pin_func+0x2a>
    switch (dev_id) {
18004168:	3e4f      	cmpnei      	r6, 15
1800416a:	e840025f 	bf      	0x18004628	// 18004628 <pin_func+0x500>
1800416e:	3e2f      	cmplti      	r6, 16
18004170:	e8400244 	bf      	0x180045f8	// 180045f8 <pin_func+0x4d0>
18004174:	3e4e      	cmpnei      	r6, 14
18004176:	08fc      	bt      	0x1800436e	// 1800436e <pin_func+0x246>
            if (request) {
18004178:	e9040242 	bez      	r4, 0x180045fc	// 180045fc <pin_func+0x4d4>
                gpio_iomap_inout(PIN_SPI0_CS, GPIO_IOMAP_IN_SPI0_NSS_IN, GPIO_IOMAP_OUT_SPI0_NSS_OUT);
1800417c:	3221      	movi      	r2, 33
1800417e:	3118      	movi      	r1, 24
18004180:	3008      	movi      	r0, 8
18004182:	e3ffffb9 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
                gpio_iomap_inout(PIN_SPI0_CLK, GPIO_IOMAP_IN_SPI0_SCK_IN, GPIO_IOMAP_OUT_SPI0_SCK_OUT);
18004186:	3222      	movi      	r2, 34
18004188:	3119      	movi      	r1, 25
1800418a:	3002      	movi      	r0, 2
1800418c:	e3ffffb4 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
                gpio_iomap_inout(PIN_SPI0_IO0, GPIO_IOMAP_IN_SPI0_IO0_IN, GPIO_IOMAP_OUT_SPI0_IO0_OUT);
18004190:	3223      	movi      	r2, 35
18004192:	311a      	movi      	r1, 26
18004194:	3000      	movi      	r0, 0
18004196:	e3ffffaf 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
                gpio_iomap_inout(PIN_SPI0_IO1, GPIO_IOMAP_IN_SPI0_IO1_IN, GPIO_IOMAP_OUT_SPI0_IO1_OUT);
1800419a:	3224      	movi      	r2, 36
1800419c:	311b      	movi      	r1, 27
1800419e:	30ff      	movi      	r0, 255
180041a0:	e3ffffaa 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
                gpio_iomap_inout(PIN_SPI0_IO2, GPIO_IOMAP_IN_SPI0_IO2_IN, GPIO_IOMAP_OUT_SPI0_IO2_OUT);
180041a4:	3225      	movi      	r2, 37
180041a6:	311c      	movi      	r1, 28
180041a8:	30ff      	movi      	r0, 255
180041aa:	e3ffffa5 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
                gpio_iomap_inout(PIN_SPI0_IO3, GPIO_IOMAP_IN_SPI0_IO3_IN, GPIO_IOMAP_OUT_SPI0_IO3_OUT);
180041ae:	3226      	movi      	r2, 38
180041b0:	311d      	movi      	r1, 29
                    gpio_iomap_inout(PIN_SDH_DAT3, GPIO_IOMAP_IN_SDHOST_DAT3_IN, GPIO_IOMAP_OUT_SDHOST_DAT3_OUT);
180041b2:	30ff      	movi      	r0, 255
180041b4:	e800024e 	br      	0x18004650	// 18004650 <pin_func+0x528>
    switch (dev_id) {
180041b8:	eb400029 	cmpnei      	r0, 41
180041bc:	0d53      	bf      	0x18004462	// 18004462 <pin_func+0x33a>
180041be:	eb200029 	cmplti      	r0, 42
180041c2:	0c27      	bf      	0x18004210	// 18004210 <pin_func+0xe8>
180041c4:	e4601018 	subi      	r3, r0, 25
180041c8:	3b03      	cmphsi      	r3, 4
180041ca:	0bc4      	bt      	0x18004152	// 18004152 <pin_func+0x2a>
    switch (dev_id) {
180041cc:	385a      	cmpnei      	r0, 26
180041ce:	e8400254 	bf      	0x18004676	// 18004676 <pin_func+0x54e>
180041d2:	385b      	cmpnei      	r0, 27
180041d4:	08cd      	bt      	0x1800436e	// 1800436e <pin_func+0x246>
            if (request) {
180041d6:	e901026b 	bez      	r1, 0x180046ac	// 180046ac <pin_func+0x584>
                gpio_iomap_inout(PIN_IIC2_SCL, GPIO_IOMAP_IN_SPI2_SCK_IN, GPIO_IOMAP_OUT_SPI2_SCK_OUT);
180041da:	322e      	movi      	r2, 46
180041dc:	3125      	movi      	r1, 37
180041de:	3022      	movi      	r0, 34
180041e0:	e3ffff8a 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
                gpio_iomap_inout(PIN_IIC2_SDA, GPIO_IOMAP_IN_SPI2_IO0_IN, GPIO_IOMAP_OUT_SPI2_IO0_OUT);
180041e4:	322f      	movi      	r2, 47
180041e6:	3126      	movi      	r1, 38
180041e8:	3023      	movi      	r0, 35
180041ea:	e3ffff85 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
                gpio_driver_strength(PIN_IIC2_SCL, GPIO_DS_28MA);
180041ee:	3103      	movi      	r1, 3
180041f0:	3022      	movi      	r0, 34
180041f2:	e3ffff19 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PIN_IIC2_SDA, GPIO_DS_28MA);			
180041f6:	3103      	movi      	r1, 3
180041f8:	3023      	movi      	r0, 35
180041fa:	e3ffff15 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_set_mode(PIN_IIC2_SCL, GPIO_OPENDRAIN_PULL_UP, GPIO_PULL_LEVEL_4_7K);
180041fe:	3201      	movi      	r2, 1
18004200:	3104      	movi      	r1, 4
18004202:	3022      	movi      	r0, 34
18004204:	e3fff76c 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_mode(PIN_IIC2_SDA, GPIO_OPENDRAIN_PULL_UP, GPIO_PULL_LEVEL_4_7K);
18004208:	3201      	movi      	r2, 1
1800420a:	3104      	movi      	r1, 4
1800420c:	3023      	movi      	r0, 35
1800420e:	04d3      	br      	0x180043b4	// 180043b4 <pin_func+0x28c>
    switch (dev_id) {
18004210:	eb20002d 	cmplti      	r0, 46
18004214:	0888      	bt      	0x18004324	// 18004324 <pin_func+0x1fc>
18004216:	eb400035 	cmpnei      	r0, 53
1800421a:	0b9c      	bt      	0x18004152	// 18004152 <pin_func+0x2a>
            if (request) {
1800421c:	e9010102 	bez      	r1, 0x18004420	// 18004420 <pin_func+0x2f8>
                gpio_set_altnt_func(PIN_GMAC_RMII_REF_CLKIN, 0);
18004220:	3100      	movi      	r1, 0
18004222:	301e      	movi      	r0, 30
18004224:	e3ffff1a 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PIN_GMAC_RMII_RXD0, 0);
18004228:	3100      	movi      	r1, 0
1800422a:	301c      	movi      	r0, 28
1800422c:	e3ffff16 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PIN_GMAC_RMII_RXD1, 0);
18004230:	3100      	movi      	r1, 0
18004232:	301d      	movi      	r0, 29
18004234:	e3ffff12 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PIN_GMAC_RMII_TXD0, 0);
18004238:	3100      	movi      	r1, 0
1800423a:	301f      	movi      	r0, 31
1800423c:	e3ffff0e 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PIN_GMAC_RMII_TXD1, 0);
18004240:	3100      	movi      	r1, 0
18004242:	3020      	movi      	r0, 32
18004244:	e3ffff0a 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PIN_GMAC_RMII_CRS_DV, 0);
18004248:	3100      	movi      	r1, 0
1800424a:	3022      	movi      	r0, 34
1800424c:	e3ffff06 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PIN_GMAC_RMII_TX_EN, 0);
18004250:	3100      	movi      	r1, 0
18004252:	3021      	movi      	r0, 33
18004254:	e3ffff02 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_dir(PIN_GMAC_RMII_MDIO, GPIO_DIR_OUTPUT);
18004258:	3101      	movi      	r1, 1
1800425a:	3024      	movi      	r0, 36
1800425c:	e3fff756 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_GMAC_RMII_MDC, GPIO_DIR_OUTPUT);
18004260:	3101      	movi      	r1, 1
                gpio_set_dir(PIN_GMAC_RMII_MDC, GPIO_DIR_INPUT);
18004262:	3025      	movi      	r0, 37
18004264:	04ba      	br      	0x180043d8	// 180043d8 <pin_func+0x2b0>
    switch (dev_id) {
18004266:	eb20005c 	cmplti      	r0, 93
1800426a:	0c52      	bf      	0x1800430e	// 1800430e <pin_func+0x1e6>
1800426c:	eb200058 	cmplti      	r0, 89
18004270:	0c5a      	bf      	0x18004324	// 18004324 <pin_func+0x1fc>
18004272:	eb40004b 	cmpnei      	r0, 75
18004276:	e8400360 	bf      	0x18004936	// 18004936 <pin_func+0x80e>
1800427a:	eb20004b 	cmplti      	r0, 76
1800427e:	0c10      	bf      	0x1800429e	// 1800429e <pin_func+0x176>
18004280:	eb400041 	cmpnei      	r0, 65
18004284:	e84004c4 	bf      	0x18004c0c	// 18004c0c <pin_func+0xae4>
18004288:	eb40004a 	cmpnei      	r0, 74
1800428c:	0b63      	bt      	0x18004152	// 18004152 <pin_func+0x2a>
            if (request) {
1800428e:	e9010247 	bez      	r1, 0x1800471c	// 1800471c <pin_func+0x5f4>
                if (request == 2) {
18004292:	3942      	cmpnei      	r1, 2
18004294:	0b5f      	bt      	0x18004152	// 18004152 <pin_func+0x2a>
                    req_cs1 = 1;
18004296:	007b      	lrw      	r3, 0x20001b9c	// 18004624 <pin_func+0x4fc>
18004298:	3201      	movi      	r2, 1
1800429a:	b340      	st.w      	r2, (r3, 0x0)
1800429c:	075b      	br      	0x18004152	// 18004152 <pin_func+0x2a>
    switch (dev_id) {
1800429e:	eb40004d 	cmpnei      	r0, 77
180042a2:	0c66      	bf      	0x1800436e	// 1800436e <pin_func+0x246>
180042a4:	eb20004c 	cmplti      	r0, 77
180042a8:	e8600242 	bt      	0x1800472c	// 1800472c <pin_func+0x604>
180042ac:	eb400051 	cmpnei      	r0, 81
180042b0:	0b51      	bt      	0x18004152	// 18004152 <pin_func+0x2a>
                gpio_set_altnt_func(PIN_LED_SEG0, GPIO_AF_0);     //seg0
180042b2:	3100      	movi      	r1, 0
180042b4:	3004      	movi      	r0, 4
            if (request) {
180042b6:	e90402a0 	bez      	r4, 0x180047f6	// 180047f6 <pin_func+0x6ce>
                gpio_set_altnt_func(PIN_LED_SEG0, GPIO_AF_0);     //seg0
180042ba:	e3fffecf 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PIN_LED_SEG1, GPIO_AF_0);     //seg1
180042be:	3100      	movi      	r1, 0
180042c0:	3005      	movi      	r0, 5
180042c2:	e3fffecb 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PIN_LED_SEG2, GPIO_AF_0);     //seg2
180042c6:	3100      	movi      	r1, 0
180042c8:	3006      	movi      	r0, 6
180042ca:	e3fffec7 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PIN_LED_SEG3, GPIO_AF_0);     //seg3
180042ce:	3100      	movi      	r1, 0
180042d0:	3007      	movi      	r0, 7
180042d2:	e3fffec3 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PIN_LED_SEG4, GPIO_AF_0);     //seg4
180042d6:	3100      	movi      	r1, 0
180042d8:	3008      	movi      	r0, 8
180042da:	e3fffebf 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PIN_LED_SEG5, GPIO_AF_0);    //seg5
180042de:	3100      	movi      	r1, 0
180042e0:	300b      	movi      	r0, 11
180042e2:	e3fffebb 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PIN_LED_SEG6, GPIO_AF_0);    //seg6
180042e6:	3100      	movi      	r1, 0
180042e8:	300d      	movi      	r0, 13
180042ea:	e3fffeb7 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PIN_LED_SEG7, GPIO_AF_0);    //seg7
180042ee:	3100      	movi      	r1, 0
180042f0:	300e      	movi      	r0, 14
180042f2:	e3fffeb3 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PIN_LED_COM0,  GPIO_AF_0);    //com0
180042f6:	3100      	movi      	r1, 0
180042f8:	3003      	movi      	r0, 3
180042fa:	e3fffeaf 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PIN_LED_COM1,  GPIO_AF_0);    //com1
180042fe:	3100      	movi      	r1, 0
18004300:	3002      	movi      	r0, 2
18004302:	e3fffeab 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PIN_LED_COM2,  GPIO_AF_0);    //com2
18004306:	3100      	movi      	r1, 0
18004308:	3001      	movi      	r0, 1
1800430a:	e8000205 	br      	0x18004714	// 18004714 <pin_func+0x5ec>
    switch (dev_id) {
1800430e:	eb200075 	cmplti      	r0, 118
18004312:	0c23      	bf      	0x18004358	// 18004358 <pin_func+0x230>
18004314:	eb200073 	cmplti      	r0, 116
18004318:	e84002e6 	bf      	0x180048e4	// 180048e4 <pin_func+0x7bc>
1800431c:	e460106c 	subi      	r3, r0, 109
18004320:	3b05      	cmphsi      	r3, 6
18004322:	0b18      	bt      	0x18004152	// 18004152 <pin_func+0x2a>
    switch (dev_id) {
18004324:	eb46002c 	cmpnei      	r6, 44
18004328:	e84002b9 	bf      	0x1800489a	// 1800489a <pin_func+0x772>
1800432c:	eb26002c 	cmplti      	r6, 45
18004330:	e8400284 	bf      	0x18004838	// 18004838 <pin_func+0x710>
18004334:	eb46002a 	cmpnei      	r6, 42
18004338:	e8400292 	bf      	0x1800485c	// 1800485c <pin_func+0x734>
1800433c:	eb46002b 	cmpnei      	r6, 43
18004340:	0817      	bt      	0x1800436e	// 1800436e <pin_func+0x246>
            switch (request) {
18004342:	3c41      	cmpnei      	r4, 1
18004344:	e84002a4 	bf      	0x1800488c	// 1800488c <pin_func+0x764>
18004348:	3c42      	cmpnei      	r4, 2
1800434a:	e84002a4 	bf      	0x18004892	// 18004892 <pin_func+0x76a>
1800434e:	e9240010 	bnez      	r4, 0x1800436e	// 1800436e <pin_func+0x246>
                    gpio_set_dir(PIN_PWM_CHANNEL_1, GPIO_DIR_INPUT);
18004352:	6c53      	mov      	r1, r4
18004354:	3016      	movi      	r0, 22
18004356:	058b      	br      	0x1800466c	// 1800466c <pin_func+0x544>
    switch (dev_id) {
18004358:	e460107f 	subi      	r3, r0, 128
1800435c:	3b01      	cmphsi      	r3, 2
    switch (dev_id) {
1800435e:	0c08      	bf      	0x1800436e	// 1800436e <pin_func+0x246>
18004360:	06f9      	br      	0x18004152	// 18004152 <pin_func+0x2a>
    switch (dev_id) {
18004362:	3e42      	cmpnei      	r6, 2
18004364:	0c32      	bf      	0x180043c8	// 180043c8 <pin_func+0x2a0>
18004366:	3e22      	cmplti      	r6, 3
18004368:	0c05      	bf      	0x18004372	// 18004372 <pin_func+0x24a>
1800436a:	3e41      	cmpnei      	r6, 1
1800436c:	0c17      	bf      	0x1800439a	// 1800439a <pin_func+0x272>
            ret = EINVAL;
1800436e:	3516      	movi      	r5, 22
18004370:	06f2      	br      	0x18004154	// 18004154 <pin_func+0x2c>
    switch (dev_id) {
18004372:	3e45      	cmpnei      	r6, 5
18004374:	0c35      	bf      	0x180043de	// 180043de <pin_func+0x2b6>
18004376:	3e46      	cmpnei      	r6, 6
18004378:	0bfb      	bt      	0x1800436e	// 1800436e <pin_func+0x246>
            if (request) {
1800437a:	e904004c 	bez      	r4, 0x18004412	// 18004412 <pin_func+0x2ea>
                SYSCTRL_REG_OPT(SYSCTRL->IOFUNCMASK0 |= BIT(31));
1800437e:	ea224002 	movih      	r2, 16386
                gpio_iomap_output(PIN_UART5_TX, GPIO_IOMAP_OUT_IIS1_MCLK_OUT);
18004382:	313c      	movi      	r1, 60
                SYSCTRL_REG_OPT(SYSCTRL->IOFUNCMASK0 |= BIT(31));
18004384:	d8622060 	ld.w      	r3, (r2, 0x180)
18004388:	3bbf      	bseti      	r3, 31
1800438a:	dc622060 	st.w      	r3, (r2, 0x180)
                gpio_iomap_output(PIN_UART5_TX, GPIO_IOMAP_OUT_IIS1_MCLK_OUT);
1800438e:	3020      	movi      	r0, 32
18004390:	e3fffe7e 	bsr      	0x1800408c	// 1800408c <gpio_iomap_output>
                gpio_iomap_input(PIN_UART5_RX, GPIO_IOMAP_IN_IIS1_MCLK_IN__UART5_IN__LCD_D22_IN_MASK2_9);
18004394:	3135      	movi      	r1, 53
18004396:	3021      	movi      	r0, 33
18004398:	0433      	br      	0x180043fe	// 180043fe <pin_func+0x2d6>
            if (request) {
1800439a:	e9040010 	bez      	r4, 0x180043ba	// 180043ba <pin_func+0x292>
                gpio_iomap_output(PIN_UART0_TX, GPIO_IOMAP_OUT_UART0_TX);
1800439e:	310f      	movi      	r1, 15
180043a0:	300c      	movi      	r0, 12
180043a2:	e3fffe75 	bsr      	0x1800408c	// 1800408c <gpio_iomap_output>
                gpio_iomap_input(PIN_UART0_RX, GPIO_IOMAP_IN_UART0_IN);
180043a6:	3111      	movi      	r1, 17
180043a8:	30ff      	movi      	r0, 255
180043aa:	e3fffe8b 	bsr      	0x180040c0	// 180040c0 <gpio_iomap_input>
                gpio_set_mode(PIN_UART0_RX, GPIO_PULL_UP, GPIO_PULL_LEVEL_100K);
180043ae:	3202      	movi      	r2, 2
180043b0:	6c5b      	mov      	r1, r6
180043b2:	30ff      	movi      	r0, 255
                gpio_set_mode(PIN_IIC1_SDA, GPIO_OPENDRAIN_PULL_UP, GPIO_PULL_LEVEL_4_7K);
180043b4:	e3fff694 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
180043b8:	06cd      	br      	0x18004152	// 18004152 <pin_func+0x2a>
                gpio_set_dir(PIN_UART0_TX, GPIO_DIR_INPUT);
180043ba:	6c53      	mov      	r1, r4
180043bc:	300c      	movi      	r0, 12
                gpio_set_dir(PIN_SDH_DAT2, GPIO_DIR_INPUT);
180043be:	e3fff6a5 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_SDH_DAT3, GPIO_DIR_INPUT);
180043c2:	6c53      	mov      	r1, r4
180043c4:	30ff      	movi      	r0, 255
180043c6:	0409      	br      	0x180043d8	// 180043d8 <pin_func+0x2b0>
            if (request) {
180043c8:	e924fec5 	bnez      	r4, 0x18004152	// 18004152 <pin_func+0x2a>
                gpio_set_dir(PIN_UART1_RX, GPIO_DIR_INPUT);
180043cc:	6c53      	mov      	r1, r4
180043ce:	3027      	movi      	r0, 39
180043d0:	e3fff69c 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_UART1_TX, GPIO_DIR_INPUT);
180043d4:	6c53      	mov      	r1, r4
180043d6:	301a      	movi      	r0, 26
                gpio_set_dir(PIN_UART4_RX, GPIO_DIR_INPUT);
180043d8:	e3fff698 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
180043dc:	06bb      	br      	0x18004152	// 18004152 <pin_func+0x2a>
            if (request) {
180043de:	e9040013 	bez      	r4, 0x18004404	// 18004404 <pin_func+0x2dc>
                SYSCTRL_REG_OPT(SYSCTRL->IOFUNCMASK0 |= BIT(13));
180043e2:	ea224002 	movih      	r2, 16386
                gpio_iomap_output(PIN_UART4_TX, GPIO_IOMAP_OUT_CLK_TO_IO);
180043e6:	3140      	movi      	r1, 64
                SYSCTRL_REG_OPT(SYSCTRL->IOFUNCMASK0 |= BIT(13));
180043e8:	d8622060 	ld.w      	r3, (r2, 0x180)
180043ec:	ec632000 	ori      	r3, r3, 8192
180043f0:	dc622060 	st.w      	r3, (r2, 0x180)
                gpio_iomap_output(PIN_UART4_TX, GPIO_IOMAP_OUT_CLK_TO_IO);
180043f4:	30ff      	movi      	r0, 255
180043f6:	e3fffe4b 	bsr      	0x1800408c	// 1800408c <gpio_iomap_output>
                gpio_iomap_input(PIN_UART4_RX, GPIO_IOMAP_IN_UART4_IN);
180043fa:	3116      	movi      	r1, 22
180043fc:	3003      	movi      	r0, 3
                    gpio_iomap_input(PIN_CAPTURE_CHANNEL_0, GPIO_IOMAP_IN_TMR0_CAP_IN);
180043fe:	e3fffe61 	bsr      	0x180040c0	// 180040c0 <gpio_iomap_input>
18004402:	06a8      	br      	0x18004152	// 18004152 <pin_func+0x2a>
                gpio_set_dir(PIN_UART4_TX, GPIO_DIR_INPUT);
18004404:	6c53      	mov      	r1, r4
18004406:	30ff      	movi      	r0, 255
18004408:	e3fff680 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_UART4_RX, GPIO_DIR_INPUT);
1800440c:	6c53      	mov      	r1, r4
1800440e:	3003      	movi      	r0, 3
18004410:	07e4      	br      	0x180043d8	// 180043d8 <pin_func+0x2b0>
                gpio_set_dir(PIN_UART5_TX, GPIO_DIR_INPUT);
18004412:	6c53      	mov      	r1, r4
18004414:	3020      	movi      	r0, 32
18004416:	e3fff679 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                    gpio_set_dir(PIN_PWM_CHANNEL_3, GPIO_DIR_INPUT);
1800441a:	6c53      	mov      	r1, r4
1800441c:	3021      	movi      	r0, 33
1800441e:	07dd      	br      	0x180043d8	// 180043d8 <pin_func+0x2b0>
                gpio_set_dir(PIN_GMAC_RMII_REF_CLKIN, GPIO_DIR_INPUT);
18004420:	301e      	movi      	r0, 30
18004422:	e3fff673 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_GMAC_RMII_RXD0, GPIO_DIR_INPUT);
18004426:	6c53      	mov      	r1, r4
18004428:	301c      	movi      	r0, 28
1800442a:	e3fff66f 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_GMAC_RMII_RXD1, GPIO_DIR_INPUT);
1800442e:	6c53      	mov      	r1, r4
18004430:	301d      	movi      	r0, 29
18004432:	e3fff66b 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_GMAC_RMII_TXD0, GPIO_DIR_INPUT);
18004436:	6c53      	mov      	r1, r4
18004438:	301f      	movi      	r0, 31
1800443a:	e3fff667 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_GMAC_RMII_TXD1, GPIO_DIR_INPUT);
1800443e:	6c53      	mov      	r1, r4
18004440:	3020      	movi      	r0, 32
18004442:	e3fff663 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_GMAC_RMII_CRS_DV, GPIO_DIR_INPUT);
18004446:	6c53      	mov      	r1, r4
18004448:	3022      	movi      	r0, 34
1800444a:	e3fff65f 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_GMAC_RMII_TX_EN, GPIO_DIR_INPUT);
1800444e:	6c53      	mov      	r1, r4
18004450:	3021      	movi      	r0, 33
18004452:	e3fff65b 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_GMAC_RMII_MDIO, GPIO_DIR_INPUT);
18004456:	6c53      	mov      	r1, r4
18004458:	3024      	movi      	r0, 36
1800445a:	e3fff657 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_GMAC_RMII_MDC, GPIO_DIR_INPUT);
1800445e:	6c53      	mov      	r1, r4
18004460:	0701      	br      	0x18004262	// 18004262 <pin_func+0x13a>
            if (request) {
18004462:	e9010075 	bez      	r1, 0x1800454c	// 1800454c <pin_func+0x424>
                gpio_set_altnt_func(PIN_SDCLK, 0);
18004466:	3100      	movi      	r1, 0
18004468:	3019      	movi      	r0, 25
1800446a:	e3fffdf7 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PIN_SDCMD, 0);
1800446e:	3100      	movi      	r1, 0
18004470:	3018      	movi      	r0, 24
18004472:	e3fffdf3 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_mode(PIN_SDCMD, GPIO_PULL_UP, GPIO_PULL_LEVEL_100K);
18004476:	3202      	movi      	r2, 2
18004478:	3101      	movi      	r1, 1
1800447a:	3018      	movi      	r0, 24
1800447c:	e3fff630 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_mode(PIN_SDCLK, GPIO_PULL_UP, GPIO_PULL_LEVEL_100K);
18004480:	3202      	movi      	r2, 2
18004482:	3101      	movi      	r1, 1
18004484:	3019      	movi      	r0, 25
18004486:	e3fff62b 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_altnt_func(PIN_SDDAT0, 0);
1800448a:	3100      	movi      	r1, 0
1800448c:	301a      	movi      	r0, 26
1800448e:	e3fffde5 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_mode(PIN_SDDAT0, GPIO_PULL_UP, GPIO_PULL_LEVEL_100K);
18004492:	3202      	movi      	r2, 2
18004494:	3101      	movi      	r1, 1
18004496:	301a      	movi      	r0, 26
18004498:	e3fff622 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_altnt_func(PIN_SDDAT1, 0);
1800449c:	3100      	movi      	r1, 0
1800449e:	301b      	movi      	r0, 27
180044a0:	e3fffddc 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_mode(PIN_SDDAT1, GPIO_PULL_UP, GPIO_PULL_LEVEL_100K);
180044a4:	3202      	movi      	r2, 2
180044a6:	3101      	movi      	r1, 1
180044a8:	301b      	movi      	r0, 27
180044aa:	e3fff619 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_altnt_func(PIN_SDDAT2, 0);
180044ae:	3100      	movi      	r1, 0
180044b0:	3016      	movi      	r0, 22
180044b2:	e3fffdd3 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_mode(PIN_SDDAT2, GPIO_PULL_UP, GPIO_PULL_LEVEL_100K);
180044b6:	3202      	movi      	r2, 2
180044b8:	3101      	movi      	r1, 1
180044ba:	3016      	movi      	r0, 22
180044bc:	e3fff610 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_altnt_func(PIN_SDDAT3, 0);
180044c0:	3100      	movi      	r1, 0
180044c2:	3017      	movi      	r0, 23
180044c4:	e3fffdca 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_mode(PIN_SDDAT3, GPIO_PULL_UP, GPIO_PULL_LEVEL_100K);
180044c8:	3202      	movi      	r2, 2
180044ca:	3101      	movi      	r1, 1
180044cc:	3017      	movi      	r0, 23
180044ce:	e3fff607 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_ioctl(PIN_SDCMD, GPIO_INPUT_DELAY_ON_OFF, 1, 0);
180044d2:	3300      	movi      	r3, 0
180044d4:	6c4f      	mov      	r1, r3
180044d6:	3201      	movi      	r2, 1
180044d8:	3018      	movi      	r0, 24
180044da:	e3fff629 	bsr      	0x1800312c	// 1800312c <gpio_ioctl>
                gpio_ioctl(PIN_SDCLK, GPIO_INPUT_DELAY_ON_OFF, 1, 0);
180044de:	3300      	movi      	r3, 0
180044e0:	6c4f      	mov      	r1, r3
180044e2:	3201      	movi      	r2, 1
180044e4:	3019      	movi      	r0, 25
180044e6:	e3fff623 	bsr      	0x1800312c	// 1800312c <gpio_ioctl>
                gpio_ioctl(PIN_SDDAT0, GPIO_INPUT_DELAY_ON_OFF, 1, 0);
180044ea:	3300      	movi      	r3, 0
180044ec:	6c4f      	mov      	r1, r3
180044ee:	3201      	movi      	r2, 1
180044f0:	301a      	movi      	r0, 26
180044f2:	e3fff61d 	bsr      	0x1800312c	// 1800312c <gpio_ioctl>
                gpio_ioctl(PIN_SDDAT1, GPIO_INPUT_DELAY_ON_OFF, 1, 0);
180044f6:	3300      	movi      	r3, 0
180044f8:	6c4f      	mov      	r1, r3
180044fa:	3201      	movi      	r2, 1
180044fc:	301b      	movi      	r0, 27
180044fe:	e3fff617 	bsr      	0x1800312c	// 1800312c <gpio_ioctl>
                gpio_ioctl(PIN_SDDAT2, GPIO_INPUT_DELAY_ON_OFF, 1, 0);
18004502:	3300      	movi      	r3, 0
18004504:	6c4f      	mov      	r1, r3
18004506:	3201      	movi      	r2, 1
18004508:	3016      	movi      	r0, 22
1800450a:	e3fff611 	bsr      	0x1800312c	// 1800312c <gpio_ioctl>
                gpio_ioctl(PIN_SDDAT3, GPIO_INPUT_DELAY_ON_OFF, 1, 0);
1800450e:	3300      	movi      	r3, 0
18004510:	6c4f      	mov      	r1, r3
18004512:	3201      	movi      	r2, 1
18004514:	3017      	movi      	r0, 23
18004516:	e3fff60b 	bsr      	0x1800312c	// 1800312c <gpio_ioctl>
                gpio_driver_strength(PIN_SDCLK,  GPIO_DS_12MA);
1800451a:	3101      	movi      	r1, 1
1800451c:	3019      	movi      	r0, 25
1800451e:	e3fffd83 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PIN_SDCMD,  GPIO_DS_12MA);
18004522:	3101      	movi      	r1, 1
18004524:	3018      	movi      	r0, 24
18004526:	e3fffd7f 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PIN_SDDAT0, GPIO_DS_12MA);
1800452a:	3101      	movi      	r1, 1
1800452c:	301a      	movi      	r0, 26
1800452e:	e3fffd7b 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PIN_SDDAT1, GPIO_DS_12MA);
18004532:	3101      	movi      	r1, 1
18004534:	301b      	movi      	r0, 27
18004536:	e3fffd77 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PIN_SDDAT2, GPIO_DS_12MA);
1800453a:	3101      	movi      	r1, 1
1800453c:	3016      	movi      	r0, 22
1800453e:	e3fffd73 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PIN_SDDAT3, GPIO_DS_12MA);
18004542:	3101      	movi      	r1, 1
18004544:	3017      	movi      	r0, 23
				gpio_driver_strength(LCD_D7, GPIO_DS_12MA);
18004546:	e3fffd6f 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
1800454a:	0604      	br      	0x18004152	// 18004152 <pin_func+0x2a>
                gpio_set_dir(PIN_SDCLK, GPIO_DIR_INPUT);
1800454c:	3019      	movi      	r0, 25
1800454e:	e3fff5dd 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_SDCMD, GPIO_DIR_INPUT);
18004552:	6c53      	mov      	r1, r4
18004554:	3018      	movi      	r0, 24
18004556:	e3fff5d9 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_mode(PIN_SDCMD, GPIO_PULL_UP, GPIO_PULL_LEVEL_NONE);
1800455a:	6c93      	mov      	r2, r4
1800455c:	3101      	movi      	r1, 1
1800455e:	3018      	movi      	r0, 24
18004560:	e3fff5be 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_dir(PIN_SDDAT0, GPIO_DIR_INPUT);
18004564:	6c53      	mov      	r1, r4
18004566:	301a      	movi      	r0, 26
18004568:	e3fff5d0 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_mode(PIN_SDDAT0, GPIO_PULL_UP, GPIO_PULL_LEVEL_NONE);
1800456c:	6c93      	mov      	r2, r4
1800456e:	3101      	movi      	r1, 1
18004570:	301a      	movi      	r0, 26
18004572:	e3fff5b5 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_dir(PIN_SDDAT1, GPIO_DIR_INPUT);
18004576:	6c53      	mov      	r1, r4
18004578:	301b      	movi      	r0, 27
1800457a:	e3fff5c7 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_mode(PIN_SDDAT1, GPIO_PULL_UP, GPIO_PULL_LEVEL_NONE);
1800457e:	6c93      	mov      	r2, r4
18004580:	3101      	movi      	r1, 1
18004582:	301b      	movi      	r0, 27
18004584:	e3fff5ac 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_dir(PIN_SDDAT2, GPIO_DIR_INPUT);
18004588:	6c53      	mov      	r1, r4
1800458a:	3016      	movi      	r0, 22
1800458c:	e3fff5be 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_mode(PIN_SDDAT2, GPIO_PULL_UP, GPIO_PULL_LEVEL_NONE);
18004590:	6c93      	mov      	r2, r4
18004592:	3101      	movi      	r1, 1
18004594:	3016      	movi      	r0, 22
18004596:	e3fff5a3 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_dir(PIN_SDDAT3, GPIO_DIR_INPUT);
1800459a:	6c53      	mov      	r1, r4
1800459c:	3017      	movi      	r0, 23
1800459e:	e3fff5b5 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_mode(PIN_SDDAT3, GPIO_PULL_UP, GPIO_PULL_LEVEL_NONE);
180045a2:	6c93      	mov      	r2, r4
180045a4:	3101      	movi      	r1, 1
180045a6:	3017      	movi      	r0, 23
180045a8:	e3fff59a 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_ioctl(PIN_SDCMD, GPIO_INPUT_DELAY_ON_OFF, 0, 0);
180045ac:	6cd3      	mov      	r3, r4
180045ae:	6c93      	mov      	r2, r4
180045b0:	6c53      	mov      	r1, r4
180045b2:	3018      	movi      	r0, 24
180045b4:	e3fff5bc 	bsr      	0x1800312c	// 1800312c <gpio_ioctl>
                gpio_ioctl(PIN_SDCLK, GPIO_INPUT_DELAY_ON_OFF, 0, 0);
180045b8:	6cd3      	mov      	r3, r4
180045ba:	6c93      	mov      	r2, r4
180045bc:	6c53      	mov      	r1, r4
180045be:	3019      	movi      	r0, 25
180045c0:	e3fff5b6 	bsr      	0x1800312c	// 1800312c <gpio_ioctl>
                gpio_ioctl(PIN_SDDAT0, GPIO_INPUT_DELAY_ON_OFF, 0, 0);
180045c4:	6cd3      	mov      	r3, r4
180045c6:	6c93      	mov      	r2, r4
180045c8:	6c53      	mov      	r1, r4
180045ca:	301a      	movi      	r0, 26
180045cc:	e3fff5b0 	bsr      	0x1800312c	// 1800312c <gpio_ioctl>
                gpio_ioctl(PIN_SDDAT1, GPIO_INPUT_DELAY_ON_OFF, 0, 0);
180045d0:	6cd3      	mov      	r3, r4
180045d2:	6c93      	mov      	r2, r4
180045d4:	6c53      	mov      	r1, r4
180045d6:	301b      	movi      	r0, 27
180045d8:	e3fff5aa 	bsr      	0x1800312c	// 1800312c <gpio_ioctl>
                gpio_ioctl(PIN_SDDAT2, GPIO_INPUT_DELAY_ON_OFF, 0, 0);
180045dc:	6cd3      	mov      	r3, r4
180045de:	6c93      	mov      	r2, r4
180045e0:	6c53      	mov      	r1, r4
180045e2:	3016      	movi      	r0, 22
180045e4:	e3fff5a4 	bsr      	0x1800312c	// 1800312c <gpio_ioctl>
                gpio_ioctl(PIN_SDDAT3, GPIO_INPUT_DELAY_ON_OFF, 0, 0);
180045e8:	6cd3      	mov      	r3, r4
180045ea:	6c93      	mov      	r2, r4
180045ec:	6c53      	mov      	r1, r4
180045ee:	3017      	movi      	r0, 23
                    gpio_ioctl(adc_pin, GPIO_GENERAL_ANALOG, 0, 0);
180045f0:	e3fff59e 	bsr      	0x1800312c	// 1800312c <gpio_ioctl>
180045f4:	e800fdaf 	br      	0x18004152	// 18004152 <pin_func+0x2a>
    switch (dev_id) {
180045f8:	3e31      	cmplti      	r6, 18
180045fa:	06b2      	br      	0x1800435e	// 1800435e <pin_func+0x236>
                gpio_set_dir(PIN_SPI0_CS, GPIO_DIR_INPUT);
180045fc:	6c53      	mov      	r1, r4
180045fe:	3008      	movi      	r0, 8
18004600:	e3fff584 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_SPI0_CLK, GPIO_DIR_INPUT);
18004604:	6c53      	mov      	r1, r4
18004606:	3002      	movi      	r0, 2
18004608:	e3fff580 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_SPI0_IO0, GPIO_DIR_INPUT);
1800460c:	6c53      	mov      	r1, r4
1800460e:	6c13      	mov      	r0, r4
                gpio_set_dir(PIN_SDH_DAT0, GPIO_DIR_INPUT);
18004610:	e3fff57c 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_SDH_DAT1, GPIO_DIR_INPUT);
18004614:	6c53      	mov      	r1, r4
18004616:	30ff      	movi      	r0, 255
18004618:	e3fff578 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_SDH_DAT2, GPIO_DIR_INPUT);
1800461c:	6c53      	mov      	r1, r4
1800461e:	30ff      	movi      	r0, 255
18004620:	06cf      	br      	0x180043be	// 180043be <pin_func+0x296>
18004622:	0000      	.short	0x0000
18004624:	20001b9c 	.long	0x20001b9c
            if (request) {
18004628:	e9040018 	bez      	r4, 0x18004658	// 18004658 <pin_func+0x530>
                gpio_iomap_inout(PIN_SPI1_CS, GPIO_IOMAP_IN_SPI1_NSS_IN__LCD_D11_IN_MASK1_30, GPIO_IOMAP_OUT_SPI1_NSS_OUT);
1800462c:	3227      	movi      	r2, 39
1800462e:	311e      	movi      	r1, 30
18004630:	3010      	movi      	r0, 16
18004632:	e3fffd61 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
                gpio_iomap_inout(PIN_SPI1_CLK, GPIO_IOMAP_IN_SPI1_SCK_IN, GPIO_IOMAP_OUT_SPI1_SCK_OUT);
18004636:	3228      	movi      	r2, 40
18004638:	311f      	movi      	r1, 31
1800463a:	3011      	movi      	r0, 17
1800463c:	e3fffd5c 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
                gpio_iomap_inout(PIN_SPI1_IO0, GPIO_IOMAP_IN_SPI1_IO0_IN, GPIO_IOMAP_OUT_SPI1_IO0_OUT);
18004640:	3229      	movi      	r2, 41
18004642:	3120      	movi      	r1, 32
18004644:	3012      	movi      	r0, 18
18004646:	e3fffd57 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
                gpio_iomap_inout(PIN_SPI1_IO1, GPIO_IOMAP_IN_SPI1_IO1_IN__LCD_D12_IN_MASK1_31, GPIO_IOMAP_OUT_SPI1_IO1_OUT);
1800464a:	322a      	movi      	r2, 42
1800464c:	3121      	movi      	r1, 33
1800464e:	3013      	movi      	r0, 19
                    gpio_iomap_inout(PIN_SDH_DAT3, GPIO_IOMAP_IN_SDHOST_DAT3_IN, GPIO_IOMAP_OUT_SDHOST_DAT3_OUT);
18004650:	e3fffd52 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
18004654:	e800fd7f 	br      	0x18004152	// 18004152 <pin_func+0x2a>
                gpio_set_dir(PIN_SPI1_CS, GPIO_DIR_INPUT);
18004658:	6c53      	mov      	r1, r4
1800465a:	3010      	movi      	r0, 16
1800465c:	e3fff556 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_SPI1_CLK, GPIO_DIR_INPUT);
18004660:	6c53      	mov      	r1, r4
18004662:	3011      	movi      	r0, 17
18004664:	e3fff552 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_SPI1_IO0, GPIO_DIR_INPUT);
18004668:	6c53      	mov      	r1, r4
1800466a:	3012      	movi      	r0, 18
                    gpio_set_dir(PIN_PWM_CHANNEL_1, GPIO_DIR_INPUT);
1800466c:	e3fff54e 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                    gpio_set_dir(PIN_CAPTURE_CHANNEL_1, GPIO_DIR_INPUT);
18004670:	6c53      	mov      	r1, r4
18004672:	3013      	movi      	r0, 19
18004674:	06b2      	br      	0x180043d8	// 180043d8 <pin_func+0x2b0>
            if (request) {
18004676:	e9010015 	bez      	r1, 0x180046a0	// 180046a0 <pin_func+0x578>
                gpio_iomap_inout(PIN_IIC1_SCL, GPIO_IOMAP_IN_SPI1_SCK_IN, GPIO_IOMAP_OUT_SPI1_SCK_OUT);
1800467a:	3228      	movi      	r2, 40
1800467c:	311f      	movi      	r1, 31
1800467e:	300d      	movi      	r0, 13
18004680:	e3fffd3a 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
                gpio_iomap_inout(PIN_IIC1_SDA, GPIO_IOMAP_IN_SPI1_IO0_IN, GPIO_IOMAP_OUT_SPI1_IO0_OUT);
18004684:	3229      	movi      	r2, 41
18004686:	3120      	movi      	r1, 32
18004688:	300c      	movi      	r0, 12
1800468a:	e3fffd35 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
                gpio_set_mode(PIN_IIC1_SCL, GPIO_OPENDRAIN_PULL_UP, GPIO_PULL_LEVEL_4_7K);
1800468e:	3201      	movi      	r2, 1
18004690:	3104      	movi      	r1, 4
18004692:	300d      	movi      	r0, 13
18004694:	e3fff524 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_mode(PIN_IIC1_SDA, GPIO_OPENDRAIN_PULL_UP, GPIO_PULL_LEVEL_4_7K);
18004698:	3201      	movi      	r2, 1
1800469a:	3104      	movi      	r1, 4
1800469c:	300c      	movi      	r0, 12
1800469e:	068b      	br      	0x180043b4	// 180043b4 <pin_func+0x28c>
                gpio_set_dir(PIN_IIC1_SCL, GPIO_DIR_INPUT);
180046a0:	300d      	movi      	r0, 13
180046a2:	e3fff533 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_IIC1_SDA, GPIO_DIR_INPUT);
180046a6:	6c53      	mov      	r1, r4
180046a8:	300c      	movi      	r0, 12
180046aa:	0697      	br      	0x180043d8	// 180043d8 <pin_func+0x2b0>
                gpio_set_dir(PIN_IIC2_SCL, GPIO_DIR_INPUT);
180046ac:	3022      	movi      	r0, 34
180046ae:	e3fff52d 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_IIC2_SDA, GPIO_DIR_INPUT);
180046b2:	6c53      	mov      	r1, r4
180046b4:	3023      	movi      	r0, 35
180046b6:	0691      	br      	0x180043d8	// 180043d8 <pin_func+0x2b0>
            gpio_set_altnt_func(PIN_DVP_HSYNC, 1);
180046b8:	3101      	movi      	r1, 1
180046ba:	3017      	movi      	r0, 23
180046bc:	e3fffcce 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
            gpio_set_altnt_func(PIN_DVP_VSYNC, 1);
180046c0:	3101      	movi      	r1, 1
180046c2:	3016      	movi      	r0, 22
180046c4:	e3fffcca 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
            gpio_set_altnt_func(PIN_DVP_PCLK , 1);
180046c8:	3101      	movi      	r1, 1
180046ca:	301c      	movi      	r0, 28
180046cc:	e3fffcc6 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
            gpio_set_altnt_func(PIN_DVP_MCLK , 1);
180046d0:	3101      	movi      	r1, 1
180046d2:	3019      	movi      	r0, 25
180046d4:	e3fffcc2 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
            gpio_set_altnt_func(PIN_DVP_DATA0, 1);
180046d8:	3101      	movi      	r1, 1
180046da:	301e      	movi      	r0, 30
180046dc:	e3fffcbe 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
            gpio_set_altnt_func(PIN_DVP_DATA1, 1);
180046e0:	3101      	movi      	r1, 1
180046e2:	3020      	movi      	r0, 32
180046e4:	e3fffcba 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
            gpio_set_altnt_func(PIN_DVP_DATA2, 1);
180046e8:	3101      	movi      	r1, 1
180046ea:	3021      	movi      	r0, 33
180046ec:	e3fffcb6 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
            gpio_set_altnt_func(PIN_DVP_DATA3, 1);
180046f0:	3101      	movi      	r1, 1
180046f2:	301f      	movi      	r0, 31
180046f4:	e3fffcb2 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
            gpio_set_altnt_func(PIN_DVP_DATA4, 1);
180046f8:	3101      	movi      	r1, 1
180046fa:	301d      	movi      	r0, 29
180046fc:	e3fffcae 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
            gpio_set_altnt_func(PIN_DVP_DATA5, 1);
18004700:	3101      	movi      	r1, 1
18004702:	301b      	movi      	r0, 27
18004704:	e3fffcaa 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
            gpio_set_altnt_func(PIN_DVP_DATA6, 1);
18004708:	3101      	movi      	r1, 1
1800470a:	301a      	movi      	r0, 26
1800470c:	e3fffca6 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
            gpio_set_altnt_func(PIN_DVP_DATA7, 1);
18004710:	3101      	movi      	r1, 1
18004712:	3018      	movi      	r0, 24
                gpio_set_altnt_func(PIN_LED_COM2,  GPIO_AF_0);    //com2
18004714:	e3fffca2 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
18004718:	e800fd1d 	br      	0x18004152	// 18004152 <pin_func+0x2a>
                if (req_cs1) {
1800471c:	0166      	lrw      	r3, 0x20001b9c	// 18004a80 <pin_func+0x958>
1800471e:	9340      	ld.w      	r2, (r3, 0x0)
18004720:	e902fd19 	bez      	r2, 0x18004152	// 18004152 <pin_func+0x2a>
                    req_cs1 = 0;
18004724:	3500      	movi      	r5, 0
18004726:	b3a0      	st.w      	r5, (r3, 0x0)
18004728:	e800fd16 	br      	0x18004154	// 18004154 <pin_func+0x2c>
            if (request) {
1800472c:	e901005b 	bez      	r1, 0x180047e2	// 180047e2 <pin_func+0x6ba>
                gpio_set_mode(PIN_SDH_CLK, GPIO_PULL_UP, GPIO_PULL_LEVEL_4_7K);
18004730:	3201      	movi      	r2, 1
18004732:	6c4b      	mov      	r1, r2
18004734:	3024      	movi      	r0, 36
18004736:	e3fff4d3 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_mode(PIN_SDH_CMD, GPIO_PULL_UP, GPIO_PULL_LEVEL_4_7K);
1800473a:	3201      	movi      	r2, 1
1800473c:	6c4b      	mov      	r1, r2
1800473e:	3023      	movi      	r0, 35
18004740:	e3fff4ce 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_mode(PIN_SDH_DAT0, GPIO_PULL_UP, GPIO_PULL_LEVEL_4_7K);
18004744:	3201      	movi      	r2, 1
18004746:	6c4b      	mov      	r1, r2
18004748:	3022      	movi      	r0, 34
1800474a:	e3fff4c9 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_mode(PIN_SDH_DAT1, GPIO_PULL_UP, GPIO_PULL_LEVEL_4_7K);
1800474e:	3201      	movi      	r2, 1
18004750:	6c4b      	mov      	r1, r2
18004752:	30ff      	movi      	r0, 255
18004754:	e3fff4c4 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                if (request == 4) {
18004758:	3c44      	cmpnei      	r4, 4
1800475a:	080b      	bt      	0x18004770	// 18004770 <pin_func+0x648>
                    gpio_set_mode(PIN_SDH_DAT2, GPIO_PULL_UP, GPIO_PULL_LEVEL_4_7K);
1800475c:	3201      	movi      	r2, 1
1800475e:	6c4b      	mov      	r1, r2
18004760:	30ff      	movi      	r0, 255
18004762:	e3fff4bd 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                    gpio_set_mode(PIN_SDH_DAT3, GPIO_PULL_UP, GPIO_PULL_LEVEL_4_7K);
18004766:	3201      	movi      	r2, 1
18004768:	6c4b      	mov      	r1, r2
1800476a:	30ff      	movi      	r0, 255
1800476c:	e3fff4b8 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_driver_strength(PIN_SDH_CLK, GPIO_DS_12MA);
18004770:	3101      	movi      	r1, 1
18004772:	3024      	movi      	r0, 36
18004774:	e3fffc58 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PIN_SDH_CMD, GPIO_DS_12MA);
18004778:	3101      	movi      	r1, 1
1800477a:	3023      	movi      	r0, 35
1800477c:	e3fffc54 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PIN_SDH_DAT0, GPIO_DS_12MA);
18004780:	3101      	movi      	r1, 1
18004782:	3022      	movi      	r0, 34
18004784:	e3fffc50 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                if (request == 4) {
18004788:	3c44      	cmpnei      	r4, 4
1800478a:	080d      	bt      	0x180047a4	// 180047a4 <pin_func+0x67c>
                    gpio_driver_strength(PIN_SDH_DAT1, GPIO_DS_12MA);
1800478c:	3101      	movi      	r1, 1
1800478e:	30ff      	movi      	r0, 255
18004790:	e3fffc4a 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                    gpio_driver_strength(PIN_SDH_DAT2, GPIO_DS_12MA);
18004794:	3101      	movi      	r1, 1
18004796:	30ff      	movi      	r0, 255
18004798:	e3fffc46 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                    gpio_driver_strength(PIN_SDH_DAT3, GPIO_DS_12MA);
1800479c:	3101      	movi      	r1, 1
1800479e:	30ff      	movi      	r0, 255
180047a0:	e3fffc42 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_iomap_output(PIN_SDH_CLK, GPIO_IOMAP_OUT_SDHOST_SCLK_O);
180047a4:	3116      	movi      	r1, 22
180047a6:	3024      	movi      	r0, 36
180047a8:	e3fffc72 	bsr      	0x1800408c	// 1800408c <gpio_iomap_output>
                gpio_iomap_inout(PIN_SDH_CMD, GPIO_IOMAP_IN_SDHOST_CMD_IN, GPIO_IOMAP_OUT_SDHOST_CMD_OUT);
180047ac:	3233      	movi      	r2, 51
180047ae:	312c      	movi      	r1, 44
180047b0:	3023      	movi      	r0, 35
180047b2:	e3fffca1 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
                gpio_iomap_inout(PIN_SDH_DAT0, GPIO_IOMAP_IN_SDHOST_DAT0_IN, GPIO_IOMAP_OUT_SDHOST_DAT0_OUT);
180047b6:	3234      	movi      	r2, 52
180047b8:	312d      	movi      	r1, 45
180047ba:	3022      	movi      	r0, 34
180047bc:	e3fffc9c 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
                gpio_iomap_inout(PIN_SDH_DAT1, GPIO_IOMAP_IN_SDHOST_DAT1_IN, GPIO_IOMAP_OUT_SDHOST_DAT1_OUT);
180047c0:	3235      	movi      	r2, 53
180047c2:	312e      	movi      	r1, 46
180047c4:	30ff      	movi      	r0, 255
180047c6:	e3fffc97 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
                if (request == 4) {
180047ca:	3c44      	cmpnei      	r4, 4
180047cc:	e860fcc3 	bt      	0x18004152	// 18004152 <pin_func+0x2a>
                    gpio_iomap_inout(PIN_SDH_DAT2, GPIO_IOMAP_IN_SDHOST_DAT2_IN, GPIO_IOMAP_OUT_SDHOST_DAT2_OUT);
180047d0:	3236      	movi      	r2, 54
180047d2:	312f      	movi      	r1, 47
180047d4:	30ff      	movi      	r0, 255
180047d6:	e3fffc8f 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
                    gpio_iomap_inout(PIN_SDH_DAT3, GPIO_IOMAP_IN_SDHOST_DAT3_IN, GPIO_IOMAP_OUT_SDHOST_DAT3_OUT);
180047da:	3237      	movi      	r2, 55
180047dc:	3130      	movi      	r1, 48
180047de:	e800fcea 	br      	0x180041b2	// 180041b2 <pin_func+0x8a>
                gpio_set_dir(PIN_SDH_CLK, GPIO_DIR_INPUT);
180047e2:	3024      	movi      	r0, 36
180047e4:	e3fff492 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_SDH_CMD, GPIO_DIR_INPUT);
180047e8:	6c53      	mov      	r1, r4
180047ea:	3023      	movi      	r0, 35
180047ec:	e3fff48e 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_SDH_DAT0, GPIO_DIR_INPUT);
180047f0:	6c53      	mov      	r1, r4
180047f2:	3022      	movi      	r0, 34
180047f4:	070e      	br      	0x18004610	// 18004610 <pin_func+0x4e8>
                gpio_set_dir(PIN_LED_SEG0, GPIO_DIR_INPUT);     //seg0
180047f6:	e3fff489 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_LED_SEG1, GPIO_DIR_INPUT);     //seg1
180047fa:	3100      	movi      	r1, 0
180047fc:	3005      	movi      	r0, 5
180047fe:	e3fff485 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_LED_SEG2, GPIO_DIR_INPUT);     //seg2
18004802:	3100      	movi      	r1, 0
18004804:	3006      	movi      	r0, 6
18004806:	e3fff481 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_LED_SEG3, GPIO_DIR_INPUT);     //seg3
1800480a:	3100      	movi      	r1, 0
1800480c:	3007      	movi      	r0, 7
1800480e:	e3fff47d 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_LED_SEG4, GPIO_DIR_INPUT);     //seg4
18004812:	3100      	movi      	r1, 0
18004814:	3008      	movi      	r0, 8
18004816:	e3fff479 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_LED_SEG5, GPIO_DIR_INPUT);    //seg5
1800481a:	3100      	movi      	r1, 0
1800481c:	300b      	movi      	r0, 11
1800481e:	e3fff475 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_LED_SEG6, GPIO_DIR_INPUT);    //seg6
18004822:	3100      	movi      	r1, 0
18004824:	300d      	movi      	r0, 13
18004826:	e3fff471 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_LED_SEG7, GPIO_DIR_INPUT);    //seg7
1800482a:	3100      	movi      	r1, 0
1800482c:	300e      	movi      	r0, 14
1800482e:	e3fff46d 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PIN_LED_COM0,  GPIO_DIR_INPUT);    //com0
18004832:	3100      	movi      	r1, 0
18004834:	e800fded 	br      	0x1800440e	// 1800440e <pin_func+0x2e6>
    switch (dev_id) {
18004838:	eb460059 	cmpnei      	r6, 89
1800483c:	0c37      	bf      	0x180048aa	// 180048aa <pin_func+0x782>
1800483e:	eb46006d 	cmpnei      	r6, 109
18004842:	0c3f      	bf      	0x180048c0	// 180048c0 <pin_func+0x798>
18004844:	eb46002d 	cmpnei      	r6, 45
18004848:	e860fd93 	bt      	0x1800436e	// 1800436e <pin_func+0x246>
			switch (request) {
1800484c:	e904fde7 	bez      	r4, 0x1800441a	// 1800441a <pin_func+0x2f2>
18004850:	3c41      	cmpnei      	r4, 1
18004852:	e860fd8e 	bt      	0x1800436e	// 1800436e <pin_func+0x246>
					gpio_iomap_output(PIN_PWM_CHANNEL_3, GPIO_IOMAP_OUT_TMR3_PWM_OUT);
18004856:	3117      	movi      	r1, 23
                    gpio_iomap_output(PIN_PWM_CHANNEL_3, GPIO_IOMAP_OUT_STMR0_PWM_OUT);
18004858:	3021      	movi      	r0, 33
1800485a:	0411      	br      	0x1800487c	// 1800487c <pin_func+0x754>
            switch (request) {
1800485c:	3c41      	cmpnei      	r4, 1
1800485e:	0c0d      	bf      	0x18004878	// 18004878 <pin_func+0x750>
18004860:	3c42      	cmpnei      	r4, 2
18004862:	0c11      	bf      	0x18004884	// 18004884 <pin_func+0x75c>
18004864:	e924fd85 	bnez      	r4, 0x1800436e	// 1800436e <pin_func+0x246>
                    gpio_set_dir(PIN_PWM_CHANNEL_0, GPIO_DIR_INPUT);
18004868:	6c53      	mov      	r1, r4
1800486a:	3017      	movi      	r0, 23
1800486c:	e3fff44e 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                    gpio_set_dir(PIN_CAPTURE_CHANNEL_0, GPIO_DIR_INPUT);
18004870:	6c53      	mov      	r1, r4
18004872:	3011      	movi      	r0, 17
18004874:	e800fdb2 	br      	0x180043d8	// 180043d8 <pin_func+0x2b0>
                    gpio_iomap_output(PIN_PWM_CHANNEL_0, GPIO_IOMAP_OUT_TMR0_PWM_OUT);
18004878:	311a      	movi      	r1, 26
1800487a:	3017      	movi      	r0, 23
                    gpio_iomap_output(PIN_PWM_CHANNEL_1, GPIO_IOMAP_OUT_TMR1_PWM_OUT);
1800487c:	e3fffc08 	bsr      	0x1800408c	// 1800408c <gpio_iomap_output>
18004880:	e800fc69 	br      	0x18004152	// 18004152 <pin_func+0x2a>
                    gpio_iomap_input(PIN_CAPTURE_CHANNEL_0, GPIO_IOMAP_IN_TMR0_CAP_IN);
18004884:	3100      	movi      	r1, 0
18004886:	3011      	movi      	r0, 17
18004888:	e800fdbb 	br      	0x180043fe	// 180043fe <pin_func+0x2d6>
                    gpio_iomap_output(PIN_PWM_CHANNEL_1, GPIO_IOMAP_OUT_TMR1_PWM_OUT);
1800488c:	3119      	movi      	r1, 25
1800488e:	3016      	movi      	r0, 22
18004890:	07f6      	br      	0x1800487c	// 1800487c <pin_func+0x754>
                    gpio_iomap_input(PIN_CAPTURE_CHANNEL_1, GPIO_IOMAP_IN_TMR1_CAP_IN);
18004892:	6c53      	mov      	r1, r4
18004894:	3013      	movi      	r0, 19
18004896:	e800fdb4 	br      	0x180043fe	// 180043fe <pin_func+0x2d6>
            switch (request) {
1800489a:	e904000f 	bez      	r4, 0x180048b8	// 180048b8 <pin_func+0x790>
1800489e:	3c41      	cmpnei      	r4, 1
180048a0:	e860fd67 	bt      	0x1800436e	// 1800436e <pin_func+0x246>
                    gpio_iomap_output(PIN_PWM_CHANNEL_2, GPIO_IOMAP_OUT_TMR2_PWM_OUT);
180048a4:	3118      	movi      	r1, 24
                    gpio_iomap_output(PIN_PWM_CHANNEL_2, GPIO_IOMAP_OUT_LED_TMR0_PWM_OUT);
180048a6:	3020      	movi      	r0, 32
180048a8:	07ea      	br      	0x1800487c	// 1800487c <pin_func+0x754>
            switch (request) {
180048aa:	e9040007 	bez      	r4, 0x180048b8	// 180048b8 <pin_func+0x790>
180048ae:	3c41      	cmpnei      	r4, 1
180048b0:	e860fd5f 	bt      	0x1800436e	// 1800436e <pin_func+0x246>
                    gpio_iomap_output(PIN_PWM_CHANNEL_2, GPIO_IOMAP_OUT_LED_TMR0_PWM_OUT);
180048b4:	311b      	movi      	r1, 27
180048b6:	07f8      	br      	0x180048a6	// 180048a6 <pin_func+0x77e>
                    gpio_set_dir(PIN_PWM_CHANNEL_2, GPIO_DIR_INPUT);
180048b8:	6c53      	mov      	r1, r4
180048ba:	3020      	movi      	r0, 32
180048bc:	e800fd8e 	br      	0x180043d8	// 180043d8 <pin_func+0x2b0>
            switch (request) {
180048c0:	3c41      	cmpnei      	r4, 1
180048c2:	0c08      	bf      	0x180048d2	// 180048d2 <pin_func+0x7aa>
180048c4:	3c42      	cmpnei      	r4, 2
180048c6:	e840fc46 	bf      	0x18004152	// 18004152 <pin_func+0x2a>
180048ca:	e924fd52 	bnez      	r4, 0x1800436e	// 1800436e <pin_func+0x246>
180048ce:	e800fda6 	br      	0x1800441a	// 1800441a <pin_func+0x2f2>
					SYSCTRL->IOFUNCMASK0 &= ~BIT(27);
180048d2:	ea224002 	movih      	r2, 16386
                    gpio_iomap_output(PIN_PWM_CHANNEL_3, GPIO_IOMAP_OUT_STMR0_PWM_OUT);
180048d6:	3113      	movi      	r1, 19
					SYSCTRL->IOFUNCMASK0 &= ~BIT(27);
180048d8:	d8622060 	ld.w      	r3, (r2, 0x180)
180048dc:	3b9b      	bclri      	r3, 27
180048de:	dc622060 	st.w      	r3, (r2, 0x180)
180048e2:	07bb      	br      	0x18004858	// 18004858 <pin_func+0x730>
    switch (dev_id) {
180048e4:	eb400074 	cmpnei      	r0, 116
180048e8:	e860fc35 	bt      	0x18004152	// 18004152 <pin_func+0x2a>
    uint32 flag = request & (0xFF << 24);
180048ec:	33ff      	movi      	r3, 255
180048ee:	4378      	lsli      	r3, r3, 24
180048f0:	c4612022 	and      	r2, r1, r3
            switch (flag) {
180048f4:	3380      	movi      	r3, 128
180048f6:	4374      	lsli      	r3, r3, 20
180048f8:	64ca      	cmpne      	r2, r3
    uint32 adc_pin = (request&0xFFFFFF);
180048fa:	c40156e5 	zext      	r5, r1, 23, 0
            switch (flag) {
180048fe:	0c17      	bf      	0x1800492c	// 1800492c <pin_func+0x804>
18004900:	3380      	movi      	r3, 128
18004902:	4375      	lsli      	r3, r3, 21
18004904:	64ca      	cmpne      	r2, r3
18004906:	0c09      	bf      	0x18004918	// 18004918 <pin_func+0x7f0>
18004908:	3380      	movi      	r3, 128
1800490a:	4373      	lsli      	r3, r3, 19
1800490c:	64ca      	cmpne      	r2, r3
1800490e:	e8600243 	bt      	0x18004d94	// 18004d94 <pin_func+0xc6c>
                    gpio_ioctl(adc_pin, GPIO_GENERAL_ANALOG, 1, 0);
18004912:	3300      	movi      	r3, 0
18004914:	3201      	movi      	r2, 1
18004916:	040d      	br      	0x18004930	// 18004930 <pin_func+0x808>
                    gpio_ioctl(adc_pin, GPIO_GENERAL_ANALOG, 0, 0);
18004918:	3300      	movi      	r3, 0
1800491a:	3106      	movi      	r1, 6
1800491c:	6c8f      	mov      	r2, r3
1800491e:	6c17      	mov      	r0, r5
18004920:	e3fff406 	bsr      	0x1800312c	// 1800312c <gpio_ioctl>
                    gpio_set_dir(adc_pin, GPIO_DIR_INPUT);
18004924:	3100      	movi      	r1, 0
18004926:	6c17      	mov      	r0, r5
18004928:	e800fd58 	br      	0x180043d8	// 180043d8 <pin_func+0x2b0>
                    gpio_ioctl(adc_pin, GPIO_GENERAL_ANALOG, 0, 0);
1800492c:	3300      	movi      	r3, 0
1800492e:	6c8f      	mov      	r2, r3
18004930:	3106      	movi      	r1, 6
18004932:	6c17      	mov      	r0, r5
18004934:	065e      	br      	0x180045f0	// 180045f0 <pin_func+0x4c8>
    int psram_type = request & 0x7F;
18004936:	e4e1207f 	andi      	r7, r1, 127
    switch (psram_type) {
1800493a:	3f41      	cmpnei      	r7, 1
    int switch_off = request & 0x80;
1800493c:	e4a12080 	andi      	r5, r1, 128
    switch (psram_type) {
18004940:	0cbc      	bf      	0x18004ab8	// 18004ab8 <pin_func+0x990>
18004942:	3f21      	cmplti      	r7, 2
18004944:	0c55      	bf      	0x180049ee	// 180049ee <pin_func+0x8c6>
18004946:	e927fd14 	bnez      	r7, 0x1800436e	// 1800436e <pin_func+0x246>
            if (!switch_off) {
1800494a:	e925009f 	bnez      	r5, 0x18004a88	// 18004a88 <pin_func+0x960>
                gpio_driver_strength(PA_7,  GPIO_DS_4MA);
1800494e:	6c57      	mov      	r1, r5
18004950:	3007      	movi      	r0, 7
18004952:	e3fffb69 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PA_8,  GPIO_DS_4MA);
18004956:	6c57      	mov      	r1, r5
18004958:	3008      	movi      	r0, 8
1800495a:	e3fffb65 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PA_11, GPIO_DS_4MA);
1800495e:	6c57      	mov      	r1, r5
18004960:	300b      	movi      	r0, 11
18004962:	e3fffb61 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PA_12, GPIO_DS_4MA);
18004966:	6c57      	mov      	r1, r5
18004968:	300c      	movi      	r0, 12
1800496a:	e3fffb5d 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PA_13, GPIO_DS_4MA); 
1800496e:	6c57      	mov      	r1, r5
18004970:	300d      	movi      	r0, 13
18004972:	e3fffb59 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PA_14, GPIO_DS_4MA);
18004976:	6c57      	mov      	r1, r5
18004978:	300e      	movi      	r0, 14
1800497a:	e3fffb55 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_set_mode(PA_7,  GPIO_PULL_UP,  GPIO_PULL_LEVEL_100K);
1800497e:	3202      	movi      	r2, 2
18004980:	3101      	movi      	r1, 1
18004982:	3007      	movi      	r0, 7
18004984:	e3fff3ac 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_mode(PA_8,  GPIO_PULL_UP,  GPIO_PULL_LEVEL_100K);
18004988:	3202      	movi      	r2, 2
1800498a:	3101      	movi      	r1, 1
1800498c:	3008      	movi      	r0, 8
1800498e:	e3fff3a7 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_mode(PA_11, GPIO_PULL_UP, GPIO_PULL_LEVEL_100K);
18004992:	3202      	movi      	r2, 2
18004994:	3101      	movi      	r1, 1
18004996:	300b      	movi      	r0, 11
18004998:	e3fff3a2 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_mode(PA_12, GPIO_PULL_UP, GPIO_PULL_LEVEL_100K);
1800499c:	3202      	movi      	r2, 2
1800499e:	3101      	movi      	r1, 1
180049a0:	300c      	movi      	r0, 12
180049a2:	e3fff39d 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_mode(PA_13, GPIO_PULL_UP, GPIO_PULL_LEVEL_100K);
180049a6:	3202      	movi      	r2, 2
180049a8:	3101      	movi      	r1, 1
180049aa:	300d      	movi      	r0, 13
180049ac:	e3fff398 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_mode(PA_14, GPIO_PULL_UP, GPIO_PULL_LEVEL_100K);  
180049b0:	3202      	movi      	r2, 2
180049b2:	3101      	movi      	r1, 1
180049b4:	300e      	movi      	r0, 14
180049b6:	e3fff393 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_altnt_func(PA_13, GPIO_AF_2);
180049ba:	3102      	movi      	r1, 2
180049bc:	300d      	movi      	r0, 13
180049be:	e3fffb4d 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PA_14, GPIO_AF_2);
180049c2:	3102      	movi      	r1, 2
180049c4:	300e      	movi      	r0, 14
180049c6:	e3fffb49 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PA_8,  GPIO_AF_2);
180049ca:	3102      	movi      	r1, 2
180049cc:	3008      	movi      	r0, 8
180049ce:	e3fffb45 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PA_7,  GPIO_AF_2);
180049d2:	3102      	movi      	r1, 2
180049d4:	3007      	movi      	r0, 7
180049d6:	e3fffb41 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PA_11, GPIO_AF_2);
180049da:	3102      	movi      	r1, 2
180049dc:	300b      	movi      	r0, 11
180049de:	e3fffb3d 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PA_12, GPIO_AF_2); 
180049e2:	3102      	movi      	r1, 2
180049e4:	300c      	movi      	r0, 12
                gpio_set_altnt_func(PE_10,GPIO_AF_1);
180049e6:	e3fffb39 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
180049ea:	e800fbb5 	br      	0x18004154	// 18004154 <pin_func+0x2c>
    switch (psram_type) {
180049ee:	3f42      	cmpnei      	r7, 2
180049f0:	0cc0      	bf      	0x18004b70	// 18004b70 <pin_func+0xa48>
180049f2:	3f43      	cmpnei      	r7, 3
180049f4:	e860fcbd 	bt      	0x1800436e	// 1800436e <pin_func+0x246>
            if (!switch_off) {
180049f8:	e925fbad 	bnez      	r5, 0x18004152	// 18004152 <pin_func+0x2a>
                gpio_set_mode(PE_4, GPIO_PULL_DOWN, GPIO_PULL_LEVEL_100K);
180049fc:	3202      	movi      	r2, 2
180049fe:	6c4b      	mov      	r1, r2
18004a00:	3034      	movi      	r0, 52
18004a02:	e3fff36d 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_driver_strength(PE_4, GPIO_DS_4MA);
18004a06:	3100      	movi      	r1, 0
18004a08:	3034      	movi      	r0, 52
18004a0a:	e3fffb0d 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_5, GPIO_DS_4MA);
18004a0e:	3100      	movi      	r1, 0
18004a10:	3035      	movi      	r0, 53
18004a12:	e3fffb09 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_6, GPIO_DS_4MA);
18004a16:	3100      	movi      	r1, 0
18004a18:	3036      	movi      	r0, 54
18004a1a:	e3fffb05 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_7, GPIO_DS_4MA);
18004a1e:	3100      	movi      	r1, 0
18004a20:	3037      	movi      	r0, 55
18004a22:	e3fffb01 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_8, GPIO_DS_4MA);  
18004a26:	3100      	movi      	r1, 0
18004a28:	3038      	movi      	r0, 56
18004a2a:	e3fffafd 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_9, GPIO_DS_4MA);
18004a2e:	3100      	movi      	r1, 0
18004a30:	3039      	movi      	r0, 57
18004a32:	e3fffaf9 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_10, GPIO_DS_4MA);
18004a36:	3100      	movi      	r1, 0
18004a38:	303a      	movi      	r0, 58
18004a3a:	e3fffaf5 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_11, GPIO_DS_4MA);
18004a3e:	3100      	movi      	r1, 0
18004a40:	303b      	movi      	r0, 59
18004a42:	e3fffaf1 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_12, GPIO_DS_4MA);
18004a46:	3100      	movi      	r1, 0
18004a48:	303c      	movi      	r0, 60
18004a4a:	e3fffaed 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_13, GPIO_DS_4MA);
18004a4e:	3100      	movi      	r1, 0
18004a50:	303d      	movi      	r0, 61
18004a52:	e3fffae9 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_14, GPIO_DS_4MA);
18004a56:	3100      	movi      	r1, 0
18004a58:	303e      	movi      	r0, 62
18004a5a:	e3fffae5 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_15, GPIO_DS_4MA);
18004a5e:	3100      	movi      	r1, 0
18004a60:	303f      	movi      	r0, 63
18004a62:	e3fffae1 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                SYSCTRL->OSPI_MAP_CTL0 = OSPI_MAP0_CLK(8) | OSPI_MAP0_DQS(4) | OSPI_MAP0_DM(15) | OSPI_MAP0_CS(10) |
18004a66:	ea234002 	movih      	r3, 16386
18004a6a:	1047      	lrw      	r2, 0xbcdef4a8	// 18004a84 <pin_func+0x95c>
18004a6c:	dc43206a 	st.w      	r2, (r3, 0x1a8)
                SYSCTRL->OSPI_MAP_CTL1 = 0xFFFF0000 | OSPI_MAP1_D4(9) | OSPI_MAP1_D5(6) | OSPI_MAP1_D6(7) | OSPI_MAP1_D7(5);
18004a70:	ea02a896 	movi      	r2, 43158
18004a74:	6c8a      	nor      	r2, r2
18004a76:	dc43206b 	st.w      	r2, (r3, 0x1ac)
                SYSCTRL_REG_OPT( SYSCTRL->PE16CON = (0x1<<1) | (0x1<<5); );// rst  = 1
18004a7a:	3222      	movi      	r2, 34
18004a7c:	04bc      	br      	0x18004bf4	// 18004bf4 <pin_func+0xacc>
18004a7e:	0000      	.short	0x0000
18004a80:	20001b9c 	.long	0x20001b9c
18004a84:	bcdef4a8 	.long	0xbcdef4a8
                gpio_set_dir(PA_7 , GPIO_DIR_INPUT);
18004a88:	6c5f      	mov      	r1, r7
18004a8a:	3007      	movi      	r0, 7
18004a8c:	e3fff33e 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PA_8 , GPIO_DIR_INPUT);
18004a90:	6c5f      	mov      	r1, r7
18004a92:	3008      	movi      	r0, 8
18004a94:	e3fff33a 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PA_11, GPIO_DIR_INPUT);
18004a98:	6c5f      	mov      	r1, r7
18004a9a:	300b      	movi      	r0, 11
18004a9c:	e3fff336 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PA_12, GPIO_DIR_INPUT);
18004aa0:	6c5f      	mov      	r1, r7
18004aa2:	300c      	movi      	r0, 12
18004aa4:	e3fff332 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PA_13, GPIO_DIR_INPUT);
18004aa8:	6c5f      	mov      	r1, r7
18004aaa:	300d      	movi      	r0, 13
18004aac:	e3fff32e 	bsr      	0x18003108	// 18003108 <gpio_set_dir>
                gpio_set_dir(PA_14, GPIO_DIR_INPUT);
18004ab0:	6c5f      	mov      	r1, r7
18004ab2:	300e      	movi      	r0, 14
18004ab4:	e800fc92 	br      	0x180043d8	// 180043d8 <pin_func+0x2b0>
            if (!switch_off) {
18004ab8:	e925fb4d 	bnez      	r5, 0x18004152	// 18004152 <pin_func+0x2a>
                gpio_set_mode(PE_4, GPIO_PULL_UP, GPIO_PULL_LEVEL_100K);
18004abc:	3202      	movi      	r2, 2
18004abe:	6c5f      	mov      	r1, r7
18004ac0:	3034      	movi      	r0, 52
18004ac2:	e3fff30d 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_mode(PE_5, GPIO_PULL_UP, GPIO_PULL_LEVEL_100K);
18004ac6:	3202      	movi      	r2, 2
18004ac8:	6c5f      	mov      	r1, r7
18004aca:	3035      	movi      	r0, 53
18004acc:	e3fff308 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_mode(PE_6, GPIO_PULL_UP, GPIO_PULL_LEVEL_100K);
18004ad0:	3202      	movi      	r2, 2
18004ad2:	6c5f      	mov      	r1, r7
18004ad4:	3036      	movi      	r0, 54
18004ad6:	e3fff303 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_mode(PE_7, GPIO_PULL_UP, GPIO_PULL_LEVEL_100K);
18004ada:	3202      	movi      	r2, 2
18004adc:	6c5f      	mov      	r1, r7
18004ade:	3037      	movi      	r0, 55
18004ae0:	e3fff2fe 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_mode(PE_8, GPIO_PULL_UP, GPIO_PULL_LEVEL_100K);
18004ae4:	3202      	movi      	r2, 2
18004ae6:	6c5f      	mov      	r1, r7
18004ae8:	3038      	movi      	r0, 56
18004aea:	e3fff2f9 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_mode(PE_9, GPIO_PULL_UP, GPIO_PULL_LEVEL_100K);
18004aee:	3202      	movi      	r2, 2
18004af0:	6c5f      	mov      	r1, r7
18004af2:	3039      	movi      	r0, 57
18004af4:	e3fff2f4 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_set_mode(PE_10,GPIO_PULL_UP, GPIO_PULL_LEVEL_100K);
18004af8:	3202      	movi      	r2, 2
18004afa:	6c5f      	mov      	r1, r7
18004afc:	303a      	movi      	r0, 58
18004afe:	e3fff2ef 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_driver_strength(PE_4, GPIO_DS_4MA);
18004b02:	6c57      	mov      	r1, r5
18004b04:	3034      	movi      	r0, 52
18004b06:	e3fffa8f 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_5, GPIO_DS_4MA);
18004b0a:	6c57      	mov      	r1, r5
18004b0c:	3035      	movi      	r0, 53
18004b0e:	e3fffa8b 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_6, GPIO_DS_4MA);
18004b12:	6c57      	mov      	r1, r5
18004b14:	3036      	movi      	r0, 54
18004b16:	e3fffa87 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_7, GPIO_DS_4MA);
18004b1a:	6c57      	mov      	r1, r5
18004b1c:	3037      	movi      	r0, 55
18004b1e:	e3fffa83 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_8, GPIO_DS_4MA);  
18004b22:	6c57      	mov      	r1, r5
18004b24:	3038      	movi      	r0, 56
18004b26:	e3fffa7f 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_9, GPIO_DS_4MA);
18004b2a:	6c57      	mov      	r1, r5
18004b2c:	3039      	movi      	r0, 57
18004b2e:	e3fffa7b 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_10,GPIO_DS_4MA);
18004b32:	6c57      	mov      	r1, r5
18004b34:	303a      	movi      	r0, 58
18004b36:	e3fffa77 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_set_altnt_func(PE_4, GPIO_AF_1);
18004b3a:	6c5f      	mov      	r1, r7
18004b3c:	3034      	movi      	r0, 52
18004b3e:	e3fffa8d 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PE_5, GPIO_AF_1);
18004b42:	6c5f      	mov      	r1, r7
18004b44:	3035      	movi      	r0, 53
18004b46:	e3fffa89 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PE_6, GPIO_AF_1);
18004b4a:	6c5f      	mov      	r1, r7
18004b4c:	3036      	movi      	r0, 54
18004b4e:	e3fffa85 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PE_7, GPIO_AF_1);
18004b52:	6c5f      	mov      	r1, r7
18004b54:	3037      	movi      	r0, 55
18004b56:	e3fffa81 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PE_8, GPIO_AF_1);
18004b5a:	6c5f      	mov      	r1, r7
18004b5c:	3038      	movi      	r0, 56
18004b5e:	e3fffa7d 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PE_9, GPIO_AF_1);
18004b62:	6c5f      	mov      	r1, r7
18004b64:	3039      	movi      	r0, 57
18004b66:	e3fffa79 	bsr      	0x18004058	// 18004058 <gpio_set_altnt_func>
                gpio_set_altnt_func(PE_10,GPIO_AF_1);
18004b6a:	6c5f      	mov      	r1, r7
18004b6c:	303a      	movi      	r0, 58
18004b6e:	073c      	br      	0x180049e6	// 180049e6 <pin_func+0x8be>
            if (!switch_off) {
18004b70:	e925faf1 	bnez      	r5, 0x18004152	// 18004152 <pin_func+0x2a>
                gpio_set_mode(PE_4, GPIO_PULL_DOWN, GPIO_PULL_LEVEL_100K);
18004b74:	6c9f      	mov      	r2, r7
18004b76:	6c5f      	mov      	r1, r7
18004b78:	3034      	movi      	r0, 52
18004b7a:	e3fff2b1 	bsr      	0x180030dc	// 180030dc <gpio_set_mode>
                gpio_driver_strength(PE_4, GPIO_DS_4MA);
18004b7e:	6c57      	mov      	r1, r5
18004b80:	3034      	movi      	r0, 52
18004b82:	e3fffa51 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_5, GPIO_DS_4MA);
18004b86:	6c57      	mov      	r1, r5
18004b88:	3035      	movi      	r0, 53
18004b8a:	e3fffa4d 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_6, GPIO_DS_4MA);
18004b8e:	6c57      	mov      	r1, r5
18004b90:	3036      	movi      	r0, 54
18004b92:	e3fffa49 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_7, GPIO_DS_4MA);
18004b96:	6c57      	mov      	r1, r5
18004b98:	3037      	movi      	r0, 55
18004b9a:	e3fffa45 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_8, GPIO_DS_4MA);  
18004b9e:	6c57      	mov      	r1, r5
18004ba0:	3038      	movi      	r0, 56
18004ba2:	e3fffa41 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_9, GPIO_DS_4MA);
18004ba6:	6c57      	mov      	r1, r5
18004ba8:	3039      	movi      	r0, 57
18004baa:	e3fffa3d 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_10, GPIO_DS_4MA);
18004bae:	6c57      	mov      	r1, r5
18004bb0:	303a      	movi      	r0, 58
18004bb2:	e3fffa39 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_11, GPIO_DS_4MA);
18004bb6:	6c57      	mov      	r1, r5
18004bb8:	303b      	movi      	r0, 59
18004bba:	e3fffa35 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_12, GPIO_DS_4MA);
18004bbe:	6c57      	mov      	r1, r5
18004bc0:	303c      	movi      	r0, 60
18004bc2:	e3fffa31 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_13, GPIO_DS_4MA);
18004bc6:	6c57      	mov      	r1, r5
18004bc8:	303d      	movi      	r0, 61
18004bca:	e3fffa2d 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_14, GPIO_DS_4MA);
18004bce:	6c57      	mov      	r1, r5
18004bd0:	303e      	movi      	r0, 62
18004bd2:	e3fffa29 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                gpio_driver_strength(PE_15, GPIO_DS_4MA);
18004bd6:	6c57      	mov      	r1, r5
18004bd8:	303f      	movi      	r0, 63
18004bda:	e3fffa25 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                 SYSCTRL_REG_OPT( 
18004bde:	ea234002 	movih      	r3, 16386
18004be2:	134f      	lrw      	r2, 0xbcdef4a8	// 18004d9c <pin_func+0xc74>
18004be4:	dc43206a 	st.w      	r2, (r3, 0x1a8)
18004be8:	ea02a896 	movi      	r2, 43158
18004bec:	6c8a      	nor      	r2, r2
18004bee:	dc43206b 	st.w      	r2, (r3, 0x1ac)
                SYSCTRL_REG_OPT( SYSCTRL->PE16CON = (0x1<<1) | (0x1<<6); );// clkn
18004bf2:	3242      	movi      	r2, 66
                SYSCTRL_REG_OPT( SYSCTRL->PE16CON = (0x1<<1) | (0x1<<5); );// rst  = 1
18004bf4:	dc432069 	st.w      	r2, (r3, 0x1a4)
                SYSCTRL_REG_OPT( SYSCTRL->SYS_CON15 = (SYSCTRL->SYS_CON15 & ~(0x1<<14)) | (1<<14); );
18004bf8:	9350      	ld.w      	r2, (r3, 0x40)
18004bfa:	ec424000 	ori      	r2, r2, 16384
18004bfe:	b350      	st.w      	r2, (r3, 0x40)
                SYSCTRL_REG_OPT( SYSCTRL->SYS_CON15 = (SYSCTRL->SYS_CON15 & ~(0x1<<15)) | (1<<15); );
18004c00:	9350      	ld.w      	r2, (r3, 0x40)
18004c02:	ec428000 	ori      	r2, r2, 32768
18004c06:	b350      	st.w      	r2, (r3, 0x40)
18004c08:	e800faa6 	br      	0x18004154	// 18004154 <pin_func+0x2c>
				SYSCTRL->IOFUNCMASK0 |= BIT(18);
18004c0c:	ea254002 	movih      	r5, 16386
				gpio_iomap_output(VS_CS, 5); 
18004c10:	3105      	movi      	r1, 5
				SYSCTRL->IOFUNCMASK0 |= BIT(18);
18004c12:	d8652060 	ld.w      	r3, (r5, 0x180)
18004c16:	3bb2      	bseti      	r3, 18
18004c18:	dc652060 	st.w      	r3, (r5, 0x180)
				gpio_iomap_output(VS_CS, 5); 
18004c1c:	3025      	movi      	r0, 37
18004c1e:	e3fffa37 	bsr      	0x1800408c	// 1800408c <gpio_iomap_output>
				gpio_driver_strength(VS_CS, GPIO_DS_12MA);
18004c22:	3101      	movi      	r1, 1
18004c24:	3025      	movi      	r0, 37
18004c26:	e3fff9ff 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
				SYSCTRL->IOFUNCMASK0 |= BIT(17);
18004c2a:	d8652060 	ld.w      	r3, (r5, 0x180)
18004c2e:	3bb1      	bseti      	r3, 17
18004c30:	dc652060 	st.w      	r3, (r5, 0x180)
				gpio_iomap_output(HS_DC, 4); 
18004c34:	3104      	movi      	r1, 4
18004c36:	300b      	movi      	r0, 11
18004c38:	e3fffa2a 	bsr      	0x1800408c	// 1800408c <gpio_iomap_output>
				gpio_driver_strength(HS_DC, GPIO_DS_12MA);
18004c3c:	3101      	movi      	r1, 1
18004c3e:	300b      	movi      	r0, 11
18004c40:	e3fff9f2 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
				SYSCTRL->IOFUNCMASK0 |= BIT(16);
18004c44:	d8652060 	ld.w      	r3, (r5, 0x180)
18004c48:	3bb0      	bseti      	r3, 16
18004c4a:	dc652060 	st.w      	r3, (r5, 0x180)
				gpio_iomap_output(DE_ERD, 3); 
18004c4e:	3103      	movi      	r1, 3
18004c50:	3002      	movi      	r0, 2
18004c52:	e3fffa1d 	bsr      	0x1800408c	// 1800408c <gpio_iomap_output>
				gpio_driver_strength(DE_ERD, GPIO_DS_12MA);	
18004c56:	3101      	movi      	r1, 1
18004c58:	3002      	movi      	r0, 2
18004c5a:	e3fff9e5 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
				SYSCTRL->IOFUNCMASK0 |= BIT(19);
18004c5e:	d8652060 	ld.w      	r3, (r5, 0x180)
18004c62:	3bb3      	bseti      	r3, 19
18004c64:	dc652060 	st.w      	r3, (r5, 0x180)
				gpio_iomap_output(DOTCLK_RWR, 6); 
18004c68:	3106      	movi      	r1, 6
18004c6a:	3000      	movi      	r0, 0
18004c6c:	e3fffa10 	bsr      	0x1800408c	// 1800408c <gpio_iomap_output>
				gpio_driver_strength(DOTCLK_RWR, GPIO_DS_12MA);	
18004c70:	3101      	movi      	r1, 1
18004c72:	3000      	movi      	r0, 0
18004c74:	e3fff9d8 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
				SYSCTRL->IOFUNCMASK0 |= BIT(20);
18004c78:	d8652060 	ld.w      	r3, (r5, 0x180)
18004c7c:	3bb4      	bseti      	r3, 20
18004c7e:	dc652060 	st.w      	r3, (r5, 0x180)
                SYSCTRL->IOFUNCMASK1 |= BIT(19);
18004c82:	d8652068 	ld.w      	r3, (r5, 0x1a0)
18004c86:	3bb3      	bseti      	r3, 19
18004c88:	dc652068 	st.w      	r3, (r5, 0x1a0)
				gpio_iomap_inout(LCD_D0, GPIO_IOMAP_IN_LCD_D0_IN_MASK1_19,2); 
18004c8c:	3202      	movi      	r2, 2
18004c8e:	3117      	movi      	r1, 23
18004c90:	3028      	movi      	r0, 40
18004c92:	e3fffa31 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
				gpio_driver_strength(LCD_D0, GPIO_DS_12MA);
18004c96:	3101      	movi      	r1, 1
18004c98:	3028      	movi      	r0, 40
18004c9a:	e3fff9c5 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                SYSCTRL->IOFUNCMASK1 |= BIT(20);
18004c9e:	d8652068 	ld.w      	r3, (r5, 0x1a0)
18004ca2:	3bb4      	bseti      	r3, 20
18004ca4:	dc652068 	st.w      	r3, (r5, 0x1a0)
				gpio_iomap_inout(LCD_D1, GPIO_IOMAP_IN_LCD_D1_IN_MASK1_20,8);
18004ca8:	3208      	movi      	r2, 8
18004caa:	3122      	movi      	r1, 34
18004cac:	3029      	movi      	r0, 41
18004cae:	e3fffa23 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
				gpio_driver_strength(LCD_D1, GPIO_DS_12MA);
18004cb2:	3101      	movi      	r1, 1
18004cb4:	3029      	movi      	r0, 41
18004cb6:	e3fff9b7 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
                SYSCTRL->IOFUNCMASK1 |= BIT(21);
18004cba:	d8652068 	ld.w      	r3, (r5, 0x1a0)
18004cbe:	3bb5      	bseti      	r3, 21
18004cc0:	dc652068 	st.w      	r3, (r5, 0x1a0)
				gpio_iomap_inout(LCD_D2, GPIO_IOMAP_IN_LCD_D2_IN_MASK1_21,9);
18004cc4:	3209      	movi      	r2, 9
18004cc6:	3123      	movi      	r1, 35
18004cc8:	302a      	movi      	r0, 42
18004cca:	e3fffa15 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
				gpio_driver_strength(LCD_D2, GPIO_DS_12MA);
18004cce:	3101      	movi      	r1, 1
18004cd0:	302a      	movi      	r0, 42
18004cd2:	e3fff9a9 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
				SYSCTRL->IOFUNCMASK0 |= BIT(21);
18004cd6:	d8652060 	ld.w      	r3, (r5, 0x180)
18004cda:	3bb5      	bseti      	r3, 21
18004cdc:	dc652060 	st.w      	r3, (r5, 0x180)
                SYSCTRL->IOFUNCMASK1 |= BIT(22);
18004ce0:	d8652068 	ld.w      	r3, (r5, 0x1a0)
18004ce4:	3bb6      	bseti      	r3, 22
18004ce6:	dc652068 	st.w      	r3, (r5, 0x1a0)
				gpio_iomap_inout(LCD_D3, GPIO_IOMAP_IN_STMR0_CAP_IN__LCD_D3_IN_MASK1_22,10);
18004cea:	320a      	movi      	r2, 10
18004cec:	3109      	movi      	r1, 9
18004cee:	302b      	movi      	r0, 43
18004cf0:	e3fffa02 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
				gpio_driver_strength(LCD_D3, GPIO_DS_12MA);
18004cf4:	3101      	movi      	r1, 1
18004cf6:	302b      	movi      	r0, 43
18004cf8:	e3fff996 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
				SYSCTRL->IOFUNCMASK0 |= BIT(22);
18004cfc:	d8652060 	ld.w      	r3, (r5, 0x180)
18004d00:	3bb6      	bseti      	r3, 22
18004d02:	dc652060 	st.w      	r3, (r5, 0x180)
                SYSCTRL->IOFUNCMASK1 |= BIT(23);
18004d06:	d8652068 	ld.w      	r3, (r5, 0x1a0)
18004d0a:	3bb7      	bseti      	r3, 23
18004d0c:	dc652068 	st.w      	r3, (r5, 0x1a0)
				gpio_iomap_inout(LCD_D4, GPIO_IOMAP_IN_STMR1_CAP_IN__LCD_D4_IN_MASK1_23,11);
18004d10:	320b      	movi      	r2, 11
18004d12:	310a      	movi      	r1, 10
18004d14:	302c      	movi      	r0, 44
18004d16:	e3fff9ef 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
				gpio_driver_strength(LCD_D4, GPIO_DS_12MA);
18004d1a:	3101      	movi      	r1, 1
18004d1c:	302c      	movi      	r0, 44
18004d1e:	e3fff983 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
				SYSCTRL->IOFUNCMASK0 |= BIT(23);
18004d22:	d8652060 	ld.w      	r3, (r5, 0x180)
18004d26:	3bb7      	bseti      	r3, 23
18004d28:	dc652060 	st.w      	r3, (r5, 0x180)
                SYSCTRL->IOFUNCMASK1 |= BIT(24);
18004d2c:	d8652068 	ld.w      	r3, (r5, 0x1a0)
18004d30:	3bb8      	bseti      	r3, 24
18004d32:	dc652068 	st.w      	r3, (r5, 0x1a0)
				gpio_iomap_inout(LCD_D5, GPIO_IOMAP_IN_STMR2_CAP_IN__LCD_D5_IN_MASK1_24,12);				//D5
18004d36:	320c      	movi      	r2, 12
18004d38:	310b      	movi      	r1, 11
18004d3a:	302d      	movi      	r0, 45
18004d3c:	e3fff9dc 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
				gpio_driver_strength(LCD_D5, GPIO_DS_12MA);
18004d40:	3101      	movi      	r1, 1
18004d42:	302d      	movi      	r0, 45
18004d44:	e3fff970 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
				SYSCTRL->IOFUNCMASK0 |= BIT(24);
18004d48:	d8652060 	ld.w      	r3, (r5, 0x180)
18004d4c:	3bb8      	bseti      	r3, 24
18004d4e:	dc652060 	st.w      	r3, (r5, 0x180)
                SYSCTRL->IOFUNCMASK1 |= BIT(25);
18004d52:	d8652068 	ld.w      	r3, (r5, 0x1a0)
18004d56:	3bb9      	bseti      	r3, 25
18004d58:	dc652068 	st.w      	r3, (r5, 0x1a0)
				gpio_iomap_inout(LCD_D6, GPIO_IOMAP_IN_STMR3_CAP_IN__LCD_D6_IN_MASK1_25,16);				//D6
18004d5c:	3210      	movi      	r2, 16
18004d5e:	310c      	movi      	r1, 12
18004d60:	302e      	movi      	r0, 46
18004d62:	e3fff9c9 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
				gpio_driver_strength(LCD_D6, GPIO_DS_12MA);
18004d66:	3101      	movi      	r1, 1
18004d68:	302e      	movi      	r0, 46
18004d6a:	e3fff95d 	bsr      	0x18004024	// 18004024 <gpio_driver_strength>
				SYSCTRL->IOFUNCMASK0 |= BIT(25);
18004d6e:	d8652060 	ld.w      	r3, (r5, 0x180)
18004d72:	3bb9      	bseti      	r3, 25
18004d74:	dc652060 	st.w      	r3, (r5, 0x180)
                SYSCTRL->IOFUNCMASK1 |= BIT(26);
18004d78:	d8652068 	ld.w      	r3, (r5, 0x1a0)
18004d7c:	3bba      	bseti      	r3, 26
				gpio_iomap_inout(LCD_D7, GPIO_IOMAP_IN_PORT_WKUP_IN1__LCD_D7_IN_MASK1_26,17);				//D7
18004d7e:	310e      	movi      	r1, 14
                SYSCTRL->IOFUNCMASK1 |= BIT(26);
18004d80:	dc652068 	st.w      	r3, (r5, 0x1a0)
				gpio_iomap_inout(LCD_D7, GPIO_IOMAP_IN_PORT_WKUP_IN1__LCD_D7_IN_MASK1_26,17);				//D7
18004d84:	3211      	movi      	r2, 17
18004d86:	302f      	movi      	r0, 47
18004d88:	e3fff9b6 	bsr      	0x180040f4	// 180040f4 <gpio_iomap_inout>
				gpio_driver_strength(LCD_D7, GPIO_DS_12MA);
18004d8c:	3101      	movi      	r1, 1
18004d8e:	302f      	movi      	r0, 47
18004d90:	e800fbdb 	br      	0x18004546	// 18004546 <pin_func+0x41e>
                    return RET_ERR;
18004d94:	3500      	movi      	r5, 0
18004d96:	2d00      	subi      	r5, 1
18004d98:	e800f9de 	br      	0x18004154	// 18004154 <pin_func+0x2c>
18004d9c:	bcdef4a8 	.long	0xbcdef4a8

18004da0 <cache_open>:
__init __weak void save_boot_loader_addr() {};
    

__SYS_INIT void cache_open(void)
{
    sysctrl_cache_en();
18004da0:	ea224002 	movih      	r2, 16386
  \brief   setup cacheable range Cache
  \details setup Cache range
  */
__STATIC_INLINE void csi_cache_set_range (uint32_t index, uint32_t baseAddr, uint32_t size, uint32_t enable)
{
    CACHE->CRCR[index] =  ((baseAddr & CACHE_CRCR_BASE_ADDR_Msk) |
18004da4:	ea0103ff 	movi      	r1, 1023
18004da8:	6c46      	nor      	r1, r1
18004daa:	9274      	ld.w      	r3, (r2, 0x50)
18004dac:	3bb9      	bseti      	r3, 25
18004dae:	b274      	st.w      	r3, (r2, 0x50)
  \brief   Reset cache profile
  \details Reset Cache profile
  */
__STATIC_INLINE void csi_cache_reset_profile (void)
{
    CACHE->CPFCR |=  (uint32_t)CACHE_CPFCR_PFRST_Msk;
18004db0:	1070      	lrw      	r3, 0xe000f000	// 18004df0 <cache_open+0x50>
18004db2:	d84323fd 	ld.w      	r2, (r3, 0xff4)
18004db6:	ec420002 	ori      	r2, r2, 2
18004dba:	dc4323fd 	st.w      	r2, (r3, 0xff4)
    CACHE->CRCR[index] =  ((baseAddr & CACHE_CRCR_BASE_ADDR_Msk) |
18004dbe:	104e      	lrw      	r2, 0x18000000	// 18004df4 <cache_open+0x54>
18004dc0:	6884      	and      	r2, r1
                           (_VAL2FLD(CACHE_CRCR_SIZE, size)) |
18004dc2:	ec42002d 	ori      	r2, r2, 45
    CACHE->CRCR[index] =  ((baseAddr & CACHE_CRCR_BASE_ADDR_Msk) |
18004dc6:	b342      	st.w      	r2, (r3, 0x8)
18004dc8:	ea02bce0 	movi      	r2, 48352
18004dcc:	c6c24902 	rotli      	r2, r2, 22
18004dd0:	b343      	st.w      	r2, (r3, 0xc)
    CACHE->CPFCR |=  (uint32_t)CACHE_CPFCR_PFEN_Msk;
18004dd2:	d84323fd 	ld.w      	r2, (r3, 0xff4)
18004dd6:	ec420001 	ori      	r2, r2, 1
18004dda:	dc4323fd 	st.w      	r2, (r3, 0xff4)
    CACHE->CIR = CACHE_CIR_INV_ALL_Msk;         /* invalidate all Cache */
18004dde:	3201      	movi      	r2, 1
18004de0:	b341      	st.w      	r2, (r3, 0x4)
    CACHE->CER =  (uint32_t)(CACHE_CER_EN_Msk | CACHE_CER_WB_Msk | CACHE_CER_DCW_Msk) & (~CACHE_CER_CFIG_Msk);  /* enable all Cache */
18004de2:	3215      	movi      	r2, 21
18004de4:	b340      	st.w      	r2, (r3, 0x0)
    __ASM volatile("nop");
18004de6:	6c03      	mov      	r0, r0
18004de8:	6c03      	mov      	r0, r0
18004dea:	6c03      	mov      	r0, r0
18004dec:	6c03      	mov      	r0, r0
#if defined(PSRAM_HEAP)
    csi_cache_set_range(1, PSRAM_BASE, CACHE_CRCR_16M, 0x1);
#endif
    csi_cache_enable_profile();
    csi_dcache_enable();
}
18004dee:	783c      	jmp      	r15
18004df0:	e000f000 	.long	0xe000f000
18004df4:	18000000 	.long	0x18000000

18004df8 <system_clock_init>:

__SYS_INIT __weak void system_clock_init(void)
{
18004df8:	14d0      	push      	r15
    if (!sysctrl_cmu_sysclk_set(DEFAULT_SYS_CLK, 1)) {
18004dfa:	3101      	movi      	r1, 1
18004dfc:	1004      	lrw      	r0, 0xe4e1c00	// 18004e0c <system_clock_init+0x14>
18004dfe:	e00060b7 	bsr      	0x18010f6c	// 18010f6c <sysctrl_cmu_sysclk_set>
18004e02:	e9200003 	bnez      	r0, 0x18004e08	// 18004e08 <system_clock_init+0x10>
18004e06:	0400      	br      	0x18004e06	// 18004e06 <system_clock_init+0xe>
        while (1);
    }
}
18004e08:	1490      	pop      	r15
18004e0a:	0000      	.short	0x0000
18004e0c:	0e4e1c00 	.long	0x0e4e1c00

18004e10 <hg_qspi_flash_xip_mode>:
18004e10:	3000      	movi      	r0, 0
18004e12:	783c      	jmp      	r15

18004e14 <hg_qspi_flash_protect>:

int32 hg_qspi_flash_xip_mode(void *hw1, uint32 xip_en) { return 0; }
int32 hg_qspi_flash_protect(void *hw1, uint32 wp_en) { return 0; }
18004e14:	3000      	movi      	r0, 0
18004e16:	783c      	jmp      	r15

18004e18 <SystemInit>:

__SYS_INIT void SystemInit(void)
{
18004e18:	14d2      	push      	r4-r5, r15
    srampool_start  = (uint32)&__heap_start;
18004e1a:	1277      	lrw      	r3, 0x20001bac	// 18004f74 <SystemInit+0x15c>
18004e1c:	1257      	lrw      	r2, 0x20002c7c	// 18004f78 <SystemInit+0x160>
18004e1e:	b340      	st.w      	r2, (r3, 0x0)
    srampool_end    = (uint32)&__heap_end;
18004e20:	1257      	lrw      	r2, 0x20043c00	// 18004f7c <SystemInit+0x164>
18004e22:	1278      	lrw      	r3, 0x20001ba8	// 18004f80 <SystemInit+0x168>
18004e24:	b340      	st.w      	r2, (r3, 0x0)
#if defined(PSRAM_HEAP)
    psrampool_start = (uint32)&__psram_heap_start;
18004e26:	1258      	lrw      	r2, 0x38000000	// 18004f84 <SystemInit+0x16c>
18004e28:	1278      	lrw      	r3, 0x20001ba4	// 18004f88 <SystemInit+0x170>
18004e2a:	b340      	st.w      	r2, (r3, 0x0)
    psrampool_end   = (uint32)&__psram_heap_end;
18004e2c:	1258      	lrw      	r2, 0x38400000	// 18004f8c <SystemInit+0x174>
18004e2e:	1279      	lrw      	r3, 0x20001ba0	// 18004f90 <SystemInit+0x178>
18004e30:	b340      	st.w      	r2, (r3, 0x0)
#endif

    extern uint32 g_intstackbase;
    *((int *)((uint32)&g_intstackbase)) = 0xDEADBEEF;
18004e32:	1259      	lrw      	r2, 0xdeadbeef	// 18004f94 <SystemInit+0x17c>
18004e34:	1279      	lrw      	r3, 0x20001328	// 18004f98 <SystemInit+0x180>
18004e36:	b340      	st.w      	r2, (r3, 0x0)
    __ASM volatile("mtcr %0, vbr" : : "r"(vbr) : "memory");
18004e38:	1279      	lrw      	r3, 0x18000000	// 18004f9c <SystemInit+0x184>
18004e3a:	c0036421 	mtcr      	r3, cr<1, 0>

    __set_VBR((uint32_t) & (__Vectors));

    SYSCTRL_REG_OPT_INIT();
18004e3e:	ea254002 	movih      	r5, 16386
18004e42:	1278      	lrw      	r3, 0xb3a2164c	// 18004fa0 <SystemInit+0x188>
18004e44:	b560      	st.w      	r3, (r5, 0x0)
18004e46:	1278      	lrw      	r3, 0x3fac87e4	// 18004fa4 <SystemInit+0x18c>
18004e48:	b560      	st.w      	r3, (r5, 0x0)

#if  SYS_CACHE_ENABLE
    cache_open();
18004e4a:	e3ffffab 	bsr      	0x18004da0	// 18004da0 <cache_open>
#endif
    
    sys_reset_detect();
18004e4e:	e0005d17 	bsr      	0x1801087c	// 1801087c <sys_reset_detect>
    sys_reset_pending_clr();
18004e52:	e0005db7 	bsr      	0x180109c0	// 180109c0 <sys_reset_pending_clr>

    sysctrl_efuse_pwron_init();
18004e56:	957e      	ld.w      	r3, (r5, 0x78)
18004e58:	ec630003 	ori      	r3, r3, 3
18004e5c:	b57e      	st.w      	r3, (r5, 0x78)
//        pmu_set_direct_run_pengding2();
//    } else {
//        pmu_clr_direct_run_pengding2();
//    }

    pmu_boot_direct_run_dis();
18004e5e:	ea058003 	movi      	r5, 32771
18004e62:	c5e54905 	rotli      	r5, r5, 15
18004e66:	1211      	lrw      	r0, 0x40018034	// 18004fa8 <SystemInit+0x190>
18004e68:	952d      	ld.w      	r1, (r5, 0x34)
18004e6a:	3980      	bclri      	r1, 0
18004e6c:	e0005cda 	bsr      	0x18010820	// 18010820 <pmu_reg_write>
    SET_SKIP_PSRAM_SIGN(0);
18004e70:	952d      	ld.w      	r1, (r5, 0x34)
18004e72:	3987      	bclri      	r1, 7
18004e74:	120d      	lrw      	r0, 0x40018034	// 18004fa8 <SystemInit+0x190>
18004e76:	e0005cd5 	bsr      	0x18010820	// 18010820 <pmu_reg_write>

    pmu_clr_deadcode_pending();
18004e7a:	952d      	ld.w      	r1, (r5, 0x34)
18004e7c:	3981      	bclri      	r1, 1
18004e7e:	120b      	lrw      	r0, 0x40018034	// 18004fa8 <SystemInit+0x190>
18004e80:	e0005cd0 	bsr      	0x18010820	// 18010820 <pmu_reg_write>

    mcu_watchdog_feed();
18004e84:	e0006288 	bsr      	0x18011394	// 18011394 <mcu_watchdog_feed>
    mcu_watchdog_timeout_level(4);
18004e88:	3004      	movi      	r0, 4
18004e8a:	e0006267 	bsr      	0x18011358	// 18011358 <mcu_watchdog_timeout_level>

//    sysctrl_err_resp_disable();
    sysctrl_cmu_init();
18004e8e:	e0006011 	bsr      	0x18010eb0	// 18010eb0 <sysctrl_cmu_init>

#ifndef FPGA_SUPPORT
    system_clock_init();
18004e92:	e3ffffb3 	bsr      	0x18004df8	// 18004df8 <system_clock_init>
#endif

    mcu_watchdog_feed();
18004e96:	e000627f 	bsr      	0x18011394	// 18011394 <mcu_watchdog_feed>
    SYSCTRL_REG_OPT_INIT();
18004e9a:	3400      	movi      	r4, 0
    mcu_watchdog_timeout_level(8);
18004e9c:	3008      	movi      	r0, 8
18004e9e:	e000625d 	bsr      	0x18011358	// 18011358 <mcu_watchdog_timeout_level>

    void hg_xspi_sample_offset(uint32 ospi_base, int8 rx_offset, int8 tx_offset);
    hg_xspi_sample_offset((uint32)HG_OSPI_BASE, -2, 0);
18004ea2:	6c53      	mov      	r1, r4
18004ea4:	6c93      	mov      	r2, r4
18004ea6:	2901      	subi      	r1, 2
18004ea8:	ea001000 	movi      	r0, 4096
18004eac:	38be      	bseti      	r0, 30
18004eae:	e0006b0d 	bsr      	0x180124c8	// 180124c8 <hg_xspi_sample_offset>
    pmu_vdd_core_set(3);
18004eb2:	3003      	movi      	r0, 3
18004eb4:	e0005e60 	bsr      	0x18010b74	// 18010b74 <pmu_vdd_core_set>
    __ASM volatile("mtcr %0, cr<15, 1>" : : "r"(sp) : "memory");
18004eb8:	117d      	lrw      	r3, 0x20001728	// 18004fac <SystemInit+0x194>
18004eba:	c023642f 	mtcr      	r3, cr<15, 1>
    __ASM volatile("mfcr %0, cr<31, 0>\n" :"=r"(result) : : "memory");
18004ebe:	c01f6023 	mfcr      	r3, cr<31, 0>

#if defined(CONFIG_SEPARATE_IRQ_SP) && !defined(CONFIG_KERNEL_NONE)
    /* 801 not supported */
    __set_Int_SP((uint32_t)&g_top_irqstack);
    __set_CHR(__get_CHR() | CHR_ISE_Msk);
18004ec2:	ec634000 	ori      	r3, r3, 16384
    __ASM volatile("mtcr %0, cr<31, 0>\n" : : "r"(chr) : "memory");
18004ec6:	c003643f 	mtcr      	r3, cr<31, 0>
    VIC->TSPR = 0xFF;
18004eca:	117a      	lrw      	r3, 0xe000e100	// 18004fb0 <SystemInit+0x198>
    VIC->ICER[0] = 0xFFFFFFFF;
18004ecc:	6c93      	mov      	r2, r4
18004ece:	2a00      	subi      	r2, 1
18004ed0:	31ff      	movi      	r1, 255
18004ed2:	dc2322c4 	st.w      	r1, (r3, 0xb10)
    VIC->IPR[_IP_IDX(IRQn)] = ((uint32_t)(VIC->IPR[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
18004ed6:	6c07      	mov      	r0, r1
    VIC->ICER[0] = 0xFFFFFFFF;
18004ed8:	dc432020 	st.w      	r2, (r3, 0x80)
                                 (((priority << (8U - __VIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
18004edc:	ea0c00e0 	movi      	r12, 224
    VIC->ICER[1] = 0xFFFFFFFF;
18004ee0:	dc432021 	st.w      	r2, (r3, 0x84)
    VIC->ICER[2] = 0xFFFFFFFF;
18004ee4:	dc432022 	st.w      	r2, (r3, 0x88)
    VIC->ICER[3] = 0xFFFFFFFF;
18004ee8:	dc432023 	st.w      	r2, (r3, 0x8c)
    VIC->ICPR[0] = 0xFFFFFFFF;
18004eec:	dc432060 	st.w      	r2, (r3, 0x180)
    VIC->ICPR[1] = 0xFFFFFFFF;
18004ef0:	dc432061 	st.w      	r2, (r3, 0x184)
    VIC->ICPR[2] = 0xFFFFFFFF;
18004ef4:	dc432062 	st.w      	r2, (r3, 0x188)
    VIC->ICPR[3] = 0xFFFFFFFF;
18004ef8:	dc432063 	st.w      	r2, (r3, 0x18c)
    VIC->IABR[0] = 0;
18004efc:	dc832080 	st.w      	r4, (r3, 0x200)
    VIC->IABR[1] = 0;
18004f00:	dc832081 	st.w      	r4, (r3, 0x204)
    VIC->IABR[2] = 0;
18004f04:	dc832082 	st.w      	r4, (r3, 0x208)
    VIC->IABR[3] = 0;
18004f08:	dc832083 	st.w      	r4, (r3, 0x20c)
18004f0c:	c4042821 	bclri      	r1, r4, 0
18004f10:	3981      	bclri      	r1, 1
18004f12:	1168      	lrw      	r3, 0xe000e100	// 18004fb0 <SystemInit+0x198>
18004f14:	604c      	addu      	r1, r3
    VIC->IPR[_IP_IDX(IRQn)] = ((uint32_t)(VIC->IPR[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
18004f16:	e4642003 	andi      	r3, r4, 3
18004f1a:	4363      	lsli      	r3, r3, 3
18004f1c:	d9a120c0 	ld.w      	r13, (r1, 0x300)
18004f20:	c4604022 	lsl      	r2, r0, r3
    /* Clear active and pending IRQ */
    csi_vic_disable_all_irq();
    csi_vic_clear_all_pending_irq();
    csi_vic_clear_all_active();
    /* All peripheral interrupt priority is set to lowest */
    for (uint32 i = 0; i < IRQ_NUM; i++) {
18004f24:	2400      	addi      	r4, 1
18004f26:	c44d2042 	andn      	r2, r13, r2
                                 (((priority << (8U - __VIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
18004f2a:	c46c4023 	lsl      	r3, r12, r3
18004f2e:	eb440048 	cmpnei      	r4, 72
    VIC->IPR[_IP_IDX(IRQn)] = ((uint32_t)(VIC->IPR[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
18004f32:	6cc8      	or      	r3, r2
18004f34:	dc6120c0 	st.w      	r3, (r1, 0x300)
18004f38:	0bea      	bt      	0x18004f0c	// 18004f0c <SystemInit+0xf4>

#ifdef CONFIG_KERNEL_NONE
    __enable_excp_irq();
#endif

    csi_coret_config(system_clock_get() / CONFIG_SYSTICK_HZ, CORET_IRQn);    //1ms
18004f3a:	e0006133 	bsr      	0x180111a0	// 180111a0 <system_clock_get>
18004f3e:	33fa      	movi      	r3, 250
18004f40:	4362      	lsli      	r3, r3, 2
18004f42:	c4608020 	divu      	r0, r0, r3
    if ((ticks - 1UL) > CORET_LOAD_RELOAD_Msk) {
18004f46:	2800      	subi      	r0, 1
18004f48:	c6e05023 	bmaski      	r3, 24
18004f4c:	640c      	cmphs      	r3, r0
18004f4e:	0c07      	bf      	0x18004f5c	// 18004f5c <SystemInit+0x144>
    CORET->LOAD = (uint32_t)(ticks - 1UL);                              /* set reload register */
18004f50:	1079      	lrw      	r3, 0xe000e010	// 18004fb4 <SystemInit+0x19c>
    CORET->VAL  = 0UL;                                                  /* Load the CORET Counter Value */
18004f52:	3200      	movi      	r2, 0
    CORET->LOAD = (uint32_t)(ticks - 1UL);                              /* set reload register */
18004f54:	b301      	st.w      	r0, (r3, 0x4)
    CORET->VAL  = 0UL;                                                  /* Load the CORET Counter Value */
18004f56:	b342      	st.w      	r2, (r3, 0x8)
    CORET->CTRL = CORET_CTRL_CLKSOURCE_Msk |
18004f58:	3207      	movi      	r2, 7
18004f5a:	b340      	st.w      	r2, (r3, 0x0)
    VIC->ISER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
18004f5c:	1095      	lrw      	r4, 0xe000e100	// 18004fb0 <SystemInit+0x198>
18004f5e:	3380      	movi      	r3, 128
18004f60:	4372      	lsli      	r3, r3, 18
18004f62:	b460      	st.w      	r3, (r4, 0x0)
#ifndef CONFIG_KERNEL_NONE
    csi_vic_enable_irq(CORET_IRQn);
#endif

    request_irq(LVD_IRQn, lvd_irq_handler, 0);
18004f64:	3200      	movi      	r2, 0
18004f66:	1035      	lrw      	r1, 0x18010b28	// 18004fb8 <SystemInit+0x1a0>
18004f68:	3020      	movi      	r0, 32
18004f6a:	e3fff3b9 	bsr      	0x180036dc	// 180036dc <request_irq>
18004f6e:	3301      	movi      	r3, 1
18004f70:	b461      	st.w      	r3, (r4, 0x4)
    irq_enable(LVD_IRQn);
}
18004f72:	1492      	pop      	r4-r5, r15
18004f74:	20001bac 	.long	0x20001bac
18004f78:	20002c7c 	.long	0x20002c7c
18004f7c:	20043c00 	.long	0x20043c00
18004f80:	20001ba8 	.long	0x20001ba8
18004f84:	38000000 	.long	0x38000000
18004f88:	20001ba4 	.long	0x20001ba4
18004f8c:	38400000 	.long	0x38400000
18004f90:	20001ba0 	.long	0x20001ba0
18004f94:	deadbeef 	.long	0xdeadbeef
18004f98:	20001328 	.long	0x20001328
18004f9c:	18000000 	.long	0x18000000
18004fa0:	b3a2164c 	.long	0xb3a2164c
18004fa4:	3fac87e4 	.long	0x3fac87e4
18004fa8:	40018034 	.long	0x40018034
18004fac:	20001728 	.long	0x20001728
18004fb0:	e000e100 	.long	0xe000e100
18004fb4:	e000e010 	.long	0xe000e010
18004fb8:	18010b28 	.long	0x18010b28

18004fbc <malloc_init>:

__init void malloc_init(void)
{
18004fbc:	14d0      	push      	r15
    uint32 flags = 0;
#ifdef MEM_TRACE
    flags |= SYSHEAP_FLAGS_MEM_LEAK_TRACE | SYSHEAP_FLAGS_MEM_OVERFLOW_CHECK;
#endif
    sram_heap.name = "sram";
18004fbe:	1008      	lrw      	r0, 0x200021f0	// 18004fdc <malloc_init+0x20>
    sysheap_init(&sram_heap, (void *)SYS_HEAP_START, SYS_HEAP_SIZE, flags);
18004fc0:	1028      	lrw      	r1, 0x20001bac	// 18004fe0 <malloc_init+0x24>
    sram_heap.name = "sram";
18004fc2:	1069      	lrw      	r3, 0x18017743	// 18004fe4 <malloc_init+0x28>
    sysheap_init(&sram_heap, (void *)SYS_HEAP_START, SYS_HEAP_SIZE, flags);
18004fc4:	32a0      	movi      	r2, 160
    sram_heap.name = "sram";
18004fc6:	b060      	st.w      	r3, (r0, 0x0)
    sysheap_init(&sram_heap, (void *)SYS_HEAP_START, SYS_HEAP_SIZE, flags);
18004fc8:	424a      	lsli      	r2, r2, 10
18004fca:	3300      	movi      	r3, 0
18004fcc:	9120      	ld.w      	r1, (r1, 0x0)
18004fce:	e000757f 	bsr      	0x18013acc	// 18013acc <sysheap_init>
#ifdef PSRAM_HEAP
    psram_heap.name = "psram";
18004fd2:	1066      	lrw      	r3, 0x20002220	// 18004fe8 <malloc_init+0x2c>
18004fd4:	1046      	lrw      	r2, 0x1801773b	// 18004fec <malloc_init+0x30>
18004fd6:	b340      	st.w      	r2, (r3, 0x0)
    //sysheap_init(&psram_heap, (void *)psrampool_start, psrampool_end - psrampool_start, flags);
#endif
}
18004fd8:	1490      	pop      	r15
18004fda:	0000      	.short	0x0000
18004fdc:	200021f0 	.long	0x200021f0
18004fe0:	20001bac 	.long	0x20001bac
18004fe4:	18017743 	.long	0x18017743
18004fe8:	20002220 	.long	0x20002220
18004fec:	1801773b 	.long	0x1801773b

18004ff0 <malloc_psram_init>:

__init void malloc_psram_init(void)
{
18004ff0:	14d0      	push      	r15
#ifdef PSRAM_HEAP
    uint32 flags = 0;
	flags |= SYSHEAP_FLAGS_MEM_ALIGN_16;
	sysheap_init(&psram_heap, (void *)psrampool_start, psrampool_end - psrampool_start, flags);
18004ff2:	1066      	lrw      	r3, 0x20001ba4	// 18005008 <malloc_psram_init+0x18>
18004ff4:	1006      	lrw      	r0, 0x20002220	// 1800500c <malloc_psram_init+0x1c>
18004ff6:	9320      	ld.w      	r1, (r3, 0x0)
18004ff8:	1066      	lrw      	r3, 0x20001ba0	// 18005010 <malloc_psram_init+0x20>
18004ffa:	9340      	ld.w      	r2, (r3, 0x0)
18004ffc:	6086      	subu      	r2, r1
18004ffe:	3304      	movi      	r3, 4
18005000:	e0007566 	bsr      	0x18013acc	// 18013acc <sysheap_init>
#endif

}
18005004:	1490      	pop      	r15
18005006:	0000      	.short	0x0000
18005008:	20001ba4 	.long	0x20001ba4
1800500c:	20002220 	.long	0x20002220
18005010:	20001ba0 	.long	0x20001ba0

18005014 <ota_msg_show>:
void ota_msg_show()
{
18005014:	14d2      	push      	r4-r5, r15
    os_printf("[OTA_MSG] OTA_NUM:%d\tota_version:%d\trun_addr:%X\n",pmu_get_boot_code_pos(),get_boot_svn_version(),get_boot_loader_addr());
18005016:	ea038003 	movi      	r3, 32771
1800501a:	c5e34903 	rotli      	r3, r3, 15
1800501e:	938d      	ld.w      	r4, (r3, 0x34)
18005020:	e0005948 	bsr      	0x180102b0	// 180102b0 <get_boot_svn_version>
18005024:	6d43      	mov      	r5, r0
18005026:	e0005923 	bsr      	0x1801026c	// 1801026c <get_boot_loader_addr>
1800502a:	6cc3      	mov      	r3, r0
1800502c:	6c97      	mov      	r2, r5
1800502e:	c4645461 	zext      	r1, r4, 3, 3
18005032:	1003      	lrw      	r0, 0x180165ce	// 1800503c <ota_msg_show+0x28>
18005034:	e0003d48 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
}
18005038:	1492      	pop      	r4-r5, r15
1800503a:	0000      	.short	0x0000
1800503c:	180165ce 	.long	0x180165ce

18005040 <pre_main>:

__init void pre_main(void)
{
18005040:	14d1      	push      	r4, r15
    sdk_version = SDK_VERSION;
18005042:	1160      	lrw      	r3, 0x20000ba0	// 180050c0 <pre_main+0x80>
18005044:	1140      	lrw      	r2, 0x2050107	// 180050c4 <pre_main+0x84>
18005046:	b340      	st.w      	r2, (r3, 0x0)
    svn_version = SVN_VERSION;
18005048:	ea027954 	movi      	r2, 31060
1800504c:	107f      	lrw      	r3, 0x20000ba4	// 180050c8 <pre_main+0x88>
    app_version = APP_VERSION;
1800504e:	3400      	movi      	r4, 0
    svn_version = SVN_VERSION;
18005050:	b340      	st.w      	r2, (r3, 0x0)
    app_version = APP_VERSION;
18005052:	107f      	lrw      	r3, 0x20002094	// 180050cc <pre_main+0x8c>
18005054:	b380      	st.w      	r4, (r3, 0x0)
    assert_holdup = ASSERT_HOLDUP;
18005056:	107f      	lrw      	r3, 0x2000213c	// 180050d0 <pre_main+0x90>
18005058:	a380      	st.b      	r4, (r3, 0x0)
    save_boot_loader_addr();
1800505a:	e00058dd 	bsr      	0x18010214	// 18010214 <save_boot_loader_addr>
    malloc_init();
1800505e:	e3ffffaf 	bsr      	0x18004fbc	// 18004fbc <malloc_init>
	malloc_psram_init();
18005062:	e3ffffc7 	bsr      	0x18004ff0	// 18004ff0 <malloc_psram_init>
    csi_kernel_init();
18005066:	e0003e61 	bsr      	0x1800cd28	// 1800cd28 <csi_kernel_init>
    dev_init();
1800506a:	e3ffeff9 	bsr      	0x1800305c	// 1800305c <dev_init>
    device_init();
1800506e:	e3ffedb1 	bsr      	0x18002bd0	// 18002bd0 <device_init>
#endif
#ifdef CONFIG_SLEEP
    sys_sleepdata_init();
#endif
    
    sysctrl_rst_lmac_phy();
18005072:	e0006199 	bsr      	0x180113a4	// 180113a4 <sysctrl_rst_lmac_phy>
    sysctrl_efuse_validity_handle();
18005076:	e0005ad5 	bsr      	0x18010620	// 18010620 <sysctrl_efuse_validity_handle>
    ota_msg_show();
1800507a:	e3ffffcd 	bsr      	0x18005014	// 18005014 <ota_msg_show>
	
	os_printf("PMUCON7=%08x\r\n", PMU->PMUCON7);
1800507e:	ea038003 	movi      	r3, 32771
18005082:	c5e34903 	rotli      	r3, r3, 15
18005086:	1014      	lrw      	r0, 0x18016600	// 180050d4 <pre_main+0x94>
18005088:	932d      	ld.w      	r1, (r3, 0x34)
1800508a:	e0003d1d 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    VERSION_SHOW();
1800508e:	1013      	lrw      	r0, 0x18016610	// 180050d8 <pre_main+0x98>
18005090:	e0003d1a 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    module_version_show();
18005094:	e00077a6 	bsr      	0x18013fe0	// 18013fe0 <module_version_show>
    sys_reset_show();
18005098:	e0005d0e 	bsr      	0x18010ab4	// 18010ab4 <sys_reset_show>
    os_workqueue_init(&main_wkq, "MAIN", OS_TASK_PRIORITY_NORMAL, 2048);
1800509c:	3380      	movi      	r3, 128
1800509e:	4364      	lsli      	r3, r3, 4
180050a0:	3230      	movi      	r2, 48
180050a2:	102f      	lrw      	r1, 0x18016657	// 180050dc <pre_main+0x9c>
180050a4:	100f      	lrw      	r0, 0x20002c20	// 180050e0 <pre_main+0xa0>
180050a6:	e0007d31 	bsr      	0x18014b08	// 18014b08 <os_workqueue_init>
    mainwkq_monitor_init();
180050aa:	e0007d1b 	bsr      	0x18014ae0	// 18014ae0 <mainwkq_monitor_init>
    os_run_func((os_run_func_t)main, 0, 0, 0);
180050ae:	6cd3      	mov      	r3, r4
180050b0:	6c93      	mov      	r2, r4
180050b2:	6c53      	mov      	r1, r4
180050b4:	100c      	lrw      	r0, 0x18002aa4	// 180050e4 <pre_main+0xa4>
180050b6:	e0007d8f 	bsr      	0x18014bd4	// 18014bd4 <os_run_func>
    csi_kernel_start();
180050ba:	e0003e41 	bsr      	0x1800cd3c	// 1800cd3c <csi_kernel_start>
}
180050be:	1491      	pop      	r4, r15
180050c0:	20000ba0 	.long	0x20000ba0
180050c4:	02050107 	.long	0x02050107
180050c8:	20000ba4 	.long	0x20000ba4
180050cc:	20002094 	.long	0x20002094
180050d0:	2000213c 	.long	0x2000213c
180050d4:	18016600 	.long	0x18016600
180050d8:	18016610 	.long	0x18016610
180050dc:	18016657 	.long	0x18016657
180050e0:	20002c20 	.long	0x20002c20
180050e4:	18002aa4 	.long	0x18002aa4

180050e8 <__delay_asm>:
  * @retval None
  * @note   for CK803 : period_count = 3*n+1
  */
__attribute__((noinline, naked)) void __delay_asm(uint32 n)
{
    __asm__("                   \
180050e8:	c4201020 	decgt      	r0, r0, 1
180050ec:	e860fffe 	bt      	0x180050e8	// 180050e8 <__delay_asm>
180050f0:	783c      	jmp      	r15
	...

180050f4 <delay_us>:
  * @param  n : the number of us to delay
  * @retval None
  * @note   only work for SYS_CLK
  */
void delay_us(uint32 n)
{
180050f4:	14d1      	push      	r4, r15
180050f6:	6d03      	mov      	r4, r0
    uint32 temp = sys_get_sysclk()/1000000*n;
180050f8:	e000604e 	bsr      	0x18011194	// 18011194 <sys_get_sysclk>
180050fc:	ea03f424 	movi      	r3, 62500
18005100:	c4834903 	rotli      	r3, r3, 4
18005104:	c4608040 	divs      	r0, r0, r3
18005108:	7c10      	mult      	r0, r4
    
    if(temp > 47) {
1800510a:	eb00002f 	cmphsi      	r0, 48
1800510e:	0c07      	bf      	0x1800511c	// 1800511c <delay_us+0x28>
        __delay_asm((temp - 47)/3);
18005110:	282e      	subi      	r0, 47
18005112:	3303      	movi      	r3, 3
18005114:	c4608020 	divu      	r0, r0, r3
18005118:	e3ffffe8 	bsr      	0x180050e8	// 180050e8 <__delay_asm>
    }
}
1800511c:	1491      	pop      	r4, r15
	...

18005120 <trap_c>:

void hgprintf(const char *fmt, ...);
#define trap_err(fmt,...) hgprintf(KERN_ERR fmt, ##__VA_ARGS__)

void trap_c(uint32_t *regs)
{
18005120:	14d4      	push      	r4-r7, r15
18005122:	6d43      	mov      	r5, r0
    __ASM volatile("mfcr %0, psr" : "=r"(result) : : "memory");
18005124:	c0006024 	mfcr      	r4, cr<0, 0>
    int i;
//    uint32_t *stack_top;
    uint32_t vec = (__get_PSR() & PSR_VEC_Msk) >> PSR_VEC_Pos;

    disable_print(0);
18005128:	3000      	movi      	r0, 0
1800512a:	e3ffef61 	bsr      	0x18002fec	// 18002fec <disable_print>
    print_level(8);
1800512e:	3008      	movi      	r0, 8
18005130:	e0003cc4 	bsr      	0x1800cab8	// 1800cab8 <print_level>
    trap_err("---------------------------------------------------------------\r\n");
18005134:	1018      	lrw      	r0, 0x1801665c	// 18005194 <trap_c+0x74>
18005136:	e0003cc7 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    trap_err("CPU Exception: NO.%u\r\n", vec);
1800513a:	c60456c1 	zext      	r1, r4, 22, 16
1800513e:	1017      	lrw      	r0, 0x180166a0	// 18005198 <trap_c+0x78>
18005140:	e0003cc2 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    for (i = 0; i < 16; i++) {
18005144:	3400      	movi      	r4, 0
        trap_err("r%d: %08x\t", i, regs[i]);
18005146:	10d6      	lrw      	r6, 0x180166b9	// 1800519c <trap_c+0x7c>
        if ((i % 4) == 3) {
            trap_err("\r\n");
18005148:	10f6      	lrw      	r7, 0x180166c6	// 180051a0 <trap_c+0x80>
        trap_err("r%d: %08x\t", i, regs[i]);
1800514a:	d0850882 	ldr.w      	r2, (r5, r4 << 2)
1800514e:	6c53      	mov      	r1, r4
18005150:	6c1b      	mov      	r0, r6
18005152:	e0003cb9 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
        if ((i % 4) == 3) {
18005156:	e4642003 	andi      	r3, r4, 3
1800515a:	3b43      	cmpnei      	r3, 3
1800515c:	0804      	bt      	0x18005164	// 18005164 <trap_c+0x44>
            trap_err("\r\n");
1800515e:	6c1f      	mov      	r0, r7
18005160:	e0003cb2 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    for (i = 0; i < 16; i++) {
18005164:	2400      	addi      	r4, 1
18005166:	3c50      	cmpnei      	r4, 16
18005168:	0bf1      	bt      	0x1800514a	// 1800514a <trap_c+0x2a>
        }
    }
    trap_err("r28 : %08x\r\n", regs[16]);
1800516a:	9530      	ld.w      	r1, (r5, 0x40)
1800516c:	100e      	lrw      	r0, 0x180166cb	// 180051a4 <trap_c+0x84>
1800516e:	e0003cab 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    trap_err("epsr: %08x\r\n", regs[17]);
18005172:	9531      	ld.w      	r1, (r5, 0x44)
18005174:	100d      	lrw      	r0, 0x180166da	// 180051a8 <trap_c+0x88>
18005176:	e0003ca7 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    trap_err("epc : %08x\r\n", regs[18]);
1800517a:	9532      	ld.w      	r1, (r5, 0x48)
1800517c:	100c      	lrw      	r0, 0x180166e9	// 180051ac <trap_c+0x8c>
1800517e:	e0003ca3 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    csi_kernel_task_dump((k_task_handle_t)g_active_task[0], (void* )regs[14]);
18005182:	106c      	lrw      	r3, 0x20002828	// 180051b0 <trap_c+0x90>
18005184:	952e      	ld.w      	r1, (r5, 0x38)
18005186:	9300      	ld.w      	r0, (r3, 0x0)
18005188:	e0003e58 	bsr      	0x1800ce38	// 1800ce38 <csi_kernel_task_dump>
    mcu_reset();
1800518c:	e0006096 	bsr      	0x180112b8	// 180112b8 <mcu_reset>
}
18005190:	1494      	pop      	r4-r7, r15
18005192:	0000      	.short	0x0000
18005194:	1801665c 	.long	0x1801665c
18005198:	180166a0 	.long	0x180166a0
1800519c:	180166b9 	.long	0x180166b9
180051a0:	180166c6 	.long	0x180166c6
180051a4:	180166cb 	.long	0x180166cb
180051a8:	180166da 	.long	0x180166da
180051ac:	180166e9 	.long	0x180166e9
180051b0:	20002828 	.long	0x20002828

180051b4 <hg_m2m_dma_get_free_ch>:
#include "osal/string.h"
#include "hal/dma.h"
#include "dev/dma/hg_m2m_dma.h"

static inline int32 hg_m2m_dma_get_free_ch(struct mem_dma_dev *dev, uint8 ch_fix)
{
180051b4:	14c1      	push      	r4
180051b6:	6cc7      	mov      	r3, r1
180051b8:	e9010003 	bez      	r1, 0x180051be	// 180051be <hg_m2m_dma_get_free_ch+0xa>
180051bc:	3301      	movi      	r3, 1
180051be:	74cc      	zextb      	r3, r3
    __ASM volatile("mfcr %0, psr" : "=r"(result) : : "memory");
180051c0:	c000602c 	mfcr      	r12, cr<0, 0>
    __ASM volatile("psrclr ie");
180051c4:	c0807020 	psrclr      	ie
180051c8:	ea0d0000 	movi      	r13, 0
    return !(result & 0x40);
180051cc:	e58c2040 	andi      	r12, r12, 64
    int32  ch = (ch_fix >= HG_M2M_DMA_NUM) ? (1) : ch_fix;
    uint32 flags = disable_irq();
    for (; ch>=0; ) {
        if (!(dev->busy_flag & BIT(ch))){
180051d0:	8054      	ld.b      	r2, (r0, 0x14)
180051d2:	e5ad1000 	subi      	r13, r13, 1
180051d6:	c4624044 	lsr      	r4, r2, r3
180051da:	e4842001 	andi      	r4, r4, 1
180051de:	e924000c 	bnez      	r4, 0x180051f6	// 180051f6 <hg_m2m_dma_get_free_ch+0x42>
            dev->busy_flag |= BIT(ch);
180051e2:	3101      	movi      	r1, 1
180051e4:	704c      	lsl      	r1, r3
180051e6:	6c84      	or      	r2, r1
180051e8:	a054      	st.b      	r2, (r0, 0x14)
        } else {
            ch--;
        }
    }
    
    enable_irq(flags);
180051ea:	e90c0004 	bez      	r12, 0x180051f2	// 180051f2 <hg_m2m_dma_get_free_ch+0x3e>
    __ASM volatile("psrset ie");
180051ee:	c0807420 	psrset      	ie
    return ch;
}
180051f2:	6c0f      	mov      	r0, r3
180051f4:	1481      	pop      	r4
        if (ch_fix < HG_M2M_DMA_NUM) {
180051f6:	3901      	cmphsi      	r1, 2
180051f8:	0c05      	bf      	0x18005202	// 18005202 <hg_m2m_dma_get_free_ch+0x4e>
            ch--;
180051fa:	2b00      	subi      	r3, 1
    for (; ch>=0; ) {
180051fc:	674e      	cmpne      	r3, r13
180051fe:	0bec      	bt      	0x180051d6	// 180051d6 <hg_m2m_dma_get_free_ch+0x22>
18005200:	07f5      	br      	0x180051ea	// 180051ea <hg_m2m_dma_get_free_ch+0x36>
            ch = -1;
18005202:	3300      	movi      	r3, 0
18005204:	2b00      	subi      	r3, 1
18005206:	07f2      	br      	0x180051ea	// 180051ea <hg_m2m_dma_get_free_ch+0x36>

18005208 <hg_m2m_dma_free_ch>:
    __ASM volatile("mfcr %0, psr" : "=r"(result) : : "memory");
18005208:	c0006022 	mfcr      	r2, cr<0, 0>
    __ASM volatile("psrclr ie");
1800520c:	c0807020 	psrclr      	ie

static inline void hg_m2m_dma_free_ch(struct mem_dma_dev *dev, int32 ch)
{    
    uint32 flags = disable_irq();
    dev->busy_flag &= ~ BIT(ch);
18005210:	3300      	movi      	r3, 0
18005212:	2b01      	subi      	r3, 2
18005214:	70c7      	rotl      	r3, r1
18005216:	8034      	ld.b      	r1, (r0, 0x14)
18005218:	68c4      	and      	r3, r1
1800521a:	a074      	st.b      	r3, (r0, 0x14)
    return !(result & 0x40);
1800521c:	e4622040 	andi      	r3, r2, 64
    enable_irq(flags);
18005220:	e9030004 	bez      	r3, 0x18005228	// 18005228 <hg_m2m_dma_free_ch+0x20>
    __ASM volatile("psrset ie");
18005224:	c0807420 	psrset      	ie
}
18005228:	783c      	jmp      	r15
	...

1800522c <hg_m2m_dma_get_status>:
static int32 hg_m2m_dma_get_status(struct dma_device *dma, uint32 chn)
{
    struct mem_dma_dev *dev = (struct mem_dma_dev *)dma;
    struct mem_dma_hw *hw  = (struct mem_dma_hw *)dev->hw;
    
    if (hw->dma_ch[chn].DMA_CON & HG_M2M_DMA_CON_DTE) {
1800522c:	331c      	movi      	r3, 28
1800522e:	7c4c      	mult      	r1, r3
    struct mem_dma_hw *hw  = (struct mem_dma_hw *)dev->hw;
18005230:	9043      	ld.w      	r2, (r0, 0xc)
    if (hw->dma_ch[chn].DMA_CON & HG_M2M_DMA_CON_DTE) {
18005232:	d0410820 	ldr.w      	r0, (r1, r2 << 0)
        return DMA_IN_PROGRESS;
    } else {
        return DMA_SUCCESS;
    }
}
18005236:	e4002001 	andi      	r0, r0, 1
1800523a:	783c      	jmp      	r15

1800523c <hg_m2m_dma_xfer>:
{
1800523c:	14d8      	push      	r4-r11, r15
1800523e:	1421      	subi      	r14, r14, 4
    uint32 val  = *((uint8 *)data->src);
18005240:	9161      	ld.w      	r3, (r1, 0x4)
	retry = count >> (8+(2*dev->dma1_status));
18005242:	80b5      	ld.b      	r5, (r0, 0x15)
    uint32 count = data->element_num * dma_element_size[data->element_per_width];
18005244:	0351      	lrw      	r2, 0x180166f8	// 1800547c <hg_m2m_dma_xfer+0x240>
    uint32 val  = *((uint8 *)data->src);
18005246:	83c0      	ld.b      	r6, (r3, 0x0)
	retry = count >> (8+(2*dev->dma1_status));
18005248:	e4a52001 	andi      	r5, r5, 1
    uint32 count = data->element_num * dma_element_size[data->element_per_width];
1800524c:	9165      	ld.w      	r3, (r1, 0x14)
1800524e:	d0620029 	ldr.b      	r9, (r2, r3 << 0)
	retry = count >> (8+(2*dev->dma1_status));
18005252:	2503      	addi      	r5, 4
    uint32 count = data->element_num * dma_element_size[data->element_per_width];
18005254:	9146      	ld.w      	r2, (r1, 0x18)
    if (data->element_per_width >= DMA_SLAVE_BUSWIDTH_UNDEFINED) {
18005256:	3b03      	cmphsi      	r3, 4
    uint32 count = data->element_num * dma_element_size[data->element_per_width];
18005258:	7e48      	mult      	r9, r2
	retry = count >> (8+(2*dev->dma1_status));
1800525a:	6154      	addu      	r5, r5
    struct mem_dma_hw *hw  = (struct mem_dma_hw *)dev->hw;
1800525c:	9043      	ld.w      	r2, (r0, 0xc)
{
1800525e:	6e03      	mov      	r8, r0
18005260:	6d07      	mov      	r4, r1
    struct mem_dma_hw *hw  = (struct mem_dma_hw *)dev->hw;
18005262:	b840      	st.w      	r2, (r14, 0x0)
	retry = count >> (8+(2*dev->dma1_status));
18005264:	c4a94045 	lsr      	r5, r9, r5
    if (data->element_per_width >= DMA_SLAVE_BUSWIDTH_UNDEFINED) {
18005268:	0905      	bt      	0x18005472	// 18005472 <hg_m2m_dma_xfer+0x236>
    } while (retry--);
1800526a:	3700      	movi      	r7, 0
           ch = hg_m2m_dma_get_free_ch(dev, ch0_lock ? 1 : HG_M2M_DMA_NUM);
1800526c:	ea8b0085 	lrw      	r11, 0x20001bb0	// 18005480 <hg_m2m_dma_xfer+0x244>
    } while (retry--);
18005270:	2f00      	subi      	r7, 1
        if (data->dir != DMA_XFER_DIR_M2M) {
18005272:	8450      	ld.b      	r2, (r4, 0x10)
18005274:	e4422007 	andi      	r2, r2, 7
18005278:	3a41      	cmpnei      	r2, 1
1800527a:	0c40      	bf      	0x180052fa	// 180052fa <hg_m2m_dma_xfer+0xbe>
            ch = hg_m2m_dma_get_free_ch(dev, 0);
1800527c:	3100      	movi      	r1, 0
1800527e:	6c23      	mov      	r0, r8
18005280:	e3ffff9a 	bsr      	0x180051b4	// 180051b4 <hg_m2m_dma_get_free_ch>
18005284:	6e83      	mov      	r10, r0
            if (0 == ch)
18005286:	e9200043 	bnez      	r0, 0x1800530c	// 1800530c <hg_m2m_dma_xfer+0xd0>
                ch0_lock = 1;
1800528a:	137e      	lrw      	r3, 0x20001bb0	// 18005480 <hg_m2m_dma_xfer+0x244>
1800528c:	3201      	movi      	r2, 1
1800528e:	b340      	st.w      	r2, (r3, 0x0)
    uint32 dst_addr = data->dest>>24;
18005290:	9440      	ld.w      	r2, (r4, 0x0)
18005292:	4a78      	lsri      	r3, r2, 24
    if (dst_addr == 0x38 || dst_addr == 0x08) {
18005294:	eb430038 	cmpnei      	r3, 56
18005298:	0c03      	bf      	0x1800529e	// 1800529e <hg_m2m_dma_xfer+0x62>
1800529a:	3b48      	cmpnei      	r3, 8
1800529c:	0810      	bt      	0x180052bc	// 180052bc <hg_m2m_dma_xfer+0x80>
        SCHED->CTRL_CON &= ~(BIT(6));
    }
}

__STATIC_INLINE int32 ll_sysctrl_dma2ahb_is_busy(enum sysctrl_dma2ahb_burst_chanel ch) {
    return (SCHED->FIFO_EN & BIT(ch));
1800529e:	3119      	movi      	r1, 25
180052a0:	eb4a0000 	cmpnei      	r10, 0
180052a4:	3317      	movi      	r3, 23
180052a6:	c4610c40 	inct      	r3, r1, 0
180052aa:	3101      	movi      	r1, 1
180052ac:	704c      	lsl      	r1, r3
180052ae:	ea002000 	movi      	r0, 8192
180052b2:	38be      	bseti      	r0, 30
180052b4:	906b      	ld.w      	r3, (r0, 0x2c)
180052b6:	68c4      	and      	r3, r1
        while(ll_sysctrl_dma2ahb_is_busy((ch) ? (DMA2AHB_BURST_CH_M2M1_WR) : (DMA2AHB_BURST_CH_M2M0_WR)));
180052b8:	e923fffe 	bnez      	r3, 0x180052b4	// 180052b4 <hg_m2m_dma_xfer+0x78>
    if (data->src_addr_mode == DMA_XFER_MODE_BLKCPY)
180052bc:	840b      	ld.b      	r0, (r4, 0xb)
180052be:	e4002030 	andi      	r0, r0, 48
180052c2:	eb400020 	cmpnei      	r0, 32
180052c6:	311c      	movi      	r1, 28
180052c8:	087e      	bt      	0x180053c4	// 180053c4 <hg_m2m_dma_xfer+0x188>
    struct mem_dma_hw *hw  = (struct mem_dma_hw *)dev->hw;
180052ca:	d8682003 	ld.w      	r3, (r8, 0xc)
    hw->dma_ch[ch].DMA_DATA  = 0;
180052ce:	7c68      	mult      	r1, r10
180052d0:	60c4      	addu      	r3, r1
    for (int i = 0; i < data->blk_height; i++)
180052d2:	8c05      	ld.h      	r0, (r4, 0xa)
    hw->dma_ch[ch].DMA_DATA  = 0;
180052d4:	3100      	movi      	r1, 0
180052d6:	b322      	st.w      	r1, (r3, 0x8)
    for (int i = 0; i < data->blk_height; i++)
180052d8:	e4002fff 	andi      	r0, r0, 4095
    uint32 dst_step = 0;
180052dc:	6f07      	mov      	r12, r1
    uint32 src_step = 0;
180052de:	6f47      	mov      	r13, r1
        hw->dma_ch[ch].DMA_TADR  = (uint32)(data->dest + dst_step);
180052e0:	e4c3000f 	addi      	r6, r3, 16
        hw->dma_ch[ch].DMA_SADR  = (uint32)(data->src  + src_step);
180052e4:	e4e3000b 	addi      	r7, r3, 12
        hw->dma_ch[ch].DMA_DLEN  = data->blk_width - 1;
180052e8:	e5230013 	addi      	r9, r3, 20
    for (int i = 0; i < data->blk_height; i++)
180052ec:	6405      	cmplt      	r1, r0
180052ee:	084a      	bt      	0x18005382	// 18005382 <hg_m2m_dma_xfer+0x146>
    hg_m2m_dma_free_ch(dev, ch);
180052f0:	6c6b      	mov      	r1, r10
180052f2:	6c23      	mov      	r0, r8
180052f4:	e3ffff8a 	bsr      	0x18005208	// 18005208 <hg_m2m_dma_free_ch>
        return hw_blkcpy(data, dev, ch);
180052f8:	0419      	br      	0x1800532a	// 1800532a <hg_m2m_dma_xfer+0xee>
           ch = hg_m2m_dma_get_free_ch(dev, ch0_lock ? 1 : HG_M2M_DMA_NUM);
180052fa:	d84b2000 	ld.w      	r2, (r11, 0x0)
180052fe:	3a40      	cmpnei      	r2, 0
18005300:	6443      	mvcv      	r1
18005302:	2100      	addi      	r1, 1
18005304:	6c23      	mov      	r0, r8
18005306:	e3ffff57 	bsr      	0x180051b4	// 180051b4 <hg_m2m_dma_get_free_ch>
1800530a:	6e83      	mov      	r10, r0
        if (ch >= 0) {
1800530c:	e9aaffc2 	bhsz      	r10, 0x18005290	// 18005290 <hg_m2m_dma_xfer+0x54>
    } while (retry--);
18005310:	2d00      	subi      	r5, 1
18005312:	65d6      	cmpne      	r5, r7
18005314:	0baf      	bt      	0x18005272	// 18005272 <hg_m2m_dma_xfer+0x36>
        if (data->src_addr_mode == DMA_XFER_MODE_RECYCLE) {
18005316:	846b      	ld.b      	r3, (r4, 0xb)
18005318:	e4632030 	andi      	r3, r3, 48
1800531c:	3b50      	cmpnei      	r3, 16
1800531e:	0809      	bt      	0x18005330	// 18005330 <hg_m2m_dma_xfer+0xf4>
            os_memset((void*)data->dest, val, count);
18005320:	6ca7      	mov      	r2, r9
18005322:	6c5b      	mov      	r1, r6
18005324:	9400      	ld.w      	r0, (r4, 0x0)
18005326:	e00085a1 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
}
1800532a:	6c2b      	mov      	r0, r10
1800532c:	1401      	addi      	r14, r14, 4
1800532e:	1498      	pop      	r4-r11, r15
        } else if(data->src_addr_mode == DMA_XFER_MODE_INCREASE){
18005330:	e903001e 	bez      	r3, 0x1800536c	// 1800536c <hg_m2m_dma_xfer+0x130>
18005334:	3300      	movi      	r3, 0
18005336:	6f4f      	mov      	r13, r3
18005338:	6f0f      	mov      	r12, r3
    for (int i = 0; i < data->blk_height; i++)
1800533a:	8c45      	ld.h      	r2, (r4, 0xa)
1800533c:	e4422fff 	andi      	r2, r2, 4095
18005340:	648d      	cmplt      	r3, r2
18005342:	0ff4      	bf      	0x1800532a	// 1800532a <hg_m2m_dma_xfer+0xee>
        src_step += data->src_width;
18005344:	8c26      	ld.h      	r1, (r4, 0xc)
18005346:	e4212fff 	andi      	r1, r1, 4095
        src = (uint8 *)data->src + src_step;
1800534a:	9401      	ld.w      	r0, (r4, 0x4)
1800534c:	6030      	addu      	r0, r12
        dst = (uint8 *)data->dest + dst_step;
1800534e:	9440      	ld.w      	r2, (r4, 0x0)
        src_step += data->src_width;
18005350:	6304      	addu      	r12, r1
        dst_step += data->dst_width;
18005352:	9423      	ld.w      	r1, (r4, 0xc)
        dst = (uint8 *)data->dest + dst_step;
18005354:	60b4      	addu      	r2, r13
        dst_step += data->dst_width;
18005356:	c58156e1 	zext      	r1, r1, 23, 12
1800535a:	6344      	addu      	r13, r1
            *dst++ = *src++;
1800535c:	600a      	subu      	r0, r2
        dst_step += data->dst_width;
1800535e:	6c4b      	mov      	r1, r2
        for (int j = 0; j < data->blk_width; j++) {
18005360:	59a9      	subu      	r5, r1, r2
18005362:	8cc4      	ld.h      	r6, (r4, 0x8)
18005364:	6595      	cmplt      	r5, r6
18005366:	0809      	bt      	0x18005378	// 18005378 <hg_m2m_dma_xfer+0x13c>
    for (int i = 0; i < data->blk_height; i++)
18005368:	2300      	addi      	r3, 1
1800536a:	07e8      	br      	0x1800533a	// 1800533a <hg_m2m_dma_xfer+0xfe>
            os_memcpy((void*)data->dest, (void*)data->src, count);
1800536c:	6ca7      	mov      	r2, r9
1800536e:	9421      	ld.w      	r1, (r4, 0x4)
18005370:	9400      	ld.w      	r0, (r4, 0x0)
18005372:	e0008575 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
18005376:	07da      	br      	0x1800532a	// 1800532a <hg_m2m_dma_xfer+0xee>
            *dst++ = *src++;
18005378:	d0200025 	ldr.b      	r5, (r0, r1 << 0)
1800537c:	a1a0      	st.b      	r5, (r1, 0x0)
1800537e:	2100      	addi      	r1, 1
18005380:	07f0      	br      	0x18005360	// 18005360 <hg_m2m_dma_xfer+0x124>
        hw->dma_ch[ch].DMA_CON  &= HG_M2M_DMA_CON_ENDIAN_RES;
18005382:	93a0      	ld.w      	r5, (r3, 0x0)
18005384:	e4a52018 	andi      	r5, r5, 24
18005388:	b3a0      	st.w      	r5, (r3, 0x0)
        hw->dma_ch[ch].DMA_TADR  = (uint32)(data->dest + dst_step);
1800538a:	c5820025 	addu      	r5, r2, r12
1800538e:	b6a0      	st.w      	r5, (r6, 0x0)
        hw->dma_ch[ch].DMA_SADR  = (uint32)(data->src  + src_step);
18005390:	94a1      	ld.w      	r5, (r4, 0x4)
18005392:	6174      	addu      	r5, r13
18005394:	b7a0      	st.w      	r5, (r7, 0x0)
        hw->dma_ch[ch].DMA_DLEN  = data->blk_width - 1;
18005396:	8ca4      	ld.h      	r5, (r4, 0x8)
18005398:	2d00      	subi      	r5, 1
1800539a:	dca92000 	st.w      	r5, (r9, 0x0)
        hw->dma_ch[ch].DMA_CON  |= (HG_M2M_DMA_CON_MEMCPY | HG_M2M_DMA_CON_DTE);
1800539e:	93a0      	ld.w      	r5, (r3, 0x0)
180053a0:	eca50001 	ori      	r5, r5, 1
180053a4:	b3a0      	st.w      	r5, (r3, 0x0)
        src_step += data->src_width;
180053a6:	8ca6      	ld.h      	r5, (r4, 0xc)
180053a8:	e4a52fff 	andi      	r5, r5, 4095
180053ac:	6354      	addu      	r13, r5
        dst_step += data->dst_width;
180053ae:	94a3      	ld.w      	r5, (r4, 0xc)
180053b0:	c58556e5 	zext      	r5, r5, 23, 12
180053b4:	6314      	addu      	r12, r5
        while(hw->dma_ch[ch].DMA_CON & HG_M2M_DMA_CON_DTE);
180053b6:	93a0      	ld.w      	r5, (r3, 0x0)
180053b8:	e4a52001 	andi      	r5, r5, 1
180053bc:	e925fffd 	bnez      	r5, 0x180053b6	// 180053b6 <hg_m2m_dma_xfer+0x17a>
    for (int i = 0; i < data->blk_height; i++)
180053c0:	2100      	addi      	r1, 1
180053c2:	0795      	br      	0x180052ec	// 180052ec <hg_m2m_dma_xfer+0xb0>
180053c4:	c42a8423 	mult      	r3, r10, r1
180053c8:	9820      	ld.w      	r1, (r14, 0x0)
180053ca:	604c      	addu      	r1, r3
180053cc:	6cc7      	mov      	r3, r1
    hw->dma_ch[ch].DMA_CON  &= HG_M2M_DMA_CON_ENDIAN_RES;
180053ce:	9120      	ld.w      	r1, (r1, 0x0)
180053d0:	e4212018 	andi      	r1, r1, 24
180053d4:	b320      	st.w      	r1, (r3, 0x0)
        dma_cnt = (count > (64<<10)) ? (64<<10) : (count);
180053d6:	ea0c0080 	movi      	r12, 128
    hw->dma_ch[ch].DMA_ISIZE = 0;
180053da:	3100      	movi      	r1, 0
180053dc:	b326      	st.w      	r1, (r3, 0x18)
        hw->dma_ch[ch].DMA_TADR = (uint32)data->dest + addr_offset;
180053de:	e4a3000f 	addi      	r5, r3, 16
    hw->dma_ch[ch].DMA_DATA = val;
180053e2:	b3c2      	st.w      	r6, (r3, 0x8)
        dma_cnt = (count > (64<<10)) ? (64<<10) : (count);
180053e4:	c52c482c 	lsli      	r12, r12, 9
        hw->dma_ch[ch].DMA_SADR = (uint32)data->src  + addr_offset;
180053e8:	e4c3000b 	addi      	r6, r3, 12
        hw->dma_ch[ch].DMA_DLEN = dma_cnt - 1;
180053ec:	e4e30013 	addi      	r7, r3, 20
    while(count)
180053f0:	e9290018 	bnez      	r9, 0x18005420	// 18005420 <hg_m2m_dma_xfer+0x1e4>
    hg_m2m_dma_free_ch(dev, ch);
180053f4:	6c6b      	mov      	r1, r10
180053f6:	6c23      	mov      	r0, r8
180053f8:	e3ffff08 	bsr      	0x18005208	// 18005208 <hg_m2m_dma_free_ch>
    if(ch && dev->dma1_mutex && !dev->dma1_status)
180053fc:	e90aff97 	bez      	r10, 0x1800532a	// 1800532a <hg_m2m_dma_xfer+0xee>
18005400:	d8680015 	ld.b      	r3, (r8, 0x15)
18005404:	e4432003 	andi      	r2, r3, 3
18005408:	3a42      	cmpnei      	r2, 2
1800540a:	0b90      	bt      	0x1800532a	// 1800532a <hg_m2m_dma_xfer+0xee>
        dev->dma1_status = true;
1800540c:	3201      	movi      	r2, 1
1800540e:	c4625c00 	ins      	r3, r2, 0, 0
18005412:	dc680015 	st.b      	r3, (r8, 0x15)
        hg_m2m_dma_get_free_ch(dev, ch);
18005416:	7468      	zextb      	r1, r10
18005418:	6c23      	mov      	r0, r8
1800541a:	e3fffecd 	bsr      	0x180051b4	// 180051b4 <hg_m2m_dma_get_free_ch>
1800541e:	0786      	br      	0x1800532a	// 1800532a <hg_m2m_dma_xfer+0xee>
        hw->dma_ch[ch].DMA_TADR = (uint32)data->dest + addr_offset;
18005420:	c441002d 	addu      	r13, r1, r2
18005424:	dda52000 	st.w      	r13, (r5, 0x0)
        hw->dma_ch[ch].DMA_SADR = (uint32)data->src  + addr_offset;
18005428:	d9a42001 	ld.w      	r13, (r4, 0x4)
1800542c:	6344      	addu      	r13, r1
        dma_cnt = (count > (64<<10)) ? (64<<10) : (count);
1800542e:	6670      	cmphs      	r12, r9
        hw->dma_ch[ch].DMA_SADR = (uint32)data->src  + addr_offset;
18005430:	dda62000 	st.w      	r13, (r6, 0x0)
        dma_cnt = (count > (64<<10)) ? (64<<10) : (count);
18005434:	6f73      	mov      	r13, r12
18005436:	c5a90c40 	inct      	r13, r9, 0
        if (data->src_addr_mode == DMA_XFER_MODE_RECYCLE) {
1800543a:	3850      	cmpnei      	r0, 16
        hw->dma_ch[ch].DMA_DLEN = dma_cnt - 1;
1800543c:	e56d1000 	subi      	r11, r13, 1
18005440:	dd672000 	st.w      	r11, (r7, 0x0)
        count       -= dma_cnt;
18005444:	6276      	subu      	r9, r13
        addr_offset += dma_cnt;
18005446:	6074      	addu      	r1, r13
        if (data->src_addr_mode == DMA_XFER_MODE_RECYCLE) {
18005448:	080e      	bt      	0x18005464	// 18005464 <hg_m2m_dma_xfer+0x228>
            hw->dma_ch[ch].DMA_CON  |= (HG_M2M_DMA_CON_MEMSET | HG_M2M_DMA_CON_DTE);
1800544a:	d9a32000 	ld.w      	r13, (r3, 0x0)
1800544e:	edad0003 	ori      	r13, r13, 3
            hw->dma_ch[ch].DMA_CON  |= (HG_M2M_DMA_CON_MEMCPY | HG_M2M_DMA_CON_DTE);
18005452:	dda32000 	st.w      	r13, (r3, 0x0)
        while (hw->dma_ch[ch].DMA_CON & HG_M2M_DMA_CON_DTE);
18005456:	d9a32000 	ld.w      	r13, (r3, 0x0)
1800545a:	e5ad2001 	andi      	r13, r13, 1
1800545e:	e92dfffc 	bnez      	r13, 0x18005456	// 18005456 <hg_m2m_dma_xfer+0x21a>
18005462:	07c7      	br      	0x180053f0	// 180053f0 <hg_m2m_dma_xfer+0x1b4>
        } else if(data->src_addr_mode == DMA_XFER_MODE_INCREASE){
18005464:	e920fff9 	bnez      	r0, 0x18005456	// 18005456 <hg_m2m_dma_xfer+0x21a>
            hw->dma_ch[ch].DMA_CON  |= (HG_M2M_DMA_CON_MEMCPY | HG_M2M_DMA_CON_DTE);
18005468:	d9a32000 	ld.w      	r13, (r3, 0x0)
1800546c:	edad0001 	ori      	r13, r13, 1
18005470:	07f1      	br      	0x18005452	// 18005452 <hg_m2m_dma_xfer+0x216>
        return -EBUSY;
18005472:	ea0a0000 	movi      	r10, 0
18005476:	e54a100f 	subi      	r10, r10, 16
1800547a:	0758      	br      	0x1800532a	// 1800532a <hg_m2m_dma_xfer+0xee>
1800547c:	180166f8 	.long	0x180166f8
18005480:	20001bb0 	.long	0x20001bb0

18005484 <hg_m2m_dma_ioctl>:

static int32 hg_m2m_dma_ioctl(struct dma_device *dma, uint32 cmd, int32 param1, int32 param2)
{
18005484:	14d2      	push      	r4-r5, r15
    int32 ret_val = RET_OK;
   
    switch (cmd)
18005486:	3941      	cmpnei      	r1, 1
{
18005488:	6d03      	mov      	r4, r0
    switch (cmd)
1800548a:	0c1a      	bf      	0x180054be	// 180054be <hg_m2m_dma_ioctl+0x3a>
1800548c:	3940      	cmpnei      	r1, 0
1800548e:	0c09      	bf      	0x180054a0	// 180054a0 <hg_m2m_dma_ioctl+0x1c>
18005490:	3942      	cmpnei      	r1, 2
18005492:	0c1a      	bf      	0x180054c6	// 180054c6 <hg_m2m_dma_ioctl+0x42>
18005494:	3943      	cmpnei      	r1, 3
18005496:	0c32      	bf      	0x180054fa	// 180054fa <hg_m2m_dma_ioctl+0x76>
            break;
        };
#endif
        
        default:
            ret_val = -ENOTSUPP;
18005498:	ea01020b 	movi      	r1, 523
1800549c:	6c46      	nor      	r1, r1
            break;
    }
    return ret_val;
1800549e:	040e      	br      	0x180054ba	// 180054ba <hg_m2m_dma_ioctl+0x36>
			struct mem_dma_hw  *hw  = (struct mem_dma_hw  *)dev->hw;
180054a0:	9003      	ld.w      	r0, (r0, 0xc)
            hw->dma_ch[0].DMA_CON = ((hw->dma_ch[0].DMA_CON & (~HG_M2M_DMA_CON_ENDIAN_RES)) | HG_M2M_DMA_CON_ENDIAN_SET(param1));
180054a2:	c462482c 	lsli      	r12, r2, 3
180054a6:	9060      	ld.w      	r3, (r0, 0x0)
180054a8:	3b83      	bclri      	r3, 3
180054aa:	3b84      	bclri      	r3, 4
180054ac:	6cf0      	or      	r3, r12
180054ae:	b060      	st.w      	r3, (r0, 0x0)
            hw->dma_ch[1].DMA_CON = ((hw->dma_ch[1].DMA_CON & (~HG_M2M_DMA_CON_ENDIAN_RES)) | HG_M2M_DMA_CON_ENDIAN_SET(param1));
180054b0:	9047      	ld.w      	r2, (r0, 0x1c)
180054b2:	3a83      	bclri      	r2, 3
180054b4:	3a84      	bclri      	r2, 4
180054b6:	6cb0      	or      	r2, r12
180054b8:	b047      	st.w      	r2, (r0, 0x1c)
}
180054ba:	6c07      	mov      	r0, r1
180054bc:	1492      	pop      	r4-r5, r15
            ret_val = dev->dma1_status;
180054be:	8035      	ld.b      	r1, (r0, 0x15)
180054c0:	e4212001 	andi      	r1, r1, 1
            break;
180054c4:	07fb      	br      	0x180054ba	// 180054ba <hg_m2m_dma_ioctl+0x36>
            int32 ch = hg_m2m_dma_get_free_ch(dev, 1);
180054c6:	3101      	movi      	r1, 1
180054c8:	e3fffe76 	bsr      	0x180051b4	// 180051b4 <hg_m2m_dma_get_free_ch>
180054cc:	6d43      	mov      	r5, r0
            if(ch)
180054ce:	e900000e 	bez      	r0, 0x180054ea	// 180054ea <hg_m2m_dma_ioctl+0x66>
                dev->dma1_status = true;
180054d2:	8475      	ld.b      	r3, (r4, 0x15)
180054d4:	3201      	movi      	r2, 1
180054d6:	c4625c00 	ins      	r3, r2, 0, 0
                dev->dma1_status = false;
180054da:	a475      	st.b      	r3, (r4, 0x15)
            dev->dma1_mutex = true;
180054dc:	8475      	ld.b      	r3, (r4, 0x15)
180054de:	3201      	movi      	r2, 1
180054e0:	c4625c01 	ins      	r3, r2, 1, 1
180054e4:	a475      	st.b      	r3, (r4, 0x15)
180054e6:	3100      	movi      	r1, 0
180054e8:	07e9      	br      	0x180054ba	// 180054ba <hg_m2m_dma_ioctl+0x36>
                hg_m2m_dma_free_ch(dev, ch);
180054ea:	6c43      	mov      	r1, r0
180054ec:	6c13      	mov      	r0, r4
180054ee:	e3fffe8d 	bsr      	0x18005208	// 18005208 <hg_m2m_dma_free_ch>
                dev->dma1_status = false;
180054f2:	8475      	ld.b      	r3, (r4, 0x15)
180054f4:	c4655c00 	ins      	r3, r5, 0, 0
180054f8:	07f1      	br      	0x180054da	// 180054da <hg_m2m_dma_ioctl+0x56>
            hg_m2m_dma_free_ch(dev, 1);
180054fa:	3101      	movi      	r1, 1
180054fc:	e3fffe86 	bsr      	0x18005208	// 18005208 <hg_m2m_dma_free_ch>
            dev->dma1_mutex  = false;
18005500:	8475      	ld.b      	r3, (r4, 0x15)
18005502:	3100      	movi      	r1, 0
            dev->dma1_status = false;
18005504:	e46320fd 	andi      	r3, r3, 253
18005508:	c4615c00 	ins      	r3, r1, 0, 0
1800550c:	a475      	st.b      	r3, (r4, 0x15)
            break;
1800550e:	07d6      	br      	0x180054ba	// 180054ba <hg_m2m_dma_ioctl+0x36>

18005510 <hg_m2m_dma_dev_attach>:
    .get_status           = hg_m2m_dma_get_status,
    .ioctl                = hg_m2m_dma_ioctl,
};

__init int32 hg_m2m_dma_dev_attach(uint32 dev_id, struct mem_dma_dev *p_dma)
{
18005510:	14d1      	push      	r4, r15
    p_dma->dev.dev.ops = (const struct devobj_ops *)&m2m_ops;
18005512:	1048      	lrw      	r2, 0x180166fc	// 18005530 <hg_m2m_dma_dev_attach+0x20>
    p_dma->busy_flag = 0;
    p_dma->hw->dma_ch[0].DMA_CON  = 0x00;
18005514:	3400      	movi      	r4, 0
    p_dma->dev.dev.ops = (const struct devobj_ops *)&m2m_ops;
18005516:	b142      	st.w      	r2, (r1, 0x8)
    p_dma->hw->dma_ch[0].DMA_CON  = 0x00;
18005518:	9163      	ld.w      	r3, (r1, 0xc)
    p_dma->busy_flag = 0;
1800551a:	3200      	movi      	r2, 0
1800551c:	a154      	st.b      	r2, (r1, 0x14)
    p_dma->hw->dma_ch[0].DMA_SAIE = HG_M2M_DMA_SAIE_TCP_PENDING;
1800551e:	3201      	movi      	r2, 1
    p_dma->hw->dma_ch[0].DMA_CON  = 0x00;
18005520:	b380      	st.w      	r4, (r3, 0x0)
    p_dma->hw->dma_ch[0].DMA_SAIE = HG_M2M_DMA_SAIE_TCP_PENDING;
18005522:	b341      	st.w      	r2, (r3, 0x4)
    p_dma->hw->dma_ch[1].DMA_CON  = 0x00;
18005524:	b387      	st.w      	r4, (r3, 0x1c)
    p_dma->hw->dma_ch[1].DMA_SAIE = HG_M2M_DMA_SAIE_TCP_PENDING;
18005526:	b348      	st.w      	r2, (r3, 0x20)
    dev_register(dev_id, (struct dev_obj *)p_dma);
18005528:	e3ffedbe 	bsr      	0x180030a4	// 180030a4 <dev_register>
    return RET_OK;
}
1800552c:	6c13      	mov      	r0, r4
1800552e:	1491      	pop      	r4, r15
18005530:	180166fc 	.long	0x180166fc

18005534 <hggpio_v4_iomap_output>:
    return hggpio_v4_set_pull(reg, pin, mode_tmp, level);
}


///////////////////////////////attch function///////////////////////
static int32 hggpio_v4_iomap_output(struct gpio_device *gpio, uint32 pin, enum gpio_iomap_out_func iomap_out_func_sel) {
18005534:	14c2      	push      	r4-r5
    struct hggpio_v4_hw *hw      = (struct hggpio_v4_hw *)dev->hw;
    uint32 iomap_out_pin_pos     = 0;
    uint32 mode_pin_pos          = 0;
    volatile uint32 *operate_ptr = &(hw->IOFUNCOUTCON0);

    if (pin < dev->pin_num[0] || pin > dev->pin_num[1]) {
18005536:	d9a02025 	ld.w      	r13, (r0, 0x94)
1800553a:	6744      	cmphs      	r1, r13
    struct hggpio_v4_hw *hw      = (struct hggpio_v4_hw *)dev->hw;
1800553c:	d9802003 	ld.w      	r12, (r0, 0xc)
    volatile uint32 *operate_ptr = &(hw->IOFUNCOUTCON0);
18005540:	e4ac0073 	addi      	r5, r12, 116
    if (pin < dev->pin_num[0] || pin > dev->pin_num[1]) {
18005544:	0c53      	bf      	0x180055ea	// 180055ea <hggpio_v4_iomap_output+0xb6>
18005546:	d8602026 	ld.w      	r3, (r0, 0x98)
1800554a:	644c      	cmphs      	r3, r1
1800554c:	0c4f      	bf      	0x180055ea	// 180055ea <hggpio_v4_iomap_output+0xb6>
    mode_pin_pos      = pin *  2;
    operate_ptr      += pin >> 2;

    sysctrl_unlock();

    if (HG_GPIOC_BASE == dev->hw) {
1800554e:	1109      	lrw      	r0, 0x40020c00	// 180055f0 <hggpio_v4_iomap_output+0xbc>
    return pin - gpio->pin_num[0];
18005550:	6076      	subu      	r1, r13
    if (HG_GPIOC_BASE == dev->hw) {
18005552:	6432      	cmpne      	r12, r0
    iomap_out_pin_pos = ((pin & 0x3) << 3);
18005554:	4183      	lsli      	r4, r1, 3
    operate_ptr      += pin >> 2;
18005556:	c4012823 	bclri      	r3, r1, 0
1800555a:	3b81      	bclri      	r3, 1
    iomap_out_pin_pos = ((pin & 0x3) << 3);
1800555c:	e4842018 	andi      	r4, r4, 24
    mode_pin_pos      = pin *  2;
18005560:	c421002d 	addu      	r13, r1, r1
    operate_ptr      += pin >> 2;
18005564:	60d4      	addu      	r3, r5
    if (HG_GPIOC_BASE == dev->hw) {
18005566:	0822      	bt      	0x180055aa	// 180055aa <hggpio_v4_iomap_output+0x76>
        if ((6 == pin) || (7 == pin)) {
18005568:	5917      	subi      	r0, r1, 6
1800556a:	3801      	cmphsi      	r0, 2
1800556c:	081f      	bt      	0x180055aa	// 180055aa <hggpio_v4_iomap_output+0x76>
            //PC6->DP; PC7->DM change to GPIO
            SYSCTRL->SYS_CON1 &= ~ BIT(18); //USB20_PHY reset
1800556e:	ea204002 	movih      	r0, 16386
18005572:	90a2      	ld.w      	r5, (r0, 0x8)
18005574:	3d92      	bclri      	r5, 18
18005576:	b0a2      	st.w      	r5, (r0, 0x8)
    __ASM volatile("nop");
18005578:	6c03      	mov      	r0, r0
1800557a:	6c03      	mov      	r0, r0
1800557c:	6c03      	mov      	r0, r0
1800557e:	6c03      	mov      	r0, r0
18005580:	6c03      	mov      	r0, r0
18005582:	6c03      	mov      	r0, r0
18005584:	6c03      	mov      	r0, r0
18005586:	6c03      	mov      	r0, r0
            __NOP();__NOP();__NOP();__NOP();__NOP();__NOP();__NOP();__NOP();
            SYSCTRL->USB20_PHY_CFG3 |= (0xf << 0);
18005588:	d8a0203d 	ld.w      	r5, (r0, 0xf4)
1800558c:	eca5000f 	ori      	r5, r5, 15
18005590:	dca0203d 	st.w      	r5, (r0, 0xf4)
18005594:	6c03      	mov      	r0, r0
18005596:	6c03      	mov      	r0, r0
18005598:	6c03      	mov      	r0, r0
1800559a:	6c03      	mov      	r0, r0
1800559c:	6c03      	mov      	r0, r0
1800559e:	6c03      	mov      	r0, r0
180055a0:	6c03      	mov      	r0, r0
180055a2:	6c03      	mov      	r0, r0
            __NOP();__NOP();__NOP();__NOP();__NOP();__NOP();__NOP();__NOP();
            SYSCTRL->SYS_CON1 |= BIT(18);
180055a4:	90a2      	ld.w      	r5, (r0, 0x8)
180055a6:	3db2      	bseti      	r5, 18
180055a8:	b0a2      	st.w      	r5, (r0, 0x8)
        }
    }

    /* clear simulation enablement for corresponding pins */
    hw->AIOEN &= ~(1 << pin);
180055aa:	3001      	movi      	r0, 1
180055ac:	d8ac2014 	ld.w      	r5, (r12, 0x50)
180055b0:	c4204021 	lsl      	r1, r0, r1
180055b4:	c4252041 	andn      	r1, r5, r1
180055b8:	dc2c2014 	st.w      	r1, (r12, 0x50)

    //Config IOFUNCOUTCONx Reg
    *operate_ptr = (*operate_ptr & ~(0xFF << iomap_out_pin_pos)) | ((iomap_out_func_sel & 0x000000FF) << iomap_out_pin_pos);
180055bc:	31ff      	movi      	r1, 255
180055be:	93a0      	ld.w      	r5, (r3, 0x0)
180055c0:	7050      	lsl      	r1, r4
180055c2:	e44220ff 	andi      	r2, r2, 255
180055c6:	c4252041 	andn      	r1, r5, r1
180055ca:	7090      	lsl      	r2, r4
180055cc:	6c84      	or      	r2, r1
180055ce:	b340      	st.w      	r2, (r3, 0x0)

    //Config MODE
    hw->MODE = (hw->MODE & ~(0x3 << mode_pin_pos)) | (0x01 << mode_pin_pos);
180055d0:	3303      	movi      	r3, 3
180055d2:	d84c2000 	ld.w      	r2, (r12, 0x0)
180055d6:	70f4      	lsl      	r3, r13
180055d8:	c4622043 	andn      	r3, r2, r3
180055dc:	c5a0402d 	lsl      	r13, r0, r13
180055e0:	6cf4      	or      	r3, r13
180055e2:	dc6c2000 	st.w      	r3, (r12, 0x0)
    
    sysctrl_lock();
    return ret_val;
180055e6:	3000      	movi      	r0, 0
}
180055e8:	1482      	pop      	r4-r5
        return -EINVAL;
180055ea:	3000      	movi      	r0, 0
180055ec:	2815      	subi      	r0, 22
180055ee:	07fd      	br      	0x180055e8	// 180055e8 <hggpio_v4_iomap_output+0xb4>
180055f0:	40020c00 	.long	0x40020c00

180055f4 <hggpio_v4_iomap_input>:

static int32 hggpio_v4_iomap_input(struct gpio_device *gpio, uint32 pin, enum gpio_iomap_in_func iomap_in_func_sel) {
180055f4:	14c1      	push      	r4
    int32 ret_val             = RET_OK;
    uint32 pin_num_temp       = 0;
    uint32 pin_pos            = (iomap_in_func_sel & 0x3) << 3;
    volatile uint32 *operate_ptr = &(SYSCTRL->IOFUNCINCON0);

    if (pin < dev->pin_num[0] || pin > dev->pin_num[1]) {
180055f6:	d9802025 	ld.w      	r12, (r0, 0x94)
180055fa:	6704      	cmphs      	r1, r12
    struct hggpio_v4_hw *hw   = (struct hggpio_v4_hw *)dev->hw;
180055fc:	9063      	ld.w      	r3, (r0, 0xc)
    if (pin < dev->pin_num[0] || pin > dev->pin_num[1]) {
180055fe:	0c7b      	bf      	0x180056f4	// 180056f4 <hggpio_v4_iomap_input+0x100>
18005600:	d8002026 	ld.w      	r0, (r0, 0x98)
18005604:	6440      	cmphs      	r0, r1
18005606:	0c77      	bf      	0x180056f4	// 180056f4 <hggpio_v4_iomap_input+0x100>
    pin = hggpio_v4_pin_num(dev, pin);
    pin_num_temp = pin;

    sysctrl_unlock();

    if (HG_GPIOC_BASE == dev->hw) {
18005608:	111e      	lrw      	r0, 0x40020c00	// 18005700 <hggpio_v4_iomap_input+0x10c>
1800560a:	640e      	cmpne      	r3, r0
    return pin - gpio->pin_num[0];
1800560c:	6072      	subu      	r1, r12
    if (HG_GPIOC_BASE == dev->hw) {
1800560e:	0830      	bt      	0x1800566e	// 1800566e <hggpio_v4_iomap_input+0x7a>
        if ((6 == pin) || (7 == pin)) {
18005610:	5917      	subi      	r0, r1, 6
18005612:	3801      	cmphsi      	r0, 2
18005614:	0825      	bt      	0x1800565e	// 1800565e <hggpio_v4_iomap_input+0x6a>
            //PC6->DP; PC7->DM change to GPIO
            SYSCTRL->SYS_CON1 &= ~ BIT(18); //USB20_PHY reset
18005616:	ea204002 	movih      	r0, 16386
1800561a:	d9802002 	ld.w      	r12, (r0, 0x8)
1800561e:	c64c282c 	bclri      	r12, r12, 18
18005622:	dd802002 	st.w      	r12, (r0, 0x8)
18005626:	6c03      	mov      	r0, r0
18005628:	6c03      	mov      	r0, r0
1800562a:	6c03      	mov      	r0, r0
1800562c:	6c03      	mov      	r0, r0
1800562e:	6c03      	mov      	r0, r0
18005630:	6c03      	mov      	r0, r0
18005632:	6c03      	mov      	r0, r0
18005634:	6c03      	mov      	r0, r0
            __NOP();__NOP();__NOP();__NOP();__NOP();__NOP();__NOP();__NOP();
            SYSCTRL->USB20_PHY_CFG3 |= (0xf << 0);
18005636:	d980203d 	ld.w      	r12, (r0, 0xf4)
1800563a:	ed8c000f 	ori      	r12, r12, 15
1800563e:	dd80203d 	st.w      	r12, (r0, 0xf4)
18005642:	6c03      	mov      	r0, r0
18005644:	6c03      	mov      	r0, r0
18005646:	6c03      	mov      	r0, r0
18005648:	6c03      	mov      	r0, r0
1800564a:	6c03      	mov      	r0, r0
1800564c:	6c03      	mov      	r0, r0
1800564e:	6c03      	mov      	r0, r0
18005650:	6c03      	mov      	r0, r0
            __NOP();__NOP();__NOP();__NOP();__NOP();__NOP();__NOP();__NOP();
            SYSCTRL->SYS_CON1 |= BIT(18);
18005652:	d9802002 	ld.w      	r12, (r0, 0x8)
18005656:	c64c284c 	bseti      	r12, r12, 18
1800565a:	dd802002 	st.w      	r12, (r0, 0x8)
        }
    }

    if (hw) {
        hw->AIOEN &= ~(1 << pin);
1800565e:	3000      	movi      	r0, 0
18005660:	2801      	subi      	r0, 2
18005662:	d9832014 	ld.w      	r12, (r3, 0x50)
18005666:	7007      	rotl      	r0, r1
18005668:	6830      	and      	r0, r12
1800566a:	b314      	st.w      	r0, (r3, 0x50)
1800566c:	0403      	br      	0x18005672	// 18005672 <hggpio_v4_iomap_input+0x7e>
    if (hw) {
1800566e:	e923fff8 	bnez      	r3, 0x1800565e	// 1800565e <hggpio_v4_iomap_input+0x6a>
    }

    if (0xF000 != (0xF000 & iomap_in_func_sel)) {
18005672:	30f0      	movi      	r0, 240
18005674:	4008      	lsli      	r0, r0, 8
18005676:	6808      	and      	r0, r2
18005678:	eb40f000 	cmpnei      	r0, 61440
1800567c:	0c1b      	bf      	0x180056b2	// 180056b2 <hggpio_v4_iomap_input+0xbe>
        
        //Config IOMAP_INPUT
        if (HG_GPIOA_BASE == (uint32)dev->hw) {
1800567e:	1102      	lrw      	r0, 0x40020a00	// 18005704 <hggpio_v4_iomap_input+0x110>
18005680:	640e      	cmpne      	r3, r0
18005682:	0c37      	bf      	0x180056f0	// 180056f0 <hggpio_v4_iomap_input+0xfc>
            pin_num_temp = pin_num_temp + 0x00;
        } else if (HG_GPIOB_BASE == (uint32)dev->hw) {
18005684:	1101      	lrw      	r0, 0x40020b00	// 18005708 <hggpio_v4_iomap_input+0x114>
18005686:	640e      	cmpne      	r3, r0
18005688:	0821      	bt      	0x180056ca	// 180056ca <hggpio_v4_iomap_input+0xd6>
            pin_num_temp = pin_num_temp + 0x0A;
1800568a:	e4010009 	addi      	r0, r1, 10
    uint32 pin_pos            = (iomap_in_func_sel & 0x3) << 3;
1800568e:	c462482d 	lsli      	r13, r2, 3
            pin_num_temp = 0x28;
        } else if ((!dev->hw) && ( pin)) {
            pin_num_temp = 0x29;
        }
        
        operate_ptr  = operate_ptr + (iomap_in_func_sel >> 2);
18005692:	ea8c001f 	lrw      	r12, 0x40020140	// 1800570c <hggpio_v4_iomap_input+0x118>
18005696:	3a80      	bclri      	r2, 0
18005698:	3a81      	bclri      	r2, 1
1800569a:	60b0      	addu      	r2, r12
    uint32 pin_pos            = (iomap_in_func_sel & 0x3) << 3;
1800569c:	e5ad2018 	andi      	r13, r13, 24
        *operate_ptr = (*operate_ptr & ~(0xFF << pin_pos)) | pin_num_temp << pin_pos;
180056a0:	ea0c00ff 	movi      	r12, 255
180056a4:	9280      	ld.w      	r4, (r2, 0x0)
180056a6:	7334      	lsl      	r12, r13
180056a8:	c584204c 	andn      	r12, r4, r12
180056ac:	7034      	lsl      	r0, r13
180056ae:	6c30      	or      	r0, r12
180056b0:	b200      	st.w      	r0, (r2, 0x0)
    }

    //Config input mode
    if (hw) {
180056b2:	e9030024 	bez      	r3, 0x180056fa	// 180056fa <hggpio_v4_iomap_input+0x106>
        hw->MODE = hw->MODE & ~(0x03 << (pin * 2));
180056b6:	6044      	addu      	r1, r1
180056b8:	3203      	movi      	r2, 3
180056ba:	9300      	ld.w      	r0, (r3, 0x0)
180056bc:	c4224021 	lsl      	r1, r2, r1
180056c0:	c4202041 	andn      	r1, r0, r1
180056c4:	b320      	st.w      	r1, (r3, 0x0)
    }

    sysctrl_lock();

    return ret_val;
180056c6:	3000      	movi      	r0, 0

}
180056c8:	1481      	pop      	r4
        } else if (HG_GPIOC_BASE == (uint32)dev->hw) {
180056ca:	100e      	lrw      	r0, 0x40020c00	// 18005700 <hggpio_v4_iomap_input+0x10c>
180056cc:	640e      	cmpne      	r3, r0
180056ce:	0804      	bt      	0x180056d6	// 180056d6 <hggpio_v4_iomap_input+0xe2>
            pin_num_temp = pin_num_temp + 0x1A;
180056d0:	e4010019 	addi      	r0, r1, 26
180056d4:	07dd      	br      	0x1800568e	// 1800568e <hggpio_v4_iomap_input+0x9a>
        } else if (HG_GPIOE_BASE == (uint32)dev->hw) {
180056d6:	100f      	lrw      	r0, 0x40020e00	// 18005710 <hggpio_v4_iomap_input+0x11c>
180056d8:	640e      	cmpne      	r3, r0
180056da:	0804      	bt      	0x180056e2	// 180056e2 <hggpio_v4_iomap_input+0xee>
            pin_num_temp = pin_num_temp + 0x2A;
180056dc:	e4010029 	addi      	r0, r1, 42
180056e0:	07d7      	br      	0x1800568e	// 1800568e <hggpio_v4_iomap_input+0x9a>
        } else if ((!dev->hw) && (!pin)) {
180056e2:	e9230007 	bnez      	r3, 0x180056f0	// 180056f0 <hggpio_v4_iomap_input+0xfc>
            pin_num_temp = 0x28;
180056e6:	3940      	cmpnei      	r1, 0
180056e8:	c4000500 	mvc      	r0
180056ec:	2027      	addi      	r0, 40
180056ee:	07d0      	br      	0x1800568e	// 1800568e <hggpio_v4_iomap_input+0x9a>
    return pin - gpio->pin_num[0];
180056f0:	6c07      	mov      	r0, r1
180056f2:	07ce      	br      	0x1800568e	// 1800568e <hggpio_v4_iomap_input+0x9a>
        return -EINVAL;
180056f4:	3000      	movi      	r0, 0
180056f6:	2815      	subi      	r0, 22
180056f8:	07e8      	br      	0x180056c8	// 180056c8 <hggpio_v4_iomap_input+0xd4>
    return ret_val;
180056fa:	6c0f      	mov      	r0, r3
180056fc:	07e6      	br      	0x180056c8	// 180056c8 <hggpio_v4_iomap_input+0xd4>
180056fe:	0000      	.short	0x0000
18005700:	40020c00 	.long	0x40020c00
18005704:	40020a00 	.long	0x40020a00
18005708:	40020b00 	.long	0x40020b00
1800570c:	40020140 	.long	0x40020140
18005710:	40020e00 	.long	0x40020e00

18005714 <hggpio_v4_mode>:
    return RET_OK;
}
#endif

static int32 hggpio_v4_mode(struct gpio_device *gpio, uint32 pin, enum gpio_pin_mode mode, enum gpio_pull_level level)
{
18005714:	14c1      	push      	r4
    struct hggpio_v4 *dev   = (struct hggpio_v4 *)gpio;
    struct hggpio_v4_hw *hw = (struct hggpio_v4_hw *)dev->hw;

    if (pin < dev->pin_num[0] || pin > dev->pin_num[1]) {
18005716:	d9a02025 	ld.w      	r13, (r0, 0x94)
1800571a:	6744      	cmphs      	r1, r13
    struct hggpio_v4_hw *hw = (struct hggpio_v4_hw *)dev->hw;
1800571c:	d9802003 	ld.w      	r12, (r0, 0xc)
    if (pin < dev->pin_num[0] || pin > dev->pin_num[1]) {
18005720:	0804      	bt      	0x18005728	// 18005728 <hggpio_v4_mode+0x14>
            return -EINVAL;
18005722:	3000      	movi      	r0, 0
18005724:	2815      	subi      	r0, 22
18005726:	0499      	br      	0x18005858	// 18005858 <hggpio_v4_mode+0x144>
    if (pin < dev->pin_num[0] || pin > dev->pin_num[1]) {
18005728:	d8002026 	ld.w      	r0, (r0, 0x98)
1800572c:	6440      	cmphs      	r0, r1
1800572e:	0ffa      	bf      	0x18005722	// 18005722 <hggpio_v4_mode+0xe>

    pin = hggpio_v4_pin_num(dev, pin);

    sysctrl_unlock();

    if (HG_GPIOC_BASE == dev->hw) {
18005730:	101b      	lrw      	r0, 0x40020c00	// 1800579c <hggpio_v4_mode+0x88>
18005732:	6432      	cmpne      	r12, r0
    return pin - gpio->pin_num[0];
18005734:	6076      	subu      	r1, r13
    if (HG_GPIOC_BASE == dev->hw) {
18005736:	0828      	bt      	0x18005786	// 18005786 <hggpio_v4_mode+0x72>
        if ((6 == pin) || (7 == pin)) {
18005738:	5917      	subi      	r0, r1, 6
1800573a:	3801      	cmphsi      	r0, 2
1800573c:	0825      	bt      	0x18005786	// 18005786 <hggpio_v4_mode+0x72>
            //PC6->DP; PC7->DM change to GPIO
            SYSCTRL->SYS_CON1 &= ~ BIT(18); //USB20_PHY reset
1800573e:	ea204002 	movih      	r0, 16386
18005742:	d9a02002 	ld.w      	r13, (r0, 0x8)
18005746:	c64d282d 	bclri      	r13, r13, 18
1800574a:	dda02002 	st.w      	r13, (r0, 0x8)
1800574e:	6c03      	mov      	r0, r0
18005750:	6c03      	mov      	r0, r0
18005752:	6c03      	mov      	r0, r0
18005754:	6c03      	mov      	r0, r0
18005756:	6c03      	mov      	r0, r0
18005758:	6c03      	mov      	r0, r0
1800575a:	6c03      	mov      	r0, r0
1800575c:	6c03      	mov      	r0, r0
            __NOP();__NOP();__NOP();__NOP();__NOP();__NOP();__NOP();__NOP();
            SYSCTRL->USB20_PHY_CFG3 |= (0xf << 0);
1800575e:	d9a0203d 	ld.w      	r13, (r0, 0xf4)
18005762:	edad000f 	ori      	r13, r13, 15
18005766:	dda0203d 	st.w      	r13, (r0, 0xf4)
1800576a:	6c03      	mov      	r0, r0
1800576c:	6c03      	mov      	r0, r0
1800576e:	6c03      	mov      	r0, r0
18005770:	6c03      	mov      	r0, r0
18005772:	6c03      	mov      	r0, r0
18005774:	6c03      	mov      	r0, r0
18005776:	6c03      	mov      	r0, r0
18005778:	6c03      	mov      	r0, r0
            __NOP();__NOP();__NOP();__NOP();__NOP();__NOP();__NOP();__NOP();
            SYSCTRL->SYS_CON1 |= BIT(18);
1800577a:	d9a02002 	ld.w      	r13, (r0, 0x8)
1800577e:	c64d284d 	bseti      	r13, r13, 18
18005782:	dda02002 	st.w      	r13, (r0, 0x8)
    if (pin >= HGGPIO_V4_MAX_PINS) {
18005786:	390f      	cmphsi      	r1, 16
    uint32 pin_bit  = 1UL << pin;
18005788:	3001      	movi      	r0, 1
1800578a:	7004      	lsl      	r0, r1
    if (pin >= HGGPIO_V4_MAX_PINS) {
1800578c:	0bcb      	bt      	0x18005722	// 18005722 <hggpio_v4_mode+0xe>
    switch (mode) {
1800578e:	3a04      	cmphsi      	r2, 5
18005790:	0bc9      	bt      	0x18005722	// 18005722 <hggpio_v4_mode+0xe>
18005792:	ea8d0004 	lrw      	r13, 0x18016714	// 180057a0 <hggpio_v4_mode+0x8c>
18005796:	d04d0882 	ldr.w      	r2, (r13, r2 << 2)
1800579a:	7808      	jmp      	r2
1800579c:	40020c00 	.long	0x40020c00
180057a0:	18016714 	.long	0x18016714
            SYSCTRL_REG_OPT(reg->OTYPE  &= ~pin_bit);
180057a4:	d84c2001 	ld.w      	r2, (r12, 0x4)
180057a8:	c4022040 	andn      	r0, r2, r0
180057ac:	dc0c2001 	st.w      	r0, (r12, 0x4)
            mode_tmp = _GPIO_PULL_NONE;
180057b0:	3201      	movi      	r2, 1
    switch (level) {
180057b2:	3b41      	cmpnei      	r3, 1
180057b4:	0c25      	bf      	0x180057fe	// 180057fe <hggpio_v4_mode+0xea>
180057b6:	3b40      	cmpnei      	r3, 0
180057b8:	0c24      	bf      	0x18005800	// 18005800 <hggpio_v4_mode+0xec>
180057ba:	3b42      	cmpnei      	r3, 2
180057bc:	0bb3      	bt      	0x18005722	// 18005722 <hggpio_v4_mode+0xe>
            pull_level_to_reg = 1;
180057be:	3301      	movi      	r3, 1
180057c0:	0420      	br      	0x18005800	// 18005800 <hggpio_v4_mode+0xec>
            SYSCTRL_REG_OPT(reg->OTYPE  &= ~pin_bit);
180057c2:	d84c2001 	ld.w      	r2, (r12, 0x4)
180057c6:	c4022040 	andn      	r0, r2, r0
180057ca:	dc0c2001 	st.w      	r0, (r12, 0x4)
            mode_tmp = _GPIO_PULL_UP;
180057ce:	3202      	movi      	r2, 2
180057d0:	07f1      	br      	0x180057b2	// 180057b2 <hggpio_v4_mode+0x9e>
            SYSCTRL_REG_OPT(reg->OTYPE  &= ~pin_bit);
180057d2:	d84c2001 	ld.w      	r2, (r12, 0x4)
180057d6:	c4022040 	andn      	r0, r2, r0
180057da:	dc0c2001 	st.w      	r0, (r12, 0x4)
            mode_tmp = _GPIO_PULL_DOWN;
180057de:	3204      	movi      	r2, 4
180057e0:	07e9      	br      	0x180057b2	// 180057b2 <hggpio_v4_mode+0x9e>
            SYSCTRL_REG_OPT(reg->OTYPE  |=  pin_bit);
180057e2:	d84c2001 	ld.w      	r2, (r12, 0x4)
180057e6:	6c08      	or      	r0, r2
180057e8:	dc0c2001 	st.w      	r0, (r12, 0x4)
            mode_tmp = _GPIO_OPENDRAIN_PULL_NONE;
180057ec:	3281      	movi      	r2, 129
180057ee:	07e2      	br      	0x180057b2	// 180057b2 <hggpio_v4_mode+0x9e>
            SYSCTRL_REG_OPT(reg->OTYPE  |=  pin_bit);
180057f0:	d84c2001 	ld.w      	r2, (r12, 0x4)
180057f4:	6c08      	or      	r0, r2
180057f6:	dc0c2001 	st.w      	r0, (r12, 0x4)
            mode_tmp = _GPIO_OPENDRAIN_PULL_UP;
180057fa:	3282      	movi      	r2, 130
180057fc:	07db      	br      	0x180057b2	// 180057b2 <hggpio_v4_mode+0x9e>
            pull_level_to_reg = 2;
180057fe:	3302      	movi      	r3, 2
    if (pin < 8) {
18005800:	3907      	cmphsi      	r1, 8
18005802:	e402200f 	andi      	r0, r2, 15
18005806:	083d      	bt      	0x18005880	// 18005880 <hggpio_v4_mode+0x16c>
        if (_GPIO_PULL_NONE == (pull_mode & 0xF)) {
18005808:	3841      	cmpnei      	r0, 1
    uint32 l_pin_pos         = (pin * 4);
1800580a:	4122      	lsli      	r1, r1, 2
        if (_GPIO_PULL_NONE == (pull_mode & 0xF)) {
1800580c:	0811      	bt      	0x1800582e	// 1800582e <hggpio_v4_mode+0x11a>
                reg->PUDL &= ~(GPIO_PULL_LEVEL_MASK << l_pin_pos);
1800580e:	330f      	movi      	r3, 15
18005810:	c4234021 	lsl      	r1, r3, r1
18005814:	d84c2006 	ld.w      	r2, (r12, 0x18)
18005818:	6c46      	nor      	r1, r1
1800581a:	c4222023 	and      	r3, r2, r1
1800581e:	dc6c2006 	st.w      	r3, (r12, 0x18)
                reg->PUPL &= ~(GPIO_PULL_LEVEL_MASK << l_pin_pos);
18005822:	d86c2004 	ld.w      	r3, (r12, 0x10)
18005826:	684c      	and      	r1, r3
                reg->PUPL  =  (reg->PUPL & ~ (GPIO_PULL_LEVEL_MASK << l_pin_pos)) | (pull_level_to_reg << l_pin_pos);
18005828:	dc2c2004 	st.w      	r1, (r12, 0x10)
1800582c:	0415      	br      	0x18005856	// 18005856 <hggpio_v4_mode+0x142>
        }else if (_GPIO_PULL_DOWN & pull_mode) {
1800582e:	e4822004 	andi      	r4, r2, 4
18005832:	e9040014 	bez      	r4, 0x1800585a	// 1800585a <hggpio_v4_mode+0x146>
                reg->PUDL  =  (reg->PUDL & ~ (GPIO_PULL_LEVEL_MASK << l_pin_pos)) | (pull_level_to_reg << l_pin_pos);
18005836:	320f      	movi      	r2, 15
18005838:	7084      	lsl      	r2, r1
1800583a:	d80c2006 	ld.w      	r0, (r12, 0x18)
1800583e:	6c8a      	nor      	r2, r2
18005840:	6808      	and      	r0, r2
18005842:	c4234021 	lsl      	r1, r3, r1
18005846:	6c40      	or      	r1, r0
18005848:	dc2c2006 	st.w      	r1, (r12, 0x18)
                reg->PUPL &= ~(GPIO_PULL_LEVEL_MASK << l_pin_pos);
1800584c:	d86c2004 	ld.w      	r3, (r12, 0x10)
18005850:	688c      	and      	r2, r3
18005852:	dc4c2004 	st.w      	r2, (r12, 0x10)
    return ret;
18005856:	3000      	movi      	r0, 0
    sysctrl_lock();

    
    
    return hggpio_v4_set_mode(hw, pin, mode, level);
}
18005858:	1481      	pop      	r4
        } else if (_GPIO_PULL_UP & pull_mode) {
1800585a:	e4022002 	andi      	r0, r2, 2
1800585e:	e900fffd 	bez      	r0, 0x18005858	// 18005858 <hggpio_v4_mode+0x144>
                reg->PUDL &= ~(GPIO_PULL_LEVEL_MASK << l_pin_pos);
18005862:	320f      	movi      	r2, 15
18005864:	7084      	lsl      	r2, r1
18005866:	d9ac2006 	ld.w      	r13, (r12, 0x18)
1800586a:	6c8a      	nor      	r2, r2
1800586c:	6b48      	and      	r13, r2
1800586e:	ddac2006 	st.w      	r13, (r12, 0x18)
                reg->PUPL  =  (reg->PUPL & ~ (GPIO_PULL_LEVEL_MASK << l_pin_pos)) | (pull_level_to_reg << l_pin_pos);
18005872:	d80c2004 	ld.w      	r0, (r12, 0x10)
18005876:	6880      	and      	r2, r0
18005878:	c4234021 	lsl      	r1, r3, r1
1800587c:	6c48      	or      	r1, r2
1800587e:	07d5      	br      	0x18005828	// 18005828 <hggpio_v4_mode+0x114>
        if (_GPIO_PULL_NONE == (pull_mode & 0xF)) {
18005880:	3841      	cmpnei      	r0, 1
    uint32 h_pin_pos         = (pin & 0x07) * 4;
18005882:	e4212007 	andi      	r1, r1, 7
18005886:	4122      	lsli      	r1, r1, 2
        if (_GPIO_PULL_NONE == (pull_mode & 0xF)) {
18005888:	0811      	bt      	0x180058aa	// 180058aa <hggpio_v4_mode+0x196>
                reg->PUDH &= ~(GPIO_PULL_LEVEL_MASK << h_pin_pos);
1800588a:	330f      	movi      	r3, 15
1800588c:	c4234021 	lsl      	r1, r3, r1
18005890:	d84c2007 	ld.w      	r2, (r12, 0x1c)
18005894:	6c46      	nor      	r1, r1
18005896:	c4222023 	and      	r3, r2, r1
1800589a:	dc6c2007 	st.w      	r3, (r12, 0x1c)
                reg->PUPH &= ~(GPIO_PULL_LEVEL_MASK << h_pin_pos);
1800589e:	d86c2005 	ld.w      	r3, (r12, 0x14)
180058a2:	684c      	and      	r1, r3
                reg->PUPH  =  (reg->PUPH & ~ (GPIO_PULL_LEVEL_MASK << h_pin_pos)) | (pull_level_to_reg << h_pin_pos);
180058a4:	dc2c2005 	st.w      	r1, (r12, 0x14)
180058a8:	07d7      	br      	0x18005856	// 18005856 <hggpio_v4_mode+0x142>
        }else if (_GPIO_PULL_DOWN & pull_mode) {
180058aa:	e4822004 	andi      	r4, r2, 4
180058ae:	e9040013 	bez      	r4, 0x180058d4	// 180058d4 <hggpio_v4_mode+0x1c0>
                reg->PUDH  =  (reg->PUDH & ~ (GPIO_PULL_LEVEL_MASK << h_pin_pos)) | (pull_level_to_reg << h_pin_pos);
180058b2:	320f      	movi      	r2, 15
180058b4:	7084      	lsl      	r2, r1
180058b6:	d80c2007 	ld.w      	r0, (r12, 0x1c)
180058ba:	6c8a      	nor      	r2, r2
180058bc:	6808      	and      	r0, r2
180058be:	c4234021 	lsl      	r1, r3, r1
180058c2:	6c40      	or      	r1, r0
180058c4:	dc2c2007 	st.w      	r1, (r12, 0x1c)
                reg->PUPH &= ~(GPIO_PULL_LEVEL_MASK << h_pin_pos);
180058c8:	d86c2005 	ld.w      	r3, (r12, 0x14)
180058cc:	688c      	and      	r2, r3
180058ce:	dc4c2005 	st.w      	r2, (r12, 0x14)
180058d2:	07c2      	br      	0x18005856	// 18005856 <hggpio_v4_mode+0x142>
        } else if (_GPIO_PULL_UP & pull_mode) {
180058d4:	e4022002 	andi      	r0, r2, 2
180058d8:	e900ffc0 	bez      	r0, 0x18005858	// 18005858 <hggpio_v4_mode+0x144>
                reg->PUDH &= ~(GPIO_PULL_LEVEL_MASK << h_pin_pos);
180058dc:	320f      	movi      	r2, 15
180058de:	7084      	lsl      	r2, r1
180058e0:	d9ac2007 	ld.w      	r13, (r12, 0x1c)
180058e4:	6c8a      	nor      	r2, r2
180058e6:	6b48      	and      	r13, r2
180058e8:	ddac2007 	st.w      	r13, (r12, 0x1c)
                reg->PUPH  =  (reg->PUPH & ~ (GPIO_PULL_LEVEL_MASK << h_pin_pos)) | (pull_level_to_reg << h_pin_pos);
180058ec:	d80c2005 	ld.w      	r0, (r12, 0x14)
180058f0:	6880      	and      	r2, r0
180058f2:	c4234021 	lsl      	r1, r3, r1
180058f6:	6c48      	or      	r1, r2
180058f8:	07d6      	br      	0x180058a4	// 180058a4 <hggpio_v4_mode+0x190>
	...

180058fc <hggpio_v4_get>:
static int32 hggpio_v4_get(struct gpio_device *gpio, int32 pin)
{
    struct hggpio_v4 *dev = (struct hggpio_v4 *)gpio;
    struct hggpio_v4_hw *hw = (struct hggpio_v4_hw *)dev->hw;

    if (pin < dev->pin_num[0] || pin > dev->pin_num[1]) {
180058fc:	d8602025 	ld.w      	r3, (r0, 0x94)
18005900:	64c4      	cmphs      	r1, r3
    struct hggpio_v4_hw *hw = (struct hggpio_v4_hw *)dev->hw;
18005902:	d9802003 	ld.w      	r12, (r0, 0xc)
    if (pin < dev->pin_num[0] || pin > dev->pin_num[1]) {
18005906:	0c30      	bf      	0x18005966	// 18005966 <hggpio_v4_get+0x6a>
18005908:	d8402026 	ld.w      	r2, (r0, 0x98)
1800590c:	6448      	cmphs      	r2, r1
1800590e:	0c2c      	bf      	0x18005966	// 18005966 <hggpio_v4_get+0x6a>
    return pin - gpio->pin_num[0];
18005910:	604e      	subu      	r1, r3

    pin = hggpio_v4_pin_num(dev, pin);

    sysctrl_unlock();

    if (HG_GPIOC_BASE == dev->hw) {
18005912:	1077      	lrw      	r3, 0x40020c00	// 1800596c <hggpio_v4_get+0x70>
18005914:	64f2      	cmpne      	r12, r3
18005916:	0822      	bt      	0x1800595a	// 1800595a <hggpio_v4_get+0x5e>
        if ((6 == pin) || (7 == pin)) {
18005918:	5977      	subi      	r3, r1, 6
1800591a:	3b01      	cmphsi      	r3, 2
1800591c:	081f      	bt      	0x1800595a	// 1800595a <hggpio_v4_get+0x5e>
            //PC6->DP; PC7->DM change to GPIO
            SYSCTRL->SYS_CON1 &= ~ BIT(18); //USB20_PHY reset
1800591e:	ea234002 	movih      	r3, 16386
18005922:	9342      	ld.w      	r2, (r3, 0x8)
18005924:	3a92      	bclri      	r2, 18
18005926:	b342      	st.w      	r2, (r3, 0x8)
18005928:	6c03      	mov      	r0, r0
1800592a:	6c03      	mov      	r0, r0
1800592c:	6c03      	mov      	r0, r0
1800592e:	6c03      	mov      	r0, r0
18005930:	6c03      	mov      	r0, r0
18005932:	6c03      	mov      	r0, r0
18005934:	6c03      	mov      	r0, r0
18005936:	6c03      	mov      	r0, r0
            __NOP();__NOP();__NOP();__NOP();__NOP();__NOP();__NOP();__NOP();
            SYSCTRL->USB20_PHY_CFG3 |= (0xf << 0);
18005938:	d843203d 	ld.w      	r2, (r3, 0xf4)
1800593c:	ec42000f 	ori      	r2, r2, 15
18005940:	dc43203d 	st.w      	r2, (r3, 0xf4)
18005944:	6c03      	mov      	r0, r0
18005946:	6c03      	mov      	r0, r0
18005948:	6c03      	mov      	r0, r0
1800594a:	6c03      	mov      	r0, r0
1800594c:	6c03      	mov      	r0, r0
1800594e:	6c03      	mov      	r0, r0
18005950:	6c03      	mov      	r0, r0
18005952:	6c03      	mov      	r0, r0
            __NOP();__NOP();__NOP();__NOP();__NOP();__NOP();__NOP();__NOP();
            SYSCTRL->SYS_CON1 |= BIT(18);
18005954:	9342      	ld.w      	r2, (r3, 0x8)
18005956:	3ab2      	bseti      	r2, 18
18005958:	b342      	st.w      	r2, (r3, 0x8)
        }
    }

    sysctrl_lock();

    return (hw->IDAT & (1UL << pin)) ? 1 : 0;
1800595a:	d80c2008 	ld.w      	r0, (r12, 0x20)
1800595e:	7005      	lsr      	r0, r1
18005960:	e4002001 	andi      	r0, r0, 1
}
18005964:	783c      	jmp      	r15
        return -EINVAL;
18005966:	3000      	movi      	r0, 0
18005968:	2815      	subi      	r0, 22
1800596a:	07fd      	br      	0x18005964	// 18005964 <hggpio_v4_get+0x68>
1800596c:	40020c00 	.long	0x40020c00

18005970 <hggpio_v4_set>:
static int32 hggpio_v4_set(struct gpio_device *gpio, uint32 pin, int32 val)
{
    struct hggpio_v4 *dev   = (struct hggpio_v4 *)gpio;
    struct hggpio_v4_hw *hw = (struct hggpio_v4_hw *)dev->hw;

    if (pin < dev->pin_num[0] || pin > dev->pin_num[1]) {
18005970:	d8602025 	ld.w      	r3, (r0, 0x94)
18005974:	64c4      	cmphs      	r1, r3
    struct hggpio_v4_hw *hw = (struct hggpio_v4_hw *)dev->hw;
18005976:	d9802003 	ld.w      	r12, (r0, 0xc)
    if (pin < dev->pin_num[0] || pin > dev->pin_num[1]) {
1800597a:	0c44      	bf      	0x18005a02	// 18005a02 <hggpio_v4_set+0x92>
1800597c:	d8002026 	ld.w      	r0, (r0, 0x98)
18005980:	6440      	cmphs      	r0, r1
18005982:	0c40      	bf      	0x18005a02	// 18005a02 <hggpio_v4_set+0x92>
    return pin - gpio->pin_num[0];
18005984:	604e      	subu      	r1, r3
    }
    pin = hggpio_v4_pin_num(dev, pin);

    sysctrl_unlock();

    if (HG_GPIOC_BASE == dev->hw) {
18005986:	1161      	lrw      	r3, 0x40020c00	// 18005a08 <hggpio_v4_set+0x98>
18005988:	64f2      	cmpne      	r12, r3
1800598a:	0828      	bt      	0x180059da	// 180059da <hggpio_v4_set+0x6a>
        if ((6 == pin) || (7 == pin)) {
1800598c:	5977      	subi      	r3, r1, 6
1800598e:	3b01      	cmphsi      	r3, 2
18005990:	0825      	bt      	0x180059da	// 180059da <hggpio_v4_set+0x6a>
            //PC6->DP; PC7->DM change to GPIO
            SYSCTRL->SYS_CON1 &= ~ BIT(18); //USB20_PHY reset
18005992:	ea204002 	movih      	r0, 16386
18005996:	d9a02002 	ld.w      	r13, (r0, 0x8)
1800599a:	c64d282d 	bclri      	r13, r13, 18
1800599e:	dda02002 	st.w      	r13, (r0, 0x8)
180059a2:	6c03      	mov      	r0, r0
180059a4:	6c03      	mov      	r0, r0
180059a6:	6c03      	mov      	r0, r0
180059a8:	6c03      	mov      	r0, r0
180059aa:	6c03      	mov      	r0, r0
180059ac:	6c03      	mov      	r0, r0
180059ae:	6c03      	mov      	r0, r0
180059b0:	6c03      	mov      	r0, r0
            __NOP();__NOP();__NOP();__NOP();__NOP();__NOP();__NOP();__NOP();
            SYSCTRL->USB20_PHY_CFG3 |= (0xf << 0);
180059b2:	d9a0203d 	ld.w      	r13, (r0, 0xf4)
180059b6:	edad000f 	ori      	r13, r13, 15
180059ba:	dda0203d 	st.w      	r13, (r0, 0xf4)
180059be:	6c03      	mov      	r0, r0
180059c0:	6c03      	mov      	r0, r0
180059c2:	6c03      	mov      	r0, r0
180059c4:	6c03      	mov      	r0, r0
180059c6:	6c03      	mov      	r0, r0
180059c8:	6c03      	mov      	r0, r0
180059ca:	6c03      	mov      	r0, r0
180059cc:	6c03      	mov      	r0, r0
            __NOP();__NOP();__NOP();__NOP();__NOP();__NOP();__NOP();__NOP();
            SYSCTRL->SYS_CON1 |= BIT(18);
180059ce:	d9a02002 	ld.w      	r13, (r0, 0x8)
180059d2:	c64d284d 	bseti      	r13, r13, 18
180059d6:	dda02002 	st.w      	r13, (r0, 0x8)
180059da:	3301      	movi      	r3, 1
        }
    }

    sysctrl_lock();

    if (val) {
180059dc:	e902000b 	bez      	r2, 0x180059f2	// 180059f2 <hggpio_v4_set+0x82>
        hw->ODAT |=  (1UL << pin);
180059e0:	d84c2009 	ld.w      	r2, (r12, 0x24)
180059e4:	70c4      	lsl      	r3, r1
180059e6:	6cc8      	or      	r3, r2
180059e8:	dc6c2009 	st.w      	r3, (r12, 0x24)
    } else {
        hw->ODAT &= ~(1UL << pin);
    }

    return RET_OK;
180059ec:	3200      	movi      	r2, 0
}
180059ee:	6c0b      	mov      	r0, r2
180059f0:	783c      	jmp      	r15
        hw->ODAT &= ~(1UL << pin);
180059f2:	d80c2009 	ld.w      	r0, (r12, 0x24)
180059f6:	70c4      	lsl      	r3, r1
180059f8:	c4602043 	andn      	r3, r0, r3
180059fc:	dc6c2009 	st.w      	r3, (r12, 0x24)
18005a00:	07f7      	br      	0x180059ee	// 180059ee <hggpio_v4_set+0x7e>
        return -EINVAL;
18005a02:	3200      	movi      	r2, 0
18005a04:	2a15      	subi      	r2, 22
18005a06:	07f4      	br      	0x180059ee	// 180059ee <hggpio_v4_set+0x7e>
18005a08:	40020c00 	.long	0x40020c00

18005a0c <hggpio_v4_int>:
    uint32 pin_bit = 0;
    int32  ret_val = RET_OK;
    struct hggpio_v4 *dev = (struct hggpio_v4 *)gpio;
    struct hggpio_v4_hw *hw = (struct hggpio_v4_hw *)dev->hw;

    if (pin > HGGPIO_V4_MAX_PINS) {
18005a0c:	3910      	cmphsi      	r1, 17
    struct hggpio_v4_hw *hw = (struct hggpio_v4_hw *)dev->hw;
18005a0e:	9063      	ld.w      	r3, (r0, 0xc)
    if (pin > HGGPIO_V4_MAX_PINS) {
18005a10:	0848      	bt      	0x18005aa0	// 18005aa0 <hggpio_v4_int+0x94>

    pin_bit = (1 << pin);

    sysctrl_unlock();

    switch(evt) {
18005a12:	3a41      	cmpnei      	r2, 1
    pin_bit = (1 << pin);
18005a14:	ea0c0001 	movi      	r12, 1
18005a18:	c42c4020 	lsl      	r0, r12, r1
    switch(evt) {
18005a1c:	0c25      	bf      	0x18005a66	// 18005a66 <hggpio_v4_int+0x5a>
18005a1e:	3a40      	cmpnei      	r2, 0
18005a20:	0c07      	bf      	0x18005a2e	// 18005a2e <hggpio_v4_int+0x22>
18005a22:	3a42      	cmpnei      	r2, 2
18005a24:	0c31      	bf      	0x18005a86	// 18005a86 <hggpio_v4_int+0x7a>
18005a26:	3a43      	cmpnei      	r2, 3
18005a28:	0c12      	bf      	0x18005a4c	// 18005a4c <hggpio_v4_int+0x40>
        }
    }

    sysctrl_lock();

    return RET_OK;
18005a2a:	3000      	movi      	r0, 0
18005a2c:	043c      	br      	0x18005aa4	// 18005aa4 <hggpio_v4_int+0x98>
            hw->IMK  &= ~pin_bit;
18005a2e:	d983200f 	ld.w      	r12, (r3, 0x3c)
18005a32:	c40c2040 	andn      	r0, r12, r0
18005a36:	b30f      	st.w      	r0, (r3, 0x3c)
            hw->TRG0 = (hw->TRG0 &~ ((0x3) << pin*2)) | ((0x3) << pin*2);
18005a38:	6044      	addu      	r1, r1
18005a3a:	3003      	movi      	r0, 3
18005a3c:	7004      	lsl      	r0, r1
18005a3e:	d9832017 	ld.w      	r12, (r3, 0x5c)
18005a42:	c40c2041 	andn      	r1, r12, r0
18005a46:	6c40      	or      	r1, r0
            hw->TRG0 = (hw->TRG0 &~ ((0x3) << pin*2)) | ((0x1) << pin*2);
18005a48:	b337      	st.w      	r1, (r3, 0x5c)
18005a4a:	07f0      	br      	0x18005a2a	// 18005a2a <hggpio_v4_int+0x1e>
            hw->IMK  |=  pin_bit;
18005a4c:	d983200f 	ld.w      	r12, (r3, 0x3c)
18005a50:	6c30      	or      	r0, r12
18005a52:	b30f      	st.w      	r0, (r3, 0x3c)
            hw->TRG0 = (hw->TRG0 &~ ((0x3) << pin*2)) | ((0x0) << pin*2);
18005a54:	5904      	addu      	r0, r1, r1
18005a56:	d9832017 	ld.w      	r12, (r3, 0x5c)
18005a5a:	c4024020 	lsl      	r0, r2, r0
18005a5e:	c40c2040 	andn      	r0, r12, r0
18005a62:	b317      	st.w      	r0, (r3, 0x5c)
18005a64:	07e3      	br      	0x18005a2a	// 18005a2a <hggpio_v4_int+0x1e>
            hw->IMK  |=  pin_bit;
18005a66:	934f      	ld.w      	r2, (r3, 0x3c)
18005a68:	6c08      	or      	r0, r2
            hw->TRG0 = (hw->TRG0 &~ ((0x3) << pin*2)) | ((0x2) << pin*2);
18005a6a:	6044      	addu      	r1, r1
            hw->IMK  |=  pin_bit;
18005a6c:	b30f      	st.w      	r0, (r3, 0x3c)
            hw->TRG0 = (hw->TRG0 &~ ((0x3) << pin*2)) | ((0x2) << pin*2);
18005a6e:	ea0c0003 	movi      	r12, 3
18005a72:	7304      	lsl      	r12, r1
18005a74:	9357      	ld.w      	r2, (r3, 0x5c)
18005a76:	ea0d0002 	movi      	r13, 2
18005a7a:	c582204c 	andn      	r12, r2, r12
18005a7e:	c42d4021 	lsl      	r1, r13, r1
18005a82:	6c70      	or      	r1, r12
18005a84:	07e2      	br      	0x18005a48	// 18005a48 <hggpio_v4_int+0x3c>
            hw->IMK  |=  pin_bit;
18005a86:	934f      	ld.w      	r2, (r3, 0x3c)
18005a88:	6c08      	or      	r0, r2
            hw->TRG0 = (hw->TRG0 &~ ((0x3) << pin*2)) | ((0x1) << pin*2);
18005a8a:	6044      	addu      	r1, r1
            hw->IMK  |=  pin_bit;
18005a8c:	b30f      	st.w      	r0, (r3, 0x3c)
            hw->TRG0 = (hw->TRG0 &~ ((0x3) << pin*2)) | ((0x1) << pin*2);
18005a8e:	3203      	movi      	r2, 3
18005a90:	7084      	lsl      	r2, r1
18005a92:	9317      	ld.w      	r0, (r3, 0x5c)
18005a94:	c4402042 	andn      	r2, r0, r2
18005a98:	c42c4021 	lsl      	r1, r12, r1
18005a9c:	6c48      	or      	r1, r2
18005a9e:	07d5      	br      	0x18005a48	// 18005a48 <hggpio_v4_int+0x3c>
        return -EINVAL;
18005aa0:	3000      	movi      	r0, 0
18005aa2:	2815      	subi      	r0, 22
}
18005aa4:	783c      	jmp      	r15
	...

18005aa8 <hggpio_v4_irq_handler>:

/**********************************************************************************/
/*******************     GPIO    IRQ   FUNCTIONAL     *****************************/
/**********************************************************************************/
static void hggpio_v4_irq_handler(void *data)
{
18005aa8:	14d6      	push      	r4-r9, r15
    int32 i = 0;
    struct hggpio_v4 *dev = (struct hggpio_v4 *)data;
    struct hggpio_v4_hw *hw = (struct hggpio_v4_hw *)dev->hw;
18005aaa:	90c3      	ld.w      	r6, (r0, 0xc)
    enum gpio_irq_event evt = GPIO_IRQ_EVENT_NONE;
    uint32 pending  = hw->PND;
    uint32 trg0     = hw->TRG0;
    hw->PNDCLR = 0xFFFFFFFF;
18005aac:	3300      	movi      	r3, 0
18005aae:	2b00      	subi      	r3, 1
    uint32 pending  = hw->PND;
18005ab0:	96f5      	ld.w      	r7, (r6, 0x54)
18005ab2:	e4800013 	addi      	r4, r0, 20
    uint32 trg0     = hw->TRG0;
18005ab6:	d9062017 	ld.w      	r8, (r6, 0x5c)

    for (i = 0; i < HGGPIO_V4_MAX_PINS; i++) {
18005aba:	3500      	movi      	r5, 0
    hw->PNDCLR = 0xFFFFFFFF;
18005abc:	b676      	st.w      	r3, (r6, 0x58)
        if (pending & BIT(i)) {
            if ((trg0&(0x3 << i)) == (0x1)) {
18005abe:	ea090003 	movi      	r9, 3
        if (pending & BIT(i)) {
18005ac2:	c4a74043 	lsr      	r3, r7, r5
18005ac6:	e4632001 	andi      	r3, r3, 1
18005aca:	e9030015 	bez      	r3, 0x18005af4	// 18005af4 <hggpio_v4_irq_handler+0x4c>
            if ((trg0&(0x3 << i)) == (0x1)) {
18005ace:	c4a94023 	lsl      	r3, r9, r5
18005ad2:	68e0      	and      	r3, r8
18005ad4:	3b41      	cmpnei      	r3, 1
18005ad6:	0c14      	bf      	0x18005afe	// 18005afe <hggpio_v4_irq_handler+0x56>
                evt = GPIO_IRQ_EVENT_FALL;
            } else if ((trg0&(0x3 << i)) == (0x2)) {
18005ad8:	3b42      	cmpnei      	r3, 2
18005ada:	0c14      	bf      	0x18005b02	// 18005b02 <hggpio_v4_irq_handler+0x5a>
                evt = GPIO_IRQ_EVENT_RISE;
            } else {
                evt = (hw->IDAT & BIT(i)) ? GPIO_IRQ_EVENT_RISE : GPIO_IRQ_EVENT_FALL;
18005adc:	9668      	ld.w      	r3, (r6, 0x20)
18005ade:	70d5      	lsr      	r3, r5
18005ae0:	e4632001 	andi      	r3, r3, 1
                evt = GPIO_IRQ_EVENT_RISE;
18005ae4:	3b40      	cmpnei      	r3, 0
18005ae6:	6443      	mvcv      	r1
18005ae8:	2100      	addi      	r1, 1
            }
            if (dev->irq_hdl[i]) {
18005aea:	9470      	ld.w      	r3, (r4, 0x40)
18005aec:	e9030004 	bez      	r3, 0x18005af4	// 18005af4 <hggpio_v4_irq_handler+0x4c>
                dev->irq_hdl[i](dev->pin_id[i], evt);
18005af0:	9400      	ld.w      	r0, (r4, 0x0)
18005af2:	7bcd      	jsr      	r3
    for (i = 0; i < HGGPIO_V4_MAX_PINS; i++) {
18005af4:	2500      	addi      	r5, 1
18005af6:	3d50      	cmpnei      	r5, 16
18005af8:	2403      	addi      	r4, 4
18005afa:	0be4      	bt      	0x18005ac2	// 18005ac2 <hggpio_v4_irq_handler+0x1a>
            }
        }
    }
}
18005afc:	1496      	pop      	r4-r9, r15
                evt = (hw->IDAT & BIT(i)) ? GPIO_IRQ_EVENT_RISE : GPIO_IRQ_EVENT_FALL;
18005afe:	3102      	movi      	r1, 2
18005b00:	07f5      	br      	0x18005aea	// 18005aea <hggpio_v4_irq_handler+0x42>
                evt = GPIO_IRQ_EVENT_RISE;
18005b02:	3101      	movi      	r1, 1
18005b04:	07f3      	br      	0x18005aea	// 18005aea <hggpio_v4_irq_handler+0x42>
	...

18005b08 <hggpio_v4_release_pin_irq>:
    irq_enable(dev->comm_irq_num);
    return RET_OK;
}

static int32 hggpio_v4_release_pin_irq(struct gpio_device *gpio, uint32 pin,enum gpio_irq_event evt)
{
18005b08:	14d0      	push      	r15
    struct hggpio_v4 *dev = (struct hggpio_v4 *)gpio;

    if (pin < dev->pin_num[0] || pin > dev->pin_num[1]) {
18005b0a:	d8402025 	ld.w      	r2, (r0, 0x94)
18005b0e:	6484      	cmphs      	r1, r2
{
18005b10:	6cc3      	mov      	r3, r0
    if (pin < dev->pin_num[0] || pin > dev->pin_num[1]) {
18005b12:	0c0e      	bf      	0x18005b2e	// 18005b2e <hggpio_v4_release_pin_irq+0x26>
18005b14:	d9802026 	ld.w      	r12, (r0, 0x98)
18005b18:	6470      	cmphs      	r12, r1
18005b1a:	0c0a      	bf      	0x18005b2e	// 18005b2e <hggpio_v4_release_pin_irq+0x26>
    return pin - gpio->pin_num[0];
18005b1c:	604a      	subu      	r1, r2
18005b1e:	4142      	lsli      	r2, r1, 2
18005b20:	60c8      	addu      	r3, r2
        return -EINVAL;
    }
    pin = hggpio_v4_pin_num(dev, pin);
    dev->irq_hdl[pin] = NULL;
18005b22:	3200      	movi      	r2, 0
18005b24:	b355      	st.w      	r2, (r3, 0x54)
    dev->pin_id[pin]  = 0;
18005b26:	b345      	st.w      	r2, (r3, 0x14)
    return hggpio_v4_int(gpio, pin, 0);
18005b28:	e3ffff72 	bsr      	0x18005a0c	// 18005a0c <hggpio_v4_int>
}
18005b2c:	1490      	pop      	r15
        return -EINVAL;
18005b2e:	3000      	movi      	r0, 0
18005b30:	2815      	subi      	r0, 22
18005b32:	07fd      	br      	0x18005b2c	// 18005b2c <hggpio_v4_release_pin_irq+0x24>

18005b34 <hggpio_v4_request_pin_irq>:
{
18005b34:	14d2      	push      	r4-r5, r15
18005b36:	1421      	subi      	r14, r14, 4
18005b38:	6d03      	mov      	r4, r0
18005b3a:	9804      	ld.w      	r0, (r14, 0x10)
    if (pin < dev->pin_num[0] || pin > dev->pin_num[1]) {
18005b3c:	d8a42025 	ld.w      	r5, (r4, 0x94)
18005b40:	6544      	cmphs      	r1, r5
{
18005b42:	b800      	st.w      	r0, (r14, 0x0)
    if (pin < dev->pin_num[0] || pin > dev->pin_num[1]) {
18005b44:	0c2b      	bf      	0x18005b9a	// 18005b9a <hggpio_v4_request_pin_irq+0x66>
18005b46:	d8042026 	ld.w      	r0, (r4, 0x98)
18005b4a:	6440      	cmphs      	r0, r1
18005b4c:	0c27      	bf      	0x18005b9a	// 18005b9a <hggpio_v4_request_pin_irq+0x66>
    return pin - gpio->pin_num[0];
18005b4e:	59b5      	subu      	r5, r1, r5
18005b50:	4522      	lsli      	r1, r5, 2
18005b52:	6050      	addu      	r1, r4
    dev->irq_hdl[pin] = handler;
18005b54:	b155      	st.w      	r2, (r1, 0x54)
    dev->pin_id[pin]  = data;
18005b56:	b165      	st.w      	r3, (r1, 0x14)
    ret = request_irq(dev->irq_num, hggpio_v4_irq_handler, (void *)dev);
18005b58:	6c93      	mov      	r2, r4
18005b5a:	1032      	lrw      	r1, 0x18005aa8	// 18005ba0 <hggpio_v4_request_pin_irq+0x6c>
18005b5c:	d804009c 	ld.b      	r0, (r4, 0x9c)
18005b60:	e3ffedbe 	bsr      	0x180036dc	// 180036dc <request_irq>
    ASSERT(ret == RET_OK);
18005b64:	e9000008 	bez      	r0, 0x18005b74	// 18005b74 <hggpio_v4_request_pin_irq+0x40>
18005b68:	104f      	lrw      	r2, 0x18016760	// 18005ba4 <hggpio_v4_request_pin_irq+0x70>
18005b6a:	ea010363 	movi      	r1, 867
18005b6e:	100f      	lrw      	r0, 0x18016728	// 18005ba8 <hggpio_v4_request_pin_irq+0x74>
18005b70:	e3ffea52 	bsr      	0x18003014	// 18003014 <assert_internal>
    hggpio_v4_int(gpio, pin, evt);
18005b74:	9840      	ld.w      	r2, (r14, 0x0)
18005b76:	6c57      	mov      	r1, r5
18005b78:	6c13      	mov      	r0, r4
18005b7a:	e3ffff49 	bsr      	0x18005a0c	// 18005a0c <hggpio_v4_int>
    IRQn &= 0x7FUL;
18005b7e:	9464      	ld.w      	r3, (r4, 0x10)
    VIC->ISER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
18005b80:	c4a354c1 	zext      	r1, r3, 6, 5
18005b84:	3201      	movi      	r2, 1
18005b86:	e463201f 	andi      	r3, r3, 31
18005b8a:	c4624023 	lsl      	r3, r2, r3
18005b8e:	1048      	lrw      	r2, 0xe000e100	// 18005bac <hggpio_v4_request_pin_irq+0x78>
18005b90:	d4220883 	str.w      	r3, (r2, r1 << 2)
    return RET_OK;
18005b94:	3000      	movi      	r0, 0
}
18005b96:	1401      	addi      	r14, r14, 4
18005b98:	1492      	pop      	r4-r5, r15
        return -EINVAL;
18005b9a:	3000      	movi      	r0, 0
18005b9c:	2815      	subi      	r0, 22
18005b9e:	07fc      	br      	0x18005b96	// 18005b96 <hggpio_v4_request_pin_irq+0x62>
18005ba0:	18005aa8 	.long	0x18005aa8
18005ba4:	18016760 	.long	0x18016760
18005ba8:	18016728 	.long	0x18016728
18005bac:	e000e100 	.long	0xe000e100

18005bb0 <hggpio_v4_dir>:
{
18005bb0:	14d1      	push      	r4, r15
    if (GPIO_DIR_INPUT != direction && GPIO_DIR_OUTPUT != direction) {
18005bb2:	3a01      	cmphsi      	r2, 2
{
18005bb4:	6d0b      	mov      	r4, r2
    if (GPIO_DIR_INPUT != direction && GPIO_DIR_OUTPUT != direction) {
18005bb6:	0815      	bt      	0x18005be0	// 18005be0 <hggpio_v4_dir+0x30>
    if (GPIO_DIR_INPUT == direction) {
18005bb8:	e922000b 	bnez      	r2, 0x18005bce	// 18005bce <hggpio_v4_dir+0x1e>
        if (RET_OK != hggpio_v4_iomap_input(gpio,  pin, GPIO_IOMAP_INPUT)) {
18005bbc:	32f0      	movi      	r2, 240
18005bbe:	4248      	lsli      	r2, r2, 8
18005bc0:	e3fffd1a 	bsr      	0x180055f4	// 180055f4 <hggpio_v4_iomap_input>
18005bc4:	3840      	cmpnei      	r0, 0
18005bc6:	c4000500 	mvc      	r0
18005bca:	5c01      	subu      	r0, r4, r0
}
18005bcc:	1491      	pop      	r4, r15
        if (RET_OK != hggpio_v4_iomap_output(gpio, pin, GPIO_IOMAP_OUTPUT)) {
18005bce:	3200      	movi      	r2, 0
18005bd0:	e3fffcb2 	bsr      	0x18005534	// 18005534 <hggpio_v4_iomap_output>
18005bd4:	3840      	cmpnei      	r0, 0
18005bd6:	c4000503 	mvc      	r3
18005bda:	3000      	movi      	r0, 0
18005bdc:	600e      	subu      	r0, r3
18005bde:	07f7      	br      	0x18005bcc	// 18005bcc <hggpio_v4_dir+0x1c>
        return -EINVAL;
18005be0:	3000      	movi      	r0, 0
18005be2:	2815      	subi      	r0, 22
18005be4:	07f4      	br      	0x18005bcc	// 18005bcc <hggpio_v4_dir+0x1c>
	...

18005be8 <hggpio_v4_ioctl>:
{
18005be8:	14d3      	push      	r4-r6, r15
18005bea:	1421      	subi      	r14, r14, 4
18005bec:	6f0b      	mov      	r12, r2
    switch (cmd) {
18005bee:	eb4c0006 	cmpnei      	r12, 6
{
18005bf2:	6c8f      	mov      	r2, r3
18005bf4:	9865      	ld.w      	r3, (r14, 0x14)
18005bf6:	6d43      	mov      	r5, r0
18005bf8:	6d07      	mov      	r4, r1
18005bfa:	b860      	st.w      	r3, (r14, 0x0)
    switch (cmd) {
18005bfc:	0cf0      	bf      	0x18005ddc	// 18005ddc <hggpio_v4_ioctl+0x1f4>
18005bfe:	eb2c0006 	cmplti      	r12, 7
18005c02:	0c23      	bf      	0x18005c48	// 18005c48 <hggpio_v4_ioctl+0x60>
18005c04:	eb4c0002 	cmpnei      	r12, 2
18005c08:	0c7b      	bf      	0x18005cfe	// 18005cfe <hggpio_v4_ioctl+0x116>
18005c0a:	eb2c0002 	cmplti      	r12, 3
18005c0e:	0c08      	bf      	0x18005c1e	// 18005c1e <hggpio_v4_ioctl+0x36>
18005c10:	eb4c0001 	cmpnei      	r12, 1
18005c14:	0c62      	bf      	0x18005cd8	// 18005cd8 <hggpio_v4_ioctl+0xf0>
            ret_val = -ENOTSUPP;
18005c16:	ea02020b 	movi      	r2, 523
18005c1a:	6c8a      	nor      	r2, r2
18005c1c:	045b      	br      	0x18005cd2	// 18005cd2 <hggpio_v4_ioctl+0xea>
    switch (cmd) {
18005c1e:	eb4c0004 	cmpnei      	r12, 4
18005c22:	0c40      	bf      	0x18005ca2	// 18005ca2 <hggpio_v4_ioctl+0xba>
18005c24:	eb4c0005 	cmpnei      	r12, 5
18005c28:	0bf7      	bt      	0x18005c16	// 18005c16 <hggpio_v4_ioctl+0x2e>
    if (pin < dev->pin_num[0] || pin > dev->pin_num[1]) {
18005c2a:	d8602025 	ld.w      	r3, (r0, 0x94)
18005c2e:	64c4      	cmphs      	r1, r3
    struct hggpio_v4_hw *hw = (struct hggpio_v4_hw *)dev->hw;
18005c30:	9043      	ld.w      	r2, (r0, 0xc)
    if (pin < dev->pin_num[0] || pin > dev->pin_num[1]) {
18005c32:	0c35      	bf      	0x18005c9c	// 18005c9c <hggpio_v4_ioctl+0xb4>
18005c34:	d8202026 	ld.w      	r1, (r0, 0x98)
18005c38:	6504      	cmphs      	r1, r4
18005c3a:	0c31      	bf      	0x18005c9c	// 18005c9c <hggpio_v4_ioctl+0xb4>
    return pin - gpio->pin_num[0];
18005c3c:	610e      	subu      	r4, r3
    hw->TGL = (1UL << pin);
18005c3e:	3301      	movi      	r3, 1
18005c40:	c4834024 	lsl      	r4, r3, r4
18005c44:	b28e      	st.w      	r4, (r2, 0x38)
18005c46:	043f      	br      	0x18005cc4	// 18005cc4 <hggpio_v4_ioctl+0xdc>
    switch (cmd) {
18005c48:	eb4c0103 	cmpnei      	r12, 259
18005c4c:	0cb6      	bf      	0x18005db8	// 18005db8 <hggpio_v4_ioctl+0x1d0>
18005c4e:	eb2c0103 	cmplti      	r12, 260
18005c52:	0c0b      	bf      	0x18005c68	// 18005c68 <hggpio_v4_ioctl+0x80>
18005c54:	eb4c0101 	cmpnei      	r12, 257
18005c58:	0c7e      	bf      	0x18005d54	// 18005d54 <hggpio_v4_ioctl+0x16c>
18005c5a:	eb4c0102 	cmpnei      	r12, 258
18005c5e:	0bdc      	bt      	0x18005c16	// 18005c16 <hggpio_v4_ioctl+0x2e>
                ret_val = hggpio_v4_iomap_output(gpio, pin, param1);
18005c60:	e3fffc6a 	bsr      	0x18005534	// 18005534 <hggpio_v4_iomap_output>
                ret_val = hggpio_v4_iomap_input(gpio, pin, param1);
18005c64:	6c83      	mov      	r2, r0
                break;
18005c66:	0436      	br      	0x18005cd2	// 18005cd2 <hggpio_v4_ioctl+0xea>
    switch (cmd) {
18005c68:	eb4c0104 	cmpnei      	r12, 260
18005c6c:	0ca9      	bf      	0x18005dbe	// 18005dbe <hggpio_v4_ioctl+0x1d6>
18005c6e:	eb4c0105 	cmpnei      	r12, 261
18005c72:	0bd2      	bt      	0x18005c16	// 18005c16 <hggpio_v4_ioctl+0x2e>
    if (pin < dev->pin_num[0] || pin > dev->pin_num[1]) {
18005c74:	d8602025 	ld.w      	r3, (r0, 0x94)
18005c78:	64c4      	cmphs      	r1, r3
18005c7a:	0c11      	bf      	0x18005c9c	// 18005c9c <hggpio_v4_ioctl+0xb4>
18005c7c:	d8202026 	ld.w      	r1, (r0, 0x98)
18005c80:	6504      	cmphs      	r1, r4
18005c82:	0c0d      	bf      	0x18005c9c	// 18005c9c <hggpio_v4_ioctl+0xb4>
    return pin - gpio->pin_num[0];
18005c84:	610e      	subu      	r4, r3
    if (pin >= HGGPIO_V4_MAX_PINS) {
18005c86:	3c0f      	cmphsi      	r4, 16
    uint32 pin_pos = ((pin & 0x7) * 4);
18005c88:	e4242007 	andi      	r1, r4, 7
18005c8c:	4102      	lsli      	r0, r1, 2
    if (pin >= HGGPIO_V4_MAX_PINS) {
18005c8e:	0807      	bt      	0x18005c9c	// 18005c9c <hggpio_v4_ioctl+0xb4>
    switch (drive) {
18005c90:	3a41      	cmpnei      	r2, 1
18005c92:	0c57      	bf      	0x18005d40	// 18005d40 <hggpio_v4_ioctl+0x158>
18005c94:	3a21      	cmplti      	r2, 2
18005c96:	0c41      	bf      	0x18005d18	// 18005d18 <hggpio_v4_ioctl+0x130>
18005c98:	e9020044 	bez      	r2, 0x18005d20	// 18005d20 <hggpio_v4_ioctl+0x138>
        return -EINVAL;
18005c9c:	3200      	movi      	r2, 0
18005c9e:	2a15      	subi      	r2, 22
18005ca0:	0419      	br      	0x18005cd2	// 18005cd2 <hggpio_v4_ioctl+0xea>
    if (pin < dev->pin_num[0] || pin > dev->pin_num[1]) {
18005ca2:	d8602025 	ld.w      	r3, (r0, 0x94)
18005ca6:	64d0      	cmphs      	r4, r3
    struct hggpio_v4_hw *hw = (struct hggpio_v4_hw *)dev->hw;
18005ca8:	9023      	ld.w      	r1, (r0, 0xc)
    if (pin < dev->pin_num[0] || pin > dev->pin_num[1]) {
18005caa:	0ff9      	bf      	0x18005c9c	// 18005c9c <hggpio_v4_ioctl+0xb4>
18005cac:	d8002026 	ld.w      	r0, (r0, 0x98)
18005cb0:	6500      	cmphs      	r0, r4
18005cb2:	0ff5      	bf      	0x18005c9c	// 18005c9c <hggpio_v4_ioctl+0xb4>
    return pin - gpio->pin_num[0];
18005cb4:	610e      	subu      	r4, r3
18005cb6:	3301      	movi      	r3, 1
    if (enable) {
18005cb8:	e9020008 	bez      	r2, 0x18005cc8	// 18005cc8 <hggpio_v4_ioctl+0xe0>
        hw->DEBEN |= (1UL << pin);
18005cbc:	9153      	ld.w      	r2, (r1, 0x4c)
18005cbe:	70d0      	lsl      	r3, r4
18005cc0:	6cc8      	or      	r3, r2
18005cc2:	b173      	st.w      	r3, (r1, 0x4c)
    int32  ret = RET_OK;
18005cc4:	3200      	movi      	r2, 0
18005cc6:	0406      	br      	0x18005cd2	// 18005cd2 <hggpio_v4_ioctl+0xea>
        hw->DEBEN &= ~(1UL << pin);
18005cc8:	9113      	ld.w      	r0, (r1, 0x4c)
18005cca:	70d0      	lsl      	r3, r4
18005ccc:	c4602043 	andn      	r3, r0, r3
18005cd0:	b173      	st.w      	r3, (r1, 0x4c)
}
18005cd2:	6c0b      	mov      	r0, r2
18005cd4:	1401      	addi      	r14, r14, 4
18005cd6:	1493      	pop      	r4-r6, r15
    __ASM volatile("mfcr %0, psr" : "=r"(result) : : "memory");
18005cd8:	c0006024 	mfcr      	r4, cr<0, 0>
    __ASM volatile("psrclr ie");
18005cdc:	c0807020 	psrclr      	ie
    if (RET_OK != hggpio_v4_dir(gpio, pin, direction)) {
18005ce0:	e3ffff68 	bsr      	0x18005bb0	// 18005bb0 <hggpio_v4_dir>
    return !(result & 0x40);
18005ce4:	e4842040 	andi      	r4, r4, 64
18005ce8:	6c83      	mov      	r2, r0
18005cea:	e9000005 	bez      	r0, 0x18005cf4	// 18005cf4 <hggpio_v4_ioctl+0x10c>
        return RET_ERR;
18005cee:	3200      	movi      	r2, 0
18005cf0:	2a00      	subi      	r2, 1
18005cf2:	07f0      	br      	0x18005cd2	// 18005cd2 <hggpio_v4_ioctl+0xea>
    enable_irq(flags);
18005cf4:	e904ffe8 	bez      	r4, 0x18005cc4	// 18005cc4 <hggpio_v4_ioctl+0xdc>
    __ASM volatile("psrset ie");
18005cf8:	c0807420 	psrset      	ie
18005cfc:	07eb      	br      	0x18005cd2	// 18005cd2 <hggpio_v4_ioctl+0xea>
    __ASM volatile("mfcr %0, psr" : "=r"(result) : : "memory");
18005cfe:	c0006024 	mfcr      	r4, cr<0, 0>
    __ASM volatile("psrclr ie");
18005d02:	c0807020 	psrclr      	ie
    return !(result & 0x40);
18005d06:	e4842040 	andi      	r4, r4, 64
    hggpio_v4_set(gpio, pin, value);
18005d0a:	e3fffe33 	bsr      	0x18005970	// 18005970 <hggpio_v4_set>
    enable_irq(flags);
18005d0e:	e904ffdb 	bez      	r4, 0x18005cc4	// 18005cc4 <hggpio_v4_ioctl+0xdc>
    __ASM volatile("psrset ie");
18005d12:	c0807420 	psrset      	ie
18005d16:	07d7      	br      	0x18005cc4	// 18005cc4 <hggpio_v4_ioctl+0xdc>
    switch (drive) {
18005d18:	3a42      	cmpnei      	r2, 2
18005d1a:	0c03      	bf      	0x18005d20	// 18005d20 <hggpio_v4_ioctl+0x138>
18005d1c:	3a43      	cmpnei      	r2, 3
18005d1e:	0bbf      	bt      	0x18005c9c	// 18005c9c <hggpio_v4_ioctl+0xb4>
    switch(pin >> 3) {
18005d20:	4c83      	lsri      	r4, r4, 3
18005d22:	3c41      	cmpnei      	r4, 1
    struct hggpio_v4_hw *hw = (struct hggpio_v4_hw *)dev->hw;
18005d24:	d9852003 	ld.w      	r12, (r5, 0xc)
18005d28:	310f      	movi      	r1, 15
18005d2a:	c4024023 	lsl      	r3, r2, r0
    switch(pin >> 3) {
18005d2e:	0c0b      	bf      	0x18005d44	// 18005d44 <hggpio_v4_ioctl+0x15c>
            reg->OSPEEDL = (reg->OSPEEDL & ~(0xF << pin_pos)) | (drive_to_reg << pin_pos);
18005d30:	d84c2002 	ld.w      	r2, (r12, 0x8)
18005d34:	7040      	lsl      	r1, r0
18005d36:	6885      	andn      	r2, r1
18005d38:	6c8c      	or      	r2, r3
18005d3a:	dc4c2002 	st.w      	r2, (r12, 0x8)
18005d3e:	07c3      	br      	0x18005cc4	// 18005cc4 <hggpio_v4_ioctl+0xdc>
            drive_to_reg = 1;
18005d40:	3201      	movi      	r2, 1
18005d42:	07ef      	br      	0x18005d20	// 18005d20 <hggpio_v4_ioctl+0x138>
            reg->OSPEEDH = (reg->OSPEEDH & ~(0xF << pin_pos)) | (drive_to_reg << pin_pos);
18005d44:	d84c2003 	ld.w      	r2, (r12, 0xc)
18005d48:	7040      	lsl      	r1, r0
18005d4a:	6885      	andn      	r2, r1
18005d4c:	6c8c      	or      	r2, r3
18005d4e:	dc4c2003 	st.w      	r2, (r12, 0xc)
18005d52:	07b9      	br      	0x18005cc4	// 18005cc4 <hggpio_v4_ioctl+0xdc>
    if (pin < dev->pin_num[0] || pin > dev->pin_num[1]) {
18005d54:	d8652025 	ld.w      	r3, (r5, 0x94)
18005d58:	64c4      	cmphs      	r1, r3
    struct hggpio_v4_hw *hw = (struct hggpio_v4_hw *)dev->hw;
18005d5a:	9003      	ld.w      	r0, (r0, 0xc)
    if (pin < dev->pin_num[0] || pin > dev->pin_num[1]) {
18005d5c:	0fa0      	bf      	0x18005c9c	// 18005c9c <hggpio_v4_ioctl+0xb4>
18005d5e:	d8252026 	ld.w      	r1, (r5, 0x98)
18005d62:	6504      	cmphs      	r1, r4
18005d64:	0f9c      	bf      	0x18005c9c	// 18005c9c <hggpio_v4_ioctl+0xb4>
    return pin - gpio->pin_num[0];
18005d66:	610e      	subu      	r4, r3
    hw->AIOEN &= ~(1UL << (pin));
18005d68:	3300      	movi      	r3, 0
    pin_loc = (pin & 0x7) * 4;
18005d6a:	e4242007 	andi      	r1, r4, 7
    hw->AIOEN &= ~(1UL << (pin));
18005d6e:	2b01      	subi      	r3, 2
    pin_loc = (pin & 0x7) * 4;
18005d70:	c441482d 	lsli      	r13, r1, 2
    hw->AIOEN &= ~(1UL << (pin));
18005d74:	70d3      	rotl      	r3, r4
18005d76:	9034      	ld.w      	r1, (r0, 0x50)
18005d78:	68c4      	and      	r3, r1
18005d7a:	b074      	st.w      	r3, (r0, 0x50)
    hw->MODE = (hw->MODE & ~(3UL << (pin*2))) | (2UL << (pin*2));
18005d7c:	5c30      	addu      	r1, r4, r4
18005d7e:	3303      	movi      	r3, 3
18005d80:	d9802000 	ld.w      	r12, (r0, 0x0)
18005d84:	70c4      	lsl      	r3, r1
18005d86:	c46c2043 	andn      	r3, r12, r3
18005d8a:	ea0c0002 	movi      	r12, 2
18005d8e:	7304      	lsl      	r12, r1
    if (pin < 8) {
18005d90:	3c07      	cmphsi      	r4, 8
    hw->MODE = (hw->MODE & ~(3UL << (pin*2))) | (2UL << (pin*2));
18005d92:	6cf0      	or      	r3, r12
18005d94:	b060      	st.w      	r3, (r0, 0x0)
18005d96:	310f      	movi      	r1, 15
18005d98:	70b4      	lsl      	r2, r13
    if (pin < 8) {
18005d9a:	0808      	bt      	0x18005daa	// 18005daa <hggpio_v4_ioctl+0x1c2>
        hw->AFRL = (hw->AFRL & ~(0xFUL << (pin_loc))) | (afio << (pin_loc));
18005d9c:	906c      	ld.w      	r3, (r0, 0x30)
18005d9e:	7074      	lsl      	r1, r13
18005da0:	c4232041 	andn      	r1, r3, r1
18005da4:	6c84      	or      	r2, r1
18005da6:	b04c      	st.w      	r2, (r0, 0x30)
18005da8:	078e      	br      	0x18005cc4	// 18005cc4 <hggpio_v4_ioctl+0xdc>
        hw->AFRH = (hw->AFRH & ~(0xFUL << (pin_loc))) | (afio << (pin_loc));
18005daa:	906d      	ld.w      	r3, (r0, 0x34)
18005dac:	7074      	lsl      	r1, r13
18005dae:	c4232041 	andn      	r1, r3, r1
18005db2:	6c84      	or      	r2, r1
18005db4:	b04d      	st.w      	r2, (r0, 0x34)
18005db6:	0787      	br      	0x18005cc4	// 18005cc4 <hggpio_v4_ioctl+0xdc>
                ret_val = hggpio_v4_iomap_input(gpio, pin, param1);
18005db8:	e3fffc1e 	bsr      	0x180055f4	// 180055f4 <hggpio_v4_iomap_input>
18005dbc:	0754      	br      	0x18005c64	// 18005c64 <hggpio_v4_ioctl+0x7c>
    if (RET_OK != hggpio_v4_iomap_input(gpio,  pin,  iomap_in_func_sel)) {
18005dbe:	e3fffc1b 	bsr      	0x180055f4	// 180055f4 <hggpio_v4_iomap_input>
18005dc2:	6d83      	mov      	r6, r0
18005dc4:	e920ff95 	bnez      	r0, 0x18005cee	// 18005cee <hggpio_v4_ioctl+0x106>
    if (RET_OK != hggpio_v4_iomap_output(gpio, pin,  iomap_out_func_sel)) {
18005dc8:	9840      	ld.w      	r2, (r14, 0x0)
18005dca:	6c53      	mov      	r1, r4
18005dcc:	6c17      	mov      	r0, r5
18005dce:	e3fffbb3 	bsr      	0x18005534	// 18005534 <hggpio_v4_iomap_output>
18005dd2:	3840      	cmpnei      	r0, 0
18005dd4:	c4000502 	mvc      	r2
18005dd8:	5e49      	subu      	r2, r6, r2
18005dda:	077c      	br      	0x18005cd2	// 18005cd2 <hggpio_v4_ioctl+0xea>
    if (pin < dev->pin_num[0] || pin > dev->pin_num[1]) {
18005ddc:	d8602025 	ld.w      	r3, (r0, 0x94)
18005de0:	64d0      	cmphs      	r4, r3
    struct hggpio_v4_hw *hw = (struct hggpio_v4_hw *)dev->hw;
18005de2:	9023      	ld.w      	r1, (r0, 0xc)
    if (pin < dev->pin_num[0] || pin > dev->pin_num[1]) {
18005de4:	0f5c      	bf      	0x18005c9c	// 18005c9c <hggpio_v4_ioctl+0xb4>
18005de6:	d8002026 	ld.w      	r0, (r0, 0x98)
18005dea:	6500      	cmphs      	r0, r4
18005dec:	0f58      	bf      	0x18005c9c	// 18005c9c <hggpio_v4_ioctl+0xb4>
    return pin - gpio->pin_num[0];
18005dee:	610e      	subu      	r4, r3
18005df0:	5c10      	addu      	r0, r4, r4
18005df2:	3303      	movi      	r3, 3
    if (enable) {
18005df4:	e902000d 	bez      	r2, 0x18005e0e	// 18005e0e <hggpio_v4_ioctl+0x226>
        hw->MODE = (hw->MODE &~ (0x3 << pin*2)) | (0x3 << pin*2);;
18005df8:	9140      	ld.w      	r2, (r1, 0x0)
18005dfa:	70c0      	lsl      	r3, r0
18005dfc:	688d      	andn      	r2, r3
18005dfe:	6cc8      	or      	r3, r2
18005e00:	b160      	st.w      	r3, (r1, 0x0)
        hw->AIOEN |= (1UL << (pin));
18005e02:	3301      	movi      	r3, 1
18005e04:	9154      	ld.w      	r2, (r1, 0x50)
18005e06:	70d0      	lsl      	r3, r4
18005e08:	6cc8      	or      	r3, r2
18005e0a:	b174      	st.w      	r3, (r1, 0x50)
18005e0c:	075c      	br      	0x18005cc4	// 18005cc4 <hggpio_v4_ioctl+0xdc>
        hw->MODE = (hw->MODE & ~(3UL << (pin*2)));
18005e0e:	d9812000 	ld.w      	r12, (r1, 0x0)
18005e12:	70c0      	lsl      	r3, r0
18005e14:	c46c2043 	andn      	r3, r12, r3
18005e18:	b160      	st.w      	r3, (r1, 0x0)
        hw->AIOEN &= ~(1UL << (pin));
18005e1a:	3300      	movi      	r3, 0
18005e1c:	2b01      	subi      	r3, 2
18005e1e:	9114      	ld.w      	r0, (r1, 0x50)
18005e20:	70d3      	rotl      	r3, r4
18005e22:	68c0      	and      	r3, r0
18005e24:	b174      	st.w      	r3, (r1, 0x50)
18005e26:	0756      	br      	0x18005cd2	// 18005cd2 <hggpio_v4_ioctl+0xea>

18005e28 <hggpio_v4_attach>:
    .request_pin_irq = hggpio_v4_request_pin_irq,
    .release_pin_irq = hggpio_v4_release_pin_irq,
};

int32 hggpio_v4_attach(uint32 dev_id, struct hggpio_v4 *gpio)
{
18005e28:	14d2      	push      	r4-r5, r15
18005e2a:	6d43      	mov      	r5, r0
    int32 i = 0;
    struct hggpio_v4 *dev     = (struct hggpio_v4*)gpio;
    struct hggpio_v4_hw *hw   = (struct hggpio_v4_hw *)dev->hw;

    //V2 IOFUNCOUTCON0-3无复位值，故全写0
    memset((void *)&hw->IOFUNCOUTCON0, 0, sizeof(hw->IOFUNCOUTCON0)*4);
18005e2c:	9103      	ld.w      	r0, (r1, 0xc)
{
18005e2e:	6d07      	mov      	r4, r1
    memset((void *)&hw->IOFUNCOUTCON0, 0, sizeof(hw->IOFUNCOUTCON0)*4);
18005e30:	3210      	movi      	r2, 16
18005e32:	3100      	movi      	r1, 0
18005e34:	2073      	addi      	r0, 116
18005e36:	e0008019 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
    
    gpio->dev.dev.ops = (const struct devobj_ops *)&gpio_v4_ops;
18005e3a:	106f      	lrw      	r3, 0x18016744	// 18005e74 <hggpio_v4_attach+0x4c>
18005e3c:	e4440093 	addi      	r2, r4, 148
18005e40:	b462      	st.w      	r3, (r4, 0x8)

    for (i = 0; i < HGGPIO_V4_MAX_PINS; i++) {
        gpio->irq_hdl[i] = NULL;
18005e42:	3100      	movi      	r1, 0
18005e44:	e4640053 	addi      	r3, r4, 84
18005e48:	b320      	st.w      	r1, (r3, 0x0)
18005e4a:	2303      	addi      	r3, 4
    for (i = 0; i < HGGPIO_V4_MAX_PINS; i++) {
18005e4c:	648e      	cmpne      	r3, r2
18005e4e:	0bfd      	bt      	0x18005e48	// 18005e48 <hggpio_v4_attach+0x20>
    IRQn &= 0x7FUL;
18005e50:	9464      	ld.w      	r3, (r4, 0x10)
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
18005e52:	c4a354c2 	zext      	r2, r3, 6, 5
18005e56:	3101      	movi      	r1, 1
18005e58:	e463201f 	andi      	r3, r3, 31
18005e5c:	c4614023 	lsl      	r3, r1, r3
18005e60:	221f      	addi      	r2, 32
18005e62:	1026      	lrw      	r1, 0xe000e100	// 18005e78 <hggpio_v4_attach+0x50>
18005e64:	d4410883 	str.w      	r3, (r1, r2 << 2)
    }
    irq_disable(gpio->comm_irq_num);
    dev_register(dev_id, (struct dev_obj *)gpio);
18005e68:	6c17      	mov      	r0, r5
18005e6a:	6c53      	mov      	r1, r4
18005e6c:	e3ffe91c 	bsr      	0x180030a4	// 180030a4 <dev_register>
    
    return RET_OK;
}
18005e70:	3000      	movi      	r0, 0
18005e72:	1492      	pop      	r4-r5, r15
18005e74:	18016744 	.long	0x18016744
18005e78:	e000e100 	.long	0xe000e100

18005e7c <hgi2c_v1_get_busy>:
    __ASM volatile("nop");
18005e7c:	6c03      	mov      	r0, r0
18005e7e:	6c03      	mov      	r0, r0
}

static inline int32 hgi2c_v1_get_busy(struct hgi2c_v1_hw *p_i2c)
{
    __NOP();__NOP();
    return ((p_i2c->STA1 & LL_IIC_STA1_SSP_BUSY_PENDING));
18005e80:	900a      	ld.w      	r0, (r0, 0x28)
}
18005e82:	e4002040 	andi      	r0, r0, 64
18005e86:	783c      	jmp      	r15

18005e88 <hgi2c_v1_ioctl>:

static int32 hgi2c_v1_ioctl(struct i2c_device *i2c, int32 cmd, uint32 param)
{
    int32  ret_val = RET_OK;
    struct hgi2c_v1       *dev = (struct hgi2c_v1 *)i2c;
    struct hgi2c_v1_hw *hw  = (struct hgi2c_v1_hw*)( ( (struct hgi2c_v1 *)i2c )->hw );
18005e88:	9063      	ld.w      	r3, (r0, 0xc)

    if ((!dev->opened) || (dev->dsleep)) {
18005e8a:	d800002c 	ld.b      	r0, (r0, 0x2c)
18005e8e:	e4002030 	andi      	r0, r0, 48
18005e92:	3850      	cmpnei      	r0, 16
18005e94:	082b      	bt      	0x18005eea	// 18005eea <hgi2c_v1_ioctl+0x62>
        return RET_ERR;
    }

    switch (cmd) {
18005e96:	3942      	cmpnei      	r1, 2
18005e98:	0c16      	bf      	0x18005ec4	// 18005ec4 <hgi2c_v1_ioctl+0x3c>
18005e9a:	3943      	cmpnei      	r1, 3
18005e9c:	0c08      	bf      	0x18005eac	// 18005eac <hgi2c_v1_ioctl+0x24>
18005e9e:	3941      	cmpnei      	r1, 1
18005ea0:	0828      	bt      	0x18005ef0	// 18005ef0 <hgi2c_v1_ioctl+0x68>
    if (enable) {
18005ea2:	e9020020 	bez      	r2, 0x18005ee2	// 18005ee2 <hgi2c_v1_ioctl+0x5a>
        hw->CON0 |=   LL_IIC_CON0_STRONG_DRV_EN;
18005ea6:	9340      	ld.w      	r2, (r3, 0x0)
18005ea8:	3ab7      	bseti      	r2, 23
18005eaa:	041a      	br      	0x18005ede	// 18005ede <hgi2c_v1_ioctl+0x56>
    if (addr > 0x3FF) {
18005eac:	eb0203ff 	cmphsi      	r2, 1024
18005eb0:	081d      	bt      	0x18005eea	// 18005eea <hgi2c_v1_ioctl+0x62>
    hw->OWNADRCON = (hw->OWNADRCON &~ LL_IIC_OWNADRCON_OWN_ADR1(0x3FF)) | LL_IIC_OWNADRCON_OWN_ADR1(addr);
18005eb2:	930d      	ld.w      	r0, (r3, 0x34)
18005eb4:	ea0103ff 	movi      	r1, 1023
18005eb8:	6c46      	nor      	r1, r1
18005eba:	6804      	and      	r0, r1
18005ebc:	6c08      	or      	r0, r2
18005ebe:	b30d      	st.w      	r0, (r3, 0x34)
    return RET_OK;
18005ec0:	3000      	movi      	r0, 0
            ret_val = -ENOTSUPP;
            break;
    }
    
    return ret_val;
}
18005ec2:	783c      	jmp      	r15
    if (value < 0 || value > 0x1F) {
18005ec4:	3a1f      	cmphsi      	r2, 32
18005ec6:	0819      	bt      	0x18005ef8	// 18005ef8 <hgi2c_v1_ioctl+0x70>
    hw->CON0 = (hw->CON0 &~(LL_IIC_CON0_I2C_FILTER_MAX(0xFF))) | LL_IIC_CON0_I2C_FILTER_MAX(value);
18005ec8:	31f8      	movi      	r1, 248
18005eca:	412b      	lsli      	r1, r1, 11
18005ecc:	424e      	lsli      	r2, r2, 14
18005ece:	6884      	and      	r2, r1
18005ed0:	9300      	ld.w      	r0, (r3, 0x0)
18005ed2:	c7405021 	bmaski      	r1, 27
18005ed6:	c6614901 	rotli      	r1, r1, 19
18005eda:	6804      	and      	r0, r1
18005edc:	6c80      	or      	r2, r0
18005ede:	b340      	st.w      	r2, (r3, 0x0)
18005ee0:	07f0      	br      	0x18005ec0	// 18005ec0 <hgi2c_v1_ioctl+0x38>
        hw->CON0 &= ~ LL_IIC_CON0_STRONG_DRV_EN;
18005ee2:	9320      	ld.w      	r1, (r3, 0x0)
18005ee4:	3997      	bclri      	r1, 23
18005ee6:	b320      	st.w      	r1, (r3, 0x0)
18005ee8:	07ec      	br      	0x18005ec0	// 18005ec0 <hgi2c_v1_ioctl+0x38>
        return RET_ERR;
18005eea:	3000      	movi      	r0, 0
18005eec:	2800      	subi      	r0, 1
18005eee:	07ea      	br      	0x18005ec2	// 18005ec2 <hgi2c_v1_ioctl+0x3a>
            ret_val = -ENOTSUPP;
18005ef0:	ea00020b 	movi      	r0, 523
18005ef4:	6c02      	nor      	r0, r0
18005ef6:	07e6      	br      	0x18005ec2	// 18005ec2 <hgi2c_v1_ioctl+0x3a>
        return -EINVAL;
18005ef8:	3000      	movi      	r0, 0
18005efa:	2815      	subi      	r0, 22
18005efc:	07e3      	br      	0x18005ec2	// 18005ec2 <hgi2c_v1_ioctl+0x3a>
	...

18005f00 <hgi2c_v1_request_irq>:
        }
    }
}

static int32 hgi2c_v1_request_irq(struct i2c_device *i2c, i2c_irq_hdl irqhdl, uint32 irq_data, uint32 irq_flag)
{
18005f00:	14c1      	push      	r4
    struct hgi2c_v1       *dev = (struct hgi2c_v1 *)i2c;
    struct hgi2c_v1_hw *hw  = (struct hgi2c_v1_hw *)dev->hw;
    
    if ((!dev->opened) || (dev->dsleep)) {
18005f02:	d9a0002c 	ld.b      	r13, (r0, 0x2c)
18005f06:	e48d2030 	andi      	r4, r13, 48
18005f0a:	3c50      	cmpnei      	r4, 16
    struct hgi2c_v1_hw *hw  = (struct hgi2c_v1_hw *)dev->hw;
18005f0c:	d9802003 	ld.w      	r12, (r0, 0xc)
    if ((!dev->opened) || (dev->dsleep)) {
18005f10:	0836      	bt      	0x18005f7c	// 18005f7c <hgi2c_v1_request_irq+0x7c>
        return RET_ERR;
    }

    dev->irq_hdl = irqhdl;
    dev->irq_data = irq_data;
18005f12:	b045      	st.w      	r2, (r0, 0x14)

    if (irq_flag & I2C_IRQ_FLAG_TX_DONE) {
18005f14:	e4432001 	andi      	r2, r3, 1
    dev->irq_hdl = irqhdl;
18005f18:	b024      	st.w      	r1, (r0, 0x10)
    if (irq_flag & I2C_IRQ_FLAG_TX_DONE) {
18005f1a:	e9020008 	bez      	r2, 0x18005f2a	// 18005f2a <hgi2c_v1_request_irq+0x2a>
        dev->irq_tx_done_en = 1;
18005f1e:	6cb7      	mov      	r2, r13
18005f20:	3101      	movi      	r1, 1
18005f22:	c4415c00 	ins      	r2, r1, 0, 0
18005f26:	dc40002c 	st.b      	r2, (r0, 0x2c)
    }

    if (irq_flag & I2C_IRQ_FLAG_RX_DONE) {
18005f2a:	e4432002 	andi      	r2, r3, 2
18005f2e:	e9020009 	bez      	r2, 0x18005f40	// 18005f40 <hgi2c_v1_request_irq+0x40>
        dev->irq_rx_done_en = 1;
18005f32:	d840002c 	ld.b      	r2, (r0, 0x2c)
18005f36:	3101      	movi      	r1, 1
18005f38:	c4415c01 	ins      	r2, r1, 1, 1
18005f3c:	dc40002c 	st.b      	r2, (r0, 0x2c)
    }

    if (irq_flag & I2C_IRQ_FLAG_DETECT_STOP) {
18005f40:	e4432010 	andi      	r2, r3, 16
18005f44:	e9020007 	bez      	r2, 0x18005f52	// 18005f52 <hgi2c_v1_request_irq+0x52>
        hw->CON0 |= BIT(20);
18005f48:	d84c2000 	ld.w      	r2, (r12, 0x0)
18005f4c:	3ab4      	bseti      	r2, 20
18005f4e:	dc4c2000 	st.w      	r2, (r12, 0x0)
    }

    if (irq_flag & I2C_IRQ_FLAG_RX_NACK) {
18005f52:	e4432004 	andi      	r2, r3, 4
18005f56:	e9020007 	bez      	r2, 0x18005f64	// 18005f64 <hgi2c_v1_request_irq+0x64>
        hw->CON0 |= BIT(22);
18005f5a:	d84c2000 	ld.w      	r2, (r12, 0x0)
18005f5e:	3ab6      	bseti      	r2, 22
18005f60:	dc4c2000 	st.w      	r2, (r12, 0x0)
    }

    if (irq_flag & I2C_IRQ_FLAG_RX_ERROR) {
18005f64:	e4032008 	andi      	r0, r3, 8
18005f68:	e9000009 	bez      	r0, 0x18005f7a	// 18005f7a <hgi2c_v1_request_irq+0x7a>
        hw->CON1 |= BIT(8);
18005f6c:	d86c2001 	ld.w      	r3, (r12, 0x4)
18005f70:	ec630100 	ori      	r3, r3, 256
18005f74:	dc6c2001 	st.w      	r3, (r12, 0x4)
    }
    
    return RET_OK;
18005f78:	3000      	movi      	r0, 0
}
18005f7a:	1481      	pop      	r4
        return RET_ERR;
18005f7c:	3000      	movi      	r0, 0
18005f7e:	2800      	subi      	r0, 1
18005f80:	07fd      	br      	0x18005f7a	// 18005f7a <hgi2c_v1_request_irq+0x7a>
	...

18005f84 <hgi2c_v1_release_irq>:
static int32 hgi2c_v1_release_irq(struct i2c_device *i2c, uint32 irq_flag) {

    struct hgi2c_v1       *dev = (struct hgi2c_v1 *)i2c;
    struct hgi2c_v1_hw *hw  = (struct hgi2c_v1_hw *)dev->hw;
    
    if ((!dev->opened) || (dev->dsleep)) {
18005f84:	d840002c 	ld.b      	r2, (r0, 0x2c)
18005f88:	e5822030 	andi      	r12, r2, 48
18005f8c:	eb4c0010 	cmpnei      	r12, 16
    struct hgi2c_v1_hw *hw  = (struct hgi2c_v1_hw *)dev->hw;
18005f90:	9063      	ld.w      	r3, (r0, 0xc)
    if ((!dev->opened) || (dev->dsleep)) {
18005f92:	082e      	bt      	0x18005fee	// 18005fee <hgi2c_v1_release_irq+0x6a>
        return RET_ERR;
    }

    if (irq_flag & I2C_IRQ_FLAG_TX_DONE) {
18005f94:	e5812001 	andi      	r12, r1, 1
18005f98:	e90c0008 	bez      	r12, 0x18005fa8	// 18005fa8 <hgi2c_v1_release_irq+0x24>
        dev->irq_tx_done_en = 0;
18005f9c:	ea0c0000 	movi      	r12, 0
18005fa0:	c44c5c00 	ins      	r2, r12, 0, 0
18005fa4:	dc40002c 	st.b      	r2, (r0, 0x2c)
    }

    if (irq_flag & I2C_IRQ_FLAG_RX_DONE) {
18005fa8:	e4412002 	andi      	r2, r1, 2
18005fac:	e902000a 	bez      	r2, 0x18005fc0	// 18005fc0 <hgi2c_v1_release_irq+0x3c>
        dev->irq_rx_done_en = 0;
18005fb0:	d840002c 	ld.b      	r2, (r0, 0x2c)
18005fb4:	ea0c0000 	movi      	r12, 0
18005fb8:	c44c5c01 	ins      	r2, r12, 1, 1
18005fbc:	dc40002c 	st.b      	r2, (r0, 0x2c)
    }

    if (irq_flag & I2C_IRQ_FLAG_DETECT_STOP) {
18005fc0:	e4412010 	andi      	r2, r1, 16
18005fc4:	e9020005 	bez      	r2, 0x18005fce	// 18005fce <hgi2c_v1_release_irq+0x4a>
        hw->CON0 &= ~ BIT(20);
18005fc8:	9340      	ld.w      	r2, (r3, 0x0)
18005fca:	3a94      	bclri      	r2, 20
18005fcc:	b340      	st.w      	r2, (r3, 0x0)
    }

    if (irq_flag & I2C_IRQ_FLAG_RX_NACK) {
18005fce:	e4412004 	andi      	r2, r1, 4
18005fd2:	e9020005 	bez      	r2, 0x18005fdc	// 18005fdc <hgi2c_v1_release_irq+0x58>
        hw->CON0 &= ~ BIT(22);
18005fd6:	9340      	ld.w      	r2, (r3, 0x0)
18005fd8:	3a96      	bclri      	r2, 22
18005fda:	b340      	st.w      	r2, (r3, 0x0)
    }

    if (irq_flag & I2C_IRQ_FLAG_RX_ERROR) {
18005fdc:	e4012008 	andi      	r0, r1, 8
18005fe0:	e9000006 	bez      	r0, 0x18005fec	// 18005fec <hgi2c_v1_release_irq+0x68>
        hw->CON1 &= ~ BIT(8);
18005fe4:	9341      	ld.w      	r2, (r3, 0x4)
18005fe6:	3a88      	bclri      	r2, 8
18005fe8:	b341      	st.w      	r2, (r3, 0x4)
    }

    return RET_OK;
18005fea:	3000      	movi      	r0, 0
}
18005fec:	783c      	jmp      	r15
        return RET_ERR;
18005fee:	3000      	movi      	r0, 0
18005ff0:	2800      	subi      	r0, 1
18005ff2:	07fd      	br      	0x18005fec	// 18005fec <hgi2c_v1_release_irq+0x68>

18005ff4 <hgi2c_v1_irq_handler>:
{
18005ff4:	14d2      	push      	r4-r5, r15
     struct hgi2c_v1_hw *hw = (struct hgi2c_v1_hw *)dev->hw;
18005ff6:	9083      	ld.w      	r4, (r0, 0xc)
{
18005ff8:	6d43      	mov      	r5, r0
    if ((hw->CON1 & LL_IIC_CON1_DMA_IE_EN) && (hw->STA1 & LL_IIC_STA1_DMA_PENDING)) {
18005ffa:	9461      	ld.w      	r3, (r4, 0x4)
18005ffc:	e4632200 	andi      	r3, r3, 512
18006000:	e903000c 	bez      	r3, 0x18006018	// 18006018 <hgi2c_v1_irq_handler+0x24>
18006004:	946a      	ld.w      	r3, (r4, 0x28)
18006006:	e4632010 	andi      	r3, r3, 16
1800600a:	e9030007 	bez      	r3, 0x18006018	// 18006018 <hgi2c_v1_irq_handler+0x24>
        hw->STA1 = LL_IIC_STA1_DMA_PENDING;
1800600e:	3310      	movi      	r3, 16
18006010:	b46a      	st.w      	r3, (r4, 0x28)
        os_sema_up(&dev->i2c_done);
18006012:	2023      	addi      	r0, 36
18006014:	e000728e 	bsr      	0x18014530	// 18014530 <os_sema_up>
    if ((hw->CON0 & LL_IIC_CON0_RX_NACK_IE_EN) && (hw->STA2 & LL_IIC_STA2_RX_NACK(1))) {
18006018:	3280      	movi      	r2, 128
1800601a:	9460      	ld.w      	r3, (r4, 0x0)
1800601c:	424f      	lsli      	r2, r2, 15
1800601e:	68c8      	and      	r3, r2
18006020:	e9030011 	bez      	r3, 0x18006042	// 18006042 <hgi2c_v1_irq_handler+0x4e>
18006024:	946b      	ld.w      	r3, (r4, 0x2c)
18006026:	e4632100 	andi      	r3, r3, 256
1800602a:	e903000c 	bez      	r3, 0x18006042	// 18006042 <hgi2c_v1_irq_handler+0x4e>
        hw->STA2 = LL_IIC_STA2_RX_NACK(1);
1800602e:	3380      	movi      	r3, 128
18006030:	4361      	lsli      	r3, r3, 1
18006032:	b46b      	st.w      	r3, (r4, 0x2c)
        if (dev->irq_hdl) {
18006034:	9564      	ld.w      	r3, (r5, 0x10)
18006036:	e9030006 	bez      	r3, 0x18006042	// 18006042 <hgi2c_v1_irq_handler+0x4e>
            dev->irq_hdl(I2C_IRQ_FLAG_RX_NACK, dev->irq_data, 0);
1800603a:	3200      	movi      	r2, 0
1800603c:	9525      	ld.w      	r1, (r5, 0x14)
1800603e:	3004      	movi      	r0, 4
18006040:	7bcd      	jsr      	r3
    if ((hw->CON1 & LL_IIC_CON1_BUF_OV_IE_EN) && (hw->STA1 & LL_IIC_STA1_BUF_OV_PENDING)) {
18006042:	9461      	ld.w      	r3, (r4, 0x4)
18006044:	e4632100 	andi      	r3, r3, 256
18006048:	e903000f 	bez      	r3, 0x18006066	// 18006066 <hgi2c_v1_irq_handler+0x72>
1800604c:	946a      	ld.w      	r3, (r4, 0x28)
1800604e:	e4632008 	andi      	r3, r3, 8
18006052:	e903000a 	bez      	r3, 0x18006066	// 18006066 <hgi2c_v1_irq_handler+0x72>
        if (dev->irq_hdl) {
18006056:	9564      	ld.w      	r3, (r5, 0x10)
        hw->STA1 = LL_IIC_STA1_BUF_OV_PENDING;
18006058:	3008      	movi      	r0, 8
1800605a:	b40a      	st.w      	r0, (r4, 0x28)
        if (dev->irq_hdl) {
1800605c:	e9030005 	bez      	r3, 0x18006066	// 18006066 <hgi2c_v1_irq_handler+0x72>
            dev->irq_hdl(I2C_IRQ_FLAG_RX_ERROR, dev->irq_data, 0);
18006060:	3200      	movi      	r2, 0
18006062:	9525      	ld.w      	r1, (r5, 0x14)
18006064:	7bcd      	jsr      	r3
    if ((hw->CON0 & LL_IIC_CON0_STOP_IE_EN) && (hw->STA2 & LL_IIC_STA2_STOP_PEND(1))) {
18006066:	3280      	movi      	r2, 128
18006068:	9460      	ld.w      	r3, (r4, 0x0)
1800606a:	424d      	lsli      	r2, r2, 13
1800606c:	68c8      	and      	r3, r2
1800606e:	e9030010 	bez      	r3, 0x1800608e	// 1800608e <hgi2c_v1_irq_handler+0x9a>
18006072:	946b      	ld.w      	r3, (r4, 0x2c)
18006074:	e4632080 	andi      	r3, r3, 128
18006078:	e903000b 	bez      	r3, 0x1800608e	// 1800608e <hgi2c_v1_irq_handler+0x9a>
        hw->STA2 = LL_IIC_STA2_STOP_PEND(1);
1800607c:	3380      	movi      	r3, 128
1800607e:	b46b      	st.w      	r3, (r4, 0x2c)
        if (dev->irq_hdl) {
18006080:	9564      	ld.w      	r3, (r5, 0x10)
18006082:	e9030006 	bez      	r3, 0x1800608e	// 1800608e <hgi2c_v1_irq_handler+0x9a>
            dev->irq_hdl(I2C_IRQ_FLAG_DETECT_STOP, dev->irq_data, 0);
18006086:	3200      	movi      	r2, 0
18006088:	9525      	ld.w      	r1, (r5, 0x14)
1800608a:	3010      	movi      	r0, 16
1800608c:	7bcd      	jsr      	r3
}
1800608e:	1492      	pop      	r4-r5, r15

18006090 <hgi2c_v1_write>:
static int32 hgi2c_v1_write(struct i2c_device *i2c, int8 *addr_buf, uint32 addr_len, int8 *buf, uint32 len) {
18006090:	14d8      	push      	r4-r11, r15
18006092:	6e4f      	mov      	r9, r3
    if ((!dev->opened) || (dev->dsleep)) {
18006094:	d860002c 	ld.b      	r3, (r0, 0x2c)
static int32 hgi2c_v1_write(struct i2c_device *i2c, int8 *addr_buf, uint32 addr_len, int8 *buf, uint32 len) {
18006098:	6d8b      	mov      	r6, r2
    if ((!dev->opened) || (dev->dsleep)) {
1800609a:	e4432030 	andi      	r2, r3, 48
1800609e:	3a50      	cmpnei      	r2, 16
static int32 hgi2c_v1_write(struct i2c_device *i2c, int8 *addr_buf, uint32 addr_len, int8 *buf, uint32 len) {
180060a0:	6d43      	mov      	r5, r0
180060a2:	6e07      	mov      	r8, r1
180060a4:	98e9      	ld.w      	r7, (r14, 0x24)
    struct hgi2c_v1_hw *hw = (struct hgi2c_v1_hw *)dev->hw;
180060a6:	9083      	ld.w      	r4, (r0, 0xc)
    if ((!dev->opened) || (dev->dsleep)) {
180060a8:	08c1      	bt      	0x1800622a	// 1800622a <hgi2c_v1_write+0x19a>
    if (!dev->flag_rx_done) {
180060aa:	e4632008 	andi      	r3, r3, 8
180060ae:	e90300be 	bez      	r3, 0x1800622a	// 1800622a <hgi2c_v1_write+0x19a>
    if ((NULL == addr_buf) && (NULL == buf)) {
180060b2:	e9210004 	bnez      	r1, 0x180060ba	// 180060ba <hgi2c_v1_write+0x2a>
180060b6:	e90900ba 	bez      	r9, 0x1800622a	// 1800622a <hgi2c_v1_write+0x19a>
    if ((0 == addr_len) && (0 == len)) {
180060ba:	e9260004 	bnez      	r6, 0x180060c2	// 180060c2 <hgi2c_v1_write+0x32>
180060be:	e90700b6 	bez      	r7, 0x1800622a	// 1800622a <hgi2c_v1_write+0x19a>
    os_mutex_lock(&dev->i2c_lock, osWaitForever);
180060c2:	e545001b 	addi      	r10, r5, 28
180060c6:	3100      	movi      	r1, 0
180060c8:	2900      	subi      	r1, 1
180060ca:	6c2b      	mov      	r0, r10
180060cc:	e00071a0 	bsr      	0x1801440c	// 1801440c <os_mutex_lock>
    dev->flag_tx_done = 0;
180060d0:	d865002c 	ld.b      	r3, (r5, 0x2c)
180060d4:	3200      	movi      	r2, 0
180060d6:	c4625c02 	ins      	r3, r2, 2, 2
180060da:	dc65002c 	st.b      	r3, (r5, 0x2c)
    p_i2c->CON1 |= LL_IIC_CON1_TX_EN;
180060de:	9461      	ld.w      	r3, (r4, 0x4)
180060e0:	ec630008 	ori      	r3, r3, 8
180060e4:	b461      	st.w      	r3, (r4, 0x4)
    return ((p_i2c->CON1 >> 2) & BIT(0));
180060e6:	9461      	ld.w      	r3, (r4, 0x4)
180060e8:	c4435443 	zext      	r3, r3, 2, 2
    if (!hgi2c_v1_is_slave_mode(hw)) {
180060ec:	e9030020 	bez      	r3, 0x1800612c	// 1800612c <hgi2c_v1_write+0x9c>
    if (len_temp >= 4095) {
180060f0:	eb070ffe 	cmphsi      	r7, 4095
180060f4:	3600      	movi      	r6, 0
180060f6:	0836      	bt      	0x18006162	// 18006162 <hgi2c_v1_write+0xd2>
    return ((p_i2c->CON1 >> 2) & BIT(0));
180060f8:	9461      	ld.w      	r3, (r4, 0x4)
180060fa:	c4435443 	zext      	r3, r3, 2, 2
    if (!hgi2c_v1_is_slave_mode(hw)) {
180060fe:	e9230086 	bnez      	r3, 0x1800620a	// 1800620a <hgi2c_v1_write+0x17a>
        if (len_temp - 1) {
18006102:	3f41      	cmpnei      	r7, 1
18006104:	0c66      	bf      	0x180061d0	// 180061d0 <hgi2c_v1_write+0x140>
            hw->TSTADR = (uint32)(buf + len_offset);
18006106:	c4c90023 	addu      	r3, r9, r6
1800610a:	b468      	st.w      	r3, (r4, 0x20)
            hw->TDMALEN = len_temp - 1;
1800610c:	5f63      	subi      	r3, r7, 1
1800610e:	b464      	st.w      	r3, (r4, 0x10)
            hw->CON1 |= LL_IIC_CON1_DMA_EN; /* kick DMA */
18006110:	9461      	ld.w      	r3, (r4, 0x4)
18006112:	ec630010 	ori      	r3, r3, 16
18006116:	b461      	st.w      	r3, (r4, 0x4)
            ret_sema = os_sema_down(&dev->i2c_done, 6*1000);
18006118:	ea011770 	movi      	r1, 6000
1800611c:	e4050023 	addi      	r0, r5, 36
18006120:	e00071ec 	bsr      	0x180144f8	// 180144f8 <os_sema_down>
            if (!ret_sema) {
18006124:	e9200054 	bnez      	r0, 0x180061cc	// 180061cc <hgi2c_v1_write+0x13c>
                _os_printf("***IIC modoule info: M send err, 2 phase timeout!\r\n");
18006128:	1202      	lrw      	r0, 0x18016846	// 18006230 <hgi2c_v1_write+0x1a0>
1800612a:	0436      	br      	0x18006196	// 18006196 <hgi2c_v1_write+0x106>
    return ((p_i2c->OWNADRCON) & 0x3FF);
1800612c:	946d      	ld.w      	r3, (r4, 0x34)
            hw->CMD_DATA = LL_IIC_CMD_DATA_START_BIT_EN | LL_IIC_CMD_DATA_WRITE(slave_addr << 1);
1800612e:	60cc      	addu      	r3, r3
18006130:	e46320ff 	andi      	r3, r3, 255
18006134:	ec630100 	ori      	r3, r3, 256
    return p_i2c->OWNADRCON & LL_IIC_OWNADRCON_OWN_ADR1_S(0x1);
18006138:	944d      	ld.w      	r2, (r4, 0x34)
            hw->CMD_DATA = LL_IIC_CMD_DATA_START_BIT_EN | LL_IIC_CMD_DATA_WRITE(slave_addr << 1);
1800613a:	b462      	st.w      	r3, (r4, 0x8)
        while (hgi2c_v1_get_busy(hw));
1800613c:	6c13      	mov      	r0, r4
1800613e:	e3fffe9f 	bsr      	0x18005e7c	// 18005e7c <hgi2c_v1_get_busy>
18006142:	e920fffd 	bnez      	r0, 0x1800613c	// 1800613c <hgi2c_v1_write+0xac>
18006146:	61a0      	addu      	r6, r8
        while(addr_len_temp > 0) {
18006148:	65a2      	cmpne      	r8, r6
1800614a:	0fd3      	bf      	0x180060f0	// 180060f0 <hgi2c_v1_write+0x60>
            hw->CMD_DATA = LL_IIC_CMD_DATA_WRITE(*addr_buf++);
1800614c:	d8680000 	ld.b      	r3, (r8, 0x0)
18006150:	b462      	st.w      	r3, (r4, 0x8)
            while (hgi2c_v1_get_busy(hw));
18006152:	6c13      	mov      	r0, r4
18006154:	e3fffe94 	bsr      	0x18005e7c	// 18005e7c <hgi2c_v1_get_busy>
18006158:	e920fffd 	bnez      	r0, 0x18006152	// 18006152 <hgi2c_v1_write+0xc2>
1800615c:	e5080000 	addi      	r8, r8, 1
18006160:	07f4      	br      	0x18006148	// 18006148 <hgi2c_v1_write+0xb8>
            hw->TDMALEN = 4095;
18006162:	ea0b0fff 	movi      	r11, 4095
18006166:	e5050023 	addi      	r8, r5, 36
1800616a:	c4c90023 	addu      	r3, r9, r6
            hw->TSTADR = (uint32)(buf + len_offset);
1800616e:	b468      	st.w      	r3, (r4, 0x20)
            hw->TDMALEN = 4095;
18006170:	dd642004 	st.w      	r11, (r4, 0x10)
            hw->CON1 |= LL_IIC_CON1_DMA_EN; /* kick DMA */
18006174:	9461      	ld.w      	r3, (r4, 0x4)
18006176:	ec630010 	ori      	r3, r3, 16
1800617a:	b461      	st.w      	r3, (r4, 0x4)
    return ((p_i2c->CON1 >> 2) & BIT(0));
1800617c:	9461      	ld.w      	r3, (r4, 0x4)
            if (!hgi2c_v1_is_slave_mode(hw)) {
1800617e:	e4632004 	andi      	r3, r3, 4
18006182:	e9230018 	bnez      	r3, 0x180061b2	// 180061b2 <hgi2c_v1_write+0x122>
                ret_sema = os_sema_down(&dev->i2c_done, 6*1000);
18006186:	ea011770 	movi      	r1, 6000
1800618a:	6c23      	mov      	r0, r8
1800618c:	e00071b6 	bsr      	0x180144f8	// 180144f8 <os_sema_down>
                if (!ret_sema) {
18006190:	e9200016 	bnez      	r0, 0x180061bc	// 180061bc <hgi2c_v1_write+0x12c>
                    _os_printf("***IIC modoule info: M send err, 1 phase timeout!\r\n");
18006194:	1108      	lrw      	r0, 0x18016812	// 18006234 <hgi2c_v1_write+0x1a4>
                _os_printf("***IIC modoule info: M send err, 2 phase timeout!\r\n");
18006196:	e0003497 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    os_mutex_unlock(&dev->i2c_lock);
1800619a:	6c2b      	mov      	r0, r10
1800619c:	e0007152 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
    dev->flag_tx_done = 1;
180061a0:	d865002c 	ld.b      	r3, (r5, 0x2c)
180061a4:	3201      	movi      	r2, 1
180061a6:	c4625c02 	ins      	r3, r2, 2, 2
180061aa:	dc65002c 	st.b      	r3, (r5, 0x2c)
    return RET_OK;
180061ae:	3000      	movi      	r0, 0
}
180061b0:	1498      	pop      	r4-r11, r15
                os_sema_down(&dev->i2c_done, osWaitForever);
180061b2:	3100      	movi      	r1, 0
180061b4:	2900      	subi      	r1, 1
180061b6:	6c23      	mov      	r0, r8
180061b8:	e00071a0 	bsr      	0x180144f8	// 180144f8 <os_sema_down>
            len_offset += 4095;
180061bc:	e4c60ffe 	addi      	r6, r6, 4095
        }while ((len_temp -= 4095) >= 4095);
180061c0:	5f79      	subu      	r3, r7, r6
180061c2:	eb030ffe 	cmphsi      	r3, 4095
180061c6:	0bd2      	bt      	0x1800616a	// 1800616a <hgi2c_v1_write+0xda>
180061c8:	6dcf      	mov      	r7, r3
180061ca:	0797      	br      	0x180060f8	// 180060f8 <hgi2c_v1_write+0x68>
            len_offset += (len_temp - 1);
180061cc:	619c      	addu      	r6, r7
180061ce:	2e00      	subi      	r6, 1
        while (hgi2c_v1_get_busy(hw));
180061d0:	6c13      	mov      	r0, r4
180061d2:	e3fffe55 	bsr      	0x18005e7c	// 18005e7c <hgi2c_v1_get_busy>
180061d6:	e920fffd 	bnez      	r0, 0x180061d0	// 180061d0 <hgi2c_v1_write+0x140>
        hw->CMD_DATA = LL_IIC_CMD_DATA_STOP_BIT_EN | LL_IIC_CMD_DATA_WRITE(*(buf+len_offset));
180061da:	d0c90023 	ldr.b      	r3, (r9, r6 << 0)
180061de:	ec630200 	ori      	r3, r3, 512
180061e2:	b462      	st.w      	r3, (r4, 0x8)
        while (hgi2c_v1_get_busy(hw));
180061e4:	6c13      	mov      	r0, r4
180061e6:	e3fffe4b 	bsr      	0x18005e7c	// 18005e7c <hgi2c_v1_get_busy>
180061ea:	e920fffd 	bnez      	r0, 0x180061e4	// 180061e4 <hgi2c_v1_write+0x154>
    if (dev->irq_tx_done_en) {
180061ee:	d865002c 	ld.b      	r3, (r5, 0x2c)
180061f2:	e4632001 	andi      	r3, r3, 1
180061f6:	e903ffd2 	bez      	r3, 0x1800619a	// 1800619a <hgi2c_v1_write+0x10a>
        if (dev->irq_hdl) {
180061fa:	9564      	ld.w      	r3, (r5, 0x10)
180061fc:	e903ffcf 	bez      	r3, 0x1800619a	// 1800619a <hgi2c_v1_write+0x10a>
            dev->irq_hdl(I2C_IRQ_FLAG_TX_DONE, dev->irq_data, 0);
18006200:	3200      	movi      	r2, 0
18006202:	9525      	ld.w      	r1, (r5, 0x14)
18006204:	3001      	movi      	r0, 1
18006206:	7bcd      	jsr      	r3
18006208:	07c9      	br      	0x1800619a	// 1800619a <hgi2c_v1_write+0x10a>
        if (len_temp) {
1800620a:	e907fff2 	bez      	r7, 0x180061ee	// 180061ee <hgi2c_v1_write+0x15e>
            hw->TSTADR = (uint32)(buf + len_offset);
1800620e:	61a4      	addu      	r6, r9
18006210:	b4c8      	st.w      	r6, (r4, 0x20)
            hw->TDMALEN = len_temp;
18006212:	b4e4      	st.w      	r7, (r4, 0x10)
            hw->CON1 |= LL_IIC_CON1_DMA_EN; /* kick DMA */
18006214:	9461      	ld.w      	r3, (r4, 0x4)
18006216:	ec630010 	ori      	r3, r3, 16
            os_sema_down(&dev->i2c_done, osWaitForever);
1800621a:	3100      	movi      	r1, 0
            hw->CON1 |= LL_IIC_CON1_DMA_EN; /* kick DMA */
1800621c:	b461      	st.w      	r3, (r4, 0x4)
            os_sema_down(&dev->i2c_done, osWaitForever);
1800621e:	2900      	subi      	r1, 1
18006220:	e4050023 	addi      	r0, r5, 36
18006224:	e000716a 	bsr      	0x180144f8	// 180144f8 <os_sema_down>
18006228:	07e3      	br      	0x180061ee	// 180061ee <hgi2c_v1_write+0x15e>
        return RET_ERR;
1800622a:	3000      	movi      	r0, 0
1800622c:	2800      	subi      	r0, 1
1800622e:	07c1      	br      	0x180061b0	// 180061b0 <hgi2c_v1_write+0x120>
18006230:	18016846 	.long	0x18016846
18006234:	18016812 	.long	0x18016812

18006238 <hgi2c_v1_read>:
static int32 hgi2c_v1_read(struct i2c_device *i2c, int8 *addr_buf, uint32 addr_len, int8 *buf, uint32 len) {
18006238:	14d8      	push      	r4-r11, r15
1800623a:	6e4f      	mov      	r9, r3
    if ((!dev->opened) || (dev->dsleep)) {
1800623c:	d860002c 	ld.b      	r3, (r0, 0x2c)
static int32 hgi2c_v1_read(struct i2c_device *i2c, int8 *addr_buf, uint32 addr_len, int8 *buf, uint32 len) {
18006240:	6ecb      	mov      	r11, r2
    if ((!dev->opened) || (dev->dsleep)) {
18006242:	e4432030 	andi      	r2, r3, 48
18006246:	3a50      	cmpnei      	r2, 16
static int32 hgi2c_v1_read(struct i2c_device *i2c, int8 *addr_buf, uint32 addr_len, int8 *buf, uint32 len) {
18006248:	6d83      	mov      	r6, r0
1800624a:	6d47      	mov      	r5, r1
1800624c:	98e9      	ld.w      	r7, (r14, 0x24)
    struct hgi2c_v1_hw *hw = (struct hgi2c_v1_hw *)dev->hw;
1800624e:	9083      	ld.w      	r4, (r0, 0xc)
    if ((!dev->opened) || (dev->dsleep)) {
18006250:	08f3      	bt      	0x18006436	// 18006436 <hgi2c_v1_read+0x1fe>
    if (!dev->flag_tx_done) {
18006252:	e4632004 	andi      	r3, r3, 4
18006256:	e90300f0 	bez      	r3, 0x18006436	// 18006436 <hgi2c_v1_read+0x1fe>
    if ((NULL == addr_buf) && (NULL == buf)) {
1800625a:	e9210004 	bnez      	r1, 0x18006262	// 18006262 <hgi2c_v1_read+0x2a>
1800625e:	e90900ec 	bez      	r9, 0x18006436	// 18006436 <hgi2c_v1_read+0x1fe>
    if ((0 == addr_len) && (0 == len)) {
18006262:	e92b0004 	bnez      	r11, 0x1800626a	// 1800626a <hgi2c_v1_read+0x32>
18006266:	e90700e8 	bez      	r7, 0x18006436	// 18006436 <hgi2c_v1_read+0x1fe>
    os_mutex_lock(&dev->i2c_lock, osWaitForever);
1800626a:	e546001b 	addi      	r10, r6, 28
1800626e:	3100      	movi      	r1, 0
18006270:	2900      	subi      	r1, 1
18006272:	6c2b      	mov      	r0, r10
18006274:	e00070cc 	bsr      	0x1801440c	// 1801440c <os_mutex_lock>
    dev->flag_rx_done = 0;
18006278:	d866002c 	ld.b      	r3, (r6, 0x2c)
1800627c:	3200      	movi      	r2, 0
1800627e:	c4625c03 	ins      	r3, r2, 3, 3
18006282:	dc66002c 	st.b      	r3, (r6, 0x2c)
    return ((p_i2c->CON1 >> 2) & BIT(0));
18006286:	9461      	ld.w      	r3, (r4, 0x4)
18006288:	c4435443 	zext      	r3, r3, 2, 2
    if (!hgi2c_v1_is_slave_mode(hw)) {
1800628c:	e9030026 	bez      	r3, 0x180062d8	// 180062d8 <hgi2c_v1_read+0xa0>
    p_i2c->CON1 &= ~LL_IIC_CON1_TX_EN;
18006290:	9461      	ld.w      	r3, (r4, 0x4)
    if (len_temp >= 4095) {
18006292:	eb070ffe 	cmphsi      	r7, 4095
    p_i2c->CON1 &= ~LL_IIC_CON1_TX_EN;
18006296:	3b83      	bclri      	r3, 3
18006298:	b461      	st.w      	r3, (r4, 0x4)
1800629a:	3500      	movi      	r5, 0
    if (len_temp >= 4095) {
1800629c:	0847      	bt      	0x1800632a	// 1800632a <hgi2c_v1_read+0xf2>
    return ((p_i2c->CON1 >> 2) & BIT(0));
1800629e:	9461      	ld.w      	r3, (r4, 0x4)
180062a0:	c4435443 	zext      	r3, r3, 2, 2
        if (len_temp - 1) {
180062a4:	3f41      	cmpnei      	r7, 1
    if (!hgi2c_v1_is_slave_mode(hw)) {
180062a6:	e92300a0 	bnez      	r3, 0x180063e6	// 180063e6 <hgi2c_v1_read+0x1ae>
        if (len_temp - 1) {
180062aa:	0c7a      	bf      	0x1800639e	// 1800639e <hgi2c_v1_read+0x166>
    p_i2c->CON0 &= ~LL_IIC_CON0_TX_NACK;
180062ac:	9460      	ld.w      	r3, (r4, 0x0)
180062ae:	3b81      	bclri      	r3, 1
180062b0:	b460      	st.w      	r3, (r4, 0x0)
            hw->RSTADR = (uint32)(buf + len_offset);
180062b2:	c4a90023 	addu      	r3, r9, r5
180062b6:	b469      	st.w      	r3, (r4, 0x24)
            hw->RDMALEN = len_temp - 1;
180062b8:	5f63      	subi      	r3, r7, 1
180062ba:	b465      	st.w      	r3, (r4, 0x14)
            hw->CON1 |= LL_IIC_CON1_DMA_EN; /* kick DMA */
180062bc:	9461      	ld.w      	r3, (r4, 0x4)
180062be:	ec630010 	ori      	r3, r3, 16
180062c2:	b461      	st.w      	r3, (r4, 0x4)
            ret_sema = os_sema_down(&dev->i2c_done, 6*1000);
180062c4:	ea011770 	movi      	r1, 6000
180062c8:	e4060023 	addi      	r0, r6, 36
180062cc:	e0007116 	bsr      	0x180144f8	// 180144f8 <os_sema_down>
            if (!ret_sema) {
180062d0:	e9200065 	bnez      	r0, 0x1800639a	// 1800639a <hgi2c_v1_read+0x162>
                _os_printf("***IIC modoule info: M read err, 2 phase timeout!\r\n");
180062d4:	121a      	lrw      	r0, 0x180167b8	// 1800643c <hgi2c_v1_read+0x204>
180062d6:	0447      	br      	0x18006364	// 18006364 <hgi2c_v1_read+0x12c>
    p_i2c->CON1 |= LL_IIC_CON1_TX_EN;
180062d8:	9461      	ld.w      	r3, (r4, 0x4)
180062da:	ec630008 	ori      	r3, r3, 8
180062de:	b461      	st.w      	r3, (r4, 0x4)
    return ((p_i2c->OWNADRCON) & 0x3FF);
180062e0:	d904200d 	ld.w      	r8, (r4, 0x34)
            hw->CMD_DATA = LL_IIC_CMD_DATA_START_BIT_EN | LL_IIC_CMD_DATA_WRITE(slave_addr << 1);
180062e4:	6220      	addu      	r8, r8
180062e6:	e50820ff 	andi      	r8, r8, 255
    return p_i2c->OWNADRCON & LL_IIC_OWNADRCON_OWN_ADR1_S(0x1);
180062ea:	946d      	ld.w      	r3, (r4, 0x34)
            hw->CMD_DATA = LL_IIC_CMD_DATA_START_BIT_EN | LL_IIC_CMD_DATA_WRITE(slave_addr << 1);
180062ec:	ec680100 	ori      	r3, r8, 256
180062f0:	b462      	st.w      	r3, (r4, 0x8)
        while (hgi2c_v1_get_busy(hw));
180062f2:	6c13      	mov      	r0, r4
180062f4:	e3fffdc4 	bsr      	0x18005e7c	// 18005e7c <hgi2c_v1_get_busy>
180062f8:	e920fffd 	bnez      	r0, 0x180062f2	// 180062f2 <hgi2c_v1_read+0xba>
180062fc:	62d4      	addu      	r11, r5
        while(addr_len_temp > 0) {
180062fe:	66d6      	cmpne      	r5, r11
18006300:	080c      	bt      	0x18006318	// 18006318 <hgi2c_v1_read+0xe0>
            hw->CMD_DATA = LL_IIC_CMD_DATA_START_BIT_EN | LL_IIC_CMD_DATA_WRITE(slave_addr << 1) | 0x1;
18006302:	ed080101 	ori      	r8, r8, 257
    return p_i2c->OWNADRCON & LL_IIC_OWNADRCON_OWN_ADR1_S(0x1);
18006306:	946d      	ld.w      	r3, (r4, 0x34)
            hw->CMD_DATA = LL_IIC_CMD_DATA_START_BIT_EN | LL_IIC_CMD_DATA_WRITE(slave_addr << 1) | 0x1;
18006308:	dd042002 	st.w      	r8, (r4, 0x8)
        while (hgi2c_v1_get_busy(hw));
1800630c:	6c13      	mov      	r0, r4
1800630e:	e3fffdb7 	bsr      	0x18005e7c	// 18005e7c <hgi2c_v1_get_busy>
18006312:	e920fffd 	bnez      	r0, 0x1800630c	// 1800630c <hgi2c_v1_read+0xd4>
18006316:	07bd      	br      	0x18006290	// 18006290 <hgi2c_v1_read+0x58>
            hw->CMD_DATA = LL_IIC_CMD_DATA_WRITE(*addr_buf++);
18006318:	8560      	ld.b      	r3, (r5, 0x0)
1800631a:	b462      	st.w      	r3, (r4, 0x8)
            while (hgi2c_v1_get_busy(hw));
1800631c:	6c13      	mov      	r0, r4
1800631e:	e3fffdaf 	bsr      	0x18005e7c	// 18005e7c <hgi2c_v1_get_busy>
18006322:	e920fffd 	bnez      	r0, 0x1800631c	// 1800631c <hgi2c_v1_read+0xe4>
18006326:	2500      	addi      	r5, 1
18006328:	07eb      	br      	0x180062fe	// 180062fe <hgi2c_v1_read+0xc6>
            hw->RDMALEN = 4095;
1800632a:	ea0b0fff 	movi      	r11, 4095
1800632e:	e5060023 	addi      	r8, r6, 36
    p_i2c->CON0 &= ~LL_IIC_CON0_TX_NACK;
18006332:	9460      	ld.w      	r3, (r4, 0x0)
18006334:	3b81      	bclri      	r3, 1
18006336:	b460      	st.w      	r3, (r4, 0x0)
18006338:	c4a90023 	addu      	r3, r9, r5
            hw->RSTADR = (uint32)(buf + len_offset);
1800633c:	b469      	st.w      	r3, (r4, 0x24)
            hw->RDMALEN = 4095;
1800633e:	dd642005 	st.w      	r11, (r4, 0x14)
            hw->CON1 |= LL_IIC_CON1_DMA_EN; /* kick DMA */
18006342:	9461      	ld.w      	r3, (r4, 0x4)
18006344:	ec630010 	ori      	r3, r3, 16
18006348:	b461      	st.w      	r3, (r4, 0x4)
    return ((p_i2c->CON1 >> 2) & BIT(0));
1800634a:	9461      	ld.w      	r3, (r4, 0x4)
            if (!hgi2c_v1_is_slave_mode(hw)) {
1800634c:	e4632004 	andi      	r3, r3, 4
18006350:	e9230018 	bnez      	r3, 0x18006380	// 18006380 <hgi2c_v1_read+0x148>
                ret_sema = os_sema_down(&dev->i2c_done, 6*1000);
18006354:	ea011770 	movi      	r1, 6000
18006358:	6c23      	mov      	r0, r8
1800635a:	e00070cf 	bsr      	0x180144f8	// 180144f8 <os_sema_down>
                if (!ret_sema) {
1800635e:	e9200016 	bnez      	r0, 0x1800638a	// 1800638a <hgi2c_v1_read+0x152>
                    _os_printf("***IIC modoule info: M read err, 1 phase timeout!\r\n");
18006362:	1118      	lrw      	r0, 0x18016784	// 18006440 <hgi2c_v1_read+0x208>
                _os_printf("***IIC modoule info: M read err, 2 phase timeout!\r\n");
18006364:	e00033b0 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    os_mutex_unlock(&dev->i2c_lock);
18006368:	6c2b      	mov      	r0, r10
1800636a:	e000706b 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
    dev->flag_rx_done = 1;
1800636e:	d866002c 	ld.b      	r3, (r6, 0x2c)
18006372:	3201      	movi      	r2, 1
18006374:	c4625c03 	ins      	r3, r2, 3, 3
18006378:	dc66002c 	st.b      	r3, (r6, 0x2c)
    return RET_OK;
1800637c:	3000      	movi      	r0, 0
}
1800637e:	1498      	pop      	r4-r11, r15
                os_sema_down(&dev->i2c_done, osWaitForever);
18006380:	3100      	movi      	r1, 0
18006382:	2900      	subi      	r1, 1
18006384:	6c23      	mov      	r0, r8
18006386:	e00070b9 	bsr      	0x180144f8	// 180144f8 <os_sema_down>
            len_offset += 4095;
1800638a:	e4a50ffe 	addi      	r5, r5, 4095
        }while ((len_temp -= 4095) >= 4095);
1800638e:	5f75      	subu      	r3, r7, r5
18006390:	eb030ffe 	cmphsi      	r3, 4095
18006394:	0bcf      	bt      	0x18006332	// 18006332 <hgi2c_v1_read+0xfa>
18006396:	6dcf      	mov      	r7, r3
18006398:	0783      	br      	0x1800629e	// 1800629e <hgi2c_v1_read+0x66>
            len_offset += (len_temp - 1);
1800639a:	615c      	addu      	r5, r7
1800639c:	2d00      	subi      	r5, 1
    p_i2c->CON0 |= LL_IIC_CON0_TX_NACK;
1800639e:	9460      	ld.w      	r3, (r4, 0x0)
180063a0:	ec630002 	ori      	r3, r3, 2
180063a4:	b460      	st.w      	r3, (r4, 0x0)
        while (hgi2c_v1_get_busy(hw));
180063a6:	6c13      	mov      	r0, r4
180063a8:	e3fffd6a 	bsr      	0x18005e7c	// 18005e7c <hgi2c_v1_get_busy>
180063ac:	e920fffd 	bnez      	r0, 0x180063a6	// 180063a6 <hgi2c_v1_read+0x16e>
        hw->RDMALEN  = 1;
180063b0:	3301      	movi      	r3, 1
180063b2:	b465      	st.w      	r3, (r4, 0x14)
        hw->CMD_DATA = LL_IIC_CMD_DATA_STOP_BIT_EN | LL_IIC_CMD_DATA_WRITE(0x00);
180063b4:	3380      	movi      	r3, 128
180063b6:	4362      	lsli      	r3, r3, 2
180063b8:	b462      	st.w      	r3, (r4, 0x8)
        while (hgi2c_v1_get_busy(hw));
180063ba:	6c13      	mov      	r0, r4
180063bc:	e3fffd60 	bsr      	0x18005e7c	// 18005e7c <hgi2c_v1_get_busy>
180063c0:	e920fffd 	bnez      	r0, 0x180063ba	// 180063ba <hgi2c_v1_read+0x182>
        *(buf+len_offset) = hw->CMD_DATA;
180063c4:	9462      	ld.w      	r3, (r4, 0x8)
180063c6:	d4a90023 	str.b      	r3, (r9, r5 << 0)
    if (dev->irq_rx_done_en) {
180063ca:	d866002c 	ld.b      	r3, (r6, 0x2c)
180063ce:	e4632002 	andi      	r3, r3, 2
180063d2:	e903ffcb 	bez      	r3, 0x18006368	// 18006368 <hgi2c_v1_read+0x130>
        if (dev->irq_hdl) {
180063d6:	9664      	ld.w      	r3, (r6, 0x10)
180063d8:	e903ffc8 	bez      	r3, 0x18006368	// 18006368 <hgi2c_v1_read+0x130>
            dev->irq_hdl(I2C_IRQ_FLAG_RX_DONE, dev->irq_data, 0);
180063dc:	3200      	movi      	r2, 0
180063de:	9625      	ld.w      	r1, (r6, 0x14)
180063e0:	3002      	movi      	r0, 2
180063e2:	7bcd      	jsr      	r3
180063e4:	07c2      	br      	0x18006368	// 18006368 <hgi2c_v1_read+0x130>
180063e6:	e5060023 	addi      	r8, r6, 36
        if (len_temp - 1) {
180063ea:	0c14      	bf      	0x18006412	// 18006412 <hgi2c_v1_read+0x1da>
    p_i2c->CON0 &= ~LL_IIC_CON0_TX_NACK;
180063ec:	9460      	ld.w      	r3, (r4, 0x0)
180063ee:	3b81      	bclri      	r3, 1
180063f0:	b460      	st.w      	r3, (r4, 0x0)
            hw->RSTADR = (uint32)(buf + len_offset);
180063f2:	c4a90023 	addu      	r3, r9, r5
180063f6:	b469      	st.w      	r3, (r4, 0x24)
            hw->RDMALEN = len_temp - 1;
180063f8:	5f63      	subi      	r3, r7, 1
180063fa:	b465      	st.w      	r3, (r4, 0x14)
            hw->CON1 |= LL_IIC_CON1_DMA_EN; /* kick DMA */
180063fc:	9461      	ld.w      	r3, (r4, 0x4)
180063fe:	ec630010 	ori      	r3, r3, 16
            os_sema_down(&dev->i2c_done, osWaitForever);
18006402:	3100      	movi      	r1, 0
            hw->CON1 |= LL_IIC_CON1_DMA_EN; /* kick DMA */
18006404:	b461      	st.w      	r3, (r4, 0x4)
            os_sema_down(&dev->i2c_done, osWaitForever);
18006406:	2900      	subi      	r1, 1
18006408:	6c23      	mov      	r0, r8
            len_offset += (len_temp - 1);
1800640a:	615c      	addu      	r5, r7
            os_sema_down(&dev->i2c_done, osWaitForever);
1800640c:	e0007076 	bsr      	0x180144f8	// 180144f8 <os_sema_down>
            len_offset += (len_temp - 1);
18006410:	2d00      	subi      	r5, 1
    p_i2c->CON0 |= LL_IIC_CON0_TX_NACK;
18006412:	9460      	ld.w      	r3, (r4, 0x0)
18006414:	ec630002 	ori      	r3, r3, 2
18006418:	b460      	st.w      	r3, (r4, 0x0)
        hw->RSTADR = (uint32)(buf + len_offset);
1800641a:	6164      	addu      	r5, r9
        hw->RDMALEN = 1;
1800641c:	3301      	movi      	r3, 1
        hw->RSTADR = (uint32)(buf + len_offset);
1800641e:	b4a9      	st.w      	r5, (r4, 0x24)
        hw->RDMALEN = 1;
18006420:	b465      	st.w      	r3, (r4, 0x14)
        hw->CON1 |= LL_IIC_CON1_DMA_EN; /* kick DMA */
18006422:	9461      	ld.w      	r3, (r4, 0x4)
18006424:	ec630010 	ori      	r3, r3, 16
        os_sema_down(&dev->i2c_done, osWaitForever);
18006428:	3100      	movi      	r1, 0
        hw->CON1 |= LL_IIC_CON1_DMA_EN; /* kick DMA */
1800642a:	b461      	st.w      	r3, (r4, 0x4)
        os_sema_down(&dev->i2c_done, osWaitForever);
1800642c:	2900      	subi      	r1, 1
1800642e:	6c23      	mov      	r0, r8
18006430:	e0007064 	bsr      	0x180144f8	// 180144f8 <os_sema_down>
18006434:	07cb      	br      	0x180063ca	// 180063ca <hgi2c_v1_read+0x192>
        return RET_ERR;
18006436:	3000      	movi      	r0, 0
18006438:	2800      	subi      	r0, 1
1800643a:	07a2      	br      	0x1800637e	// 1800637e <hgi2c_v1_read+0x146>
1800643c:	180167b8 	.long	0x180167b8
18006440:	18016784 	.long	0x18016784

18006444 <hgi2c_v1_set_baudrate>:
{
18006444:	14d2      	push      	r4-r5, r15
18006446:	6d07      	mov      	r4, r1
    struct hgi2c_v1_hw *hw = (struct hgi2c_v1_hw *)dev->hw;
18006448:	90a3      	ld.w      	r5, (r0, 0xc)
    sclh_cnt = peripheral_clock_get(HG_APB0_PT_IIC0)/(16*2*baudrate);
1800644a:	301a      	movi      	r0, 26
1800644c:	e00056b0 	bsr      	0x180111ac	// 180111ac <peripheral_clock_get>
18006450:	4485      	lsli      	r4, r4, 5
18006452:	c4808024 	divu      	r4, r0, r4
    ASSERT((sclh_cnt >= 0) && (sclh_cnt <= 2048));
18006456:	eb040800 	cmphsi      	r4, 2049
1800645a:	0c06      	bf      	0x18006466	// 18006466 <hgi2c_v1_set_baudrate+0x22>
1800645c:	1051      	lrw      	r2, 0x180167ec	// 180064a0 <hgi2c_v1_set_baudrate+0x5c>
1800645e:	31b3      	movi      	r1, 179
18006460:	1011      	lrw      	r0, 0x1801676e	// 180064a4 <hgi2c_v1_set_baudrate+0x60>
18006462:	e3ffe5d9 	bsr      	0x18003014	// 18003014 <assert_internal>
                  LL_IIC_TIMECON_SCLH(sclh_cnt-1)           |\
18006466:	5c43      	subi      	r2, r4, 1
18006468:	426a      	lsli      	r3, r2, 10
1800646a:	ea210010 	movih      	r1, 16
1800646e:	e42113ff 	subi      	r1, r1, 1024
18006472:	68c4      	and      	r3, r1
                  LL_IIC_TIMECON_SDADEL((sclh_cnt/2)-1)     |\
18006474:	31f0      	movi      	r1, 240
18006476:	4138      	lsli      	r1, r1, 24
18006478:	4c81      	lsri      	r4, r4, 1
                  LL_IIC_TIMECON_SCLL(sclh_cnt-1)           |\
1800647a:	e44223ff 	andi      	r2, r2, 1023
                  LL_IIC_TIMECON_SDADEL((sclh_cnt/2)-1)     |\
1800647e:	6c84      	or      	r2, r1
18006480:	2c00      	subi      	r4, 1
18006482:	31f0      	movi      	r1, 240
18006484:	6cc8      	or      	r3, r2
18006486:	4130      	lsli      	r1, r1, 16
18006488:	4454      	lsli      	r2, r4, 20
1800648a:	6884      	and      	r2, r1
1800648c:	6cc8      	or      	r3, r2
                  LL_IIC_TIMECON_SCLDEL((sclh_cnt/2)-1)     ;
1800648e:	32f0      	movi      	r2, 240
18006490:	4254      	lsli      	r2, r2, 20
18006492:	4498      	lsli      	r4, r4, 24
18006494:	6908      	and      	r4, r2
                  LL_IIC_TIMECON_SDADEL((sclh_cnt/2)-1)     |\
18006496:	6d0c      	or      	r4, r3
}
18006498:	3000      	movi      	r0, 0
    hw->TIMECON = LL_IIC_TIMECON_PRESC(16-1)                |\
1800649a:	b583      	st.w      	r4, (r5, 0xc)
}
1800649c:	1492      	pop      	r4-r5, r15
1800649e:	0000      	.short	0x0000
180064a0:	180167ec 	.long	0x180167ec
180064a4:	1801676e 	.long	0x1801676e

180064a8 <hgi2c_v1_close>:
{
180064a8:	14d3      	push      	r4-r6, r15
    if (!dev->opened) {
180064aa:	d860002c 	ld.b      	r3, (r0, 0x2c)
180064ae:	e4632010 	andi      	r3, r3, 16
{
180064b2:	6d03      	mov      	r4, r0
    if (!dev->opened) {
180064b4:	e9030031 	bez      	r3, 0x18006516	// 18006516 <hgi2c_v1_close+0x6e>
    struct hgi2c_v1_hw *hw = (struct hgi2c_v1_hw *)dev->hw;
180064b8:	9043      	ld.w      	r2, (r0, 0xc)
    if (SPI0_BASE == (uint32)hw) {
180064ba:	ea034400 	movi      	r3, 17408
180064be:	3bbe      	bseti      	r3, 30
180064c0:	64ca      	cmpne      	r2, r3
180064c2:	082c      	bt      	0x1800651a	// 1800651a <hgi2c_v1_close+0x72>
        sysctrl_spi0_clk_close();
180064c4:	ea214002 	movih      	r1, 16386
180064c8:	9173      	ld.w      	r3, (r1, 0x4c)
180064ca:	3b85      	bclri      	r3, 5
        sysctrl_spi2_clk_close();
180064cc:	b173      	st.w      	r3, (r1, 0x4c)
    IRQn &= 0x7FUL;
180064ce:	9466      	ld.w      	r3, (r4, 0x18)
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
180064d0:	3601      	movi      	r6, 1
180064d2:	c4a354c1 	zext      	r1, r3, 6, 5
180064d6:	e463201f 	andi      	r3, r3, 31
180064da:	c4664023 	lsl      	r3, r6, r3
180064de:	211f      	addi      	r1, 32
180064e0:	1019      	lrw      	r0, 0xe000e100	// 18006544 <hgi2c_v1_close+0x9c>
180064e2:	d4200883 	str.w      	r3, (r0, r1 << 2)
    hw->CON1 &= ~LL_IIC_CON1_SSP_EN;
180064e6:	9261      	ld.w      	r3, (r2, 0x4)
180064e8:	3500      	movi      	r5, 0
180064ea:	3b80      	bclri      	r3, 0
180064ec:	b261      	st.w      	r3, (r2, 0x4)
    pin_func(i2c->dev.dev_id, 0);
180064ee:	6c57      	mov      	r1, r5
180064f0:	9400      	ld.w      	r0, (r4, 0x0)
180064f2:	e3ffee1b 	bsr      	0x18004128	// 18004128 <pin_func>
    dev->opened          = 0;
180064f6:	d864002c 	ld.b      	r3, (r4, 0x2c)
    dev->flag_rx_done    = 1;
180064fa:	e46320cf 	andi      	r3, r3, 207
180064fe:	c4665c03 	ins      	r3, r6, 3, 3
    dev->flag_tx_done    = 1;
18006502:	c4665c02 	ins      	r3, r6, 2, 2
    dev->irq_tx_done_en  = 0;
18006506:	e46320fd 	andi      	r3, r3, 253
1800650a:	c4655c00 	ins      	r3, r5, 0, 0
    dev->irq_hdl         = NULL;
1800650e:	b4a4      	st.w      	r5, (r4, 0x10)
    dev->irq_data        = 0;
18006510:	b4a5      	st.w      	r5, (r4, 0x14)
    dev->irq_tx_done_en  = 0;
18006512:	dc64002c 	st.b      	r3, (r4, 0x2c)
}
18006516:	3000      	movi      	r0, 0
18006518:	1493      	pop      	r4-r6, r15
    } else if (SPI1_BASE == (uint32)hw) {
1800651a:	ea034500 	movi      	r3, 17664
1800651e:	3bbe      	bseti      	r3, 30
18006520:	64ca      	cmpne      	r2, r3
18006522:	0806      	bt      	0x1800652e	// 1800652e <hgi2c_v1_close+0x86>
        sysctrl_spi1_clk_close();
18006524:	ea214002 	movih      	r1, 16386
18006528:	9173      	ld.w      	r3, (r1, 0x4c)
1800652a:	3b86      	bclri      	r3, 6
1800652c:	07d0      	br      	0x180064cc	// 180064cc <hgi2c_v1_close+0x24>
    } else if (SPI2_BASE == (uint32)hw) {
1800652e:	ea034600 	movi      	r3, 17920
18006532:	3bbe      	bseti      	r3, 30
18006534:	64ca      	cmpne      	r2, r3
18006536:	0bcc      	bt      	0x180064ce	// 180064ce <hgi2c_v1_close+0x26>
        sysctrl_spi2_clk_close();
18006538:	ea214002 	movih      	r1, 16386
1800653c:	9173      	ld.w      	r3, (r1, 0x4c)
1800653e:	3b87      	bclri      	r3, 7
18006540:	07c6      	br      	0x180064cc	// 180064cc <hgi2c_v1_close+0x24>
18006542:	0000      	.short	0x0000
18006544:	e000e100 	.long	0xe000e100

18006548 <hgi2c_v1_open>:
static int32 hgi2c_v1_open(struct i2c_device *i2c, enum i2c_mode mode_sel, enum i2c_addr_mode addr_bit_sel, uint32 addr) {
18006548:	14d5      	push      	r4-r8, r15
1800654a:	6e07      	mov      	r8, r1
    if (dev->opened) {
1800654c:	d820002c 	ld.b      	r1, (r0, 0x2c)
static int32 hgi2c_v1_open(struct i2c_device *i2c, enum i2c_mode mode_sel, enum i2c_addr_mode addr_bit_sel, uint32 addr) {
18006550:	6d8f      	mov      	r6, r3
    if (dev->opened) {
18006552:	e4612010 	andi      	r3, r1, 16
static int32 hgi2c_v1_open(struct i2c_device *i2c, enum i2c_mode mode_sel, enum i2c_addr_mode addr_bit_sel, uint32 addr) {
18006556:	6d43      	mov      	r5, r0
18006558:	6dcb      	mov      	r7, r2
    struct hgi2c_v1_hw *hw = (struct hgi2c_v1_hw *)dev->hw;
1800655a:	9083      	ld.w      	r4, (r0, 0xc)
    if (dev->opened) {
1800655c:	e9030006 	bez      	r3, 0x18006568	// 18006568 <hgi2c_v1_open+0x20>
        if (!dev->dsleep) {
18006560:	e4212020 	andi      	r1, r1, 32
18006564:	e9010077 	bez      	r1, 0x18006652	// 18006652 <hgi2c_v1_open+0x10a>
    if (pin_func(i2c->dev.dev_id, 1) != RET_OK) {
18006568:	3101      	movi      	r1, 1
1800656a:	9500      	ld.w      	r0, (r5, 0x0)
1800656c:	e3ffedde 	bsr      	0x18004128	// 18004128 <pin_func>
18006570:	e9200074 	bnez      	r0, 0x18006658	// 18006658 <hgi2c_v1_open+0x110>
    if (SPI0_BASE == (uint32)hw) {
18006574:	ea034400 	movi      	r3, 17408
18006578:	3bbe      	bseti      	r3, 30
1800657a:	64d2      	cmpne      	r4, r3
1800657c:	084a      	bt      	0x18006610	// 18006610 <hgi2c_v1_open+0xc8>
        sysctrl_spi0_clk_open();
1800657e:	ea224002 	movih      	r2, 16386
18006582:	9273      	ld.w      	r3, (r2, 0x4c)
18006584:	ec630020 	ori      	r3, r3, 32
        sysctrl_spi2_clk_open();
18006588:	b273      	st.w      	r3, (r2, 0x4c)
     hw->CON0         = 0;
1800658a:	3100      	movi      	r1, 0
     hw->STA1         = 0xFFFFFFFF;
1800658c:	e5811000 	subi      	r12, r1, 1
    hw->CON1 = LL_IIC_CON1_IIC_SEL;
18006590:	3302      	movi      	r3, 2
     hw->CON0         = 0;
18006592:	b420      	st.w      	r1, (r4, 0x0)
     hw->CON1         = 0;
18006594:	b421      	st.w      	r1, (r4, 0x4)
     hw->TIMECON      = 0;
18006596:	b423      	st.w      	r1, (r4, 0xc)
     hw->TDMALEN      = 0;
18006598:	b424      	st.w      	r1, (r4, 0x10)
     hw->RDMALEN      = 0;
1800659a:	b425      	st.w      	r1, (r4, 0x14)
     hw->TSTADR       = 0;
1800659c:	b428      	st.w      	r1, (r4, 0x20)
     hw->RSTADR       = 0;
1800659e:	b429      	st.w      	r1, (r4, 0x24)
     hw->OWNADRCON    = 0;
180065a0:	b42d      	st.w      	r1, (r4, 0x34)
     hw->RXTIMEOUTCON = 0;
180065a2:	b430      	st.w      	r1, (r4, 0x40)
     hw->STA1         = 0xFFFFFFFF;
180065a4:	dd84200a 	st.w      	r12, (r4, 0x28)
     hw->STA2         = 0xFFFFFFFF;
180065a8:	dd84200b 	st.w      	r12, (r4, 0x2c)
    hw->CON1 = LL_IIC_CON1_IIC_SEL;
180065ac:	b461      	st.w      	r3, (r4, 0x4)
        hw->CON1 |= LL_IIC_CON1_MODE(0x0);
180065ae:	9461      	ld.w      	r3, (r4, 0x4)
    if(mode_sel == IIC_MODE_MASTER) {
180065b0:	e9280046 	bnez      	r8, 0x1800663c	// 1800663c <hgi2c_v1_open+0xf4>
        hw->CON1 |= LL_IIC_CON1_MODE(0x0);
180065b4:	b461      	st.w      	r3, (r4, 0x4)
    hw->CON1 |= LL_IIC_CON1_DMA_IE_EN;
180065b6:	9461      	ld.w      	r3, (r4, 0x4)
180065b8:	ec630200 	ori      	r3, r3, 512
180065bc:	b461      	st.w      	r3, (r4, 0x4)
    hw->OWNADRCON = (hw->OWNADRCON &~ LL_IIC_OWNADRCON_OWN_ADR1(0x3FF)) | LL_IIC_OWNADRCON_OWN_ADR1(addr);
180065be:	944d      	ld.w      	r2, (r4, 0x34)
180065c0:	ea0303ff 	movi      	r3, 1023
180065c4:	6cce      	nor      	r3, r3
180065c6:	688c      	and      	r2, r3
180065c8:	e46623ff 	andi      	r3, r6, 1023
180065cc:	6cc8      	or      	r3, r2
180065ce:	b46d      	st.w      	r3, (r4, 0x34)
    hw->CON1 |= LL_IIC_CON1_SSP_EN;
180065d0:	9461      	ld.w      	r3, (r4, 0x4)
180065d2:	ec630001 	ori      	r3, r3, 1
180065d6:	b461      	st.w      	r3, (r4, 0x4)
    dev->opened          = 1;
180065d8:	3201      	movi      	r2, 1
180065da:	d865002c 	ld.b      	r3, (r5, 0x2c)
180065de:	c4625c04 	ins      	r3, r2, 4, 4
    dev->flag_rx_done    = 1;
180065e2:	e46320df 	andi      	r3, r3, 223
180065e6:	c4625c03 	ins      	r3, r2, 3, 3
    dev->flag_tx_done    = 1;
180065ea:	c4625c02 	ins      	r3, r2, 2, 2
    dev->irq_tx_done_en  = 0;
180065ee:	3100      	movi      	r1, 0
180065f0:	e46320fd 	andi      	r3, r3, 253
180065f4:	c4615c00 	ins      	r3, r1, 0, 0
180065f8:	dc65002c 	st.b      	r3, (r5, 0x2c)
    IRQn &= 0x7FUL;
180065fc:	9566      	ld.w      	r3, (r5, 0x18)
    VIC->ISER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
180065fe:	c4a354c1 	zext      	r1, r3, 6, 5
18006602:	e463201f 	andi      	r3, r3, 31
18006606:	708c      	lsl      	r2, r3
18006608:	1076      	lrw      	r3, 0xe000e100	// 18006660 <hgi2c_v1_open+0x118>
1800660a:	d4230882 	str.w      	r2, (r3, r1 << 2)
}
1800660e:	1495      	pop      	r4-r8, r15
    } else if (SPI1_BASE == (uint32)hw) {
18006610:	ea034500 	movi      	r3, 17664
18006614:	3bbe      	bseti      	r3, 30
18006616:	64d2      	cmpne      	r4, r3
18006618:	0807      	bt      	0x18006626	// 18006626 <hgi2c_v1_open+0xde>
        sysctrl_spi1_clk_open();
1800661a:	ea224002 	movih      	r2, 16386
1800661e:	9273      	ld.w      	r3, (r2, 0x4c)
18006620:	ec630040 	ori      	r3, r3, 64
18006624:	07b2      	br      	0x18006588	// 18006588 <hgi2c_v1_open+0x40>
    } else if (SPI2_BASE == (uint32)hw) {
18006626:	ea034600 	movi      	r3, 17920
1800662a:	3bbe      	bseti      	r3, 30
1800662c:	64d2      	cmpne      	r4, r3
1800662e:	0bae      	bt      	0x1800658a	// 1800658a <hgi2c_v1_open+0x42>
        sysctrl_spi2_clk_open();
18006630:	ea224002 	movih      	r2, 16386
18006634:	9273      	ld.w      	r3, (r2, 0x4c)
18006636:	ec630080 	ori      	r3, r3, 128
1800663a:	07a7      	br      	0x18006588	// 18006588 <hgi2c_v1_open+0x40>
        if(addr_bit_sel == IIC_ADDR_10BIT) {
1800663c:	3f41      	cmpnei      	r7, 1
        hw->CON1 |= LL_IIC_CON1_MODE(0x1);
1800663e:	ec630004 	ori      	r3, r3, 4
18006642:	b461      	st.w      	r3, (r4, 0x4)
        if(addr_bit_sel == IIC_ADDR_10BIT) {
18006644:	0805      	bt      	0x1800664e	// 1800664e <hgi2c_v1_open+0x106>
            hw->OWNADRCON = LL_IIC_OWNADRCON_OWN_ADR1_S(0x1);
18006646:	3380      	movi      	r3, 128
18006648:	4364      	lsli      	r3, r3, 4
1800664a:	b46d      	st.w      	r3, (r4, 0x34)
1800664c:	07b5      	br      	0x180065b6	// 180065b6 <hgi2c_v1_open+0x6e>
            hw->OWNADRCON = LL_IIC_OWNADRCON_OWN_ADR1_S(0x0);
1800664e:	b42d      	st.w      	r1, (r4, 0x34)
18006650:	07b3      	br      	0x180065b6	// 180065b6 <hgi2c_v1_open+0x6e>
            return -EBUSY;
18006652:	3000      	movi      	r0, 0
18006654:	280f      	subi      	r0, 16
18006656:	07dc      	br      	0x1800660e	// 1800660e <hgi2c_v1_open+0xc6>
        return RET_ERR;
18006658:	3000      	movi      	r0, 0
1800665a:	2800      	subi      	r0, 1
1800665c:	07d9      	br      	0x1800660e	// 1800660e <hgi2c_v1_open+0xc6>
1800665e:	0000      	.short	0x0000
18006660:	e000e100 	.long	0xe000e100

18006664 <hgi2c_v1_attach>:
    .ops.resume     = hgi2c_v1_resume,
#endif
};

int32 hgi2c_v1_attach(uint32 dev_id, struct hgi2c_v1 *i2c)
{
18006664:	14d3      	push      	r4-r6, r15

    struct hgi2c_v1 *dev = (struct hgi2c_v1 *)i2c;

    i2c->dev.dev.ops        = (const struct devobj_ops *)&i2c_ops;
18006666:	1076      	lrw      	r3, 0x1801687c	// 180066bc <hgi2c_v1_attach+0x58>
    i2c->irq_hdl            = NULL;
    i2c->irq_data           = 0;
    i2c->opened             = 0;
    i2c->dsleep             = 0;
    i2c->flag_rx_done       = 1;
18006668:	3201      	movi      	r2, 1
    i2c->dev.dev.ops        = (const struct devobj_ops *)&i2c_ops;
1800666a:	b162      	st.w      	r3, (r1, 0x8)
    i2c->opened             = 0;
1800666c:	d861002c 	ld.b      	r3, (r1, 0x2c)
    i2c->flag_rx_done       = 1;
18006670:	e46320cf 	andi      	r3, r3, 207
18006674:	c4625c03 	ins      	r3, r2, 3, 3
    i2c->flag_tx_done       = 1;
18006678:	c4625c02 	ins      	r3, r2, 2, 2
    i2c->irq_hdl            = NULL;
1800667c:	3500      	movi      	r5, 0
    i2c->irq_rx_done_en     = 0;
    i2c->irq_tx_done_en     = 0;
1800667e:	e46320fd 	andi      	r3, r3, 253
18006682:	c4655c00 	ins      	r3, r5, 0, 0
{
18006686:	6d07      	mov      	r4, r1
    i2c->irq_tx_done_en     = 0;
18006688:	dc61002c 	st.b      	r3, (r1, 0x2c)
{
1800668c:	6d83      	mov      	r6, r0
    i2c->irq_hdl            = NULL;
1800668e:	b1a4      	st.w      	r5, (r1, 0x10)
    i2c->irq_data           = 0;
18006690:	b1a5      	st.w      	r5, (r1, 0x14)
#ifdef CONFIG_SUSPEND
    os_mutex_init(&i2c->bp_suspend_lock);
    os_mutex_init(&i2c->bp_resume_lock);
#endif

    os_mutex_init(&i2c->i2c_lock);
18006692:	e401001b 	addi      	r0, r1, 28
18006696:	e0006e99 	bsr      	0x180143c8	// 180143c8 <os_mutex_init>
    os_sema_init(&i2c->i2c_done, 0);
1800669a:	6c57      	mov      	r1, r5
1800669c:	e4040023 	addi      	r0, r4, 36
180066a0:	e0006efc 	bsr      	0x18014498	// 18014498 <os_sema_init>

    request_irq(dev->irq_num, hgi2c_v1_irq_handler, dev);
180066a4:	6c93      	mov      	r2, r4
180066a6:	1027      	lrw      	r1, 0x18005ff4	// 180066c0 <hgi2c_v1_attach+0x5c>
180066a8:	9406      	ld.w      	r0, (r4, 0x18)
180066aa:	e3ffe819 	bsr      	0x180036dc	// 180036dc <request_irq>

    dev_register(dev_id, (struct dev_obj *)i2c);
180066ae:	6c53      	mov      	r1, r4
180066b0:	6c1b      	mov      	r0, r6
180066b2:	e3ffe4f9 	bsr      	0x180030a4	// 180030a4 <dev_register>
    return RET_OK;
}
180066b6:	6c17      	mov      	r0, r5
180066b8:	1493      	pop      	r4-r6, r15
180066ba:	0000      	.short	0x0000
180066bc:	1801687c 	.long	0x1801687c
180066c0:	18005ff4 	.long	0x18005ff4

180066c4 <hgi2s_v0_write>:
}

int32 hgi2s_v0_write(struct i2s_device *i2s, const void* buf, uint32 len) {

    struct hgi2s_v0 *dev   = (struct hgi2s_v0*)i2s;
    struct hgi2s_v0_hw *hw = (struct hgi2s_v0_hw *)dev->hw;
180066c4:	9063      	ld.w      	r3, (r0, 0xc)
    uint32 len_to_reg      = 0;

    if ((!dev->opened) || (dev->dsleep)) {
180066c6:	801a      	ld.b      	r0, (r0, 0x1a)
180066c8:	e5802003 	andi      	r12, r0, 3
180066cc:	eb4c0001 	cmpnei      	r12, 1
180066d0:	0810      	bt      	0x180066f0	// 180066f0 <hgi2s_v0_write+0x2c>
        return RET_ERR;
    }

    len_to_reg = len;
    
    hw->DMA_STADR = (uint32)buf;
180066d2:	b325      	st.w      	r1, (r3, 0x14)
    hw->DMA_LEN   = len_to_reg;
180066d4:	b347      	st.w      	r2, (r3, 0x1c)
    p_i2s->CON |= LL_I2S_CON_WORKMODE(1);
180066d6:	9340      	ld.w      	r2, (r3, 0x0)

    hgi2s_v0_set_tx(hw);

    if (!dev->duplex_en) {
180066d8:	e4002004 	andi      	r0, r0, 4
    p_i2s->CON |= LL_I2S_CON_WORKMODE(1);
180066dc:	ec420100 	ori      	r2, r2, 256
180066e0:	b340      	st.w      	r2, (r3, 0x0)
    if (!dev->duplex_en) {
180066e2:	e920000a 	bnez      	r0, 0x180066f6	// 180066f6 <hgi2s_v0_write+0x32>
    p_i2s->CON |= LL_I2S_CON_ENABLE(1);
180066e6:	9340      	ld.w      	r2, (r3, 0x0)
180066e8:	ec420001 	ori      	r2, r2, 1
180066ec:	b340      	st.w      	r2, (r3, 0x0)
        hgi2s_v0_enable(hw);
    }

    return RET_OK;
}
180066ee:	783c      	jmp      	r15
        return RET_ERR;
180066f0:	3000      	movi      	r0, 0
180066f2:	2800      	subi      	r0, 1
180066f4:	07fd      	br      	0x180066ee	// 180066ee <hgi2s_v0_write+0x2a>
    return RET_OK;
180066f6:	3000      	movi      	r0, 0
180066f8:	07fb      	br      	0x180066ee	// 180066ee <hgi2s_v0_write+0x2a>
	...

180066fc <hgi2s_v0_read>:

int32 hgi2s_v0_read(struct i2s_device *i2s, void* buf, uint32 len) {

    struct hgi2s_v0 *dev   = (struct hgi2s_v0*)i2s;
    struct hgi2s_v0_hw *hw = (struct hgi2s_v0_hw *)dev->hw;
180066fc:	9063      	ld.w      	r3, (r0, 0xc)
    uint32 len_to_reg      = 0;

    if ((!dev->opened) || (dev->dsleep)) {
180066fe:	801a      	ld.b      	r0, (r0, 0x1a)
18006700:	e5802003 	andi      	r12, r0, 3
18006704:	eb4c0001 	cmpnei      	r12, 1
18006708:	080f      	bt      	0x18006726	// 18006726 <hgi2s_v0_read+0x2a>
        return RET_ERR;
    }

    len_to_reg = len;

    hw->DMA_STADR = (uint32)buf;
1800670a:	b325      	st.w      	r1, (r3, 0x14)
    hw->DMA_LEN   = len_to_reg;
1800670c:	b347      	st.w      	r2, (r3, 0x1c)
    p_i2s->CON &= ~ LL_I2S_CON_WORKMODE(1);
1800670e:	9340      	ld.w      	r2, (r3, 0x0)

    hgi2s_v0_set_rx(hw);
    
    if (!dev->duplex_en) {
18006710:	e4002004 	andi      	r0, r0, 4
    p_i2s->CON &= ~ LL_I2S_CON_WORKMODE(1);
18006714:	3a88      	bclri      	r2, 8
18006716:	b340      	st.w      	r2, (r3, 0x0)
    if (!dev->duplex_en) {
18006718:	e920000a 	bnez      	r0, 0x1800672c	// 1800672c <hgi2s_v0_read+0x30>
    p_i2s->CON |= LL_I2S_CON_ENABLE(1);
1800671c:	9340      	ld.w      	r2, (r3, 0x0)
1800671e:	ec420001 	ori      	r2, r2, 1
18006722:	b340      	st.w      	r2, (r3, 0x0)
        hgi2s_v0_enable(hw);
    }

    return RET_OK;
}
18006724:	783c      	jmp      	r15
        return RET_ERR;
18006726:	3000      	movi      	r0, 0
18006728:	2800      	subi      	r0, 1
1800672a:	07fd      	br      	0x18006724	// 18006724 <hgi2s_v0_read+0x28>
    return RET_OK;
1800672c:	3000      	movi      	r0, 0
1800672e:	07fb      	br      	0x18006724	// 18006724 <hgi2s_v0_read+0x28>

18006730 <hgi2s_v0_ioctl>:

    int32  ret_val         = RET_OK;
    struct hgi2s_v0 *dev   = (struct hgi2s_v0*)i2s;
    struct hgi2s_v0_hw *hw = (struct hgi2s_v0_hw *)dev->hw;

    if ((!dev->opened) || (dev->dsleep)) {
18006730:	d980001a 	ld.b      	r12, (r0, 0x1a)
18006734:	e58c2003 	andi      	r12, r12, 3
18006738:	eb4c0001 	cmpnei      	r12, 1
    struct hgi2s_v0_hw *hw = (struct hgi2s_v0_hw *)dev->hw;
1800673c:	9063      	ld.w      	r3, (r0, 0xc)
    if ((!dev->opened) || (dev->dsleep)) {
1800673e:	086c      	bt      	0x18006816	// 18006816 <hgi2s_v0_ioctl+0xe6>
        return RET_ERR;
    }

    switch(cmd) {
18006740:	3905      	cmphsi      	r1, 6
18006742:	0866      	bt      	0x1800680e	// 1800680e <hgi2s_v0_ioctl+0xde>
18006744:	ea8c0003 	lrw      	r12, 0x180168a0	// 18006750 <hgi2s_v0_ioctl+0x20>
18006748:	d02c0881 	ldr.w      	r1, (r12, r1 << 2)
1800674c:	7804      	jmp      	r1
1800674e:	0000      	.short	0x0000
18006750:	180168a0 	.long	0x180168a0
    p_i2s->CON &= ~ LL_I2S_CON_ENABLE(1);
18006754:	9320      	ld.w      	r1, (r3, 0x0)
18006756:	3980      	bclri      	r1, 0
18006758:	b320      	st.w      	r1, (r3, 0x0)
    if (value) {
1800675a:	e9020007 	bez      	r2, 0x18006768	// 18006768 <hgi2s_v0_ioctl+0x38>
        p_i2s->CON |=   LL_I2S_CON_WSPOL(1);
1800675e:	9340      	ld.w      	r2, (r3, 0x0)
18006760:	ec420010 	ori      	r2, r2, 16
    p_i2s->CON = (p_i2s->CON &~ LL_I2S_CON_MONO(0x3)) | LL_I2S_CON_MONO(i2s_channel_to_reg);
18006764:	b340      	st.w      	r2, (r3, 0x0)
18006766:	0418      	br      	0x18006796	// 18006796 <hgi2s_v0_ioctl+0x66>
        p_i2s->CON &= ~ LL_I2S_CON_WSPOL(1);
18006768:	9320      	ld.w      	r1, (r3, 0x0)
1800676a:	3984      	bclri      	r1, 4
        p_i2s->CON |=   LL_I2S_CON_BCLKDBSBPS(1) | LL_I2S_CON_RXDBSBPS(1) | LL_I2S_CON_WSCLKDBSBPS(1);
1800676c:	b320      	st.w      	r1, (r3, 0x0)
1800676e:	0414      	br      	0x18006796	// 18006796 <hgi2s_v0_ioctl+0x66>
18006770:	3a02      	cmphsi      	r2, 3
18006772:	3100      	movi      	r1, 0
18006774:	2900      	subi      	r1, 1
18006776:	0853      	bt      	0x1800681c	// 1800681c <hgi2s_v0_ioctl+0xec>
18006778:	110b      	lrw      	r0, 0x180168b8	// 18006824 <hgi2s_v0_ioctl+0xf4>
1800677a:	d0401020 	ldr.bs      	r0, (r0, r2 << 0)
    if ((-1) == i2s_sample_bits_to_reg) {
1800677e:	6442      	cmpne      	r0, r1
18006780:	0c4a      	bf      	0x18006814	// 18006814 <hgi2s_v0_ioctl+0xe4>
    p_i2s->CON &= ~ LL_I2S_CON_ENABLE(1);
18006782:	9340      	ld.w      	r2, (r3, 0x0)
18006784:	3a80      	bclri      	r2, 0
18006786:	b340      	st.w      	r2, (r3, 0x0)
    p_i2s->BAUD    = (64 / i2s_sample_bits_to_reg) - 1;
18006788:	3240      	movi      	r2, 64
    p_i2s->BIT_SET = i2s_sample_bits_to_reg;
1800678a:	b301      	st.w      	r0, (r3, 0x4)
    p_i2s->WS_CON  = i2s_sample_bits_to_reg;
1800678c:	b303      	st.w      	r0, (r3, 0xc)
    p_i2s->BAUD    = (64 / i2s_sample_bits_to_reg) - 1;
1800678e:	c4028040 	divs      	r0, r2, r0
18006792:	2800      	subi      	r0, 1
18006794:	b302      	st.w      	r0, (r3, 0x8)
    return RET_OK;
18006796:	3000      	movi      	r0, 0
18006798:	043e      	br      	0x18006814	// 18006814 <hgi2s_v0_ioctl+0xe4>
    switch (channel) {
1800679a:	e9020043 	bez      	r2, 0x18006820	// 18006820 <hgi2s_v0_ioctl+0xf0>
1800679e:	3a41      	cmpnei      	r2, 1
180067a0:	083b      	bt      	0x18006816	// 18006816 <hgi2s_v0_ioctl+0xe6>
            return 0;
180067a2:	3100      	movi      	r1, 0
    p_i2s->CON &= ~ LL_I2S_CON_ENABLE(1);
180067a4:	9340      	ld.w      	r2, (r3, 0x0)
180067a6:	3a80      	bclri      	r2, 0
180067a8:	b340      	st.w      	r2, (r3, 0x0)
    p_i2s->CON = (p_i2s->CON &~ LL_I2S_CON_MONO(0x3)) | LL_I2S_CON_MONO(i2s_channel_to_reg);
180067aa:	9340      	ld.w      	r2, (r3, 0x0)
180067ac:	3a86      	bclri      	r2, 6
180067ae:	3a87      	bclri      	r2, 7
180067b0:	4126      	lsli      	r1, r1, 6
180067b2:	6c84      	or      	r2, r1
180067b4:	07d8      	br      	0x18006764	// 18006764 <hgi2s_v0_ioctl+0x34>
180067b6:	3a03      	cmphsi      	r2, 4
180067b8:	3100      	movi      	r1, 0
180067ba:	2900      	subi      	r1, 1
180067bc:	0830      	bt      	0x1800681c	// 1800681c <hgi2s_v0_ioctl+0xec>
180067be:	101b      	lrw      	r0, 0x180168bb	// 18006828 <hgi2s_v0_ioctl+0xf8>
180067c0:	d0401020 	ldr.bs      	r0, (r0, r2 << 0)
    if ((-1) == i2s_data_fmt_to_reg) {
180067c4:	6442      	cmpne      	r0, r1
180067c6:	0c27      	bf      	0x18006814	// 18006814 <hgi2s_v0_ioctl+0xe4>
    p_i2s->CON &= ~ LL_I2S_CON_ENABLE(1);
180067c8:	9340      	ld.w      	r2, (r3, 0x0)
180067ca:	3a80      	bclri      	r2, 0
180067cc:	b340      	st.w      	r2, (r3, 0x0)
    p_i2s->CON = (p_i2s->CON &~ LL_I2S_CON_FRMT(0x3)) | LL_I2S_CON_FRMT(i2s_data_fmt_to_reg);
180067ce:	9340      	ld.w      	r2, (r3, 0x0)
180067d0:	6000      	addu      	r0, r0
180067d2:	e4002006 	andi      	r0, r0, 6
180067d6:	3a81      	bclri      	r2, 1
180067d8:	3a82      	bclri      	r2, 2
180067da:	6c08      	or      	r0, r2
180067dc:	b300      	st.w      	r0, (r3, 0x0)
180067de:	07dc      	br      	0x18006796	// 18006796 <hgi2s_v0_ioctl+0x66>
    p_i2s->CON &= ~ LL_I2S_CON_ENABLE(1);
180067e0:	9320      	ld.w      	r1, (r3, 0x0)
180067e2:	3980      	bclri      	r1, 0
180067e4:	b320      	st.w      	r1, (r3, 0x0)
    if (!enable) {
180067e6:	e9220006 	bnez      	r2, 0x180067f2	// 180067f2 <hgi2s_v0_ioctl+0xc2>
        p_i2s->CON |=   LL_I2S_CON_BCLKDBSBPS(1) | LL_I2S_CON_RXDBSBPS(1) | LL_I2S_CON_WSCLKDBSBPS(1);
180067ea:	9320      	ld.w      	r1, (r3, 0x0)
180067ec:	ec217000 	ori      	r1, r1, 28672
180067f0:	07be      	br      	0x1800676c	// 1800676c <hgi2s_v0_ioctl+0x3c>
        p_i2s->CON &= ~(LL_I2S_CON_BCLKDBSBPS(1) | LL_I2S_CON_RXDBSBPS(1) | LL_I2S_CON_WSCLKDBSBPS(1));
180067f2:	9340      	ld.w      	r2, (r3, 0x0)
180067f4:	ea017000 	movi      	r1, 28672
180067f8:	6c46      	nor      	r1, r1
180067fa:	6884      	and      	r2, r1
180067fc:	07b4      	br      	0x18006764	// 18006764 <hgi2s_v0_ioctl+0x34>
180067fe:	807a      	ld.b      	r3, (r0, 0x1a)
    if (enable) {
18006800:	e9020003 	bez      	r2, 0x18006806	// 18006806 <hgi2s_v0_ioctl+0xd6>
        dev->duplex_en = 1;
18006804:	3201      	movi      	r2, 1
        dev->duplex_en = 0;
18006806:	c4625c02 	ins      	r3, r2, 2, 2
1800680a:	a07a      	st.b      	r3, (r0, 0x1a)
1800680c:	07c5      	br      	0x18006796	// 18006796 <hgi2s_v0_ioctl+0x66>
            break;
        case (I2S_IOCTL_CMD_SET_DUPLEX):
            ret_val = hgi2s_v0_set_duplex(dev    , param);
            break;
        default:
            ret_val = -ENOTSUPP;
1800680e:	ea00020b 	movi      	r0, 523
18006812:	6c02      	nor      	r0, r0
            break;
    }

    return ret_val;
}
18006814:	783c      	jmp      	r15
        return RET_ERR;
18006816:	3000      	movi      	r0, 0
18006818:	2800      	subi      	r0, 1
1800681a:	07fd      	br      	0x18006814	// 18006814 <hgi2s_v0_ioctl+0xe4>
        return RET_ERR;
1800681c:	6c07      	mov      	r0, r1
1800681e:	07fb      	br      	0x18006814	// 18006814 <hgi2s_v0_ioctl+0xe4>
            return 1;
18006820:	3101      	movi      	r1, 1
18006822:	07c1      	br      	0x180067a4	// 180067a4 <hgi2s_v0_ioctl+0x74>
18006824:	180168b8 	.long	0x180168b8
18006828:	180168bb 	.long	0x180168bb

1800682c <hgi2s_v0_irq_handler>:
    return RET_OK;
}
#endif

/* interrupt handler */
static void hgi2s_v0_irq_handler(void *data) {
1800682c:	14d2      	push      	r4-r5, r15

    struct hgi2s_v0 *dev   = (struct hgi2s_v0 *)data;
    struct hgi2s_v0_hw *hw = (struct hgi2s_v0_hw *)dev->hw;
1800682e:	9083      	ld.w      	r4, (r0, 0xc)
static void hgi2s_v0_irq_handler(void *data) {
18006830:	6d43      	mov      	r5, r0

    if ((hw->CON & LL_I2S_CON_HF_PEND_IE(1)) && (hw->STA & LL_I2S_STA_DMA_HF_PENGING(1))) {
18006832:	9460      	ld.w      	r3, (r4, 0x0)
18006834:	e4632200 	andi      	r3, r3, 512
18006838:	e903000f 	bez      	r3, 0x18006856	// 18006856 <hgi2s_v0_irq_handler+0x2a>
1800683c:	9464      	ld.w      	r3, (r4, 0x10)
1800683e:	e4632010 	andi      	r3, r3, 16
18006842:	e903000a 	bez      	r3, 0x18006856	// 18006856 <hgi2s_v0_irq_handler+0x2a>
        hw->STA = LL_I2S_STA_DMA_HF_PENGING(1);
18006846:	3310      	movi      	r3, 16
18006848:	b464      	st.w      	r3, (r4, 0x10)
        if (dev->irq_hdl) {
1800684a:	9064      	ld.w      	r3, (r0, 0x10)
1800684c:	e9030005 	bez      	r3, 0x18006856	// 18006856 <hgi2s_v0_irq_handler+0x2a>
            dev->irq_hdl(I2S_IRQ_FLAG_HALF, dev->irq_data);
18006850:	9025      	ld.w      	r1, (r0, 0x14)
18006852:	3001      	movi      	r0, 1
18006854:	7bcd      	jsr      	r3
        }
    }

    if ((hw->CON & LL_I2S_CON_OV_PEND_IE(1)) && (hw->STA & LL_I2S_STA_DMA_OV_PENGING(1))) {
18006856:	9460      	ld.w      	r3, (r4, 0x0)
18006858:	e4632400 	andi      	r3, r3, 1024
1800685c:	e903000f 	bez      	r3, 0x1800687a	// 1800687a <hgi2s_v0_irq_handler+0x4e>
18006860:	9464      	ld.w      	r3, (r4, 0x10)
18006862:	e4632020 	andi      	r3, r3, 32
18006866:	e903000a 	bez      	r3, 0x1800687a	// 1800687a <hgi2s_v0_irq_handler+0x4e>
        hw->STA = LL_I2S_STA_DMA_OV_PENGING(1);
1800686a:	3320      	movi      	r3, 32
1800686c:	b464      	st.w      	r3, (r4, 0x10)
        if (dev->irq_hdl) {
1800686e:	9564      	ld.w      	r3, (r5, 0x10)
18006870:	e9030005 	bez      	r3, 0x1800687a	// 1800687a <hgi2s_v0_irq_handler+0x4e>
            dev->irq_hdl(I2S_IRQ_FLAG_FULL, dev->irq_data);
18006874:	9525      	ld.w      	r1, (r5, 0x14)
18006876:	3002      	movi      	r0, 2
18006878:	7bcd      	jsr      	r3
        }
    }
}
1800687a:	1492      	pop      	r4-r5, r15

1800687c <hgi2s_v0_release_irq>:
int32 hgi2s_v0_release_irq(struct i2s_device *i2s, uint32 irq_flag) {

    struct hgi2s_v0 *dev   = (struct hgi2s_v0 *)i2s;
    struct hgi2s_v0_hw *hw = (struct hgi2s_v0_hw *)dev->hw;

    if ((!dev->opened) || (dev->dsleep)) {
1800687c:	805a      	ld.b      	r2, (r0, 0x1a)
1800687e:	e4422003 	andi      	r2, r2, 3
18006882:	3a41      	cmpnei      	r2, 1
    struct hgi2s_v0_hw *hw = (struct hgi2s_v0_hw *)dev->hw;
18006884:	9063      	ld.w      	r3, (r0, 0xc)
    if ((!dev->opened) || (dev->dsleep)) {
18006886:	0811      	bt      	0x180068a8	// 180068a8 <hgi2s_v0_release_irq+0x2c>
        return RET_ERR;
    }

    if (irq_flag & I2S_IRQ_FLAG_HALF) {
18006888:	e4412001 	andi      	r2, r1, 1
1800688c:	e9020005 	bez      	r2, 0x18006896	// 18006896 <hgi2s_v0_release_irq+0x1a>
        hw->CON &= ~ LL_I2S_CON_HF_PEND_IE(1);
18006890:	9340      	ld.w      	r2, (r3, 0x0)
18006892:	3a89      	bclri      	r2, 9
18006894:	b340      	st.w      	r2, (r3, 0x0)
    }

    if (irq_flag & I2S_IRQ_FLAG_FULL) {
18006896:	e4012002 	andi      	r0, r1, 2
1800689a:	e9000006 	bez      	r0, 0x180068a6	// 180068a6 <hgi2s_v0_release_irq+0x2a>
        hw->CON &= ~ LL_I2S_CON_OV_PEND_IE(1);
1800689e:	9340      	ld.w      	r2, (r3, 0x0)
180068a0:	3a8a      	bclri      	r2, 10
180068a2:	b340      	st.w      	r2, (r3, 0x0)
    }

    return RET_OK;
180068a4:	3000      	movi      	r0, 0
}
180068a6:	783c      	jmp      	r15
        return RET_ERR;
180068a8:	3000      	movi      	r0, 0
180068aa:	2800      	subi      	r0, 1
180068ac:	07fd      	br      	0x180068a6	// 180068a6 <hgi2s_v0_release_irq+0x2a>
	...

180068b0 <hgi2s_v0_close>:
int32 hgi2s_v0_close(struct i2s_device *i2s) {
180068b0:	14d3      	push      	r4-r6, r15
    if (!dev->opened) {
180068b2:	807a      	ld.b      	r3, (r0, 0x1a)
180068b4:	e4632001 	andi      	r3, r3, 1
int32 hgi2s_v0_close(struct i2s_device *i2s) {
180068b8:	6d03      	mov      	r4, r0
    if (!dev->opened) {
180068ba:	e9030027 	bez      	r3, 0x18006908	// 18006908 <hgi2s_v0_close+0x58>
    struct hgi2s_v0_hw *hw = (struct hgi2s_v0_hw *)dev->hw;
180068be:	90a3      	ld.w      	r5, (r0, 0xc)
    if (HG_IIS0_BASE == (uint32)hw) {
180068c0:	ea0380c0 	movi      	r3, 32960
180068c4:	3bbe      	bseti      	r3, 30
180068c6:	64d6      	cmpne      	r5, r3
180068c8:	0822      	bt      	0x1800690c	// 1800690c <hgi2s_v0_close+0x5c>
        sysctrl_iis0_clk_close();
180068ca:	ea224002 	movih      	r2, 16386
180068ce:	9273      	ld.w      	r3, (r2, 0x4c)
180068d0:	3b8d      	bclri      	r3, 13
180068d2:	b273      	st.w      	r3, (r2, 0x4c)
    irq_disable(dev->irq_num       );
180068d4:	8c6c      	ld.h      	r3, (r4, 0x18)
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
180068d6:	c4a354c2 	zext      	r2, r3, 6, 5
180068da:	3101      	movi      	r1, 1
180068dc:	e463201f 	andi      	r3, r3, 31
180068e0:	c4614023 	lsl      	r3, r1, r3
180068e4:	221f      	addi      	r2, 32
180068e6:	1030      	lrw      	r1, 0xe000e100	// 18006924 <hgi2s_v0_close+0x74>
180068e8:	d4410883 	str.w      	r3, (r1, r2 << 2)
180068ec:	3600      	movi      	r6, 0
    pin_func(dev->dev.dev.dev_id, 0);
180068ee:	6c5b      	mov      	r1, r6
180068f0:	9400      	ld.w      	r0, (r4, 0x0)
180068f2:	e3ffec1b 	bsr      	0x18004128	// 18004128 <pin_func>
    p_i2s->CON &= ~ LL_I2S_CON_ENABLE(1);
180068f6:	9560      	ld.w      	r3, (r5, 0x0)
180068f8:	3b80      	bclri      	r3, 0
180068fa:	b560      	st.w      	r3, (r5, 0x0)
    dev->opened    = 0;
180068fc:	847a      	ld.b      	r3, (r4, 0x1a)
    dev->dsleep    = 0;
180068fe:	e46320fa 	andi      	r3, r3, 250
18006902:	c4665c01 	ins      	r3, r6, 1, 1
18006906:	a47a      	st.b      	r3, (r4, 0x1a)
}
18006908:	3000      	movi      	r0, 0
1800690a:	1493      	pop      	r4-r6, r15
    } else if (HG_IIS1_BASE == (uint32)hw) {
1800690c:	ea0380e0 	movi      	r3, 32992
18006910:	3bbe      	bseti      	r3, 30
18006912:	64d6      	cmpne      	r5, r3
18006914:	0be0      	bt      	0x180068d4	// 180068d4 <hgi2s_v0_close+0x24>
        sysctrl_iis1_clk_close();
18006916:	ea224002 	movih      	r2, 16386
1800691a:	9274      	ld.w      	r3, (r2, 0x50)
1800691c:	3b92      	bclri      	r3, 18
1800691e:	b274      	st.w      	r3, (r2, 0x50)
18006920:	07da      	br      	0x180068d4	// 180068d4 <hgi2s_v0_close+0x24>
18006922:	0000      	.short	0x0000
18006924:	e000e100 	.long	0xe000e100

18006928 <hgi2s_v0_request_irq>:
int32 hgi2s_v0_request_irq(struct i2s_device *i2s, uint32 irq_flag, i2s_irq_hdl irqhdl, uint32 irq_data) {
18006928:	14d3      	push      	r4-r6, r15
1800692a:	6d87      	mov      	r6, r1
    if ((!dev->opened) || (dev->dsleep)) {
1800692c:	803a      	ld.b      	r1, (r0, 0x1a)
1800692e:	e4212003 	andi      	r1, r1, 3
18006932:	3941      	cmpnei      	r1, 1
int32 hgi2s_v0_request_irq(struct i2s_device *i2s, uint32 irq_flag, i2s_irq_hdl irqhdl, uint32 irq_data) {
18006934:	6d03      	mov      	r4, r0
    struct hgi2s_v0_hw *hw = (struct hgi2s_v0_hw *)dev->hw;
18006936:	90a3      	ld.w      	r5, (r0, 0xc)
    if ((!dev->opened) || (dev->dsleep)) {
18006938:	0825      	bt      	0x18006982	// 18006982 <hgi2s_v0_request_irq+0x5a>
    dev->irq_hdl  = irqhdl;
1800693a:	b044      	st.w      	r2, (r0, 0x10)
    dev->irq_data = irq_data;
1800693c:	b065      	st.w      	r3, (r0, 0x14)
    request_irq(dev->irq_num, hgi2s_v0_irq_handler, dev);
1800693e:	6c83      	mov      	r2, r0
18006940:	1032      	lrw      	r1, 0x1800682c	// 18006988 <hgi2s_v0_request_irq+0x60>
18006942:	880c      	ld.h      	r0, (r0, 0x18)
18006944:	e3ffe6cc 	bsr      	0x180036dc	// 180036dc <request_irq>
    if (irq_flag & I2S_IRQ_FLAG_HALF) {
18006948:	e4662001 	andi      	r3, r6, 1
1800694c:	e9030006 	bez      	r3, 0x18006958	// 18006958 <hgi2s_v0_request_irq+0x30>
        hw->CON |= LL_I2S_CON_HF_PEND_IE(1);
18006950:	9560      	ld.w      	r3, (r5, 0x0)
18006952:	ec630200 	ori      	r3, r3, 512
18006956:	b560      	st.w      	r3, (r5, 0x0)
    if (irq_flag & I2S_IRQ_FLAG_FULL) {
18006958:	e4c62002 	andi      	r6, r6, 2
1800695c:	e9060006 	bez      	r6, 0x18006968	// 18006968 <hgi2s_v0_request_irq+0x40>
        hw->CON |= LL_I2S_CON_OV_PEND_IE(1);
18006960:	9560      	ld.w      	r3, (r5, 0x0)
18006962:	ec630400 	ori      	r3, r3, 1024
18006966:	b560      	st.w      	r3, (r5, 0x0)
    irq_enable(dev->irq_num);
18006968:	8c6c      	ld.h      	r3, (r4, 0x18)
    VIC->ISER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1800696a:	c4a354c1 	zext      	r1, r3, 6, 5
1800696e:	3201      	movi      	r2, 1
18006970:	e463201f 	andi      	r3, r3, 31
18006974:	c4624023 	lsl      	r3, r2, r3
18006978:	1045      	lrw      	r2, 0xe000e100	// 1800698c <hgi2s_v0_request_irq+0x64>
1800697a:	d4220883 	str.w      	r3, (r2, r1 << 2)
    return RET_OK;
1800697e:	3000      	movi      	r0, 0
}
18006980:	1493      	pop      	r4-r6, r15
        return RET_ERR;
18006982:	3000      	movi      	r0, 0
18006984:	2800      	subi      	r0, 1
18006986:	07fd      	br      	0x18006980	// 18006980 <hgi2s_v0_request_irq+0x58>
18006988:	1800682c 	.long	0x1800682c
1800698c:	e000e100 	.long	0xe000e100

18006990 <hgi2s_v0_open>:
{
18006990:	14d6      	push      	r4-r9, r15
18006992:	6e03      	mov      	r8, r0
    struct hgi2s_v0_hw *hw        = (struct hgi2s_v0_hw *)dev->hw;
18006994:	90a3      	ld.w      	r5, (r0, 0xc)
    if (dev->opened) {
18006996:	801a      	ld.b      	r0, (r0, 0x1a)
18006998:	e5802001 	andi      	r12, r0, 1
1800699c:	e90c0006 	bez      	r12, 0x180069a8	// 180069a8 <hgi2s_v0_open+0x18>
        if (!dev->dsleep) {
180069a0:	e4002002 	andi      	r0, r0, 2
180069a4:	e90000a8 	bez      	r0, 0x18006af4	// 18006af4 <hgi2s_v0_open+0x164>
    switch (mode) {
180069a8:	e9010076 	bez      	r1, 0x18006a94	// 18006a94 <hgi2s_v0_open+0x104>
            return -1;
180069ac:	3000      	movi      	r0, 0
180069ae:	2800      	subi      	r0, 1
180069b0:	3941      	cmpnei      	r1, 1
180069b2:	3601      	movi      	r6, 1
180069b4:	c4c00c40 	inct      	r6, r0, 0
180069b8:	3b02      	cmphsi      	r3, 3
180069ba:	086f      	bt      	0x18006a98	// 18006a98 <hgi2s_v0_open+0x108>
180069bc:	1233      	lrw      	r1, 0x180168b8	// 18006b08 <hgi2s_v0_open+0x178>
180069be:	d0611029 	ldr.bs      	r9, (r1, r3 << 0)
180069c2:	3a03      	cmphsi      	r2, 4
180069c4:	3300      	movi      	r3, 0
180069c6:	2b00      	subi      	r3, 1
180069c8:	086d      	bt      	0x18006aa2	// 18006aa2 <hgi2s_v0_open+0x112>
180069ca:	1231      	lrw      	r1, 0x180168c0	// 18006b0c <hgi2s_v0_open+0x17c>
180069cc:	d0410444 	ldr.h      	r4, (r1, r2 << 1)
180069d0:	7511      	zexth      	r4, r4
    if (((-1) == i2s_mode_to_reg       ) || \
180069d2:	64da      	cmpne      	r6, r3
180069d4:	0c93      	bf      	0x18006afa	// 18006afa <hgi2s_v0_open+0x16a>
        ((-1) == i2s_data_fmt_to_reg   ) || \
180069d6:	64e6      	cmpne      	r9, r3
180069d8:	0c91      	bf      	0x18006afa	// 18006afa <hgi2s_v0_open+0x16a>
        ((-1) == i2s_sample_bits_to_reg) || \
180069da:	64d2      	cmpne      	r4, r3
180069dc:	0c8f      	bf      	0x18006afa	// 18006afa <hgi2s_v0_open+0x16a>
    if (pin_func(dev->dev.dev.dev_id , 1) != RET_OK) {
180069de:	3101      	movi      	r1, 1
180069e0:	d8082000 	ld.w      	r0, (r8, 0x0)
180069e4:	e3ffeba2 	bsr      	0x18004128	// 18004128 <pin_func>
180069e8:	6dc3      	mov      	r7, r0
180069ea:	e920008b 	bnez      	r0, 0x18006b00	// 18006b00 <hgi2s_v0_open+0x170>
     if (HG_IIS0_BASE == (uint32)hw) {
180069ee:	ea0380c0 	movi      	r3, 32960
180069f2:	3bbe      	bseti      	r3, 30
180069f4:	64d6      	cmpne      	r5, r3
180069f6:	0858      	bt      	0x18006aa6	// 18006aa6 <hgi2s_v0_open+0x116>
        sysctrl_iis0_clk_open();
180069f8:	ea224002 	movih      	r2, 16386
180069fc:	9273      	ld.w      	r3, (r2, 0x4c)
180069fe:	ec632000 	ori      	r3, r3, 8192
18006a02:	b273      	st.w      	r3, (r2, 0x4c)
     hw->BAUD      = 0;
18006a04:	3300      	movi      	r3, 0
18006a06:	b562      	st.w      	r3, (r5, 0x8)
    i2s_reg_con = LL_I2S_CON_MODE(i2s_mode_to_reg    ) | 
18006a08:	46c3      	lsli      	r6, r6, 3
     hw->BIT_SET   = 0;
18006a0a:	b561      	st.w      	r3, (r5, 0x4)
     hw->CON       = 0;
18006a0c:	b560      	st.w      	r3, (r5, 0x0)
     hw->DMA_LEN   = 0;
18006a0e:	b567      	st.w      	r3, (r5, 0x1c)
     hw->DMA_STADR = 0;
18006a10:	b565      	st.w      	r3, (r5, 0x14)
     hw->WS_CON    = 0;
18006a12:	b563      	st.w      	r3, (r5, 0xc)
     hw->STA       = 0xFFFF;
18006a14:	ea03ffff 	movi      	r3, 65535
18006a18:	b564      	st.w      	r3, (r5, 0x10)
    i2s_reg_con = LL_I2S_CON_MODE(i2s_mode_to_reg    ) | 
18006a1a:	e4c62008 	andi      	r6, r6, 8
    i2s_reg_con = hw->CON;
18006a1e:	9560      	ld.w      	r3, (r5, 0x0)
    i2s_reg_con |= (LL_I2S_CON_BCLKDBSBPS(1) | LL_I2S_CON_RXDBSBPS(1) | LL_I2S_CON_WSCLKDBSBPS(1));
18006a20:	ecc67800 	ori      	r6, r6, 30720
    hw->WS_CON  = i2s_sample_bits_to_reg - 1;
18006a24:	e4691000 	subi      	r3, r9, 1
    hw->CON     = i2s_reg_con;
18006a28:	b5c0      	st.w      	r6, (r5, 0x0)
    hw->WS_CON  = i2s_sample_bits_to_reg - 1;
18006a2a:	b563      	st.w      	r3, (r5, 0xc)
    hw->BIT_SET = i2s_sample_bits_to_reg - 1;
18006a2c:	b561      	st.w      	r3, (r5, 0x4)
    hw->BAUD    = ((__OVER_SAMPPLE_RATE/4) / i2s_sample_bits_to_reg) - 1;
18006a2e:	3380      	movi      	r3, 128
18006a30:	c5238049 	divs      	r9, r3, r9
    if (HG_IIS0_BASE == (uint32)p_i2s) {
18006a34:	ea0380c0 	movi      	r3, 32960
18006a38:	3bbe      	bseti      	r3, 30
18006a3a:	64d6      	cmpne      	r5, r3
    hw->BAUD    = ((__OVER_SAMPPLE_RATE/4) / i2s_sample_bits_to_reg) - 1;
18006a3c:	e5291000 	subi      	r9, r9, 1
18006a40:	dd252002 	st.w      	r9, (r5, 0x8)
    if (HG_IIS0_BASE == (uint32)p_i2s) {
18006a44:	083c      	bt      	0x18006abc	// 18006abc <hgi2s_v0_open+0x12c>
        SYSCTRL_REG_OPT(
18006a46:	ea254002 	movih      	r5, 16386
        mclk_div = ((peripheral_clock_get(HG_APB0_PT_IIS0)+((freq*__OVER_SAMPPLE_RATE)/2)) / (freq*__OVER_SAMPPLE_RATE));
18006a4a:	4489      	lsli      	r4, r4, 9
        SYSCTRL_REG_OPT(
18006a4c:	9561      	ld.w      	r3, (r5, 0x4)
18006a4e:	3b8a      	bclri      	r3, 10
18006a50:	3b8b      	bclri      	r3, 11
18006a52:	ec630400 	ori      	r3, r3, 1024
18006a56:	b561      	st.w      	r3, (r5, 0x4)
        mclk_div = ((peripheral_clock_get(HG_APB0_PT_IIS0)+((freq*__OVER_SAMPPLE_RATE)/2)) / (freq*__OVER_SAMPPLE_RATE));
18006a58:	301e      	movi      	r0, 30
18006a5a:	e00053a9 	bsr      	0x180111ac	// 180111ac <peripheral_clock_get>
18006a5e:	4c61      	lsri      	r3, r4, 1
18006a60:	60c0      	addu      	r3, r0
18006a62:	c4838023 	divu      	r3, r3, r4
        SYSCTRL_REG_OPT(
18006a66:	ea21ff81 	movih      	r1, 65409
18006a6a:	9551      	ld.w      	r2, (r5, 0x44)
18006a6c:	2b00      	subi      	r3, 1
18006a6e:	2900      	subi      	r1, 1
18006a70:	4370      	lsli      	r3, r3, 16
18006a72:	6884      	and      	r2, r1
18006a74:	6cc8      	or      	r3, r2
18006a76:	b571      	st.w      	r3, (r5, 0x44)
    dev->opened    = 1;
18006a78:	d868001a 	ld.b      	r3, (r8, 0x1a)
18006a7c:	3201      	movi      	r2, 1
18006a7e:	c4625c00 	ins      	r3, r2, 0, 0
    dev->dsleep    = 0;
18006a82:	e46320fb 	andi      	r3, r3, 251
18006a86:	3200      	movi      	r2, 0
18006a88:	c4625c01 	ins      	r3, r2, 1, 1
18006a8c:	dc68001a 	st.b      	r3, (r8, 0x1a)
}
18006a90:	6c1f      	mov      	r0, r7
18006a92:	1496      	pop      	r4-r9, r15
            return 0;
18006a94:	6d87      	mov      	r6, r1
18006a96:	0791      	br      	0x180069b8	// 180069b8 <hgi2s_v0_open+0x28>
            return -1;
18006a98:	ea090000 	movi      	r9, 0
18006a9c:	e5291000 	subi      	r9, r9, 1
18006aa0:	0791      	br      	0x180069c2	// 180069c2 <hgi2s_v0_open+0x32>
18006aa2:	6d0f      	mov      	r4, r3
18006aa4:	0797      	br      	0x180069d2	// 180069d2 <hgi2s_v0_open+0x42>
     } else if (HG_IIS1_BASE == (uint32)hw) {
18006aa6:	ea0380e0 	movi      	r3, 32992
18006aaa:	3bbe      	bseti      	r3, 30
18006aac:	64d6      	cmpne      	r5, r3
18006aae:	0bab      	bt      	0x18006a04	// 18006a04 <hgi2s_v0_open+0x74>
        sysctrl_iis1_clk_open();
18006ab0:	ea224002 	movih      	r2, 16386
18006ab4:	9274      	ld.w      	r3, (r2, 0x50)
18006ab6:	3bb2      	bseti      	r3, 18
18006ab8:	b274      	st.w      	r3, (r2, 0x50)
18006aba:	07a5      	br      	0x18006a04	// 18006a04 <hgi2s_v0_open+0x74>
    else if(HG_IIS1_BASE == (uint32)p_i2s){
18006abc:	ea0380e0 	movi      	r3, 32992
18006ac0:	3bbe      	bseti      	r3, 30
18006ac2:	64d6      	cmpne      	r5, r3
18006ac4:	0bda      	bt      	0x18006a78	// 18006a78 <hgi2s_v0_open+0xe8>
        SYSCTRL_REG_OPT(
18006ac6:	ea254002 	movih      	r5, 16386
        mclk_div = (peripheral_clock_get(HG_APB0_PT_IIS1) / (freq*256));
18006aca:	301f      	movi      	r0, 31
        SYSCTRL_REG_OPT(
18006acc:	9561      	ld.w      	r3, (r5, 0x4)
18006ace:	c40357a3 	zext      	r3, r3, 29, 0
18006ad2:	3bbe      	bseti      	r3, 30
18006ad4:	b561      	st.w      	r3, (r5, 0x4)
        mclk_div = (peripheral_clock_get(HG_APB0_PT_IIS1) / (freq*256));
18006ad6:	e000536b 	bsr      	0x180111ac	// 180111ac <peripheral_clock_get>
18006ada:	4488      	lsli      	r4, r4, 8
18006adc:	c4808024 	divu      	r4, r0, r4
        SYSCTRL_REG_OPT(
18006ae0:	ea22c080 	movih      	r2, 49280
18006ae4:	9571      	ld.w      	r3, (r5, 0x44)
18006ae6:	2c00      	subi      	r4, 1
18006ae8:	2a00      	subi      	r2, 1
18006aea:	4497      	lsli      	r4, r4, 23
18006aec:	68c8      	and      	r3, r2
18006aee:	6d0c      	or      	r4, r3
18006af0:	b591      	st.w      	r4, (r5, 0x44)
18006af2:	07c3      	br      	0x18006a78	// 18006a78 <hgi2s_v0_open+0xe8>
            return -EBUSY;
18006af4:	3700      	movi      	r7, 0
18006af6:	2f0f      	subi      	r7, 16
18006af8:	07cc      	br      	0x18006a90	// 18006a90 <hgi2s_v0_open+0x100>
        return -EINVAL;
18006afa:	3700      	movi      	r7, 0
18006afc:	2f15      	subi      	r7, 22
18006afe:	07c9      	br      	0x18006a90	// 18006a90 <hgi2s_v0_open+0x100>
        return RET_ERR;
18006b00:	3700      	movi      	r7, 0
18006b02:	2f00      	subi      	r7, 1
18006b04:	07c6      	br      	0x18006a90	// 18006a90 <hgi2s_v0_open+0x100>
18006b06:	0000      	.short	0x0000
18006b08:	180168b8 	.long	0x180168b8
18006b0c:	180168c0 	.long	0x180168c0

18006b10 <hgi2s_v0_attach>:
    .ops.suspend = hgi2s_v0_suspend,
    .ops.resume  = hgi2s_v0_resume,
#endif
};

int32 hgi2s_v0_attach(uint32 dev_id, struct hgi2s_v0 *i2s) {
18006b10:	14d1      	push      	r4, r15

    i2s->opened          = 0;
18006b12:	815a      	ld.b      	r2, (r1, 0x1a)
18006b14:	3400      	movi      	r4, 0
    i2s->dsleep          = 0;
    i2s->irq_hdl         = NULL;
    i2s->irq_data        = 0;
    i2s->duplex_en       = 0;
18006b16:	e44220fc 	andi      	r2, r2, 252
18006b1a:	c4445c02 	ins      	r2, r4, 2, 2
    i2s->dev.dev.ops     = (const struct devobj_ops *)&i2s_v0_ops;
#ifdef CONFIG_SLEEP
    os_mutex_init(&i2s->bp_suspend_lock);
    os_mutex_init(&i2s->bp_resume_lock);
#endif    
    irq_disable(i2s->irq_num);
18006b1e:	896c      	ld.h      	r3, (r1, 0x18)
    i2s->duplex_en       = 0;
18006b20:	a15a      	st.b      	r2, (r1, 0x1a)
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
18006b22:	ea0c0001 	movi      	r12, 1
    i2s->dev.dev.ops     = (const struct devobj_ops *)&i2s_v0_ops;
18006b26:	104a      	lrw      	r2, 0x180168c8	// 18006b4c <hgi2s_v0_attach+0x3c>
18006b28:	b142      	st.w      	r2, (r1, 0x8)
18006b2a:	c4a354c2 	zext      	r2, r3, 6, 5
18006b2e:	e463201f 	andi      	r3, r3, 31
18006b32:	c46c4023 	lsl      	r3, r12, r3
18006b36:	221f      	addi      	r2, 32
18006b38:	ea8c0006 	lrw      	r12, 0xe000e100	// 18006b50 <hgi2s_v0_attach+0x40>
    i2s->irq_hdl         = NULL;
18006b3c:	b184      	st.w      	r4, (r1, 0x10)
    i2s->irq_data        = 0;
18006b3e:	b185      	st.w      	r4, (r1, 0x14)
18006b40:	d44c0883 	str.w      	r3, (r12, r2 << 2)
    dev_register(dev_id, (struct dev_obj *)i2s);
18006b44:	e3ffe2b0 	bsr      	0x180030a4	// 180030a4 <dev_register>
    return RET_OK;
}
18006b48:	6c13      	mov      	r0, r4
18006b4a:	1491      	pop      	r4, r15
18006b4c:	180168c8 	.long	0x180168c8
18006b50:	e000e100 	.long	0xe000e100

18006b54 <hgspi_v3_release_irq>:
static int32 hgspi_v3_release_irq(struct spi_device *p_spi, uint32 irq_flag)
{
    struct hgspi_v3 *dev = (struct hgspi_v3 *)p_spi;
    struct hgspi_v3_hw *hw = (struct hgspi_v3_hw *)dev->hw;

    if ((!dev->opened) || (dev->dsleep)) {
18006b54:	d840003a 	ld.b      	r2, (r0, 0x3a)
18006b58:	e58220c0 	andi      	r12, r2, 192
18006b5c:	eb4c0040 	cmpnei      	r12, 64
    struct hgspi_v3_hw *hw = (struct hgspi_v3_hw *)dev->hw;
18006b60:	9063      	ld.w      	r3, (r0, 0xc)
    if ((!dev->opened) || (dev->dsleep)) {
18006b62:	0850      	bt      	0x18006c02	// 18006c02 <hgspi_v3_release_irq+0xae>
        return RET_ERR;
    }


    if (irq_flag & SPI_IRQ_FLAG_TX_DONE) {
18006b64:	e5812001 	andi      	r12, r1, 1
18006b68:	e90c000e 	bez      	r12, 0x18006b84	// 18006b84 <hgspi_v3_release_irq+0x30>
        if (hw->CON0 & LL_SPI_CON0_SLAVE_STATE_EN) {
18006b6c:	ea0d0080 	movi      	r13, 128
18006b70:	d9832000 	ld.w      	r12, (r3, 0x0)
18006b74:	c5ad482d 	lsli      	r13, r13, 13
18006b78:	6b34      	and      	r12, r13
18006b7a:	e90c0032 	bez      	r12, 0x18006bde	// 18006bde <hgspi_v3_release_irq+0x8a>
            hw->CON0 &= ~LL_SPI_CON0_SLAVE_RDDATA_IE_EN;
18006b7e:	9340      	ld.w      	r2, (r3, 0x0)
18006b80:	3a96      	bclri      	r2, 22
18006b82:	b340      	st.w      	r2, (r3, 0x0)
            dev->spi_irq_flag_tx_done = 0;
            hw->CON1 &= ~ LL_SPI_CON1_DMA_IE_EN;
        }
    }

    if (irq_flag & SPI_IRQ_FLAG_RX_DONE) {
18006b84:	e4412002 	andi      	r2, r1, 2
18006b88:	e902000d 	bez      	r2, 0x18006ba2	// 18006ba2 <hgspi_v3_release_irq+0x4e>
        if (hw->CON0 & LL_SPI_CON0_SLAVE_STATE_EN) {
18006b8c:	ea0c0080 	movi      	r12, 128
18006b90:	9340      	ld.w      	r2, (r3, 0x0)
18006b92:	c5ac482c 	lsli      	r12, r12, 13
18006b96:	68b0      	and      	r2, r12
18006b98:	e902002b 	bez      	r2, 0x18006bee	// 18006bee <hgspi_v3_release_irq+0x9a>
            hw->CON0 &= ~LL_SPI_CON0_SLAVE_WRDATA_IE_EN;
18006b9c:	9340      	ld.w      	r2, (r3, 0x0)
18006b9e:	3a95      	bclri      	r2, 21
18006ba0:	b340      	st.w      	r2, (r3, 0x0)
            dev->spi_irq_flag_rx_done = 0;
            hw->CON1 &= ~ LL_SPI_CON1_DMA_IE_EN;
        }
    }

    if (irq_flag & SPI_IRQ_FLAG_CS_RISING) {
18006ba2:	e4412008 	andi      	r2, r1, 8
18006ba6:	e9020005 	bez      	r2, 0x18006bb0	// 18006bb0 <hgspi_v3_release_irq+0x5c>
        hw->CON1 &= ~ LL_SPI_CON0_NSS_POS_IE_EN;
18006baa:	9341      	ld.w      	r2, (r3, 0x4)
18006bac:	3a8d      	bclri      	r2, 13
18006bae:	b341      	st.w      	r2, (r3, 0x4)
    }

    if (irq_flag & SPI_IRQ_FLAG_FIFO_OVERFLOW) {
18006bb0:	e4412004 	andi      	r2, r1, 4
18006bb4:	e9020005 	bez      	r2, 0x18006bbe	// 18006bbe <hgspi_v3_release_irq+0x6a>
        hw->CON1 &= ~ LL_SPI_CON1_BUF_OV_IE_EN;
18006bb8:	9341      	ld.w      	r2, (r3, 0x4)
18006bba:	3a88      	bclri      	r2, 8
18006bbc:	b341      	st.w      	r2, (r3, 0x4)
    }

    if (irq_flag & SPI_IRQ_FLAG_SLAVE_FSM_READ_STATUS) {
18006bbe:	e4412010 	andi      	r2, r1, 16
18006bc2:	e9020005 	bez      	r2, 0x18006bcc	// 18006bcc <hgspi_v3_release_irq+0x78>
        hw->CON0 &= ~ LL_SPI_CON0_SLAVE_RDSTATUS_IE_EN;
18006bc6:	9340      	ld.w      	r2, (r3, 0x0)
18006bc8:	3a97      	bclri      	r2, 23
18006bca:	b340      	st.w      	r2, (r3, 0x0)
    }
    
    if (irq_flag & SPI_IRQ_FLAG_SLAVE_FSM_WRONG_CMD) {
18006bcc:	e4012020 	andi      	r0, r1, 32
18006bd0:	e9000006 	bez      	r0, 0x18006bdc	// 18006bdc <hgspi_v3_release_irq+0x88>
        hw->CON0 &= ~ LL_SPI_CON0_SLAVE_WRONG_CMD_IE;
18006bd4:	9340      	ld.w      	r2, (r3, 0x0)
18006bd6:	3a99      	bclri      	r2, 25
18006bd8:	b340      	st.w      	r2, (r3, 0x0)
    }
    return RET_OK;
18006bda:	3000      	movi      	r0, 0
}
18006bdc:	783c      	jmp      	r15
            dev->spi_irq_flag_tx_done = 0;
18006bde:	c44c5c02 	ins      	r2, r12, 2, 2
18006be2:	dc40003a 	st.b      	r2, (r0, 0x3a)
            hw->CON1 &= ~ LL_SPI_CON1_DMA_IE_EN;
18006be6:	9341      	ld.w      	r2, (r3, 0x4)
18006be8:	3a89      	bclri      	r2, 9
18006bea:	b341      	st.w      	r2, (r3, 0x4)
18006bec:	07cc      	br      	0x18006b84	// 18006b84 <hgspi_v3_release_irq+0x30>
            dev->spi_irq_flag_rx_done = 0;
18006bee:	d980003a 	ld.b      	r12, (r0, 0x3a)
18006bf2:	c5825c03 	ins      	r12, r2, 3, 3
18006bf6:	dd80003a 	st.b      	r12, (r0, 0x3a)
            hw->CON1 &= ~ LL_SPI_CON1_DMA_IE_EN;
18006bfa:	9341      	ld.w      	r2, (r3, 0x4)
18006bfc:	3a89      	bclri      	r2, 9
18006bfe:	b341      	st.w      	r2, (r3, 0x4)
18006c00:	07d1      	br      	0x18006ba2	// 18006ba2 <hgspi_v3_release_irq+0x4e>
        return RET_ERR;
18006c02:	3000      	movi      	r0, 0
18006c04:	2800      	subi      	r0, 1
18006c06:	07eb      	br      	0x18006bdc	// 18006bdc <hgspi_v3_release_irq+0x88>

18006c08 <hgspi_v3_irq_handler>:
{
18006c08:	14d2      	push      	r4-r5, r15
    struct hgspi_v3_hw *hw = (struct hgspi_v3_hw *)dev->hw;
18006c0a:	90a3      	ld.w      	r5, (r0, 0xc)
{
18006c0c:	6d03      	mov      	r4, r0
    if ((hw->CON1 & LL_SPI_CON1_DMA_IE_EN) && (hw->STA1 & LL_SPI_STA_DMA_PENDING)) {
18006c0e:	9561      	ld.w      	r3, (r5, 0x4)
18006c10:	e4632200 	andi      	r3, r3, 512
18006c14:	e903004e 	bez      	r3, 0x18006cb0	// 18006cb0 <hgspi_v3_irq_handler+0xa8>
18006c18:	956a      	ld.w      	r3, (r5, 0x28)
18006c1a:	e4632010 	andi      	r3, r3, 16
18006c1e:	e9030049 	bez      	r3, 0x18006cb0	// 18006cb0 <hgspi_v3_irq_handler+0xa8>
        hw->STA1 = LL_SPI_STA_DMA_PENDING;
18006c22:	3310      	movi      	r3, 16
18006c24:	b56a      	st.w      	r3, (r5, 0x28)
        if (!dev->spi_rx_async) {
18006c26:	d860003a 	ld.b      	r3, (r0, 0x3a)
18006c2a:	e4432020 	andi      	r2, r3, 32
18006c2e:	e9220007 	bnez      	r2, 0x18006c3c	// 18006c3c <hgspi_v3_irq_handler+0x34>
            dev->spi_rx_done = 1;
18006c32:	3201      	movi      	r2, 1
18006c34:	c4625c01 	ins      	r3, r2, 1, 1
18006c38:	dc60003a 	st.b      	r3, (r0, 0x3a)
        if (!dev->spi_tx_async) {
18006c3c:	d864003a 	ld.b      	r3, (r4, 0x3a)
18006c40:	e4432010 	andi      	r2, r3, 16
18006c44:	e9220007 	bnez      	r2, 0x18006c52	// 18006c52 <hgspi_v3_irq_handler+0x4a>
            dev->spi_tx_done = 1;
18006c48:	3201      	movi      	r2, 1
18006c4a:	c4625c00 	ins      	r3, r2, 0, 0
18006c4e:	dc64003a 	st.b      	r3, (r4, 0x3a)
        if (dev->spi_tx_async) {
18006c52:	d864003a 	ld.b      	r3, (r4, 0x3a)
18006c56:	e4432010 	andi      	r2, r3, 16
18006c5a:	e902000b 	bez      	r2, 0x18006c70	// 18006c70 <hgspi_v3_irq_handler+0x68>
            dev->spi_tx_async = 0;
18006c5e:	3200      	movi      	r2, 0
18006c60:	c4625c04 	ins      	r3, r2, 4, 4
18006c64:	dc64003a 	st.b      	r3, (r4, 0x3a)
            os_sema_up(&dev->os_spi_tx_done);
18006c68:	e4040023 	addi      	r0, r4, 36
18006c6c:	e0006c62 	bsr      	0x18014530	// 18014530 <os_sema_up>
        if (dev->spi_rx_async){
18006c70:	d864003a 	ld.b      	r3, (r4, 0x3a)
18006c74:	e4432020 	andi      	r2, r3, 32
18006c78:	e902000b 	bez      	r2, 0x18006c8e	// 18006c8e <hgspi_v3_irq_handler+0x86>
            dev->spi_rx_async = 0;
18006c7c:	3200      	movi      	r2, 0
18006c7e:	c4625c05 	ins      	r3, r2, 5, 5
18006c82:	dc64003a 	st.b      	r3, (r4, 0x3a)
            os_sema_up(&dev->os_spi_rx_done);
18006c86:	e404002b 	addi      	r0, r4, 44
18006c8a:	e0006c53 	bsr      	0x18014530	// 18014530 <os_sema_up>
        if (hw->CON1 & LL_SPI_CON1_TX_EN) {
18006c8e:	9541      	ld.w      	r2, (r5, 0x4)
18006c90:	e4422008 	andi      	r2, r2, 8
18006c94:	9465      	ld.w      	r3, (r4, 0x14)
18006c96:	e90200ac 	bez      	r2, 0x18006dee	// 18006dee <hgspi_v3_irq_handler+0x1e6>
            if (dev->irq_hdl && dev->spi_irq_flag_tx_done) {
18006c9a:	e903000b 	bez      	r3, 0x18006cb0	// 18006cb0 <hgspi_v3_irq_handler+0xa8>
18006c9e:	d844003a 	ld.b      	r2, (r4, 0x3a)
18006ca2:	e4422004 	andi      	r2, r2, 4
18006ca6:	e9020005 	bez      	r2, 0x18006cb0	// 18006cb0 <hgspi_v3_irq_handler+0xa8>
                dev->irq_hdl(SPI_IRQ_FLAG_TX_DONE, dev->irq_data);
18006caa:	9426      	ld.w      	r1, (r4, 0x18)
18006cac:	3001      	movi      	r0, 1
                dev->irq_hdl(SPI_IRQ_FLAG_RX_DONE, dev->irq_data);
18006cae:	7bcd      	jsr      	r3
    if ((hw->CON1 & LL_SPI_CON1_BUF_OV_IE_EN) && (hw->STA1 & LL_SPI_STA_BUF_OV_PENDING)) {
18006cb0:	9561      	ld.w      	r3, (r5, 0x4)
18006cb2:	e4632100 	andi      	r3, r3, 256
18006cb6:	e903000f 	bez      	r3, 0x18006cd4	// 18006cd4 <hgspi_v3_irq_handler+0xcc>
18006cba:	956a      	ld.w      	r3, (r5, 0x28)
18006cbc:	e4632008 	andi      	r3, r3, 8
18006cc0:	e903000a 	bez      	r3, 0x18006cd4	// 18006cd4 <hgspi_v3_irq_handler+0xcc>
        hw->STA1 = LL_SPI_STA_BUF_OV_PENDING;
18006cc4:	3308      	movi      	r3, 8
18006cc6:	b56a      	st.w      	r3, (r5, 0x28)
        if (dev->irq_hdl) {
18006cc8:	9465      	ld.w      	r3, (r4, 0x14)
18006cca:	e9030005 	bez      	r3, 0x18006cd4	// 18006cd4 <hgspi_v3_irq_handler+0xcc>
            dev->irq_hdl(SPI_IRQ_FLAG_FIFO_OVERFLOW, dev->irq_data);
18006cce:	9426      	ld.w      	r1, (r4, 0x18)
18006cd0:	3004      	movi      	r0, 4
18006cd2:	7bcd      	jsr      	r3
    if ((hw->CON1 & LL_SPI_CON1_RX_TIMEOUT_IE(1)) && (hw->STA1 & LL_SPI_STA_RX_TIMEOUT_PEND)) {
18006cd4:	9561      	ld.w      	r3, (r5, 0x4)
18006cd6:	e4632400 	andi      	r3, r3, 1024
18006cda:	e903000f 	bez      	r3, 0x18006cf8	// 18006cf8 <hgspi_v3_irq_handler+0xf0>
18006cde:	3380      	movi      	r3, 128
18006ce0:	954a      	ld.w      	r2, (r5, 0x28)
18006ce2:	436b      	lsli      	r3, r3, 11
18006ce4:	688c      	and      	r2, r3
18006ce6:	e9020009 	bez      	r2, 0x18006cf8	// 18006cf8 <hgspi_v3_irq_handler+0xf0>
        hw->STA1 = LL_SPI_STA_RX_TIMEOUT_PEND;
18006cea:	b56a      	st.w      	r3, (r5, 0x28)
        if (dev->irq_hdl) {
18006cec:	9465      	ld.w      	r3, (r4, 0x14)
18006cee:	e9030005 	bez      	r3, 0x18006cf8	// 18006cf8 <hgspi_v3_irq_handler+0xf0>
            dev->irq_hdl(SPI_IRQ_FLAG_RX_TIMEOUT, dev->irq_data);
18006cf2:	9426      	ld.w      	r1, (r4, 0x18)
18006cf4:	3040      	movi      	r0, 64
18006cf6:	7bcd      	jsr      	r3
    if ((hw->CON0 & LL_SPI_CON0_NSS_POS_IE_EN) && (hw->STA1 & LL_SPI_STA_NSS_POS_PENDING)) {
18006cf8:	3280      	movi      	r2, 128
18006cfa:	9560      	ld.w      	r3, (r5, 0x0)
18006cfc:	4246      	lsli      	r2, r2, 6
18006cfe:	68c8      	and      	r3, r2
18006d00:	e903002a 	bez      	r3, 0x18006d54	// 18006d54 <hgspi_v3_irq_handler+0x14c>
18006d04:	956a      	ld.w      	r3, (r5, 0x28)
18006d06:	e4632020 	andi      	r3, r3, 32
18006d0a:	e9030025 	bez      	r3, 0x18006d54	// 18006d54 <hgspi_v3_irq_handler+0x14c>
        hw->STA1 = LL_SPI_STA_NSS_POS_PENDING;
18006d0e:	3320      	movi      	r3, 32
18006d10:	b56a      	st.w      	r3, (r5, 0x28)
        if (dev->irq_hdl) {
18006d12:	9465      	ld.w      	r3, (r4, 0x14)
18006d14:	e9030005 	bez      	r3, 0x18006d1e	// 18006d1e <hgspi_v3_irq_handler+0x116>
            dev->irq_hdl(SPI_IRQ_FLAG_CS_RISING, dev->irq_data);
18006d18:	9426      	ld.w      	r1, (r4, 0x18)
18006d1a:	3008      	movi      	r0, 8
18006d1c:	7bcd      	jsr      	r3
        if ((hw->CON1 & LL_SPI_CON1_MODE(1))) {
18006d1e:	9561      	ld.w      	r3, (r5, 0x4)
18006d20:	e4632004 	andi      	r3, r3, 4
18006d24:	e9030018 	bez      	r3, 0x18006d54	// 18006d54 <hgspi_v3_irq_handler+0x14c>
            if (!dev->spi_tx_async) {
18006d28:	d864003a 	ld.b      	r3, (r4, 0x3a)
18006d2c:	e4432010 	andi      	r2, r3, 16
18006d30:	e9220007 	bnez      	r2, 0x18006d3e	// 18006d3e <hgspi_v3_irq_handler+0x136>
                dev->spi_tx_done = 1;
18006d34:	3201      	movi      	r2, 1
18006d36:	c4625c00 	ins      	r3, r2, 0, 0
18006d3a:	dc64003a 	st.b      	r3, (r4, 0x3a)
            if (!dev->spi_rx_async) {
18006d3e:	d864003a 	ld.b      	r3, (r4, 0x3a)
18006d42:	e4432020 	andi      	r2, r3, 32
18006d46:	e9220007 	bnez      	r2, 0x18006d54	// 18006d54 <hgspi_v3_irq_handler+0x14c>
                dev->spi_rx_done = 1;
18006d4a:	3201      	movi      	r2, 1
18006d4c:	c4625c01 	ins      	r3, r2, 1, 1
18006d50:	dc64003a 	st.b      	r3, (r4, 0x3a)
    if ((hw->CON0 & LL_SPI_CON0_SLAVE_WRDATA_IE_EN) && (hw->STA1 & LL_SPI_STA_SLAVE_WRDATA_PENDING)) {
18006d54:	3280      	movi      	r2, 128
18006d56:	9560      	ld.w      	r3, (r5, 0x0)
18006d58:	424e      	lsli      	r2, r2, 14
18006d5a:	68c8      	and      	r3, r2
18006d5c:	e903000f 	bez      	r3, 0x18006d7a	// 18006d7a <hgspi_v3_irq_handler+0x172>
18006d60:	3380      	movi      	r3, 128
18006d62:	954a      	ld.w      	r2, (r5, 0x28)
18006d64:	4365      	lsli      	r3, r3, 5
18006d66:	688c      	and      	r2, r3
18006d68:	e9020009 	bez      	r2, 0x18006d7a	// 18006d7a <hgspi_v3_irq_handler+0x172>
        hw->STA1 = LL_SPI_STA_SLAVE_WRDATA_PENDING;
18006d6c:	b56a      	st.w      	r3, (r5, 0x28)
        if (dev->irq_hdl) {
18006d6e:	9465      	ld.w      	r3, (r4, 0x14)
18006d70:	e9030005 	bez      	r3, 0x18006d7a	// 18006d7a <hgspi_v3_irq_handler+0x172>
            dev->irq_hdl(SPI_IRQ_FLAG_RX_DONE, dev->irq_data);
18006d74:	9426      	ld.w      	r1, (r4, 0x18)
18006d76:	3002      	movi      	r0, 2
18006d78:	7bcd      	jsr      	r3
    if ((hw->CON0 & LL_SPI_CON0_SLAVE_RDDATA_IE_EN) && (hw->STA1 & LL_SPI_STA_SLAVE_RDDATA_PENDING)) {
18006d7a:	3280      	movi      	r2, 128
18006d7c:	9560      	ld.w      	r3, (r5, 0x0)
18006d7e:	424f      	lsli      	r2, r2, 15
18006d80:	68c8      	and      	r3, r2
18006d82:	e903000f 	bez      	r3, 0x18006da0	// 18006da0 <hgspi_v3_irq_handler+0x198>
18006d86:	3380      	movi      	r3, 128
18006d88:	954a      	ld.w      	r2, (r5, 0x28)
18006d8a:	4366      	lsli      	r3, r3, 6
18006d8c:	688c      	and      	r2, r3
18006d8e:	e9020009 	bez      	r2, 0x18006da0	// 18006da0 <hgspi_v3_irq_handler+0x198>
        hw->STA1 = LL_SPI_STA_SLAVE_RDDATA_PENDING;
18006d92:	b56a      	st.w      	r3, (r5, 0x28)
        if (dev->irq_hdl) {
18006d94:	9465      	ld.w      	r3, (r4, 0x14)
18006d96:	e9030005 	bez      	r3, 0x18006da0	// 18006da0 <hgspi_v3_irq_handler+0x198>
            dev->irq_hdl(SPI_IRQ_FLAG_TX_DONE, dev->irq_data);
18006d9a:	9426      	ld.w      	r1, (r4, 0x18)
18006d9c:	3001      	movi      	r0, 1
18006d9e:	7bcd      	jsr      	r3
    if ((hw->CON0 & LL_SPI_CON0_SLAVE_RDSTATUS_IE_EN) && (hw->STA1 & LL_SPI_STA_SLAVE_RDSTATUS_PENDING)) {
18006da0:	3280      	movi      	r2, 128
18006da2:	9560      	ld.w      	r3, (r5, 0x0)
18006da4:	4250      	lsli      	r2, r2, 16
18006da6:	68c8      	and      	r3, r2
18006da8:	e903000f 	bez      	r3, 0x18006dc6	// 18006dc6 <hgspi_v3_irq_handler+0x1be>
18006dac:	3380      	movi      	r3, 128
18006dae:	954a      	ld.w      	r2, (r5, 0x28)
18006db0:	4367      	lsli      	r3, r3, 7
18006db2:	688c      	and      	r2, r3
18006db4:	e9020009 	bez      	r2, 0x18006dc6	// 18006dc6 <hgspi_v3_irq_handler+0x1be>
        hw->STA1 = LL_SPI_STA_SLAVE_RDSTATUS_PENDING;
18006db8:	b56a      	st.w      	r3, (r5, 0x28)
        if (dev->irq_hdl) {
18006dba:	9465      	ld.w      	r3, (r4, 0x14)
18006dbc:	e9030005 	bez      	r3, 0x18006dc6	// 18006dc6 <hgspi_v3_irq_handler+0x1be>
            dev->irq_hdl(SPI_IRQ_FLAG_SLAVE_FSM_READ_STATUS, dev->irq_data);
18006dc0:	9426      	ld.w      	r1, (r4, 0x18)
18006dc2:	3010      	movi      	r0, 16
18006dc4:	7bcd      	jsr      	r3
    if ((hw->CON0 & LL_SPI_CON0_SLAVE_WRONG_CMD_IE) && (hw->STA1 & LL_SPI_STA_SLAVE_WRONG_CMD_PENDING)) {
18006dc6:	3280      	movi      	r2, 128
18006dc8:	9560      	ld.w      	r3, (r5, 0x0)
18006dca:	4252      	lsli      	r2, r2, 18
18006dcc:	68c8      	and      	r3, r2
18006dce:	e903000f 	bez      	r3, 0x18006dec	// 18006dec <hgspi_v3_irq_handler+0x1e4>
18006dd2:	3380      	movi      	r3, 128
18006dd4:	954a      	ld.w      	r2, (r5, 0x28)
18006dd6:	4369      	lsli      	r3, r3, 9
18006dd8:	688c      	and      	r2, r3
18006dda:	e9020009 	bez      	r2, 0x18006dec	// 18006dec <hgspi_v3_irq_handler+0x1e4>
        hw->STA1 = LL_SPI_STA_SLAVE_WRONG_CMD_PENDING;
18006dde:	b56a      	st.w      	r3, (r5, 0x28)
        if (dev->irq_hdl) {
18006de0:	9465      	ld.w      	r3, (r4, 0x14)
18006de2:	e9030005 	bez      	r3, 0x18006dec	// 18006dec <hgspi_v3_irq_handler+0x1e4>
            dev->irq_hdl(SPI_IRQ_FLAG_SLAVE_FSM_WRONG_CMD, dev->irq_data);
18006de6:	9426      	ld.w      	r1, (r4, 0x18)
18006de8:	3020      	movi      	r0, 32
18006dea:	7bcd      	jsr      	r3
}
18006dec:	1492      	pop      	r4-r5, r15
            if (dev->irq_hdl && dev->spi_irq_flag_rx_done) {
18006dee:	e903ff61 	bez      	r3, 0x18006cb0	// 18006cb0 <hgspi_v3_irq_handler+0xa8>
18006df2:	d844003a 	ld.b      	r2, (r4, 0x3a)
18006df6:	e4422008 	andi      	r2, r2, 8
18006dfa:	e902ff5b 	bez      	r2, 0x18006cb0	// 18006cb0 <hgspi_v3_irq_handler+0xa8>
                dev->irq_hdl(SPI_IRQ_FLAG_RX_DONE, dev->irq_data);
18006dfe:	9426      	ld.w      	r1, (r4, 0x18)
18006e00:	3002      	movi      	r0, 2
18006e02:	0756      	br      	0x18006cae	// 18006cae <hgspi_v3_irq_handler+0xa6>

18006e04 <hgspi_v3_close>:
static int32 hgspi_v3_close(struct spi_device *p_spi) {
18006e04:	14d2      	push      	r4-r5, r15
    if (!dev->opened) {
18006e06:	d860003a 	ld.b      	r3, (r0, 0x3a)
18006e0a:	e4632040 	andi      	r3, r3, 64
static int32 hgspi_v3_close(struct spi_device *p_spi) {
18006e0e:	6d03      	mov      	r4, r0
    if (!dev->opened) {
18006e10:	e903002c 	bez      	r3, 0x18006e68	// 18006e68 <hgspi_v3_close+0x64>
    struct hgspi_v3_hw *hw = (struct hgspi_v3_hw *)dev->hw;
18006e14:	90a3      	ld.w      	r5, (r0, 0xc)
    if (SPI0_BASE == (uint32)hw) {
18006e16:	ea034400 	movi      	r3, 17408
18006e1a:	3bbe      	bseti      	r3, 30
18006e1c:	64d6      	cmpne      	r5, r3
18006e1e:	0827      	bt      	0x18006e6c	// 18006e6c <hgspi_v3_close+0x68>
        sysctrl_spi0_clk_close();
18006e20:	ea224002 	movih      	r2, 16386
18006e24:	9273      	ld.w      	r3, (r2, 0x4c)
18006e26:	3b85      	bclri      	r3, 5
        sysctrl_spi2_clk_close();
18006e28:	b273      	st.w      	r3, (r2, 0x4c)
    IRQn &= 0x7FUL;
18006e2a:	9464      	ld.w      	r3, (r4, 0x10)
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
18006e2c:	c4a354c2 	zext      	r2, r3, 6, 5
18006e30:	3101      	movi      	r1, 1
18006e32:	e463201f 	andi      	r3, r3, 31
18006e36:	c4614023 	lsl      	r3, r1, r3
18006e3a:	221f      	addi      	r2, 32
18006e3c:	1036      	lrw      	r1, 0xe000e100	// 18006e94 <hgspi_v3_close+0x90>
18006e3e:	d4410883 	str.w      	r3, (r1, r2 << 2)
    pin_func(p_spi->dev.dev_id, 0);
18006e42:	9400      	ld.w      	r0, (r4, 0x0)
18006e44:	3100      	movi      	r1, 0
18006e46:	e3ffe971 	bsr      	0x18004128	// 18004128 <pin_func>
        p_spi->CON0 |= LL_SPI_CON0_NSS_HIGH;
18006e4a:	9560      	ld.w      	r3, (r5, 0x0)
18006e4c:	ec630800 	ori      	r3, r3, 2048
18006e50:	b560      	st.w      	r3, (r5, 0x0)
    p_spi->CON1 &= ~LL_SPI_CON1_SSP_EN;
18006e52:	9561      	ld.w      	r3, (r5, 0x4)
18006e54:	3b80      	bclri      	r3, 0
18006e56:	b561      	st.w      	r3, (r5, 0x4)
    dev->len_threshold        = 16;
18006e58:	3310      	movi      	r3, 16
18006e5a:	ac7c      	st.h      	r3, (r4, 0x38)
    dev->spi_rx_async         = 0;
18006e5c:	3300      	movi      	r3, 0
18006e5e:	dc64003a 	st.b      	r3, (r4, 0x3a)
    dev->timeout              = osWaitForever;
18006e62:	3300      	movi      	r3, 0
18006e64:	2b00      	subi      	r3, 1
18006e66:	b46d      	st.w      	r3, (r4, 0x34)
}
18006e68:	3000      	movi      	r0, 0
18006e6a:	1492      	pop      	r4-r5, r15
    } else if (SPI1_BASE == (uint32)hw) {
18006e6c:	ea034500 	movi      	r3, 17664
18006e70:	3bbe      	bseti      	r3, 30
18006e72:	64d6      	cmpne      	r5, r3
18006e74:	0806      	bt      	0x18006e80	// 18006e80 <hgspi_v3_close+0x7c>
        sysctrl_spi1_clk_close();
18006e76:	ea224002 	movih      	r2, 16386
18006e7a:	9273      	ld.w      	r3, (r2, 0x4c)
18006e7c:	3b86      	bclri      	r3, 6
18006e7e:	07d5      	br      	0x18006e28	// 18006e28 <hgspi_v3_close+0x24>
    } else if (SPI2_BASE == (uint32)hw) {
18006e80:	ea034600 	movi      	r3, 17920
18006e84:	3bbe      	bseti      	r3, 30
18006e86:	64d6      	cmpne      	r5, r3
18006e88:	0bd1      	bt      	0x18006e2a	// 18006e2a <hgspi_v3_close+0x26>
        sysctrl_spi2_clk_close();
18006e8a:	ea224002 	movih      	r2, 16386
18006e8e:	9273      	ld.w      	r3, (r2, 0x4c)
18006e90:	3b87      	bclri      	r3, 7
18006e92:	07cb      	br      	0x18006e28	// 18006e28 <hgspi_v3_close+0x24>
18006e94:	e000e100 	.long	0xe000e100

18006e98 <hgspi_v3_open>:
static int32 hgspi_v3_open(struct spi_device *p_spi, uint32 clk_freq, uint32 work_mode,uint32 wire_mode, uint32 clk_mode) {
18006e98:	14d7      	push      	r4-r10, r15
18006e9a:	6e03      	mov      	r8, r0
18006e9c:	6dc7      	mov      	r7, r1
    if (dev->opened) {
18006e9e:	d828003a 	ld.b      	r1, (r8, 0x3a)
18006ea2:	e5812040 	andi      	r12, r1, 64
static int32 hgspi_v3_open(struct spi_device *p_spi, uint32 clk_freq, uint32 work_mode,uint32 wire_mode, uint32 clk_mode) {
18006ea6:	9808      	ld.w      	r0, (r14, 0x20)
    struct hgspi_v3_hw *hw = (struct hgspi_v3_hw *)dev->hw;
18006ea8:	d8882003 	ld.w      	r4, (r8, 0xc)
    if (dev->opened) {
18006eac:	e90c0005 	bez      	r12, 0x18006eb6	// 18006eb6 <hgspi_v3_open+0x1e>
        if (!dev->dsleep) {
18006eb0:	7446      	sextb      	r1, r1
18006eb2:	e9a100bf 	bhsz      	r1, 0x18007030	// 18007030 <hgspi_v3_open+0x198>
18006eb6:	3a02      	cmphsi      	r2, 3
18006eb8:	089a      	bt      	0x18006fec	// 18006fec <hgspi_v3_open+0x154>
18006eba:	1323      	lrw      	r1, 0x18016964	// 18007044 <hgspi_v3_open+0x1ac>
18006ebc:	d0411029 	ldr.bs      	r9, (r1, r2 << 0)
18006ec0:	3b03      	cmphsi      	r3, 4
18006ec2:	089a      	bt      	0x18006ff6	// 18006ff6 <hgspi_v3_open+0x15e>
18006ec4:	1341      	lrw      	r2, 0x18016967	// 18007048 <hgspi_v3_open+0x1b0>
18006ec6:	d0621026 	ldr.bs      	r6, (r2, r3 << 0)
18006eca:	3803      	cmphsi      	r0, 4
18006ecc:	3200      	movi      	r2, 0
18006ece:	2a00      	subi      	r2, 1
18006ed0:	0896      	bt      	0x18006ffc	// 18006ffc <hgspi_v3_open+0x164>
18006ed2:	127f      	lrw      	r3, 0x1801696b	// 1800704c <hgspi_v3_open+0x1b4>
18006ed4:	d003102a 	ldr.bs      	r10, (r3, r0 << 0)
    if (((-1) == work_mode_to_reg) || \
18006ed8:	64a6      	cmpne      	r9, r2
18006eda:	0cae      	bf      	0x18007036	// 18007036 <hgspi_v3_open+0x19e>
18006edc:	649a      	cmpne      	r6, r2
18006ede:	0cac      	bf      	0x18007036	// 18007036 <hgspi_v3_open+0x19e>
        ((-1) == wire_mode_to_reg) || \
18006ee0:	64aa      	cmpne      	r10, r2
18006ee2:	0caa      	bf      	0x18007036	// 18007036 <hgspi_v3_open+0x19e>
    if(pin_func(p_spi->dev.dev_id, 1) != RET_OK) {
18006ee4:	3101      	movi      	r1, 1
18006ee6:	d8082000 	ld.w      	r0, (r8, 0x0)
18006eea:	e3ffe91f 	bsr      	0x18004128	// 18004128 <pin_func>
18006eee:	6d43      	mov      	r5, r0
18006ef0:	e92000a6 	bnez      	r0, 0x1800703c	// 1800703c <hgspi_v3_open+0x1a4>
    if (SPI0_BASE == (uint32)hw) {
18006ef4:	ea034400 	movi      	r3, 17408
18006ef8:	3bbe      	bseti      	r3, 30
18006efa:	64d2      	cmpne      	r4, r3
18006efc:	0882      	bt      	0x18007000	// 18007000 <hgspi_v3_open+0x168>
        sysctrl_spi0_clk_open();
18006efe:	ea224002 	movih      	r2, 16386
18006f02:	9273      	ld.w      	r3, (r2, 0x4c)
18006f04:	ec630020 	ori      	r3, r3, 32
        sysctrl_spi2_clk_open();
18006f08:	b273      	st.w      	r3, (r2, 0x4c)
    hw->CON0     = 0;
18006f0a:	3200      	movi      	r2, 0
18006f0c:	b440      	st.w      	r2, (r4, 0x0)
    hw->CON1     = 0;
18006f0e:	b441      	st.w      	r2, (r4, 0x4)
    hw->TIMECON  = 0;
18006f10:	b443      	st.w      	r2, (r4, 0xc)
    hw->TDMALEN  = 0;
18006f12:	b444      	st.w      	r2, (r4, 0x10)
    hw->RDMALEN  = 0;
18006f14:	b445      	st.w      	r2, (r4, 0x14)
    hw->TSTADR   = 0;
18006f16:	b448      	st.w      	r2, (r4, 0x20)
    hw->RSTADR   = 0;
18006f18:	b449      	st.w      	r2, (r4, 0x24)
    hw->SLAVESTA = 0;
18006f1a:	b44c      	st.w      	r2, (r4, 0x30)
    p_spi->CON1 &= ~LL_SPI_CON1_SSP_EN;
18006f1c:	9461      	ld.w      	r3, (r4, 0x4)
18006f1e:	3b80      	bclri      	r3, 0
18006f20:	b461      	st.w      	r3, (r4, 0x4)
               LL_SPI_CON0_WIRE_MODE(wire_mode_to_reg)                        | //wire mode
18006f22:	4662      	lsli      	r3, r6, 2
               ((work_mode_to_reg == 2) ? (LL_SPI_CON0_SLAVE_STATE_EN):(0UL)) | //slave fsm mode
18006f24:	eb490002 	cmpnei      	r9, 2
               LL_SPI_CON0_WIRE_MODE(wire_mode_to_reg)                        | //wire mode
18006f28:	e463201c 	andi      	r3, r3, 28
    con0_reg = LL_SPI_CON0_SPI_MODE(clk_mode_to_reg  )                        | //clk mode
18006f2c:	e54a2003 	andi      	r10, r10, 3
18006f30:	3185      	movi      	r1, 133
               ((work_mode_to_reg == 2) ? (LL_SPI_CON0_SLAVE_STATE_EN):(0UL)) | //slave fsm mode
18006f32:	6483      	mvcv      	r2
    con0_reg = LL_SPI_CON0_SPI_MODE(clk_mode_to_reg  )                        | //clk mode
18006f34:	6ce8      	or      	r3, r10
18006f36:	412a      	lsli      	r1, r1, 10
    con1_reg = LL_SPI_CON1_SPI_I2C_SEL(0x0)                                   |
18006f38:	eb490002 	cmpnei      	r9, 2
               ((work_mode_to_reg == 2) ? (LL_SPI_CON0_SLAVE_STATE_EN):(0UL)) | //slave fsm mode
18006f3c:	4254      	lsli      	r2, r2, 20
    con0_reg = LL_SPI_CON0_SPI_MODE(clk_mode_to_reg  )                        | //clk mode
18006f3e:	6cc4      	or      	r3, r1
18006f40:	6cc8      	or      	r3, r2
    con1_reg = LL_SPI_CON1_SPI_I2C_SEL(0x0)                                   |
18006f42:	0c75      	bf      	0x1800702c	// 1800702c <hgspi_v3_open+0x194>
               ((work_mode_to_reg == 2) ? (LL_SPI_CON1_MODE(1)) : LL_SPI_CON1_MODE(work_mode_to_reg));
18006f44:	c4494822 	lsli      	r2, r9, 2
    con1_reg = LL_SPI_CON1_SPI_I2C_SEL(0x0)                                   |
18006f48:	e4422004 	andi      	r2, r2, 4
    hw->CON0 = con0_reg  ;
18006f4c:	b460      	st.w      	r3, (r4, 0x0)
    hw->STA1 = 0xFFFFFFFF;
18006f4e:	3300      	movi      	r3, 0
18006f50:	2b00      	subi      	r3, 1
    hw->CON1 = con1_reg  ;
18006f52:	b441      	st.w      	r2, (r4, 0x4)
    hw->STA1 = 0xFFFFFFFF;
18006f54:	b46a      	st.w      	r3, (r4, 0x28)
    if (work_mode_to_reg == 0) {
18006f56:	e929001a 	bnez      	r9, 0x18006f8a	// 18006f8a <hgspi_v3_open+0xf2>
        clk_div_cnt = peripheral_clock_get(HG_APB0_PT_SPI0) / 2 / clk_freq - 1;
18006f5a:	3013      	movi      	r0, 19
18006f5c:	e0005128 	bsr      	0x180111ac	// 180111ac <peripheral_clock_get>
18006f60:	4801      	lsri      	r0, r0, 1
18006f62:	c4e08027 	divu      	r7, r0, r7
18006f66:	2f00      	subi      	r7, 1
        ASSERT((clk_div_cnt >= 0) && (clk_div_cnt <= 65535));
18006f68:	eb07ffff 	cmphsi      	r7, 65536
18006f6c:	0c07      	bf      	0x18006f7a	// 18006f7a <hgspi_v3_open+0xe2>
18006f6e:	1159      	lrw      	r2, 0x1801697d	// 18007050 <hgspi_v3_open+0x1b8>
18006f70:	ea01029b 	movi      	r1, 667
18006f74:	1118      	lrw      	r0, 0x1801696f	// 18007054 <hgspi_v3_open+0x1bc>
18006f76:	e3ffe04f 	bsr      	0x18003014	// 18003014 <assert_internal>
        hw->TIMECON = (hw->TIMECON &~ (LL_SPI_TIMECON_BAUD(0xFFFF))) | LL_SPI_TIMECON_BAUD(clk_div_cnt);
18006f7a:	9463      	ld.w      	r3, (r4, 0xc)
18006f7c:	ea22ffff 	movih      	r2, 65535
18006f80:	68c8      	and      	r3, r2
18006f82:	c40755e7 	zext      	r7, r7, 15, 0
18006f86:	6dcc      	or      	r7, r3
18006f88:	b4e3      	st.w      	r7, (r4, 0xc)
    if (!(hw->CON0 & LL_SPI_CON0_SLAVE_STATE_EN)) {
18006f8a:	3280      	movi      	r2, 128
18006f8c:	9460      	ld.w      	r3, (r4, 0x0)
18006f8e:	424d      	lsli      	r2, r2, 13
18006f90:	68c8      	and      	r3, r2
18006f92:	e9230006 	bnez      	r3, 0x18006f9e	// 18006f9e <hgspi_v3_open+0x106>
        hw->CON1 |= LL_SPI_CON1_DMA_IE_EN;
18006f96:	9461      	ld.w      	r3, (r4, 0x4)
18006f98:	ec630200 	ori      	r3, r3, 512
18006f9c:	b461      	st.w      	r3, (r4, 0x4)
    IRQn &= 0x7FUL;
18006f9e:	d8682004 	ld.w      	r3, (r8, 0x10)
    VIC->ISER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
18006fa2:	3201      	movi      	r2, 1
18006fa4:	c4a354c0 	zext      	r0, r3, 6, 5
18006fa8:	e463201f 	andi      	r3, r3, 31
18006fac:	c4624023 	lsl      	r3, r2, r3
18006fb0:	112a      	lrw      	r1, 0xe000e100	// 18007058 <hgspi_v3_open+0x1c0>
18006fb2:	d4010883 	str.w      	r3, (r1, r0 << 2)
        p_spi->CON0 |= LL_SPI_CON0_NSS_HIGH;
18006fb6:	9460      	ld.w      	r3, (r4, 0x0)
18006fb8:	ec630800 	ori      	r3, r3, 2048
18006fbc:	b460      	st.w      	r3, (r4, 0x0)
    p_spi->CON1 |= LL_SPI_CON1_SSP_EN;
18006fbe:	9461      	ld.w      	r3, (r4, 0x4)
18006fc0:	6cc8      	or      	r3, r2
18006fc2:	b461      	st.w      	r3, (r4, 0x4)
    dev->opened = 1;
18006fc4:	d868003a 	ld.b      	r3, (r8, 0x3a)
18006fc8:	c4625c06 	ins      	r3, r2, 6, 6
    dev->len_threshold        = 16;
18006fcc:	3210      	movi      	r2, 16
18006fce:	dc48101c 	st.h      	r2, (r8, 0x38)
    dev->spi_rx_async         = 0;
18006fd2:	e4632060 	andi      	r3, r3, 96
18006fd6:	3200      	movi      	r2, 0
18006fd8:	c4625c05 	ins      	r3, r2, 5, 5
18006fdc:	dc68003a 	st.b      	r3, (r8, 0x3a)
    dev->timeout              = osWaitForever;
18006fe0:	3300      	movi      	r3, 0
18006fe2:	2b00      	subi      	r3, 1
18006fe4:	dc68200d 	st.w      	r3, (r8, 0x34)
}
18006fe8:	6c17      	mov      	r0, r5
18006fea:	1497      	pop      	r4-r10, r15
static int32 hgspi_v3_open(struct spi_device *p_spi, uint32 clk_freq, uint32 work_mode,uint32 wire_mode, uint32 clk_mode) {
18006fec:	ea090000 	movi      	r9, 0
18006ff0:	e5291000 	subi      	r9, r9, 1
18006ff4:	0766      	br      	0x18006ec0	// 18006ec0 <hgspi_v3_open+0x28>
18006ff6:	3600      	movi      	r6, 0
18006ff8:	2e00      	subi      	r6, 1
18006ffa:	0768      	br      	0x18006eca	// 18006eca <hgspi_v3_open+0x32>
18006ffc:	6e8b      	mov      	r10, r2
18006ffe:	076d      	br      	0x18006ed8	// 18006ed8 <hgspi_v3_open+0x40>
    } else if (SPI1_BASE == (uint32)hw) {
18007000:	ea034500 	movi      	r3, 17664
18007004:	3bbe      	bseti      	r3, 30
18007006:	64d2      	cmpne      	r4, r3
18007008:	0807      	bt      	0x18007016	// 18007016 <hgspi_v3_open+0x17e>
        sysctrl_spi1_clk_open();
1800700a:	ea224002 	movih      	r2, 16386
1800700e:	9273      	ld.w      	r3, (r2, 0x4c)
18007010:	ec630040 	ori      	r3, r3, 64
18007014:	077a      	br      	0x18006f08	// 18006f08 <hgspi_v3_open+0x70>
    } else if (SPI2_BASE == (uint32)hw) {
18007016:	ea034600 	movi      	r3, 17920
1800701a:	3bbe      	bseti      	r3, 30
1800701c:	64d2      	cmpne      	r4, r3
1800701e:	0b76      	bt      	0x18006f0a	// 18006f0a <hgspi_v3_open+0x72>
        sysctrl_spi2_clk_open();
18007020:	ea224002 	movih      	r2, 16386
18007024:	9273      	ld.w      	r3, (r2, 0x4c)
18007026:	ec630080 	ori      	r3, r3, 128
1800702a:	076f      	br      	0x18006f08	// 18006f08 <hgspi_v3_open+0x70>
    con1_reg = LL_SPI_CON1_SPI_I2C_SEL(0x0)                                   |
1800702c:	3204      	movi      	r2, 4
1800702e:	078f      	br      	0x18006f4c	// 18006f4c <hgspi_v3_open+0xb4>
            return -EBUSY;
18007030:	3500      	movi      	r5, 0
18007032:	2d0f      	subi      	r5, 16
18007034:	07da      	br      	0x18006fe8	// 18006fe8 <hgspi_v3_open+0x150>
        return -EINVAL;
18007036:	3500      	movi      	r5, 0
18007038:	2d15      	subi      	r5, 22
1800703a:	07d7      	br      	0x18006fe8	// 18006fe8 <hgspi_v3_open+0x150>
        return RET_ERR;
1800703c:	3500      	movi      	r5, 0
1800703e:	2d00      	subi      	r5, 1
18007040:	07d4      	br      	0x18006fe8	// 18006fe8 <hgspi_v3_open+0x150>
18007042:	0000      	.short	0x0000
18007044:	18016964 	.long	0x18016964
18007048:	18016967 	.long	0x18016967
1800704c:	1801696b 	.long	0x1801696b
18007050:	1801697d 	.long	0x1801697d
18007054:	1801696f 	.long	0x1801696f
18007058:	e000e100 	.long	0xe000e100

1800705c <hgspi_v3_write>:
static int32 hgspi_v3_write(struct spi_device *p_spi, const void *buf, uint32 size) {
1800705c:	14d6      	push      	r4-r9, r15
    if ((!dev->opened) || (dev->dsleep)) {
1800705e:	d860003a 	ld.b      	r3, (r0, 0x3a)
18007062:	e46320c0 	andi      	r3, r3, 192
18007066:	eb430040 	cmpnei      	r3, 64
static int32 hgspi_v3_write(struct spi_device *p_spi, const void *buf, uint32 size) {
1800706a:	6d83      	mov      	r6, r0
1800706c:	6dc7      	mov      	r7, r1
1800706e:	6d4b      	mov      	r5, r2
    struct hgspi_v3_hw *hw = (struct hgspi_v3_hw *)dev->hw;
18007070:	9083      	ld.w      	r4, (r0, 0xc)
    if ((!dev->opened) || (dev->dsleep)) {
18007072:	08aa      	bt      	0x180071c6	// 180071c6 <hgspi_v3_write+0x16a>
    if (hw->CON0 & LL_SPI_CON0_SLAVE_STATE_EN) {
18007074:	3380      	movi      	r3, 128
18007076:	d9242000 	ld.w      	r9, (r4, 0x0)
1800707a:	436d      	lsli      	r3, r3, 13
1800707c:	6a4c      	and      	r9, r3
1800707e:	e9090017 	bez      	r9, 0x180070ac	// 180070ac <hgspi_v3_write+0x50>
        hw->TDMACNT = 0;
18007082:	3000      	movi      	r0, 0
18007084:	b406      	st.w      	r0, (r4, 0x18)
        hw->TDMALEN = size;
18007086:	b444      	st.w      	r2, (r4, 0x10)
        hw->TSTADR  = (uint32)buf;
18007088:	b428      	st.w      	r1, (r4, 0x20)
    p_spi->SLAVESTA &= ~ LL_SPI_SLAVE_STA_RX_LEN(0xFF);
1800708a:	946c      	ld.w      	r3, (r4, 0x30)
1800708c:	ea02ff00 	movi      	r2, 65280
18007090:	6c8a      	nor      	r2, r2
18007092:	68c8      	and      	r3, r2
18007094:	b46c      	st.w      	r3, (r4, 0x30)
        hgspi_v3_spi_slave_fsm_set_tx_ready_sta(hw, size/8);
18007096:	4d63      	lsri      	r3, r5, 3
    p_spi->SLAVESTA |=   LL_SPI_SLAVE_STA_RX_LEN(len - 1)     |
18007098:	2b00      	subi      	r3, 1
1800709a:	4368      	lsli      	r3, r3, 8
1800709c:	c40355e3 	zext      	r3, r3, 15, 0
180070a0:	944c      	ld.w      	r2, (r4, 0x30)
180070a2:	ec630082 	ori      	r3, r3, 130
180070a6:	6cc8      	or      	r3, r2
180070a8:	b46c      	st.w      	r3, (r4, 0x30)
}
180070aa:	1496      	pop      	r4-r9, r15
    os_mutex_lock(&dev->os_spi_lock, osWaitForever);
180070ac:	e500001b 	addi      	r8, r0, 28
180070b0:	3100      	movi      	r1, 0
180070b2:	2900      	subi      	r1, 1
180070b4:	6c23      	mov      	r0, r8
180070b6:	e00069ab 	bsr      	0x1801440c	// 1801440c <os_mutex_lock>
    hw->STA1 = LL_SPI_STA_NSS_POS_PENDING;
180070ba:	3320      	movi      	r3, 32
180070bc:	b46a      	st.w      	r3, (r4, 0x28)
    hw->STA1 = LL_SPI_STA_CLEAR_BUF_CNT;
180070be:	3380      	movi      	r3, 128
180070c0:	4362      	lsli      	r3, r3, 2
    hw->TDMACNT = 0;
180070c2:	dd242006 	st.w      	r9, (r4, 0x18)
    hw->STA1 = LL_SPI_STA_CLEAR_BUF_CNT;
180070c6:	b46a      	st.w      	r3, (r4, 0x28)
    dev->spi_tx_done  = 0;
180070c8:	d866003a 	ld.b      	r3, (r6, 0x3a)
    dev->spi_tx_async = 0;
180070cc:	e46320fe 	andi      	r3, r3, 254
180070d0:	c4695c04 	ins      	r3, r9, 4, 4
180070d4:	dc66003a 	st.b      	r3, (r6, 0x3a)
    p_spi->CON1 |= LL_SPI_CON1_TX_EN;
180070d8:	9461      	ld.w      	r3, (r4, 0x4)
180070da:	ec630008 	ori      	r3, r3, 8
180070de:	b461      	st.w      	r3, (r4, 0x4)
    if ((size <= dev->len_threshold) && (!__in_interrupt())) {
180070e0:	8e7c      	ld.h      	r3, (r6, 0x38)
180070e2:	654c      	cmphs      	r3, r5
180070e4:	0c59      	bf      	0x18007196	// 18007196 <hgspi_v3_write+0x13a>
    __ASM volatile("mfcr %0, psr" : "=r"(result) : : "memory");
180070e6:	c0006023 	mfcr      	r3, cr<0, 0>
    return (result&0x00ff0000);
180070ea:	32ff      	movi      	r2, 255
180070ec:	4250      	lsli      	r2, r2, 16
180070ee:	68c8      	and      	r3, r2
180070f0:	e9230053 	bnez      	r3, 0x18007196	// 18007196 <hgspi_v3_write+0x13a>
        if (hw->CON1 & LL_SPI_CON1_MODE(1)) {
180070f4:	9461      	ld.w      	r3, (r4, 0x4)
180070f6:	e4632004 	andi      	r3, r3, 4
180070fa:	e923004e 	bnez      	r3, 0x18007196	// 18007196 <hgspi_v3_write+0x13a>
        frame_size = LL_SPI_CON0_GET_FRAME_SIZE(hw->CON0);
180070fe:	9440      	ld.w      	r2, (r4, 0x0)
18007100:	c5c25662 	zext      	r2, r2, 19, 14
        index      = (frame_size > 8) + (frame_size > 16);
18007104:	3a08      	cmphsi      	r2, 9
18007106:	c4000503 	mvc      	r3
1800710a:	3a10      	cmphsi      	r2, 17
1800710c:	c4000502 	mvc      	r2
18007110:	60c8      	addu      	r3, r2
        while(num--) {
18007112:	3000      	movi      	r0, 0
            addr += 1<<index;
18007114:	3201      	movi      	r2, 1
        addr       = (uint32)buf;
18007116:	6c5f      	mov      	r1, r7
        num        = size >> index;
18007118:	714d      	lsr      	r5, r3
            addr += 1<<index;
1800711a:	708c      	lsl      	r2, r3
        while(num--) {
1800711c:	2800      	subi      	r0, 1
1800711e:	2d00      	subi      	r5, 1
18007120:	6416      	cmpne      	r5, r0
18007122:	0824      	bt      	0x1800716a	// 1800716a <hgspi_v3_write+0x10e>
        if(!LL_SPI_CON1_GET_MODE(hw->CON1)) {
18007124:	9461      	ld.w      	r3, (r4, 0x4)
18007126:	c4435443 	zext      	r3, r3, 2, 2
1800712a:	e923000c 	bnez      	r3, 0x18007142	// 18007142 <hgspi_v3_write+0xe6>
    return ((p_spi->STA1 & LL_SPI_STA_BUF_EMPTY_PENDING) != 0);
1800712e:	946a      	ld.w      	r3, (r4, 0x28)
18007130:	e4632004 	andi      	r3, r3, 4
    while (!hgspi_v3_get_tx_fifo_empty(p_spi));
18007134:	e903fffd 	bez      	r3, 0x1800712e	// 1800712e <hgspi_v3_write+0xd2>
    return ((p_spi->STA1 & LL_SPI_STA_SSP_BUSY_PENDING) != 0);
18007138:	946a      	ld.w      	r3, (r4, 0x28)
1800713a:	e4632040 	andi      	r3, r3, 64
    while (hgspi_v3_get_busy(p_spi));
1800713e:	e923fffd 	bnez      	r3, 0x18007138	// 18007138 <hgspi_v3_write+0xdc>
        if (dev->spi_irq_flag_tx_done) {
18007142:	d866003a 	ld.b      	r3, (r6, 0x3a)
18007146:	e4632004 	andi      	r3, r3, 4
1800714a:	e9030008 	bez      	r3, 0x1800715a	// 1800715a <hgspi_v3_write+0xfe>
            if (dev->irq_hdl) {
1800714e:	9665      	ld.w      	r3, (r6, 0x14)
18007150:	e9030005 	bez      	r3, 0x1800715a	// 1800715a <hgspi_v3_write+0xfe>
                dev->irq_hdl(SPI_IRQ_FLAG_TX_DONE, dev->irq_data);
18007154:	9626      	ld.w      	r1, (r6, 0x18)
18007156:	3001      	movi      	r0, 1
18007158:	7bcd      	jsr      	r3
    hw->CON1 &= ~LL_SPI_CON1_DMA_EN;
1800715a:	9461      	ld.w      	r3, (r4, 0x4)
1800715c:	3b84      	bclri      	r3, 4
1800715e:	b461      	st.w      	r3, (r4, 0x4)
    os_mutex_unlock(&dev->os_spi_lock);
18007160:	6c23      	mov      	r0, r8
18007162:	e000696f 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
    return RET_OK;
18007166:	3000      	movi      	r0, 0
18007168:	07a1      	br      	0x180070aa	// 180070aa <hgspi_v3_write+0x4e>
            switch(index) {
1800716a:	e9030007 	bez      	r3, 0x18007178	// 18007178 <hgspi_v3_write+0x11c>
1800716e:	3b41      	cmpnei      	r3, 1
18007170:	0c10      	bf      	0x18007190	// 18007190 <hgspi_v3_write+0x134>
                    data = *(uint32 *)addr;
18007172:	d9812000 	ld.w      	r12, (r1, 0x0)
                    break;
18007176:	0403      	br      	0x1800717c	// 1800717c <hgspi_v3_write+0x120>
                    data = *(uint8  *)addr;
18007178:	d9810000 	ld.b      	r12, (r1, 0x0)
            addr += 1<<index;
1800717c:	6048      	addu      	r1, r2
    return (!(p_spi->STA1 & LL_SPI_STA_BUF_FULL_PENDING));
1800717e:	d9a4200a 	ld.w      	r13, (r4, 0x28)
18007182:	e5ad2002 	andi      	r13, r13, 2
            while(!hgspi_v3_get_tx_ready_sta(hw));
18007186:	e92dfffc 	bnez      	r13, 0x1800717e	// 1800717e <hgspi_v3_write+0x122>
    p_spi->CMD_DATA = data;
1800718a:	dd842002 	st.w      	r12, (r4, 0x8)
1800718e:	07c8      	br      	0x1800711e	// 1800711e <hgspi_v3_write+0xc2>
                    data = *(uint16 *)addr;
18007190:	d9811000 	ld.h      	r12, (r1, 0x0)
                    break;
18007194:	07f4      	br      	0x1800717c	// 1800717c <hgspi_v3_write+0x120>
        while (hw->STA1 & LL_SPI_STA_SSP_BUSY_PENDING);
18007196:	946a      	ld.w      	r3, (r4, 0x28)
18007198:	e4632040 	andi      	r3, r3, 64
1800719c:	e923fffd 	bnez      	r3, 0x18007196	// 18007196 <hgspi_v3_write+0x13a>
        dev->spi_tx_async = 1;
180071a0:	d866003a 	ld.b      	r3, (r6, 0x3a)
180071a4:	3201      	movi      	r2, 1
180071a6:	c4625c04 	ins      	r3, r2, 4, 4
180071aa:	dc66003a 	st.b      	r3, (r6, 0x3a)
        hw->TSTADR  = (uint32)buf;
180071ae:	b4e8      	st.w      	r7, (r4, 0x20)
        hw->TDMALEN = size;
180071b0:	b4a4      	st.w      	r5, (r4, 0x10)
        hw->CON1   |= LL_SPI_CON1_DMA_EN;
180071b2:	9461      	ld.w      	r3, (r4, 0x4)
180071b4:	ec630010 	ori      	r3, r3, 16
180071b8:	b461      	st.w      	r3, (r4, 0x4)
            os_sema_down(&dev->os_spi_tx_done, dev->timeout);
180071ba:	962d      	ld.w      	r1, (r6, 0x34)
180071bc:	e4060023 	addi      	r0, r6, 36
180071c0:	e000699c 	bsr      	0x180144f8	// 180144f8 <os_sema_down>
180071c4:	07cb      	br      	0x1800715a	// 1800715a <hgspi_v3_write+0xfe>
        return RET_ERR;
180071c6:	3000      	movi      	r0, 0
180071c8:	2800      	subi      	r0, 1
180071ca:	0770      	br      	0x180070aa	// 180070aa <hgspi_v3_write+0x4e>

180071cc <hgspi_v3_read>:
static int32 hgspi_v3_read(struct spi_device *p_spi, void *buf, uint32 size) {
180071cc:	14d6      	push      	r4-r9, r15
    if ((!dev->opened) || (dev->dsleep)) {
180071ce:	d860003a 	ld.b      	r3, (r0, 0x3a)
180071d2:	e46320c0 	andi      	r3, r3, 192
180071d6:	eb430040 	cmpnei      	r3, 64
static int32 hgspi_v3_read(struct spi_device *p_spi, void *buf, uint32 size) {
180071da:	6e43      	mov      	r9, r0
180071dc:	6d87      	mov      	r6, r1
180071de:	6d4b      	mov      	r5, r2
    struct hgspi_v3_hw *hw = (struct hgspi_v3_hw *)dev->hw;
180071e0:	9083      	ld.w      	r4, (r0, 0xc)
    if ((!dev->opened) || (dev->dsleep)) {
180071e2:	08a4      	bt      	0x1800732a	// 1800732a <hgspi_v3_read+0x15e>
    if (hw->CON0 & LL_SPI_CON0_SLAVE_STATE_EN) {
180071e4:	3380      	movi      	r3, 128
180071e6:	94e0      	ld.w      	r7, (r4, 0x0)
180071e8:	436d      	lsli      	r3, r3, 13
180071ea:	69cc      	and      	r7, r3
180071ec:	e9070018 	bez      	r7, 0x1800721c	// 1800721c <hgspi_v3_read+0x50>
        hw->RDMACNT = 0;
180071f0:	3000      	movi      	r0, 0
180071f2:	b407      	st.w      	r0, (r4, 0x1c)
        hw->RDMALEN = size;
180071f4:	b445      	st.w      	r2, (r4, 0x14)
        hw->RSTADR  = (uint32)buf;
180071f6:	b429      	st.w      	r1, (r4, 0x24)
    p_spi->SLAVESTA &= ~ LL_SPI_SLAVE_STA_TX_LEN(0xFF);
180071f8:	ea22ff01 	movih      	r2, 65281
180071fc:	946c      	ld.w      	r3, (r4, 0x30)
180071fe:	2a00      	subi      	r2, 1
18007200:	68c8      	and      	r3, r2
18007202:	b46c      	st.w      	r3, (r4, 0x30)
        hgspi_v3_spi_slave_fsm_set_rx_ready_sta(hw, size/8);
18007204:	4d63      	lsri      	r3, r5, 3
    p_spi->SLAVESTA |=   LL_SPI_SLAVE_STA_TX_LEN(len - 1)     |
18007206:	2b00      	subi      	r3, 1
18007208:	31ff      	movi      	r1, 255
1800720a:	4370      	lsli      	r3, r3, 16
1800720c:	4130      	lsli      	r1, r1, 16
1800720e:	68c4      	and      	r3, r1
18007210:	944c      	ld.w      	r2, (r4, 0x30)
18007212:	ec630041 	ori      	r3, r3, 65
18007216:	6cc8      	or      	r3, r2
18007218:	b46c      	st.w      	r3, (r4, 0x30)
}
1800721a:	1496      	pop      	r4-r9, r15
    os_mutex_lock(&dev->os_spi_lock, osWaitForever);
1800721c:	e500001b 	addi      	r8, r0, 28
18007220:	3100      	movi      	r1, 0
18007222:	2900      	subi      	r1, 1
18007224:	6c23      	mov      	r0, r8
18007226:	e00068f3 	bsr      	0x1801440c	// 1801440c <os_mutex_lock>
    hw->STA1 =  LL_SPI_STA_NSS_POS_PENDING;
1800722a:	3320      	movi      	r3, 32
1800722c:	b46a      	st.w      	r3, (r4, 0x28)
    hw->STA1 = LL_SPI_STA_CLEAR_BUF_CNT;
1800722e:	3380      	movi      	r3, 128
18007230:	4362      	lsli      	r3, r3, 2
    hw->RDMACNT = 0;
18007232:	b4e7      	st.w      	r7, (r4, 0x1c)
    hw->STA1 = LL_SPI_STA_CLEAR_BUF_CNT;
18007234:	b46a      	st.w      	r3, (r4, 0x28)
    dev->spi_rx_done  = 0;
18007236:	d869003a 	ld.b      	r3, (r9, 0x3a)
    dev->spi_rx_async = 0;
1800723a:	e46320fd 	andi      	r3, r3, 253
1800723e:	c4675c05 	ins      	r3, r7, 5, 5
18007242:	dc69003a 	st.b      	r3, (r9, 0x3a)
    p_spi->CON1 &= ~LL_SPI_CON1_TX_EN;
18007246:	9461      	ld.w      	r3, (r4, 0x4)
18007248:	3b83      	bclri      	r3, 3
1800724a:	b461      	st.w      	r3, (r4, 0x4)
    if ((size <= dev->len_threshold) && (!__in_interrupt())) {
1800724c:	d869101c 	ld.h      	r3, (r9, 0x38)
18007250:	654c      	cmphs      	r3, r5
18007252:	0c53      	bf      	0x180072f8	// 180072f8 <hgspi_v3_read+0x12c>
    __ASM volatile("mfcr %0, psr" : "=r"(result) : : "memory");
18007254:	c0006023 	mfcr      	r3, cr<0, 0>
    return (result&0x00ff0000);
18007258:	32ff      	movi      	r2, 255
1800725a:	4250      	lsli      	r2, r2, 16
1800725c:	68c8      	and      	r3, r2
1800725e:	e923004d 	bnez      	r3, 0x180072f8	// 180072f8 <hgspi_v3_read+0x12c>
        if (hw->CON1 & LL_SPI_CON1_MODE(1)) {
18007262:	9461      	ld.w      	r3, (r4, 0x4)
18007264:	e4632004 	andi      	r3, r3, 4
18007268:	e9230048 	bnez      	r3, 0x180072f8	// 180072f8 <hgspi_v3_read+0x12c>
        frame_size = LL_SPI_CON0_GET_FRAME_SIZE(hw->CON0);
1800726c:	9440      	ld.w      	r2, (r4, 0x0)
1800726e:	c5c25662 	zext      	r2, r2, 19, 14
        index      = (frame_size > 8) + (frame_size > 16);
18007272:	3a08      	cmphsi      	r2, 9
18007274:	c4000500 	mvc      	r0
18007278:	3a10      	cmphsi      	r2, 17
        if(!LL_SPI_CON1_GET_MODE(hw->CON1)) {
1800727a:	9441      	ld.w      	r2, (r4, 0x4)
        index      = (frame_size > 8) + (frame_size > 16);
1800727c:	c4000503 	mvc      	r3
        if(!LL_SPI_CON1_GET_MODE(hw->CON1)) {
18007280:	c4425442 	zext      	r2, r2, 2, 2
        index      = (frame_size > 8) + (frame_size > 16);
18007284:	60c0      	addu      	r3, r0
        addr       = (uint32)buf;
18007286:	6c5b      	mov      	r1, r6
        num        = size >> index;
18007288:	714d      	lsr      	r5, r3
        if(!LL_SPI_CON1_GET_MODE(hw->CON1)) {
1800728a:	e9220004 	bnez      	r2, 0x18007292	// 18007292 <hgspi_v3_read+0xc6>
            hw->RDMALEN = LL_SPI_DMA_RX_LEN(num);
1800728e:	b4a5      	st.w      	r5, (r4, 0x14)
    p_spi->CMD_DATA = data;
18007290:	b442      	st.w      	r2, (r4, 0x8)
            addr += 1<<index;
18007292:	3001      	movi      	r0, 1
        while(num--) {
18007294:	3200      	movi      	r2, 0
            addr += 1<<index;
18007296:	700c      	lsl      	r0, r3
        while(num--) {
18007298:	2a00      	subi      	r2, 1
1800729a:	2d00      	subi      	r5, 1
1800729c:	6496      	cmpne      	r5, r2
1800729e:	0817      	bt      	0x180072cc	// 180072cc <hgspi_v3_read+0x100>
        if (dev->spi_irq_flag_rx_done) {
180072a0:	d869003a 	ld.b      	r3, (r9, 0x3a)
180072a4:	e4632008 	andi      	r3, r3, 8
180072a8:	e903000a 	bez      	r3, 0x180072bc	// 180072bc <hgspi_v3_read+0xf0>
            if (dev->irq_hdl) {
180072ac:	d8692005 	ld.w      	r3, (r9, 0x14)
180072b0:	e9030006 	bez      	r3, 0x180072bc	// 180072bc <hgspi_v3_read+0xf0>
                dev->irq_hdl(SPI_IRQ_FLAG_RX_DONE, dev->irq_data);
180072b4:	d8292006 	ld.w      	r1, (r9, 0x18)
180072b8:	3002      	movi      	r0, 2
180072ba:	7bcd      	jsr      	r3
    hw->CON1 &= ~LL_SPI_CON1_DMA_EN;
180072bc:	9461      	ld.w      	r3, (r4, 0x4)
180072be:	3b84      	bclri      	r3, 4
180072c0:	b461      	st.w      	r3, (r4, 0x4)
    os_mutex_unlock(&dev->os_spi_lock);
180072c2:	6c23      	mov      	r0, r8
180072c4:	e00068be 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
    return RET_OK;
180072c8:	3000      	movi      	r0, 0
180072ca:	07a8      	br      	0x1800721a	// 1800721a <hgspi_v3_read+0x4e>
    return (!(p_spi->STA1 & LL_SPI_STA_BUF_EMPTY_PENDING));
180072cc:	d984200a 	ld.w      	r12, (r4, 0x28)
180072d0:	e58c2004 	andi      	r12, r12, 4
            while(!hgspi_v3_get_rx_ready_sta(hw));
180072d4:	e92cfffc 	bnez      	r12, 0x180072cc	// 180072cc <hgspi_v3_read+0x100>
    return (int32_t)p_spi->CMD_DATA;
180072d8:	d9842002 	ld.w      	r12, (r4, 0x8)
            switch(index) {
180072dc:	e9030007 	bez      	r3, 0x180072ea	// 180072ea <hgspi_v3_read+0x11e>
180072e0:	3b41      	cmpnei      	r3, 1
180072e2:	0c08      	bf      	0x180072f2	// 180072f2 <hgspi_v3_read+0x126>
                    *(uint32 *)addr = data;
180072e4:	dd812000 	st.w      	r12, (r1, 0x0)
                    break;
180072e8:	0403      	br      	0x180072ee	// 180072ee <hgspi_v3_read+0x122>
                    *(uint8 *)addr = data;
180072ea:	dd810000 	st.b      	r12, (r1, 0x0)
            addr += 1<<index;
180072ee:	6040      	addu      	r1, r0
180072f0:	07d5      	br      	0x1800729a	// 1800729a <hgspi_v3_read+0xce>
                    *(uint16 *)addr = data;
180072f2:	dd811000 	st.h      	r12, (r1, 0x0)
                    break;
180072f6:	07fc      	br      	0x180072ee	// 180072ee <hgspi_v3_read+0x122>
        while (hw->STA1 & LL_SPI_STA_SSP_BUSY_PENDING);
180072f8:	946a      	ld.w      	r3, (r4, 0x28)
180072fa:	e4632040 	andi      	r3, r3, 64
180072fe:	e923fffd 	bnez      	r3, 0x180072f8	// 180072f8 <hgspi_v3_read+0x12c>
        dev->spi_rx_async = 1;
18007302:	d869003a 	ld.b      	r3, (r9, 0x3a)
18007306:	3201      	movi      	r2, 1
18007308:	c4625c05 	ins      	r3, r2, 5, 5
1800730c:	dc69003a 	st.b      	r3, (r9, 0x3a)
        hw->RSTADR  = (uint32)buf;
18007310:	b4c9      	st.w      	r6, (r4, 0x24)
        hw->RDMALEN = size;
18007312:	b4a5      	st.w      	r5, (r4, 0x14)
        hw->CON1   |= LL_SPI_CON1_DMA_EN;
18007314:	9461      	ld.w      	r3, (r4, 0x4)
18007316:	ec630010 	ori      	r3, r3, 16
1800731a:	b461      	st.w      	r3, (r4, 0x4)
            os_sema_down(&dev->os_spi_rx_done, dev->timeout);
1800731c:	d829200d 	ld.w      	r1, (r9, 0x34)
18007320:	e409002b 	addi      	r0, r9, 44
18007324:	e00068ea 	bsr      	0x180144f8	// 180144f8 <os_sema_down>
18007328:	07ca      	br      	0x180072bc	// 180072bc <hgspi_v3_read+0xf0>
        return RET_ERR;
1800732a:	3000      	movi      	r0, 0
1800732c:	2800      	subi      	r0, 1
1800732e:	0776      	br      	0x1800721a	// 1800721a <hgspi_v3_read+0x4e>

18007330 <hgspi_v3_ioctl>:
    if ((!dev->opened) || (dev->dsleep)) {
18007330:	d9a0003a 	ld.b      	r13, (r0, 0x3a)
18007334:	e5ad20c0 	andi      	r13, r13, 192
18007338:	eb4d0040 	cmpnei      	r13, 64
    struct hgspi_v3_hw *hw = (struct hgspi_v3_hw *)dev->hw;
1800733c:	d9802003 	ld.w      	r12, (r0, 0xc)
    if ((!dev->opened) || (dev->dsleep)) {
18007340:	094b      	bt      	0x180075d6	// 180075d6 <hgspi_v3_ioctl+0x2a6>
    switch(cmd) {
18007342:	391e      	cmphsi      	r1, 31
18007344:	0942      	bt      	0x180075c8	// 180075c8 <hgspi_v3_ioctl+0x298>
18007346:	ea8d0003 	lrw      	r13, 0x180168e8	// 18007350 <hgspi_v3_ioctl+0x20>
1800734a:	d02d0881 	ldr.w      	r1, (r13, r1 << 2)
1800734e:	7804      	jmp      	r1
18007350:	180168e8 	.long	0x180168e8
    if (frame_size < 0 || frame_size > 32) {
18007354:	eb020020 	cmphsi      	r2, 33
18007358:	093c      	bt      	0x180075d0	// 180075d0 <hgspi_v3_ioctl+0x2a0>
    p_spi->CON1 &= ~LL_SPI_CON1_SSP_EN;
1800735a:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800735e:	3b80      	bclri      	r3, 0
    p_spi->CON0 = (p_spi->CON0 &~ LL_SPI_CON0_FRAME_SIZE(0x3F)) | LL_SPI_CON0_FRAME_SIZE(frame_size);
18007360:	420e      	lsli      	r0, r2, 14
18007362:	32fc      	movi      	r2, 252
    p_spi->CON1 &= ~LL_SPI_CON1_SSP_EN;
18007364:	dc6c2001 	st.w      	r3, (r12, 0x4)
    p_spi->CON0 = (p_spi->CON0 &~ LL_SPI_CON0_FRAME_SIZE(0x3F)) | LL_SPI_CON0_FRAME_SIZE(frame_size);
18007368:	424c      	lsli      	r2, r2, 12
1800736a:	d86c2000 	ld.w      	r3, (r12, 0x0)
1800736e:	6808      	and      	r0, r2
18007370:	c7205022 	bmaski      	r2, 26
18007374:	c6824902 	rotli      	r2, r2, 20
18007378:	688c      	and      	r2, r3
1800737a:	6c08      	or      	r0, r2
1800737c:	dc0c2000 	st.w      	r0, (r12, 0x0)
    p_spi->CON1 |= LL_SPI_CON1_SSP_EN;
18007380:	d86c2001 	ld.w      	r3, (r12, 0x4)
18007384:	ec630001 	ori      	r3, r3, 1
18007388:	dc6c2001 	st.w      	r3, (r12, 0x4)
    return RET_OK;
1800738c:	3200      	movi      	r2, 0
}
1800738e:	6c0b      	mov      	r0, r2
18007390:	783c      	jmp      	r15
    return ((p_spi->STA1 & LL_SPI_STA_BUF_EMPTY_PENDING) != 0);
18007392:	d86c200a 	ld.w      	r3, (r12, 0x28)
18007396:	e4632004 	andi      	r3, r3, 4
    while (!hgspi_v3_get_tx_fifo_empty(p_spi));
1800739a:	e903fffc 	bez      	r3, 0x18007392	// 18007392 <hgspi_v3_ioctl+0x62>
    return ((p_spi->STA1 & LL_SPI_STA_SSP_BUSY_PENDING) != 0);
1800739e:	d80c200a 	ld.w      	r0, (r12, 0x28)
180073a2:	e4602040 	andi      	r3, r0, 64
    while (hgspi_v3_get_busy(p_spi));
180073a6:	e923fffc 	bnez      	r3, 0x1800739e	// 1800739e <hgspi_v3_ioctl+0x6e>
    p_spi->CON1 &= ~LL_SPI_CON1_SSP_EN;
180073aa:	d82c2001 	ld.w      	r1, (r12, 0x4)
180073ae:	3980      	bclri      	r1, 0
180073b0:	dc2c2001 	st.w      	r1, (r12, 0x4)
    p_spi->CON0 = (p_spi->CON0 & (~ LL_SPI_CON0_WIRE_MODE(0x3))) | LL_SPI_CON0_WIRE_MODE(wire_mode);
180073b4:	d9ac2000 	ld.w      	r13, (r12, 0x0)
180073b8:	4202      	lsli      	r0, r2, 2
180073ba:	e420201c 	andi      	r1, r0, 28
180073be:	c44d2822 	bclri      	r2, r13, 2
180073c2:	3a83      	bclri      	r2, 3
180073c4:	6c48      	or      	r1, r2
180073c6:	dc2c2000 	st.w      	r1, (r12, 0x0)
    p_spi->CON1 |= LL_SPI_CON1_SSP_EN;
180073ca:	d84c2001 	ld.w      	r2, (r12, 0x4)
180073ce:	ec420001 	ori      	r2, r2, 1
180073d2:	dc4c2001 	st.w      	r2, (r12, 0x4)
180073d6:	07db      	br      	0x1800738c	// 1800738c <hgspi_v3_ioctl+0x5c>
    return LL_SPI_CON0_WIRE_MODE_GET(p_spi->CON0);
180073d8:	d84c2000 	ld.w      	r2, (r12, 0x0)
180073dc:	c4425462 	zext      	r2, r2, 3, 2
            break;
180073e0:	07d7      	br      	0x1800738e	// 1800738e <hgspi_v3_ioctl+0x5e>
            ret_val = hgspi_v3_spi_set_len_threshold(dev, param1);
180073e2:	a85c      	st.h      	r2, (r0, 0x38)
180073e4:	07d4      	br      	0x1800738c	// 1800738c <hgspi_v3_ioctl+0x5c>
    if (value) {
180073e6:	e9030009 	bez      	r3, 0x180073f8	// 180073f8 <hgspi_v3_ioctl+0xc8>
        p_spi->CON0 |= LL_SPI_CON0_NSS_HIGH;
180073ea:	d86c2000 	ld.w      	r3, (r12, 0x0)
180073ee:	ec630800 	ori      	r3, r3, 2048
        hw->CON0 = (hw->CON0) &~ (LL_SPI_CON0_NSS_PIN_EN);
180073f2:	dc6c2000 	st.w      	r3, (r12, 0x0)
180073f6:	07cb      	br      	0x1800738c	// 1800738c <hgspi_v3_ioctl+0x5c>
        p_spi->CON0 &= ~LL_SPI_CON0_NSS_HIGH;
180073f8:	d84c2000 	ld.w      	r2, (r12, 0x0)
180073fc:	3a8b      	bclri      	r2, 11
180073fe:	dc4c2000 	st.w      	r2, (r12, 0x0)
18007402:	07c5      	br      	0x1800738c	// 1800738c <hgspi_v3_ioctl+0x5c>
        hw->CON0 = (hw->CON0) &~ (LL_SPI_CON0_NSS_PIN_EN);
18007404:	d86c2000 	ld.w      	r3, (r12, 0x0)
    if (enable) {
18007408:	e9020004 	bez      	r2, 0x18007410	// 18007410 <hgspi_v3_ioctl+0xe0>
        hw->CON0 = (hw->CON0) &~ (LL_SPI_CON0_NSS_PIN_EN);
1800740c:	3b8a      	bclri      	r3, 10
1800740e:	07f2      	br      	0x180073f2	// 180073f2 <hgspi_v3_ioctl+0xc2>
        hw->CON0 |= (LL_SPI_CON0_NSS_PIN_EN);
18007410:	ec630400 	ori      	r3, r3, 1024
        hw->CON0 &= ~LL_SPI_CON0_LSB_FIRST;
18007414:	dc6c2000 	st.w      	r3, (r12, 0x0)
18007418:	07bb      	br      	0x1800738e	// 1800738e <hgspi_v3_ioctl+0x5e>
    if (!cnt_buf) {
1800741a:	e90200de 	bez      	r2, 0x180075d6	// 180075d6 <hgspi_v3_ioctl+0x2a6>
    *cnt_buf = hw->RDMACNT;
1800741e:	d86c2007 	ld.w      	r3, (r12, 0x1c)
18007422:	b260      	st.w      	r3, (r2, 0x0)
18007424:	07b4      	br      	0x1800738c	// 1800738c <hgspi_v3_ioctl+0x5c>
    if ((!rx_buf) || (!len)) {
18007426:	e90200d8 	bez      	r2, 0x180075d6	// 180075d6 <hgspi_v3_ioctl+0x2a6>
1800742a:	e90300d6 	bez      	r3, 0x180075d6	// 180075d6 <hgspi_v3_ioctl+0x2a6>
    hw->STA1 = LL_SPI_STA_CLR_BUF_CNT;
1800742e:	3180      	movi      	r1, 128
18007430:	4138      	lsli      	r1, r1, 24
18007432:	dc2c200a 	st.w      	r1, (r12, 0x28)
    hw->CON1 &= ~ LL_SPI_CON1_DMA_EN;
18007436:	d82c2001 	ld.w      	r1, (r12, 0x4)
1800743a:	3984      	bclri      	r1, 4
    hw->RDMACNT = 0;
1800743c:	3000      	movi      	r0, 0
    hw->CON1 &= ~ LL_SPI_CON1_DMA_EN;
1800743e:	dc2c2001 	st.w      	r1, (r12, 0x4)
    hw->RDMACNT = 0;
18007442:	dc0c2007 	st.w      	r0, (r12, 0x1c)
    hw->RSTADR  = (uint32)rx_buf;
18007446:	dc4c2009 	st.w      	r2, (r12, 0x24)
    hw->RDMALEN = len;
1800744a:	dc6c2005 	st.w      	r3, (r12, 0x14)
    p_spi->CON1 &= ~LL_SPI_CON1_TX_EN;
1800744e:	d82c2001 	ld.w      	r1, (r12, 0x4)
18007452:	3983      	bclri      	r1, 3
    p_spi->CON1 |= LL_SPI_CON1_TX_EN;
18007454:	dc2c2001 	st.w      	r1, (r12, 0x4)
    hw->CON1 |= LL_SPI_CON1_DMA_EN;
18007458:	d82c2001 	ld.w      	r1, (r12, 0x4)
1800745c:	ec210010 	ori      	r1, r1, 16
18007460:	dc2c2001 	st.w      	r1, (r12, 0x4)
18007464:	0794      	br      	0x1800738c	// 1800738c <hgspi_v3_ioctl+0x5c>
    if ((!tx_buf) || (!len)) {
18007466:	e90200b8 	bez      	r2, 0x180075d6	// 180075d6 <hgspi_v3_ioctl+0x2a6>
1800746a:	e90300b6 	bez      	r3, 0x180075d6	// 180075d6 <hgspi_v3_ioctl+0x2a6>
    hw->STA1 = LL_SPI_STA_CLR_BUF_CNT;
1800746e:	3180      	movi      	r1, 128
18007470:	4138      	lsli      	r1, r1, 24
18007472:	dc2c200a 	st.w      	r1, (r12, 0x28)
    hw->CON1 &= ~ LL_SPI_CON1_DMA_EN;
18007476:	d82c2001 	ld.w      	r1, (r12, 0x4)
1800747a:	3984      	bclri      	r1, 4
    hw->TDMACNT = 0;
1800747c:	3000      	movi      	r0, 0
    hw->CON1 &= ~ LL_SPI_CON1_DMA_EN;
1800747e:	dc2c2001 	st.w      	r1, (r12, 0x4)
    hw->TDMACNT = 0;
18007482:	dc0c2006 	st.w      	r0, (r12, 0x18)
    hw->TSTADR  = (uint32)tx_buf;
18007486:	dc4c2008 	st.w      	r2, (r12, 0x20)
    hw->TDMALEN = len;
1800748a:	dc6c2004 	st.w      	r3, (r12, 0x10)
    p_spi->CON1 |= LL_SPI_CON1_TX_EN;
1800748e:	d82c2001 	ld.w      	r1, (r12, 0x4)
18007492:	ec210008 	ori      	r1, r1, 8
18007496:	07df      	br      	0x18007454	// 18007454 <hgspi_v3_ioctl+0x124>
    dev->timeout = time;
18007498:	b04d      	st.w      	r2, (r0, 0x34)
1800749a:	0779      	br      	0x1800738c	// 1800738c <hgspi_v3_ioctl+0x5c>
        hw->CON0 |= LL_SPI_CON0_LSB_FIRST;
1800749c:	d86c2000 	ld.w      	r3, (r12, 0x0)
    if (enable) {
180074a0:	e9020005 	bez      	r2, 0x180074aa	// 180074aa <hgspi_v3_ioctl+0x17a>
        hw->CON0 |= LL_SPI_CON0_LSB_FIRST;
180074a4:	ec630020 	ori      	r3, r3, 32
180074a8:	07a5      	br      	0x180073f2	// 180073f2 <hgspi_v3_ioctl+0xc2>
        hw->CON0 &= ~LL_SPI_CON0_LSB_FIRST;
180074aa:	3b85      	bclri      	r3, 5
180074ac:	07b4      	br      	0x18007414	// 18007414 <hgspi_v3_ioctl+0xe4>
        hw->SLAVESTA |= LL_SPI_SLAVE_STA_SW_RESERVED;
180074ae:	d86c200c 	ld.w      	r3, (r12, 0x30)
    if (enable) {
180074b2:	e9020007 	bez      	r2, 0x180074c0	// 180074c0 <hgspi_v3_ioctl+0x190>
        hw->SLAVESTA |= LL_SPI_SLAVE_STA_SW_RESERVED;
180074b6:	ec630020 	ori      	r3, r3, 32
180074ba:	dc6c200c 	st.w      	r3, (r12, 0x30)
180074be:	0767      	br      	0x1800738c	// 1800738c <hgspi_v3_ioctl+0x5c>
        hw->SLAVESTA &= ~LL_SPI_SLAVE_STA_SW_RESERVED;
180074c0:	3b85      	bclri      	r3, 5
180074c2:	dc6c200c 	st.w      	r3, (r12, 0x30)
180074c6:	0764      	br      	0x1800738e	// 1800738e <hgspi_v3_ioctl+0x5e>
        hw->CON1 |= LL_SPI_CON1_PING_PONG_EN(1);
180074c8:	d86c2001 	ld.w      	r3, (r12, 0x4)
    if (enable) {
180074cc:	e9020005 	bez      	r2, 0x180074d6	// 180074d6 <hgspi_v3_ioctl+0x1a6>
        hw->CON1 |= LL_SPI_CON1_PING_PONG_EN(1);
180074d0:	ec631000 	ori      	r3, r3, 4096
180074d4:	075a      	br      	0x18007388	// 18007388 <hgspi_v3_ioctl+0x58>
        hw->CON1 &= ~(LL_SPI_CON1_PING_PONG_EN(1));
180074d6:	3b8c      	bclri      	r3, 12
180074d8:	dc6c2001 	st.w      	r3, (r12, 0x4)
180074dc:	0759      	br      	0x1800738e	// 1800738e <hgspi_v3_ioctl+0x5e>
	hw->RSTADR  = buf0;	
180074de:	dc4c2009 	st.w      	r2, (r12, 0x24)
180074e2:	0755      	br      	0x1800738c	// 1800738c <hgspi_v3_ioctl+0x5c>
	hw->RSTADR1  = buf1;	
180074e4:	dc4c2011 	st.w      	r2, (r12, 0x44)
180074e8:	0752      	br      	0x1800738c	// 1800738c <hgspi_v3_ioctl+0x5c>
	hw->RDMALEN  = len;	
180074ea:	dc4c2005 	st.w      	r2, (r12, 0x14)
180074ee:	074f      	br      	0x1800738c	// 1800738c <hgspi_v3_ioctl+0x5c>
	hw->VSYNC_TCON  &= ~(0x1fffff<<8);
180074f0:	d86c2012 	ld.w      	r3, (r12, 0x48)
180074f4:	ea01ffe0 	movi      	r1, 65504
180074f8:	c7014901 	rotli      	r1, r1, 24
180074fc:	68c4      	and      	r3, r1
180074fe:	dc6c2012 	st.w      	r3, (r12, 0x48)
	hw->VSYNC_TCON  |= (timeout<<8);
18007502:	d86c2012 	ld.w      	r3, (r12, 0x48)
18007506:	4208      	lsli      	r0, r2, 8
	hw->VSYNC_TCON  |= (head<<1);
18007508:	6c0c      	or      	r0, r3
1800750a:	dc0c2012 	st.w      	r0, (r12, 0x48)
1800750e:	073f      	br      	0x1800738c	// 1800738c <hgspi_v3_ioctl+0x5c>
	hw->VSYNC_TCON  &= ~(0x3f<<1);
18007510:	3100      	movi      	r1, 0
18007512:	d86c2012 	ld.w      	r3, (r12, 0x48)
18007516:	297e      	subi      	r1, 127
18007518:	68c4      	and      	r3, r1
1800751a:	dc6c2012 	st.w      	r3, (r12, 0x48)
	hw->VSYNC_TCON  |= (head<<1);
1800751e:	d86c2012 	ld.w      	r3, (r12, 0x48)
18007522:	5a08      	addu      	r0, r2, r2
18007524:	07f2      	br      	0x18007508	// 18007508 <hgspi_v3_ioctl+0x1d8>
	hw->HSYNC_TCON  &= ~(0xffff<<8);
18007526:	d86c2013 	ld.w      	r3, (r12, 0x4c)
1800752a:	ea01ffff 	movi      	r1, 65535
1800752e:	c7014901 	rotli      	r1, r1, 24
18007532:	68c4      	and      	r3, r1
18007534:	dc6c2013 	st.w      	r3, (r12, 0x4c)
	hw->HSYNC_TCON  |= (timeout<<8);
18007538:	d86c2013 	ld.w      	r3, (r12, 0x4c)
1800753c:	4208      	lsli      	r0, r2, 8
1800753e:	6c0c      	or      	r0, r3
	hw->HSYNC_TCON  |= (head<<0);
18007540:	dc0c2013 	st.w      	r0, (r12, 0x4c)
18007544:	0724      	br      	0x1800738c	// 1800738c <hgspi_v3_ioctl+0x5c>
	hw->HSYNC_TCON  &= ~(0x3f<<0);
18007546:	3100      	movi      	r1, 0
18007548:	d86c2013 	ld.w      	r3, (r12, 0x4c)
1800754c:	293f      	subi      	r1, 64
1800754e:	68c4      	and      	r3, r1
18007550:	dc6c2013 	st.w      	r3, (r12, 0x4c)
	hw->HSYNC_TCON  |= (head<<0);
18007554:	d80c2013 	ld.w      	r0, (r12, 0x4c)
18007558:	6c08      	or      	r0, r2
1800755a:	07f3      	br      	0x18007540	// 18007540 <hgspi_v3_ioctl+0x210>
        hw->VSYNC_TCON |= BIT(0);
1800755c:	d86c2012 	ld.w      	r3, (r12, 0x48)
    if (enable) {
18007560:	e9020007 	bez      	r2, 0x1800756e	// 1800756e <hgspi_v3_ioctl+0x23e>
        hw->VSYNC_TCON |= BIT(0);
18007564:	ec630001 	ori      	r3, r3, 1
18007568:	dc6c2012 	st.w      	r3, (r12, 0x48)
1800756c:	0710      	br      	0x1800738c	// 1800738c <hgspi_v3_ioctl+0x5c>
        hw->VSYNC_TCON &= ~BIT(0);
1800756e:	3b80      	bclri      	r3, 0
18007570:	dc6c2012 	st.w      	r3, (r12, 0x48)
18007574:	070d      	br      	0x1800738e	// 1800738e <hgspi_v3_ioctl+0x5e>
	hw->CON0  &= ~(LL_SPI_CON0_SPI_HIGH_SPEED(3));
18007576:	d86c2000 	ld.w      	r3, (r12, 0x0)
1800757a:	3b88      	bclri      	r3, 8
1800757c:	3b89      	bclri      	r3, 9
1800757e:	dc6c2000 	st.w      	r3, (r12, 0x0)
	hw->CON0  |= (LL_SPI_CON0_SPI_HIGH_SPEED(cfg));
18007582:	4208      	lsli      	r0, r2, 8
18007584:	d86c2000 	ld.w      	r3, (r12, 0x0)
18007588:	e4002300 	andi      	r0, r0, 768
1800758c:	6c0c      	or      	r0, r3
1800758e:	dc0c2000 	st.w      	r0, (r12, 0x0)
18007592:	06fd      	br      	0x1800738c	// 1800738c <hgspi_v3_ioctl+0x5c>
	hw->CON1  |= LL_SPI_CON1_DMA_EN;
18007594:	d86c2001 	ld.w      	r3, (r12, 0x4)
18007598:	ec630010 	ori      	r3, r3, 16
1800759c:	06f6      	br      	0x18007388	// 18007388 <hgspi_v3_ioctl+0x58>
		hw->RXTIMEOUTCON  |= (hw->RXTIMEOUTCON &~ (0x1fffffff<<1)) | (timeout<<1);
1800759e:	d80c2010 	ld.w      	r0, (r12, 0x40)
180075a2:	60cc      	addu      	r3, r3
180075a4:	d84c2010 	ld.w      	r2, (r12, 0x40)
180075a8:	6cc8      	or      	r3, r2
180075aa:	ea02e000 	movi      	r2, 57344
180075ae:	c6224902 	rotli      	r2, r2, 17
180075b2:	6808      	and      	r0, r2
180075b4:	6cc0      	or      	r3, r0
180075b6:	dc6c2010 	st.w      	r3, (r12, 0x40)
		hw->RXTIMEOUTCON  |= BIT(0);
180075ba:	d86c2010 	ld.w      	r3, (r12, 0x40)
180075be:	ec630001 	ori      	r3, r3, 1
180075c2:	dc6c2010 	st.w      	r3, (r12, 0x40)
180075c6:	06e3      	br      	0x1800738c	// 1800738c <hgspi_v3_ioctl+0x5c>
            ret_val = -ENOTSUPP;
180075c8:	ea02020b 	movi      	r2, 523
180075cc:	6c8a      	nor      	r2, r2
180075ce:	06e0      	br      	0x1800738e	// 1800738e <hgspi_v3_ioctl+0x5e>
        return -EINVAL;
180075d0:	3200      	movi      	r2, 0
180075d2:	2a15      	subi      	r2, 22
180075d4:	06dd      	br      	0x1800738e	// 1800738e <hgspi_v3_ioctl+0x5e>
        return RET_ERR;
180075d6:	3200      	movi      	r2, 0
180075d8:	2a00      	subi      	r2, 1
180075da:	06da      	br      	0x1800738e	// 1800738e <hgspi_v3_ioctl+0x5e>

180075dc <hgspi_v3_request_irq>:
{
180075dc:	14d3      	push      	r4-r6, r15
180075de:	6d87      	mov      	r6, r1
    if ((!dev->opened) || (dev->dsleep)) {
180075e0:	d820003a 	ld.b      	r1, (r0, 0x3a)
180075e4:	e42120c0 	andi      	r1, r1, 192
180075e8:	eb410040 	cmpnei      	r1, 64
{
180075ec:	6d43      	mov      	r5, r0
    struct hgspi_v3_hw *hw = (struct hgspi_v3_hw *)dev->hw;
180075ee:	9083      	ld.w      	r4, (r0, 0xc)
    if ((!dev->opened) || (dev->dsleep)) {
180075f0:	086d      	bt      	0x180076ca	// 180076ca <hgspi_v3_request_irq+0xee>
    dev->irq_hdl  = irqhdl;
180075f2:	b045      	st.w      	r2, (r0, 0x14)
    dev->irq_data = irq_data;
180075f4:	b066      	st.w      	r3, (r0, 0x18)
    request_irq(dev->irq_num, hgspi_v3_irq_handler, dev);
180075f6:	6c83      	mov      	r2, r0
180075f8:	1136      	lrw      	r1, 0x18006c08	// 180076d0 <hgspi_v3_request_irq+0xf4>
180075fa:	9004      	ld.w      	r0, (r0, 0x10)
180075fc:	e3ffe070 	bsr      	0x180036dc	// 180036dc <request_irq>
    if (irq_flag & SPI_IRQ_FLAG_TX_DONE) {
18007600:	e4662001 	andi      	r3, r6, 1
18007604:	e903000b 	bez      	r3, 0x1800761a	// 1800761a <hgspi_v3_request_irq+0x3e>
        if (hw->CON0 & LL_SPI_CON0_SLAVE_STATE_EN) {
18007608:	3280      	movi      	r2, 128
1800760a:	9460      	ld.w      	r3, (r4, 0x0)
1800760c:	424d      	lsli      	r2, r2, 13
1800760e:	68c8      	and      	r3, r2
18007610:	e9030045 	bez      	r3, 0x1800769a	// 1800769a <hgspi_v3_request_irq+0xbe>
            hw->CON0 |= LL_SPI_CON0_SLAVE_RDDATA_IE_EN;
18007614:	9460      	ld.w      	r3, (r4, 0x0)
18007616:	3bb6      	bseti      	r3, 22
18007618:	b460      	st.w      	r3, (r4, 0x0)
    if (irq_flag & SPI_IRQ_FLAG_RX_DONE) {
1800761a:	e4662002 	andi      	r3, r6, 2
1800761e:	e903000b 	bez      	r3, 0x18007634	// 18007634 <hgspi_v3_request_irq+0x58>
        if (hw->CON0 & LL_SPI_CON0_SLAVE_STATE_EN) {
18007622:	3280      	movi      	r2, 128
18007624:	9460      	ld.w      	r3, (r4, 0x0)
18007626:	424d      	lsli      	r2, r2, 13
18007628:	68c8      	and      	r3, r2
1800762a:	e9030044 	bez      	r3, 0x180076b2	// 180076b2 <hgspi_v3_request_irq+0xd6>
            hw->CON0 |= LL_SPI_CON0_SLAVE_WRDATA_IE_EN;
1800762e:	9460      	ld.w      	r3, (r4, 0x0)
18007630:	3bb5      	bseti      	r3, 21
18007632:	b460      	st.w      	r3, (r4, 0x0)
	if (irq_flag & SPI_IRQ_FLAG_RX_TIMEOUT) {
18007634:	e4662040 	andi      	r3, r6, 64
18007638:	e9030006 	bez      	r3, 0x18007644	// 18007644 <hgspi_v3_request_irq+0x68>
		hw->CON1 |= LL_SPI_CON1_RX_TIMEOUT_IE(1);
1800763c:	9461      	ld.w      	r3, (r4, 0x4)
1800763e:	ec630400 	ori      	r3, r3, 1024
18007642:	b461      	st.w      	r3, (r4, 0x4)
    if (irq_flag & SPI_IRQ_FLAG_CS_RISING) {
18007644:	e4662008 	andi      	r3, r6, 8
18007648:	e9030006 	bez      	r3, 0x18007654	// 18007654 <hgspi_v3_request_irq+0x78>
        hw->CON1 |= LL_SPI_CON0_NSS_POS_IE_EN;
1800764c:	9461      	ld.w      	r3, (r4, 0x4)
1800764e:	ec632000 	ori      	r3, r3, 8192
18007652:	b461      	st.w      	r3, (r4, 0x4)
    if (irq_flag & SPI_IRQ_FLAG_FIFO_OVERFLOW) {
18007654:	e4662004 	andi      	r3, r6, 4
18007658:	e9030006 	bez      	r3, 0x18007664	// 18007664 <hgspi_v3_request_irq+0x88>
        hw->CON1 |= LL_SPI_CON1_BUF_OV_IE_EN;
1800765c:	9461      	ld.w      	r3, (r4, 0x4)
1800765e:	ec630100 	ori      	r3, r3, 256
18007662:	b461      	st.w      	r3, (r4, 0x4)
    if (irq_flag & SPI_IRQ_FLAG_SLAVE_FSM_READ_STATUS) {
18007664:	e4662010 	andi      	r3, r6, 16
18007668:	e9030005 	bez      	r3, 0x18007672	// 18007672 <hgspi_v3_request_irq+0x96>
        hw->CON0 |= LL_SPI_CON0_SLAVE_RDSTATUS_IE_EN;
1800766c:	9460      	ld.w      	r3, (r4, 0x0)
1800766e:	3bb7      	bseti      	r3, 23
18007670:	b460      	st.w      	r3, (r4, 0x0)
    if (irq_flag & SPI_IRQ_FLAG_SLAVE_FSM_WRONG_CMD) {
18007672:	e4c62020 	andi      	r6, r6, 32
18007676:	e9060005 	bez      	r6, 0x18007680	// 18007680 <hgspi_v3_request_irq+0xa4>
        hw->CON0 |= LL_SPI_CON0_SLAVE_WRONG_CMD_IE;
1800767a:	9460      	ld.w      	r3, (r4, 0x0)
1800767c:	3bb9      	bseti      	r3, 25
1800767e:	b460      	st.w      	r3, (r4, 0x0)
    IRQn &= 0x7FUL;
18007680:	9564      	ld.w      	r3, (r5, 0x10)
    VIC->ISER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
18007682:	c4a354c1 	zext      	r1, r3, 6, 5
18007686:	3201      	movi      	r2, 1
18007688:	e463201f 	andi      	r3, r3, 31
1800768c:	c4624023 	lsl      	r3, r2, r3
18007690:	1051      	lrw      	r2, 0xe000e100	// 180076d4 <hgspi_v3_request_irq+0xf8>
18007692:	d4220883 	str.w      	r3, (r2, r1 << 2)
    return RET_OK;
18007696:	3000      	movi      	r0, 0
}
18007698:	1493      	pop      	r4-r6, r15
            dev->spi_irq_flag_tx_done = 1;
1800769a:	d865003a 	ld.b      	r3, (r5, 0x3a)
1800769e:	3201      	movi      	r2, 1
180076a0:	c4625c02 	ins      	r3, r2, 2, 2
180076a4:	dc65003a 	st.b      	r3, (r5, 0x3a)
            hw->CON1 |= LL_SPI_CON1_DMA_IE_EN;
180076a8:	9461      	ld.w      	r3, (r4, 0x4)
180076aa:	ec630200 	ori      	r3, r3, 512
180076ae:	b461      	st.w      	r3, (r4, 0x4)
180076b0:	07b5      	br      	0x1800761a	// 1800761a <hgspi_v3_request_irq+0x3e>
            dev->spi_irq_flag_rx_done = 1;
180076b2:	d865003a 	ld.b      	r3, (r5, 0x3a)
180076b6:	3201      	movi      	r2, 1
180076b8:	c4625c03 	ins      	r3, r2, 3, 3
180076bc:	dc65003a 	st.b      	r3, (r5, 0x3a)
            hw->CON1 |= LL_SPI_CON1_DMA_IE_EN;
180076c0:	9461      	ld.w      	r3, (r4, 0x4)
180076c2:	ec630200 	ori      	r3, r3, 512
180076c6:	b461      	st.w      	r3, (r4, 0x4)
180076c8:	07b6      	br      	0x18007634	// 18007634 <hgspi_v3_request_irq+0x58>
        return RET_ERR;
180076ca:	3000      	movi      	r0, 0
180076cc:	2800      	subi      	r0, 1
180076ce:	07e5      	br      	0x18007698	// 18007698 <hgspi_v3_request_irq+0xbc>
180076d0:	18006c08 	.long	0x18006c08
180076d4:	e000e100 	.long	0xe000e100

180076d8 <hgspi_v3_attach>:
    .ops.resume       = hgspi_v3_resume,
#endif
};

int32 hgspi_v3_attach(uint32 dev_id, struct hgspi_v3 *p_spi)
{
180076d8:	14d3      	push      	r4-r6, r15
    p_spi->opened               = 0;
180076da:	d861003a 	ld.b      	r3, (r1, 0x3a)
180076de:	3500      	movi      	r5, 0
    p_spi->spi_tx_done          = 0;
    p_spi->spi_tx_done          = 0;
    p_spi->spi_tx_async         = 0;
    p_spi->spi_rx_async         = 0;
    p_spi->spi_irq_flag_tx_done = 0;
    p_spi->spi_irq_flag_rx_done = 0;
180076e0:	e463200a 	andi      	r3, r3, 10
180076e4:	c4655c03 	ins      	r3, r5, 3, 3
    p_spi->timeout              = osWaitForever;
180076e8:	3200      	movi      	r2, 0
{
180076ea:	6d07      	mov      	r4, r1
    p_spi->timeout              = osWaitForever;
180076ec:	2a00      	subi      	r2, 1
    p_spi->spi_irq_flag_rx_done = 0;
180076ee:	dc61003a 	st.b      	r3, (r1, 0x3a)
    p_spi->timeout              = osWaitForever;
180076f2:	b14d      	st.w      	r2, (r1, 0x34)
{
180076f4:	6d83      	mov      	r6, r0
    p_spi->dev.dev.ops          = (const struct devobj_ops *)&spi_v3_ops;
180076f6:	106f      	lrw      	r3, 0x180169ac	// 18007730 <hgspi_v3_attach+0x58>
#ifdef CONFIG_SUSPEND
    os_mutex_init(&p_spi->bp_suspend_lock);
    os_mutex_init(&p_spi->bp_resume_lock);
#endif
    os_sema_init(&p_spi->os_spi_tx_done, 0);
180076f8:	e4040023 	addi      	r0, r4, 36
    p_spi->dev.dev.ops          = (const struct devobj_ops *)&spi_v3_ops;
180076fc:	b162      	st.w      	r3, (r1, 0x8)
    p_spi->irq_hdl              = NULL;
180076fe:	b1a5      	st.w      	r5, (r1, 0x14)
    p_spi->irq_data             = 0;
18007700:	b1a6      	st.w      	r5, (r1, 0x18)
    os_sema_init(&p_spi->os_spi_tx_done, 0);
18007702:	6c57      	mov      	r1, r5
18007704:	e00066ca 	bsr      	0x18014498	// 18014498 <os_sema_init>
    os_sema_init(&p_spi->os_spi_rx_done, 0);
18007708:	6c57      	mov      	r1, r5
1800770a:	e404002b 	addi      	r0, r4, 44
1800770e:	e00066c5 	bsr      	0x18014498	// 18014498 <os_sema_init>
    //os_mutex_init(&p_spi->os_spi_tx_lock);
    //os_mutex_init(&p_spi->os_spi_rx_lock);
    os_mutex_init(&p_spi->os_spi_lock);
18007712:	e404001b 	addi      	r0, r4, 28
18007716:	e0006659 	bsr      	0x180143c8	// 180143c8 <os_mutex_init>
    request_irq(p_spi->irq_num, hgspi_v3_irq_handler, p_spi);
1800771a:	6c93      	mov      	r2, r4
1800771c:	1026      	lrw      	r1, 0x18006c08	// 18007734 <hgspi_v3_attach+0x5c>
1800771e:	9404      	ld.w      	r0, (r4, 0x10)
18007720:	e3ffdfde 	bsr      	0x180036dc	// 180036dc <request_irq>
    dev_register(dev_id, (struct dev_obj *)p_spi);
18007724:	6c53      	mov      	r1, r4
18007726:	6c1b      	mov      	r0, r6
18007728:	e3ffdcbe 	bsr      	0x180030a4	// 180030a4 <dev_register>
    return RET_OK;
}
1800772c:	6c17      	mov      	r0, r5
1800772e:	1493      	pop      	r4-r6, r15
18007730:	180169ac 	.long	0x180169ac
18007734:	18006c08 	.long	0x18006c08

18007738 <csi_vic_enable_irq>:
18007738:	c4a054c2 	zext      	r2, r0, 6, 5
1800773c:	3301      	movi      	r3, 1
1800773e:	e400201f 	andi      	r0, r0, 31
18007742:	c4034020 	lsl      	r0, r3, r0
18007746:	1063      	lrw      	r3, 0xe000e100	// 18007750 <csi_vic_enable_irq+0x18>
18007748:	d4430880 	str.w      	r0, (r3, r2 << 2)
}
1800774c:	783c      	jmp      	r15
1800774e:	0000      	.short	0x0000
18007750:	e000e100 	.long	0xe000e100

18007754 <csi_vic_disable_irq>:
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
18007754:	c4a054c3 	zext      	r3, r0, 6, 5
18007758:	3201      	movi      	r2, 1
1800775a:	e400201f 	andi      	r0, r0, 31
1800775e:	c4024020 	lsl      	r0, r2, r0
18007762:	231f      	addi      	r3, 32
18007764:	1042      	lrw      	r2, 0xe000e100	// 1800776c <csi_vic_disable_irq+0x18>
18007766:	d4620880 	str.w      	r0, (r2, r3 << 2)
}
1800776a:	783c      	jmp      	r15
1800776c:	e000e100 	.long	0xe000e100

18007770 <hgtimer_v4_counter_func_close>:

    return RET_OK;
}

static int32 hgtimer_v4_counter_func_close(struct timer_device *timer)
{
18007770:	14d2      	push      	r4-r5, r15

    struct hgtimer_v4 *dev = (struct hgtimer_v4 *)timer;
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;

    if ((!dev->opened) || (!dev->counter_en)) {
18007772:	d8600026 	ld.b      	r3, (r0, 0x26)
18007776:	e4632044 	andi      	r3, r3, 68
1800777a:	eb430044 	cmpnei      	r3, 68
{
1800777e:	6d43      	mov      	r5, r0
    if ((!dev->opened) || (!dev->counter_en)) {
18007780:	081e      	bt      	0x180077bc	// 180077bc <hgtimer_v4_counter_func_close+0x4c>
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;
18007782:	9083      	ld.w      	r4, (r0, 0xc)
    }

    /*
     * close TIMER clk
     */
    if (TIMER0_BASE == (uint32)hw) {
18007784:	107b      	lrw      	r3, 0x40015100	// 180077f0 <hgtimer_v4_counter_func_close+0x80>
18007786:	64d2      	cmpne      	r4, r3
18007788:	081c      	bt      	0x180077c0	// 180077c0 <hgtimer_v4_counter_func_close+0x50>
        sysctrl_tmr0_clk_close();
1800778a:	ea224002 	movih      	r2, 16386
1800778e:	9273      	ld.w      	r3, (r2, 0x4c)
18007790:	3b9d      	bclri      	r3, 29
    } else if (TIMER1_BASE == (uint32)hw) {
        sysctrl_tmr1_clk_close();
    } else if (TIMER2_BASE == (uint32)hw) {
        sysctrl_tmr2_clk_close();
    } else if (TIMER3_BASE == (uint32)hw) {
        sysctrl_tmr3_clk_close();
18007792:	b273      	st.w      	r3, (r2, 0x4c)
    }


    irq_disable(dev->irq_num);
18007794:	9508      	ld.w      	r0, (r5, 0x20)
18007796:	e3ffffdf 	bsr      	0x18007754	// 18007754 <csi_vic_disable_irq>

    hw->TMR_EN       &= ~ LL_TIMER_EN_TMREN;
1800779a:	9461      	ld.w      	r3, (r4, 0x4)
    hw->TMR_CON       = 0x00000000;
1800779c:	3200      	movi      	r2, 0
    hw->TMR_EN       &= ~ LL_TIMER_EN_TMREN;
1800779e:	3b80      	bclri      	r3, 0
180077a0:	b461      	st.w      	r3, (r4, 0x4)
    hw->TMR_CLR       = 0xffffffff;
180077a2:	6ccb      	mov      	r3, r2
180077a4:	2b00      	subi      	r3, 1
    hw->TMR_CON       = 0x00000000;
180077a6:	b440      	st.w      	r2, (r4, 0x0)
    hw->TMR_CLR       = 0xffffffff;
180077a8:	b465      	st.w      	r3, (r4, 0x14)
    hw->TMR_CNT       = 0;
180077aa:	b443      	st.w      	r2, (r4, 0xc)
    dev->opened       = 0;
180077ac:	d8650026 	ld.b      	r3, (r5, 0x26)
    dev->counter_en   = 0;
    dev->dsleep       = 0;
180077b0:	e46320bb 	andi      	r3, r3, 187
180077b4:	c4625c07 	ins      	r3, r2, 7, 7
180077b8:	dc650026 	st.b      	r3, (r5, 0x26)

    return RET_OK;
}
180077bc:	3000      	movi      	r0, 0
180077be:	1492      	pop      	r4-r5, r15
    } else if (TIMER1_BASE == (uint32)hw) {
180077c0:	106d      	lrw      	r3, 0x40015200	// 180077f4 <hgtimer_v4_counter_func_close+0x84>
180077c2:	64d2      	cmpne      	r4, r3
180077c4:	0806      	bt      	0x180077d0	// 180077d0 <hgtimer_v4_counter_func_close+0x60>
        sysctrl_tmr1_clk_close();
180077c6:	ea224002 	movih      	r2, 16386
180077ca:	9273      	ld.w      	r3, (r2, 0x4c)
180077cc:	3b8c      	bclri      	r3, 12
180077ce:	07e2      	br      	0x18007792	// 18007792 <hgtimer_v4_counter_func_close+0x22>
    } else if (TIMER2_BASE == (uint32)hw) {
180077d0:	106a      	lrw      	r3, 0x40015300	// 180077f8 <hgtimer_v4_counter_func_close+0x88>
180077d2:	64d2      	cmpne      	r4, r3
180077d4:	0806      	bt      	0x180077e0	// 180077e0 <hgtimer_v4_counter_func_close+0x70>
        sysctrl_tmr2_clk_close();
180077d6:	ea224002 	movih      	r2, 16386
180077da:	9273      	ld.w      	r3, (r2, 0x4c)
180077dc:	3b88      	bclri      	r3, 8
180077de:	07da      	br      	0x18007792	// 18007792 <hgtimer_v4_counter_func_close+0x22>
    } else if (TIMER3_BASE == (uint32)hw) {
180077e0:	1067      	lrw      	r3, 0x40015400	// 180077fc <hgtimer_v4_counter_func_close+0x8c>
180077e2:	64d2      	cmpne      	r4, r3
180077e4:	0bd8      	bt      	0x18007794	// 18007794 <hgtimer_v4_counter_func_close+0x24>
        sysctrl_tmr3_clk_close();
180077e6:	ea224002 	movih      	r2, 16386
180077ea:	9273      	ld.w      	r3, (r2, 0x4c)
180077ec:	3b9a      	bclri      	r3, 26
180077ee:	07d2      	br      	0x18007792	// 18007792 <hgtimer_v4_counter_func_close+0x22>
180077f0:	40015100 	.long	0x40015100
180077f4:	40015200 	.long	0x40015200
180077f8:	40015300 	.long	0x40015300
180077fc:	40015400 	.long	0x40015400

18007800 <hgtimer_v4_counter_func_start>:

static int32 hgtimer_v4_counter_func_start(struct timer_device *timer, uint32 period_sysclkpd_cnt, timer_cb_hdl cb, uint32 cb_data)
{
18007800:	14c1      	push      	r4

    struct hgtimer_v4 *dev = (struct hgtimer_v4 *)timer;
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;

    if ((!dev->counter_en) || (dev->dsleep)) {
18007802:	d9a00026 	ld.b      	r13, (r0, 0x26)
18007806:	e48d2084 	andi      	r4, r13, 132
1800780a:	3c44      	cmpnei      	r4, 4
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;
1800780c:	d9802003 	ld.w      	r12, (r0, 0xc)
    if ((!dev->counter_en) || (dev->dsleep)) {
18007810:	082b      	bt      	0x18007866	// 18007866 <hgtimer_v4_counter_func_start+0x66>
        return RET_ERR;
    }


    switch (dev->type) {
18007812:	8892      	ld.h      	r4, (r0, 0x24)
18007814:	3c42      	cmpnei      	r4, 2
18007816:	0c22      	bf      	0x1800785a	// 1800785a <hgtimer_v4_counter_func_start+0x5a>
18007818:	3c44      	cmpnei      	r4, 4
1800781a:	0c20      	bf      	0x1800785a	// 1800785a <hgtimer_v4_counter_func_start+0x5a>
1800781c:	3c41      	cmpnei      	r4, 1
1800781e:	0824      	bt      	0x18007866	// 18007866 <hgtimer_v4_counter_func_start+0x66>

        /* TIMER_TYPE_ONCE */
        case (HGTIMER_V4_TYPE_ONCE):

            dev->counter_once_en = 1;
18007820:	c5a45c00 	ins      	r13, r4, 0, 0
        case (HGTIMER_V4_TYPE_PERIODIC):

        /* TIMER_TYPE_COUNTER */
        case (HGTIMER_V4_TYPE_COUNTER):

            dev->counter_period_en = 1;
18007824:	dda00026 	st.b      	r13, (r0, 0x26)

            /* config period */
            hw->TMR_CAP1 = period_sysclkpd_cnt;
18007828:	dc2c2006 	st.w      	r1, (r12, 0x18)
            hw->TMR_CAP3 = period_sysclkpd_cnt;
1800782c:	dc2c2008 	st.w      	r1, (r12, 0x20)

            hw->TMR_CNT  = 0;
18007830:	3100      	movi      	r1, 0
18007832:	dc2c2003 	st.w      	r1, (r12, 0xc)

            if (cb) {
18007836:	e902000a 	bez      	r2, 0x1800784a	// 1800784a <hgtimer_v4_counter_func_start+0x4a>
                dev->_counter_irq_hdl = cb;
                dev->irq_data         = cb_data;
1800783a:	b067      	st.w      	r3, (r0, 0x1c)
                hw->TMR_IE      |= LL_TIMER_IE_PRD_IE;
1800783c:	d86c2002 	ld.w      	r3, (r12, 0x8)
18007840:	ec630020 	ori      	r3, r3, 32
                dev->_counter_irq_hdl = cb;
18007844:	b044      	st.w      	r2, (r0, 0x10)
                hw->TMR_IE      |= LL_TIMER_IE_PRD_IE;
18007846:	dc6c2002 	st.w      	r3, (r12, 0x8)
            }

            hw->TMR_EN |= LL_TIMER_EN_TMREN;
1800784a:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800784e:	ec630001 	ori      	r3, r3, 1
18007852:	dc6c2001 	st.w      	r3, (r12, 0x4)
        default:
            return RET_ERR;
            break;
    }

    return RET_OK;
18007856:	3000      	movi      	r0, 0
}
18007858:	1481      	pop      	r4
            dev->counter_period_en = 1;
1800785a:	d9a00026 	ld.b      	r13, (r0, 0x26)
1800785e:	3401      	movi      	r4, 1
18007860:	c5a45c01 	ins      	r13, r4, 1, 1
18007864:	07e0      	br      	0x18007824	// 18007824 <hgtimer_v4_counter_func_start+0x24>
            return RET_ERR;
18007866:	3000      	movi      	r0, 0
18007868:	2800      	subi      	r0, 1
1800786a:	07f7      	br      	0x18007858	// 18007858 <hgtimer_v4_counter_func_start+0x58>

1800786c <hgtimer_v4_counter_func_stop>:
{

    struct hgtimer_v4 *dev = (struct hgtimer_v4 *)timer;
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;

    if ((!dev->counter_en) || (dev->dsleep)) {
1800786c:	d8600026 	ld.b      	r3, (r0, 0x26)
18007870:	e4632084 	andi      	r3, r3, 132
18007874:	3b44      	cmpnei      	r3, 4
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;
18007876:	9043      	ld.w      	r2, (r0, 0xc)
    if ((!dev->counter_en) || (dev->dsleep)) {
18007878:	0806      	bt      	0x18007884	// 18007884 <hgtimer_v4_counter_func_stop+0x18>
        return RET_ERR;
    }

    hw->TMR_EN &= ~ LL_TIMER_EN_TMREN;
1800787a:	9261      	ld.w      	r3, (r2, 0x4)
1800787c:	3b80      	bclri      	r3, 0
1800787e:	b261      	st.w      	r3, (r2, 0x4)

    return RET_OK;
18007880:	3000      	movi      	r0, 0
}
18007882:	783c      	jmp      	r15
        return RET_ERR;
18007884:	3000      	movi      	r0, 0
18007886:	2800      	subi      	r0, 1
18007888:	07fd      	br      	0x18007882	// 18007882 <hgtimer_v4_counter_func_stop+0x16>
	...

1800788c <hgtimer_v4_irq_handler>:
/**********************************************************************************/
/*                          COUNTER FUNCTION END                                  */
/**********************************************************************************/

static void hgtimer_v4_irq_handler(void *data)
{
1800788c:	14d2      	push      	r4-r5, r15

    struct hgtimer_v4 *dev = (struct hgtimer_v4 *)data;
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;
1800788e:	90a3      	ld.w      	r5, (r0, 0xc)
{
18007890:	6d03      	mov      	r4, r0


    if ((hw->TMR_IE & LL_TIMER_IE_CMP_IE) && (hw->TMR_FLG & LL_TIMER_IE_CMP_FLG)) {
18007892:	9562      	ld.w      	r3, (r5, 0x8)
18007894:	e4632040 	andi      	r3, r3, 64
18007898:	e9030023 	bez      	r3, 0x180078de	// 180078de <hgtimer_v4_irq_handler+0x52>
1800789c:	9564      	ld.w      	r3, (r5, 0x10)
1800789e:	e4632040 	andi      	r3, r3, 64
180078a2:	e903001e 	bez      	r3, 0x180078de	// 180078de <hgtimer_v4_irq_handler+0x52>
        /* clear interrupt flag */
        hw->TMR_CLR = LL_TIMER_IE_CMP_CLR;
180078a6:	3340      	movi      	r3, 64
180078a8:	b565      	st.w      	r3, (r5, 0x14)

        /* pwm mode irq */
        if (dev->opened && dev->pwm_en && dev->_pwm_irq_hdl) {
180078aa:	d8600026 	ld.b      	r3, (r0, 0x26)
180078ae:	e4632048 	andi      	r3, r3, 72
180078b2:	eb430048 	cmpnei      	r3, 72
180078b6:	0807      	bt      	0x180078c4	// 180078c4 <hgtimer_v4_irq_handler+0x38>
180078b8:	9065      	ld.w      	r3, (r0, 0x14)
180078ba:	e9030005 	bez      	r3, 0x180078c4	// 180078c4 <hgtimer_v4_irq_handler+0x38>
            dev->_pwm_irq_hdl(PWM_IRQ_FLAG_COMPARE, dev->irq_data);
180078be:	9027      	ld.w      	r1, (r0, 0x1c)
180078c0:	3000      	movi      	r0, 0
180078c2:	7bcd      	jsr      	r3
        }

        /* counter mode irq */
        if (dev->opened && dev->counter_en && dev->_counter_irq_hdl) {
180078c4:	d8640026 	ld.b      	r3, (r4, 0x26)
180078c8:	e4632044 	andi      	r3, r3, 68
180078cc:	eb430044 	cmpnei      	r3, 68
180078d0:	0807      	bt      	0x180078de	// 180078de <hgtimer_v4_irq_handler+0x52>
180078d2:	9464      	ld.w      	r3, (r4, 0x10)
180078d4:	e9030005 	bez      	r3, 0x180078de	// 180078de <hgtimer_v4_irq_handler+0x52>
            dev->_counter_irq_hdl(dev->irq_data, TIMER_INTR_PERIOD);
180078d8:	3101      	movi      	r1, 1
180078da:	9407      	ld.w      	r0, (r4, 0x1c)
180078dc:	7bcd      	jsr      	r3
        }
    }


    if ((hw->TMR_IE & LL_TIMER_IE_PRD_IE) && (hw->TMR_FLG & LL_TIMER_IE_PRD_FLG)) {
180078de:	9562      	ld.w      	r3, (r5, 0x8)
180078e0:	e4632020 	andi      	r3, r3, 32
180078e4:	e9030033 	bez      	r3, 0x1800794a	// 1800794a <hgtimer_v4_irq_handler+0xbe>
180078e8:	9564      	ld.w      	r3, (r5, 0x10)
180078ea:	e4632020 	andi      	r3, r3, 32
180078ee:	e903002e 	bez      	r3, 0x1800794a	// 1800794a <hgtimer_v4_irq_handler+0xbe>
        /* clear interrupt flag */
        hw->TMR_CLR = LL_TIMER_IE_PRD_CLR;
180078f2:	3320      	movi      	r3, 32
180078f4:	b565      	st.w      	r3, (r5, 0x14)

        /* pwm mode irq */
        if (dev->opened && dev->pwm_en && dev->_pwm_irq_hdl) {
180078f6:	d8640026 	ld.b      	r3, (r4, 0x26)
180078fa:	e4632048 	andi      	r3, r3, 72
180078fe:	eb430048 	cmpnei      	r3, 72
18007902:	0807      	bt      	0x18007910	// 18007910 <hgtimer_v4_irq_handler+0x84>
18007904:	9465      	ld.w      	r3, (r4, 0x14)
18007906:	e9030005 	bez      	r3, 0x18007910	// 18007910 <hgtimer_v4_irq_handler+0x84>
            dev->_pwm_irq_hdl(PWM_IRQ_FLAG_PERIOD, dev->irq_data);
1800790a:	9427      	ld.w      	r1, (r4, 0x1c)
1800790c:	3001      	movi      	r0, 1
1800790e:	7bcd      	jsr      	r3
        }

        /* counter mode irq */
        if (dev->opened && dev->counter_en) {
18007910:	d8640026 	ld.b      	r3, (r4, 0x26)
18007914:	748c      	zextb      	r2, r3
18007916:	e4222044 	andi      	r1, r2, 68
1800791a:	eb410044 	cmpnei      	r1, 68
1800791e:	0816      	bt      	0x1800794a	// 1800794a <hgtimer_v4_irq_handler+0xbe>
            if (dev->counter_once_en) {
18007920:	e4422001 	andi      	r2, r2, 1
18007924:	e902000d 	bez      	r2, 0x1800793e	// 1800793e <hgtimer_v4_irq_handler+0xb2>
                dev->counter_once_en = 0;
18007928:	3200      	movi      	r2, 0
1800792a:	c4625c00 	ins      	r3, r2, 0, 0
1800792e:	dc640026 	st.b      	r3, (r4, 0x26)

                /* close timer & interrupt */
                hw->TMR_EN &= ~ LL_TIMER_EN_TMREN;
18007932:	9561      	ld.w      	r3, (r5, 0x4)
18007934:	3b80      	bclri      	r3, 0
18007936:	b561      	st.w      	r3, (r5, 0x4)
                hw->TMR_IE &= ~ LL_TIMER_IE_PRD_IE;
18007938:	9562      	ld.w      	r3, (r5, 0x8)
1800793a:	3b85      	bclri      	r3, 5
1800793c:	b562      	st.w      	r3, (r5, 0x8)
            }
            if (dev->_counter_irq_hdl) {
1800793e:	9464      	ld.w      	r3, (r4, 0x10)
18007940:	e9030005 	bez      	r3, 0x1800794a	// 1800794a <hgtimer_v4_irq_handler+0xbe>
                dev->_counter_irq_hdl(dev->irq_data, TIMER_INTR_PERIOD);
18007944:	3101      	movi      	r1, 1
18007946:	9407      	ld.w      	r0, (r4, 0x1c)
18007948:	7bcd      	jsr      	r3
        }
    }



    if ((hw->TMR_IE & LL_TIMER_IE_OVF_IE) && (hw->TMR_FLG & LL_TIMER_IE_OVF_FLG)) {
1800794a:	9562      	ld.w      	r3, (r5, 0x8)
1800794c:	e4632010 	andi      	r3, r3, 16
18007950:	e9030016 	bez      	r3, 0x1800797c	// 1800797c <hgtimer_v4_irq_handler+0xf0>
18007954:	9564      	ld.w      	r3, (r5, 0x10)
18007956:	e4632010 	andi      	r3, r3, 16
1800795a:	e9030011 	bez      	r3, 0x1800797c	// 1800797c <hgtimer_v4_irq_handler+0xf0>
        /* clear interrupt flag */
        hw->TMR_CLR = LL_TIMER_IE_OVF_CLR;
1800795e:	3310      	movi      	r3, 16
18007960:	b565      	st.w      	r3, (r5, 0x14)

        /* capture mode irq */
        if (dev->opened && dev->cap_en && dev->_capture_irq_hdl) {
18007962:	d8640026 	ld.b      	r3, (r4, 0x26)
18007966:	e4632050 	andi      	r3, r3, 80
1800796a:	eb430050 	cmpnei      	r3, 80
1800796e:	0807      	bt      	0x1800797c	// 1800797c <hgtimer_v4_irq_handler+0xf0>
18007970:	9466      	ld.w      	r3, (r4, 0x18)
18007972:	e9030005 	bez      	r3, 0x1800797c	// 1800797c <hgtimer_v4_irq_handler+0xf0>
            dev->_capture_irq_hdl(CAPTURE_IRQ_FLAG_OVERFLOW, dev->irq_data);
18007976:	9427      	ld.w      	r1, (r4, 0x1c)
18007978:	3001      	movi      	r0, 1
1800797a:	7bcd      	jsr      	r3
        }
    }


    if ((hw->TMR_IE & LL_TIMER_IE_CAP1_IE) && (hw->TMR_FLG & LL_TIMER_IE_CAP1_FLG)) {
1800797c:	9562      	ld.w      	r3, (r5, 0x8)
1800797e:	e4632001 	andi      	r3, r3, 1
18007982:	e9030016 	bez      	r3, 0x180079ae	// 180079ae <hgtimer_v4_irq_handler+0x122>
18007986:	9564      	ld.w      	r3, (r5, 0x10)
18007988:	e4632001 	andi      	r3, r3, 1
1800798c:	e9030011 	bez      	r3, 0x180079ae	// 180079ae <hgtimer_v4_irq_handler+0x122>
        /* clear interrupt flag */
        hw->TMR_CLR = LL_TIMER_IE_CAP1_CLR;
18007990:	3301      	movi      	r3, 1
18007992:	b565      	st.w      	r3, (r5, 0x14)

        /* capture mode irq */
        if (dev->opened && dev->cap_en && dev->_capture_irq_hdl) {
18007994:	d8640026 	ld.b      	r3, (r4, 0x26)
18007998:	e4632050 	andi      	r3, r3, 80
1800799c:	eb430050 	cmpnei      	r3, 80
180079a0:	0807      	bt      	0x180079ae	// 180079ae <hgtimer_v4_irq_handler+0x122>
180079a2:	9466      	ld.w      	r3, (r4, 0x18)
180079a4:	e9030005 	bez      	r3, 0x180079ae	// 180079ae <hgtimer_v4_irq_handler+0x122>
            dev->_capture_irq_hdl(CAPTURE_IRQ_FLAG_CAPTURE, hw->TMR_CAP1);
180079a8:	9526      	ld.w      	r1, (r5, 0x18)
180079aa:	3000      	movi      	r0, 0
180079ac:	7bcd      	jsr      	r3
        }
    }
}
180079ae:	1492      	pop      	r4-r5, r15

180079b0 <hgtimer_v4_counter_func_open>:
{
180079b0:	14d4      	push      	r4-r7, r15
    if (dev->opened) {
180079b2:	d8600026 	ld.b      	r3, (r0, 0x26)
180079b6:	e4432040 	andi      	r2, r3, 64
{
180079ba:	6dc3      	mov      	r7, r0
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;
180079bc:	9083      	ld.w      	r4, (r0, 0xc)
    if (dev->opened) {
180079be:	e9020005 	bez      	r2, 0x180079c8	// 180079c8 <hgtimer_v4_counter_func_open+0x18>
        if (!dev->dsleep) {
180079c2:	74ce      	sextb      	r3, r3
180079c4:	e9a3005e 	bhsz      	r3, 0x18007a80	// 18007a80 <hgtimer_v4_counter_func_open+0xd0>
    switch (param) {
180079c8:	e9010007 	bez      	r1, 0x180079d6	// 180079d6 <hgtimer_v4_counter_func_open+0x26>
180079cc:	3941      	cmpnei      	r1, 1
180079ce:	0c3d      	bf      	0x18007a48	// 18007a48 <hgtimer_v4_counter_func_open+0x98>
        return RET_ERR;
180079d0:	3000      	movi      	r0, 0
180079d2:	2800      	subi      	r0, 1
180079d4:	0439      	br      	0x18007a46	// 18007a46 <hgtimer_v4_counter_func_open+0x96>
            dev->type = HGTIMER_V4_TYPE_ONCE;
180079d6:	3301      	movi      	r3, 1
            dev->type = HGTIMER_V4_TYPE_PERIODIC;
180079d8:	af72      	st.h      	r3, (r7, 0x24)
    if (TIMER0_BASE == (uint32)hw) {
180079da:	116d      	lrw      	r3, 0x40015100	// 18007a8c <hgtimer_v4_counter_func_open+0xdc>
180079dc:	64d2      	cmpne      	r4, r3
180079de:	0837      	bt      	0x18007a4c	// 18007a4c <hgtimer_v4_counter_func_open+0x9c>
        sysctrl_tmr0_clk_open();
180079e0:	ea224002 	movih      	r2, 16386
180079e4:	9273      	ld.w      	r3, (r2, 0x4c)
180079e6:	3bbd      	bseti      	r3, 29
        sysctrl_tmr3_clk_open();
180079e8:	b273      	st.w      	r3, (r2, 0x4c)
    hw->TMR_CON     = 0;
180079ea:	3500      	movi      	r5, 0
    hw->TMR_FLG     = 0xFFFFFFFF;
180079ec:	6d97      	mov      	r6, r5
180079ee:	2e00      	subi      	r6, 1
    hw->TMR_CON     = 0;
180079f0:	b4a0      	st.w      	r5, (r4, 0x0)
    irq_enable(dev->irq_num);
180079f2:	9708      	ld.w      	r0, (r7, 0x20)
    hw->TMR_EN      = 0;
180079f4:	b4a1      	st.w      	r5, (r4, 0x4)
    hw->TMR_CAP1    = 0;
180079f6:	b4a6      	st.w      	r5, (r4, 0x18)
    hw->TMR_CAP2    = 0;
180079f8:	b4a7      	st.w      	r5, (r4, 0x1c)
    hw->TMR_CAP3    = 0;
180079fa:	b4a8      	st.w      	r5, (r4, 0x20)
    hw->TMR_CAP4    = 0;
180079fc:	b4a9      	st.w      	r5, (r4, 0x24)
    hw->TMR_CNT     = 0;
180079fe:	b4a3      	st.w      	r5, (r4, 0xc)
    hw->TMR_DADR    = 0;
18007a00:	b4ab      	st.w      	r5, (r4, 0x2c)
    hw->TMR_DCNT    = 0;
18007a02:	b4ad      	st.w      	r5, (r4, 0x34)
    hw->TMR_DCTL    = 0;
18007a04:	b4aa      	st.w      	r5, (r4, 0x28)
    hw->TMR_DLEN    = 0;
18007a06:	b4ac      	st.w      	r5, (r4, 0x30)
    hw->TMR_FLG     = 0xFFFFFFFF;
18007a08:	b4c4      	st.w      	r6, (r4, 0x10)
    hw->TMR_CLR     = 0xFFFFFFFF;
18007a0a:	b4c5      	st.w      	r6, (r4, 0x14)
    hw->TMR_IE      = 0;
18007a0c:	b4a2      	st.w      	r5, (r4, 0x8)
    hw->TMR_IR_BCNT = 0;
18007a0e:	b4ae      	st.w      	r5, (r4, 0x38)
    irq_enable(dev->irq_num);
18007a10:	e3fffe94 	bsr      	0x18007738	// 18007738 <csi_vic_enable_irq>
    switch (dev->type) {
18007a14:	8f72      	ld.h      	r3, (r7, 0x24)
18007a16:	3b04      	cmphsi      	r3, 5
18007a18:	0837      	bt      	0x18007a86	// 18007a86 <hgtimer_v4_counter_func_open+0xd6>
18007a1a:	3201      	movi      	r2, 1
18007a1c:	c4624023 	lsl      	r3, r2, r3
18007a20:	e4632016 	andi      	r3, r3, 22
18007a24:	e9030031 	bez      	r3, 0x18007a86	// 18007a86 <hgtimer_v4_counter_func_open+0xd6>
            hw->TMR_CON = LL_TIMER_CON_INC_SRC_SEL(0) | \
18007a28:	b4a0      	st.w      	r5, (r4, 0x0)
            hw->TMR_IE  = 0;
18007a2a:	b4a2      	st.w      	r5, (r4, 0x8)
            hw->TMR_EN  = 0;
18007a2c:	b4a1      	st.w      	r5, (r4, 0x4)
            hw->TMR_CNT = 0;
18007a2e:	b4a3      	st.w      	r5, (r4, 0xc)
    dev->opened     = 1;
18007a30:	d8670026 	ld.b      	r3, (r7, 0x26)
18007a34:	c4625c06 	ins      	r3, r2, 6, 6
    dev->counter_en = 1;
18007a38:	c4625c02 	ins      	r3, r2, 2, 2
    dev->dsleep     = 0;
18007a3c:	c4655c07 	ins      	r3, r5, 7, 7
18007a40:	dc670026 	st.b      	r3, (r7, 0x26)
    return RET_OK;
18007a44:	6c17      	mov      	r0, r5
}
18007a46:	1494      	pop      	r4-r7, r15
            dev->type = HGTIMER_V4_TYPE_PERIODIC;
18007a48:	3302      	movi      	r3, 2
18007a4a:	07c7      	br      	0x180079d8	// 180079d8 <hgtimer_v4_counter_func_open+0x28>
    } else if (TIMER1_BASE == (uint32)hw) {
18007a4c:	1071      	lrw      	r3, 0x40015200	// 18007a90 <hgtimer_v4_counter_func_open+0xe0>
18007a4e:	64d2      	cmpne      	r4, r3
18007a50:	0807      	bt      	0x18007a5e	// 18007a5e <hgtimer_v4_counter_func_open+0xae>
        sysctrl_tmr1_clk_open();
18007a52:	ea224002 	movih      	r2, 16386
18007a56:	9273      	ld.w      	r3, (r2, 0x4c)
18007a58:	ec631000 	ori      	r3, r3, 4096
18007a5c:	07c6      	br      	0x180079e8	// 180079e8 <hgtimer_v4_counter_func_open+0x38>
    } else if (TIMER2_BASE == (uint32)hw) {
18007a5e:	106e      	lrw      	r3, 0x40015300	// 18007a94 <hgtimer_v4_counter_func_open+0xe4>
18007a60:	64d2      	cmpne      	r4, r3
18007a62:	0807      	bt      	0x18007a70	// 18007a70 <hgtimer_v4_counter_func_open+0xc0>
        sysctrl_tmr2_clk_open();
18007a64:	ea224002 	movih      	r2, 16386
18007a68:	9273      	ld.w      	r3, (r2, 0x4c)
18007a6a:	ec630100 	ori      	r3, r3, 256
18007a6e:	07bd      	br      	0x180079e8	// 180079e8 <hgtimer_v4_counter_func_open+0x38>
    } else if (TIMER3_BASE == (uint32)hw) {
18007a70:	106a      	lrw      	r3, 0x40015400	// 18007a98 <hgtimer_v4_counter_func_open+0xe8>
18007a72:	64d2      	cmpne      	r4, r3
18007a74:	0bbb      	bt      	0x180079ea	// 180079ea <hgtimer_v4_counter_func_open+0x3a>
        sysctrl_tmr3_clk_open();
18007a76:	ea224002 	movih      	r2, 16386
18007a7a:	9273      	ld.w      	r3, (r2, 0x4c)
18007a7c:	3bba      	bseti      	r3, 26
18007a7e:	07b5      	br      	0x180079e8	// 180079e8 <hgtimer_v4_counter_func_open+0x38>
            return -EBUSY;
18007a80:	3000      	movi      	r0, 0
18007a82:	280f      	subi      	r0, 16
18007a84:	07e1      	br      	0x18007a46	// 18007a46 <hgtimer_v4_counter_func_open+0x96>
            return RET_ERR;
18007a86:	6c1b      	mov      	r0, r6
18007a88:	07df      	br      	0x18007a46	// 18007a46 <hgtimer_v4_counter_func_open+0x96>
18007a8a:	0000      	.short	0x0000
18007a8c:	40015100 	.long	0x40015100
18007a90:	40015200 	.long	0x40015200
18007a94:	40015300 	.long	0x40015300
18007a98:	40015400 	.long	0x40015400

18007a9c <hgtimer_v4_counter_func_ioctl>:
{
18007a9c:	14d3      	push      	r4-r6, r15
    switch (cmd) {
18007a9e:	3943      	cmpnei      	r1, 3
{
18007aa0:	6d03      	mov      	r4, r0
18007aa2:	6d4b      	mov      	r5, r2
    switch (cmd) {
18007aa4:	0d8b      	bf      	0x18007dba	// 18007dba <hgtimer_v4_counter_func_ioctl+0x31e>
18007aa6:	3903      	cmphsi      	r1, 4
18007aa8:	0806      	bt      	0x18007ab4	// 18007ab4 <hgtimer_v4_counter_func_ioctl+0x18>
18007aaa:	3942      	cmpnei      	r1, 2
18007aac:	0d73      	bf      	0x18007d92	// 18007d92 <hgtimer_v4_counter_func_ioctl+0x2f6>
            ret_val = RET_ERR;
18007aae:	3000      	movi      	r0, 0
18007ab0:	2800      	subi      	r0, 1
18007ab2:	045e      	br      	0x18007b6e	// 18007b6e <hgtimer_v4_counter_func_ioctl+0xd2>
    switch (cmd) {
18007ab4:	eb410040 	cmpnei      	r1, 64
18007ab8:	0c1c      	bf      	0x18007af0	// 18007af0 <hgtimer_v4_counter_func_ioctl+0x54>
18007aba:	eb410080 	cmpnei      	r1, 128
18007abe:	0bf8      	bt      	0x18007aae	// 18007aae <hgtimer_v4_counter_func_ioctl+0x12>
    if (!config) {
18007ac0:	e902018e 	bez      	r2, 0x18007ddc	// 18007ddc <hgtimer_v4_counter_func_ioctl+0x340>
    hgtimer_v4_cap_func_cmd = hgtimer_v4_capture_switch_func_cmd(p_config->func_cmd);
18007ac4:	8a64      	ld.h      	r3, (r2, 0x8)
18007ac6:	2b80      	subi      	r3, 129
18007ac8:	3b08      	cmphsi      	r3, 9
18007aca:	0989      	bt      	0x18007ddc	// 18007ddc <hgtimer_v4_counter_func_ioctl+0x340>
    switch (hgtimer_v4_cap_func_cmd) {
18007acc:	1047      	lrw      	r2, 0x18016a24	// 18007ae8 <hgtimer_v4_counter_func_ioctl+0x4c>
18007ace:	d0620023 	ldr.b      	r3, (r2, r3 << 0)
18007ad2:	237e      	addi      	r3, 127
18007ad4:	74cc      	zextb      	r3, r3
18007ad6:	3b06      	cmphsi      	r3, 7
18007ad8:	0985      	bt      	0x18007de2	// 18007de2 <hgtimer_v4_counter_func_ioctl+0x346>
18007ada:	1045      	lrw      	r2, 0x180169cc	// 18007aec <hgtimer_v4_counter_func_ioctl+0x50>
18007adc:	d0620882 	ldr.w      	r2, (r2, r3 << 2)
18007ae0:	d8600026 	ld.b      	r3, (r0, 0x26)
18007ae4:	7808      	jmp      	r2
18007ae6:	0000      	.short	0x0000
18007ae8:	18016a24 	.long	0x18016a24
18007aec:	180169cc 	.long	0x180169cc
    if (!config) {
18007af0:	e9020176 	bez      	r2, 0x18007ddc	// 18007ddc <hgtimer_v4_counter_func_ioctl+0x340>
18007af4:	9264      	ld.w      	r3, (r2, 0x10)
18007af6:	2b40      	subi      	r3, 65
18007af8:	3b0e      	cmphsi      	r3, 15
18007afa:	0971      	bt      	0x18007ddc	// 18007ddc <hgtimer_v4_counter_func_ioctl+0x340>
18007afc:	1048      	lrw      	r2, 0x18016a2d	// 18007b1c <hgtimer_v4_counter_func_ioctl+0x80>
18007afe:	d0621023 	ldr.bs      	r3, (r2, r3 << 0)
    if ((-1) == hgtimer_v4_pwm_func_cmd) {
18007b02:	3200      	movi      	r2, 0
18007b04:	2a00      	subi      	r2, 1
18007b06:	648e      	cmpne      	r3, r2
18007b08:	0d6a      	bf      	0x18007ddc	// 18007ddc <hgtimer_v4_counter_func_ioctl+0x340>
    switch (hgtimer_v4_pwm_func_cmd) {
18007b0a:	2b40      	subi      	r3, 65
18007b0c:	74cc      	zextb      	r3, r3
18007b0e:	3b0e      	cmphsi      	r3, 15
18007b10:	0969      	bt      	0x18007de2	// 18007de2 <hgtimer_v4_counter_func_ioctl+0x346>
18007b12:	1044      	lrw      	r2, 0x180169e8	// 18007b20 <hgtimer_v4_counter_func_ioctl+0x84>
18007b14:	d0620883 	ldr.w      	r3, (r2, r3 << 2)
18007b18:	780c      	jmp      	r3
18007b1a:	0000      	.short	0x0000
18007b1c:	18016a2d 	.long	0x18016a2d
18007b20:	180169e8 	.long	0x180169e8
    if (dev->opened) {
18007b24:	d8600026 	ld.b      	r3, (r0, 0x26)
18007b28:	e4432040 	andi      	r2, r3, 64
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;
18007b2c:	90c3      	ld.w      	r6, (r0, 0xc)
    if (dev->opened) {
18007b2e:	e9020005 	bez      	r2, 0x18007b38	// 18007b38 <hgtimer_v4_counter_func_ioctl+0x9c>
        if (!dev->dsleep) {
18007b32:	74ce      	sextb      	r3, r3
18007b34:	e9a3015b 	bhsz      	r3, 0x18007dea	// 18007dea <hgtimer_v4_counter_func_ioctl+0x34e>
    if (pin_func(dev->dev.dev.dev_id, 1) != RET_OK) {
18007b38:	3101      	movi      	r1, 1
18007b3a:	9400      	ld.w      	r0, (r4, 0x0)
18007b3c:	e3ffe2f6 	bsr      	0x18004128	// 18004128 <pin_func>
18007b40:	e920ffb7 	bnez      	r0, 0x18007aae	// 18007aae <hgtimer_v4_counter_func_ioctl+0x12>
    if ((p_config->duty < 0) || ((p_config->duty) > (p_config->period))) {
18007b44:	9561      	ld.w      	r3, (r5, 0x4)
18007b46:	9520      	ld.w      	r1, (r5, 0x0)
18007b48:	64c4      	cmphs      	r1, r3
18007b4a:	0fb2      	bf      	0x18007aae	// 18007aae <hgtimer_v4_counter_func_ioctl+0x12>
    hw->TMR_CON = LL_TIMER_CON_INC_SRC_SEL(0) | \
18007b4c:	3201      	movi      	r2, 1
18007b4e:	b640      	st.w      	r2, (r6, 0x0)
    hw->TMR_IE  = 0;
18007b50:	b602      	st.w      	r0, (r6, 0x8)
    hw->TMR_EN  = 0;
18007b52:	b601      	st.w      	r0, (r6, 0x4)
    hw->TMR_CAP1 = p_config->period;
18007b54:	b626      	st.w      	r1, (r6, 0x18)
    hw->TMR_CAP3 = p_config->period;
18007b56:	b628      	st.w      	r1, (r6, 0x20)
    hw->TMR_CAP2 = p_config->duty;
18007b58:	b667      	st.w      	r3, (r6, 0x1c)
    hw->TMR_CAP4 = p_config->duty;
18007b5a:	b669      	st.w      	r3, (r6, 0x24)
    hw->TMR_CNT = 0;
18007b5c:	b603      	st.w      	r0, (r6, 0xc)
    dev->opened = 1;
18007b5e:	d8640026 	ld.b      	r3, (r4, 0x26)
18007b62:	c4625c06 	ins      	r3, r2, 6, 6
    dev->pwm_en = 1;
18007b66:	c4625c03 	ins      	r3, r2, 3, 3
    dev->pwm_en   = 0;
18007b6a:	dc640026 	st.b      	r3, (r4, 0x26)
}
18007b6e:	1493      	pop      	r4-r6, r15
    if ((!dev->opened) || (!dev->pwm_en)) {
18007b70:	d8600026 	ld.b      	r3, (r0, 0x26)
18007b74:	e4632048 	andi      	r3, r3, 72
18007b78:	eb430048 	cmpnei      	r3, 72
18007b7c:	082e      	bt      	0x18007bd8	// 18007bd8 <hgtimer_v4_counter_func_ioctl+0x13c>
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;
18007b7e:	90a3      	ld.w      	r5, (r0, 0xc)
    irq_disable(dev->irq_num);
18007b80:	9008      	ld.w      	r0, (r0, 0x20)
18007b82:	e3fffde9 	bsr      	0x18007754	// 18007754 <csi_vic_disable_irq>
    pin_func(dev->dev.dev.dev_id, 0);
18007b86:	3100      	movi      	r1, 0
18007b88:	9400      	ld.w      	r0, (r4, 0x0)
18007b8a:	e3ffe2cf 	bsr      	0x18004128	// 18004128 <pin_func>
    hw->TMR_EN   &= ~ LL_TIMER_EN_TMREN;
18007b8e:	9561      	ld.w      	r3, (r5, 0x4)
    hw->TMR_CON   = 0x00000000;
18007b90:	3000      	movi      	r0, 0
    hw->TMR_EN   &= ~ LL_TIMER_EN_TMREN;
18007b92:	3b80      	bclri      	r3, 0
18007b94:	b561      	st.w      	r3, (r5, 0x4)
    hw->TMR_CLR   = 0xffffffff;
18007b96:	6cc3      	mov      	r3, r0
18007b98:	2b00      	subi      	r3, 1
    hw->TMR_CON   = 0x00000000;
18007b9a:	b500      	st.w      	r0, (r5, 0x0)
    hw->TMR_CLR   = 0xffffffff;
18007b9c:	b565      	st.w      	r3, (r5, 0x14)
    hw->TMR_CNT   = 0;
18007b9e:	b503      	st.w      	r0, (r5, 0xc)
    dev->opened   = 0;
18007ba0:	d8640026 	ld.b      	r3, (r4, 0x26)
    dev->pwm_en   = 0;
18007ba4:	e46320bf 	andi      	r3, r3, 191
18007ba8:	c4605c03 	ins      	r3, r0, 3, 3
18007bac:	07df      	br      	0x18007b6a	// 18007b6a <hgtimer_v4_counter_func_ioctl+0xce>
    if ((!dev->pwm_en) || (dev->dsleep)) {
18007bae:	d8600026 	ld.b      	r3, (r0, 0x26)
18007bb2:	e4632088 	andi      	r3, r3, 136
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;
18007bb6:	9043      	ld.w      	r2, (r0, 0xc)
    if ((!dev->pwm_en) || (dev->dsleep)) {
18007bb8:	3b48      	cmpnei      	r3, 8
    if ((!dev->cap_en) || (dev->dsleep)) {
18007bba:	0b7a      	bt      	0x18007aae	// 18007aae <hgtimer_v4_counter_func_ioctl+0x12>
    hw->TMR_EN |= LL_TIMER_EN_TMREN;
18007bbc:	9261      	ld.w      	r3, (r2, 0x4)
18007bbe:	ec630001 	ori      	r3, r3, 1
18007bc2:	040a      	br      	0x18007bd6	// 18007bd6 <hgtimer_v4_counter_func_ioctl+0x13a>
    if ((!dev->pwm_en) || (dev->dsleep)) {
18007bc4:	d8600026 	ld.b      	r3, (r0, 0x26)
18007bc8:	e4632088 	andi      	r3, r3, 136
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;
18007bcc:	9043      	ld.w      	r2, (r0, 0xc)
    if ((!dev->pwm_en) || (dev->dsleep)) {
18007bce:	3b48      	cmpnei      	r3, 8
18007bd0:	0b6f      	bt      	0x18007aae	// 18007aae <hgtimer_v4_counter_func_ioctl+0x12>
    hw->TMR_EN &= ~ LL_TIMER_EN_TMREN;
18007bd2:	9261      	ld.w      	r3, (r2, 0x4)
18007bd4:	3b80      	bclri      	r3, 0
18007bd6:	b261      	st.w      	r3, (r2, 0x4)
            ret_val = hgtimer_v4_capture_func_deinit(dev, p_config);
18007bd8:	3000      	movi      	r0, 0
    return ret_val;
18007bda:	07ca      	br      	0x18007b6e	// 18007b6e <hgtimer_v4_counter_func_ioctl+0xd2>
    if ((!dev->pwm_en) || (dev->dsleep)) {
18007bdc:	d8600026 	ld.b      	r3, (r0, 0x26)
18007be0:	e4632088 	andi      	r3, r3, 136
18007be4:	3b48      	cmpnei      	r3, 8
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;
18007be6:	9043      	ld.w      	r2, (r0, 0xc)
    if ((!dev->pwm_en) || (dev->dsleep)) {
18007be8:	0b63      	bt      	0x18007aae	// 18007aae <hgtimer_v4_counter_func_ioctl+0x12>
    if ((p_config->duty < 0) || ((p_config->duty) > (p_config->period))) {
18007bea:	9561      	ld.w      	r3, (r5, 0x4)
18007bec:	9520      	ld.w      	r1, (r5, 0x0)
18007bee:	64c4      	cmphs      	r1, r3
18007bf0:	0f5f      	bf      	0x18007aae	// 18007aae <hgtimer_v4_counter_func_ioctl+0x12>
    hw->TMR_CAP3 = p_config->period;
18007bf2:	b228      	st.w      	r1, (r2, 0x20)
    hw->TMR_CAP4 = p_config->duty;
18007bf4:	b269      	st.w      	r3, (r2, 0x24)
18007bf6:	07f1      	br      	0x18007bd8	// 18007bd8 <hgtimer_v4_counter_func_ioctl+0x13c>
    if ((!dev->pwm_en) || (dev->dsleep)) {
18007bf8:	d8600026 	ld.b      	r3, (r0, 0x26)
18007bfc:	e4632088 	andi      	r3, r3, 136
18007c00:	3b48      	cmpnei      	r3, 8
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;
18007c02:	9043      	ld.w      	r2, (r0, 0xc)
    if ((!dev->pwm_en) || (dev->dsleep)) {
18007c04:	0b55      	bt      	0x18007aae	// 18007aae <hgtimer_v4_counter_func_ioctl+0x12>
    dev->_pwm_irq_hdl = p_config->irq_hdl;
18007c06:	9562      	ld.w      	r3, (r5, 0x8)
18007c08:	b065      	st.w      	r3, (r0, 0x14)
    dev->irq_data     = p_config->irq_data;
18007c0a:	9563      	ld.w      	r3, (r5, 0xc)
18007c0c:	b067      	st.w      	r3, (r0, 0x1c)
    hw->TMR_IE       |= LL_TIMER_IE_CMP_IE;
18007c0e:	9262      	ld.w      	r3, (r2, 0x8)
18007c10:	ec630040 	ori      	r3, r3, 64
    hw->TMR_IE           |= LL_TIMER_IE_OVF_IE;
18007c14:	b262      	st.w      	r3, (r2, 0x8)
    irq_enable(dev->irq_num);
18007c16:	9408      	ld.w      	r0, (r4, 0x20)
18007c18:	e3fffd90 	bsr      	0x18007738	// 18007738 <csi_vic_enable_irq>
18007c1c:	07de      	br      	0x18007bd8	// 18007bd8 <hgtimer_v4_counter_func_ioctl+0x13c>
    if ((!dev->pwm_en) || (dev->dsleep)) {
18007c1e:	d8600026 	ld.b      	r3, (r0, 0x26)
18007c22:	e4632088 	andi      	r3, r3, 136
18007c26:	3b48      	cmpnei      	r3, 8
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;
18007c28:	9043      	ld.w      	r2, (r0, 0xc)
    if ((!dev->pwm_en) || (dev->dsleep)) {
18007c2a:	0b42      	bt      	0x18007aae	// 18007aae <hgtimer_v4_counter_func_ioctl+0x12>
    dev->_pwm_irq_hdl = p_config->irq_hdl;
18007c2c:	9562      	ld.w      	r3, (r5, 0x8)
18007c2e:	b065      	st.w      	r3, (r0, 0x14)
    dev->irq_data     = p_config->irq_data;
18007c30:	9563      	ld.w      	r3, (r5, 0xc)
18007c32:	b067      	st.w      	r3, (r0, 0x1c)
    hw->TMR_IE       |= LL_TIMER_IE_PRD_IE;
18007c34:	9262      	ld.w      	r3, (r2, 0x8)
18007c36:	ec630020 	ori      	r3, r3, 32
18007c3a:	07ed      	br      	0x18007c14	// 18007c14 <hgtimer_v4_counter_func_ioctl+0x178>
    if ((!dev->pwm_en) || (dev->dsleep)) {
18007c3c:	d8600026 	ld.b      	r3, (r0, 0x26)
18007c40:	e4632088 	andi      	r3, r3, 136
18007c44:	3b48      	cmpnei      	r3, 8
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;
18007c46:	90a3      	ld.w      	r5, (r0, 0xc)
    if ((!dev->pwm_en) || (dev->dsleep)) {
18007c48:	0b33      	bt      	0x18007aae	// 18007aae <hgtimer_v4_counter_func_ioctl+0x12>
    irq_disable(dev->irq_num);
18007c4a:	9008      	ld.w      	r0, (r0, 0x20)
18007c4c:	e3fffd84 	bsr      	0x18007754	// 18007754 <csi_vic_disable_irq>
    dev->_pwm_irq_hdl = NULL;
18007c50:	3000      	movi      	r0, 0
18007c52:	b405      	st.w      	r0, (r4, 0x14)
    dev->irq_data         = 0;
18007c54:	b407      	st.w      	r0, (r4, 0x1c)
    hw->TMR_IE            = 0;
18007c56:	b502      	st.w      	r0, (r5, 0x8)
18007c58:	078b      	br      	0x18007b6e	// 18007b6e <hgtimer_v4_counter_func_ioctl+0xd2>
    if ((!dev->pwm_en) || (dev->dsleep)) {
18007c5a:	d8600026 	ld.b      	r3, (r0, 0x26)
18007c5e:	e4632088 	andi      	r3, r3, 136
18007c62:	3b48      	cmpnei      	r3, 8
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;
18007c64:	9023      	ld.w      	r1, (r0, 0xc)
    if ((!dev->pwm_en) || (dev->dsleep)) {
18007c66:	0b24      	bt      	0x18007aae	// 18007aae <hgtimer_v4_counter_func_ioctl+0x12>
	hw->TMR_CON = (hw->TMR_CON &~ (LL_TIMER_CON_PSC(0x7))) | (LL_TIMER_CON_PSC(p_config->param1));
18007c68:	9565      	ld.w      	r3, (r5, 0x14)
18007c6a:	3000      	movi      	r0, 0
18007c6c:	9140      	ld.w      	r2, (r1, 0x0)
18007c6e:	4365      	lsli      	r3, r3, 5
18007c70:	28e0      	subi      	r0, 225
18007c72:	e46320ff 	andi      	r3, r3, 255
18007c76:	6880      	and      	r2, r0
18007c78:	6cc8      	or      	r3, r2
18007c7a:	b160      	st.w      	r3, (r1, 0x0)
18007c7c:	07ae      	br      	0x18007bd8	// 18007bd8 <hgtimer_v4_counter_func_ioctl+0x13c>
    if ((!dev->pwm_en) || (dev->dsleep)) {
18007c7e:	d8400026 	ld.b      	r2, (r0, 0x26)
18007c82:	e4422088 	andi      	r2, r2, 136
18007c86:	3a48      	cmpnei      	r2, 8
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;
18007c88:	9063      	ld.w      	r3, (r0, 0xc)
    if ((!dev->pwm_en) || (dev->dsleep)) {
18007c8a:	0b12      	bt      	0x18007aae	// 18007aae <hgtimer_v4_counter_func_ioctl+0x12>
	hw->TMR_EN  &=~ LL_TIMER_EN_TMREN;
18007c8c:	9341      	ld.w      	r2, (r3, 0x4)
18007c8e:	3a80      	bclri      	r2, 0
18007c90:	b341      	st.w      	r2, (r3, 0x4)
	hw->TMR_CAP1 = p_config->period;
18007c92:	9520      	ld.w      	r1, (r5, 0x0)
	hw->TMR_CAP2 = p_config->duty;
18007c94:	9541      	ld.w      	r2, (r5, 0x4)
	hw->TMR_CNT  = 0;
18007c96:	3000      	movi      	r0, 0
18007c98:	b303      	st.w      	r0, (r3, 0xc)
	hw->TMR_CAP1 = p_config->period;
18007c9a:	b326      	st.w      	r1, (r3, 0x18)
	hw->TMR_CAP2 = p_config->duty;
18007c9c:	b347      	st.w      	r2, (r3, 0x1c)
	hw->TMR_CAP3 = p_config->period;
18007c9e:	b328      	st.w      	r1, (r3, 0x20)
	hw->TMR_CAP4 = p_config->duty;
18007ca0:	b349      	st.w      	r2, (r3, 0x24)
	hw->TMR_CLR  = 0xFFFFFFFF;
18007ca2:	6c83      	mov      	r2, r0
18007ca4:	2a00      	subi      	r2, 1
	hw->TMR_CNT  = 0;
18007ca6:	b303      	st.w      	r0, (r3, 0xc)
	hw->TMR_CLR  = 0xFFFFFFFF;
18007ca8:	b345      	st.w      	r2, (r3, 0x14)
	hw->TMR_EN   = LL_TIMER_EN_TMREN;
18007caa:	3201      	movi      	r2, 1
18007cac:	b341      	st.w      	r2, (r3, 0x4)
18007cae:	0760      	br      	0x18007b6e	// 18007b6e <hgtimer_v4_counter_func_ioctl+0xd2>
    if (dev->opened) {
18007cb0:	74cc      	zextb      	r3, r3
18007cb2:	e4432040 	andi      	r2, r3, 64
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;
18007cb6:	90c3      	ld.w      	r6, (r0, 0xc)
    if (dev->opened) {
18007cb8:	e9020005 	bez      	r2, 0x18007cc2	// 18007cc2 <hgtimer_v4_counter_func_ioctl+0x226>
        if (!dev->dsleep) {
18007cbc:	74ce      	sextb      	r3, r3
18007cbe:	e9a30096 	bhsz      	r3, 0x18007dea	// 18007dea <hgtimer_v4_counter_func_ioctl+0x34e>
    if (pin_func(dev->dev.dev.dev_id, 2) != RET_OK) {
18007cc2:	3102      	movi      	r1, 2
18007cc4:	9400      	ld.w      	r0, (r4, 0x0)
18007cc6:	e3ffe231 	bsr      	0x18004128	// 18004128 <pin_func>
18007cca:	e920fef2 	bnez      	r0, 0x18007aae	// 18007aae <hgtimer_v4_counter_func_ioctl+0x12>
                  LL_TIMER_CON_CAP1POL(p_config->cap_pol) | \
18007cce:	854a      	ld.b      	r2, (r5, 0xa)
18007cd0:	c4225423 	zext      	r3, r2, 1, 1
                  LL_TIMER_CON_CAP_SEL(p_config->cap_sel) | \
18007cd4:	e4422001 	andi      	r2, r2, 1
18007cd8:	424d      	lsli      	r2, r2, 13
                  LL_TIMER_CON_CAP1POL(p_config->cap_pol) | \
18007cda:	4375      	lsli      	r3, r3, 21
18007cdc:	6cc8      	or      	r3, r2
                  LL_TIMER_CON_CTRRST1                    | \
18007cde:	3ba1      	bseti      	r3, 1
18007ce0:	3bb1      	bseti      	r3, 17
    hw->TMR_CON = LL_TIMER_CON_INC_SRC_SEL(0)             | \
18007ce2:	b660      	st.w      	r3, (r6, 0x0)
    hw->TMR_IE  = 0;
18007ce4:	b602      	st.w      	r0, (r6, 0x8)
    hw->TMR_EN  = 0;
18007ce6:	b601      	st.w      	r0, (r6, 0x4)
    hw->TMR_CNT = 0;
18007ce8:	b603      	st.w      	r0, (r6, 0xc)
    dev->opened = 1;
18007cea:	3201      	movi      	r2, 1
18007cec:	d8640026 	ld.b      	r3, (r4, 0x26)
18007cf0:	c4625c06 	ins      	r3, r2, 6, 6
    dev->cap_en = 1;
18007cf4:	c4625c04 	ins      	r3, r2, 4, 4
18007cf8:	0739      	br      	0x18007b6a	// 18007b6a <hgtimer_v4_counter_func_ioctl+0xce>
    if ((!dev->opened) || (!dev->pwm_en)) {
18007cfa:	e4632048 	andi      	r3, r3, 72
18007cfe:	eb430048 	cmpnei      	r3, 72
18007d02:	0b6b      	bt      	0x18007bd8	// 18007bd8 <hgtimer_v4_counter_func_ioctl+0x13c>
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;
18007d04:	90a3      	ld.w      	r5, (r0, 0xc)
    irq_disable(dev->irq_num);
18007d06:	9008      	ld.w      	r0, (r0, 0x20)
18007d08:	e3fffd26 	bsr      	0x18007754	// 18007754 <csi_vic_disable_irq>
    pin_func(dev->dev.dev.dev_id, 0);
18007d0c:	3100      	movi      	r1, 0
18007d0e:	9400      	ld.w      	r0, (r4, 0x0)
18007d10:	e3ffe20c 	bsr      	0x18004128	// 18004128 <pin_func>
    hw->TMR_EN   &= ~ LL_TIMER_EN_TMREN;
18007d14:	9561      	ld.w      	r3, (r5, 0x4)
    hw->TMR_CON   = 0x00000000;
18007d16:	3000      	movi      	r0, 0
    hw->TMR_EN   &= ~ LL_TIMER_EN_TMREN;
18007d18:	3b80      	bclri      	r3, 0
18007d1a:	b561      	st.w      	r3, (r5, 0x4)
    hw->TMR_CLR   = 0xffffffff;
18007d1c:	6cc3      	mov      	r3, r0
18007d1e:	2b00      	subi      	r3, 1
    hw->TMR_CON   = 0x00000000;
18007d20:	b500      	st.w      	r0, (r5, 0x0)
    hw->TMR_CLR   = 0xffffffff;
18007d22:	b565      	st.w      	r3, (r5, 0x14)
    hw->TMR_CNT   = 0;
18007d24:	b503      	st.w      	r0, (r5, 0xc)
    dev->opened   = 0;
18007d26:	d8640026 	ld.b      	r3, (r4, 0x26)
    dev->cap_en   = 0;
18007d2a:	e46320bf 	andi      	r3, r3, 191
18007d2e:	c4605c04 	ins      	r3, r0, 4, 4
18007d32:	071c      	br      	0x18007b6a	// 18007b6a <hgtimer_v4_counter_func_ioctl+0xce>
    if ((!dev->cap_en) || (dev->dsleep)) {
18007d34:	e4632090 	andi      	r3, r3, 144
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;
18007d38:	9043      	ld.w      	r2, (r0, 0xc)
    if ((!dev->cap_en) || (dev->dsleep)) {
18007d3a:	3b50      	cmpnei      	r3, 16
18007d3c:	073f      	br      	0x18007bba	// 18007bba <hgtimer_v4_counter_func_ioctl+0x11e>
    if ((!dev->cap_en) || (dev->dsleep)) {
18007d3e:	e4632090 	andi      	r3, r3, 144
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;
18007d42:	9043      	ld.w      	r2, (r0, 0xc)
    if ((!dev->cap_en) || (dev->dsleep)) {
18007d44:	3b50      	cmpnei      	r3, 16
18007d46:	0745      	br      	0x18007bd0	// 18007bd0 <hgtimer_v4_counter_func_ioctl+0x134>
    if ((!dev->cap_en) || (dev->dsleep)) {
18007d48:	e4632090 	andi      	r3, r3, 144
18007d4c:	3b50      	cmpnei      	r3, 16
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;
18007d4e:	9043      	ld.w      	r2, (r0, 0xc)
    if ((!dev->cap_en) || (dev->dsleep)) {
18007d50:	0aaf      	bt      	0x18007aae	// 18007aae <hgtimer_v4_counter_func_ioctl+0x12>
    dev->_capture_irq_hdl = p_config->irq_hdl;
18007d52:	9561      	ld.w      	r3, (r5, 0x4)
18007d54:	b066      	st.w      	r3, (r0, 0x18)
    dev->irq_data         = p_config->irq_data;
18007d56:	9560      	ld.w      	r3, (r5, 0x0)
18007d58:	b067      	st.w      	r3, (r0, 0x1c)
    hw->TMR_IE           |= LL_TIMER_IE_CAP1_IE;
18007d5a:	9262      	ld.w      	r3, (r2, 0x8)
18007d5c:	ec630001 	ori      	r3, r3, 1
18007d60:	075a      	br      	0x18007c14	// 18007c14 <hgtimer_v4_counter_func_ioctl+0x178>
    if ((!dev->cap_en) || (dev->dsleep)) {
18007d62:	e4632090 	andi      	r3, r3, 144
18007d66:	3b50      	cmpnei      	r3, 16
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;
18007d68:	9043      	ld.w      	r2, (r0, 0xc)
    if ((!dev->cap_en) || (dev->dsleep)) {
18007d6a:	0aa2      	bt      	0x18007aae	// 18007aae <hgtimer_v4_counter_func_ioctl+0x12>
    dev->_capture_irq_hdl = p_config->irq_hdl;
18007d6c:	9561      	ld.w      	r3, (r5, 0x4)
18007d6e:	b066      	st.w      	r3, (r0, 0x18)
    dev->irq_data         = p_config->irq_data;
18007d70:	9560      	ld.w      	r3, (r5, 0x0)
18007d72:	b067      	st.w      	r3, (r0, 0x1c)
    hw->TMR_IE           |= LL_TIMER_IE_OVF_IE;
18007d74:	9262      	ld.w      	r3, (r2, 0x8)
18007d76:	ec630010 	ori      	r3, r3, 16
18007d7a:	074d      	br      	0x18007c14	// 18007c14 <hgtimer_v4_counter_func_ioctl+0x178>
    if ((!dev->cap_en) || (dev->dsleep)) {
18007d7c:	e4632090 	andi      	r3, r3, 144
18007d80:	3b50      	cmpnei      	r3, 16
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;
18007d82:	90a3      	ld.w      	r5, (r0, 0xc)
    if ((!dev->cap_en) || (dev->dsleep)) {
18007d84:	0a95      	bt      	0x18007aae	// 18007aae <hgtimer_v4_counter_func_ioctl+0x12>
    irq_disable(dev->irq_num);
18007d86:	9008      	ld.w      	r0, (r0, 0x20)
18007d88:	e3fffce6 	bsr      	0x18007754	// 18007754 <csi_vic_disable_irq>
    dev->_capture_irq_hdl = NULL;
18007d8c:	3000      	movi      	r0, 0
18007d8e:	b406      	st.w      	r0, (r4, 0x18)
18007d90:	0762      	br      	0x18007c54	// 18007c54 <hgtimer_v4_counter_func_ioctl+0x1b8>
    if (!dev->counter_en) {
18007d92:	d8400026 	ld.b      	r2, (r0, 0x26)
18007d96:	e4422004 	andi      	r2, r2, 4
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;
18007d9a:	9063      	ld.w      	r3, (r0, 0xc)
    if (!dev->counter_en) {
18007d9c:	e902fe89 	bez      	r2, 0x18007aae	// 18007aae <hgtimer_v4_counter_func_ioctl+0x12>
    hw->TMR_EN  = 0;
18007da0:	3000      	movi      	r0, 0
18007da2:	b301      	st.w      	r0, (r3, 0x4)
    hw->TMR_CON = (hw->TMR_CON & ~ LL_TIMER_CON_PSC(0x7)) | LL_TIMER_CON_PSC(psc);
18007da4:	3100      	movi      	r1, 0
18007da6:	9340      	ld.w      	r2, (r3, 0x0)
18007da8:	45a5      	lsli      	r5, r5, 5
18007daa:	29e0      	subi      	r1, 225
18007dac:	e4a520ff 	andi      	r5, r5, 255
18007db0:	6884      	and      	r2, r1
    hw->TMR_CON = (hw->TMR_CON & ~ LL_TIMER_CON_SLAVE_MODE(0x3)) | LL_TIMER_CON_SLAVE_MODE(slavemode);
18007db2:	6d48      	or      	r5, r2
18007db4:	b3a0      	st.w      	r5, (r3, 0x0)
    hw->TMR_CNT = 0;
18007db6:	b303      	st.w      	r0, (r3, 0xc)
18007db8:	06db      	br      	0x18007b6e	// 18007b6e <hgtimer_v4_counter_func_ioctl+0xd2>
    if (!dev->opened || !dev->counter_en) {
18007dba:	d8400026 	ld.b      	r2, (r0, 0x26)
18007dbe:	e4422044 	andi      	r2, r2, 68
18007dc2:	eb420044 	cmpnei      	r2, 68
    struct hgtimer_v4_hw *hw = (struct hgtimer_v4_hw *)dev->hw;
18007dc6:	9063      	ld.w      	r3, (r0, 0xc)
    if (!dev->opened || !dev->counter_en) {
18007dc8:	0a73      	bt      	0x18007aae	// 18007aae <hgtimer_v4_counter_func_ioctl+0x12>
    hw->TMR_EN  = 0;
18007dca:	3000      	movi      	r0, 0
18007dcc:	b301      	st.w      	r0, (r3, 0x4)
    hw->TMR_CON = (hw->TMR_CON & ~ LL_TIMER_CON_SLAVE_MODE(0x3)) | LL_TIMER_CON_SLAVE_MODE(slavemode);
18007dce:	9340      	ld.w      	r2, (r3, 0x0)
18007dd0:	45a8      	lsli      	r5, r5, 8
18007dd2:	e4a52300 	andi      	r5, r5, 768
18007dd6:	3a88      	bclri      	r2, 8
18007dd8:	3a89      	bclri      	r2, 9
18007dda:	07ec      	br      	0x18007db2	// 18007db2 <hgtimer_v4_counter_func_ioctl+0x316>
        return -EINVAL;
18007ddc:	3000      	movi      	r0, 0
18007dde:	2815      	subi      	r0, 22
18007de0:	06c7      	br      	0x18007b6e	// 18007b6e <hgtimer_v4_counter_func_ioctl+0xd2>
            ret_val = -ENOTSUPP;
18007de2:	ea00020b 	movi      	r0, 523
18007de6:	6c02      	nor      	r0, r0
18007de8:	06c3      	br      	0x18007b6e	// 18007b6e <hgtimer_v4_counter_func_ioctl+0xd2>
            return -EBUSY;
18007dea:	3000      	movi      	r0, 0
18007dec:	280f      	subi      	r0, 16
18007dee:	06c0      	br      	0x18007b6e	// 18007b6e <hgtimer_v4_counter_func_ioctl+0xd2>

18007df0 <hgtimer_v4_attach>:
    .ops.resume   = hgtimer_v4_counter_func_resume,
#endif
};

int32 hgtimer_v4_attach(uint32 dev_id, struct hgtimer_v4 *timer)
{
18007df0:	14d3      	push      	r4-r6, r15

    timer->opened           = 0;
18007df2:	d8610026 	ld.b      	r3, (r1, 0x26)
18007df6:	3500      	movi      	r5, 0
    timer->dsleep           = 0;
18007df8:	e46320bf 	andi      	r3, r3, 191
{
18007dfc:	6d07      	mov      	r4, r1
    timer->dsleep           = 0;
18007dfe:	c4655c07 	ins      	r3, r5, 7, 7
18007e02:	dc610026 	st.b      	r3, (r1, 0x26)
    timer->dev.dev.ops      = (const struct devobj_ops *)&timer_v4_ops;
#ifdef CONFIG_SLEEP
    os_mutex_init(&timer->bp_suspend_lock);
    os_mutex_init(&timer->bp_resume_lock);
#endif
    request_irq(timer->irq_num, hgtimer_v4_irq_handler, timer);
18007e06:	6c87      	mov      	r2, r1
    timer->dev.dev.ops      = (const struct devobj_ops *)&timer_v4_ops;
18007e08:	1069      	lrw      	r3, 0x18016a3c	// 18007e2c <hgtimer_v4_attach+0x3c>
{
18007e0a:	6d83      	mov      	r6, r0
    timer->dev.dev.ops      = (const struct devobj_ops *)&timer_v4_ops;
18007e0c:	b162      	st.w      	r3, (r1, 0x8)
    timer->_counter_irq_hdl = NULL;
18007e0e:	b1a4      	st.w      	r5, (r1, 0x10)
    timer->_pwm_irq_hdl     = NULL;
18007e10:	b1a5      	st.w      	r5, (r1, 0x14)
    timer->_capture_irq_hdl = NULL;
18007e12:	b1a6      	st.w      	r5, (r1, 0x18)
    timer->irq_data         = 0;
18007e14:	b1a7      	st.w      	r5, (r1, 0x1c)
    request_irq(timer->irq_num, hgtimer_v4_irq_handler, timer);
18007e16:	9408      	ld.w      	r0, (r4, 0x20)
18007e18:	1026      	lrw      	r1, 0x1800788c	// 18007e30 <hgtimer_v4_attach+0x40>
18007e1a:	e3ffdc61 	bsr      	0x180036dc	// 180036dc <request_irq>
    dev_register(dev_id, (struct dev_obj *)timer);
18007e1e:	6c53      	mov      	r1, r4
18007e20:	6c1b      	mov      	r0, r6
18007e22:	e3ffd941 	bsr      	0x180030a4	// 180030a4 <dev_register>
    return RET_OK;
}
18007e26:	6c17      	mov      	r0, r5
18007e28:	1493      	pop      	r4-r6, r15
18007e2a:	0000      	.short	0x0000
18007e2c:	18016a3c 	.long	0x18016a3c
18007e30:	1800788c 	.long	0x1800788c

18007e34 <hguart_v4_request_irq>:
static int32 hguart_v4_request_irq(struct uart_device *uart, uart_irq_hdl irqhdl, uint32 irq_flag, uint32 data) {

    struct hguart_v4    *dev = (struct hguart_v4 *)uart;
    struct hguart_v4_hw *hw  = (struct hguart_v4_hw *)dev->hw;

    if (!dev->opened) {
18007e34:	d9a00040 	ld.b      	r13, (r0, 0x40)
18007e38:	e5ad2001 	andi      	r13, r13, 1
    struct hguart_v4_hw *hw  = (struct hguart_v4_hw *)dev->hw;
18007e3c:	d9802003 	ld.w      	r12, (r0, 0xc)
    if (!dev->opened) {
18007e40:	e90d004a 	bez      	r13, 0x18007ed4	// 18007ed4 <hguart_v4_request_irq+0xa0>
        return RET_ERR;
    }

    dev->irq_hdl  = irqhdl;
    dev->irq_data = data  ;
18007e44:	b065      	st.w      	r3, (r0, 0x14)
    //request_irq(dev->irq_num, hguart_v4_irq_handler, dev);


    if (irq_flag & UART_IRQ_FLAG_RX_BYTE) {
18007e46:	e4622020 	andi      	r3, r2, 32
    dev->irq_hdl  = irqhdl;
18007e4a:	b024      	st.w      	r1, (r0, 0x10)
    if (irq_flag & UART_IRQ_FLAG_RX_BYTE) {
18007e4c:	e9030008 	bez      	r3, 0x18007e5c	// 18007e5c <hguart_v4_request_irq+0x28>
        hw->CON |= LL_SIMPLE_UART_CON_UARTRXIE;
18007e50:	d86c2000 	ld.w      	r3, (r12, 0x0)
18007e54:	ec630001 	ori      	r3, r3, 1
18007e58:	dc6c2000 	st.w      	r3, (r12, 0x0)
    }

    if (irq_flag & UART_IRQ_FLAG_FRAME_ERR) {
18007e5c:	e4622010 	andi      	r3, r2, 16
18007e60:	e9030008 	bez      	r3, 0x18007e70	// 18007e70 <hguart_v4_request_irq+0x3c>
        hw->CON |= LL_SIMPLE_UART_CON_FERRIE;
18007e64:	d86c2000 	ld.w      	r3, (r12, 0x0)
18007e68:	ec630100 	ori      	r3, r3, 256
18007e6c:	dc6c2000 	st.w      	r3, (r12, 0x0)
    }

    if (irq_flag & UART_IRQ_FLAG_DMA_RX_DONE) {
18007e70:	e4622008 	andi      	r3, r2, 8
18007e74:	e9030011 	bez      	r3, 0x18007e96	// 18007e96 <hguart_v4_request_irq+0x62>
        hw->CON |= LL_SIMPLE_UART_CON_DMA_IE;
18007e78:	d86c2000 	ld.w      	r3, (r12, 0x0)
18007e7c:	ec630080 	ori      	r3, r3, 128
18007e80:	dc6c2000 	st.w      	r3, (r12, 0x0)
        dev->irq_dma_tx = 0;
18007e84:	d8600040 	ld.b      	r3, (r0, 0x40)
        dev->irq_dma_rx = 1;
18007e88:	e46320fb 	andi      	r3, r3, 251
18007e8c:	3101      	movi      	r1, 1
18007e8e:	c4615c03 	ins      	r3, r1, 3, 3
18007e92:	dc600040 	st.b      	r3, (r0, 0x40)
    }

    if (irq_flag & UART_IRQ_FLAG_DMA_TX_DONE) {
18007e96:	e4622004 	andi      	r3, r2, 4
18007e9a:	e9030012 	bez      	r3, 0x18007ebe	// 18007ebe <hguart_v4_request_irq+0x8a>
        hw->CON |= LL_SIMPLE_UART_CON_DMA_IE;
18007e9e:	d86c2000 	ld.w      	r3, (r12, 0x0)
18007ea2:	ec630080 	ori      	r3, r3, 128
18007ea6:	dc6c2000 	st.w      	r3, (r12, 0x0)
        dev->irq_dma_tx = 1;
18007eaa:	d8600040 	ld.b      	r3, (r0, 0x40)
18007eae:	3101      	movi      	r1, 1
18007eb0:	c4615c02 	ins      	r3, r1, 2, 2
        dev->irq_dma_rx = 0;
18007eb4:	3100      	movi      	r1, 0
18007eb6:	c4615c03 	ins      	r3, r1, 3, 3
18007eba:	dc600040 	st.b      	r3, (r0, 0x40)
    }

    if (irq_flag & UART_IRQ_FLAG_TIME_OUT) {
18007ebe:	e4022002 	andi      	r0, r2, 2
18007ec2:	e9000008 	bez      	r0, 0x18007ed2	// 18007ed2 <hguart_v4_request_irq+0x9e>
        hw->CON  |= LL_SIMPLE_UART_CON_TO_IE;
18007ec6:	d86c2000 	ld.w      	r3, (r12, 0x0)
18007eca:	3bbf      	bseti      	r3, 31
18007ecc:	dc6c2000 	st.w      	r3, (r12, 0x0)
    }


    //irq_enable(dev->comm_irq_num);

    return RET_OK;
18007ed0:	3000      	movi      	r0, 0
}
18007ed2:	783c      	jmp      	r15
        return RET_ERR;
18007ed4:	3000      	movi      	r0, 0
18007ed6:	2800      	subi      	r0, 1
18007ed8:	07fd      	br      	0x18007ed2	// 18007ed2 <hguart_v4_request_irq+0x9e>
	...

18007edc <hguart_v4_release_irq>:
static int32 hguart_v4_release_irq(struct uart_device *uart, uint32 irq_flag) {

    struct hguart_v4    *dev = (struct hguart_v4 *)uart;
    struct hguart_v4_hw *hw  = (struct hguart_v4_hw *)dev->hw;

    if (!dev->opened) {
18007edc:	d8400040 	ld.b      	r2, (r0, 0x40)
18007ee0:	e4422001 	andi      	r2, r2, 1
    struct hguart_v4_hw *hw  = (struct hguart_v4_hw *)dev->hw;
18007ee4:	9063      	ld.w      	r3, (r0, 0xc)
    if (!dev->opened) {
18007ee6:	e9020021 	bez      	r2, 0x18007f28	// 18007f28 <hguart_v4_release_irq+0x4c>
        return RET_ERR;
    }

    if (irq_flag & UART_IRQ_FLAG_RX_BYTE) {
18007eea:	e4412020 	andi      	r2, r1, 32
18007eee:	e9020005 	bez      	r2, 0x18007ef8	// 18007ef8 <hguart_v4_release_irq+0x1c>
        hw->CON &= ~ LL_SIMPLE_UART_CON_UARTRXIE;
18007ef2:	9340      	ld.w      	r2, (r3, 0x0)
18007ef4:	3a80      	bclri      	r2, 0
18007ef6:	b340      	st.w      	r2, (r3, 0x0)
    }

    if (irq_flag & UART_IRQ_FLAG_FRAME_ERR) {
18007ef8:	e4412010 	andi      	r2, r1, 16
18007efc:	e9020005 	bez      	r2, 0x18007f06	// 18007f06 <hguart_v4_release_irq+0x2a>
        hw->CON &= ~ LL_SIMPLE_UART_CON_FERRIE;
18007f00:	9340      	ld.w      	r2, (r3, 0x0)
18007f02:	3a88      	bclri      	r2, 8
18007f04:	b340      	st.w      	r2, (r3, 0x0)
    }

    if (irq_flag & UART_IRQ_FLAG_DMA_RX_DONE) {
18007f06:	e4412008 	andi      	r2, r1, 8
18007f0a:	e9020005 	bez      	r2, 0x18007f14	// 18007f14 <hguart_v4_release_irq+0x38>
        hw->CON &=~ LL_SIMPLE_UART_CON_DMA_IE;
18007f0e:	9340      	ld.w      	r2, (r3, 0x0)
18007f10:	3a87      	bclri      	r2, 7
18007f12:	b340      	st.w      	r2, (r3, 0x0)
    }

    if (irq_flag & UART_IRQ_FLAG_TIME_OUT) {
18007f14:	e4012002 	andi      	r0, r1, 2
18007f18:	e9000007 	bez      	r0, 0x18007f26	// 18007f26 <hguart_v4_release_irq+0x4a>
        hw->CON  &=~ LL_SIMPLE_UART_CON_TO_IE;
18007f1c:	9340      	ld.w      	r2, (r3, 0x0)
18007f1e:	c40257c2 	zext      	r2, r2, 30, 0
18007f22:	b340      	st.w      	r2, (r3, 0x0)
    }

    return RET_OK;
18007f24:	3000      	movi      	r0, 0
}
18007f26:	783c      	jmp      	r15
        return RET_ERR;
18007f28:	3000      	movi      	r0, 0
18007f2a:	2800      	subi      	r0, 1
18007f2c:	07fd      	br      	0x18007f26	// 18007f26 <hguart_v4_release_irq+0x4a>
	...

18007f30 <hguart_v4_irq_handler>:
static void hguart_v4_irq_handler(void *data) {
18007f30:	14d2      	push      	r4-r5, r15
    struct hguart_v4_hw *hw  = (struct hguart_v4_hw *)dev->hw;
18007f32:	9083      	ld.w      	r4, (r0, 0xc)
static void hguart_v4_irq_handler(void *data) {
18007f34:	6d43      	mov      	r5, r0
    if ((hw->CON & LL_SIMPLE_UART_CON_UARTTXIE) && (hw->CON & LL_SIMPLE_UART_CON_TXDONE)) {
18007f36:	9460      	ld.w      	r3, (r4, 0x0)
18007f38:	e4632002 	andi      	r3, r3, 2
18007f3c:	e9030017 	bez      	r3, 0x18007f6a	// 18007f6a <hguart_v4_irq_handler+0x3a>
18007f40:	3280      	movi      	r2, 128
18007f42:	9460      	ld.w      	r3, (r4, 0x0)
18007f44:	424e      	lsli      	r2, r2, 14
18007f46:	68c8      	and      	r3, r2
18007f48:	e9030011 	bez      	r3, 0x18007f6a	// 18007f6a <hguart_v4_irq_handler+0x3a>
		hw->CON |= LL_SIMPLE_UART_CON_CLRTXDONE;
18007f4c:	9460      	ld.w      	r3, (r4, 0x0)
18007f4e:	3bbc      	bseti      	r3, 28
18007f50:	b460      	st.w      	r3, (r4, 0x0)
		dev->tx_cur_byte++;
18007f52:	9067      	ld.w      	r3, (r0, 0x1c)
18007f54:	2300      	addi      	r3, 1
		if (dev->tx_cur_byte == dev->tx_total_byte) {
18007f56:	9046      	ld.w      	r2, (r0, 0x18)
18007f58:	648e      	cmpne      	r3, r2
		dev->tx_cur_byte++;
18007f5a:	b067      	st.w      	r3, (r0, 0x1c)
		if (dev->tx_cur_byte == dev->tx_total_byte) {
18007f5c:	0859      	bt      	0x1800800e	// 1800800e <hguart_v4_irq_handler+0xde>
			os_sema_up(&dev->sema_tx);
18007f5e:	2023      	addi      	r0, 36
18007f60:	e00062e8 	bsr      	0x18014530	// 18014530 <os_sema_up>
			hw->CON &=~ LL_SIMPLE_UART_CON_UARTTXIE;
18007f64:	9460      	ld.w      	r3, (r4, 0x0)
18007f66:	3b81      	bclri      	r3, 1
18007f68:	b460      	st.w      	r3, (r4, 0x0)
    if ((hw->CON & LL_SIMPLE_UART_CON_UARTRXIE) && (hw->CON & LL_SIMPLE_UART_CON_RXBUFNOTEMPTY)) {
18007f6a:	9460      	ld.w      	r3, (r4, 0x0)
18007f6c:	e4632001 	andi      	r3, r3, 1
18007f70:	e9030014 	bez      	r3, 0x18007f98	// 18007f98 <hguart_v4_irq_handler+0x68>
18007f74:	3280      	movi      	r2, 128
18007f76:	9460      	ld.w      	r3, (r4, 0x0)
18007f78:	424c      	lsli      	r2, r2, 12
18007f7a:	68c8      	and      	r3, r2
18007f7c:	e903000e 	bez      	r3, 0x18007f98	// 18007f98 <hguart_v4_irq_handler+0x68>
        hw->CON |= LL_SIMPLE_UART_CON_CLRRXDONE;
18007f80:	9460      	ld.w      	r3, (r4, 0x0)
        if (dev->irq_hdl) {
18007f82:	d9852004 	ld.w      	r12, (r5, 0x10)
        hw->CON |= LL_SIMPLE_UART_CON_CLRRXDONE;
18007f86:	3bba      	bseti      	r3, 26
18007f88:	b460      	st.w      	r3, (r4, 0x0)
        if (dev->irq_hdl) {
18007f8a:	e90c0007 	bez      	r12, 0x18007f98	// 18007f98 <hguart_v4_irq_handler+0x68>
            dev->irq_hdl(UART_IRQ_FLAG_RX_BYTE, dev->irq_data, hw->DATA, 0);
18007f8e:	9442      	ld.w      	r2, (r4, 0x8)
18007f90:	3300      	movi      	r3, 0
18007f92:	9525      	ld.w      	r1, (r5, 0x14)
18007f94:	3020      	movi      	r0, 32
18007f96:	7bf1      	jsr      	r12
    if ((hw->CON & LL_SIMPLE_UART_CON_FERRIE) && (hw->CON & LL_SIMPLE_UART_CON_FERR)) {
18007f98:	9460      	ld.w      	r3, (r4, 0x0)
18007f9a:	e4632100 	andi      	r3, r3, 256
18007f9e:	e9030014 	bez      	r3, 0x18007fc6	// 18007fc6 <hguart_v4_irq_handler+0x96>
18007fa2:	3280      	movi      	r2, 128
18007fa4:	9460      	ld.w      	r3, (r4, 0x0)
18007fa6:	424d      	lsli      	r2, r2, 13
18007fa8:	68c8      	and      	r3, r2
18007faa:	e903000e 	bez      	r3, 0x18007fc6	// 18007fc6 <hguart_v4_irq_handler+0x96>
        hw->CON |= LL_SIMPLE_UART_CON_CLRFERR;
18007fae:	9460      	ld.w      	r3, (r4, 0x0)
        if (dev->irq_hdl) {
18007fb0:	d9852004 	ld.w      	r12, (r5, 0x10)
        hw->CON |= LL_SIMPLE_UART_CON_CLRFERR;
18007fb4:	3bbb      	bseti      	r3, 27
18007fb6:	b460      	st.w      	r3, (r4, 0x0)
        if (dev->irq_hdl) {
18007fb8:	e90c0007 	bez      	r12, 0x18007fc6	// 18007fc6 <hguart_v4_irq_handler+0x96>
            dev->irq_hdl(UART_IRQ_FLAG_FRAME_ERR, dev->irq_data, 0, 0);
18007fbc:	3300      	movi      	r3, 0
18007fbe:	6c8f      	mov      	r2, r3
18007fc0:	9525      	ld.w      	r1, (r5, 0x14)
18007fc2:	3010      	movi      	r0, 16
18007fc4:	7bf1      	jsr      	r12
    if (!(hw->CON & LL_SIMPLE_UART_CON_TO_PENDING)) {
18007fc6:	3280      	movi      	r2, 128
18007fc8:	9400      	ld.w      	r0, (r4, 0x0)
18007fca:	4248      	lsli      	r2, r2, 8
18007fcc:	6808      	and      	r0, r2
        if ((hw->CON & LL_SIMPLE_UART_CON_DMA_IE) && (hw->CON & LL_SIMPLE_UART_CON_DMAPEND)) {
18007fce:	9460      	ld.w      	r3, (r4, 0x0)
    if (!(hw->CON & LL_SIMPLE_UART_CON_TO_PENDING)) {
18007fd0:	e9200026 	bnez      	r0, 0x1800801c	// 1800801c <hguart_v4_irq_handler+0xec>
        if ((hw->CON & LL_SIMPLE_UART_CON_DMA_IE) && (hw->CON & LL_SIMPLE_UART_CON_DMAPEND)) {
18007fd4:	e4632080 	andi      	r3, r3, 128
18007fd8:	e903001a 	bez      	r3, 0x1800800c	// 1800800c <hguart_v4_irq_handler+0xdc>
18007fdc:	3280      	movi      	r2, 128
18007fde:	9460      	ld.w      	r3, (r4, 0x0)
18007fe0:	424a      	lsli      	r2, r2, 10
18007fe2:	68c8      	and      	r3, r2
18007fe4:	e9030014 	bez      	r3, 0x1800800c	// 1800800c <hguart_v4_irq_handler+0xdc>
            hw->CON |= LL_SIMPLE_UART_CON_CLRDMAPEND;
18007fe8:	9460      	ld.w      	r3, (r4, 0x0)
            if (dev->irq_hdl) {
18007fea:	d9852004 	ld.w      	r12, (r5, 0x10)
            hw->CON |= LL_SIMPLE_UART_CON_CLRDMAPEND;
18007fee:	3bb9      	bseti      	r3, 25
18007ff0:	b460      	st.w      	r3, (r4, 0x0)
            if (dev->irq_hdl) {
18007ff2:	e90c000d 	bez      	r12, 0x1800800c	// 1800800c <hguart_v4_irq_handler+0xdc>
                if (dev->irq_dma_rx) {
18007ff6:	d8450040 	ld.b      	r2, (r5, 0x40)
18007ffa:	e4622008 	andi      	r3, r2, 8
18007ffe:	9525      	ld.w      	r1, (r5, 0x14)
                    dev->irq_hdl(UART_IRQ_FLAG_DMA_RX_DONE, dev->irq_data, hw->DMACNT, 0);
18008000:	9447      	ld.w      	r2, (r4, 0x1c)
                if (dev->irq_dma_rx) {
18008002:	e903000b 	bez      	r3, 0x18008018	// 18008018 <hguart_v4_irq_handler+0xe8>
                    dev->irq_hdl(UART_IRQ_FLAG_DMA_RX_DONE, dev->irq_data, hw->DMACNT, 0);
18008006:	6cc3      	mov      	r3, r0
18008008:	3008      	movi      	r0, 8
                dev->irq_hdl(UART_IRQ_FLAG_TIME_OUT, dev->irq_data, hw->DMACNT, 0);
1800800a:	7bf1      	jsr      	r12
}
1800800c:	1492      	pop      	r4-r5, r15
	 		hw->DATA = dev->p_tx_buf[dev->tx_cur_byte];
1800800e:	9048      	ld.w      	r2, (r0, 0x20)
18008010:	d0620023 	ldr.b      	r3, (r2, r3 << 0)
18008014:	b462      	st.w      	r3, (r4, 0x8)
18008016:	07aa      	br      	0x18007f6a	// 18007f6a <hguart_v4_irq_handler+0x3a>
                    dev->irq_hdl(UART_IRQ_FLAG_DMA_TX_DONE, dev->irq_data, hw->DMACNT, 0);
18008018:	3004      	movi      	r0, 4
1800801a:	07f8      	br      	0x1800800a	// 1800800a <hguart_v4_irq_handler+0xda>
        if ((hw->CON & LL_SIMPLE_UART_CON_TO_IE) && (hw->CON & LL_SIMPLE_UART_CON_TO_PENDING)) {
1800801c:	e9a3fff8 	bhsz      	r3, 0x1800800c	// 1800800c <hguart_v4_irq_handler+0xdc>
18008020:	9460      	ld.w      	r3, (r4, 0x0)
18008022:	688c      	and      	r2, r3
18008024:	e902fff4 	bez      	r2, 0x1800800c	// 1800800c <hguart_v4_irq_handler+0xdc>
            hw->CON |= (LL_SIMPLE_UART_CON_CLRTOPEND | LL_SIMPLE_UART_CON_CLRDMAPEND);
18008028:	9460      	ld.w      	r3, (r4, 0x0)
            if (dev->irq_hdl) {
1800802a:	d9852004 	ld.w      	r12, (r5, 0x10)
            hw->CON |= (LL_SIMPLE_UART_CON_CLRTOPEND | LL_SIMPLE_UART_CON_CLRDMAPEND);
1800802e:	3bb9      	bseti      	r3, 25
18008030:	3bbd      	bseti      	r3, 29
18008032:	b460      	st.w      	r3, (r4, 0x0)
            if (dev->irq_hdl) {
18008034:	e90cffec 	bez      	r12, 0x1800800c	// 1800800c <hguart_v4_irq_handler+0xdc>
                dev->irq_hdl(UART_IRQ_FLAG_TIME_OUT, dev->irq_data, hw->DMACNT, 0);
18008038:	9447      	ld.w      	r2, (r4, 0x1c)
1800803a:	3300      	movi      	r3, 0
1800803c:	9525      	ld.w      	r1, (r5, 0x14)
1800803e:	3002      	movi      	r0, 2
18008040:	07e5      	br      	0x1800800a	// 1800800a <hguart_v4_irq_handler+0xda>
	...

18008044 <hguart_v4_getc>:
static uint8 hguart_v4_getc(struct uart_device *uart) {
18008044:	14d2      	push      	r4-r5, r15
    if (!dev->opened) {
18008046:	d8600040 	ld.b      	r3, (r0, 0x40)
1800804a:	e4432001 	andi      	r2, r3, 1
static uint8 hguart_v4_getc(struct uart_device *uart) {
1800804e:	6d03      	mov      	r4, r0
    if (!dev->opened) {
18008050:	e9020022 	bez      	r2, 0x18008094	// 18008094 <hguart_v4_getc+0x50>
	SIMPLE_UART_LOCK(&dev->mutex_rx, dev->debug_uart);
18008054:	e4632010 	andi      	r3, r3, 16
    struct hguart_v4_hw *hw  = (struct hguart_v4_hw *)dev->hw;
18008058:	90a3      	ld.w      	r5, (r0, 0xc)
	SIMPLE_UART_LOCK(&dev->mutex_rx, dev->debug_uart);
1800805a:	e9030007 	bez      	r3, 0x18008068	// 18008068 <hguart_v4_getc+0x24>
1800805e:	3100      	movi      	r1, 0
18008060:	2900      	subi      	r1, 1
18008062:	2033      	addi      	r0, 52
18008064:	e00061d4 	bsr      	0x1801440c	// 1801440c <os_mutex_lock>
    while(!(hw->CON & LL_SIMPLE_UART_CON_RXBUFNOTEMPTY));
18008068:	3280      	movi      	r2, 128
1800806a:	424c      	lsli      	r2, r2, 12
1800806c:	9560      	ld.w      	r3, (r5, 0x0)
1800806e:	68c8      	and      	r3, r2
18008070:	e903fffe 	bez      	r3, 0x1800806c	// 1800806c <hguart_v4_getc+0x28>
    hw->CON |= LL_SIMPLE_UART_CON_CLRRXDONE;
18008074:	9560      	ld.w      	r3, (r5, 0x0)
18008076:	3bba      	bseti      	r3, 26
18008078:	b560      	st.w      	r3, (r5, 0x0)
	SIMPLE_UART_UNLOCK(&dev->mutex_rx, dev->debug_uart);
1800807a:	d8640040 	ld.b      	r3, (r4, 0x40)
1800807e:	e4632010 	andi      	r3, r3, 16
18008082:	e9030006 	bez      	r3, 0x1800808e	// 1800808e <hguart_v4_getc+0x4a>
18008086:	e4040033 	addi      	r0, r4, 52
1800808a:	e00061db 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
    return hw->DATA;
1800808e:	9502      	ld.w      	r0, (r5, 0x8)
18008090:	7400      	zextb      	r0, r0
}
18008092:	1492      	pop      	r4-r5, r15
        return RET_ERR;
18008094:	30ff      	movi      	r0, 255
18008096:	07fe      	br      	0x18008092	// 18008092 <hguart_v4_getc+0x4e>

18008098 <hguart_v4_putc>:
static int32 hguart_v4_putc(struct uart_device *uart, int8 value) {
18008098:	14d3      	push      	r4-r6, r15
    if (!dev->opened) {
1800809a:	d8600040 	ld.b      	r3, (r0, 0x40)
1800809e:	e4432001 	andi      	r2, r3, 1
static int32 hguart_v4_putc(struct uart_device *uart, int8 value) {
180080a2:	6d03      	mov      	r4, r0
180080a4:	6d87      	mov      	r6, r1
    struct hguart_v4_hw *hw  = (struct hguart_v4_hw *)dev->hw;
180080a6:	90a3      	ld.w      	r5, (r0, 0xc)
    if (!dev->opened) {
180080a8:	e9020032 	bez      	r2, 0x1800810c	// 1800810c <hguart_v4_putc+0x74>
	SIMPLE_UART_LOCK(&dev->mutex_tx, dev->debug_uart);
180080ac:	e4632010 	andi      	r3, r3, 16
180080b0:	e9030007 	bez      	r3, 0x180080be	// 180080be <hguart_v4_putc+0x26>
180080b4:	3100      	movi      	r1, 0
180080b6:	2900      	subi      	r1, 1
180080b8:	202b      	addi      	r0, 44
180080ba:	e00061a9 	bsr      	0x1801440c	// 1801440c <os_mutex_lock>
    if (dev->opened && (hw->CON & LL_SIMPLE_UART_CON_UARTEN)) {
180080be:	d8040040 	ld.b      	r0, (r4, 0x40)
180080c2:	e4602001 	andi      	r3, r0, 1
180080c6:	e9030018 	bez      	r3, 0x180080f6	// 180080f6 <hguart_v4_putc+0x5e>
180080ca:	9560      	ld.w      	r3, (r5, 0x0)
180080cc:	e4632010 	andi      	r3, r3, 16
180080d0:	e9030013 	bez      	r3, 0x180080f6	// 180080f6 <hguart_v4_putc+0x5e>
        while(!(hw->CON & LL_SIMPLE_UART_CON_TXBUFEMPTY));
180080d4:	3280      	movi      	r2, 128
180080d6:	424b      	lsli      	r2, r2, 11
180080d8:	9560      	ld.w      	r3, (r5, 0x0)
180080da:	68c8      	and      	r3, r2
180080dc:	e903fffe 	bez      	r3, 0x180080d8	// 180080d8 <hguart_v4_putc+0x40>
		SIMPLE_UART_UNLOCK(&dev->mutex_tx, dev->debug_uart);
180080e0:	e4002010 	andi      	r0, r0, 16
        hw->DATA = value;
180080e4:	b5c2      	st.w      	r6, (r5, 0x8)
		SIMPLE_UART_UNLOCK(&dev->mutex_tx, dev->debug_uart);
180080e6:	e9000007 	bez      	r0, 0x180080f4	// 180080f4 <hguart_v4_putc+0x5c>
180080ea:	e404002b 	addi      	r0, r4, 44
180080ee:	e00061a9 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
        return RET_OK;
180080f2:	3000      	movi      	r0, 0
}
180080f4:	1493      	pop      	r4-r6, r15
		SIMPLE_UART_UNLOCK(&dev->mutex_tx, dev->debug_uart);
180080f6:	e4002010 	andi      	r0, r0, 16
180080fa:	e9000006 	bez      	r0, 0x18008106	// 18008106 <hguart_v4_putc+0x6e>
180080fe:	e404002b 	addi      	r0, r4, 44
18008102:	e000619f 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
        return -EIO;
18008106:	3000      	movi      	r0, 0
18008108:	2804      	subi      	r0, 5
1800810a:	07f5      	br      	0x180080f4	// 180080f4 <hguart_v4_putc+0x5c>
        return RET_ERR;
1800810c:	3000      	movi      	r0, 0
1800810e:	2800      	subi      	r0, 1
18008110:	07f2      	br      	0x180080f4	// 180080f4 <hguart_v4_putc+0x5c>
	...

18008114 <hguart_v4_puts>:
static int32 hguart_v4_puts(struct uart_device *uart, uint8 *buf, uint32 size) {
18008114:	14d4      	push      	r4-r7, r15
    if (!dev->opened) {
18008116:	d8600040 	ld.b      	r3, (r0, 0x40)
static int32 hguart_v4_puts(struct uart_device *uart, uint8 *buf, uint32 size) {
1800811a:	6d8b      	mov      	r6, r2
    if (!dev->opened) {
1800811c:	e4432001 	andi      	r2, r3, 1
static int32 hguart_v4_puts(struct uart_device *uart, uint8 *buf, uint32 size) {
18008120:	6d43      	mov      	r5, r0
18008122:	6d07      	mov      	r4, r1
    struct hguart_v4_hw *hw  = (struct hguart_v4_hw *)dev->hw;
18008124:	90e3      	ld.w      	r7, (r0, 0xc)
    if (!dev->opened) {
18008126:	e9020048 	bez      	r2, 0x180081b6	// 180081b6 <hguart_v4_puts+0xa2>
	SIMPLE_UART_LOCK(&dev->mutex_tx, dev->debug_uart);
1800812a:	e4632010 	andi      	r3, r3, 16
1800812e:	e9030007 	bez      	r3, 0x1800813c	// 1800813c <hguart_v4_puts+0x28>
18008132:	3100      	movi      	r1, 0
18008134:	2900      	subi      	r1, 1
18008136:	202b      	addi      	r0, 44
18008138:	e000616a 	bsr      	0x1801440c	// 1801440c <os_mutex_lock>
    if (dev->use_dma) {
1800813c:	d8650040 	ld.b      	r3, (r5, 0x40)
18008140:	e4432002 	andi      	r2, r3, 2
18008144:	e922000c 	bnez      	r2, 0x1800815c	// 1800815c <hguart_v4_puts+0x48>
18008148:	6190      	addu      	r6, r4
        for (i = 0; i < size; i++) {
1800814a:	6592      	cmpne      	r4, r6
1800814c:	0c29      	bf      	0x1800819e	// 1800819e <hguart_v4_puts+0x8a>
            hguart_v4_putc(uart, buf[i]);
1800814e:	d8244000 	ld.bs      	r1, (r4, 0x0)
18008152:	6c17      	mov      	r0, r5
18008154:	e3ffffa2 	bsr      	0x18008098	// 18008098 <hguart_v4_putc>
18008158:	2400      	addi      	r4, 1
1800815a:	07f8      	br      	0x1800814a	// 1800814a <hguart_v4_puts+0x36>
		if (dev->debug_uart) {
1800815c:	e4632010 	andi      	r3, r3, 16
18008160:	e923000c 	bnez      	r3, 0x18008178	// 18008178 <hguart_v4_puts+0x64>
18008164:	6190      	addu      	r6, r4
	        for (i = 0; i < size; i++) {
18008166:	651a      	cmpne      	r6, r4
18008168:	0c1b      	bf      	0x1800819e	// 1800819e <hguart_v4_puts+0x8a>
	            hguart_v4_putc(uart, buf[i]);
1800816a:	d8244000 	ld.bs      	r1, (r4, 0x0)
1800816e:	6c17      	mov      	r0, r5
18008170:	e3ffff94 	bsr      	0x18008098	// 18008098 <hguart_v4_putc>
18008174:	2400      	addi      	r4, 1
18008176:	07f8      	br      	0x18008166	// 18008166 <hguart_v4_puts+0x52>
			hw->CON |= LL_SIMPLE_UART_CON_UARTTXIE;
18008178:	9760      	ld.w      	r3, (r7, 0x0)
1800817a:	ec630002 	ori      	r3, r3, 2
1800817e:	b760      	st.w      	r3, (r7, 0x0)
			dev->tx_cur_byte   = 0;
18008180:	3300      	movi      	r3, 0
			dev->p_tx_buf 	   = (uint8 *)buf;
18008182:	b588      	st.w      	r4, (r5, 0x20)
			dev->tx_total_byte = size;
18008184:	b5c6      	st.w      	r6, (r5, 0x18)
			dev->tx_cur_byte   = 0;
18008186:	b567      	st.w      	r3, (r5, 0x1c)
			hw->DATA = buf[0];
18008188:	8460      	ld.b      	r3, (r4, 0x0)
			os_sema_down(&dev->sema_tx, osWaitForever);
1800818a:	3100      	movi      	r1, 0
			hw->DATA = buf[0];
1800818c:	b762      	st.w      	r3, (r7, 0x8)
			os_sema_down(&dev->sema_tx, osWaitForever);
1800818e:	2900      	subi      	r1, 1
18008190:	e4050023 	addi      	r0, r5, 36
18008194:	e00061b2 	bsr      	0x180144f8	// 180144f8 <os_sema_down>
			hw->CON &=~ LL_SIMPLE_UART_CON_UARTTXIE;
18008198:	9760      	ld.w      	r3, (r7, 0x0)
1800819a:	3b81      	bclri      	r3, 1
1800819c:	b760      	st.w      	r3, (r7, 0x0)
	SIMPLE_UART_UNLOCK(&dev->mutex_tx, dev->debug_uart);
1800819e:	d8050040 	ld.b      	r0, (r5, 0x40)
180081a2:	e4002010 	andi      	r0, r0, 16
180081a6:	e9000007 	bez      	r0, 0x180081b4	// 180081b4 <hguart_v4_puts+0xa0>
180081aa:	e405002b 	addi      	r0, r5, 44
180081ae:	e0006149 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
    return RET_OK;
180081b2:	3000      	movi      	r0, 0
}
180081b4:	1494      	pop      	r4-r7, r15
        return RET_ERR;
180081b6:	3000      	movi      	r0, 0
180081b8:	2800      	subi      	r0, 1
180081ba:	07fd      	br      	0x180081b4	// 180081b4 <hguart_v4_puts+0xa0>

180081bc <hguart_v4_close>:
static int32 hguart_v4_close(struct uart_device *uart) {
180081bc:	14d3      	push      	r4-r6, r15
    if (!dev->opened) {
180081be:	d8600040 	ld.b      	r3, (r0, 0x40)
180081c2:	e4632001 	andi      	r3, r3, 1
static int32 hguart_v4_close(struct uart_device *uart) {
180081c6:	6d03      	mov      	r4, r0
    if (!dev->opened) {
180081c8:	e903001f 	bez      	r3, 0x18008206	// 18008206 <hguart_v4_close+0x4a>
    irq_disable(dev->irq_num       );
180081cc:	887e      	ld.h      	r3, (r0, 0x3c)
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
180081ce:	c4a354c2 	zext      	r2, r3, 6, 5
180081d2:	3101      	movi      	r1, 1
180081d4:	e463201f 	andi      	r3, r3, 31
180081d8:	c4614023 	lsl      	r3, r1, r3
180081dc:	221f      	addi      	r2, 32
180081de:	102c      	lrw      	r1, 0xe000e100	// 1800820c <hguart_v4_close+0x50>
    struct hguart_v4_hw *hw  = (struct hguart_v4_hw *)dev->hw;
180081e0:	90c3      	ld.w      	r6, (r0, 0xc)
180081e2:	3500      	movi      	r5, 0
180081e4:	d4410883 	str.w      	r3, (r1, r2 << 2)
    pin_func(dev->dev.dev.dev_id, 0);
180081e8:	9000      	ld.w      	r0, (r0, 0x0)
180081ea:	6c57      	mov      	r1, r5
180081ec:	e3ffdf9e 	bsr      	0x18004128	// 18004128 <pin_func>
    hw->CON &= ~ LL_SIMPLE_UART_CON_UARTEN;
180081f0:	9660      	ld.w      	r3, (r6, 0x0)
180081f2:	3b84      	bclri      	r3, 4
180081f4:	b660      	st.w      	r3, (r6, 0x0)
    dev->opened     = 0;
180081f6:	d8640040 	ld.b      	r3, (r4, 0x40)
    dev->use_dma    = 0;
180081fa:	e46320f2 	andi      	r3, r3, 242
180081fe:	c4655c01 	ins      	r3, r5, 1, 1
18008202:	dc640040 	st.b      	r3, (r4, 0x40)
}
18008206:	3000      	movi      	r0, 0
18008208:	1493      	pop      	r4-r6, r15
1800820a:	0000      	.short	0x0000
1800820c:	e000e100 	.long	0xe000e100

18008210 <hguart_v4_open>:
static int32 hguart_v4_open(struct uart_device *uart, uint32 baudrate) {
18008210:	14d4      	push      	r4-r7, r15
    if (dev->opened) {
18008212:	d8600040 	ld.b      	r3, (r0, 0x40)
18008216:	e4632001 	andi      	r3, r3, 1
static int32 hguart_v4_open(struct uart_device *uart, uint32 baudrate) {
1800821a:	6d43      	mov      	r5, r0
1800821c:	6d87      	mov      	r6, r1
    if (dev->opened) {
1800821e:	e9230022 	bnez      	r3, 0x18008262	// 18008262 <hguart_v4_open+0x52>
    struct hguart_v4_hw *hw  = (struct hguart_v4_hw *)dev->hw;
18008222:	90e3      	ld.w      	r7, (r0, 0xc)
    if (pin_func(dev->dev.dev.dev_id , 1) != RET_OK) {
18008224:	3101      	movi      	r1, 1
18008226:	9000      	ld.w      	r0, (r0, 0x0)
18008228:	e3ffdf80 	bsr      	0x18004128	// 18004128 <pin_func>
1800822c:	6d03      	mov      	r4, r0
1800822e:	e920001c 	bnez      	r0, 0x18008266	// 18008266 <hguart_v4_open+0x56>
    hw->BAUD = (peripheral_clock_get(HG_APB0_PT_UART4) / baudrate) - 1;
18008232:	3011      	movi      	r0, 17
18008234:	e00047bc 	bsr      	0x180111ac	// 180111ac <peripheral_clock_get>
18008238:	c4c08020 	divu      	r0, r0, r6
    hw->CON  = LL_SIMPLE_UART_CON_UARTEN;
1800823c:	3310      	movi      	r3, 16
    hw->BAUD = (peripheral_clock_get(HG_APB0_PT_UART4) / baudrate) - 1;
1800823e:	2800      	subi      	r0, 1
18008240:	b701      	st.w      	r0, (r7, 0x4)
    hw->CON  = LL_SIMPLE_UART_CON_UARTEN;
18008242:	b760      	st.w      	r3, (r7, 0x0)
    dev->opened     = 1;
18008244:	d8650040 	ld.b      	r3, (r5, 0x40)
18008248:	3201      	movi      	r2, 1
1800824a:	c4625c00 	ins      	r3, r2, 0, 0
    dev->irq_dma_rx = 0;
1800824e:	c4645c03 	ins      	r3, r4, 3, 3
    dev->irq_dma_tx = 0;
18008252:	c4645c02 	ins      	r3, r4, 2, 2
    dev->use_dma    = 0;
18008256:	c4645c01 	ins      	r3, r4, 1, 1
1800825a:	dc650040 	st.b      	r3, (r5, 0x40)
}
1800825e:	6c13      	mov      	r0, r4
18008260:	1494      	pop      	r4-r7, r15
        return RET_OK;
18008262:	3400      	movi      	r4, 0
18008264:	07fd      	br      	0x1800825e	// 1800825e <hguart_v4_open+0x4e>
        return RET_ERR;
18008266:	3400      	movi      	r4, 0
18008268:	2c00      	subi      	r4, 1
1800826a:	07fa      	br      	0x1800825e	// 1800825e <hguart_v4_open+0x4e>

1800826c <hguart_v4_ioctl>:
    if ((!dev->opened)) {
1800826c:	d9800040 	ld.b      	r12, (r0, 0x40)
18008270:	e5ac2001 	andi      	r13, r12, 1
18008274:	e90d0029 	bez      	r13, 0x180082c6	// 180082c6 <hguart_v4_ioctl+0x5a>
    switch (ioctl_cmd) {
18008278:	3945      	cmpnei      	r1, 5
1800827a:	0c10      	bf      	0x1800829a	// 1800829a <hguart_v4_ioctl+0x2e>
1800827c:	3948      	cmpnei      	r1, 8
1800827e:	0c1e      	bf      	0x180082ba	// 180082ba <hguart_v4_ioctl+0x4e>
18008280:	3944      	cmpnei      	r1, 4
18008282:	0825      	bt      	0x180082cc	// 180082cc <hguart_v4_ioctl+0x60>
            ret_val = hguart_v4_set_time_out((struct hguart_v4_hw *)dev->hw, param1, param2);
18008284:	9023      	ld.w      	r1, (r0, 0xc)
    if (enable) {
18008286:	e9030015 	bez      	r3, 0x180082b0	// 180082b0 <hguart_v4_ioctl+0x44>
        p_uart->CON |= LL_SIMPLE_UART_CON_TO_EN;
1800828a:	9160      	ld.w      	r3, (r1, 0x0)
1800828c:	3bbe      	bseti      	r3, 30
        p_uart->TOCON = LL_SIMPLE_UART_TOCON(time_bit);
1800828e:	c40255e0 	zext      	r0, r2, 15, 0
        p_uart->CON |= LL_SIMPLE_UART_CON_TO_EN;
18008292:	b160      	st.w      	r3, (r1, 0x0)
        p_uart->TOCON = LL_SIMPLE_UART_TOCON(time_bit);
18008294:	b103      	st.w      	r0, (r1, 0xc)
			ret_val = RET_OK;
18008296:	3000      	movi      	r0, 0
}
18008298:	783c      	jmp      	r15
    if (enable) {
1800829a:	e9020008 	bez      	r2, 0x180082aa	// 180082aa <hguart_v4_ioctl+0x3e>
        dev->use_dma = 1;
1800829e:	3301      	movi      	r3, 1
180082a0:	c5835c01 	ins      	r12, r3, 1, 1
			dev->debug_uart = (param1) ? (1) : (0);
180082a4:	dd800040 	st.b      	r12, (r0, 0x40)
180082a8:	07f7      	br      	0x18008296	// 18008296 <hguart_v4_ioctl+0x2a>
        dev->use_dma = 0;
180082aa:	c5825c01 	ins      	r12, r2, 1, 1
180082ae:	07fb      	br      	0x180082a4	// 180082a4 <hguart_v4_ioctl+0x38>
        p_uart->CON &=~ LL_SIMPLE_UART_CON_TO_EN;
180082b0:	9140      	ld.w      	r2, (r1, 0x0)
180082b2:	3a9e      	bclri      	r2, 30
180082b4:	b140      	st.w      	r2, (r1, 0x0)
        p_uart->TOCON = 0;
180082b6:	b163      	st.w      	r3, (r1, 0xc)
180082b8:	07ef      	br      	0x18008296	// 18008296 <hguart_v4_ioctl+0x2a>
			dev->debug_uart = (param1) ? (1) : (0);
180082ba:	3a40      	cmpnei      	r2, 0
180082bc:	c4000503 	mvc      	r3
180082c0:	c5835c04 	ins      	r12, r3, 4, 4
180082c4:	07f0      	br      	0x180082a4	// 180082a4 <hguart_v4_ioctl+0x38>
        return RET_ERR;
180082c6:	3000      	movi      	r0, 0
180082c8:	2800      	subi      	r0, 1
180082ca:	07e7      	br      	0x18008298	// 18008298 <hguart_v4_ioctl+0x2c>
            ret_val = -ENOTSUPP;
180082cc:	ea00020b 	movi      	r0, 523
180082d0:	6c02      	nor      	r0, r0
180082d2:	07e3      	br      	0x18008298	// 18008298 <hguart_v4_ioctl+0x2c>

180082d4 <hguart_v4_gets>:
static int32 hguart_v4_gets(struct uart_device *uart, uint8 *buf, uint32 size) {
180082d4:	14d5      	push      	r4-r8, r15
    if (!dev->opened) {
180082d6:	d8600040 	ld.b      	r3, (r0, 0x40)
static int32 hguart_v4_gets(struct uart_device *uart, uint8 *buf, uint32 size) {
180082da:	6d0b      	mov      	r4, r2
    if (!dev->opened) {
180082dc:	e4432001 	andi      	r2, r3, 1
static int32 hguart_v4_gets(struct uart_device *uart, uint8 *buf, uint32 size) {
180082e0:	6dc3      	mov      	r7, r0
180082e2:	6e07      	mov      	r8, r1
    struct hguart_v4_hw *hw  = (struct hguart_v4_hw *)dev->hw;
180082e4:	90c3      	ld.w      	r6, (r0, 0xc)
    if (!dev->opened) {
180082e6:	e9020049 	bez      	r2, 0x18008378	// 18008378 <hguart_v4_gets+0xa4>
	SIMPLE_UART_LOCK(&dev->mutex_rx, dev->debug_uart);
180082ea:	e4632010 	andi      	r3, r3, 16
180082ee:	e9030007 	bez      	r3, 0x180082fc	// 180082fc <hguart_v4_gets+0x28>
180082f2:	3100      	movi      	r1, 0
180082f4:	2900      	subi      	r1, 1
180082f6:	2033      	addi      	r0, 52
180082f8:	e000608a 	bsr      	0x1801440c	// 1801440c <os_mutex_lock>
    if (dev->use_dma) {
180082fc:	d8a70040 	ld.b      	r5, (r7, 0x40)
18008300:	e4a52002 	andi      	r5, r5, 2
18008304:	e9050037 	bez      	r5, 0x18008372	// 18008372 <hguart_v4_gets+0x9e>
        hw->DMAADR = (uint32)buf;
18008308:	dd062004 	st.w      	r8, (r6, 0x10)
        hw->DMALEN = size;
1800830c:	b685      	st.w      	r4, (r6, 0x14)
    uint32 _dmacon = p_uart->DMACON;
1800830e:	9666      	ld.w      	r3, (r6, 0x18)
	if (p_uart->CON & LL_SIMPLE_UART_CON_DMA_IE) {
18008310:	9680      	ld.w      	r4, (r6, 0x0)
18008312:	e4842080 	andi      	r4, r4, 128
18008316:	e9040006 	bez      	r4, 0x18008322	// 18008322 <hguart_v4_gets+0x4e>
		p_uart->CON &=~ LL_SIMPLE_UART_CON_DMA_IE;
1800831a:	9660      	ld.w      	r3, (r6, 0x0)
1800831c:	3b87      	bclri      	r3, 7
1800831e:	b660      	st.w      	r3, (r6, 0x0)
		flag = 1;
18008320:	3401      	movi      	r4, 1
    p_uart->DMACON = _dmacon;
18008322:	3205      	movi      	r2, 5
18008324:	b646      	st.w      	r2, (r6, 0x18)
    __ASM volatile("nop");
18008326:	6c03      	mov      	r0, r0
18008328:	6c03      	mov      	r0, r0
1800832a:	6c03      	mov      	r0, r0
1800832c:	6c03      	mov      	r0, r0
	p_uart->CON |= LL_SIMPLE_UART_CON_CLRDMAPEND;
1800832e:	9660      	ld.w      	r3, (r6, 0x0)
18008330:	3bb9      	bseti      	r3, 25
18008332:	b660      	st.w      	r3, (r6, 0x0)
	p_uart->DMACON = _dmacon;
18008334:	b646      	st.w      	r2, (r6, 0x18)
18008336:	6c03      	mov      	r0, r0
18008338:	6c03      	mov      	r0, r0
1800833a:	6c03      	mov      	r0, r0
1800833c:	6c03      	mov      	r0, r0
	p_uart->CON |= LL_SIMPLE_UART_CON_CLRDMAPEND;
1800833e:	9660      	ld.w      	r3, (r6, 0x0)
18008340:	3bb9      	bseti      	r3, 25
18008342:	b660      	st.w      	r3, (r6, 0x0)
	if (flag) {
18008344:	e9040007 	bez      	r4, 0x18008352	// 18008352 <hguart_v4_gets+0x7e>
		p_uart->CON |= LL_SIMPLE_UART_CON_DMA_IE;
18008348:	9660      	ld.w      	r3, (r6, 0x0)
1800834a:	ec630080 	ori      	r3, r3, 128
1800834e:	b660      	st.w      	r3, (r6, 0x0)
    uint32 i = 0;
18008350:	3400      	movi      	r4, 0
	SIMPLE_UART_UNLOCK(&dev->mutex_rx, dev->debug_uart);
18008352:	d8670040 	ld.b      	r3, (r7, 0x40)
18008356:	e4632010 	andi      	r3, r3, 16
1800835a:	e9030006 	bez      	r3, 0x18008366	// 18008366 <hguart_v4_gets+0x92>
1800835e:	e4070033 	addi      	r0, r7, 52
18008362:	e000606f 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
    return i;
18008366:	6c13      	mov      	r0, r4
}
18008368:	1495      	pop      	r4-r8, r15
            hguart_v4_getc(uart);
1800836a:	6c1f      	mov      	r0, r7
1800836c:	e3fffe6c 	bsr      	0x18008044	// 18008044 <hguart_v4_getc>
        for (i = 0; i < size; i++) {
18008370:	2500      	addi      	r5, 1
18008372:	6516      	cmpne      	r5, r4
18008374:	0bfb      	bt      	0x1800836a	// 1800836a <hguart_v4_gets+0x96>
18008376:	07ee      	br      	0x18008352	// 18008352 <hguart_v4_gets+0x7e>
        return RET_ERR;
18008378:	3000      	movi      	r0, 0
1800837a:	2800      	subi      	r0, 1
1800837c:	07f6      	br      	0x18008368	// 18008368 <hguart_v4_gets+0x94>
	...

18008380 <hguart_v4_attach>:
    .ioctl       = hguart_v4_ioctl,
    .request_irq = hguart_v4_request_irq,
    .release_irq = hguart_v4_release_irq,
};

int32 hguart_v4_attach(uint32 dev_id, struct hguart_v4 *uart) {
18008380:	14d3      	push      	r4-r6, r15
    
    uart->irq_data        = 0;
    uart->irq_hdl         = NULL;
    uart->opened          = 0;
18008382:	d8610040 	ld.b      	r3, (r1, 0x40)
    uart->irq_data        = 0;
18008386:	3500      	movi      	r5, 0
    uart->irq_dma_rx      = 0;
    uart->irq_dma_tx      = 0;
    uart->use_dma         = 0;
	uart->debug_uart      = 0;
18008388:	e46320f0 	andi      	r3, r3, 240
1800838c:	c4655c04 	ins      	r3, r5, 4, 4
int32 hguart_v4_attach(uint32 dev_id, struct hguart_v4 *uart) {
18008390:	6d07      	mov      	r4, r1
	uart->debug_uart      = 0;
18008392:	dc610040 	st.b      	r3, (r1, 0x40)
int32 hguart_v4_attach(uint32 dev_id, struct hguart_v4 *uart) {
18008396:	6d83      	mov      	r6, r0
	uart->p_tx_buf		  = NULL;
	uart->tx_cur_byte     = 0;
	uart->tx_total_byte   = 0;
    uart->dev.dev.ops     = (const struct devobj_ops *)&uart_v4_ops;
18008398:	1075      	lrw      	r3, 0x18016a60	// 180083ec <hguart_v4_attach+0x6c>

	os_sema_init(&uart->sema_tx, 0);
1800839a:	e4040023 	addi      	r0, r4, 36
    uart->dev.dev.ops     = (const struct devobj_ops *)&uart_v4_ops;
1800839e:	b162      	st.w      	r3, (r1, 0x8)
    uart->irq_data        = 0;
180083a0:	b1a5      	st.w      	r5, (r1, 0x14)
    uart->irq_hdl         = NULL;
180083a2:	b1a4      	st.w      	r5, (r1, 0x10)
	uart->p_tx_buf		  = NULL;
180083a4:	b1a8      	st.w      	r5, (r1, 0x20)
	uart->tx_cur_byte     = 0;
180083a6:	b1a7      	st.w      	r5, (r1, 0x1c)
	uart->tx_total_byte   = 0;
180083a8:	b1a6      	st.w      	r5, (r1, 0x18)
	os_sema_init(&uart->sema_tx, 0);
180083aa:	6c57      	mov      	r1, r5
180083ac:	e0006076 	bsr      	0x18014498	// 18014498 <os_sema_init>
	os_mutex_init(&uart->mutex_rx);
180083b0:	e4040033 	addi      	r0, r4, 52
180083b4:	e000600a 	bsr      	0x180143c8	// 180143c8 <os_mutex_init>
	os_mutex_init(&uart->mutex_tx);
180083b8:	e404002b 	addi      	r0, r4, 44
180083bc:	e0006006 	bsr      	0x180143c8	// 180143c8 <os_mutex_init>
	request_irq(uart->irq_num, hguart_v4_irq_handler, uart);
180083c0:	6c93      	mov      	r2, r4
180083c2:	102c      	lrw      	r1, 0x18007f30	// 180083f0 <hguart_v4_attach+0x70>
180083c4:	8c1e      	ld.h      	r0, (r4, 0x3c)
180083c6:	e3ffd98b 	bsr      	0x180036dc	// 180036dc <request_irq>
    irq_enable(uart->comm_irq_num);
180083ca:	8c7f      	ld.h      	r3, (r4, 0x3e)
    VIC->ISER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
180083cc:	c4a354c1 	zext      	r1, r3, 6, 5
180083d0:	3201      	movi      	r2, 1
180083d2:	e463201f 	andi      	r3, r3, 31
180083d6:	c4624023 	lsl      	r3, r2, r3
180083da:	1047      	lrw      	r2, 0xe000e100	// 180083f4 <hguart_v4_attach+0x74>
180083dc:	d4220883 	str.w      	r3, (r2, r1 << 2)

    dev_register(dev_id, (struct dev_obj *)uart);
180083e0:	6c1b      	mov      	r0, r6
180083e2:	6c53      	mov      	r1, r4
180083e4:	e3ffd660 	bsr      	0x180030a4	// 180030a4 <dev_register>
    return RET_OK;
}
180083e8:	6c17      	mov      	r0, r5
180083ea:	1493      	pop      	r4-r6, r15
180083ec:	18016a60 	.long	0x18016a60
180083f0:	18007f30 	.long	0x18007f30
180083f4:	e000e100 	.long	0xe000e100

180083f8 <hguart_v2_putc>:
{

    struct hguart_v2    *dev = (struct hguart_v2 *)uart;
    struct hguart_v2_hw *hw  = (struct hguart_v2_hw *)dev->hw;

    if (dev->opened && (hw->CON & LL_UART_CON_UART_EN) && (!dev->dsleep)) {
180083f8:	807a      	ld.b      	r3, (r0, 0x1a)
    struct hguart_v2_hw *hw  = (struct hguart_v2_hw *)dev->hw;
180083fa:	9043      	ld.w      	r2, (r0, 0xc)
    if (dev->opened && (hw->CON & LL_UART_CON_UART_EN) && (!dev->dsleep)) {
180083fc:	e4032001 	andi      	r0, r3, 1
18008400:	e9000013 	bez      	r0, 0x18008426	// 18008426 <hguart_v2_putc+0x2e>
18008404:	9200      	ld.w      	r0, (r2, 0x0)
18008406:	e4002001 	andi      	r0, r0, 1
1800840a:	e900000e 	bez      	r0, 0x18008426	// 18008426 <hguart_v2_putc+0x2e>
1800840e:	e4632002 	andi      	r3, r3, 2
18008412:	e923000a 	bnez      	r3, 0x18008426	// 18008426 <hguart_v2_putc+0x2e>
        while (!(hw->STA & LL_UART_STA_TX_BUF_EMPTY));
18008416:	9263      	ld.w      	r3, (r2, 0xc)
18008418:	e4632001 	andi      	r3, r3, 1
1800841c:	e903fffd 	bez      	r3, 0x18008416	// 18008416 <hguart_v2_putc+0x1e>
        hw->DATA = value;
18008420:	b222      	st.w      	r1, (r2, 0x8)
        return RET_OK;
18008422:	3000      	movi      	r0, 0
    } else {
        return -EIO;
    }
}
18008424:	783c      	jmp      	r15
        return -EIO;
18008426:	3000      	movi      	r0, 0
18008428:	2804      	subi      	r0, 5
1800842a:	07fd      	br      	0x18008424	// 18008424 <hguart_v2_putc+0x2c>

1800842c <hguart_v2_getc>:
{

    struct hguart_v2    *dev = (struct hguart_v2 *)uart;
    struct hguart_v2_hw *hw  = (struct hguart_v2_hw *)dev->hw;

    if (dev->opened && (hw->CON & LL_UART_CON_UART_EN) && (!dev->dsleep)) {
1800842c:	807a      	ld.b      	r3, (r0, 0x1a)
1800842e:	e4232001 	andi      	r1, r3, 1
    struct hguart_v2_hw *hw  = (struct hguart_v2_hw *)dev->hw;
18008432:	9043      	ld.w      	r2, (r0, 0xc)
    if (dev->opened && (hw->CON & LL_UART_CON_UART_EN) && (!dev->dsleep)) {
18008434:	e901000d 	bez      	r1, 0x1800844e	// 1800844e <hguart_v2_getc+0x22>
18008438:	9220      	ld.w      	r1, (r2, 0x0)
1800843a:	e4212001 	andi      	r1, r1, 1
1800843e:	e9010008 	bez      	r1, 0x1800844e	// 1800844e <hguart_v2_getc+0x22>
18008442:	e4632002 	andi      	r3, r3, 2
18008446:	e9230004 	bnez      	r3, 0x1800844e	// 1800844e <hguart_v2_getc+0x22>
        while (!(hw->STA & LL_UART_STA_RX_BUF_NOT_EMPTY));
1800844a:	9263      	ld.w      	r3, (r2, 0xc)
1800844c:	07fb      	br      	0x18008442	// 18008442 <hguart_v2_getc+0x16>
    }
    return hw->DATA;
1800844e:	9202      	ld.w      	r0, (r2, 0x8)
}
18008450:	7400      	zextb      	r0, r0
18008452:	783c      	jmp      	r15

18008454 <hguart_v2_irq_handler>:

    return ret_val;
}

static void hguart_v2_irq_handler(void *data)
{
18008454:	14d2      	push      	r4-r5, r15

    struct hguart_v2    *dev = (struct hguart_v2 *)data;
    struct hguart_v2_hw *hw  = (struct hguart_v2_hw *)dev->hw;
18008456:	9083      	ld.w      	r4, (r0, 0xc)
{
18008458:	6d43      	mov      	r5, r0

    /*------Time out interrupt-----*/
    if ((hw->TOCON & LL_UART_TOCON_TO_IE_EN) &&
1800845a:	946f      	ld.w      	r3, (r4, 0x3c)
1800845c:	e4632002 	andi      	r3, r3, 2
18008460:	e9030013 	bez      	r3, 0x18008486	// 18008486 <hguart_v2_irq_handler+0x32>
        (hw->STA   & LL_UART_STA_TO_PEND)) {
18008464:	9463      	ld.w      	r3, (r4, 0xc)
18008466:	e4632800 	andi      	r3, r3, 2048
    if ((hw->TOCON & LL_UART_TOCON_TO_IE_EN) &&
1800846a:	e903000e 	bez      	r3, 0x18008486	// 18008486 <hguart_v2_irq_handler+0x32>
        hw->STA = LL_UART_STA_TO_PEND;
1800846e:	3380      	movi      	r3, 128

        if (dev->irq_hdl) {
18008470:	d9802004 	ld.w      	r12, (r0, 0x10)
        hw->STA = LL_UART_STA_TO_PEND;
18008474:	4364      	lsli      	r3, r3, 4
18008476:	b463      	st.w      	r3, (r4, 0xc)
        if (dev->irq_hdl) {
18008478:	e90c0007 	bez      	r12, 0x18008486	// 18008486 <hguart_v2_irq_handler+0x32>
            dev->irq_hdl(UART_IRQ_FLAG_TIME_OUT, dev->irq_data, hw->RDMACNT, 0);
1800847c:	9025      	ld.w      	r1, (r0, 0x14)
1800847e:	9449      	ld.w      	r2, (r4, 0x24)
18008480:	3300      	movi      	r3, 0
18008482:	3002      	movi      	r0, 2
18008484:	7bf1      	jsr      	r12
        }
    }

    /*------Frame erro interrupt-----*/
    if ((hw->CON & LL_UART_CON_FERR_IE_EN) &&
18008486:	9460      	ld.w      	r3, (r4, 0x0)
18008488:	e4632800 	andi      	r3, r3, 2048
1800848c:	e9030012 	bez      	r3, 0x180084b0	// 180084b0 <hguart_v2_irq_handler+0x5c>
        (hw->STA & LL_UART_STA_FERR_PENDING)) {
18008490:	9463      	ld.w      	r3, (r4, 0xc)
18008492:	e4632008 	andi      	r3, r3, 8
    if ((hw->CON & LL_UART_CON_FERR_IE_EN) &&
18008496:	e903000d 	bez      	r3, 0x180084b0	// 180084b0 <hguart_v2_irq_handler+0x5c>
        hw->STA = LL_UART_STA_FERR_PENDING;

        if (dev->irq_hdl) {
1800849a:	d9852004 	ld.w      	r12, (r5, 0x10)
        hw->STA = LL_UART_STA_FERR_PENDING;
1800849e:	3308      	movi      	r3, 8
180084a0:	b463      	st.w      	r3, (r4, 0xc)
        if (dev->irq_hdl) {
180084a2:	e90c0007 	bez      	r12, 0x180084b0	// 180084b0 <hguart_v2_irq_handler+0x5c>
            dev->irq_hdl(UART_IRQ_FLAG_FRAME_ERR, dev->irq_data, 0, 0);
180084a6:	3300      	movi      	r3, 0
180084a8:	6c8f      	mov      	r2, r3
180084aa:	9525      	ld.w      	r1, (r5, 0x14)
180084ac:	3010      	movi      	r0, 16
180084ae:	7bf1      	jsr      	r12
        }
    }

    /*------TX complete interrupt-----*/
    if ((hw->CON & LL_UART_CON_TCIE_EN) &&
180084b0:	3280      	movi      	r2, 128
180084b2:	9460      	ld.w      	r3, (r4, 0x0)
180084b4:	4248      	lsli      	r2, r2, 8
180084b6:	68c8      	and      	r3, r2
180084b8:	e9030012 	bez      	r3, 0x180084dc	// 180084dc <hguart_v2_irq_handler+0x88>
        (hw->STA & LL_UART_STA_TC_PENDING)) {
180084bc:	3380      	movi      	r3, 128
180084be:	9443      	ld.w      	r2, (r4, 0xc)
180084c0:	4365      	lsli      	r3, r3, 5
180084c2:	688c      	and      	r2, r3
    if ((hw->CON & LL_UART_CON_TCIE_EN) &&
180084c4:	e902000c 	bez      	r2, 0x180084dc	// 180084dc <hguart_v2_irq_handler+0x88>
        hw->STA = LL_UART_STA_TC_PENDING;

        if (dev->irq_hdl) {
180084c8:	d9852004 	ld.w      	r12, (r5, 0x10)
        hw->STA = LL_UART_STA_TC_PENDING;
180084cc:	b463      	st.w      	r3, (r4, 0xc)
        if (dev->irq_hdl) {
180084ce:	e90c0007 	bez      	r12, 0x180084dc	// 180084dc <hguart_v2_irq_handler+0x88>
            dev->irq_hdl(UART_IRQ_FLAG_TX_BYTE, dev->irq_data, 0, 0);
180084d2:	3300      	movi      	r3, 0
180084d4:	6c8f      	mov      	r2, r3
180084d6:	9525      	ld.w      	r1, (r5, 0x14)
180084d8:	3001      	movi      	r0, 1
180084da:	7bf1      	jsr      	r12
        }
    }

    /*------RX_DMA_INTERRUPT-----*/
    if ((hw->DMACON & LL_UART_DMACON_RX_DMA_IE_EN) &&
180084dc:	946a      	ld.w      	r3, (r4, 0x28)
180084de:	e4632008 	andi      	r3, r3, 8
180084e2:	e9030012 	bez      	r3, 0x18008506	// 18008506 <hguart_v2_irq_handler+0xb2>
        (hw->DMASTA & LL_UART_DMASTA_RX_DMA_PEND)) {
180084e6:	946b      	ld.w      	r3, (r4, 0x2c)
180084e8:	e4632002 	andi      	r3, r3, 2
    if ((hw->DMACON & LL_UART_DMACON_RX_DMA_IE_EN) &&
180084ec:	e903000d 	bez      	r3, 0x18008506	// 18008506 <hguart_v2_irq_handler+0xb2>
        hw->DMASTA = LL_UART_DMASTA_RX_DMA_PEND;

        if (dev->irq_hdl) {
180084f0:	d9852004 	ld.w      	r12, (r5, 0x10)
        hw->DMASTA = LL_UART_DMASTA_RX_DMA_PEND;
180084f4:	3302      	movi      	r3, 2
180084f6:	b46b      	st.w      	r3, (r4, 0x2c)
        if (dev->irq_hdl) {
180084f8:	e90c0007 	bez      	r12, 0x18008506	// 18008506 <hguart_v2_irq_handler+0xb2>
            dev->irq_hdl(UART_IRQ_FLAG_DMA_RX_DONE, dev->irq_data, hw->RDMACNT, 0);
180084fc:	9449      	ld.w      	r2, (r4, 0x24)
180084fe:	3300      	movi      	r3, 0
18008500:	9525      	ld.w      	r1, (r5, 0x14)
18008502:	3008      	movi      	r0, 8
18008504:	7bf1      	jsr      	r12
        }
    }

    /*------TX_DMA_INTERRUPT-----*/
    if ((hw->DMACON & LL_UART_DMACON_TX_DMA_IE_EN) &&
18008506:	946a      	ld.w      	r3, (r4, 0x28)
18008508:	e4632004 	andi      	r3, r3, 4
1800850c:	e9030012 	bez      	r3, 0x18008530	// 18008530 <hguart_v2_irq_handler+0xdc>
        (hw->DMASTA & LL_UART_DMASTA_TX_DMA_PEND)) {
18008510:	946b      	ld.w      	r3, (r4, 0x2c)
18008512:	e4632001 	andi      	r3, r3, 1
    if ((hw->DMACON & LL_UART_DMACON_TX_DMA_IE_EN) &&
18008516:	e903000d 	bez      	r3, 0x18008530	// 18008530 <hguart_v2_irq_handler+0xdc>
        hw->DMASTA = LL_UART_DMASTA_TX_DMA_PEND;

        if (dev->irq_hdl) {
1800851a:	d9852004 	ld.w      	r12, (r5, 0x10)
        hw->DMASTA = LL_UART_DMASTA_TX_DMA_PEND;
1800851e:	3301      	movi      	r3, 1
18008520:	b46b      	st.w      	r3, (r4, 0x2c)
        if (dev->irq_hdl) {
18008522:	e90c0007 	bez      	r12, 0x18008530	// 18008530 <hguart_v2_irq_handler+0xdc>
            dev->irq_hdl(UART_IRQ_FLAG_DMA_TX_DONE, dev->irq_data, hw->TDMACNT, 0);
18008526:	9448      	ld.w      	r2, (r4, 0x20)
18008528:	3300      	movi      	r3, 0
1800852a:	9525      	ld.w      	r1, (r5, 0x14)
1800852c:	3004      	movi      	r0, 4
1800852e:	7bf1      	jsr      	r12
        }
    }

    /*------RX buf not empty interrupt-----*/
    if ((hw->CON & LL_UART_CON_RXBUF_NEMPTY_IE_EN) &&
18008530:	9460      	ld.w      	r3, (r4, 0x0)
18008532:	e4632200 	andi      	r3, r3, 512
18008536:	e9030010 	bez      	r3, 0x18008556	// 18008556 <hguart_v2_irq_handler+0x102>
        (hw->STA & LL_UART_STA_RX_BUF_NOT_EMPTY)) {
1800853a:	9463      	ld.w      	r3, (r4, 0xc)
1800853c:	e4632002 	andi      	r3, r3, 2
    if ((hw->CON & LL_UART_CON_RXBUF_NEMPTY_IE_EN) &&
18008540:	e903000b 	bez      	r3, 0x18008556	// 18008556 <hguart_v2_irq_handler+0x102>

        if (dev->irq_hdl) {
18008544:	d9852004 	ld.w      	r12, (r5, 0x10)
18008548:	e90c0007 	bez      	r12, 0x18008556	// 18008556 <hguart_v2_irq_handler+0x102>
            dev->irq_hdl(UART_IRQ_FLAG_RX_BYTE, dev->irq_data, hw->DATA, 0);
1800854c:	9442      	ld.w      	r2, (r4, 0x8)
1800854e:	3300      	movi      	r3, 0
18008550:	9525      	ld.w      	r1, (r5, 0x14)
18008552:	3020      	movi      	r0, 32
18008554:	7bf1      	jsr      	r12
        }
    }
}
18008556:	1492      	pop      	r4-r5, r15

18008558 <hguart_v2_release_irq>:
{

    struct hguart_v2    *dev = (struct hguart_v2 *)uart;
    struct hguart_v2_hw *hw  = (struct hguart_v2_hw *)dev->hw;

    if ((!dev->opened) || (dev->dsleep)) {
18008558:	805a      	ld.b      	r2, (r0, 0x1a)
1800855a:	e4422003 	andi      	r2, r2, 3
1800855e:	3a41      	cmpnei      	r2, 1
    struct hguart_v2_hw *hw  = (struct hguart_v2_hw *)dev->hw;
18008560:	9063      	ld.w      	r3, (r0, 0xc)
    if ((!dev->opened) || (dev->dsleep)) {
18008562:	082d      	bt      	0x180085bc	// 180085bc <hguart_v2_release_irq+0x64>
        return RET_ERR;
    }

    if (irq_flag & UART_IRQ_FLAG_TX_BYTE) {
18008564:	e4412001 	andi      	r2, r1, 1
18008568:	e9020005 	bez      	r2, 0x18008572	// 18008572 <hguart_v2_release_irq+0x1a>
        hw->CON    &= ~ LL_UART_CON_TCIE_EN;
1800856c:	9340      	ld.w      	r2, (r3, 0x0)
1800856e:	3a8f      	bclri      	r2, 15
18008570:	b340      	st.w      	r2, (r3, 0x0)
    }

    if (irq_flag & UART_IRQ_FLAG_TIME_OUT) {
18008572:	e4412002 	andi      	r2, r1, 2
18008576:	e9020005 	bez      	r2, 0x18008580	// 18008580 <hguart_v2_release_irq+0x28>
        hw->TOCON  &= ~ LL_UART_TOCON_TO_IE_EN;
1800857a:	934f      	ld.w      	r2, (r3, 0x3c)
1800857c:	3a81      	bclri      	r2, 1
1800857e:	b34f      	st.w      	r2, (r3, 0x3c)
    }

    if (irq_flag & UART_IRQ_FLAG_DMA_TX_DONE) {
18008580:	e4412004 	andi      	r2, r1, 4
18008584:	e9020005 	bez      	r2, 0x1800858e	// 1800858e <hguart_v2_release_irq+0x36>
        hw->DMACON &= ~ LL_UART_DMACON_TX_DMA_IE_EN;
18008588:	934a      	ld.w      	r2, (r3, 0x28)
1800858a:	3a82      	bclri      	r2, 2
1800858c:	b34a      	st.w      	r2, (r3, 0x28)
    }

    if (irq_flag & UART_IRQ_FLAG_DMA_RX_DONE) {
1800858e:	e4412008 	andi      	r2, r1, 8
18008592:	e9020005 	bez      	r2, 0x1800859c	// 1800859c <hguart_v2_release_irq+0x44>
        hw->DMACON &= ~ LL_UART_DMACON_RX_DMA_IE_EN;
18008596:	934a      	ld.w      	r2, (r3, 0x28)
18008598:	3a83      	bclri      	r2, 3
1800859a:	b34a      	st.w      	r2, (r3, 0x28)
    }

    if (irq_flag & UART_IRQ_FLAG_FRAME_ERR) {
1800859c:	e4412010 	andi      	r2, r1, 16
180085a0:	e9020005 	bez      	r2, 0x180085aa	// 180085aa <hguart_v2_release_irq+0x52>
        hw->CON    &= ~ LL_UART_CON_FERR_IE_EN;
180085a4:	9340      	ld.w      	r2, (r3, 0x0)
180085a6:	3a8b      	bclri      	r2, 11
180085a8:	b340      	st.w      	r2, (r3, 0x0)
    }

    if (irq_flag & UART_IRQ_FLAG_RX_BYTE) {
180085aa:	e4012020 	andi      	r0, r1, 32
180085ae:	e9000006 	bez      	r0, 0x180085ba	// 180085ba <hguart_v2_release_irq+0x62>
        hw->CON    &= ~ LL_UART_CON_RXBUF_NEMPTY_IE_EN;
180085b2:	9340      	ld.w      	r2, (r3, 0x0)
180085b4:	3a89      	bclri      	r2, 9
180085b6:	b340      	st.w      	r2, (r3, 0x0)
    }

    return RET_OK;
180085b8:	3000      	movi      	r0, 0
}
180085ba:	783c      	jmp      	r15
        return RET_ERR;
180085bc:	3000      	movi      	r0, 0
180085be:	2800      	subi      	r0, 1
180085c0:	07fd      	br      	0x180085ba	// 180085ba <hguart_v2_release_irq+0x62>
	...

180085c4 <hguart_v2_request_irq>:
{
180085c4:	14d3      	push      	r4-r6, r15
180085c6:	6d4b      	mov      	r5, r2
    if ((!dev->opened) || (dev->dsleep)) {
180085c8:	805a      	ld.b      	r2, (r0, 0x1a)
180085ca:	e4422003 	andi      	r2, r2, 3
180085ce:	3a41      	cmpnei      	r2, 1
{
180085d0:	6d83      	mov      	r6, r0
    struct hguart_v2_hw *hw  = (struct hguart_v2_hw *)dev->hw;
180085d2:	9083      	ld.w      	r4, (r0, 0xc)
    if ((!dev->opened) || (dev->dsleep)) {
180085d4:	0845      	bt      	0x1800865e	// 1800865e <hguart_v2_request_irq+0x9a>
    dev->irq_hdl  = irq_hdl;
180085d6:	b024      	st.w      	r1, (r0, 0x10)
    dev->irq_data = irq_data;
180085d8:	b065      	st.w      	r3, (r0, 0x14)
    request_irq(dev->irq_num, hguart_v2_irq_handler, dev);
180085da:	6c83      	mov      	r2, r0
180085dc:	1122      	lrw      	r1, 0x18008454	// 18008664 <hguart_v2_request_irq+0xa0>
180085de:	880c      	ld.h      	r0, (r0, 0x18)
180085e0:	e3ffd87e 	bsr      	0x180036dc	// 180036dc <request_irq>
    if (irq_flag & UART_IRQ_FLAG_TX_BYTE) {
180085e4:	e4652001 	andi      	r3, r5, 1
180085e8:	e9030006 	bez      	r3, 0x180085f4	// 180085f4 <hguart_v2_request_irq+0x30>
        hw->CON    |= LL_UART_CON_TCIE_EN;
180085ec:	9460      	ld.w      	r3, (r4, 0x0)
180085ee:	ec638000 	ori      	r3, r3, 32768
180085f2:	b460      	st.w      	r3, (r4, 0x0)
    if (irq_flag & UART_IRQ_FLAG_TIME_OUT) {
180085f4:	e4652002 	andi      	r3, r5, 2
180085f8:	e9030006 	bez      	r3, 0x18008604	// 18008604 <hguart_v2_request_irq+0x40>
        hw->TOCON  |= LL_UART_TOCON_TO_IE_EN;
180085fc:	946f      	ld.w      	r3, (r4, 0x3c)
180085fe:	ec630002 	ori      	r3, r3, 2
18008602:	b46f      	st.w      	r3, (r4, 0x3c)
    if (irq_flag & UART_IRQ_FLAG_DMA_TX_DONE) {
18008604:	e4652004 	andi      	r3, r5, 4
18008608:	e9030006 	bez      	r3, 0x18008614	// 18008614 <hguart_v2_request_irq+0x50>
        hw->DMACON |= LL_UART_DMACON_TX_DMA_IE_EN;
1800860c:	946a      	ld.w      	r3, (r4, 0x28)
1800860e:	ec630004 	ori      	r3, r3, 4
18008612:	b46a      	st.w      	r3, (r4, 0x28)
    if (irq_flag & UART_IRQ_FLAG_DMA_RX_DONE) {
18008614:	e4652008 	andi      	r3, r5, 8
18008618:	e9030006 	bez      	r3, 0x18008624	// 18008624 <hguart_v2_request_irq+0x60>
        hw->DMACON |= LL_UART_DMACON_RX_DMA_IE_EN;
1800861c:	946a      	ld.w      	r3, (r4, 0x28)
1800861e:	ec630008 	ori      	r3, r3, 8
18008622:	b46a      	st.w      	r3, (r4, 0x28)
    if (irq_flag & UART_IRQ_FLAG_FRAME_ERR) {
18008624:	e4652010 	andi      	r3, r5, 16
18008628:	e9030006 	bez      	r3, 0x18008634	// 18008634 <hguart_v2_request_irq+0x70>
        hw->CON    |= LL_UART_CON_FERR_IE_EN;
1800862c:	9460      	ld.w      	r3, (r4, 0x0)
1800862e:	ec630800 	ori      	r3, r3, 2048
18008632:	b460      	st.w      	r3, (r4, 0x0)
    if (irq_flag & UART_IRQ_FLAG_RX_BYTE) {
18008634:	e4a52020 	andi      	r5, r5, 32
18008638:	e9050006 	bez      	r5, 0x18008644	// 18008644 <hguart_v2_request_irq+0x80>
        hw->CON    |= LL_UART_CON_RXBUF_NEMPTY_IE_EN;
1800863c:	9460      	ld.w      	r3, (r4, 0x0)
1800863e:	ec630200 	ori      	r3, r3, 512
18008642:	b460      	st.w      	r3, (r4, 0x0)
    irq_enable(dev->irq_num);
18008644:	8e6c      	ld.h      	r3, (r6, 0x18)
18008646:	c4a354c1 	zext      	r1, r3, 6, 5
1800864a:	3201      	movi      	r2, 1
1800864c:	e463201f 	andi      	r3, r3, 31
18008650:	c4624023 	lsl      	r3, r2, r3
18008654:	1045      	lrw      	r2, 0xe000e100	// 18008668 <hguart_v2_request_irq+0xa4>
18008656:	d4220883 	str.w      	r3, (r2, r1 << 2)
    return RET_OK;
1800865a:	3000      	movi      	r0, 0
}
1800865c:	1493      	pop      	r4-r6, r15
        return RET_ERR;
1800865e:	3000      	movi      	r0, 0
18008660:	2800      	subi      	r0, 1
18008662:	07fd      	br      	0x1800865c	// 1800865c <hguart_v2_request_irq+0x98>
18008664:	18008454 	.long	0x18008454
18008668:	e000e100 	.long	0xe000e100

1800866c <hguart_v2_ioctl>:
{
1800866c:	14d2      	push      	r4-r5, r15
1800866e:	6d0b      	mov      	r4, r2
    if ((!dev->opened) || (dev->dsleep)) {
18008670:	805a      	ld.b      	r2, (r0, 0x1a)
18008672:	e4422003 	andi      	r2, r2, 3
18008676:	3a41      	cmpnei      	r2, 1
    struct hguart_v2_hw *hw  = (struct hguart_v2_hw *)dev->hw;
18008678:	90a3      	ld.w      	r5, (r0, 0xc)
    if ((!dev->opened) || (dev->dsleep)) {
1800867a:	0881      	bt      	0x1800877c	// 1800877c <hguart_v2_ioctl+0x110>
    switch (ioctl_cmd) {
1800867c:	3906      	cmphsi      	r1, 7
1800867e:	0863      	bt      	0x18008744	// 18008744 <hguart_v2_ioctl+0xd8>
18008680:	1042      	lrw      	r2, 0x18016a84	// 18008688 <hguart_v2_ioctl+0x1c>
18008682:	d0220882 	ldr.w      	r2, (r2, r1 << 2)
18008686:	7808      	jmp      	r2
18008688:	18016a84 	.long	0x18016a84
    p_uart->BAUD = (peripheral_clock_get(HG_APB0_PT_UART0) / baudrate - 1);
1800868c:	300f      	movi      	r0, 15
1800868e:	e000458f 	bsr      	0x180111ac	// 180111ac <peripheral_clock_get>
18008692:	c4808020 	divu      	r0, r0, r4
18008696:	2800      	subi      	r0, 1
18008698:	b501      	st.w      	r0, (r5, 0x4)
    return RET_OK;
1800869a:	3000      	movi      	r0, 0
1800869c:	0420      	br      	0x180086dc	// 180086dc <hguart_v2_ioctl+0x70>
    switch (param) {
1800869e:	3c43      	cmpnei      	r4, 3
180086a0:	0c08      	bf      	0x180086b0	// 180086b0 <hguart_v2_ioctl+0x44>
180086a2:	3c44      	cmpnei      	r4, 4
180086a4:	086c      	bt      	0x1800877c	// 1800877c <hguart_v2_ioctl+0x110>
        p_uart->CON |=   LL_UART_CON_BIT9_EN;
180086a6:	9560      	ld.w      	r3, (r5, 0x0)
180086a8:	ec630010 	ori      	r3, r3, 16
        p_uart->CON &= ~ LL_UART_CON_BIT9_EN;
180086ac:	b560      	st.w      	r3, (r5, 0x0)
180086ae:	07f6      	br      	0x1800869a	// 1800869a <hguart_v2_ioctl+0x2e>
180086b0:	9560      	ld.w      	r3, (r5, 0x0)
180086b2:	3b84      	bclri      	r3, 4
180086b4:	07fc      	br      	0x180086ac	// 180086ac <hguart_v2_ioctl+0x40>
180086b6:	3c02      	cmphsi      	r4, 3
180086b8:	3200      	movi      	r2, 0
180086ba:	2a00      	subi      	r2, 1
180086bc:	085e      	bt      	0x18008778	// 18008778 <hguart_v2_ioctl+0x10c>
180086be:	1172      	lrw      	r3, 0x18016aa0	// 18008784 <hguart_v2_ioctl+0x118>
180086c0:	d0831020 	ldr.bs      	r0, (r3, r4 << 0)
    if (((-1) == parity_to_reg)) {
180086c4:	6482      	cmpne      	r0, r2
180086c6:	0c0b      	bf      	0x180086dc	// 180086dc <hguart_v2_ioctl+0x70>
    switch (parity_to_reg) {
180086c8:	3841      	cmpnei      	r0, 1
180086ca:	0c0a      	bf      	0x180086de	// 180086de <hguart_v2_ioctl+0x72>
180086cc:	3842      	cmpnei      	r0, 2
180086ce:	0c0c      	bf      	0x180086e6	// 180086e6 <hguart_v2_ioctl+0x7a>
180086d0:	e920ffe5 	bnez      	r0, 0x1800869a	// 1800869a <hguart_v2_ioctl+0x2e>
            p_uart->CON &= ~(LL_UART_CON_PARITY_EN | LL_UART_CON_ODD_EN);
180086d4:	9560      	ld.w      	r3, (r5, 0x0)
180086d6:	3b85      	bclri      	r3, 5
180086d8:	3b86      	bclri      	r3, 6
180086da:	b560      	st.w      	r3, (r5, 0x0)
}
180086dc:	1492      	pop      	r4-r5, r15
            p_uart->CON |= LL_UART_CON_PARITY_EN | LL_UART_CON_ODD_EN;
180086de:	9560      	ld.w      	r3, (r5, 0x0)
180086e0:	ec630060 	ori      	r3, r3, 96
180086e4:	07e4      	br      	0x180086ac	// 180086ac <hguart_v2_ioctl+0x40>
            p_uart->CON = (p_uart->CON & ~(LL_UART_CON_ODD_EN)) | LL_UART_CON_PARITY_EN;
180086e6:	9560      	ld.w      	r3, (r5, 0x0)
180086e8:	3b85      	bclri      	r3, 5
180086ea:	3b86      	bclri      	r3, 6
180086ec:	ec630020 	ori      	r3, r3, 32
180086f0:	07de      	br      	0x180086ac	// 180086ac <hguart_v2_ioctl+0x40>
    switch (param) {
180086f2:	e9040008 	bez      	r4, 0x18008702	// 18008702 <hguart_v2_ioctl+0x96>
180086f6:	3c42      	cmpnei      	r4, 2
180086f8:	0842      	bt      	0x1800877c	// 1800877c <hguart_v2_ioctl+0x110>
        p_uart->CON |=   LL_UART_CON_STOP_BIT(1);
180086fa:	9560      	ld.w      	r3, (r5, 0x0)
180086fc:	ec630008 	ori      	r3, r3, 8
18008700:	07d6      	br      	0x180086ac	// 180086ac <hguart_v2_ioctl+0x40>
        p_uart->CON &= ~ LL_UART_CON_STOP_BIT(1);
18008702:	9560      	ld.w      	r3, (r5, 0x0)
18008704:	3b83      	bclri      	r3, 3
18008706:	07d3      	br      	0x180086ac	// 180086ac <hguart_v2_ioctl+0x40>
    if (enable) {
18008708:	e903000b 	bez      	r3, 0x1800871e	// 1800871e <hguart_v2_ioctl+0xb2>
        p_uart->TOCON = (p_uart->TOCON & ~ LL_UART_TOCON_TO_BIT_LEN(0xFFFF)) | LL_UART_TOCON_TO_BIT_LEN(time_bit) | LL_UART_TOCON_TO_EN;
1800870c:	956f      	ld.w      	r3, (r5, 0x3c)
1800870e:	4410      	lsli      	r0, r4, 16
18008710:	ec000001 	ori      	r0, r0, 1
18008714:	c40355e4 	zext      	r4, r3, 15, 0
18008718:	6c10      	or      	r0, r4
1800871a:	b50f      	st.w      	r0, (r5, 0x3c)
1800871c:	07bf      	br      	0x1800869a	// 1800869a <hguart_v2_ioctl+0x2e>
        p_uart->TOCON = 0;
1800871e:	b56f      	st.w      	r3, (r5, 0x3c)
18008720:	07bd      	br      	0x1800869a	// 1800869a <hguart_v2_ioctl+0x2e>
18008722:	807a      	ld.b      	r3, (r0, 0x1a)
    if (enable) {
18008724:	e9040007 	bez      	r4, 0x18008732	// 18008732 <hguart_v2_ioctl+0xc6>
        dev->use_dma = 1;
18008728:	3201      	movi      	r2, 1
1800872a:	c4625c02 	ins      	r3, r2, 2, 2
        dev->use_dma = 0;
1800872e:	a07a      	st.b      	r3, (r0, 0x1a)
18008730:	07b5      	br      	0x1800869a	// 1800869a <hguart_v2_ioctl+0x2e>
18008732:	c4645c02 	ins      	r3, r4, 2, 2
18008736:	07fc      	br      	0x1800872e	// 1800872e <hguart_v2_ioctl+0xc2>
    switch (mode) {
18008738:	3c41      	cmpnei      	r4, 1
1800873a:	0c0f      	bf      	0x18008758	// 18008758 <hguart_v2_ioctl+0xec>
1800873c:	3c40      	cmpnei      	r4, 0
1800873e:	0c07      	bf      	0x1800874c	// 1800874c <hguart_v2_ioctl+0xe0>
18008740:	3c42      	cmpnei      	r4, 2
18008742:	0c13      	bf      	0x18008768	// 18008768 <hguart_v2_ioctl+0xfc>
            return -ENOTSUPP;
18008744:	ea00020b 	movi      	r0, 523
18008748:	6c02      	nor      	r0, r0
1800874a:	07c9      	br      	0x180086dc	// 180086dc <hguart_v2_ioctl+0x70>
            p_uart->CON &= ~ LL_UART_CON_WORK_MODE(0x3);
1800874c:	9560      	ld.w      	r3, (r5, 0x0)
1800874e:	3b81      	bclri      	r3, 1
18008750:	3b82      	bclri      	r3, 2
18008752:	b560      	st.w      	r3, (r5, 0x0)
            p_uart->CON |=   LL_UART_CON_WORK_MODE(0);
18008754:	9560      	ld.w      	r3, (r5, 0x0)
18008756:	07ab      	br      	0x180086ac	// 180086ac <hguart_v2_ioctl+0x40>
            p_uart->CON &= ~ LL_UART_CON_WORK_MODE(0x3);
18008758:	9560      	ld.w      	r3, (r5, 0x0)
1800875a:	3b81      	bclri      	r3, 1
1800875c:	3b82      	bclri      	r3, 2
1800875e:	b560      	st.w      	r3, (r5, 0x0)
            p_uart->CON |=   LL_UART_CON_WORK_MODE(1);
18008760:	9560      	ld.w      	r3, (r5, 0x0)
18008762:	ec630002 	ori      	r3, r3, 2
18008766:	07a3      	br      	0x180086ac	// 180086ac <hguart_v2_ioctl+0x40>
            p_uart->CON &= ~ LL_UART_CON_WORK_MODE(0x3);
18008768:	9560      	ld.w      	r3, (r5, 0x0)
1800876a:	3b81      	bclri      	r3, 1
1800876c:	3b82      	bclri      	r3, 2
1800876e:	b560      	st.w      	r3, (r5, 0x0)
            p_uart->CON |=   LL_UART_CON_WORK_MODE(2);
18008770:	9560      	ld.w      	r3, (r5, 0x0)
18008772:	ec630004 	ori      	r3, r3, 4
18008776:	079b      	br      	0x180086ac	// 180086ac <hguart_v2_ioctl+0x40>
        return RET_ERR;
18008778:	6c0b      	mov      	r0, r2
1800877a:	07b1      	br      	0x180086dc	// 180086dc <hguart_v2_ioctl+0x70>
        return RET_ERR;
1800877c:	3000      	movi      	r0, 0
1800877e:	2800      	subi      	r0, 1
18008780:	07ae      	br      	0x180086dc	// 180086dc <hguart_v2_ioctl+0x70>
18008782:	0000      	.short	0x0000
18008784:	18016aa0 	.long	0x18016aa0

18008788 <hguart_v2_close>:
{
18008788:	14d2      	push      	r4-r5, r15
    if (!dev->opened) {
1800878a:	807a      	ld.b      	r3, (r0, 0x1a)
1800878c:	e4632001 	andi      	r3, r3, 1
{
18008790:	6d03      	mov      	r4, r0
    if (!dev->opened) {
18008792:	e9030027 	bez      	r3, 0x180087e0	// 180087e0 <hguart_v2_close+0x58>
    struct hguart_v2_hw *hw  = (struct hguart_v2_hw *)dev->hw;
18008796:	9063      	ld.w      	r3, (r0, 0xc)
    if (HG_UART0_BASE == (uint32)hw) {
18008798:	ea024000 	movi      	r2, 16384
1800879c:	3abe      	bseti      	r2, 30
1800879e:	648e      	cmpne      	r3, r2
180087a0:	0822      	bt      	0x180087e4	// 180087e4 <hguart_v2_close+0x5c>
        sysctrl_uart0_clk_close();
180087a2:	ea214002 	movih      	r1, 16386
180087a6:	9153      	ld.w      	r2, (r1, 0x4c)
180087a8:	3a8a      	bclri      	r2, 10
        sysctrl_uart1_clk_close();
180087aa:	b153      	st.w      	r2, (r1, 0x4c)
    hw->CON &= ~0x1;
180087ac:	9340      	ld.w      	r2, (r3, 0x0)
180087ae:	3a80      	bclri      	r2, 0
180087b0:	b340      	st.w      	r2, (r3, 0x0)
    irq_disable(dev->irq_num);
180087b2:	8c6c      	ld.h      	r3, (r4, 0x18)
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
180087b4:	c4a354c2 	zext      	r2, r3, 6, 5
180087b8:	3101      	movi      	r1, 1
180087ba:	e463201f 	andi      	r3, r3, 31
180087be:	c4614023 	lsl      	r3, r1, r3
180087c2:	221f      	addi      	r2, 32
180087c4:	102d      	lrw      	r1, 0xe000e100	// 180087f8 <hguart_v2_close+0x70>
180087c6:	d4410883 	str.w      	r3, (r1, r2 << 2)
180087ca:	3500      	movi      	r5, 0
    pin_func(dev->dev.dev.dev_id, 0);
180087cc:	6c57      	mov      	r1, r5
180087ce:	9400      	ld.w      	r0, (r4, 0x0)
180087d0:	e3ffdcac 	bsr      	0x18004128	// 18004128 <pin_func>
    dev->opened = 0;
180087d4:	847a      	ld.b      	r3, (r4, 0x1a)
    dev->dsleep = 0;
180087d6:	e46320fe 	andi      	r3, r3, 254
180087da:	c4655c01 	ins      	r3, r5, 1, 1
180087de:	a47a      	st.b      	r3, (r4, 0x1a)
}
180087e0:	3000      	movi      	r0, 0
180087e2:	1492      	pop      	r4-r5, r15
    } else if (HG_UART1_BASE == (uint32)hw) {
180087e4:	ea024100 	movi      	r2, 16640
180087e8:	3abe      	bseti      	r2, 30
180087ea:	648e      	cmpne      	r3, r2
180087ec:	0be0      	bt      	0x180087ac	// 180087ac <hguart_v2_close+0x24>
        sysctrl_uart1_clk_close();
180087ee:	ea214002 	movih      	r1, 16386
180087f2:	9153      	ld.w      	r2, (r1, 0x4c)
180087f4:	3a8b      	bclri      	r2, 11
180087f6:	07da      	br      	0x180087aa	// 180087aa <hguart_v2_close+0x22>
180087f8:	e000e100 	.long	0xe000e100

180087fc <hguart_v2_open>:
{
180087fc:	14d5      	push      	r4-r8, r15
    if (dev->opened) {
180087fe:	807a      	ld.b      	r3, (r0, 0x1a)
18008800:	e4432001 	andi      	r2, r3, 1
{
18008804:	6e03      	mov      	r8, r0
18008806:	6dc7      	mov      	r7, r1
    struct hguart_v2_hw *hw  = (struct hguart_v2_hw *)dev->hw;
18008808:	9083      	ld.w      	r4, (r0, 0xc)
    if (dev->opened) {
1800880a:	e9020006 	bez      	r2, 0x18008816	// 18008816 <hguart_v2_open+0x1a>
        if (!dev->dsleep) {
1800880e:	e4632002 	andi      	r3, r3, 2
18008812:	e903004f 	bez      	r3, 0x180088b0	// 180088b0 <hguart_v2_open+0xb4>
    if ((baudrate < 0) || ((peripheral_clock_get(HG_APB0_PT_UART0) / baudrate) > 0x0003ffff)) {
18008816:	300f      	movi      	r0, 15
18008818:	e00044ca 	bsr      	0x180111ac	// 180111ac <peripheral_clock_get>
1800881c:	c4e08020 	divu      	r0, r0, r7
18008820:	c6205023 	bmaski      	r3, 18
18008824:	640c      	cmphs      	r3, r0
18008826:	0805      	bt      	0x18008830	// 18008830 <hguart_v2_open+0x34>
        return RET_ERR;
18008828:	3600      	movi      	r6, 0
1800882a:	2e00      	subi      	r6, 1
}
1800882c:	6c1b      	mov      	r0, r6
1800882e:	1495      	pop      	r4-r8, r15
    if (pin_func(dev->dev.dev.dev_id, 1) != RET_OK) {
18008830:	3101      	movi      	r1, 1
18008832:	d8082000 	ld.w      	r0, (r8, 0x0)
18008836:	e3ffdc79 	bsr      	0x18004128	// 18004128 <pin_func>
1800883a:	6d83      	mov      	r6, r0
1800883c:	e920fff6 	bnez      	r0, 0x18008828	// 18008828 <hguart_v2_open+0x2c>
    if (HG_UART0_BASE == (uint32)hw) {
18008840:	ea034000 	movi      	r3, 16384
18008844:	3bbe      	bseti      	r3, 30
18008846:	64d2      	cmpne      	r4, r3
18008848:	0829      	bt      	0x1800889a	// 1800889a <hguart_v2_open+0x9e>
        sysctrl_uart0_clk_open();
1800884a:	ea224002 	movih      	r2, 16386
1800884e:	9273      	ld.w      	r3, (r2, 0x4c)
18008850:	ec630400 	ori      	r3, r3, 1024
        sysctrl_uart1_clk_open();
18008854:	b273      	st.w      	r3, (r2, 0x4c)
    hw->CON       = 0;
18008856:	3500      	movi      	r5, 0
    hw->STA       = 0xFFFFFFFF;
18008858:	6cd7      	mov      	r3, r5
1800885a:	2b00      	subi      	r3, 1
    hw->CON       = 0;
1800885c:	b4a0      	st.w      	r5, (r4, 0x0)
    hw->BAUD = (peripheral_clock_get(HG_APB0_PT_UART0) / baudrate) - 1;
1800885e:	300f      	movi      	r0, 15
    hw->BAUD      = 0;
18008860:	b4a1      	st.w      	r5, (r4, 0x4)
    hw->STA       = 0xFFFFFFFF;
18008862:	b463      	st.w      	r3, (r4, 0xc)
    hw->DMACON    = 0;
18008864:	b4aa      	st.w      	r5, (r4, 0x28)
    hw->DMASTA    = 0xFFFFFFFF;
18008866:	b46b      	st.w      	r3, (r4, 0x2c)
    hw->RSTADR    = 0;
18008868:	b4a5      	st.w      	r5, (r4, 0x14)
    hw->TSTADR    = 0;
1800886a:	b4a4      	st.w      	r5, (r4, 0x10)
    hw->RDMALEN   = 0;
1800886c:	b4a7      	st.w      	r5, (r4, 0x1c)
    hw->TDMALEN   = 0;
1800886e:	b4a6      	st.w      	r5, (r4, 0x18)
    hw->TOCON     = 0;
18008870:	b4af      	st.w      	r5, (r4, 0x3c)
    hw->RS485_CON = 0;
18008872:	b4ac      	st.w      	r5, (r4, 0x30)
    hw->RS485_DET = 0;
18008874:	b4ad      	st.w      	r5, (r4, 0x34)
    hw->RS485_TAT = 0;
18008876:	b4ae      	st.w      	r5, (r4, 0x38)
    hw->BAUD = (peripheral_clock_get(HG_APB0_PT_UART0) / baudrate) - 1;
18008878:	e000449a 	bsr      	0x180111ac	// 180111ac <peripheral_clock_get>
1800887c:	c4e08020 	divu      	r0, r0, r7
    hw->CON  = 0x1;      /* Default config: 8bit + 1 stop_bit + no parity + duplex mode */
18008880:	3201      	movi      	r2, 1
    hw->BAUD = (peripheral_clock_get(HG_APB0_PT_UART0) / baudrate) - 1;
18008882:	2800      	subi      	r0, 1
18008884:	b401      	st.w      	r0, (r4, 0x4)
    hw->CON  = 0x1;      /* Default config: 8bit + 1 stop_bit + no parity + duplex mode */
18008886:	b440      	st.w      	r2, (r4, 0x0)
    dev->opened = 1;
18008888:	d868001a 	ld.b      	r3, (r8, 0x1a)
1800888c:	c4625c00 	ins      	r3, r2, 0, 0
    dev->dsleep = 0;
18008890:	c4655c01 	ins      	r3, r5, 1, 1
18008894:	dc68001a 	st.b      	r3, (r8, 0x1a)
    return RET_OK;
18008898:	07ca      	br      	0x1800882c	// 1800882c <hguart_v2_open+0x30>
    } else if (HG_UART1_BASE == (uint32)hw) {
1800889a:	ea034100 	movi      	r3, 16640
1800889e:	3bbe      	bseti      	r3, 30
180088a0:	64d2      	cmpne      	r4, r3
180088a2:	0bda      	bt      	0x18008856	// 18008856 <hguart_v2_open+0x5a>
        sysctrl_uart1_clk_open();
180088a4:	ea224002 	movih      	r2, 16386
180088a8:	9273      	ld.w      	r3, (r2, 0x4c)
180088aa:	ec630800 	ori      	r3, r3, 2048
180088ae:	07d3      	br      	0x18008854	// 18008854 <hguart_v2_open+0x58>
            return -EBUSY;
180088b0:	3600      	movi      	r6, 0
180088b2:	2e0f      	subi      	r6, 16
180088b4:	07bc      	br      	0x1800882c	// 1800882c <hguart_v2_open+0x30>
	...

180088b8 <hguart_v2_puts>:
{
180088b8:	14d3      	push      	r4-r6, r15
    if ((!dev->opened) || (dev->dsleep)) {
180088ba:	807a      	ld.b      	r3, (r0, 0x1a)
180088bc:	e5832003 	andi      	r12, r3, 3
180088c0:	eb4c0001 	cmpnei      	r12, 1
{
180088c4:	6d43      	mov      	r5, r0
    if ((!dev->opened) || (dev->dsleep)) {
180088c6:	0839      	bt      	0x18008938	// 18008938 <hguart_v2_puts+0x80>
    if (((__PSRAM_ADDR_START <= (uint32)buf)) && (((uint32)buf) <= __PSRAM_ADDR_END)) {
180088c8:	ea20e780 	movih      	r0, 59264
180088cc:	c401002d 	addu      	r13, r1, r0
180088d0:	3080      	movi      	r0, 128
180088d2:	4010      	lsli      	r0, r0, 16
180088d4:	6740      	cmphs      	r0, r13
180088d6:	0c0e      	bf      	0x180088f2	// 180088f2 <hguart_v2_puts+0x3a>
180088d8:	5988      	addu      	r4, r1, r2
180088da:	6d87      	mov      	r6, r1
        for (i = 0; i < len; i++) {
180088dc:	651a      	cmpne      	r6, r4
180088de:	0803      	bt      	0x180088e4	// 180088e4 <hguart_v2_puts+0x2c>
    return RET_OK;
180088e0:	3000      	movi      	r0, 0
}
180088e2:	1493      	pop      	r4-r6, r15
            hguart_v2_putc(uart, buf[i]);
180088e4:	d8264000 	ld.bs      	r1, (r6, 0x0)
180088e8:	6c17      	mov      	r0, r5
180088ea:	e3fffd87 	bsr      	0x180083f8	// 180083f8 <hguart_v2_putc>
180088ee:	2600      	addi      	r6, 1
180088f0:	07f6      	br      	0x180088dc	// 180088dc <hguart_v2_puts+0x24>
        if (dev->use_dma) {
180088f2:	e4632004 	andi      	r3, r3, 4
180088f6:	e923000d 	bnez      	r3, 0x18008910	// 18008910 <hguart_v2_puts+0x58>
180088fa:	5988      	addu      	r4, r1, r2
180088fc:	6d87      	mov      	r6, r1
            for (i = 0; i < len; i++) {
180088fe:	651a      	cmpne      	r6, r4
18008900:	0ff0      	bf      	0x180088e0	// 180088e0 <hguart_v2_puts+0x28>
                hguart_v2_putc(uart, buf[i]);
18008902:	d8264000 	ld.bs      	r1, (r6, 0x0)
18008906:	6c17      	mov      	r0, r5
18008908:	e3fffd78 	bsr      	0x180083f8	// 180083f8 <hguart_v2_putc>
1800890c:	2600      	addi      	r6, 1
1800890e:	07f8      	br      	0x180088fe	// 180088fe <hguart_v2_puts+0x46>
    struct hguart_v2_hw *hw  = (struct hguart_v2_hw *)dev->hw;
18008910:	9563      	ld.w      	r3, (r5, 0xc)
    uint32 _dmacon = p_uart->DMACON;
18008912:	930a      	ld.w      	r0, (r3, 0x28)
        _dmacon &= ~ BIT(0);
18008914:	3880      	bclri      	r0, 0
        _dmacon |= BIT(8);
18008916:	ec000100 	ori      	r0, r0, 256
    p_uart->DMACON = _dmacon;
1800891a:	b30a      	st.w      	r0, (r3, 0x28)
            hw->DMASTA  = BIT(0);
1800891c:	dd83200b 	st.w      	r12, (r3, 0x2c)
            hw->TSTADR  = (uint32)buf;
18008920:	b324      	st.w      	r1, (r3, 0x10)
            hw->TDMALEN = len;
18008922:	b346      	st.w      	r2, (r3, 0x18)
    uint32 _dmacon = p_uart->DMACON;
18008924:	934a      	ld.w      	r2, (r3, 0x28)
        _dmacon |= LL_UART_DMACON_TX_DMA_EN;
18008926:	ec420101 	ori      	r2, r2, 257
    p_uart->DMACON = _dmacon;
1800892a:	b34a      	st.w      	r2, (r3, 0x28)
            while (!(hw->DMASTA & LL_UART_DMASTA_TX_DMA_PEND));
1800892c:	934b      	ld.w      	r2, (r3, 0x2c)
1800892e:	e4422001 	andi      	r2, r2, 1
18008932:	e902fffd 	bez      	r2, 0x1800892c	// 1800892c <hguart_v2_puts+0x74>
18008936:	07d5      	br      	0x180088e0	// 180088e0 <hguart_v2_puts+0x28>
        return RET_ERR;
18008938:	3000      	movi      	r0, 0
1800893a:	2800      	subi      	r0, 1
1800893c:	07d3      	br      	0x180088e2	// 180088e2 <hguart_v2_puts+0x2a>
	...

18008940 <hguart_v2_gets>:
{
18008940:	14d4      	push      	r4-r7, r15
    if ((!dev->opened) || (dev->dsleep)) {
18008942:	807a      	ld.b      	r3, (r0, 0x1a)
{
18008944:	6d4b      	mov      	r5, r2
    if ((!dev->opened) || (dev->dsleep)) {
18008946:	e4432003 	andi      	r2, r3, 3
1800894a:	3a41      	cmpnei      	r2, 1
{
1800894c:	6d83      	mov      	r6, r0
    if ((!dev->opened) || (dev->dsleep)) {
1800894e:	0832      	bt      	0x180089b2	// 180089b2 <hguart_v2_gets+0x72>
    if (((__PSRAM_ADDR_START <= (uint32)buf)) && (((uint32)buf) <= __PSRAM_ADDR_END)) {
18008950:	ea22e780 	movih      	r2, 59264
18008954:	5908      	addu      	r0, r1, r2
18008956:	3280      	movi      	r2, 128
18008958:	4250      	lsli      	r2, r2, 16
1800895a:	6408      	cmphs      	r2, r0
1800895c:	0c0d      	bf      	0x18008976	// 18008976 <hguart_v2_gets+0x36>
1800895e:	59f4      	addu      	r7, r1, r5
18008960:	6d07      	mov      	r4, r1
        for (i = 0; i < len; i++) {
18008962:	65d2      	cmpne      	r4, r7
18008964:	0803      	bt      	0x1800896a	// 1800896a <hguart_v2_gets+0x2a>
18008966:	6c17      	mov      	r0, r5
}
18008968:	1494      	pop      	r4-r7, r15
            buf[i] = hguart_v2_getc(uart);
1800896a:	6c1b      	mov      	r0, r6
1800896c:	e3fffd60 	bsr      	0x1800842c	// 1800842c <hguart_v2_getc>
18008970:	a400      	st.b      	r0, (r4, 0x0)
18008972:	2400      	addi      	r4, 1
18008974:	07f7      	br      	0x18008962	// 18008962 <hguart_v2_gets+0x22>
        if (dev->use_dma) {
18008976:	e4632004 	andi      	r3, r3, 4
1800897a:	e923000c 	bnez      	r3, 0x18008992	// 18008992 <hguart_v2_gets+0x52>
1800897e:	59f4      	addu      	r7, r1, r5
18008980:	6d07      	mov      	r4, r1
            for (i = 0; i < len; i++) {
18008982:	65d2      	cmpne      	r4, r7
18008984:	0ff1      	bf      	0x18008966	// 18008966 <hguart_v2_gets+0x26>
                buf[i] = hguart_v2_getc(uart);
18008986:	6c1b      	mov      	r0, r6
18008988:	e3fffd52 	bsr      	0x1800842c	// 1800842c <hguart_v2_getc>
1800898c:	a400      	st.b      	r0, (r4, 0x0)
1800898e:	2400      	addi      	r4, 1
18008990:	07f9      	br      	0x18008982	// 18008982 <hguart_v2_gets+0x42>
    struct hguart_v2_hw *hw  = (struct hguart_v2_hw *)dev->hw;
18008992:	9663      	ld.w      	r3, (r6, 0xc)
            hw->STA     = BIT(1);
18008994:	3202      	movi      	r2, 2
    uint32 _dmacon = p_uart->DMACON;
18008996:	930a      	ld.w      	r0, (r3, 0x28)
        _dmacon &= ~ BIT(1);
18008998:	3881      	bclri      	r0, 1
        _dmacon |= BIT(9);
1800899a:	ec000200 	ori      	r0, r0, 512
    p_uart->DMACON = _dmacon;
1800899e:	b30a      	st.w      	r0, (r3, 0x28)
            hw->STA     = BIT(1);
180089a0:	b343      	st.w      	r2, (r3, 0xc)
            hw->RSTADR  = (uint32)buf;
180089a2:	b325      	st.w      	r1, (r3, 0x14)
            hw->RDMALEN = len;
180089a4:	b3a7      	st.w      	r5, (r3, 0x1c)
    uint32 _dmacon = p_uart->DMACON;
180089a6:	934a      	ld.w      	r2, (r3, 0x28)
        _dmacon |= LL_UART_DMACON_RX_DMA_EN;
180089a8:	ec420202 	ori      	r2, r2, 514
    p_uart->DMACON = _dmacon;
180089ac:	b34a      	st.w      	r2, (r3, 0x28)
            return RET_OK;
180089ae:	3000      	movi      	r0, 0
180089b0:	07dc      	br      	0x18008968	// 18008968 <hguart_v2_gets+0x28>
        return RET_ERR;
180089b2:	3000      	movi      	r0, 0
180089b4:	2800      	subi      	r0, 1
180089b6:	07d9      	br      	0x18008968	// 18008968 <hguart_v2_gets+0x28>

180089b8 <hguart_v2_attach>:
    .ops.resume  = NULL,//hguart_v2_resume,
#endif
};

int32 hguart_v2_attach(uint32 dev_id, struct hguart_v2 *uart)
{
180089b8:	14d1      	push      	r4, r15
    uart->opened          = 0;
180089ba:	815a      	ld.b      	r2, (r1, 0x1a)
180089bc:	3400      	movi      	r4, 0
    uart->dsleep          = 0;
    uart->use_dma         = 0;
180089be:	e44220fc 	andi      	r2, r2, 252
180089c2:	c4445c02 	ins      	r2, r4, 2, 2
    uart->dev.dev.ops     = (const struct devobj_ops *)&uart_v2_ops;
#ifdef CONFIG_SLEEP
    os_mutex_init(&uart->bp_suspend_lock);
    os_mutex_init(&uart->bp_resume_lock);
#endif
    irq_disable(uart->irq_num);
180089c6:	896c      	ld.h      	r3, (r1, 0x18)
    uart->use_dma         = 0;
180089c8:	a15a      	st.b      	r2, (r1, 0x1a)
180089ca:	ea0c0001 	movi      	r12, 1
    uart->dev.dev.ops     = (const struct devobj_ops *)&uart_v2_ops;
180089ce:	104a      	lrw      	r2, 0x18016aa4	// 180089f4 <hguart_v2_attach+0x3c>
180089d0:	b142      	st.w      	r2, (r1, 0x8)
180089d2:	c4a354c2 	zext      	r2, r3, 6, 5
180089d6:	e463201f 	andi      	r3, r3, 31
180089da:	c46c4023 	lsl      	r3, r12, r3
180089de:	221f      	addi      	r2, 32
180089e0:	ea8c0006 	lrw      	r12, 0xe000e100	// 180089f8 <hguart_v2_attach+0x40>
    uart->irq_hdl         = NULL;
180089e4:	b184      	st.w      	r4, (r1, 0x10)
    uart->irq_data        = 0;
180089e6:	b185      	st.w      	r4, (r1, 0x14)
180089e8:	d44c0883 	str.w      	r3, (r12, r2 << 2)
    dev_register(dev_id, (struct dev_obj *)uart);
180089ec:	e3ffd35c 	bsr      	0x180030a4	// 180030a4 <dev_register>
    return RET_OK;
}
180089f0:	6c13      	mov      	r0, r4
180089f2:	1491      	pop      	r4, r15
180089f4:	18016aa4 	.long	0x18016aa4
180089f8:	e000e100 	.long	0xe000e100

180089fc <hg_crc_irq_handler>:
    [CRC_TYPE_CRC16_MODBUS] = &crc16_modbus,
    [CRC_TYPE_CRC32_WINRAR] = &crc32_winrar,
};

static void hg_crc_irq_handler(void *data)
{
180089fc:	14d0      	push      	r15
    struct hg_crc *crc = (struct hg_crc *)data;
    struct hg_crc_hw *hw = (struct hg_crc_hw *)crc->hw;
180089fe:	9063      	ld.w      	r3, (r0, 0xc)

    hw->CRC_KST = LL_CRC_KST_DMA_PENDING_CLR;
18008a00:	3201      	movi      	r2, 1
18008a02:	b344      	st.w      	r2, (r3, 0x10)
    os_sema_up(&crc->done);
18008a04:	201f      	addi      	r0, 32
18008a06:	e0005d95 	bsr      	0x18014530	// 18014530 <os_sema_up>
}
18008a0a:	1490      	pop      	r15

18008a0c <hg_crc_hold>:
    return ret > 0 ? RET_OK : RET_ERR;
}


static int32 hg_crc_hold(struct crc_dev *crc, uint16 *cookie, uint32 hold)
{
18008a0c:	14d4      	push      	r4-r7, r15
18008a0e:	6d43      	mov      	r5, r0
18008a10:	6dc7      	mov      	r7, r1
18008a12:	6d0b      	mov      	r4, r2
    int32 ret = RET_ERR;
    struct hg_crc *dev = (struct hg_crc *)crc;

    os_mutex_lock(&dev->lock, osWaitForever);
18008a14:	e4c00017 	addi      	r6, r0, 24
18008a18:	3100      	movi      	r1, 0
18008a1a:	2900      	subi      	r1, 1
18008a1c:	6c1b      	mov      	r0, r6
18008a1e:	e0005cf7 	bsr      	0x1801440c	// 1801440c <os_mutex_lock>
18008a22:	956b      	ld.w      	r3, (r5, 0x2c)
    if (hold) {
18008a24:	e9040022 	bez      	r4, 0x18008a68	// 18008a68 <hg_crc_hold+0x5c>
        if (!(dev->flags & HGCRC_FLAGS_HOLD) || (*cookie != dev->cookie)) {
18008a28:	e4632002 	andi      	r3, r3, 2
18008a2c:	e9030006 	bez      	r3, 0x18008a38	// 18008a38 <hg_crc_hold+0x2c>
18008a30:	8f40      	ld.h      	r2, (r7, 0x0)
18008a32:	8d78      	ld.h      	r3, (r5, 0x30)
18008a34:	64ca      	cmpne      	r2, r3
18008a36:	0c17      	bf      	0x18008a64	// 18008a64 <hg_crc_hold+0x58>
            os_mutex_unlock(&dev->lock);
18008a38:	6c1b      	mov      	r0, r6
18008a3a:	e0005d03 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>

            if (os_mutex_lock(&dev->hold, 100) < 0) {
18008a3e:	3164      	movi      	r1, 100
18008a40:	e405000f 	addi      	r0, r5, 16
18008a44:	e0005ce4 	bsr      	0x1801440c	// 1801440c <os_mutex_lock>
18008a48:	e9800029 	blz      	r0, 0x18008a9a	// 18008a9a <hg_crc_hold+0x8e>
                return -EBUSY;
            }

            os_mutex_lock(&dev->lock, osWaitForever);
18008a4c:	3100      	movi      	r1, 0
18008a4e:	2900      	subi      	r1, 1
18008a50:	6c1b      	mov      	r0, r6
18008a52:	e0005cdd 	bsr      	0x1801440c	// 1801440c <os_mutex_lock>
            dev->cookie = (os_jiffies()&0xffff);
18008a56:	e0005e67 	bsr      	0x18014724	// 18014724 <os_jiffies>
            dev->flags |= HGCRC_FLAGS_HOLD;
18008a5a:	956b      	ld.w      	r3, (r5, 0x2c)
18008a5c:	ec630002 	ori      	r3, r3, 2
            dev->cookie = (os_jiffies()&0xffff);
18008a60:	ad18      	st.h      	r0, (r5, 0x30)
            dev->flags |= HGCRC_FLAGS_HOLD;
18008a62:	b56b      	st.w      	r3, (r5, 0x2c)
        }
        ret = RET_OK;
18008a64:	3400      	movi      	r4, 0
18008a66:	0410      	br      	0x18008a86	// 18008a86 <hg_crc_hold+0x7a>
    } else {
        if ((dev->flags & HGCRC_FLAGS_HOLD) && (*cookie == dev->cookie)) {
18008a68:	e4432002 	andi      	r2, r3, 2
18008a6c:	e9020014 	bez      	r2, 0x18008a94	// 18008a94 <hg_crc_hold+0x88>
18008a70:	8f20      	ld.h      	r1, (r7, 0x0)
18008a72:	8d58      	ld.h      	r2, (r5, 0x30)
18008a74:	6486      	cmpne      	r1, r2
18008a76:	080f      	bt      	0x18008a94	// 18008a94 <hg_crc_hold+0x88>
            dev->cookie = 0;
            dev->flags &= ~HGCRC_FLAGS_HOLD;
18008a78:	3b81      	bclri      	r3, 1
            dev->cookie = 0;
18008a7a:	ad98      	st.h      	r4, (r5, 0x30)
            dev->flags &= ~HGCRC_FLAGS_HOLD;
18008a7c:	b56b      	st.w      	r3, (r5, 0x2c)
            os_mutex_unlock(&dev->hold);
18008a7e:	e405000f 	addi      	r0, r5, 16
18008a82:	e0005cdf 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
            ret = RET_OK;
        }
    }
    *cookie = dev->cookie;
18008a86:	8d78      	ld.h      	r3, (r5, 0x30)
18008a88:	af60      	st.h      	r3, (r7, 0x0)
    os_mutex_unlock(&dev->lock);
18008a8a:	6c1b      	mov      	r0, r6
18008a8c:	e0005cda 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
    return ret;
}
18008a90:	6c13      	mov      	r0, r4
18008a92:	1494      	pop      	r4-r7, r15
    int32 ret = RET_ERR;
18008a94:	3400      	movi      	r4, 0
18008a96:	2c00      	subi      	r4, 1
18008a98:	07f7      	br      	0x18008a86	// 18008a86 <hg_crc_hold+0x7a>
                return -EBUSY;
18008a9a:	3400      	movi      	r4, 0
18008a9c:	2c0f      	subi      	r4, 16
18008a9e:	07f9      	br      	0x18008a90	// 18008a90 <hg_crc_hold+0x84>

18008aa0 <hg_crc_calc>:

/**
 * CRC len 512KB for TXW81x； 64KB for TXW80x
 */
static int32 hg_crc_calc(struct crc_dev *crc, struct crc_dev_req *req, uint32 *crc_value, uint32 flags)
{
18008aa0:	14d8      	push      	r4-r11, r15
18008aa2:	1421      	subi      	r14, r14, 4
18008aa4:	6d0f      	mov      	r4, r3
    uint32 cookie  = req->cookie;
    struct hg_crc    *dev = (struct hg_crc *)crc;
    struct hg_crc_hw *hw  = (struct hg_crc_hw *)dev->hw;
    const struct hgcrc_config *p_cfg;

    if (req == NULL || req->data == NULL || req->len == 0 || req->type >= CRC_TYPE_MAX) {
18008aa6:	9161      	ld.w      	r3, (r1, 0x4)
{
18008aa8:	6e83      	mov      	r10, r0
18008aaa:	6d47      	mov      	r5, r1
18008aac:	6dcb      	mov      	r7, r2
    uint32 cookie  = req->cookie;
18008aae:	d9211001 	ld.h      	r9, (r1, 0x2)
    struct hg_crc_hw *hw  = (struct hg_crc_hw *)dev->hw;
18008ab2:	d9602003 	ld.w      	r11, (r0, 0xc)
    if (req == NULL || req->data == NULL || req->len == 0 || req->type >= CRC_TYPE_MAX) {
18008ab6:	e90300d8 	bez      	r3, 0x18008c66	// 18008c66 <hg_crc_calc+0x1c6>
18008aba:	9162      	ld.w      	r3, (r1, 0x8)
18008abc:	e90300d5 	bez      	r3, 0x18008c66	// 18008c66 <hg_crc_calc+0x1c6>
18008ac0:	8960      	ld.h      	r3, (r1, 0x0)
18008ac2:	3b08      	cmphsi      	r3, 9
18008ac4:	08d1      	bt      	0x18008c66	// 18008c66 <hg_crc_calc+0x1c6>
    if (CRC_TYPE_TCPIP_CHKSUM == req->type) {
        return RET_ERR;
    }
#endif

    p_cfg = hgcrc_cfg[req->type];
18008ac6:	134e      	lrw      	r2, 0x18016b88	// 18008c7c <hg_crc_calc+0x1dc>
18008ac8:	d062088c 	ldr.w      	r12, (r2, r3 << 2)
    if (p_cfg == NULL) {
18008acc:	dd8e2000 	st.w      	r12, (r14, 0x0)
18008ad0:	e90c00ce 	bez      	r12, 0x18008c6c	// 18008c6c <hg_crc_calc+0x1cc>
        return -ENOTSUP;
    }
    
    if(hg_crc_hold(crc, &req->cookie, 1)){
18008ad4:	59c6      	addi      	r6, r1, 2
18008ad6:	3201      	movi      	r2, 1
18008ad8:	6c5b      	mov      	r1, r6
18008ada:	e3ffff99 	bsr      	0x18008a0c	// 18008a0c <hg_crc_hold>
18008ade:	6e03      	mov      	r8, r0
18008ae0:	e92000ca 	bnez      	r0, 0x18008c74	// 18008c74 <hg_crc_calc+0x1d4>
        return -EBUSY;
    }

    hold = (cookie == req->cookie);
    if (flags & CRC_DEV_FLAGS_CONTINUE_CALC) {
18008ae4:	e4642001 	andi      	r3, r4, 1
18008ae8:	d98e2000 	ld.w      	r12, (r14, 0x0)
18008aec:	9581      	ld.w      	r4, (r5, 0x4)
18008aee:	e903001a 	bez      	r3, 0x18008b22	// 18008b22 <hg_crc_calc+0x82>
    struct hg_crc_hw *hw = (struct hg_crc_hw *)dev->hw;
18008af2:	d8ca2003 	ld.w      	r6, (r10, 0xc)
    ret = os_sema_down(&dev->done, tmo);
18008af6:	31fa      	movi      	r1, 250
    hw->CRC_INIT = hw->CRC_OUT ^ hw->CRC_INV;
18008af8:	9669      	ld.w      	r3, (r6, 0x24)
18008afa:	9642      	ld.w      	r2, (r6, 0x8)
18008afc:	6cc9      	xor      	r3, r2
18008afe:	b661      	st.w      	r3, (r6, 0x4)
    hw->DMA_LEN  = req->len;
18008b00:	9562      	ld.w      	r3, (r5, 0x8)
    hw->DMA_ADDR = (uint32)req->data;
18008b02:	b687      	st.w      	r4, (r6, 0x1c)
    ret = os_sema_down(&dev->done, tmo);
18008b04:	4123      	lsli      	r1, r1, 3
    hw->DMA_LEN  = req->len;
18008b06:	b668      	st.w      	r3, (r6, 0x20)
    ret = os_sema_down(&dev->done, tmo);
18008b08:	e40a001f 	addi      	r0, r10, 32
18008b0c:	e0005cf6 	bsr      	0x180144f8	// 180144f8 <os_sema_down>
    return ret > 0 ? RET_OK : RET_ERR;
18008b10:	3820      	cmplti      	r0, 1
    *crc_value = hw->CRC_OUT;
18008b12:	9669      	ld.w      	r3, (r6, 0x24)
    return ret > 0 ? RET_OK : RET_ERR;
18008b14:	c4000500 	mvc      	r0
    *crc_value = hw->CRC_OUT;
18008b18:	b760      	st.w      	r3, (r7, 0x0)
    return ret > 0 ? RET_OK : RET_ERR;
18008b1a:	c4080080 	subu      	r0, r8, r0

    if (!hold) {
        hg_crc_hold(crc, &req->cookie, 0);
    }
    return ret > 0 ? RET_OK : RET_ERR;
}
18008b1e:	1401      	addi      	r14, r14, 4
18008b20:	1498      	pop      	r4-r11, r15
    sysctrl_crc_reset();
18008b22:	ea234002 	movih      	r3, 16386
    hold = (cookie == req->cookie);
18008b26:	d9051001 	ld.h      	r8, (r5, 0x2)
    sysctrl_crc_reset();
18008b2a:	9342      	ld.w      	r2, (r3, 0x8)
18008b2c:	3a8e      	bclri      	r2, 14
18008b2e:	b342      	st.w      	r2, (r3, 0x8)
18008b30:	6c03      	mov      	r0, r0
18008b32:	6c03      	mov      	r0, r0
18008b34:	6c03      	mov      	r0, r0
18008b36:	9342      	ld.w      	r2, (r3, 0x8)
18008b38:	ec424000 	ori      	r2, r2, 16384
18008b3c:	b342      	st.w      	r2, (r3, 0x8)
    if (0 == p_cfg->poly_bits) {
18008b3e:	d86c2001 	ld.w      	r3, (r12, 0x4)
18008b42:	e9030072 	bez      	r3, 0x18008c26	// 18008c26 <hg_crc_calc+0x186>
        cfg_reg = LL_CRC_CFG_INT_EN | LL_CRC_CFG_POLY_BITS(p_cfg->poly_bits) | LL_CRC_CFG_DMAWAIT_CLOCK(5);
18008b46:	32fc      	movi      	r2, 252
18008b48:	4246      	lsli      	r2, r2, 6
18008b4a:	4368      	lsli      	r3, r3, 8
18008b4c:	68c8      	and      	r3, r2
        if (p_cfg->ref_in) {
18008b4e:	d84c0010 	ld.b      	r2, (r12, 0x10)
18008b52:	e9020066 	bez      	r2, 0x18008c1e	// 18008c1e <hg_crc_calc+0x17e>
        cfg_reg = LL_CRC_CFG_INT_EN | LL_CRC_CFG_POLY_BITS(p_cfg->poly_bits) | LL_CRC_CFG_DMAWAIT_CLOCK(5);
18008b56:	ea220005 	movih      	r2, 5
18008b5a:	3aa0      	bseti      	r2, 0
            cfg_reg |= LL_CRC_CFG_BIT_ORDER_LEFT;
18008b5c:	6cc8      	or      	r3, r2
    hw->CRC_INIT = p_cfg->init_val;
18008b5e:	d84c2002 	ld.w      	r2, (r12, 0x8)
18008b62:	dc4b2001 	st.w      	r2, (r11, 0x4)
    hw->CRC_INV  = p_cfg->xor_out;
18008b66:	d84c2003 	ld.w      	r2, (r12, 0xc)
18008b6a:	dc4b2002 	st.w      	r2, (r11, 0x8)
    hw->CRC_POLY = p_cfg->poly;
18008b6e:	d84c2000 	ld.w      	r2, (r12, 0x0)
18008b72:	dc4b2003 	st.w      	r2, (r11, 0xc)
    hw->CRC_CFG  = cfg_reg;
18008b76:	dc6b2000 	st.w      	r3, (r11, 0x0)
    if (((uint32)addr >= PSRAM_BASE) && 
18008b7a:	33c8      	movi      	r3, 200
18008b7c:	4378      	lsli      	r3, r3, 24
18008b7e:	5c4c      	addu      	r2, r4, r3
18008b80:	c6e05023 	bmaski      	r3, 24
18008b84:	648c      	cmphs      	r3, r2
18008b86:	0c30      	bf      	0x18008be6	// 18008be6 <hg_crc_calc+0x146>
    return (CACHE->CER & CACHE_CER_EN_Msk);  
18008b88:	117e      	lrw      	r3, 0xe000f000	// 18008c80 <hg_crc_calc+0x1e0>
18008b8a:	9360      	ld.w      	r3, (r3, 0x0)
18008b8c:	e4632001 	andi      	r3, r3, 1
        ((uint32)addr < PSRAM_END_ADDR) && 
18008b90:	e903002b 	bez      	r3, 0x18008be6	// 18008be6 <hg_crc_calc+0x146>
        ASSERT(!(((uint32)addr) & (BIT(CACHE_CIR_INV_ADDR_Pos)-1)));
18008b94:	e444200f 	andi      	r2, r4, 15
    sys_dcache_clean_range((uint32 *)req->data, req->len);
18008b98:	9562      	ld.w      	r3, (r5, 0x8)
18008b9a:	e902000a 	bez      	r2, 0x18008bae	// 18008bae <hg_crc_calc+0x10e>
18008b9e:	3188      	movi      	r1, 136
18008ba0:	1159      	lrw      	r2, 0x1801659a	// 18008c84 <hg_crc_calc+0x1e4>
18008ba2:	4121      	lsli      	r1, r1, 1
18008ba4:	1119      	lrw      	r0, 0x18016ac8	// 18008c88 <hg_crc_calc+0x1e8>
18008ba6:	b860      	st.w      	r3, (r14, 0x0)
18008ba8:	e3ffd236 	bsr      	0x18003014	// 18003014 <assert_internal>
18008bac:	9860      	ld.w      	r3, (r14, 0x0)
    int32_t op_size = dsize + (int32_t)addr % 16;
18008bae:	c7c05022 	bmaski      	r2, 31
18008bb2:	220f      	addi      	r2, 16
18008bb4:	6890      	and      	r2, r4
18008bb6:	e9a20007 	bhsz      	r2, 0x18008bc4	// 18008bc4 <hg_crc_calc+0x124>
18008bba:	3100      	movi      	r1, 0
18008bbc:	2a00      	subi      	r2, 1
18008bbe:	290f      	subi      	r1, 16
18008bc0:	6c84      	or      	r2, r1
18008bc2:	2200      	addi      	r2, 1
18008bc4:	608c      	addu      	r2, r3
    uint32_t op_addr = (uint32_t)addr & CACHE_CIR_INV_ADDR_Msk;
18008bc6:	3300      	movi      	r3, 0
18008bc8:	2b0f      	subi      	r3, 16
18008bca:	68d0      	and      	r3, r4
    op_addr |= _VAL2FLD(CACHE_CIR_CLR_ONE, 1);
18008bcc:	ec630008 	ori      	r3, r3, 8
        CACHE->CIR = op_addr;
18008bd0:	112c      	lrw      	r1, 0xe000f000	// 18008c80 <hg_crc_calc+0x1e0>
    while (op_size >= 128) {
18008bd2:	eb22007f 	cmplti      	r2, 128
18008bd6:	0c2c      	bf      	0x18008c2e	// 18008c2e <hg_crc_calc+0x18e>
18008bd8:	60c8      	addu      	r3, r2
        CACHE->CIR = op_addr;
18008bda:	110a      	lrw      	r0, 0xe000f000	// 18008c80 <hg_crc_calc+0x1e0>
18008bdc:	5b29      	subu      	r1, r3, r2
    while (op_size > 0) {
18008bde:	e9420041 	bhz      	r2, 0x18008c60	// 18008c60 <hg_crc_calc+0x1c0>
    __ASM volatile("sync"::: "memory");
18008be2:	c0000420 	sync
    hw->DMA_ADDR = (uint32)req->data;
18008be6:	9561      	ld.w      	r3, (r5, 0x4)
18008be8:	dc6b2007 	st.w      	r3, (r11, 0x1c)
    hw->DMA_LEN  = req->len;
18008bec:	9562      	ld.w      	r3, (r5, 0x8)
18008bee:	dc6b2008 	st.w      	r3, (r11, 0x20)
    ret = os_sema_down(&dev->done, 100);
18008bf2:	3164      	movi      	r1, 100
18008bf4:	e40a001f 	addi      	r0, r10, 32
18008bf8:	e0005c80 	bsr      	0x180144f8	// 180144f8 <os_sema_down>
    if (!hold) {
18008bfc:	6626      	cmpne      	r9, r8
    *crc_value = hw->CRC_OUT;
18008bfe:	d86b2009 	ld.w      	r3, (r11, 0x24)
    ret = os_sema_down(&dev->done, 100);
18008c02:	6d03      	mov      	r4, r0
    *crc_value = hw->CRC_OUT;
18008c04:	b760      	st.w      	r3, (r7, 0x0)
    if (!hold) {
18008c06:	0c06      	bf      	0x18008c12	// 18008c12 <hg_crc_calc+0x172>
        hg_crc_hold(crc, &req->cookie, 0);
18008c08:	3200      	movi      	r2, 0
18008c0a:	6c5b      	mov      	r1, r6
18008c0c:	6c2b      	mov      	r0, r10
18008c0e:	e3fffeff 	bsr      	0x18008a0c	// 18008a0c <hg_crc_hold>
    return ret > 0 ? RET_OK : RET_ERR;
18008c12:	3c20      	cmplti      	r4, 1
18008c14:	c4000503 	mvc      	r3
18008c18:	3000      	movi      	r0, 0
18008c1a:	600e      	subu      	r0, r3
18008c1c:	0781      	br      	0x18008b1e	// 18008b1e <hg_crc_calc+0x7e>
            cfg_reg |= LL_CRC_CFG_BIT_ORDER_LEFT;
18008c1e:	ea220005 	movih      	r2, 5
18008c22:	2202      	addi      	r2, 3
18008c24:	079c      	br      	0x18008b5c	// 18008b5c <hg_crc_calc+0xbc>
        cfg_reg = LL_CRC_CFG_INT_EN | LL_CRC_CFG_TCP_MODE_EN | LL_CRC_CFG_DMAWAIT_CLOCK(5);
18008c26:	ea230105 	movih      	r3, 261
18008c2a:	3ba0      	bseti      	r3, 0
18008c2c:	0799      	br      	0x18008b5e	// 18008b5e <hg_crc_calc+0xbe>
        op_addr += linesize;
18008c2e:	e403000f 	addi      	r0, r3, 16
        CACHE->CIR = op_addr;
18008c32:	b161      	st.w      	r3, (r1, 0x4)
        CACHE->CIR = op_addr;
18008c34:	b101      	st.w      	r0, (r1, 0x4)
        op_addr += linesize;
18008c36:	e403001f 	addi      	r0, r3, 32
        CACHE->CIR = op_addr;
18008c3a:	b101      	st.w      	r0, (r1, 0x4)
        op_addr += linesize;
18008c3c:	e403002f 	addi      	r0, r3, 48
        CACHE->CIR = op_addr;
18008c40:	b101      	st.w      	r0, (r1, 0x4)
        op_addr += linesize;
18008c42:	e403003f 	addi      	r0, r3, 64
        CACHE->CIR = op_addr;
18008c46:	b101      	st.w      	r0, (r1, 0x4)
        op_addr += linesize;
18008c48:	e403004f 	addi      	r0, r3, 80
        CACHE->CIR = op_addr;
18008c4c:	b101      	st.w      	r0, (r1, 0x4)
        op_addr += linesize;
18008c4e:	e403005f 	addi      	r0, r3, 96
        CACHE->CIR = op_addr;
18008c52:	b101      	st.w      	r0, (r1, 0x4)
        op_addr += linesize;
18008c54:	e403006f 	addi      	r0, r3, 112
        CACHE->CIR = op_addr;
18008c58:	b101      	st.w      	r0, (r1, 0x4)
        op_addr += linesize;
18008c5a:	237f      	addi      	r3, 128
        op_size -= 128;
18008c5c:	2a7f      	subi      	r2, 128
18008c5e:	07ba      	br      	0x18008bd2	// 18008bd2 <hg_crc_calc+0x132>
        CACHE->CIR = op_addr;
18008c60:	b021      	st.w      	r1, (r0, 0x4)
        op_size -= linesize;
18008c62:	2a0f      	subi      	r2, 16
18008c64:	07bc      	br      	0x18008bdc	// 18008bdc <hg_crc_calc+0x13c>
        return RET_ERR;
18008c66:	3000      	movi      	r0, 0
18008c68:	2800      	subi      	r0, 1
18008c6a:	075a      	br      	0x18008b1e	// 18008b1e <hg_crc_calc+0x7e>
        return -ENOTSUP;
18008c6c:	ea00020b 	movi      	r0, 523
18008c70:	6c02      	nor      	r0, r0
18008c72:	0756      	br      	0x18008b1e	// 18008b1e <hg_crc_calc+0x7e>
        return -EBUSY;
18008c74:	3000      	movi      	r0, 0
18008c76:	280f      	subi      	r0, 16
18008c78:	0753      	br      	0x18008b1e	// 18008b1e <hg_crc_calc+0x7e>
18008c7a:	0000      	.short	0x0000
18008c7c:	18016b88 	.long	0x18016b88
18008c80:	e000f000 	.long	0xe000f000
18008c84:	1801659a 	.long	0x1801659a
18008c88:	18016ac8 	.long	0x18016ac8

18008c8c <hg_crc8_calc_nonos>:
    struct hg_crc_hw *hw  = (struct hg_crc_hw *)dev->hw;
18008c8c:	9063      	ld.w      	r3, (r0, 0xc)
    hw->CRC_CFG &= ~ LL_CRC_CFG_INT_EN;
18008c8e:	9300      	ld.w      	r0, (r3, 0x0)
18008c90:	3880      	bclri      	r0, 0
18008c92:	b300      	st.w      	r0, (r3, 0x0)
    hw->CRC_INIT = 0x0;
18008c94:	3000      	movi      	r0, 0
18008c96:	b301      	st.w      	r0, (r3, 0x4)
    hw->CRC_INV  = 0x0;
18008c98:	b302      	st.w      	r0, (r3, 0x8)
    hw->CRC_POLY = 0xE0;
18008c9a:	30e0      	movi      	r0, 224
18008c9c:	b303      	st.w      	r0, (r3, 0xc)
    hw->CRC_CFG  = cfg_reg;
18008c9e:	100b      	lrw      	r0, 0x50802	// 18008cc8 <hg_crc8_calc_nonos+0x3c>
18008ca0:	b300      	st.w      	r0, (r3, 0x0)
    hw->DMA_ADDR = (uint32)req->data;
18008ca2:	9101      	ld.w      	r0, (r1, 0x4)
    hw->DMA_LEN  = req->len;
18008ca4:	9122      	ld.w      	r1, (r1, 0x8)
    hw->DMA_ADDR = (uint32)req->data;
18008ca6:	b307      	st.w      	r0, (r3, 0x1c)
    hw->DMA_LEN  = req->len;
18008ca8:	b328      	st.w      	r1, (r3, 0x20)
    while(!(hw->CRC_STA & LL_CRC_STA_DMA_PENDING));
18008caa:	9325      	ld.w      	r1, (r3, 0x14)
18008cac:	e4212001 	andi      	r1, r1, 1
18008cb0:	e901fffd 	bez      	r1, 0x18008caa	// 18008caa <hg_crc8_calc_nonos+0x1e>
    hw->CRC_KST = LL_CRC_KST_DMA_PENDING_CLR;
18008cb4:	3101      	movi      	r1, 1
18008cb6:	b324      	st.w      	r1, (r3, 0x10)
    *crc_value = hw->CRC_OUT;
18008cb8:	9329      	ld.w      	r1, (r3, 0x24)
18008cba:	b220      	st.w      	r1, (r2, 0x0)
    hw->CRC_CFG |= LL_CRC_CFG_INT_EN;
18008cbc:	9340      	ld.w      	r2, (r3, 0x0)
18008cbe:	ec420001 	ori      	r2, r2, 1
}
18008cc2:	3000      	movi      	r0, 0
    hw->CRC_CFG |= LL_CRC_CFG_INT_EN;
18008cc4:	b340      	st.w      	r2, (r3, 0x0)
}
18008cc6:	783c      	jmp      	r15
18008cc8:	00050802 	.long	0x00050802

18008ccc <hg_crc_attach>:
    .ops.resume  = hg_crc_resume,
#endif
};

__init int32 hg_crc_attach(uint32 dev_id, struct hg_crc *crc)
{
18008ccc:	14d4      	push      	r4-r7, r15
    struct hg_crc_hw *hw = (struct hg_crc_hw *)crc->hw;

    crc->dev.dev.ops = (const struct devobj_ops *)&crc_ops;
18008cce:	1160      	lrw      	r3, 0x18016b80	// 18008d4c <hg_crc_attach+0x80>
    crc->flags = 0;
18008cd0:	3500      	movi      	r5, 0
{
18008cd2:	6d07      	mov      	r4, r1
    crc->dev.dev.ops = (const struct devobj_ops *)&crc_ops;
18008cd4:	b162      	st.w      	r3, (r1, 0x8)
    crc->flags = 0;
18008cd6:	b1ab      	st.w      	r5, (r1, 0x2c)
{
18008cd8:	6d83      	mov      	r6, r0
    os_mutex_init(&crc->hold);
18008cda:	e401000f 	addi      	r0, r1, 16
    struct hg_crc_hw *hw = (struct hg_crc_hw *)crc->hw;
18008cde:	91e3      	ld.w      	r7, (r1, 0xc)
    os_mutex_init(&crc->hold);
18008ce0:	e0005b74 	bsr      	0x180143c8	// 180143c8 <os_mutex_init>
    os_mutex_init(&crc->lock);
18008ce4:	e4040017 	addi      	r0, r4, 24
18008ce8:	e0005b70 	bsr      	0x180143c8	// 180143c8 <os_mutex_init>
    os_sema_init(&crc->done, 0);
18008cec:	6c57      	mov      	r1, r5
18008cee:	e404001f 	addi      	r0, r4, 32
18008cf2:	e0005bd3 	bsr      	0x18014498	// 18014498 <os_sema_init>
    sysctrl_crc_clk_open();
18008cf6:	ea234002 	movih      	r3, 16386
18008cfa:	9353      	ld.w      	r2, (r3, 0x4c)
18008cfc:	ec424000 	ori      	r2, r2, 16384
18008d00:	b353      	st.w      	r2, (r3, 0x4c)
    sysctrl_crc_reset();
18008d02:	9342      	ld.w      	r2, (r3, 0x8)
18008d04:	3a8e      	bclri      	r2, 14
18008d06:	b342      	st.w      	r2, (r3, 0x8)
    __ASM volatile("nop");
18008d08:	6c03      	mov      	r0, r0
18008d0a:	6c03      	mov      	r0, r0
18008d0c:	6c03      	mov      	r0, r0
18008d0e:	9342      	ld.w      	r2, (r3, 0x8)
18008d10:	ec424000 	ori      	r2, r2, 16384
18008d14:	b342      	st.w      	r2, (r3, 0x8)

    request_irq(crc->irq_num, hg_crc_irq_handler, crc);
18008d16:	940a      	ld.w      	r0, (r4, 0x28)
18008d18:	6c93      	mov      	r2, r4
18008d1a:	102e      	lrw      	r1, 0x180089fc	// 18008d50 <hg_crc_attach+0x84>
18008d1c:	e3ffd4e0 	bsr      	0x180036dc	// 180036dc <request_irq>
    hw->CRC_CFG |= LL_CRC_CFG_INT_EN;
18008d20:	9760      	ld.w      	r3, (r7, 0x0)
18008d22:	ec630001 	ori      	r3, r3, 1
18008d26:	b760      	st.w      	r3, (r7, 0x0)
    IRQn &= 0x7FUL;
18008d28:	946a      	ld.w      	r3, (r4, 0x28)
    VIC->ISER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
18008d2a:	c4a354c1 	zext      	r1, r3, 6, 5
18008d2e:	3201      	movi      	r2, 1
18008d30:	e463201f 	andi      	r3, r3, 31
18008d34:	c4624023 	lsl      	r3, r2, r3
18008d38:	1047      	lrw      	r2, 0xe000e100	// 18008d54 <hg_crc_attach+0x88>
18008d3a:	d4220883 	str.w      	r3, (r2, r1 << 2)
    irq_enable(crc->irq_num);
    dev_register(dev_id, (struct dev_obj *)crc);
18008d3e:	6c1b      	mov      	r0, r6
18008d40:	6c53      	mov      	r1, r4
18008d42:	e3ffd1b1 	bsr      	0x180030a4	// 180030a4 <dev_register>
    return RET_OK;
}
18008d46:	6c17      	mov      	r0, r5
18008d48:	1494      	pop      	r4-r7, r15
18008d4a:	0000      	.short	0x0000
18008d4c:	18016b80 	.long	0x18016b80
18008d50:	180089fc 	.long	0x180089fc
18008d54:	e000e100 	.long	0xe000e100

18008d58 <sdh_cmd>:

volatile uint8 sd_cmd_isr_get = 0;
volatile uint8 sd_dat_isr_get = 0;

int32 sdh_cmd(struct sdh_device *sdhost,struct rt_mmcsd_cmd* cmd)
{
18008d58:	14d3      	push      	r4-r6, r15
    uint32 rsp_type;
    uint32 cmd_tick;
    //uint32 cur_tick;
	struct hgsdh *sdh_hw = (struct hgsdh*)sdhost; 
	struct hgsdh_hw *p_sdhc =  (struct hgsdh_hw *)sdh_hw->hw;
18008d5a:	d840204c 	ld.w      	r2, (r0, 0x130)
    sdhc_cmd_rsp_buf[0] = cmd->cmd_code | 0x40;
18008d5e:	9100      	ld.w      	r0, (r1, 0x0)
18008d60:	ec000040 	ori      	r0, r0, 64
18008d64:	127b      	lrw      	r3, 0x20001bb8	// 18008ed0 <sdh_cmd+0x178>
18008d66:	a300      	st.b      	r0, (r3, 0x0)
    //put_unaligned_be32(cmd->arg, &sdhc_cmd_rsp_buf[1]);
    sdhc_cmd_rsp_buf[1] = (cmd->arg >> 24) & 0xFF;
18008d68:	9101      	ld.w      	r0, (r1, 0x4)
18008d6a:	c700484c 	lsri      	r12, r0, 24
18008d6e:	dd830001 	st.b      	r12, (r3, 0x1)
    sdhc_cmd_rsp_buf[2] = (cmd->arg >> 16) & 0xFF;
18008d72:	c600484c 	lsri      	r12, r0, 16
18008d76:	dd830002 	st.b      	r12, (r3, 0x2)
    sdhc_cmd_rsp_buf[3] = (cmd->arg >> 8) & 0xFF;
18008d7a:	c500484c 	lsri      	r12, r0, 8
18008d7e:	dd830003 	st.b      	r12, (r3, 0x3)
    sdhc_cmd_rsp_buf[4] = (cmd->arg >> 0) & 0xFF;
18008d82:	a304      	st.b      	r0, (r3, 0x4)
    p_sdhc->CPTR = (uint32)sdhc_cmd_rsp_buf;


    rsp_type = ((cmd->flags & MMC_RSP_PRESENT) ? BIT(5) : 0) |
18008d84:	d9a12006 	ld.w      	r13, (r1, 0x18)
18008d88:	e40d2001 	andi      	r0, r13, 1
18008d8c:	3840      	cmpnei      	r0, 0
               ((cmd->flags & MMC_RSP_136) ? BIT(6) : 0) |
18008d8e:	e58d2002 	andi      	r12, r13, 2
    rsp_type = ((cmd->flags & MMC_RSP_PRESENT) ? BIT(5) : 0) |
18008d92:	c4000500 	mvc      	r0
               ((cmd->flags & MMC_RSP_136) ? BIT(6) : 0) |
18008d96:	eb4c0000 	cmpnei      	r12, 0
18008d9a:	c400050c 	mvc      	r12
18008d9e:	c4cc482c 	lsli      	r12, r12, 6
    rsp_type = ((cmd->flags & MMC_RSP_PRESENT) ? BIT(5) : 0) |
18008da2:	4005      	lsli      	r0, r0, 5
18008da4:	6c30      	or      	r0, r12
               ((cmd->flags & MMC_RSP_BUSY) ? BIT(7) : 0);
18008da6:	e58d2008 	andi      	r12, r13, 8
    p_sdhc->CPTR = (uint32)sdhc_cmd_rsp_buf;
18008daa:	b262      	st.w      	r3, (r2, 0x8)
               ((cmd->flags & MMC_RSP_BUSY) ? BIT(7) : 0);
18008dac:	e92c004e 	bnez      	r12, 0x18008e48	// 18008e48 <sdh_cmd+0xf0>
    
    if (0 == rsp_type) {
        rsp_type = (0x2 << 5);
18008db0:	3840      	cmpnei      	r0, 0
18008db2:	ea0c0040 	movi      	r12, 64
18008db6:	c40c0c20 	incf      	r0, r12, 0
    p_sdhc->CFG |= LL_SDHC_CMD_DONE_CLR;
18008dba:	d9822000 	ld.w      	r12, (r2, 0x0)
18008dbe:	ed8c0800 	ori      	r12, r12, 2048
18008dc2:	dd822000 	st.w      	r12, (r2, 0x0)
    }
    //ll_sdhc_post_8clk_ctrl(p_sdhc, sd_8clk_open);         
    ll_sdhc_clr_cmd_done_pending(p_sdhc);
//  os_printf("cmd:%d  %x\r\n",cmd->cmd_code,(p_sdhc->CFG & ~LL_SDHC_CMD_RESP_MSK) | rsp_type);
    p_sdhc->CFG  = (p_sdhc->CFG & ~LL_SDHC_CMD_RESP_MSK) | rsp_type;
18008dc6:	3400      	movi      	r4, 0
18008dc8:	d9822000 	ld.w      	r12, (r2, 0x0)
18008dcc:	2ce0      	subi      	r4, 225
18008dce:	6b10      	and      	r12, r4
18008dd0:	6f00      	or      	r12, r0

    if(cmd->cmd_code == STOP_TRANSMISSION)
18008dd2:	9180      	ld.w      	r4, (r1, 0x0)
    p_sdhc->CFG  = (p_sdhc->CFG & ~LL_SDHC_CMD_RESP_MSK) | rsp_type;
18008dd4:	dd822000 	st.w      	r12, (r2, 0x0)
    {
        cmd_tick = ~0;
    }
    else
    {
        cmd_tick = 0x1fffff;
18008dd8:	ea0c0000 	movi      	r12, 0
18008ddc:	3c4c      	cmpnei      	r4, 12
18008dde:	e58c1000 	subi      	r12, r12, 1
18008de2:	c6805024 	bmaski      	r4, 21
18008de6:	c5840c40 	inct      	r12, r4, 0
    return ((p_sdhc->CFG & LL_SDHC_CMD_DONE)) ? TRUE : FALSE;
18008dea:	3480      	movi      	r4, 128
18008dec:	4486      	lsli      	r4, r4, 6
18008dee:	11da      	lrw      	r6, 0x20001bb4	// 18008ed4 <sdh_cmd+0x17c>
18008df0:	92a0      	ld.w      	r5, (r2, 0x0)
18008df2:	6950      	and      	r5, r4
    }
    //ll_gpio_bit_reset(GPIOB,BIT(5));
    while (!ll_sdhc_get_cmd_done_pending(p_sdhc)&&!sd_cmd_isr_get)
18008df4:	e9250005 	bnez      	r5, 0x18008dfe	// 18008dfe <sdh_cmd+0xa6>
18008df8:	86a0      	ld.b      	r5, (r6, 0x0)
18008dfa:	e905002a 	bez      	r5, 0x18008e4e	// 18008e4e <sdh_cmd+0xf6>
            
    }

    sd_cmd_isr_get = 0;
    //ll_gpio_bit_set(GPIOB,BIT(5));
    if ((rsp_type != (0x2 << 5)) && (ll_sdhc_get_cmd_rsp_timeout_pending(p_sdhc) || ((cmd->flags & MMC_RSP_CRC) && ll_sdhc_get_cmd_rsp_err_pending(p_sdhc))))
18008dfe:	eb400040 	cmpnei      	r0, 64
    sd_cmd_isr_get = 0;
18008e02:	ea0c0000 	movi      	r12, 0
18008e06:	dd860000 	st.b      	r12, (r6, 0x0)
    if ((rsp_type != (0x2 << 5)) && (ll_sdhc_get_cmd_rsp_timeout_pending(p_sdhc) || ((cmd->flags & MMC_RSP_CRC) && ll_sdhc_get_cmd_rsp_err_pending(p_sdhc))))
18008e0a:	0c34      	bf      	0x18008e72	// 18008e72 <sdh_cmd+0x11a>
    return (p_sdhc->CFG & LL_SDHC_RSP_TIMEOUT) ? TRUE : FALSE;
18008e0c:	ea0c0080 	movi      	r12, 128
18008e10:	9200      	ld.w      	r0, (r2, 0x0)
18008e12:	c5cc482c 	lsli      	r12, r12, 14
18008e16:	6830      	and      	r0, r12
    if ((rsp_type != (0x2 << 5)) && (ll_sdhc_get_cmd_rsp_timeout_pending(p_sdhc) || ((cmd->flags & MMC_RSP_CRC) && ll_sdhc_get_cmd_rsp_err_pending(p_sdhc))))
18008e18:	e920000e 	bnez      	r0, 0x18008e34	// 18008e34 <sdh_cmd+0xdc>
18008e1c:	e5ad2004 	andi      	r13, r13, 4
18008e20:	e90d0029 	bez      	r13, 0x18008e72	// 18008e72 <sdh_cmd+0x11a>
    return (p_sdhc->CFG & LL_SDHC_RSP_CRC_ERR) ? TRUE : FALSE;
18008e24:	ea0c0080 	movi      	r12, 128
18008e28:	9200      	ld.w      	r0, (r2, 0x0)
18008e2a:	c60c482c 	lsli      	r12, r12, 16
18008e2e:	6830      	and      	r0, r12
    if ((rsp_type != (0x2 << 5)) && (ll_sdhc_get_cmd_rsp_timeout_pending(p_sdhc) || ((cmd->flags & MMC_RSP_CRC) && ll_sdhc_get_cmd_rsp_err_pending(p_sdhc))))
18008e30:	e9000021 	bez      	r0, 0x18008e72	// 18008e72 <sdh_cmd+0x11a>
    return (p_sdhc->CFG & LL_SDHC_RSP_TIMEOUT) ? TRUE : FALSE;
18008e34:	9220      	ld.w      	r1, (r2, 0x0)
    return (p_sdhc->CFG & LL_SDHC_RSP_CRC_ERR) ? TRUE : FALSE;
18008e36:	9240      	ld.w      	r2, (r2, 0x0)
    {
        os_printf("read timeout pending set or rsp err:%d %d\r\n",ll_sdhc_get_cmd_rsp_timeout_pending(p_sdhc),ll_sdhc_get_cmd_rsp_err_pending(p_sdhc));
18008e38:	c6e256e2 	zext      	r2, r2, 23, 23
18008e3c:	c6a156a1 	zext      	r1, r1, 21, 21
18008e40:	1106      	lrw      	r0, 0x18016c9a	// 18008ed8 <sdh_cmd+0x180>
18008e42:	e0001e41 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18008e46:	0413      	br      	0x18008e6c	// 18008e6c <sdh_cmd+0x114>
18008e48:	ec000080 	ori      	r0, r0, 128
18008e4c:	07b7      	br      	0x18008dba	// 18008dba <sdh_cmd+0x62>
        if (--cmd_tick == 0) {
18008e4e:	e58c1000 	subi      	r12, r12, 1
18008e52:	e92cffcf 	bnez      	r12, 0x18008df0	// 18008df0 <sdh_cmd+0x98>
    p_sdhc->CFG |= LL_SDHC_CMD_DONE_CLR;
18008e56:	9260      	ld.w      	r3, (r2, 0x0)
18008e58:	ec630800 	ori      	r3, r3, 2048
18008e5c:	b260      	st.w      	r3, (r2, 0x0)
            p_sdhc->CFG &= ~BIT(0);
18008e5e:	9260      	ld.w      	r3, (r2, 0x0)
18008e60:	3b80      	bclri      	r3, 0
18008e62:	b260      	st.w      	r3, (r2, 0x0)
            p_sdhc->CFG |= BIT(0);
18008e64:	9260      	ld.w      	r3, (r2, 0x0)
18008e66:	ec630001 	ori      	r3, r3, 1
18008e6a:	b260      	st.w      	r3, (r2, 0x0)
        
        return -1;
18008e6c:	3000      	movi      	r0, 0
18008e6e:	2800      	subi      	r0, 1
#endif  
//  os_printf("cmd->resp:%x\r\n",cmd->resp[0]);
//  ll_sdhc_post_8clk_ctrl(p_sdhc, 0);      

    return 0;    
}
18008e70:	1493      	pop      	r4-r6, r15
    cmd->resp[0] = (sdhc_cmd_rsp_buf[9] << 24)  | 
18008e72:	8349      	ld.b      	r2, (r3, 0x9)
                   (sdhc_cmd_rsp_buf[10] << 16) |
18008e74:	830a      	ld.b      	r0, (r3, 0xa)
18008e76:	4010      	lsli      	r0, r0, 16
    cmd->resp[0] = (sdhc_cmd_rsp_buf[9] << 24)  | 
18008e78:	4258      	lsli      	r2, r2, 24
18008e7a:	6c80      	or      	r2, r0
                   (sdhc_cmd_rsp_buf[12] << 0);
18008e7c:	830c      	ld.b      	r0, (r3, 0xc)
                   (sdhc_cmd_rsp_buf[11] << 8)  |
18008e7e:	6c80      	or      	r2, r0
18008e80:	830b      	ld.b      	r0, (r3, 0xb)
18008e82:	4008      	lsli      	r0, r0, 8
18008e84:	6c80      	or      	r2, r0
    cmd->resp[0] = (sdhc_cmd_rsp_buf[9] << 24)  | 
18008e86:	b142      	st.w      	r2, (r1, 0x8)
    cmd->resp[1] = (sdhc_cmd_rsp_buf[13] << 24)  | 
18008e88:	834d      	ld.b      	r2, (r3, 0xd)
                   (sdhc_cmd_rsp_buf[14] << 16) |
18008e8a:	830e      	ld.b      	r0, (r3, 0xe)
18008e8c:	4010      	lsli      	r0, r0, 16
    cmd->resp[1] = (sdhc_cmd_rsp_buf[13] << 24)  | 
18008e8e:	4258      	lsli      	r2, r2, 24
18008e90:	6c80      	or      	r2, r0
                   (sdhc_cmd_rsp_buf[16] << 0);
18008e92:	8310      	ld.b      	r0, (r3, 0x10)
                   (sdhc_cmd_rsp_buf[15] << 8)  |
18008e94:	6c80      	or      	r2, r0
18008e96:	830f      	ld.b      	r0, (r3, 0xf)
18008e98:	4008      	lsli      	r0, r0, 8
18008e9a:	6c80      	or      	r2, r0
    cmd->resp[1] = (sdhc_cmd_rsp_buf[13] << 24)  | 
18008e9c:	b143      	st.w      	r2, (r1, 0xc)
    cmd->resp[2] = (sdhc_cmd_rsp_buf[17] << 24)  | 
18008e9e:	8351      	ld.b      	r2, (r3, 0x11)
                   (sdhc_cmd_rsp_buf[18] << 16) |
18008ea0:	8312      	ld.b      	r0, (r3, 0x12)
18008ea2:	4010      	lsli      	r0, r0, 16
    cmd->resp[2] = (sdhc_cmd_rsp_buf[17] << 24)  | 
18008ea4:	4258      	lsli      	r2, r2, 24
18008ea6:	6c80      	or      	r2, r0
                   (sdhc_cmd_rsp_buf[20] << 0);
18008ea8:	8314      	ld.b      	r0, (r3, 0x14)
                   (sdhc_cmd_rsp_buf[19] << 8)  |
18008eaa:	6c80      	or      	r2, r0
18008eac:	8313      	ld.b      	r0, (r3, 0x13)
18008eae:	4008      	lsli      	r0, r0, 8
18008eb0:	6c80      	or      	r2, r0
    cmd->resp[2] = (sdhc_cmd_rsp_buf[17] << 24)  | 
18008eb2:	b144      	st.w      	r2, (r1, 0x10)
    cmd->resp[3] = (sdhc_cmd_rsp_buf[21] << 24)  | 
18008eb4:	8355      	ld.b      	r2, (r3, 0x15)
                   (sdhc_cmd_rsp_buf[22] << 16) |
18008eb6:	8316      	ld.b      	r0, (r3, 0x16)
18008eb8:	4010      	lsli      	r0, r0, 16
    cmd->resp[3] = (sdhc_cmd_rsp_buf[21] << 24)  | 
18008eba:	4258      	lsli      	r2, r2, 24
18008ebc:	6c80      	or      	r2, r0
                   (sdhc_cmd_rsp_buf[24] << 0); 
18008ebe:	8318      	ld.b      	r0, (r3, 0x18)
                   (sdhc_cmd_rsp_buf[23] << 8)  |
18008ec0:	8377      	ld.b      	r3, (r3, 0x17)
18008ec2:	6c80      	or      	r2, r0
18008ec4:	4368      	lsli      	r3, r3, 8
18008ec6:	6cc8      	or      	r3, r2
    cmd->resp[3] = (sdhc_cmd_rsp_buf[21] << 24)  | 
18008ec8:	b165      	st.w      	r3, (r1, 0x14)
    return 0;    
18008eca:	3000      	movi      	r0, 0
18008ecc:	07d2      	br      	0x18008e70	// 18008e70 <sdh_cmd+0x118>
18008ece:	0000      	.short	0x0000
18008ed0:	20001bb8 	.long	0x20001bb8
18008ed4:	20001bb4 	.long	0x20001bb4
18008ed8:	18016c9a 	.long	0x18016c9a

18008edc <sdh_close>:
    return 0;
}


int32 sdh_close(struct sdh_device *sdhost)
{
18008edc:	14d2      	push      	r4-r5, r15
	struct hgsdh *sdh_hw = (struct hgsdh*)sdhost; 
	struct hgsdh_hw *hw =  (struct hgsdh_hw *)sdh_hw->hw;
18008ede:	d840204c 	ld.w      	r2, (r0, 0x130)
{
18008ee2:	6d03      	mov      	r4, r0
    p_sdhc->CFG &= ~LL_SDHC_EN;
18008ee4:	9260      	ld.w      	r3, (r2, 0x0)
18008ee6:	3b80      	bclri      	r3, 0
18008ee8:	b260      	st.w      	r3, (r2, 0x0)
    ll_sdhc_close(hw);
    sysctrl_sdhc_clk_close();
18008eea:	ea224002 	movih      	r2, 16386
    os_sema_del(&sdhost->dat_sema);
18008eee:	e400011f 	addi      	r0, r0, 288
    sysctrl_sdhc_clk_close();
18008ef2:	9273      	ld.w      	r3, (r2, 0x4c)
18008ef4:	3b94      	bclri      	r3, 20
18008ef6:	b273      	st.w      	r3, (r2, 0x4c)
    os_sema_del(&sdhost->dat_sema);
18008ef8:	e0005b30 	bsr      	0x18014558	// 18014558 <os_sema_del>
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
18008efc:	1046      	lrw      	r2, 0xe000e100	// 18008f14 <sdh_close+0x38>
18008efe:	3380      	movi      	r3, 128
18008f00:	436d      	lsli      	r3, r3, 13
    sysctrl_sdhc_clk_close();
18008f02:	3500      	movi      	r5, 0
18008f04:	dc622020 	st.w      	r3, (r2, 0x80)
    NVIC_DisableIRQ(SDHOST_IRQn);
	pin_func(sdhost->dev.dev_id,0);
18008f08:	6c57      	mov      	r1, r5
18008f0a:	9400      	ld.w      	r0, (r4, 0x0)
18008f0c:	e3ffd90e 	bsr      	0x18004128	// 18004128 <pin_func>
    return 0;
}
18008f10:	6c17      	mov      	r0, r5
18008f12:	1492      	pop      	r4-r5, r15
18008f14:	e000e100 	.long	0xe000e100

18008f18 <sdh_suspend>:

int32 sdh_suspend(struct sdh_device *sdhost)
{
18008f18:	14d2      	push      	r4-r5, r15
	struct hgsdh *sdh_hw = (struct hgsdh*)sdhost; 
	struct hgsdh_hw *hw =  (struct hgsdh_hw *)sdh_hw->hw;
	struct hgsdh_hw *hw_cfg;
	sysctrl_sdhc_clk_close();
18008f1a:	ea224002 	movih      	r2, 16386
	struct hgsdh_hw *hw =  (struct hgsdh_hw *)sdh_hw->hw;
18008f1e:	d880204c 	ld.w      	r4, (r0, 0x130)
	sysctrl_sdhc_clk_close();
18008f22:	9273      	ld.w      	r3, (r2, 0x4c)
18008f24:	3b94      	bclri      	r3, 20
{
18008f26:	6d43      	mov      	r5, r0
	sysctrl_sdhc_clk_close();
18008f28:	b273      	st.w      	r3, (r2, 0x4c)
	sdhost->cfg_backup = (uint32 *)os_malloc(sizeof(struct hgsdh_hw));	
18008f2a:	3020      	movi      	r0, 32
18008f2c:	e0001cfa 	bsr      	0x1800c920	// 1800c920 <_os_malloc>
	//memcpy((uint8 *)sdhost->cfg_backup,(uint8 *)hw,sizeof(struct hgsdh_hw));
	hw_cfg = (struct hgsdh_hw*)sdhost->cfg_backup;
	hw_cfg->BAUD = hw->BAUD;
18008f30:	9461      	ld.w      	r3, (r4, 0x4)
	sdhost->cfg_backup = (uint32 *)os_malloc(sizeof(struct hgsdh_hw));	
18008f32:	dc052039 	st.w      	r0, (r5, 0xe4)
	hw_cfg->BAUD = hw->BAUD;
18008f36:	b061      	st.w      	r3, (r0, 0x4)
	hw_cfg->CFG  = hw->CFG;
18008f38:	9460      	ld.w      	r3, (r4, 0x0)
18008f3a:	b060      	st.w      	r3, (r0, 0x0)
	hw_cfg->CPTR = hw->CPTR;
18008f3c:	9462      	ld.w      	r3, (r4, 0x8)
18008f3e:	b062      	st.w      	r3, (r0, 0x8)
	hw_cfg->DPTR = hw->DPTR;
18008f40:	9463      	ld.w      	r3, (r4, 0xc)
18008f42:	b063      	st.w      	r3, (r0, 0xc)
	hw_cfg->DCNT = hw->DCNT;
18008f44:	9464      	ld.w      	r3, (r4, 0x10)
18008f46:	b064      	st.w      	r3, (r0, 0x10)
#ifdef TXW81X
    hw_cfg->CFG1 = hw->CFG1;
18008f48:	9466      	ld.w      	r3, (r4, 0x18)
18008f4a:	b066      	st.w      	r3, (r0, 0x18)
    hw_cfg->ISMP = hw->ISMP;
18008f4c:	9467      	ld.w      	r3, (r4, 0x1c)
18008f4e:	b067      	st.w      	r3, (r0, 0x1c)
    IRQn &= 0x7FUL;
18008f50:	d865204e 	ld.w      	r3, (r5, 0x138)
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
18008f54:	c4a354c2 	zext      	r2, r3, 6, 5
18008f58:	3101      	movi      	r1, 1
18008f5a:	e463201f 	andi      	r3, r3, 31
18008f5e:	c4614023 	lsl      	r3, r1, r3
18008f62:	221f      	addi      	r2, 32
18008f64:	1023      	lrw      	r1, 0xe000e100	// 18008f70 <sdh_suspend+0x58>
#endif
	irq_disable(sdh_hw->irq_num);
	return 0;
}
18008f66:	3000      	movi      	r0, 0
18008f68:	d4410883 	str.w      	r3, (r1, r2 << 2)
18008f6c:	1492      	pop      	r4-r5, r15
18008f6e:	0000      	.short	0x0000
18008f70:	e000e100 	.long	0xe000e100

18008f74 <sdh_resume>:

int32 sdh_resume(struct sdh_device *sdhost)
{
18008f74:	14d2      	push      	r4-r5, r15
	struct hgsdh *sdh_hw = (struct hgsdh*)sdhost; 
	struct hgsdh_hw *hw =  (struct hgsdh_hw *)sdh_hw->hw;
	struct hgsdh_hw *hw_cfg;
	sysctrl_sdhc_clk_open();
18008f76:	ea214002 	movih      	r1, 16386
	struct hgsdh_hw *hw =  (struct hgsdh_hw *)sdh_hw->hw;
18008f7a:	d860204c 	ld.w      	r3, (r0, 0x130)
	sysctrl_sdhc_clk_open();
18008f7e:	9153      	ld.w      	r2, (r1, 0x4c)
{
18008f80:	6d03      	mov      	r4, r0
	sysctrl_sdhc_clk_open();
18008f82:	3ab4      	bseti      	r2, 20
	hw_cfg = (struct hgsdh_hw*)sdhost->cfg_backup;
18008f84:	d8002039 	ld.w      	r0, (r0, 0xe4)
	sysctrl_sdhc_clk_open();
18008f88:	b153      	st.w      	r2, (r1, 0x4c)
	//memcpy((uint8 *)hw,(uint8 *)sdhost->cfg_backup,sizeof(struct hgsdh_hw));	
	hw->BAUD = hw_cfg->BAUD;
18008f8a:	9041      	ld.w      	r2, (r0, 0x4)
18008f8c:	b341      	st.w      	r2, (r3, 0x4)
	hw->CPTR = hw_cfg->CPTR;
18008f8e:	9042      	ld.w      	r2, (r0, 0x8)
18008f90:	b342      	st.w      	r2, (r3, 0x8)
	hw->DPTR = hw_cfg->DPTR;
18008f92:	9043      	ld.w      	r2, (r0, 0xc)
18008f94:	b343      	st.w      	r2, (r3, 0xc)
	hw->DCNT = hw_cfg->DCNT;
18008f96:	9044      	ld.w      	r2, (r0, 0x10)
18008f98:	b344      	st.w      	r2, (r3, 0x10)
	hw->CFG  = hw_cfg->CFG;
18008f9a:	9040      	ld.w      	r2, (r0, 0x0)
18008f9c:	b340      	st.w      	r2, (r3, 0x0)
#ifdef TXW81X
    hw->CFG1 = hw_cfg->CFG1;
18008f9e:	9046      	ld.w      	r2, (r0, 0x18)
18008fa0:	b346      	st.w      	r2, (r3, 0x18)
    hw->ISMP = hw_cfg->ISMP;
18008fa2:	9047      	ld.w      	r2, (r0, 0x1c)
18008fa4:	b347      	st.w      	r2, (r3, 0x1c)
    IRQn &= 0x7FUL;
18008fa6:	d864204e 	ld.w      	r3, (r4, 0x138)
    VIC->ISER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
18008faa:	c4a354c1 	zext      	r1, r3, 6, 5
18008fae:	3201      	movi      	r2, 1
18008fb0:	e463201f 	andi      	r3, r3, 31
18008fb4:	c4624023 	lsl      	r3, r2, r3
18008fb8:	1045      	lrw      	r2, 0xe000e100	// 18008fcc <sdh_resume+0x58>
	sysctrl_sdhc_clk_open();
18008fba:	3500      	movi      	r5, 0
18008fbc:	d4220883 	str.w      	r3, (r2, r1 << 2)
#endif
	irq_enable(sdh_hw->irq_num);
	os_free(sdhost->cfg_backup);	
18008fc0:	e0001cd8 	bsr      	0x1800c970	// 1800c970 <_os_free>
	return 0;
}
18008fc4:	6c17      	mov      	r0, r5
	os_free(sdhost->cfg_backup);	
18008fc6:	dca42039 	st.w      	r5, (r4, 0xe4)
}
18008fca:	1492      	pop      	r4-r5, r15
18008fcc:	e000e100 	.long	0xe000e100

18008fd0 <sdh_cfg>:
{
18008fd0:	14d3      	push      	r4-r6, r15
18008fd2:	1424      	subi      	r14, r14, 16
18008fd4:	6d47      	mov      	r5, r1
    switch (io_cfg->ioctl_type)
18008fd6:	9125      	ld.w      	r1, (r1, 0x14)
18008fd8:	3905      	cmphsi      	r1, 6
	struct hgsdh_hw *hw =  (struct hgsdh_hw *)sdh_hw->hw;
18008fda:	d880204c 	ld.w      	r4, (r0, 0x130)
    switch (io_cfg->ioctl_type)
18008fde:	08cc      	bt      	0x18009176	// 18009176 <sdh_cfg+0x1a6>
18008fe0:	1062      	lrw      	r3, 0x18016bc0	// 18008fe8 <sdh_cfg+0x18>
18008fe2:	d0230883 	ldr.w      	r3, (r3, r1 << 2)
18008fe6:	780c      	jmp      	r3
18008fe8:	18016bc0 	.long	0x18016bc0
18008fec:	9063      	ld.w      	r3, (r0, 0xc)
18008fee:	95c0      	ld.w      	r6, (r5, 0x0)
18008ff0:	64d8      	cmphs      	r6, r3
18008ff2:	c4c30c20 	incf      	r6, r3, 0
18008ff6:	9004      	ld.w      	r0, (r0, 0x10)
18008ff8:	6418      	cmphs      	r6, r0
    if (clk > 25000000) {
18008ffa:	136c      	lrw      	r3, 0x17d7840	// 180091a8 <sdh_cfg+0x1d8>
18008ffc:	c4c00c40 	inct      	r6, r0, 0
18009000:	658c      	cmphs      	r3, r6
        p_sdhc->CFG |= LL_SDHC_ODAT_RISING_EDGE;
18009002:	9460      	ld.w      	r3, (r4, 0x0)
    if (clk > 25000000) {
18009004:	080d      	bt      	0x1800901e	// 1800901e <sdh_cfg+0x4e>
        p_sdhc->CFG |= LL_SDHC_ODAT_RISING_EDGE;
18009006:	ec630100 	ori      	r3, r3, 256
1800900a:	b460      	st.w      	r3, (r4, 0x0)
        ll_sdhc_set_bus_clk(hw, sys_get_apbclk(), clk);
1800900c:	e00040be 	bsr      	0x18011188	// 18011188 <sys_get_apbclk>
    p_sdhc->BAUD = ((sys_clk + bus_clk - 1)/ bus_clk) - 1;
18009010:	5e63      	subi      	r3, r6, 1
18009012:	600c      	addu      	r0, r3
18009014:	c4c08020 	divu      	r0, r0, r6
18009018:	2800      	subi      	r0, 1
1800901a:	b401      	st.w      	r0, (r4, 0x4)
1800901c:	0405      	br      	0x18009026	// 18009026 <sdh_cfg+0x56>
        p_sdhc->CFG &= ~LL_SDHC_ODAT_RISING_EDGE;
1800901e:	3b88      	bclri      	r3, 8
18009020:	b460      	st.w      	r3, (r4, 0x0)
    if (clk) {
18009022:	e926fff5 	bnez      	r6, 0x1800900c	// 1800900c <sdh_cfg+0x3c>
            io_cfg->crc_sample_max = sys_get_apbclk() / io_cfg->clock;
18009026:	e00040b1 	bsr      	0x18011188	// 18011188 <sys_get_apbclk>
1800902a:	9560      	ld.w      	r3, (r5, 0x0)
1800902c:	c4608020 	divu      	r0, r0, r3
18009030:	a50d      	st.b      	r0, (r5, 0xd)
    if(io_cfg->ioctl_type < LL_SDHC_IOCTRL_SET_SMP)
18009032:	9565      	ld.w      	r3, (r5, 0x14)
18009034:	3b02      	cmphsi      	r3, 3
18009036:	081f      	bt      	0x18009074	// 18009074 <sdh_cfg+0xa4>
        os_printf("clk:%d width:%s%s%s power:%s%s%s\r\n",
18009038:	8569      	ld.b      	r3, (r5, 0x9)
1800903a:	3b43      	cmpnei      	r3, 3
1800903c:	9520      	ld.w      	r1, (r5, 0x0)
1800903e:	0c9e      	bf      	0x1800917a	// 1800917a <sdh_cfg+0x1aa>
18009040:	3b42      	cmpnei      	r3, 2
18009042:	0c9f      	bf      	0x18009180	// 18009180 <sdh_cfg+0x1b0>
18009044:	e90300a2 	bez      	r3, 0x18009188	// 18009188 <sdh_cfg+0x1b8>
18009048:	1279      	lrw      	r3, 0x180166c5	// 180091ac <sdh_cfg+0x1dc>
1800904a:	6c8f      	mov      	r2, r3
1800904c:	6f4f      	mov      	r13, r3
1800904e:	8508      	ld.b      	r0, (r5, 0x8)
18009050:	e90000a1 	bez      	r0, 0x18009192	// 18009192 <sdh_cfg+0x1c2>
18009054:	3841      	cmpnei      	r0, 1
18009056:	0ca2      	bf      	0x1800919a	// 1800919a <sdh_cfg+0x1ca>
18009058:	3842      	cmpnei      	r0, 2
1800905a:	1215      	lrw      	r0, 0x180166c5	// 180091ac <sdh_cfg+0x1dc>
1800905c:	6f03      	mov      	r12, r0
1800905e:	0ca3      	bf      	0x180091a4	// 180091a4 <sdh_cfg+0x1d4>
18009060:	6d03      	mov      	r4, r0
18009062:	b802      	st.w      	r0, (r14, 0x8)
18009064:	b883      	st.w      	r4, (r14, 0xc)
18009066:	dd8e2001 	st.w      	r12, (r14, 0x4)
1800906a:	ddae2000 	st.w      	r13, (r14, 0x0)
1800906e:	1211      	lrw      	r0, 0x18016c76	// 180091b0 <sdh_cfg+0x1e0>
18009070:	e0001d2a 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
}
18009074:	3000      	movi      	r0, 0
18009076:	1404      	addi      	r14, r14, 16
18009078:	1493      	pop      	r4-r6, r15
            hgsdh_set_bus_width(hw, io_cfg->bus_width);
1800907a:	8529      	ld.b      	r1, (r5, 0x9)
    switch (bus_width)
1800907c:	3942      	cmpnei      	r1, 2
1800907e:	0c09      	bf      	0x18009090	// 18009090 <sdh_cfg+0xc0>
18009080:	3943      	cmpnei      	r1, 3
18009082:	0c0b      	bf      	0x18009098	// 18009098 <sdh_cfg+0xc8>
18009084:	e921000e 	bnez      	r1, 0x180090a0	// 180090a0 <sdh_cfg+0xd0>
        p_sdhc->CFG &= ~LL_SDHC_DAT_WIDTH_4BIT;
18009088:	9460      	ld.w      	r3, (r4, 0x0)
1800908a:	3b82      	bclri      	r3, 2
        p_sdhc->CFG |= LL_SDHC_DAT_WIDTH_4BIT;
1800908c:	b460      	st.w      	r3, (r4, 0x0)
1800908e:	07d2      	br      	0x18009032	// 18009032 <sdh_cfg+0x62>
18009090:	9460      	ld.w      	r3, (r4, 0x0)
18009092:	ec630004 	ori      	r3, r3, 4
18009096:	07fb      	br      	0x1800908c	// 1800908c <sdh_cfg+0xbc>
            os_printf("bus errr\r\n");
18009098:	1207      	lrw      	r0, 0x18016c07	// 180091b4 <sdh_cfg+0x1e4>
1800909a:	e0001d15 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
1800909e:	07ca      	br      	0x18009032	// 18009032 <sdh_cfg+0x62>
            os_printf("no support bus width :%d\r\n", bus_width);
180090a0:	1206      	lrw      	r0, 0x18016c13	// 180091b8 <sdh_cfg+0x1e8>
            os_printf("err ioctrl_cmd : %d\r\n", io_cfg->ioctl_type);
180090a2:	e0001d11 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
            break;
180090a6:	07c6      	br      	0x18009032	// 18009032 <sdh_cfg+0x62>
            hgsdh_set_sample(hw, io_cfg->smp_type, io_cfg->cmd_crc_sample, io_cfg->dat_crc_sample);
180090a8:	9524      	ld.w      	r1, (r5, 0x10)
    switch (type)
180090aa:	3941      	cmpnei      	r1, 1
            hgsdh_set_sample(hw, io_cfg->smp_type, io_cfg->cmd_crc_sample, io_cfg->dat_crc_sample);
180090ac:	854b      	ld.b      	r2, (r5, 0xb)
180090ae:	856c      	ld.b      	r3, (r5, 0xc)
    switch (type)
180090b0:	0c11      	bf      	0x180090d2	// 180090d2 <sdh_cfg+0x102>
180090b2:	3940      	cmpnei      	r1, 0
180090b4:	0c07      	bf      	0x180090c2	// 180090c2 <sdh_cfg+0xf2>
180090b6:	3942      	cmpnei      	r1, 2
180090b8:	0c19      	bf      	0x180090ea	// 180090ea <sdh_cfg+0x11a>
180090ba:	3943      	cmpnei      	r1, 3
180090bc:	0c13      	bf      	0x180090e2	// 180090e2 <sdh_cfg+0x112>
            os_printf("sample type : %d err!\r\n", type);
180090be:	1200      	lrw      	r0, 0x18016c2f	// 180091bc <sdh_cfg+0x1ec>
180090c0:	07f1      	br      	0x180090a2	// 180090a2 <sdh_cfg+0xd2>
        p_sdhc->CFG1 &= ~LL_SDHC_CMD_SMP_EN;
180090c2:	9466      	ld.w      	r3, (r4, 0x18)
180090c4:	3b88      	bclri      	r3, 8
180090c6:	b466      	st.w      	r3, (r4, 0x18)
        p_sdhc->CFG1 &= ~LL_SDHC_DAT_SMP_EN;
180090c8:	9466      	ld.w      	r3, (r4, 0x18)
180090ca:	3b89      	bclri      	r3, 9
180090cc:	b466      	st.w      	r3, (r4, 0x18)
    p_sdhc->ISMP = (dat_sample << 16) | cmd_sample;
180090ce:	b427      	st.w      	r1, (r4, 0x1c)
180090d0:	07b1      	br      	0x18009032	// 18009032 <sdh_cfg+0x62>
        p_sdhc->CFG1 |= LL_SDHC_CMD_SMP_EN;
180090d2:	9426      	ld.w      	r1, (r4, 0x18)
180090d4:	ec210100 	ori      	r1, r1, 256
    p_sdhc->ISMP = (dat_sample << 16) | cmd_sample;
180090d8:	4370      	lsli      	r3, r3, 16
180090da:	6cc8      	or      	r3, r2
        p_sdhc->CFG1 |= LL_SDHC_DAT_SMP_EN;
180090dc:	b426      	st.w      	r1, (r4, 0x18)
    p_sdhc->ISMP = (dat_sample << 16) | cmd_sample;
180090de:	b467      	st.w      	r3, (r4, 0x1c)
180090e0:	07a9      	br      	0x18009032	// 18009032 <sdh_cfg+0x62>
        p_sdhc->CFG1 |= LL_SDHC_CMD_SMP_EN;
180090e2:	9426      	ld.w      	r1, (r4, 0x18)
180090e4:	ec210100 	ori      	r1, r1, 256
180090e8:	b426      	st.w      	r1, (r4, 0x18)
        p_sdhc->CFG1 |= LL_SDHC_DAT_SMP_EN;
180090ea:	9426      	ld.w      	r1, (r4, 0x18)
180090ec:	ec210200 	ori      	r1, r1, 512
180090f0:	07f4      	br      	0x180090d8	// 180090d8 <sdh_cfg+0x108>
            (io_cfg->delay_flag) ? (ll_sdhc_delay_clock(hw, io_cfg->delay_type, io_cfg->delay_chain_cnt)) :
180090f2:	856a      	ld.b      	r3, (r5, 0xa)
180090f4:	e4432004 	andi      	r2, r3, 4
180090f8:	e9020029 	bez      	r2, 0x1800914a	// 1800914a <sdh_cfg+0x17a>
180090fc:	9546      	ld.w      	r2, (r5, 0x18)
    if (type == LL_SDHC_DLY_HALF_SYSCLK)
180090fe:	3a42      	cmpnei      	r2, 2
18009100:	080b      	bt      	0x18009116	// 18009116 <sdh_cfg+0x146>
        p_sdhc->CFG1 &= ~0xff;
18009102:	3200      	movi      	r2, 0
18009104:	9466      	ld.w      	r3, (r4, 0x18)
18009106:	2aff      	subi      	r2, 256
18009108:	68c8      	and      	r3, r2
1800910a:	b466      	st.w      	r3, (r4, 0x18)
        p_sdhc->CFG1 |= LL_SDHC_DELAY_HALF_SYSCLK;
1800910c:	9466      	ld.w      	r3, (r4, 0x18)
1800910e:	ec630040 	ori      	r3, r3, 64
        p_sdhc->CFG1 &= ~0xff;
18009112:	b466      	st.w      	r3, (r4, 0x18)
18009114:	078f      	br      	0x18009032	// 18009032 <sdh_cfg+0x62>
    }else if(type == LL_SDHC_DLY_ONE_SYSCLK){
18009116:	3a43      	cmpnei      	r2, 3
18009118:	080a      	bt      	0x1800912c	// 1800912c <sdh_cfg+0x15c>
        p_sdhc->CFG1 &= ~0xff;
1800911a:	3200      	movi      	r2, 0
1800911c:	9466      	ld.w      	r3, (r4, 0x18)
1800911e:	2aff      	subi      	r2, 256
18009120:	68c8      	and      	r3, r2
18009122:	b466      	st.w      	r3, (r4, 0x18)
        p_sdhc->CFG1 |= LL_SDHC_DELAY_WHOLE_SYSCLK;
18009124:	9466      	ld.w      	r3, (r4, 0x18)
18009126:	ec630080 	ori      	r3, r3, 128
1800912a:	07f4      	br      	0x18009112	// 18009112 <sdh_cfg+0x142>
    }else if(type == LL_SDHC_DLY_CHAIN){
1800912c:	3a41      	cmpnei      	r2, 1
1800912e:	080e      	bt      	0x1800914a	// 1800914a <sdh_cfg+0x17a>
        p_sdhc->CFG1 &= ~0xff;
18009130:	3100      	movi      	r1, 0
18009132:	9446      	ld.w      	r2, (r4, 0x18)
18009134:	29ff      	subi      	r1, 256
18009136:	6884      	and      	r2, r1
18009138:	b446      	st.w      	r2, (r4, 0x18)
        p_sdhc->CFG1 |= LL_SDHC_DELAY_CHAIN_EN;
1800913a:	9446      	ld.w      	r2, (r4, 0x18)
1800913c:	ec420020 	ori      	r2, r2, 32
18009140:	b446      	st.w      	r2, (r4, 0x18)
            (io_cfg->delay_flag) ? (ll_sdhc_delay_clock(hw, io_cfg->delay_type, io_cfg->delay_chain_cnt)) :
18009142:	4b63      	lsri      	r3, r3, 3
        p_sdhc->CFG1 |= delay;
18009144:	9446      	ld.w      	r2, (r4, 0x18)
18009146:	6cc8      	or      	r3, r2
18009148:	07e5      	br      	0x18009112	// 18009112 <sdh_cfg+0x142>
        p_sdhc->CFG1 &= ~0xff;
1800914a:	3200      	movi      	r2, 0
1800914c:	9466      	ld.w      	r3, (r4, 0x18)
1800914e:	2aff      	subi      	r2, 256
18009150:	68c8      	and      	r3, r2
18009152:	07e0      	br      	0x18009112	// 18009112 <sdh_cfg+0x142>
            ll_sdhc_dat_overflow_stop_enable(hw, io_cfg->dat_overflow_stop_flag);
18009154:	856e      	ld.b      	r3, (r5, 0xe)
    if (enable)
18009156:	e4632001 	andi      	r3, r3, 1
1800915a:	e9030006 	bez      	r3, 0x18009166	// 18009166 <sdh_cfg+0x196>
        p_sdhc->CFG1 |= LL_SDHC_DAT_OVERFLOW_STOP_EN;
1800915e:	9466      	ld.w      	r3, (r4, 0x18)
18009160:	ec630400 	ori      	r3, r3, 1024
18009164:	07d7      	br      	0x18009112	// 18009112 <sdh_cfg+0x142>
        p_sdhc->CFG1 &= ~LL_SDHC_DAT_OVERFLOW_STOP_EN;
18009166:	9466      	ld.w      	r3, (r4, 0x18)
18009168:	3b8a      	bclri      	r3, 10
1800916a:	07d4      	br      	0x18009112	// 18009112 <sdh_cfg+0x142>
            hgsdh_set_power_mode(io_cfg->power_mode);
1800916c:	8528      	ld.b      	r1, (r5, 0x8)
    switch (mode)
1800916e:	3902      	cmphsi      	r1, 3
18009170:	0f61      	bf      	0x18009032	// 18009032 <sdh_cfg+0x62>
            os_printf("unknown power_mode %d", mode);
18009172:	1014      	lrw      	r0, 0x18016c48	// 180091c0 <sdh_cfg+0x1f0>
18009174:	0797      	br      	0x180090a2	// 180090a2 <sdh_cfg+0xd2>
            os_printf("err ioctrl_cmd : %d\r\n", io_cfg->ioctl_type);
18009176:	1014      	lrw      	r0, 0x18016c5f	// 180091c4 <sdh_cfg+0x1f4>
18009178:	0795      	br      	0x180090a2	// 180090a2 <sdh_cfg+0xd2>
1800917a:	106d      	lrw      	r3, 0x180166c5	// 180091ac <sdh_cfg+0x1dc>
        os_printf("clk:%d width:%s%s%s power:%s%s%s\r\n",
1800917c:	1053      	lrw      	r2, 0x18018b8f	// 180091c8 <sdh_cfg+0x1f8>
1800917e:	0767      	br      	0x1800904c	// 1800904c <sdh_cfg+0x7c>
18009180:	104b      	lrw      	r2, 0x180166c5	// 180091ac <sdh_cfg+0x1dc>
18009182:	1073      	lrw      	r3, 0x18016bfb	// 180091cc <sdh_cfg+0x1fc>
18009184:	6f4b      	mov      	r13, r2
18009186:	0764      	br      	0x1800904e	// 1800904e <sdh_cfg+0x7e>
18009188:	1069      	lrw      	r3, 0x180166c5	// 180091ac <sdh_cfg+0x1dc>
1800918a:	6c8f      	mov      	r2, r3
1800918c:	ea8d0011 	lrw      	r13, 0x18016377	// 180091d0 <sdh_cfg+0x200>
18009190:	075f      	br      	0x1800904e	// 1800904e <sdh_cfg+0x7e>
18009192:	1007      	lrw      	r0, 0x180166c5	// 180091ac <sdh_cfg+0x1dc>
18009194:	ea8c0010 	lrw      	r12, 0x18016c03	// 180091d4 <sdh_cfg+0x204>
18009198:	0764      	br      	0x18009060	// 18009060 <sdh_cfg+0x90>
1800919a:	ea8c0005 	lrw      	r12, 0x180166c5	// 180091ac <sdh_cfg+0x1dc>
1800919e:	100f      	lrw      	r0, 0x18016c00	// 180091d8 <sdh_cfg+0x208>
180091a0:	6d33      	mov      	r4, r12
180091a2:	0760      	br      	0x18009062	// 18009062 <sdh_cfg+0x92>
180091a4:	108e      	lrw      	r4, 0x18016bfd	// 180091dc <sdh_cfg+0x20c>
180091a6:	075e      	br      	0x18009062	// 18009062 <sdh_cfg+0x92>
180091a8:	017d7840 	.long	0x017d7840
180091ac:	180166c5 	.long	0x180166c5
180091b0:	18016c76 	.long	0x18016c76
180091b4:	18016c07 	.long	0x18016c07
180091b8:	18016c13 	.long	0x18016c13
180091bc:	18016c2f 	.long	0x18016c2f
180091c0:	18016c48 	.long	0x18016c48
180091c4:	18016c5f 	.long	0x18016c5f
180091c8:	18018b8f 	.long	0x18018b8f
180091cc:	18016bfb 	.long	0x18016bfb
180091d0:	18016377 	.long	0x18016377
180091d4:	18016c03 	.long	0x18016c03
180091d8:	18016c00 	.long	0x18016c00
180091dc:	18016bfd 	.long	0x18016bfd

180091e0 <sdh_complete>:
{
180091e0:	14d2      	push      	r4-r5, r15
180091e2:	6d03      	mov      	r4, r0
    res = os_sema_down(&sdhost->dat_sema, 2000);
180091e4:	31fa      	movi      	r1, 250
180091e6:	4123      	lsli      	r1, r1, 3
180091e8:	e400011f 	addi      	r0, r0, 288
180091ec:	e0005986 	bsr      	0x180144f8	// 180144f8 <os_sema_down>
	if(sdhost->data.err != 0 || res == 0){
180091f0:	94af      	ld.w      	r5, (r4, 0x3c)
	struct hgsdh_hw *hw =  (struct hgsdh_hw *)sdh_hw->hw;
180091f2:	d864204c 	ld.w      	r3, (r4, 0x130)
	if(sdhost->data.err != 0 || res == 0){
180091f6:	e9250030 	bnez      	r5, 0x18009256	// 18009256 <sdh_complete+0x76>
180091fa:	e9000030 	bez      	r0, 0x1800925a	// 1800925a <sdh_complete+0x7a>
    if(sdhost->sd_8clk_default) sdhost->sd_8clk_open = 1;
180091fe:	d84400db 	ld.b      	r2, (r4, 0xdb)
18009202:	e9020005 	bez      	r2, 0x1800920c	// 1800920c <sdh_complete+0x2c>
18009206:	3201      	movi      	r2, 1
18009208:	dc4400da 	st.b      	r2, (r4, 0xda)
    if (enable) {
1800920c:	d84400da 	ld.b      	r2, (r4, 0xda)
18009210:	e902002b 	bez      	r2, 0x18009266	// 18009266 <sdh_complete+0x86>
        p_sdhc->CFG |= LL_SDHC_8CLK_BEFORE_EN;
18009214:	9340      	ld.w      	r2, (r3, 0x0)
18009216:	3abf      	bseti      	r2, 31
        p_sdhc->CFG &= ~LL_SDHC_8CLK_BEFORE_EN;       
18009218:	b340      	st.w      	r2, (r3, 0x0)
    if(sdhost->data.psram_flag && (sdhost->sd_opt == SD_M_R)&& !ret)     hw_memcpy((void *)(sdhost->data.buf), (void *)sdhost->data.ping_buff[sdhost->data.ping_sel++], sdhost->data.blksize);
1800921a:	d8640054 	ld.b      	r3, (r4, 0x54)
1800921e:	e4432002 	andi      	r2, r3, 2
18009222:	e9020018 	bez      	r2, 0x18009252	// 18009252 <sdh_complete+0x72>
18009226:	d84400dc 	ld.b      	r2, (r4, 0xdc)
1800922a:	3a42      	cmpnei      	r2, 2
1800922c:	0813      	bt      	0x18009252	// 18009252 <sdh_complete+0x72>
1800922e:	e9250012 	bnez      	r5, 0x18009252	// 18009252 <sdh_complete+0x72>
18009232:	e4432001 	andi      	r2, r3, 1
18009236:	e4224001 	xori      	r1, r2, 1
1800923a:	c4615c00 	ins      	r3, r1, 0, 0
1800923e:	dc640054 	st.b      	r3, (r4, 0x54)
18009242:	e4620012 	addi      	r3, r2, 19
18009246:	9416      	ld.w      	r0, (r4, 0x58)
18009248:	944d      	ld.w      	r2, (r4, 0x34)
1800924a:	d0640881 	ldr.w      	r1, (r4, r3 << 2)
1800924e:	e0001ba7 	bsr      	0x1800c99c	// 1800c99c <hw_memcpy>
}
18009252:	6c17      	mov      	r0, r5
18009254:	1492      	pop      	r4-r5, r15
        if(res == 0)
18009256:	e9200005 	bnez      	r0, 0x18009260	// 18009260 <sdh_complete+0x80>
            sdhost->sd_opt = SD_OFF;
1800925a:	3203      	movi      	r2, 3
1800925c:	dc4400dc 	st.b      	r2, (r4, 0xdc)
		ret = -1;
18009260:	3500      	movi      	r5, 0
18009262:	2d00      	subi      	r5, 1
18009264:	07cd      	br      	0x180091fe	// 180091fe <sdh_complete+0x1e>
        p_sdhc->CFG &= ~LL_SDHC_8CLK_BEFORE_EN;       
18009266:	9340      	ld.w      	r2, (r3, 0x0)
18009268:	c40257c2 	zext      	r2, r2, 30, 0
1800926c:	07d6      	br      	0x18009218	// 18009218 <sdh_complete+0x38>
	...

18009270 <sdh_write>:
{
18009270:	14c2      	push      	r4-r5
    sdhost->data.psram_flag = 0;
18009272:	d8600054 	ld.b      	r3, (r0, 0x54)
18009276:	3200      	movi      	r2, 0
18009278:	c4625c01 	ins      	r3, r2, 1, 1
1800927c:	dc600054 	st.b      	r3, (r0, 0x54)
    if (((uint32)addr >= PSRAM_BASE) && 
18009280:	33c8      	movi      	r3, 200
18009282:	4378      	lsli      	r3, r3, 24
18009284:	594c      	addu      	r2, r1, r3
18009286:	c6e05023 	bmaski      	r3, 24
1800928a:	648c      	cmphs      	r3, r2
	struct hgsdh_hw *hw  =  (struct hgsdh_hw *)sdh_hw->hw;
1800928c:	d980204c 	ld.w      	r12, (r0, 0x130)
    uint32_t xfer_len    = sdhost->data.blksize;  
18009290:	908d      	ld.w      	r4, (r0, 0x34)
18009292:	0c2a      	bf      	0x180092e6	// 180092e6 <sdh_write+0x76>
    return (CACHE->CER & CACHE_CER_EN_Msk);  
18009294:	1175      	lrw      	r3, 0xe000f000	// 18009368 <sdh_write+0xf8>
18009296:	9360      	ld.w      	r3, (r3, 0x0)
18009298:	e4632001 	andi      	r3, r3, 1
        ((uint32)addr < PSRAM_END_ADDR) && 
1800929c:	e9030025 	bez      	r3, 0x180092e6	// 180092e6 <sdh_write+0x76>
    sys_dcache_clean_range_unaligned((uint32 *)buf, (uint32_t)(sdhost->data.blks * sdhost->data.blksize));
180092a0:	904e      	ld.w      	r2, (r0, 0x38)
180092a2:	c4448423 	mult      	r3, r4, r2
    int32_t op_size = dsize + (int32_t)addr % 16;
180092a6:	c7c05022 	bmaski      	r2, 31
180092aa:	220f      	addi      	r2, 16
180092ac:	6884      	and      	r2, r1
180092ae:	e9a20009 	bhsz      	r2, 0x180092c0	// 180092c0 <sdh_write+0x50>
180092b2:	ea0d0000 	movi      	r13, 0
180092b6:	2a00      	subi      	r2, 1
180092b8:	e5ad100f 	subi      	r13, r13, 16
180092bc:	6cb4      	or      	r2, r13
180092be:	2200      	addi      	r2, 1
180092c0:	608c      	addu      	r2, r3
    uint32_t op_addr = (uint32_t)addr & CACHE_CIR_INV_ADDR_Msk;
180092c2:	3300      	movi      	r3, 0
180092c4:	2b0f      	subi      	r3, 16
180092c6:	68c4      	and      	r3, r1
    op_addr |= _VAL2FLD(CACHE_CIR_CLR_ONE, 1);
180092c8:	ec630008 	ori      	r3, r3, 8
        CACHE->CIR = op_addr;
180092cc:	ea8d0027 	lrw      	r13, 0xe000f000	// 18009368 <sdh_write+0xf8>
    while (op_size >= 128) {
180092d0:	eb22007f 	cmplti      	r2, 128
180092d4:	0c24      	bf      	0x1800931c	// 1800931c <sdh_write+0xac>
180092d6:	60c8      	addu      	r3, r2
        CACHE->CIR = op_addr;
180092d8:	11a4      	lrw      	r5, 0xe000f000	// 18009368 <sdh_write+0xf8>
180092da:	c443008d 	subu      	r13, r3, r2
    while (op_size > 0) {
180092de:	e9420040 	bhz      	r2, 0x1800935e	// 1800935e <sdh_write+0xee>
    __ASM volatile("sync"::: "memory");
180092e2:	c0000420 	sync
    p_sdhc->CFG &= ~LL_SDHC_DAT_RW_MSK;
180092e6:	d86c2000 	ld.w      	r3, (r12, 0x0)
180092ea:	3b83      	bclri      	r3, 3
180092ec:	3b84      	bclri      	r3, 4
    sdhost->data.buf = buf;
180092ee:	b036      	st.w      	r1, (r0, 0x58)
    p_sdhc->CFG &= ~LL_SDHC_DAT_RW_MSK;
180092f0:	dc6c2000 	st.w      	r3, (r12, 0x0)
    p_sdhc->CFG |= LL_SDHC_DAT_DONE_CLR;
180092f4:	d86c2000 	ld.w      	r3, (r12, 0x0)
180092f8:	ec630400 	ori      	r3, r3, 1024
    p_sdhc->DCNT = len & (~ 0x3UL);
180092fc:	3c80      	bclri      	r4, 0
180092fe:	3c81      	bclri      	r4, 1
    p_sdhc->CFG |= LL_SDHC_DAT_DONE_CLR;
18009300:	dc6c2000 	st.w      	r3, (r12, 0x0)
    p_sdhc->DPTR = addr;
18009304:	dc2c2003 	st.w      	r1, (r12, 0xc)
    p_sdhc->DCNT = len & (~ 0x3UL);
18009308:	dc8c2004 	st.w      	r4, (r12, 0x10)
    p_sdhc->CFG |= LL_SDHC_DAT_SEND_WAIT_BUSY;
1800930c:	d86c2000 	ld.w      	r3, (r12, 0x0)
18009310:	ec630018 	ori      	r3, r3, 24
}
18009314:	3000      	movi      	r0, 0
    p_sdhc->CFG |= LL_SDHC_DAT_SEND_WAIT_BUSY;
18009316:	dc6c2000 	st.w      	r3, (r12, 0x0)
}
1800931a:	1482      	pop      	r4-r5
        op_addr += linesize;
1800931c:	e4a3000f 	addi      	r5, r3, 16
        CACHE->CIR = op_addr;
18009320:	dc6d2001 	st.w      	r3, (r13, 0x4)
        CACHE->CIR = op_addr;
18009324:	dcad2001 	st.w      	r5, (r13, 0x4)
        op_addr += linesize;
18009328:	e4a3001f 	addi      	r5, r3, 32
        CACHE->CIR = op_addr;
1800932c:	dcad2001 	st.w      	r5, (r13, 0x4)
        op_addr += linesize;
18009330:	e4a3002f 	addi      	r5, r3, 48
        CACHE->CIR = op_addr;
18009334:	dcad2001 	st.w      	r5, (r13, 0x4)
        op_addr += linesize;
18009338:	e4a3003f 	addi      	r5, r3, 64
        CACHE->CIR = op_addr;
1800933c:	dcad2001 	st.w      	r5, (r13, 0x4)
        op_addr += linesize;
18009340:	e4a3004f 	addi      	r5, r3, 80
        CACHE->CIR = op_addr;
18009344:	dcad2001 	st.w      	r5, (r13, 0x4)
        op_addr += linesize;
18009348:	e4a3005f 	addi      	r5, r3, 96
        CACHE->CIR = op_addr;
1800934c:	dcad2001 	st.w      	r5, (r13, 0x4)
        op_addr += linesize;
18009350:	e4a3006f 	addi      	r5, r3, 112
        CACHE->CIR = op_addr;
18009354:	dcad2001 	st.w      	r5, (r13, 0x4)
        op_addr += linesize;
18009358:	237f      	addi      	r3, 128
        op_size -= 128;
1800935a:	2a7f      	subi      	r2, 128
1800935c:	07ba      	br      	0x180092d0	// 180092d0 <sdh_write+0x60>
        CACHE->CIR = op_addr;
1800935e:	dda52001 	st.w      	r13, (r5, 0x4)
        op_size -= linesize;
18009362:	2a0f      	subi      	r2, 16
18009364:	07bb      	br      	0x180092da	// 180092da <sdh_write+0x6a>
18009366:	0000      	.short	0x0000
18009368:	e000f000 	.long	0xe000f000

1800936c <sdh_read>:
	struct hgsdh_hw *hw  =  (struct hgsdh_hw *)sdh_hw->hw;
1800936c:	d860204c 	ld.w      	r3, (r0, 0x130)
    sdhost->sd_8clk_open = 0;
18009370:	3200      	movi      	r2, 0
18009372:	dc4000da 	st.b      	r2, (r0, 0xda)
        p_sdhc->CFG &= ~LL_SDHC_8CLK_BEFORE_EN;       
18009376:	9340      	ld.w      	r2, (r3, 0x0)
18009378:	c40257c2 	zext      	r2, r2, 30, 0
    uint32_t xfer_len    = sdhost->data.blksize;   
1800937c:	d9a0200d 	ld.w      	r13, (r0, 0x34)
        p_sdhc->CFG &= ~LL_SDHC_8CLK_BEFORE_EN;       
18009380:	b340      	st.w      	r2, (r3, 0x0)
    sdhost->data.psram_flag = ((((uint32_t)buf) >> 24) == 0x38 || (((uint32_t)buf) >> 24) == 0x08);
18009382:	4958      	lsri      	r2, r1, 24
18009384:	eb420038 	cmpnei      	r2, 56
    sdhost->data.buf = buf;
18009388:	b036      	st.w      	r1, (r0, 0x58)
    sdhost->data.psram_flag = ((((uint32_t)buf) >> 24) == 0x38 || (((uint32_t)buf) >> 24) == 0x08);
1800938a:	0c2e      	bf      	0x180093e6	// 180093e6 <sdh_read+0x7a>
1800938c:	3a48      	cmpnei      	r2, 8
1800938e:	6703      	mvcv      	r12
18009390:	7730      	zextb      	r12, r12
18009392:	d8400054 	ld.b      	r2, (r0, 0x54)
18009396:	c44c5c01 	ins      	r2, r12, 1, 1
1800939a:	dc400054 	st.b      	r2, (r0, 0x54)
    if(sdhost->data.psram_flag) buf = (uint8 *)sdhost->data.ping_buff[sdhost->data.ping_sel];
1800939e:	7488      	zextb      	r2, r2
180093a0:	e5822002 	andi      	r12, r2, 2
180093a4:	e90c0007 	bez      	r12, 0x180093b2	// 180093b2 <sdh_read+0x46>
180093a8:	e4422001 	andi      	r2, r2, 1
180093ac:	2212      	addi      	r2, 19
180093ae:	d0400881 	ldr.w      	r1, (r0, r2 << 2)
    p_sdhc->CFG &= ~LL_SDHC_DAT_RW_MSK;
180093b2:	9340      	ld.w      	r2, (r3, 0x0)
180093b4:	3a83      	bclri      	r2, 3
180093b6:	3a84      	bclri      	r2, 4
180093b8:	b340      	st.w      	r2, (r3, 0x0)
	p_sdhc->CFG &= ~LL_SDHC_CLK_OUT_EN;
180093ba:	9340      	ld.w      	r2, (r3, 0x0)
180093bc:	3a81      	bclri      	r2, 1
180093be:	b340      	st.w      	r2, (r3, 0x0)
    p_sdhc->CFG |= LL_SDHC_DAT_DONE_CLR;
180093c0:	9340      	ld.w      	r2, (r3, 0x0)
180093c2:	ec420400 	ori      	r2, r2, 1024
180093c6:	b340      	st.w      	r2, (r3, 0x0)
    p_sdhc->DCNT = len & (~ 0x3UL);
180093c8:	c40d2822 	bclri      	r2, r13, 0
180093cc:	3a81      	bclri      	r2, 1
    p_sdhc->DPTR = addr;
180093ce:	b323      	st.w      	r1, (r3, 0xc)
    p_sdhc->DCNT = len & (~ 0x3UL);
180093d0:	b344      	st.w      	r2, (r3, 0x10)
    p_sdhc->CFG |= LL_SDHC_DAT_RCV;
180093d2:	9340      	ld.w      	r2, (r3, 0x0)
180093d4:	ec420008 	ori      	r2, r2, 8
180093d8:	b340      	st.w      	r2, (r3, 0x0)
        p_sdhc->CFG &= ~LL_SDHC_8CLK_BEFORE_EN;       
180093da:	9340      	ld.w      	r2, (r3, 0x0)
180093dc:	c40257c2 	zext      	r2, r2, 30, 0
}
180093e0:	3000      	movi      	r0, 0
        p_sdhc->CFG &= ~LL_SDHC_8CLK_BEFORE_EN;       
180093e2:	b340      	st.w      	r2, (r3, 0x0)
}
180093e4:	783c      	jmp      	r15
180093e6:	ea0c0001 	movi      	r12, 1
180093ea:	07d4      	br      	0x18009392	// 18009392 <sdh_read+0x26>

180093ec <hgic_sdc_irq_update>:
{
180093ec:	14d2      	push      	r4-r5, r15
	struct hgsdh_hw *hw =  (struct hgsdh_hw *)sdh_hw->hw;
180093ee:	d880204c 	ld.w      	r4, (r0, 0x130)
180093f2:	7544      	zextb      	r5, r1
    if (enable) {
180093f4:	e901000c 	bez      	r1, 0x1800940c	// 1800940c <hgic_sdc_irq_update+0x20>
        os_printf("enable sdio irq");
180093f8:	1008      	lrw      	r0, 0x18016bd8	// 18009418 <hgic_sdc_irq_update+0x2c>
180093fa:	e0001b65 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    if (enable) {
180093fe:	e905000a 	bez      	r5, 0x18009412	// 18009412 <hgic_sdc_irq_update+0x26>
        p_sdhc->CFG |= LL_SDHC_DAT_INTR_EN;
18009402:	9460      	ld.w      	r3, (r4, 0x0)
18009404:	ec634000 	ori      	r3, r3, 16384
        p_sdhc->CFG &= ~LL_SDHC_DAT_INTR_EN;
18009408:	b460      	st.w      	r3, (r4, 0x0)
}
1800940a:	1492      	pop      	r4-r5, r15
        os_printf("disable sdio irq");
1800940c:	1004      	lrw      	r0, 0x18016be9	// 1800941c <hgic_sdc_irq_update+0x30>
1800940e:	e0001b5b 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
        p_sdhc->CFG &= ~LL_SDHC_DAT_INTR_EN;
18009412:	9460      	ld.w      	r3, (r4, 0x0)
18009414:	3b8e      	bclri      	r3, 14
18009416:	07f9      	br      	0x18009408	// 18009408 <hgic_sdc_irq_update+0x1c>
18009418:	18016bd8 	.long	0x18016bd8
1800941c:	18016be9 	.long	0x18016be9

18009420 <ll_sdhc_config>:
{
18009420:	14d3      	push      	r4-r6, r15
18009422:	6d8b      	mov      	r6, r2
18009424:	6d43      	mov      	r5, r0
    ll_sdhc_set_bus_clk(p_sdhc, peripheral_clock_get(HG_AHB_PT_SDMMC), p_cfg->bus_clk);
18009426:	3006      	movi      	r0, 6
{
18009428:	6d07      	mov      	r4, r1
    ll_sdhc_set_bus_clk(p_sdhc, peripheral_clock_get(HG_AHB_PT_SDMMC), p_cfg->bus_clk);
1800942a:	e0003ec1 	bsr      	0x180111ac	// 180111ac <peripheral_clock_get>
1800942e:	9640      	ld.w      	r2, (r6, 0x0)
    p_sdhc->BAUD = ((sys_clk + bus_clk - 1)/ bus_clk) - 1;
18009430:	5a63      	subi      	r3, r2, 1
18009432:	600c      	addu      	r0, r3
18009434:	c4408020 	divu      	r0, r0, r2
    if (ioe == LL_SDHC_IROF) {
18009438:	9661      	ld.w      	r3, (r6, 0x4)
    p_sdhc->BAUD = ((sys_clk + bus_clk - 1)/ bus_clk) - 1;
1800943a:	2800      	subi      	r0, 1
1800943c:	b401      	st.w      	r0, (r4, 0x4)
    if (ioe == LL_SDHC_IROF) {
1800943e:	e9230020 	bnez      	r3, 0x1800947e	// 1800947e <ll_sdhc_config+0x5e>
        p_sdhc->CFG &= ~LL_SDHC_ODAT_RISING_EDGE;
18009442:	9460      	ld.w      	r3, (r4, 0x0)
18009444:	3b88      	bclri      	r3, 8
        p_sdhc->CFG |= LL_SDHC_ODAT_RISING_EDGE;
18009446:	b460      	st.w      	r3, (r4, 0x0)
    if (width == LL_SDHC_DAT_4BIT) {
18009448:	9662      	ld.w      	r3, (r6, 0x8)
1800944a:	3b41      	cmpnei      	r3, 1
        p_sdhc->CFG |= LL_SDHC_DAT_WIDTH_4BIT;
1800944c:	9460      	ld.w      	r3, (r4, 0x0)
    if (width == LL_SDHC_DAT_4BIT) {
1800944e:	081c      	bt      	0x18009486	// 18009486 <ll_sdhc_config+0x66>
        p_sdhc->CFG |= LL_SDHC_DAT_WIDTH_4BIT;
18009450:	ec630004 	ori      	r3, r3, 4
        p_sdhc->CFG &= ~LL_SDHC_DAT_WIDTH_4BIT;
18009454:	b460      	st.w      	r3, (r4, 0x0)
        p_sdhc->CFG |= LL_SDHC_CLK_OUT_EN;
18009456:	9460      	ld.w      	r3, (r4, 0x0)
18009458:	ec630002 	ori      	r3, r3, 2
1800945c:	b460      	st.w      	r3, (r4, 0x0)
    if (enable) {
1800945e:	d86500da 	ld.b      	r3, (r5, 0xda)
18009462:	e9030014 	bez      	r3, 0x1800948a	// 1800948a <ll_sdhc_config+0x6a>
        p_sdhc->CFG |= LL_SDHC_8CLK_BEFORE_EN;
18009466:	9460      	ld.w      	r3, (r4, 0x0)
18009468:	3bbf      	bseti      	r3, 31
        p_sdhc->CFG &= ~LL_SDHC_8CLK_BEFORE_EN;       
1800946a:	b460      	st.w      	r3, (r4, 0x0)
    p_sdhc->CFG  |= LL_SDHC_EN;
1800946c:	9460      	ld.w      	r3, (r4, 0x0)
1800946e:	ec630001 	ori      	r3, r3, 1
18009472:	b460      	st.w      	r3, (r4, 0x0)
	p_sdhc->CFG1 |= (LL_SDHC_DAT_OVERFLOW_STOP_EN);
18009474:	9466      	ld.w      	r3, (r4, 0x18)
18009476:	ec630400 	ori      	r3, r3, 1024
1800947a:	b466      	st.w      	r3, (r4, 0x18)
}
1800947c:	1493      	pop      	r4-r6, r15
        p_sdhc->CFG |= LL_SDHC_ODAT_RISING_EDGE;
1800947e:	9460      	ld.w      	r3, (r4, 0x0)
18009480:	ec630100 	ori      	r3, r3, 256
18009484:	07e1      	br      	0x18009446	// 18009446 <ll_sdhc_config+0x26>
        p_sdhc->CFG &= ~LL_SDHC_DAT_WIDTH_4BIT;
18009486:	3b82      	bclri      	r3, 2
18009488:	07e6      	br      	0x18009454	// 18009454 <ll_sdhc_config+0x34>
        p_sdhc->CFG &= ~LL_SDHC_8CLK_BEFORE_EN;       
1800948a:	9460      	ld.w      	r3, (r4, 0x0)
1800948c:	c40357c3 	zext      	r3, r3, 30, 0
18009490:	07ed      	br      	0x1800946a	// 1800946a <ll_sdhc_config+0x4a>
	...

18009494 <sdh_open>:
{
18009494:	14d5      	push      	r4-r8, r15
18009496:	1423      	subi      	r14, r14, 12
	SYSCTRL->SYS_CON1 &= ~(BIT(20));
18009498:	ea254002 	movih      	r5, 16386
{
1800949c:	6d03      	mov      	r4, r0
	SYSCTRL->SYS_CON1 &= ~(BIT(20));
1800949e:	9562      	ld.w      	r3, (r5, 0x8)
180094a0:	3b94      	bclri      	r3, 20
	struct hgsdh_hw *hw =  (struct hgsdh_hw *)sdh_hw->hw;
180094a2:	d900204c 	ld.w      	r8, (r0, 0x130)
	SYSCTRL->SYS_CON1 &= ~(BIT(20));
180094a6:	b562      	st.w      	r3, (r5, 0x8)
	delay_us(10);
180094a8:	300a      	movi      	r0, 10
{
180094aa:	6dc7      	mov      	r7, r1
	delay_us(10);
180094ac:	e3ffde24 	bsr      	0x180050f4	// 180050f4 <delay_us>
	SYSCTRL->SYS_CON1 |= (BIT(20));
180094b0:	9562      	ld.w      	r3, (r5, 0x8)
180094b2:	3bb4      	bseti      	r3, 20
180094b4:	b562      	st.w      	r3, (r5, 0x8)
    sysctrl_sdhc_clk_open();
180094b6:	9573      	ld.w      	r3, (r5, 0x4c)
180094b8:	3bb4      	bseti      	r3, 20
180094ba:	b573      	st.w      	r3, (r5, 0x4c)
    	sdhost->flags = MMCSD_BUSWIDTH_4 | MMCSD_MUTBLKWRITE | MMCSD_SUP_SDIO_IRQ | MMCSD_SUP_HIGHSPEED;
180094bc:	3f44      	cmpnei      	r7, 4
    sdh_irq = sdhost;
180094be:	1171      	lrw      	r3, 0x20002140	// 18009580 <sdh_open+0xec>
    sdhost->new_lba       = 0;
180094c0:	3500      	movi      	r5, 0
    sdh_irq = sdhost;
180094c2:	b380      	st.w      	r4, (r3, 0x0)
    sdhost->sd_8clk_default = 1;
180094c4:	3301      	movi      	r3, 1
180094c6:	dc6400db 	st.b      	r3, (r4, 0xdb)
    sdhost->sd_8clk_open    = sdhost->sd_8clk_default;
180094ca:	dc6400da 	st.b      	r3, (r4, 0xda)
    sdhost->freq_min = 400 * 1000;
180094ce:	ea03c350 	movi      	r3, 50000
180094d2:	c4634903 	rotli      	r3, r3, 3
180094d6:	b463      	st.w      	r3, (r4, 0xc)
    sdhost->freq_max = 50000000;
180094d8:	116b      	lrw      	r3, 0x2faf080	// 18009584 <sdh_open+0xf0>
180094da:	b464      	st.w      	r3, (r4, 0x10)
    sdhost->valid_ocr = 0x00FFFF80;/* The voltage range supported is 1.65v-3.6v */
180094dc:	ea230100 	movih      	r3, 256
180094e0:	2b7f      	subi      	r3, 128
180094e2:	b465      	st.w      	r3, (r4, 0x14)
    	sdhost->flags = MMCSD_BUSWIDTH_4 | MMCSD_MUTBLKWRITE | MMCSD_SUP_SDIO_IRQ | MMCSD_SUP_HIGHSPEED;
180094e4:	64c3      	mvcv      	r3
180094e6:	2333      	addi      	r3, 52
180094e8:	b478      	st.w      	r3, (r4, 0x60)
    sdhost->max_seg_size = 4096;
180094ea:	3380      	movi      	r3, 128
180094ec:	4365      	lsli      	r3, r3, 5
180094ee:	b479      	st.w      	r3, (r4, 0x64)
    sdhost->max_blk_size = 512;
180094f0:	3380      	movi      	r3, 128
180094f2:	4362      	lsli      	r3, r3, 2
    sdhost->max_dma_segs = 1;
180094f4:	3601      	movi      	r6, 1
    sdhost->max_blk_size = 512;
180094f6:	b47b      	st.w      	r3, (r4, 0x6c)
    sdhost->max_blk_count = 512;
180094f8:	b47c      	st.w      	r3, (r4, 0x70)
    sdhost->sd_stop       = 0;
180094fa:	3300      	movi      	r3, 0
180094fc:	dc6400dd 	st.b      	r3, (r4, 0xdd)
    sdhost->sd_opt        = SD_IDLE;
18009500:	dc6400dc 	st.b      	r3, (r4, 0xdc)
    os_sema_init(&sdhost->dat_sema, 0);
18009504:	6c57      	mov      	r1, r5
    sdhost->max_dma_segs = 1;
18009506:	b4da      	st.w      	r6, (r4, 0x68)
    sdhost->new_lba       = 0;
18009508:	b4bd      	st.w      	r5, (r4, 0x74)
    os_sema_init(&sdhost->dat_sema, 0);
1800950a:	e404011f 	addi      	r0, r4, 288
1800950e:	e00057c5 	bsr      	0x18014498	// 18014498 <os_sema_init>
    sdhost->data.timeout_ns =  100000000;  /* 100ms */
18009512:	107e      	lrw      	r3, 0x5f5e100	// 18009588 <sdh_open+0xf4>
18009514:	b471      	st.w      	r3, (r4, 0x44)
    cfg.bus_clk = sdhost->freq_min;
18009516:	9463      	ld.w      	r3, (r4, 0xc)
    	cfg.width = LL_SDHC_DAT_4BIT;
18009518:	3f44      	cmpnei      	r7, 4
    cfg.bus_clk = sdhost->freq_min;
1800951a:	b860      	st.w      	r3, (r14, 0x0)
    	cfg.width = LL_SDHC_DAT_4BIT;
1800951c:	6cdb      	mov      	r3, r6
1800951e:	c4650c40 	inct      	r3, r5, 0
    ll_sdhc_config(sdhost,hw, &cfg);
18009522:	6cbb      	mov      	r2, r14
18009524:	6c63      	mov      	r1, r8
18009526:	6c13      	mov      	r0, r4
    sdhost->private_data = 0;
18009528:	dca42038 	st.w      	r5, (r4, 0xe0)
    	cfg.width = LL_SDHC_DAT_4BIT;
1800952c:	b862      	st.w      	r3, (r14, 0x8)
    cfg.ioe = LL_SDHC_IROF;//LL_SDHC_IROF;
1800952e:	b8a1      	st.w      	r5, (r14, 0x4)
    ll_sdhc_config(sdhost,hw, &cfg);
18009530:	e3ffff78 	bsr      	0x18009420	// 18009420 <ll_sdhc_config>
    sdhost->data.ping_buff[0] = (uint32_t)sdhc_dat_ping_buf0;
18009534:	1076      	lrw      	r3, 0x20001bd8	// 1800958c <sdh_open+0xf8>
    hgic_sdc_irq_update(sdhost, 1);
18009536:	6c5b      	mov      	r1, r6
    sdhost->data.ping_buff[0] = (uint32_t)sdhc_dat_ping_buf0;
18009538:	b473      	st.w      	r3, (r4, 0x4c)
    hgic_sdc_irq_update(sdhost, 1);
1800953a:	6c13      	mov      	r0, r4
    sdhost->data.ping_buff[1] = (uint32_t)sdhc_dat_ping_buf1;
1800953c:	1075      	lrw      	r3, 0x20001dd8	// 18009590 <sdh_open+0xfc>
1800953e:	b474      	st.w      	r3, (r4, 0x50)
    sdhost->data.ping_sel     = 0;
18009540:	d8640054 	ld.b      	r3, (r4, 0x54)
18009544:	c4655c00 	ins      	r3, r5, 0, 0
18009548:	dc640054 	st.b      	r3, (r4, 0x54)
    sdhost->io_cfg.dat_overflow_stop_flag = 1;
1800954c:	d8640026 	ld.b      	r3, (r4, 0x26)
18009550:	c4665c00 	ins      	r3, r6, 0, 0
18009554:	dc640026 	st.b      	r3, (r4, 0x26)
	sdhost->io_cfg.self_adaption_flag	  = 0;
18009558:	d8640022 	ld.b      	r3, (r4, 0x22)
1800955c:	c4655c20 	ins      	r3, r5, 1, 0
18009560:	dc640022 	st.b      	r3, (r4, 0x22)
    hgic_sdc_irq_update(sdhost, 1);
18009564:	e3ffff44 	bsr      	0x180093ec	// 180093ec <hgic_sdc_irq_update>
    VIC->ISER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
18009568:	104b      	lrw      	r2, 0xe000e100	// 18009594 <sdh_open+0x100>
1800956a:	3380      	movi      	r3, 128
1800956c:	436d      	lsli      	r3, r3, 13
1800956e:	b260      	st.w      	r3, (r2, 0x0)
	request_irq(SDHOST_IRQn, SDHOST_IRQHandler_action, (void*)sdhost);	
18009570:	3014      	movi      	r0, 20
18009572:	6c93      	mov      	r2, r4
18009574:	1029      	lrw      	r1, 0x180096f4	// 18009598 <sdh_open+0x104>
18009576:	e3ffd0b3 	bsr      	0x180036dc	// 180036dc <request_irq>
}
1800957a:	6c17      	mov      	r0, r5
1800957c:	1403      	addi      	r14, r14, 12
1800957e:	1495      	pop      	r4-r8, r15
18009580:	20002140 	.long	0x20002140
18009584:	02faf080 	.long	0x02faf080
18009588:	05f5e100 	.long	0x05f5e100
1800958c:	20001bd8 	.long	0x20001bd8
18009590:	20001dd8 	.long	0x20001dd8
18009594:	e000e100 	.long	0xe000e100
18009598:	180096f4 	.long	0x180096f4

1800959c <sdhc_interrupt_handle>:
{
1800959c:	14d3      	push      	r4-r6, r15
	struct hgsdh_hw *hw =  (struct hgsdh_hw *)sdh_hw->hw;
1800959e:	d860204c 	ld.w      	r3, (r0, 0x130)
    return ((p_sdhc->CFG & LL_SDHC_DAT_DONE)) ? TRUE : FALSE;
180095a2:	3180      	movi      	r1, 128
180095a4:	9340      	ld.w      	r2, (r3, 0x0)
180095a6:	4125      	lsli      	r1, r1, 5
180095a8:	6884      	and      	r2, r1
{
180095aa:	6d03      	mov      	r4, r0
    if (ll_sdhc_get_dat_done_pending(hw)){
180095ac:	e9020065 	bez      	r2, 0x18009676	// 18009676 <sdhc_interrupt_handle+0xda>
    p_sdhc->CFG |= LL_SDHC_DAT_DONE_CLR;
180095b0:	9340      	ld.w      	r2, (r3, 0x0)
180095b2:	ec420400 	ori      	r2, r2, 1024
180095b6:	b340      	st.w      	r2, (r3, 0x0)
        if(sdhost->sd_opt == SD_M_R){
180095b8:	d84000dc 	ld.b      	r2, (r0, 0xdc)
180095bc:	3a42      	cmpnei      	r2, 2
180095be:	0871      	bt      	0x180096a0	// 180096a0 <sdhc_interrupt_handle+0x104>
    return (p_sdhc->CFG & LL_SDHC_DAT_CRC_ERR) ? TRUE : FALSE;
180095c0:	3180      	movi      	r1, 128
180095c2:	9340      	ld.w      	r2, (r3, 0x0)
180095c4:	412f      	lsli      	r1, r1, 15
180095c6:	6884      	and      	r2, r1
            if(ll_sdhc_get_rd_dat_err_pending(hw))
180095c8:	e9020012 	bez      	r2, 0x180095ec	// 180095ec <sdhc_interrupt_handle+0x50>
                if(sdhost->io_cfg.self_adaption_flag != MMCSD_SMP_EN)    os_printf("read dat err pending\r\n");
180095cc:	d8600022 	ld.b      	r3, (r0, 0x22)
180095d0:	e4632003 	andi      	r3, r3, 3
180095d4:	3b41      	cmpnei      	r3, 1
180095d6:	0c04      	bf      	0x180095de	// 180095de <sdhc_interrupt_handle+0x42>
180095d8:	1205      	lrw      	r0, 0x18016cc7	// 180096ec <sdhc_interrupt_handle+0x150>
                os_printf("write dat err pending\r\n");
180095da:	e0001a75 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
                sdhost->data.err = DATA_DIR_READ;
180095de:	3302      	movi      	r3, 2
180095e0:	b46f      	st.w      	r3, (r4, 0x3c)
                os_sema_up(&sdhost->dat_sema);
180095e2:	e404011f 	addi      	r0, r4, 288
180095e6:	e00057a5 	bsr      	0x18014530	// 18014530 <os_sema_up>
                return;
180095ea:	0446      	br      	0x18009676	// 18009676 <sdhc_interrupt_handle+0xda>
            if(sdhost->data.blks - 1)
180095ec:	904e      	ld.w      	r2, (r0, 0x38)
180095ee:	3a41      	cmpnei      	r2, 1
180095f0:	0ff9      	bf      	0x180095e2	// 180095e2 <sdhc_interrupt_handle+0x46>
                sdhost->data.blks = sdhost->data.blks -1;
180095f2:	2a00      	subi      	r2, 1
                if(sdhost->data.psram_flag)
180095f4:	d8240054 	ld.b      	r1, (r4, 0x54)
                sdhost->data.blks = sdhost->data.blks -1;
180095f8:	b04e      	st.w      	r2, (r0, 0x38)
                if(sdhost->data.psram_flag)
180095fa:	e4a12002 	andi      	r5, r1, 2
                sdhost->data.buf  = sdhost->data.buf + sdhost->data.blksize;
180095fe:	9016      	ld.w      	r0, (r0, 0x58)
18009600:	944d      	ld.w      	r2, (r4, 0x34)
18009602:	c440002c 	addu      	r12, r0, r2
18009606:	dd842016 	st.w      	r12, (r4, 0x58)
1800960a:	c402282d 	bclri      	r13, r2, 0
1800960e:	c42d282d 	bclri      	r13, r13, 1
                if(sdhost->data.psram_flag)
18009612:	e9050033 	bez      	r5, 0x18009678	// 18009678 <sdhc_interrupt_handle+0xdc>
                    ll_sdhc_read_data_kick(hw, (uint32_t)sdhost->data.ping_buff[(sdhost->data.ping_sel+1)%2], sdhost->data.blksize);
18009616:	e4212001 	andi      	r1, r1, 1
1800961a:	e4a14001 	xori      	r5, r1, 1
1800961e:	e5850012 	addi      	r12, r5, 19
18009622:	d1840886 	ldr.w      	r6, (r4, r12 << 2)
    p_sdhc->CFG &= ~LL_SDHC_DAT_RW_MSK;
18009626:	d9832000 	ld.w      	r12, (r3, 0x0)
1800962a:	c46c282c 	bclri      	r12, r12, 3
1800962e:	c48c282c 	bclri      	r12, r12, 4
18009632:	dd832000 	st.w      	r12, (r3, 0x0)
	p_sdhc->CFG &= ~LL_SDHC_CLK_OUT_EN;
18009636:	d9832000 	ld.w      	r12, (r3, 0x0)
1800963a:	c42c282c 	bclri      	r12, r12, 1
1800963e:	dd832000 	st.w      	r12, (r3, 0x0)
    p_sdhc->CFG |= LL_SDHC_DAT_DONE_CLR;
18009642:	d9832000 	ld.w      	r12, (r3, 0x0)
18009646:	ed8c0400 	ori      	r12, r12, 1024
1800964a:	dd832000 	st.w      	r12, (r3, 0x0)
    p_sdhc->DPTR = addr;
1800964e:	b3c3      	st.w      	r6, (r3, 0xc)
    p_sdhc->DCNT = len & (~ 0x3UL);
18009650:	dda32004 	st.w      	r13, (r3, 0x10)
    p_sdhc->CFG |= LL_SDHC_DAT_RCV;
18009654:	d9832000 	ld.w      	r12, (r3, 0x0)
18009658:	ed8c0008 	ori      	r12, r12, 8
1800965c:	dd832000 	st.w      	r12, (r3, 0x0)
                    hw_memcpy((void *)(sdhost->data.buf - sdhost->data.blksize), (void *)sdhost->data.ping_buff[sdhost->data.ping_sel++], sdhost->data.blksize);
18009660:	d8640054 	ld.b      	r3, (r4, 0x54)
18009664:	c4655c00 	ins      	r3, r5, 0, 0
18009668:	dc640054 	st.b      	r3, (r4, 0x54)
1800966c:	2112      	addi      	r1, 19
1800966e:	d0240881 	ldr.w      	r1, (r4, r1 << 2)
18009672:	e0001995 	bsr      	0x1800c99c	// 1800c99c <hw_memcpy>
}
18009676:	1493      	pop      	r4-r6, r15
    p_sdhc->CFG &= ~LL_SDHC_DAT_RW_MSK;
18009678:	9340      	ld.w      	r2, (r3, 0x0)
1800967a:	3a83      	bclri      	r2, 3
1800967c:	3a84      	bclri      	r2, 4
1800967e:	b340      	st.w      	r2, (r3, 0x0)
	p_sdhc->CFG &= ~LL_SDHC_CLK_OUT_EN;
18009680:	9340      	ld.w      	r2, (r3, 0x0)
18009682:	3a81      	bclri      	r2, 1
18009684:	b340      	st.w      	r2, (r3, 0x0)
    p_sdhc->CFG |= LL_SDHC_DAT_DONE_CLR;
18009686:	9340      	ld.w      	r2, (r3, 0x0)
18009688:	ec420400 	ori      	r2, r2, 1024
1800968c:	b340      	st.w      	r2, (r3, 0x0)
    p_sdhc->DPTR = addr;
1800968e:	dd832003 	st.w      	r12, (r3, 0xc)
    p_sdhc->DCNT = len & (~ 0x3UL);
18009692:	dda32004 	st.w      	r13, (r3, 0x10)
    p_sdhc->CFG |= LL_SDHC_DAT_RCV;
18009696:	9340      	ld.w      	r2, (r3, 0x0)
18009698:	ec420008 	ori      	r2, r2, 8
    p_sdhc->CFG |= LL_SDHC_DAT_SEND_WAIT_BUSY;
1800969c:	b340      	st.w      	r2, (r3, 0x0)
1800969e:	07ec      	br      	0x18009676	// 18009676 <sdhc_interrupt_handle+0xda>
        else if(sdhost->sd_opt == SD_M_W)
180096a0:	3a41      	cmpnei      	r2, 1
180096a2:	0ba0      	bt      	0x180095e2	// 180095e2 <sdhc_interrupt_handle+0x46>
    return ((p_sdhc->CFG & LL_SDHC_CRC_STA) != (2<<16)) ? TRUE : FALSE;
180096a4:	32e0      	movi      	r2, 224
180096a6:	424b      	lsli      	r2, r2, 11
180096a8:	9320      	ld.w      	r1, (r3, 0x0)
180096aa:	6848      	and      	r1, r2
            if (ll_sdhc_get_wr_dat_err_pending(hw))
180096ac:	3280      	movi      	r2, 128
180096ae:	424a      	lsli      	r2, r2, 10
180096b0:	6486      	cmpne      	r1, r2
180096b2:	0c03      	bf      	0x180096b8	// 180096b8 <sdhc_interrupt_handle+0x11c>
                os_printf("write dat err pending\r\n");
180096b4:	100f      	lrw      	r0, 0x18016cdf	// 180096f0 <sdhc_interrupt_handle+0x154>
180096b6:	0792      	br      	0x180095da	// 180095da <sdhc_interrupt_handle+0x3e>
            if(sdhost->data.blks - 1)
180096b8:	904e      	ld.w      	r2, (r0, 0x38)
180096ba:	3a41      	cmpnei      	r2, 1
180096bc:	0f93      	bf      	0x180095e2	// 180095e2 <sdhc_interrupt_handle+0x46>
                sdhost->data.blks = sdhost->data.blks -1;
180096be:	2a00      	subi      	r2, 1
                sdhost->data.buf  = sdhost->data.buf + sdhost->data.blksize;
180096c0:	9036      	ld.w      	r1, (r0, 0x58)
                sdhost->data.blks = sdhost->data.blks -1;
180096c2:	b04e      	st.w      	r2, (r0, 0x38)
                sdhost->data.buf  = sdhost->data.buf + sdhost->data.blksize;
180096c4:	904d      	ld.w      	r2, (r0, 0x34)
180096c6:	6048      	addu      	r1, r2
180096c8:	b036      	st.w      	r1, (r0, 0x58)
    p_sdhc->CFG &= ~LL_SDHC_DAT_RW_MSK;
180096ca:	9300      	ld.w      	r0, (r3, 0x0)
180096cc:	3883      	bclri      	r0, 3
180096ce:	3884      	bclri      	r0, 4
180096d0:	b300      	st.w      	r0, (r3, 0x0)
    p_sdhc->CFG |= LL_SDHC_DAT_DONE_CLR;
180096d2:	9300      	ld.w      	r0, (r3, 0x0)
    p_sdhc->DCNT = len & (~ 0x3UL);
180096d4:	3a80      	bclri      	r2, 0
180096d6:	3a81      	bclri      	r2, 1
    p_sdhc->CFG |= LL_SDHC_DAT_DONE_CLR;
180096d8:	ec000400 	ori      	r0, r0, 1024
180096dc:	b300      	st.w      	r0, (r3, 0x0)
    p_sdhc->DPTR = addr;
180096de:	b323      	st.w      	r1, (r3, 0xc)
    p_sdhc->DCNT = len & (~ 0x3UL);
180096e0:	b344      	st.w      	r2, (r3, 0x10)
    p_sdhc->CFG |= LL_SDHC_DAT_SEND_WAIT_BUSY;
180096e2:	9340      	ld.w      	r2, (r3, 0x0)
180096e4:	ec420018 	ori      	r2, r2, 24
180096e8:	07da      	br      	0x1800969c	// 1800969c <sdhc_interrupt_handle+0x100>
180096ea:	0000      	.short	0x0000
180096ec:	18016cc7 	.long	0x18016cc7
180096f0:	18016cdf 	.long	0x18016cdf

180096f4 <SDHOST_IRQHandler_action>:
{
180096f4:	14d0      	push      	r15
    sdhc_interrupt_handle(sdhost);
180096f6:	e3ffff53 	bsr      	0x1800959c	// 1800959c <sdhc_interrupt_handle>
}
180096fa:	1490      	pop      	r15

180096fc <hgsdh_attach>:



void hgsdh_attach(uint32 dev_id, struct hgsdh *sdhost)
{
180096fc:	14d0      	push      	r15
    sdhost->dev.open                  = sdh_open;
180096fe:	1057      	lrw      	r2, 0x18009494	// 18009758 <hgsdh_attach+0x5c>
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
18009700:	ea0c0001 	movi      	r12, 1
18009704:	dc41203a 	st.w      	r2, (r1, 0xe8)
    IRQn &= 0x7FUL;
18009708:	d861204e 	ld.w      	r3, (r1, 0x138)
    sdhost->dev.close                 = sdh_close;
1800970c:	1054      	lrw      	r2, 0x18008edc	// 1800975c <hgsdh_attach+0x60>
1800970e:	dc41203b 	st.w      	r2, (r1, 0xec)
    sdhost->dev.suspend               = sdh_suspend;
18009712:	1054      	lrw      	r2, 0x18008f18	// 18009760 <hgsdh_attach+0x64>
18009714:	dc41203c 	st.w      	r2, (r1, 0xf0)
    sdhost->dev.resume                = sdh_resume;	
18009718:	1053      	lrw      	r2, 0x18008f74	// 18009764 <hgsdh_attach+0x68>
1800971a:	dc41203d 	st.w      	r2, (r1, 0xf4)
    //sdhost->dev.init                  = sdh_init;
    sdhost->dev.iocfg                 = sdh_cfg;
1800971e:	1053      	lrw      	r2, 0x18008fd0	// 18009768 <hgsdh_attach+0x6c>
18009720:	dc41203e 	st.w      	r2, (r1, 0xf8)
    sdhost->dev.cmd                   = sdh_cmd;
18009724:	1052      	lrw      	r2, 0x18008d58	// 1800976c <hgsdh_attach+0x70>
18009726:	dc41203f 	st.w      	r2, (r1, 0xfc)
    sdhost->dev.write                 = sdh_write;
1800972a:	1052      	lrw      	r2, 0x18009270	// 18009770 <hgsdh_attach+0x74>
1800972c:	dc412040 	st.w      	r2, (r1, 0x100)
    sdhost->dev.read                  = sdh_read;   
18009730:	1051      	lrw      	r2, 0x1800936c	// 18009774 <hgsdh_attach+0x78>
18009732:	dc412041 	st.w      	r2, (r1, 0x104)
    sdhost->dev.complete              = sdh_complete;   
18009736:	1051      	lrw      	r2, 0x180091e0	// 18009778 <hgsdh_attach+0x7c>
18009738:	dc412042 	st.w      	r2, (r1, 0x108)
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1800973c:	c4a354c2 	zext      	r2, r3, 6, 5
18009740:	e463201f 	andi      	r3, r3, 31
18009744:	c46c4023 	lsl      	r3, r12, r3
18009748:	221f      	addi      	r2, 32
1800974a:	ea8c000d 	lrw      	r12, 0xe000e100	// 1800977c <hgsdh_attach+0x80>
1800974e:	d44c0883 	str.w      	r3, (r12, r2 << 2)
    irq_disable(sdhost->irq_num);
    dev_register(dev_id, (struct dev_obj *)sdhost); 
18009752:	e3ffcca9 	bsr      	0x180030a4	// 180030a4 <dev_register>
}
18009756:	1490      	pop      	r15
18009758:	18009494 	.long	0x18009494
1800975c:	18008edc 	.long	0x18008edc
18009760:	18008f18 	.long	0x18008f18
18009764:	18008f74 	.long	0x18008f74
18009768:	18008fd0 	.long	0x18008fd0
1800976c:	18008d58 	.long	0x18008d58
18009770:	18009270 	.long	0x18009270
18009774:	1800936c 	.long	0x1800936c
18009778:	180091e0 	.long	0x180091e0
1800977c:	e000e100 	.long	0xe000e100

18009780 <hg_sysaes_v3_irq_handler>:
#include "hg_sysaes_v3_hw.h"
#include "hal/sysaes.h"


static void hg_sysaes_v3_irq_handler(void *data)
{
18009780:	14d0      	push      	r15
    struct hg_sysaes_v3 *sysaes = (struct hg_sysaes_v3 *)data;
    struct hg_sysaes_v3_hw *hw = (struct hg_sysaes_v3_hw *)sysaes->hw;
18009782:	9063      	ld.w      	r3, (r0, 0xc)
    hw->AES_STAT = AES_STAT_COMP_PD_MSK;
18009784:	3201      	movi      	r2, 1
18009786:	b351      	st.w      	r2, (r3, 0x44)
    os_sema_up(&sysaes->done);
18009788:	2017      	addi      	r0, 24
1800978a:	e00056d3 	bsr      	0x18014530	// 18014530 <os_sema_up>
}
1800978e:	1490      	pop      	r15

18009790 <csi_dcache_clean_invalid_range.constprop.1>:
    uint32_t op_addr = (uint32_t)addr & CACHE_CIR_INV_ADDR_Msk;
18009790:	3300      	movi      	r3, 0
18009792:	2b0f      	subi      	r3, 16
18009794:	68c0      	and      	r3, r0
        CACHE->CIR = op_addr;
18009796:	104b      	lrw      	r2, 0xe000f000	// 180097c0 <csi_dcache_clean_invalid_range.constprop.1+0x30>
    op_addr |= _VAL2FLD(CACHE_CIR_CLR_ONE, 1) | _VAL2FLD(CACHE_CIR_INV_ONE, 1);
18009798:	ec63000a 	ori      	r3, r3, 10
        CACHE->CIR = op_addr;
1800979c:	b261      	st.w      	r3, (r2, 0x4)
    int32_t op_size = dsize + (int32_t)addr % 16;
1800979e:	c7c05022 	bmaski      	r2, 31
180097a2:	220f      	addi      	r2, 16
180097a4:	6808      	and      	r0, r2
        op_addr += linesize;
180097a6:	230f      	addi      	r3, 16
    int32_t op_size = dsize + (int32_t)addr % 16;
180097a8:	e9a00007 	bhsz      	r0, 0x180097b6	// 180097b6 <csi_dcache_clean_invalid_range.constprop.1+0x26>
180097ac:	3200      	movi      	r2, 0
180097ae:	2800      	subi      	r0, 1
180097b0:	2a0f      	subi      	r2, 16
180097b2:	6c08      	or      	r0, r2
180097b4:	2000      	addi      	r0, 1
    while (op_size > 0) {
180097b6:	e9600004 	blsz      	r0, 0x180097be	// 180097be <csi_dcache_clean_invalid_range.constprop.1+0x2e>
        CACHE->CIR = op_addr;
180097ba:	1042      	lrw      	r2, 0xe000f000	// 180097c0 <csi_dcache_clean_invalid_range.constprop.1+0x30>
180097bc:	b261      	st.w      	r3, (r2, 0x4)
}
180097be:	783c      	jmp      	r15
180097c0:	e000f000 	.long	0xe000f000

180097c4 <hg_sysaes_v3_hdl>:
        hw->KEY[i] = get_unaligned_le32((const void*)&para->key[i*4]);
    }
}

static int32 hg_sysaes_v3_hdl(struct sysaes_dev *dev, struct sysaes_para *para, uint32 flags)
{
180097c4:	14d8      	push      	r4-r11, r15
    uint32 aes_key_len = 0;
    uint32 aes_mode = 0;
    struct hg_sysaes_v3 *sysaes = (struct hg_sysaes_v3 *)dev;
    struct hg_sysaes_v3_hw *hw = (struct hg_sysaes_v3_hw *)sysaes->hw;

    if ((para->key_len > AES_KEY_LEN_BIT_256)) {
180097c6:	8161      	ld.b      	r3, (r1, 0x1)
180097c8:	3b02      	cmphsi      	r3, 3
{
180097ca:	6dc3      	mov      	r7, r0
180097cc:	6e47      	mov      	r9, r1
180097ce:	6d8b      	mov      	r6, r2
    struct hg_sysaes_v3_hw *hw = (struct hg_sysaes_v3_hw *)sysaes->hw;
180097d0:	d9002003 	ld.w      	r8, (r0, 0xc)
    if ((para->key_len > AES_KEY_LEN_BIT_256)) {
180097d4:	0812      	bt      	0x180097f8	// 180097f8 <hg_sysaes_v3_hdl+0x34>
        return RET_ERR;
    }
    ret = os_mutex_lock(&sysaes->lock, 10);
180097d6:	e4a0000f 	addi      	r5, r0, 16
180097da:	310a      	movi      	r1, 10
180097dc:	6c17      	mov      	r0, r5
180097de:	e0005617 	bsr      	0x1801440c	// 1801440c <os_mutex_lock>
180097e2:	6e83      	mov      	r10, r0
    if (ret) {
180097e4:	e9000011 	bez      	r0, 0x18009806	// 18009806 <hg_sysaes_v3_hdl+0x42>
        if (flags == ENCRYPT) {
180097e8:	e926000d 	bnez      	r6, 0x18009802	// 18009802 <hg_sysaes_v3_hdl+0x3e>
            SYS_AES_ERR_PRINTF("sysaes encrypt lock timeout!\r\n");
180097ec:	021a      	lrw      	r0, 0x18016d18	// 18009a80 <hg_sysaes_v3_hdl+0x2bc>
    ret = os_sema_down(&sysaes->done, 10);
    if (!ret) {
        if (flags == ENCRYPT) {
            SYS_AES_ERR_PRINTF("sysaes encrypt wait irq timeout!\r\n");
        } else {
            SYS_AES_ERR_PRINTF("sysaes decrypt wait irq timeout!\r\n");
180097ee:	e000196b 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
        }
        os_mutex_unlock(&sysaes->lock);
180097f2:	6c17      	mov      	r0, r5
180097f4:	e0005626 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
        return RET_ERR;
180097f8:	ea0a0000 	movi      	r10, 0
180097fc:	e54a1000 	subi      	r10, r10, 1
18009800:	053e      	br      	0x18009a7c	// 18009a7c <hg_sysaes_v3_hdl+0x2b8>
            SYS_AES_ERR_PRINTF("sysaes decrypt lock timeout!\r\n");
18009802:	021e      	lrw      	r0, 0x18016d38	// 18009a84 <hg_sysaes_v3_hdl+0x2c0>
18009804:	07f5      	br      	0x180097ee	// 180097ee <hg_sysaes_v3_hdl+0x2a>
        hw->AES_CTRL &= ~AES_CTRL_EOD_MSK;
18009806:	d8682010 	ld.w      	r3, (r8, 0x40)
    if (flags == ENCRYPT) {
1800980a:	e92600f5 	bnez      	r6, 0x180099f4	// 180099f4 <hg_sysaes_v3_hdl+0x230>
        hw->AES_CTRL &= ~AES_CTRL_EOD_MSK;
1800980e:	3b81      	bclri      	r3, 1
        hw->AES_CTRL |= AES_CTRL_EOD_MSK;
18009810:	dc682010 	st.w      	r3, (r8, 0x40)
    switch (para->mode) {
18009814:	d8690000 	ld.b      	r3, (r9, 0x0)
18009818:	3b41      	cmpnei      	r3, 1
1800981a:	0cf0      	bf      	0x180099fa	// 180099fa <hg_sysaes_v3_hdl+0x236>
    uint32 aes_mode = 0;
1800981c:	3b42      	cmpnei      	r3, 2
1800981e:	64c3      	mvcv      	r3
18009820:	4367      	lsli      	r3, r3, 7
    hw->AES_CTRL = (hw->AES_CTRL & ~ AES_CTRL_AES_MODE_MSK) | (aes_mode & AES_CTRL_AES_MODE_MSK);
18009822:	d8482010 	ld.w      	r2, (r8, 0x40)
18009826:	3a86      	bclri      	r2, 6
18009828:	3a87      	bclri      	r2, 7
1800982a:	e46320c0 	andi      	r3, r3, 192
1800982e:	6cc8      	or      	r3, r2
18009830:	dc682010 	st.w      	r3, (r8, 0x40)
    switch (para->key_len) {
18009834:	d8690001 	ld.b      	r3, (r9, 0x1)
18009838:	3b41      	cmpnei      	r3, 1
1800983a:	0ce2      	bf      	0x180099fe	// 180099fe <hg_sysaes_v3_hdl+0x23a>
    uint32 aes_key_len = 0;
1800983c:	3b42      	cmpnei      	r3, 2
1800983e:	6483      	mvcv      	r2
18009840:	4245      	lsli      	r2, r2, 5
    hw->AES_CTRL = (hw->AES_CTRL & ~ AES_CTRL_AES_KEYLEN_MSK) | 
18009842:	d8682010 	ld.w      	r3, (r8, 0x40)
18009846:	3b84      	bclri      	r3, 4
18009848:	3b85      	bclri      	r3, 5
                   (aes_key_len & AES_CTRL_AES_KEYLEN_MSK)    | 
1800984a:	e4422030 	andi      	r2, r2, 48
1800984e:	ec630008 	ori      	r3, r3, 8
18009852:	6cc8      	or      	r3, r2
    hw->AES_CTRL = (hw->AES_CTRL & ~ AES_CTRL_AES_KEYLEN_MSK) | 
18009854:	dc682010 	st.w      	r3, (r8, 0x40)
    if (((uint32)addr >= PSRAM_BASE) && 
18009858:	33c8      	movi      	r3, 200
1800985a:	4378      	lsli      	r3, r3, 24
    sys_dcache_clean_range((uint32 *)para->src, para->aes_len);
1800985c:	d8892001 	ld.w      	r4, (r9, 0x4)
18009860:	5c4c      	addu      	r2, r4, r3
18009862:	c6e05023 	bmaski      	r3, 24
18009866:	648c      	cmphs      	r3, r2
18009868:	0c30      	bf      	0x180098c8	// 180098c8 <hg_sysaes_v3_hdl+0x104>
    return (CACHE->CER & CACHE_CER_EN_Msk);  
1800986a:	0377      	lrw      	r3, 0xe000f000	// 18009a88 <hg_sysaes_v3_hdl+0x2c4>
1800986c:	9360      	ld.w      	r3, (r3, 0x0)
1800986e:	e4632001 	andi      	r3, r3, 1
        ((uint32)addr < PSRAM_END_ADDR) && 
18009872:	e903002b 	bez      	r3, 0x180098c8	// 180098c8 <hg_sysaes_v3_hdl+0x104>
        ASSERT(!(((uint32)addr) & (BIT(CACHE_CIR_INV_ADDR_Pos)-1)));
18009876:	e464200f 	andi      	r3, r4, 15
1800987a:	d9692003 	ld.w      	r11, (r9, 0xc)
1800987e:	e9030008 	bez      	r3, 0x1800988e	// 1800988e <hg_sysaes_v3_hdl+0xca>
18009882:	3188      	movi      	r1, 136
18009884:	035d      	lrw      	r2, 0x1801659a	// 18009a8c <hg_sysaes_v3_hdl+0x2c8>
18009886:	4121      	lsli      	r1, r1, 1
18009888:	031d      	lrw      	r0, 0x18016cf8	// 18009a90 <hg_sysaes_v3_hdl+0x2cc>
1800988a:	e3ffcbc5 	bsr      	0x18003014	// 18003014 <assert_internal>
    int32_t op_size = dsize + (int32_t)addr % 16;
1800988e:	c7c05023 	bmaski      	r3, 31
18009892:	230f      	addi      	r3, 16
18009894:	c4642022 	and      	r2, r4, r3
18009898:	e9a20007 	bhsz      	r2, 0x180098a6	// 180098a6 <hg_sysaes_v3_hdl+0xe2>
1800989c:	3300      	movi      	r3, 0
1800989e:	2a00      	subi      	r2, 1
180098a0:	2b0f      	subi      	r3, 16
180098a2:	6c8c      	or      	r2, r3
180098a4:	2200      	addi      	r2, 1
    uint32_t op_addr = (uint32_t)addr & CACHE_CIR_INV_ADDR_Msk;
180098a6:	3300      	movi      	r3, 0
180098a8:	2b0f      	subi      	r3, 16
180098aa:	68d0      	and      	r3, r4
    int32_t op_size = dsize + (int32_t)addr % 16;
180098ac:	60ac      	addu      	r2, r11
    op_addr |= _VAL2FLD(CACHE_CIR_CLR_ONE, 1);
180098ae:	ec630008 	ori      	r3, r3, 8
        CACHE->CIR = op_addr;
180098b2:	1336      	lrw      	r1, 0xe000f000	// 18009a88 <hg_sysaes_v3_hdl+0x2c4>
    while (op_size >= 128) {
180098b4:	eb22007f 	cmplti      	r2, 128
180098b8:	0ca5      	bf      	0x18009a02	// 18009a02 <hg_sysaes_v3_hdl+0x23e>
180098ba:	60c8      	addu      	r3, r2
        CACHE->CIR = op_addr;
180098bc:	1313      	lrw      	r0, 0xe000f000	// 18009a88 <hg_sysaes_v3_hdl+0x2c4>
180098be:	5b29      	subu      	r1, r3, r2
    while (op_size > 0) {
180098c0:	e94200ba 	bhz      	r2, 0x18009a34	// 18009a34 <hg_sysaes_v3_hdl+0x270>
180098c4:	c0000420 	sync
    if (((uint32)addr >= PSRAM_BASE) && 
180098c8:	33c8      	movi      	r3, 200
180098ca:	4378      	lsli      	r3, r3, 24
    sys_dcache_clean_invalid_range((uint32 *)para->dest, para->aes_len);
180098cc:	d8892002 	ld.w      	r4, (r9, 0x8)
180098d0:	5c4c      	addu      	r2, r4, r3
180098d2:	c6e05023 	bmaski      	r3, 24
180098d6:	648c      	cmphs      	r3, r2
180098d8:	0c38      	bf      	0x18009948	// 18009948 <hg_sysaes_v3_hdl+0x184>
    return (CACHE->CER & CACHE_CER_EN_Msk);  
180098da:	136c      	lrw      	r3, 0xe000f000	// 18009a88 <hg_sysaes_v3_hdl+0x2c4>
180098dc:	9360      	ld.w      	r3, (r3, 0x0)
180098de:	e4632001 	andi      	r3, r3, 1
        ((uint32)addr < PSRAM_END_ADDR) && 
180098e2:	e9030033 	bez      	r3, 0x18009948	// 18009948 <hg_sysaes_v3_hdl+0x184>
        if ((uint32_t)addr & 0xF) {
180098e6:	e464200f 	andi      	r3, r4, 15
180098ea:	d9692003 	ld.w      	r11, (r9, 0xc)
180098ee:	e9030005 	bez      	r3, 0x180098f8	// 180098f8 <hg_sysaes_v3_hdl+0x134>
            csi_dcache_clean_invalid_range(addr, 16);
180098f2:	6c13      	mov      	r0, r4
180098f4:	e3ffff4e 	bsr      	0x18009790	// 18009790 <csi_dcache_clean_invalid_range.constprop.1>
        if (((uint32_t)addr+dsize) & 0xF) {
180098f8:	c5640023 	addu      	r3, r4, r11
180098fc:	e463200f 	andi      	r3, r3, 15
18009900:	e9030007 	bez      	r3, 0x1800990e	// 1800990e <hg_sysaes_v3_hdl+0x14a>
            csi_dcache_clean_invalid_range((addr+dsize), 16);
18009904:	c44b4820 	lsli      	r0, r11, 2
18009908:	6010      	addu      	r0, r4
1800990a:	e3ffff43 	bsr      	0x18009790	// 18009790 <csi_dcache_clean_invalid_range.constprop.1>
    int32_t op_size = dsize + (int32_t)addr % 16;
1800990e:	c7c05023 	bmaski      	r3, 31
18009912:	230f      	addi      	r3, 16
18009914:	68d0      	and      	r3, r4
18009916:	e9a30007 	bhsz      	r3, 0x18009924	// 18009924 <hg_sysaes_v3_hdl+0x160>
1800991a:	3200      	movi      	r2, 0
1800991c:	2b00      	subi      	r3, 1
1800991e:	2a0f      	subi      	r2, 16
18009920:	6cc8      	or      	r3, r2
18009922:	2300      	addi      	r3, 1
    uint32_t op_addr = (uint32_t)addr & CACHE_CIR_INV_ADDR_Msk;
18009924:	3200      	movi      	r2, 0
18009926:	2a0f      	subi      	r2, 16
18009928:	c4442020 	and      	r0, r4, r2
    int32_t op_size = dsize + (int32_t)addr % 16;
1800992c:	60ec      	addu      	r3, r11
    op_addr |= _VAL2FLD(CACHE_CIR_INV_ONE, 1);
1800992e:	ec000002 	ori      	r0, r0, 2
        CACHE->CIR = op_addr;
18009932:	1256      	lrw      	r2, 0xe000f000	// 18009a88 <hg_sysaes_v3_hdl+0x2c4>
    while (op_size >= 128) {
18009934:	eb23007f 	cmplti      	r3, 128
18009938:	0c81      	bf      	0x18009a3a	// 18009a3a <hg_sysaes_v3_hdl+0x276>
1800993a:	600c      	addu      	r0, r3
        CACHE->CIR = op_addr;
1800993c:	1233      	lrw      	r1, 0xe000f000	// 18009a88 <hg_sysaes_v3_hdl+0x2c4>
1800993e:	584d      	subu      	r2, r0, r3
    while (op_size > 0) {
18009940:	e9430096 	bhz      	r3, 0x18009a6c	// 18009a6c <hg_sysaes_v3_hdl+0x2a8>
18009944:	c0000420 	sync
    hw->SADDR = (uint32)para->src;
18009948:	d8692001 	ld.w      	r3, (r9, 0x4)
1800994c:	dc682008 	st.w      	r3, (r8, 0x20)
    hw->DADDR = (uint32)para->dest;
18009950:	d8692002 	ld.w      	r3, (r9, 0x8)
18009954:	dc682009 	st.w      	r3, (r8, 0x24)
    hw->BLOCK_NUM = para->aes_len;
18009958:	d8692003 	ld.w      	r3, (r9, 0xc)
1800995c:	dc68200a 	st.w      	r3, (r8, 0x28)
    hw->AES_CTRL &= ~AES_CTRL_MOD_MSK;
18009960:	d8682010 	ld.w      	r3, (r8, 0x40)
18009964:	3b82      	bclri      	r3, 2
18009966:	dc682010 	st.w      	r3, (r8, 0x40)
        hw->KEY[i] = get_unaligned_le32((const void*)&para->key[i*4]);
1800996a:	3000      	movi      	r0, 0
1800996c:	d8692004 	ld.w      	r3, (r9, 0x10)
18009970:	8321      	ld.b      	r1, (r3, 0x1)
18009972:	8340      	ld.b      	r2, (r3, 0x0)
18009974:	4128      	lsli      	r1, r1, 8
18009976:	6c48      	or      	r1, r2
18009978:	8342      	ld.b      	r2, (r3, 0x2)
1800997a:	4250      	lsli      	r2, r2, 16
1800997c:	6c48      	or      	r1, r2
1800997e:	8343      	ld.b      	r2, (r3, 0x3)
18009980:	4258      	lsli      	r2, r2, 24
18009982:	6c84      	or      	r2, r1
18009984:	d4080882 	str.w      	r2, (r8, r0 << 2)
18009988:	2000      	addi      	r0, 1
    for (uint8 i = 0; i < 8; ++i) {
1800998a:	3848      	cmpnei      	r0, 8
1800998c:	2303      	addi      	r3, 4
1800998e:	0bf1      	bt      	0x18009970	// 18009970 <hg_sysaes_v3_hdl+0x1ac>
18009990:	d8692005 	ld.w      	r3, (r9, 0x14)
        hw->IV[i] = get_unaligned_le32((const void*)&para->iv[i*4]);
18009994:	3000      	movi      	r0, 0
18009996:	8321      	ld.b      	r1, (r3, 0x1)
18009998:	8340      	ld.b      	r2, (r3, 0x0)
1800999a:	4128      	lsli      	r1, r1, 8
1800999c:	6c48      	or      	r1, r2
1800999e:	8342      	ld.b      	r2, (r3, 0x2)
180099a0:	4250      	lsli      	r2, r2, 16
180099a2:	6c48      	or      	r1, r2
180099a4:	8343      	ld.b      	r2, (r3, 0x3)
180099a6:	4258      	lsli      	r2, r2, 24
180099a8:	6c84      	or      	r2, r1
180099aa:	e420000b 	addi      	r1, r0, 12
180099ae:	2000      	addi      	r0, 1
    for (uint8 i = 0; i < 4; ++i) {
180099b0:	3844      	cmpnei      	r0, 4
        hw->IV[i] = get_unaligned_le32((const void*)&para->iv[i*4]);
180099b2:	d4280882 	str.w      	r2, (r8, r1 << 2)
180099b6:	2303      	addi      	r3, 4
    for (uint8 i = 0; i < 4; ++i) {
180099b8:	0bef      	bt      	0x18009996	// 18009996 <hg_sysaes_v3_hdl+0x1d2>
    hw->AES_STAT = AES_STAT_COMP_PD_MSK;
180099ba:	3301      	movi      	r3, 1
180099bc:	3280      	movi      	r2, 128
180099be:	dc682011 	st.w      	r3, (r8, 0x44)
180099c2:	ea012000 	movi      	r1, 8192
180099c6:	39be      	bseti      	r1, 30
180099c8:	424b      	lsli      	r2, r2, 11
180099ca:	916b      	ld.w      	r3, (r1, 0x2c)
180099cc:	68c8      	and      	r3, r2
    while(ll_sysctrl_dma2ahb_is_busy(DMA2AHB_BURST_CH_SYSAES_WR));
180099ce:	e923fffe 	bnez      	r3, 0x180099ca	// 180099ca <hg_sysaes_v3_hdl+0x206>
    hw->AES_CTRL |= AES_CTRL_START_MSK;
180099d2:	d8682010 	ld.w      	r3, (r8, 0x40)
180099d6:	ec630001 	ori      	r3, r3, 1
180099da:	dc682010 	st.w      	r3, (r8, 0x40)
    ret = os_sema_down(&sysaes->done, 10);
180099de:	310a      	movi      	r1, 10
180099e0:	e4070017 	addi      	r0, r7, 24
180099e4:	e000558a 	bsr      	0x180144f8	// 180144f8 <os_sema_down>
    if (!ret) {
180099e8:	e9200047 	bnez      	r0, 0x18009a76	// 18009a76 <hg_sysaes_v3_hdl+0x2b2>
        if (flags == ENCRYPT) {
180099ec:	e9260043 	bnez      	r6, 0x18009a72	// 18009a72 <hg_sysaes_v3_hdl+0x2ae>
            SYS_AES_ERR_PRINTF("sysaes encrypt wait irq timeout!\r\n");
180099f0:	1109      	lrw      	r0, 0x18016d58	// 18009a94 <hg_sysaes_v3_hdl+0x2d0>
180099f2:	06fe      	br      	0x180097ee	// 180097ee <hg_sysaes_v3_hdl+0x2a>
        hw->AES_CTRL |= AES_CTRL_EOD_MSK;
180099f4:	ec630002 	ori      	r3, r3, 2
180099f8:	070c      	br      	0x18009810	// 18009810 <hg_sysaes_v3_hdl+0x4c>
            aes_mode = AES_CTRL_AES_CBC;
180099fa:	3340      	movi      	r3, 64
180099fc:	0713      	br      	0x18009822	// 18009822 <hg_sysaes_v3_hdl+0x5e>
            aes_key_len = AES_CTRL_AES_192;
180099fe:	3210      	movi      	r2, 16
18009a00:	0721      	br      	0x18009842	// 18009842 <hg_sysaes_v3_hdl+0x7e>
        op_addr += linesize;
18009a02:	e403000f 	addi      	r0, r3, 16
        CACHE->CIR = op_addr;
18009a06:	b161      	st.w      	r3, (r1, 0x4)
        CACHE->CIR = op_addr;
18009a08:	b101      	st.w      	r0, (r1, 0x4)
        op_addr += linesize;
18009a0a:	e403001f 	addi      	r0, r3, 32
        CACHE->CIR = op_addr;
18009a0e:	b101      	st.w      	r0, (r1, 0x4)
        op_addr += linesize;
18009a10:	e403002f 	addi      	r0, r3, 48
        CACHE->CIR = op_addr;
18009a14:	b101      	st.w      	r0, (r1, 0x4)
        op_addr += linesize;
18009a16:	e403003f 	addi      	r0, r3, 64
        CACHE->CIR = op_addr;
18009a1a:	b101      	st.w      	r0, (r1, 0x4)
        op_addr += linesize;
18009a1c:	e403004f 	addi      	r0, r3, 80
        CACHE->CIR = op_addr;
18009a20:	b101      	st.w      	r0, (r1, 0x4)
        op_addr += linesize;
18009a22:	e403005f 	addi      	r0, r3, 96
        CACHE->CIR = op_addr;
18009a26:	b101      	st.w      	r0, (r1, 0x4)
        op_addr += linesize;
18009a28:	e403006f 	addi      	r0, r3, 112
        CACHE->CIR = op_addr;
18009a2c:	b101      	st.w      	r0, (r1, 0x4)
        op_addr += linesize;
18009a2e:	237f      	addi      	r3, 128
        op_size -= 128;
18009a30:	2a7f      	subi      	r2, 128
18009a32:	0741      	br      	0x180098b4	// 180098b4 <hg_sysaes_v3_hdl+0xf0>
        CACHE->CIR = op_addr;
18009a34:	b021      	st.w      	r1, (r0, 0x4)
        op_size -= linesize;
18009a36:	2a0f      	subi      	r2, 16
18009a38:	0743      	br      	0x180098be	// 180098be <hg_sysaes_v3_hdl+0xfa>
        op_addr += linesize;
18009a3a:	e420000f 	addi      	r1, r0, 16
        CACHE->CIR = op_addr;
18009a3e:	b201      	st.w      	r0, (r2, 0x4)
        CACHE->CIR = op_addr;
18009a40:	b221      	st.w      	r1, (r2, 0x4)
        op_addr += linesize;
18009a42:	e420001f 	addi      	r1, r0, 32
        CACHE->CIR = op_addr;
18009a46:	b221      	st.w      	r1, (r2, 0x4)
        op_addr += linesize;
18009a48:	e420002f 	addi      	r1, r0, 48
        CACHE->CIR = op_addr;
18009a4c:	b221      	st.w      	r1, (r2, 0x4)
        op_addr += linesize;
18009a4e:	e420003f 	addi      	r1, r0, 64
        CACHE->CIR = op_addr;
18009a52:	b221      	st.w      	r1, (r2, 0x4)
        op_addr += linesize;
18009a54:	e420004f 	addi      	r1, r0, 80
        CACHE->CIR = op_addr;
18009a58:	b221      	st.w      	r1, (r2, 0x4)
        op_addr += linesize;
18009a5a:	e420005f 	addi      	r1, r0, 96
        CACHE->CIR = op_addr;
18009a5e:	b221      	st.w      	r1, (r2, 0x4)
        op_addr += linesize;
18009a60:	e420006f 	addi      	r1, r0, 112
        CACHE->CIR = op_addr;
18009a64:	b221      	st.w      	r1, (r2, 0x4)
        op_addr += linesize;
18009a66:	207f      	addi      	r0, 128
        op_size -= 128;
18009a68:	2b7f      	subi      	r3, 128
18009a6a:	0765      	br      	0x18009934	// 18009934 <hg_sysaes_v3_hdl+0x170>
        CACHE->CIR = op_addr;
18009a6c:	b141      	st.w      	r2, (r1, 0x4)
        op_size -= linesize;
18009a6e:	2b0f      	subi      	r3, 16
18009a70:	0767      	br      	0x1800993e	// 1800993e <hg_sysaes_v3_hdl+0x17a>
            SYS_AES_ERR_PRINTF("sysaes decrypt wait irq timeout!\r\n");
18009a72:	100a      	lrw      	r0, 0x18016d7c	// 18009a98 <hg_sysaes_v3_hdl+0x2d4>
18009a74:	06bd      	br      	0x180097ee	// 180097ee <hg_sysaes_v3_hdl+0x2a>
        return RET_ERR;
    }
    os_mutex_unlock(&sysaes->lock);
18009a76:	6c17      	mov      	r0, r5
18009a78:	e00054e4 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
    return RET_OK;
}
18009a7c:	6c2b      	mov      	r0, r10
18009a7e:	1498      	pop      	r4-r11, r15
18009a80:	18016d18 	.long	0x18016d18
18009a84:	18016d38 	.long	0x18016d38
18009a88:	e000f000 	.long	0xe000f000
18009a8c:	1801659a 	.long	0x1801659a
18009a90:	18016cf8 	.long	0x18016cf8
18009a94:	18016d58 	.long	0x18016d58
18009a98:	18016d7c 	.long	0x18016d7c

18009a9c <hg_sysaes_v3_decrypt>:
    //hg_sysaes_v3_fill_key(dev, para);
    return hg_sysaes_v3_hdl(dev, para, ENCRYPT);
}

static int32 hg_sysaes_v3_decrypt(struct sysaes_dev *dev, struct sysaes_para *para)
{
18009a9c:	14d0      	push      	r15
    if (para->mode > AES_MODE_CTR) {
18009a9e:	8160      	ld.b      	r3, (r1, 0x0)
18009aa0:	3b02      	cmphsi      	r3, 3
18009aa2:	0809      	bt      	0x18009ab4	// 18009ab4 <hg_sysaes_v3_decrypt+0x18>
        return RET_ERR;
    }
    //hg_sysaes_v3_fill_key(dev, para);
    if (para->mode == AES_MODE_CTR) {
18009aa4:	3b42      	cmpnei      	r3, 2
18009aa6:	0805      	bt      	0x18009ab0	// 18009ab0 <hg_sysaes_v3_decrypt+0x14>
        return hg_sysaes_v3_hdl(dev, para, ENCRYPT);
18009aa8:	3200      	movi      	r2, 0
    } else {
        return hg_sysaes_v3_hdl(dev, para, DECRYPT);
18009aaa:	e3fffe8d 	bsr      	0x180097c4	// 180097c4 <hg_sysaes_v3_hdl>
    }
}
18009aae:	1490      	pop      	r15
        return hg_sysaes_v3_hdl(dev, para, DECRYPT);
18009ab0:	3201      	movi      	r2, 1
18009ab2:	07fc      	br      	0x18009aaa	// 18009aaa <hg_sysaes_v3_decrypt+0xe>
        return RET_ERR;
18009ab4:	3000      	movi      	r0, 0
18009ab6:	2800      	subi      	r0, 1
18009ab8:	07fb      	br      	0x18009aae	// 18009aae <hg_sysaes_v3_decrypt+0x12>
	...

18009abc <hg_sysaes_v3_encrypt>:
{
18009abc:	14d0      	push      	r15
    if (para->mode > AES_MODE_CTR) {
18009abe:	8160      	ld.b      	r3, (r1, 0x0)
18009ac0:	3b02      	cmphsi      	r3, 3
18009ac2:	0805      	bt      	0x18009acc	// 18009acc <hg_sysaes_v3_encrypt+0x10>
    return hg_sysaes_v3_hdl(dev, para, ENCRYPT);
18009ac4:	3200      	movi      	r2, 0
18009ac6:	e3fffe7f 	bsr      	0x180097c4	// 180097c4 <hg_sysaes_v3_hdl>
}
18009aca:	1490      	pop      	r15
        return RET_ERR;
18009acc:	3000      	movi      	r0, 0
18009ace:	2800      	subi      	r0, 1
18009ad0:	07fd      	br      	0x18009aca	// 18009aca <hg_sysaes_v3_encrypt+0xe>
	...

18009ad4 <hg_sysaes_v3_attach>:
    .ops.resume  = hg_sysaes_v3_resume,
#endif
};

__init int32 hg_sysaes_v3_attach(uint32 dev_id, struct hg_sysaes_v3 *sysaes)
{
18009ad4:	14d2      	push      	r4-r5, r15
    sysaes->dev.dev.ops = (const struct devobj_ops *)&aes_v3_ops;
18009ad6:	107a      	lrw      	r3, 0x18016d10	// 18009b3c <hg_sysaes_v3_attach+0x68>
{
18009ad8:	6d07      	mov      	r4, r1
    sysaes->dev.dev.ops = (const struct devobj_ops *)&aes_v3_ops;
18009ada:	b162      	st.w      	r3, (r1, 0x8)
{
18009adc:	6d43      	mov      	r5, r0
    os_mutex_init(&sysaes->lock);
18009ade:	e401000f 	addi      	r0, r1, 16
18009ae2:	e0005473 	bsr      	0x180143c8	// 180143c8 <os_mutex_init>
    os_sema_init(&sysaes->done, 0);
18009ae6:	3100      	movi      	r1, 0
18009ae8:	e4040017 	addi      	r0, r4, 24
18009aec:	e00054d6 	bsr      	0x18014498	// 18014498 <os_sema_init>
    sysctrl_sysaes_clk_open();
18009af0:	ea234002 	movih      	r3, 16386
18009af4:	9353      	ld.w      	r2, (r3, 0x4c)
18009af6:	ec428000 	ori      	r2, r2, 32768
18009afa:	b353      	st.w      	r2, (r3, 0x4c)
    sysctrl_sysaes_reset();
18009afc:	9342      	ld.w      	r2, (r3, 0x8)
18009afe:	3a8f      	bclri      	r2, 15
18009b00:	b342      	st.w      	r2, (r3, 0x8)
    __ASM volatile("nop");
18009b02:	6c03      	mov      	r0, r0
18009b04:	6c03      	mov      	r0, r0
18009b06:	6c03      	mov      	r0, r0
18009b08:	9342      	ld.w      	r2, (r3, 0x8)
18009b0a:	ec428000 	ori      	r2, r2, 32768
18009b0e:	b342      	st.w      	r2, (r3, 0x8)
    request_irq(sysaes->irq_num, hg_sysaes_v3_irq_handler, sysaes);
18009b10:	9408      	ld.w      	r0, (r4, 0x20)
18009b12:	6c93      	mov      	r2, r4
18009b14:	102b      	lrw      	r1, 0x18009780	// 18009b40 <hg_sysaes_v3_attach+0x6c>
18009b16:	e3ffcde3 	bsr      	0x180036dc	// 180036dc <request_irq>
    IRQn &= 0x7FUL;
18009b1a:	9468      	ld.w      	r3, (r4, 0x20)
    VIC->ISER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
18009b1c:	c4a354c1 	zext      	r1, r3, 6, 5
18009b20:	3201      	movi      	r2, 1
18009b22:	e463201f 	andi      	r3, r3, 31
18009b26:	c4624023 	lsl      	r3, r2, r3
18009b2a:	1047      	lrw      	r2, 0xe000e100	// 18009b44 <hg_sysaes_v3_attach+0x70>
18009b2c:	d4220883 	str.w      	r3, (r2, r1 << 2)
    irq_enable(sysaes->irq_num);
    dev_register(dev_id, (struct dev_obj *)sysaes);
18009b30:	6c17      	mov      	r0, r5
18009b32:	6c53      	mov      	r1, r4
18009b34:	e3ffcab8 	bsr      	0x180030a4	// 180030a4 <dev_register>
    return RET_OK;
}
18009b38:	3000      	movi      	r0, 0
18009b3a:	1492      	pop      	r4-r5, r15
18009b3c:	18016d10 	.long	0x18016d10
18009b40:	18009780 	.long	0x18009780
18009b44:	e000e100 	.long	0xe000e100

18009b48 <hgpdm_v0_read>:
}

static int32 hgpdm_v0_read(struct pdm_device *pdm, void* buf, uint32 len) {

    struct hgpdm_v0 *dev = (struct hgpdm_v0 *)pdm;
    struct hgpdm_v0_hw *hw = (struct hgpdm_v0_hw *)dev->hw;
18009b48:	9063      	ld.w      	r3, (r0, 0xc)

    if ((!dev->opened) || (dev->dsleep)) {
18009b4a:	801a      	ld.b      	r0, (r0, 0x1a)
18009b4c:	e4002003 	andi      	r0, r0, 3
18009b50:	3841      	cmpnei      	r0, 1
18009b52:	080d      	bt      	0x18009b6c	// 18009b6c <hgpdm_v0_read+0x24>
        return RET_ERR;
    }
    
    if(!buf || len == 0)
18009b54:	e901000c 	bez      	r1, 0x18009b6c	// 18009b6c <hgpdm_v0_read+0x24>
18009b58:	e902000a 	bez      	r2, 0x18009b6c	// 18009b6c <hgpdm_v0_read+0x24>
    {
        return RET_ERR;
    }
    
    hw->DMASTADR = (uint32)buf;
18009b5c:	b322      	st.w      	r1, (r3, 0x8)
    hw->DMALEN   = len;
18009b5e:	b344      	st.w      	r2, (r3, 0x10)
    p_pdm->CON |= LL_PDM_CON_ENABLE(1);
18009b60:	9340      	ld.w      	r2, (r3, 0x0)
18009b62:	ec420001 	ori      	r2, r2, 1
18009b66:	b340      	st.w      	r2, (r3, 0x0)

    hgpdm_v0_enable(hw);

    return RET_OK;
18009b68:	3000      	movi      	r0, 0
}
18009b6a:	783c      	jmp      	r15
        return RET_ERR;
18009b6c:	3000      	movi      	r0, 0
18009b6e:	2800      	subi      	r0, 1
18009b70:	07fd      	br      	0x18009b6a	// 18009b6a <hgpdm_v0_read+0x22>
	...

18009b74 <hgpdm_v0_irq_handler>:

    return RET_OK;
}
#endif

static void hgpdm_v0_irq_handler(void *data) {
18009b74:	14d2      	push      	r4-r5, r15

    struct hgpdm_v0 *dev = (struct hgpdm_v0 *)data;
    struct hgpdm_v0_hw *hw = (struct hgpdm_v0_hw *)dev->hw;
18009b76:	9083      	ld.w      	r4, (r0, 0xc)
static void hgpdm_v0_irq_handler(void *data) {
18009b78:	6d43      	mov      	r5, r0

    if ((hw->DMACON & LL_PDM_DMACON_HF_IE_EN(1)) && 
18009b7a:	9461      	ld.w      	r3, (r4, 0x4)
18009b7c:	e4632001 	andi      	r3, r3, 1
18009b80:	e9030011 	bez      	r3, 0x18009ba2	// 18009ba2 <hgpdm_v0_irq_handler+0x2e>
        (hw->STA     & LL_PDM_STA_HF_PENDING(1))) {
18009b84:	9466      	ld.w      	r3, (r4, 0x18)
18009b86:	e4632001 	andi      	r3, r3, 1
    if ((hw->DMACON & LL_PDM_DMACON_HF_IE_EN(1)) && 
18009b8a:	e903000c 	bez      	r3, 0x18009ba2	// 18009ba2 <hgpdm_v0_irq_handler+0x2e>
        hw->STA |= LL_PDM_STA_HF_PENDING(1);
18009b8e:	9466      	ld.w      	r3, (r4, 0x18)
18009b90:	ec630001 	ori      	r3, r3, 1
18009b94:	b466      	st.w      	r3, (r4, 0x18)

        if (dev->irq_hdl) {
18009b96:	9064      	ld.w      	r3, (r0, 0x10)
18009b98:	e9030005 	bez      	r3, 0x18009ba2	// 18009ba2 <hgpdm_v0_irq_handler+0x2e>
            dev->irq_hdl(PDM_IRQ_FLAG_DMA_HF, dev->irq_data);
18009b9c:	9025      	ld.w      	r1, (r0, 0x14)
18009b9e:	3001      	movi      	r0, 1
18009ba0:	7bcd      	jsr      	r3
        }
    }

    if ((hw->DMACON & LL_PDM_DMACON_OV_IE_EN(1)) && 
18009ba2:	9461      	ld.w      	r3, (r4, 0x4)
18009ba4:	e4632002 	andi      	r3, r3, 2
18009ba8:	e9030011 	bez      	r3, 0x18009bca	// 18009bca <hgpdm_v0_irq_handler+0x56>
        (hw->STA     & LL_PDM_STA_OV_PENDING(1))) {
18009bac:	9466      	ld.w      	r3, (r4, 0x18)
18009bae:	e4632002 	andi      	r3, r3, 2
    if ((hw->DMACON & LL_PDM_DMACON_OV_IE_EN(1)) && 
18009bb2:	e903000c 	bez      	r3, 0x18009bca	// 18009bca <hgpdm_v0_irq_handler+0x56>
        hw->STA |= LL_PDM_STA_OV_PENDING(1);
18009bb6:	9466      	ld.w      	r3, (r4, 0x18)
18009bb8:	ec630002 	ori      	r3, r3, 2
18009bbc:	b466      	st.w      	r3, (r4, 0x18)
    
        if (dev->irq_hdl) {
18009bbe:	9564      	ld.w      	r3, (r5, 0x10)
18009bc0:	e9030005 	bez      	r3, 0x18009bca	// 18009bca <hgpdm_v0_irq_handler+0x56>
            dev->irq_hdl(PDM_IRQ_FLAG_DMA_OV, dev->irq_data);
18009bc4:	9525      	ld.w      	r1, (r5, 0x14)
18009bc6:	3002      	movi      	r0, 2
18009bc8:	7bcd      	jsr      	r3
        }
    }
}
18009bca:	1492      	pop      	r4-r5, r15

18009bcc <hgpdm_v0_release_irq>:
static int32 hgpdm_v0_release_irq(struct pdm_device *pdm, enum pdm_irq_flag irq_flag) {

    struct hgpdm_v0 *dev = (struct hgpdm_v0 *)pdm;
    struct hgpdm_v0_hw *hw = (struct hgpdm_v0_hw *)dev->hw;

    if ((!dev->opened) || (dev->dsleep)) {
18009bcc:	805a      	ld.b      	r2, (r0, 0x1a)
18009bce:	e4422003 	andi      	r2, r2, 3
18009bd2:	3a41      	cmpnei      	r2, 1
    struct hgpdm_v0_hw *hw = (struct hgpdm_v0_hw *)dev->hw;
18009bd4:	9063      	ld.w      	r3, (r0, 0xc)
    if ((!dev->opened) || (dev->dsleep)) {
18009bd6:	0811      	bt      	0x18009bf8	// 18009bf8 <hgpdm_v0_release_irq+0x2c>
        return RET_ERR;
    }

    if (irq_flag & PDM_IRQ_FLAG_DMA_HF) {
18009bd8:	e4412001 	andi      	r2, r1, 1
18009bdc:	e9020005 	bez      	r2, 0x18009be6	// 18009be6 <hgpdm_v0_release_irq+0x1a>
        hw->DMACON &= ~ LL_PDM_DMACON_HF_IE_EN(1);
18009be0:	9341      	ld.w      	r2, (r3, 0x4)
18009be2:	3a80      	bclri      	r2, 0
18009be4:	b341      	st.w      	r2, (r3, 0x4)
    }

    if (irq_flag & PDM_IRQ_FLAG_DMA_OV) {
18009be6:	e4012002 	andi      	r0, r1, 2
18009bea:	e9000006 	bez      	r0, 0x18009bf6	// 18009bf6 <hgpdm_v0_release_irq+0x2a>
        hw->DMACON &= ~ LL_PDM_DMACON_OV_IE_EN(1);
18009bee:	9341      	ld.w      	r2, (r3, 0x4)
18009bf0:	3a81      	bclri      	r2, 1
18009bf2:	b341      	st.w      	r2, (r3, 0x4)
    }

    return RET_OK;
18009bf4:	3000      	movi      	r0, 0
}
18009bf6:	783c      	jmp      	r15
        return RET_ERR;
18009bf8:	3000      	movi      	r0, 0
18009bfa:	2800      	subi      	r0, 1
18009bfc:	07fd      	br      	0x18009bf6	// 18009bf6 <hgpdm_v0_release_irq+0x2a>
	...

18009c00 <hgpdm_v0_ioctl>:

    int32 ret_val = RET_OK;
    struct hgpdm_v0 *dev = (struct hgpdm_v0 *)pdm;
    struct hgpdm_v0_hw *hw = (struct hgpdm_v0_hw *)dev->hw;

    if ((!dev->opened) || (dev->dsleep)) {
18009c00:	d980001a 	ld.b      	r12, (r0, 0x1a)
18009c04:	e58c2003 	andi      	r12, r12, 3
18009c08:	eb4c0001 	cmpnei      	r12, 1
    struct hgpdm_v0_hw *hw = (struct hgpdm_v0_hw *)dev->hw;
18009c0c:	9063      	ld.w      	r3, (r0, 0xc)
    if ((!dev->opened) || (dev->dsleep)) {
18009c0e:	0810      	bt      	0x18009c2e	// 18009c2e <hgpdm_v0_ioctl+0x2e>
        return RET_ERR;
    }

    switch (ioctl_cmd) {
18009c10:	e9210012 	bnez      	r1, 0x18009c34	// 18009c34 <hgpdm_v0_ioctl+0x34>
    if (enable) {
18009c14:	e9020008 	bez      	r2, 0x18009c24	// 18009c24 <hgpdm_v0_ioctl+0x24>
        p_pdm->CON |=   LL_PDM_CON_LRSW(1);
18009c18:	9340      	ld.w      	r2, (r3, 0x0)
18009c1a:	ec420010 	ori      	r2, r2, 16
18009c1e:	b340      	st.w      	r2, (r3, 0x0)
        case (PDM_IOCTL_CMD_LR_CHANNEL_INTERCHANGE):
            ret_val = hgpdm_v0_lr_channel_interchange(hw, param);
18009c20:	6c07      	mov      	r0, r1
            ret_val = -ENOTSUPP;
            break;
    }

    return ret_val;
}
18009c22:	783c      	jmp      	r15
        p_pdm->CON &= ~ LL_PDM_CON_LRSW(1);
18009c24:	9320      	ld.w      	r1, (r3, 0x0)
18009c26:	3984      	bclri      	r1, 4
18009c28:	b320      	st.w      	r1, (r3, 0x0)
            ret_val = hgpdm_v0_lr_channel_interchange(hw, param);
18009c2a:	6c0b      	mov      	r0, r2
18009c2c:	07fb      	br      	0x18009c22	// 18009c22 <hgpdm_v0_ioctl+0x22>
        return RET_ERR;
18009c2e:	3000      	movi      	r0, 0
18009c30:	2800      	subi      	r0, 1
18009c32:	07f8      	br      	0x18009c22	// 18009c22 <hgpdm_v0_ioctl+0x22>
            ret_val = -ENOTSUPP;
18009c34:	ea00020b 	movi      	r0, 523
18009c38:	6c02      	nor      	r0, r0
18009c3a:	07f4      	br      	0x18009c22	// 18009c22 <hgpdm_v0_ioctl+0x22>

18009c3c <hgpdm_v0_request_irq>:
static int32 hgpdm_v0_request_irq(struct pdm_device *pdm, enum pdm_irq_flag irq_flag, pdm_irq_hdl irq_hdl, uint32 data) {
18009c3c:	14d3      	push      	r4-r6, r15
18009c3e:	6d87      	mov      	r6, r1
    if ((!dev->opened) || (dev->dsleep)) {
18009c40:	803a      	ld.b      	r1, (r0, 0x1a)
18009c42:	e4212003 	andi      	r1, r1, 3
18009c46:	3941      	cmpnei      	r1, 1
static int32 hgpdm_v0_request_irq(struct pdm_device *pdm, enum pdm_irq_flag irq_flag, pdm_irq_hdl irq_hdl, uint32 data) {
18009c48:	6d03      	mov      	r4, r0
    struct hgpdm_v0_hw *hw = (struct hgpdm_v0_hw *)dev->hw;
18009c4a:	90a3      	ld.w      	r5, (r0, 0xc)
    if ((!dev->opened) || (dev->dsleep)) {
18009c4c:	0825      	bt      	0x18009c96	// 18009c96 <hgpdm_v0_request_irq+0x5a>
    dev->irq_hdl  = irq_hdl;
18009c4e:	b044      	st.w      	r2, (r0, 0x10)
    dev->irq_data = data;
18009c50:	b065      	st.w      	r3, (r0, 0x14)
    request_irq(dev->irq_num, hgpdm_v0_irq_handler, dev);
18009c52:	6c83      	mov      	r2, r0
18009c54:	1032      	lrw      	r1, 0x18009b74	// 18009c9c <hgpdm_v0_request_irq+0x60>
18009c56:	880c      	ld.h      	r0, (r0, 0x18)
18009c58:	e3ffcd42 	bsr      	0x180036dc	// 180036dc <request_irq>
    if (irq_flag & PDM_IRQ_FLAG_DMA_HF) {
18009c5c:	e4662001 	andi      	r3, r6, 1
18009c60:	e9030006 	bez      	r3, 0x18009c6c	// 18009c6c <hgpdm_v0_request_irq+0x30>
        hw->DMACON |= LL_PDM_DMACON_HF_IE_EN(1);
18009c64:	9561      	ld.w      	r3, (r5, 0x4)
18009c66:	ec630001 	ori      	r3, r3, 1
18009c6a:	b561      	st.w      	r3, (r5, 0x4)
    if (irq_flag & PDM_IRQ_FLAG_DMA_OV) {
18009c6c:	e4c62002 	andi      	r6, r6, 2
18009c70:	e9060006 	bez      	r6, 0x18009c7c	// 18009c7c <hgpdm_v0_request_irq+0x40>
        hw->DMACON |= LL_PDM_DMACON_OV_IE_EN(1);
18009c74:	9561      	ld.w      	r3, (r5, 0x4)
18009c76:	ec630002 	ori      	r3, r3, 2
18009c7a:	b561      	st.w      	r3, (r5, 0x4)
    irq_enable(dev->irq_num);
18009c7c:	8c6c      	ld.h      	r3, (r4, 0x18)
18009c7e:	c4a354c1 	zext      	r1, r3, 6, 5
18009c82:	3201      	movi      	r2, 1
18009c84:	e463201f 	andi      	r3, r3, 31
18009c88:	c4624023 	lsl      	r3, r2, r3
18009c8c:	1045      	lrw      	r2, 0xe000e100	// 18009ca0 <hgpdm_v0_request_irq+0x64>
18009c8e:	d4220883 	str.w      	r3, (r2, r1 << 2)
    return RET_OK;
18009c92:	3000      	movi      	r0, 0
}
18009c94:	1493      	pop      	r4-r6, r15
        return RET_ERR;
18009c96:	3000      	movi      	r0, 0
18009c98:	2800      	subi      	r0, 1
18009c9a:	07fd      	br      	0x18009c94	// 18009c94 <hgpdm_v0_request_irq+0x58>
18009c9c:	18009b74 	.long	0x18009b74
18009ca0:	e000e100 	.long	0xe000e100

18009ca4 <hgpdm_v0_close>:
static int32 hgpdm_v0_close(struct pdm_device *pdm) {
18009ca4:	14d2      	push      	r4-r5, r15
    if (!dev->opened) {
18009ca6:	807a      	ld.b      	r3, (r0, 0x1a)
18009ca8:	e4632001 	andi      	r3, r3, 1
static int32 hgpdm_v0_close(struct pdm_device *pdm) {
18009cac:	6d03      	mov      	r4, r0
    if (!dev->opened) {
18009cae:	e9030022 	bez      	r3, 0x18009cf2	// 18009cf2 <hgpdm_v0_close+0x4e>
    sysctrl_pdm_clk_close();
18009cb2:	ea214002 	movih      	r1, 16386
    struct hgpdm_v0_hw *hw = (struct hgpdm_v0_hw *)dev->hw;
18009cb6:	9043      	ld.w      	r2, (r0, 0xc)
    sysctrl_pdm_clk_close();
18009cb8:	9173      	ld.w      	r3, (r1, 0x4c)
18009cba:	3b91      	bclri      	r3, 17
18009cbc:	b173      	st.w      	r3, (r1, 0x4c)
    p_pdm->CON &= ~ LL_PDM_CON_ENABLE(1);
18009cbe:	9260      	ld.w      	r3, (r2, 0x0)
18009cc0:	3b80      	bclri      	r3, 0
18009cc2:	b260      	st.w      	r3, (r2, 0x0)
    irq_disable(dev->irq_num       );
18009cc4:	886c      	ld.h      	r3, (r0, 0x18)
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
18009cc6:	c4a354c2 	zext      	r2, r3, 6, 5
18009cca:	3101      	movi      	r1, 1
18009ccc:	e463201f 	andi      	r3, r3, 31
18009cd0:	c4614023 	lsl      	r3, r1, r3
18009cd4:	221f      	addi      	r2, 32
18009cd6:	1029      	lrw      	r1, 0xe000e100	// 18009cf8 <hgpdm_v0_close+0x54>
18009cd8:	d4410883 	str.w      	r3, (r1, r2 << 2)
    sysctrl_pdm_clk_close();
18009cdc:	3500      	movi      	r5, 0
    pin_func(dev->dev.dev.dev_id, 0);
18009cde:	6c57      	mov      	r1, r5
18009ce0:	9000      	ld.w      	r0, (r0, 0x0)
18009ce2:	e3ffd223 	bsr      	0x18004128	// 18004128 <pin_func>
    dev->opened = 0;
18009ce6:	847a      	ld.b      	r3, (r4, 0x1a)
    dev->dsleep = 0;
18009ce8:	e46320fe 	andi      	r3, r3, 254
18009cec:	c4655c01 	ins      	r3, r5, 1, 1
18009cf0:	a47a      	st.b      	r3, (r4, 0x1a)
}
18009cf2:	3000      	movi      	r0, 0
18009cf4:	1492      	pop      	r4-r5, r15
18009cf6:	0000      	.short	0x0000
18009cf8:	e000e100 	.long	0xe000e100

18009cfc <hgpdm_v0_open>:
static int32 hgpdm_v0_open(struct pdm_device *pdm, enum pdm_sample_freq freq, enum pdm_channel channel) {
18009cfc:	14d6      	push      	r4-r9, r15
    if (dev->opened) {
18009cfe:	807a      	ld.b      	r3, (r0, 0x1a)
static int32 hgpdm_v0_open(struct pdm_device *pdm, enum pdm_sample_freq freq, enum pdm_channel channel) {
18009d00:	6e03      	mov      	r8, r0
    struct hgpdm_v0_hw *hw = (struct hgpdm_v0_hw *)dev->hw;
18009d02:	90c3      	ld.w      	r6, (r0, 0xc)
    if (dev->opened) {
18009d04:	e4032001 	andi      	r0, r3, 1
18009d08:	e9000006 	bez      	r0, 0x18009d14	// 18009d14 <hgpdm_v0_open+0x18>
        if (!dev->dsleep) {
18009d0c:	e4632002 	andi      	r3, r3, 2
18009d10:	e9030047 	bez      	r3, 0x18009d9e	// 18009d9e <hgpdm_v0_open+0xa2>
18009d14:	3903      	cmphsi      	r1, 4
18009d16:	0847      	bt      	0x18009da4	// 18009da4 <hgpdm_v0_open+0xa8>
18009d18:	1166      	lrw      	r3, 0x18016da0	// 18009db0 <hgpdm_v0_open+0xb4>
18009d1a:	3a02      	cmphsi      	r2, 3
18009d1c:	d0230445 	ldr.h      	r5, (r3, r1 << 1)
18009d20:	7555      	zexth      	r5, r5
18009d22:	0841      	bt      	0x18009da4	// 18009da4 <hgpdm_v0_open+0xa8>
18009d24:	1164      	lrw      	r3, 0x18016da8	// 18009db4 <hgpdm_v0_open+0xb8>
    if ((-1) == freq_to_reg ||
18009d26:	3700      	movi      	r7, 0
18009d28:	d0431029 	ldr.bs      	r9, (r3, r2 << 0)
18009d2c:	2f00      	subi      	r7, 1
18009d2e:	65e6      	cmpne      	r9, r7
18009d30:	0c3a      	bf      	0x18009da4	// 18009da4 <hgpdm_v0_open+0xa8>
    if (pin_func(dev->dev.dev.dev_id , 1) != RET_OK) {
18009d32:	3101      	movi      	r1, 1
18009d34:	d8082000 	ld.w      	r0, (r8, 0x0)
18009d38:	e3ffd1f8 	bsr      	0x18004128	// 18004128 <pin_func>
18009d3c:	6d03      	mov      	r4, r0
18009d3e:	e9200036 	bnez      	r0, 0x18009daa	// 18009daa <hgpdm_v0_open+0xae>
    sysctrl_pdm_clk_open();
18009d42:	ea274002 	movih      	r7, 16386
        div = (peripheral_clock_get(HG_APB0_PT_PDM)/ (freq*64*8));
18009d46:	45a9      	lsli      	r5, r5, 9
    sysctrl_pdm_clk_open();
18009d48:	9773      	ld.w      	r3, (r7, 0x4c)
18009d4a:	3bb1      	bseti      	r3, 17
18009d4c:	b773      	st.w      	r3, (r7, 0x4c)
     hw->STA      = 0xFFFF;
18009d4e:	ea03ffff 	movi      	r3, 65535
     hw->CON      = 0;
18009d52:	b600      	st.w      	r0, (r6, 0x0)
     hw->DMACON   = 0;
18009d54:	b601      	st.w      	r0, (r6, 0x4)
     hw->DMALEN   = 0;
18009d56:	b604      	st.w      	r0, (r6, 0x10)
     hw->DMASTADR = 0;
18009d58:	b602      	st.w      	r0, (r6, 0x8)
     hw->STA      = 0xFFFF;
18009d5a:	b666      	st.w      	r3, (r6, 0x18)
    SYSCTRL->SYS_CON2 |= 1<<18; //choose pll0
18009d5c:	9763      	ld.w      	r3, (r7, 0xc)
18009d5e:	3bb2      	bseti      	r3, 18
18009d60:	b763      	st.w      	r3, (r7, 0xc)
        div = (peripheral_clock_get(HG_APB0_PT_PDM)/ (freq*64*8));
18009d62:	3020      	movi      	r0, 32
18009d64:	e0003a24 	bsr      	0x180111ac	// 180111ac <peripheral_clock_get>
18009d68:	c4a08025 	divu      	r5, r0, r5
    temp &= ~0x07F00000;
18009d6c:	ea22f810 	movih      	r2, 63504
    temp  = SYSCTRL->SYS_CON2;
18009d70:	9763      	ld.w      	r3, (r7, 0xc)
    temp &= ~0x07F00000;
18009d72:	2a00      	subi      	r2, 1
    temp |= (div - 1)<<20;            //select div
18009d74:	2d00      	subi      	r5, 1
    temp &= ~0x07F00000;
18009d76:	68c8      	and      	r3, r2
    temp |= (div - 1)<<20;            //select div
18009d78:	45b4      	lsli      	r5, r5, 20
18009d7a:	6d4c      	or      	r5, r3
    hw->CON = LL_PDM_CON_WORKMODE(channel_to_reg) | LL_PDM_CON_DECIM(0);
18009d7c:	6264      	addu      	r9, r9
    hw->STA = 3;
18009d7e:	3303      	movi      	r3, 3
    SYSCTRL->SYS_CON2 = temp;
18009d80:	b7a3      	st.w      	r5, (r7, 0xc)
    hw->CON = LL_PDM_CON_WORKMODE(channel_to_reg) | LL_PDM_CON_DECIM(0);
18009d82:	dd262000 	st.w      	r9, (r6, 0x0)
    hw->STA = 3;
18009d86:	b666      	st.w      	r3, (r6, 0x18)
    dev->opened = 1;
18009d88:	d868001a 	ld.b      	r3, (r8, 0x1a)
18009d8c:	3201      	movi      	r2, 1
18009d8e:	c4625c00 	ins      	r3, r2, 0, 0
    dev->dsleep = 0;
18009d92:	c4645c01 	ins      	r3, r4, 1, 1
18009d96:	dc68001a 	st.b      	r3, (r8, 0x1a)
}
18009d9a:	6c13      	mov      	r0, r4
18009d9c:	1496      	pop      	r4-r9, r15
            return -EBUSY;
18009d9e:	3400      	movi      	r4, 0
18009da0:	2c0f      	subi      	r4, 16
18009da2:	07fc      	br      	0x18009d9a	// 18009d9a <hgpdm_v0_open+0x9e>
        return -EINVAL;
18009da4:	3400      	movi      	r4, 0
18009da6:	2c15      	subi      	r4, 22
18009da8:	07f9      	br      	0x18009d9a	// 18009d9a <hgpdm_v0_open+0x9e>
        return RET_ERR;
18009daa:	6d1f      	mov      	r4, r7
18009dac:	07f7      	br      	0x18009d9a	// 18009d9a <hgpdm_v0_open+0x9e>
18009dae:	0000      	.short	0x0000
18009db0:	18016da0 	.long	0x18016da0
18009db4:	18016da8 	.long	0x18016da8

18009db8 <hgpdm_v0_attach>:
    .ops.suspend = hgpdm_v0_suspend,
    .ops.resume  = hgpdm_v0_resume,
#endif
};

int32 hgpdm_v0_attach(uint32 dev_id, struct hgpdm_v0 *pdm) {
18009db8:	14d1      	push      	r4, r15

    pdm->opened          = 0;
18009dba:	815a      	ld.b      	r2, (r1, 0x1a)
18009dbc:	3400      	movi      	r4, 0
    pdm->dsleep          = 0;
18009dbe:	e44220fe 	andi      	r2, r2, 254
18009dc2:	c4445c01 	ins      	r2, r4, 1, 1
    pdm->dev.dev.ops     =(const struct devobj_ops *)&pdm_ops;
#ifdef CONFIG_SLEEP
    os_mutex_init(&pdm->bp_suspend_lock);
    os_mutex_init(&pdm->bp_resume_lock);
#endif
    irq_disable(pdm->irq_num);
18009dc6:	896c      	ld.h      	r3, (r1, 0x18)
    pdm->dsleep          = 0;
18009dc8:	a15a      	st.b      	r2, (r1, 0x1a)
18009dca:	ea0c0001 	movi      	r12, 1
    pdm->dev.dev.ops     =(const struct devobj_ops *)&pdm_ops;
18009dce:	104a      	lrw      	r2, 0x18016dac	// 18009df4 <hgpdm_v0_attach+0x3c>
18009dd0:	b142      	st.w      	r2, (r1, 0x8)
18009dd2:	c4a354c2 	zext      	r2, r3, 6, 5
18009dd6:	e463201f 	andi      	r3, r3, 31
18009dda:	c46c4023 	lsl      	r3, r12, r3
18009dde:	221f      	addi      	r2, 32
18009de0:	ea8c0006 	lrw      	r12, 0xe000e100	// 18009df8 <hgpdm_v0_attach+0x40>
    pdm->irq_hdl         = NULL;
18009de4:	b184      	st.w      	r4, (r1, 0x10)
    pdm->irq_data        = 0;
18009de6:	b185      	st.w      	r4, (r1, 0x14)
18009de8:	d44c0883 	str.w      	r3, (r12, r2 << 2)
    dev_register(dev_id, (struct dev_obj *)pdm);
18009dec:	e3ffc95c 	bsr      	0x180030a4	// 180030a4 <dev_register>
    return RET_OK;
}
18009df0:	6c13      	mov      	r0, r4
18009df2:	1491      	pop      	r4, r15
18009df4:	18016dac 	.long	0x18016dac
18009df8:	e000e100 	.long	0xe000e100

18009dfc <hgpwm_v0_config>:
            return -1;
            break;
    }
}

static int32 hgpwm_v0_config(struct hgpwm_v0 *dev, enum pwm_channel channel, struct hgpwm_v0_config *config) {
18009dfc:	14d0      	push      	r15
    struct hgpwm_v0_config *p_config       = config;
    uint32                  channel_to_reg = 0;
    int32                   ret_val        = RET_OK;

    /* Make sure the config struct pointer */
    if (!p_config) {
18009dfe:	e9020019 	bez      	r2, 0x18009e30	// 18009e30 <hgpwm_v0_config+0x34>
18009e02:	3905      	cmphsi      	r1, 6
18009e04:	ea0c0000 	movi      	r12, 0
18009e08:	e58c1000 	subi      	r12, r12, 1
18009e0c:	0810      	bt      	0x18009e2c	// 18009e2c <hgpwm_v0_config+0x30>
18009e0e:	106c      	lrw      	r3, 0x18016dd8	// 18009e3c <hgpwm_v0_config+0x40>
18009e10:	d0231023 	ldr.bs      	r3, (r3, r1 << 0)
        return -EINVAL;
    }

    /* Make sure the channel */
    channel_to_reg = hgpwm_v0_switch_hal_pwm_channel(channel);
    if ((-1) == channel_to_reg) {
18009e14:	670e      	cmpne      	r3, r12
18009e16:	0c0d      	bf      	0x18009e30	// 18009e30 <hgpwm_v0_config+0x34>
        return -EINVAL;
    }

    /* Make sure the timer is attached */
    if ((dev->channel[channel_to_reg])) {
18009e18:	2302      	addi      	r3, 3
18009e1a:	d0600880 	ldr.w      	r0, (r0, r3 << 2)
18009e1e:	e900000c 	bez      	r0, 0x18009e36	// 18009e36 <hgpwm_v0_config+0x3a>
        ret_val = timer_device_ioctl((struct timer_device *)dev->channel[channel_to_reg], HGPWM_V0_FUNC_CMD_MASK, (uint32)p_config, 0);
18009e22:	3300      	movi      	r3, 0
18009e24:	3140      	movi      	r1, 64
18009e26:	e3ffc99d 	bsr      	0x18003160	// 18003160 <timer_device_ioctl>
    } else {
        ret_val = RET_ERR;
    }
    
    return ret_val;
}
18009e2a:	1490      	pop      	r15
    if (!p_config) {
18009e2c:	6cf3      	mov      	r3, r12
18009e2e:	07f3      	br      	0x18009e14	// 18009e14 <hgpwm_v0_config+0x18>
        return -EINVAL;
18009e30:	3000      	movi      	r0, 0
18009e32:	2815      	subi      	r0, 22
18009e34:	07fb      	br      	0x18009e2a	// 18009e2a <hgpwm_v0_config+0x2e>
        ret_val = RET_ERR;
18009e36:	3000      	movi      	r0, 0
18009e38:	2800      	subi      	r0, 1
18009e3a:	07f8      	br      	0x18009e2a	// 18009e2a <hgpwm_v0_config+0x2e>
18009e3c:	18016dd8 	.long	0x18016dd8

18009e40 <hgpwm_v0_release_irq>:
    }

    return RET_OK;
}

static int32 hgpwm_v0_release_irq(struct pwm_device *pwm, enum pwm_channel channel) {
18009e40:	14d2      	push      	r4-r5, r15
18009e42:	1427      	subi      	r14, r14, 28
18009e44:	6d03      	mov      	r4, r0
18009e46:	6d47      	mov      	r5, r1

    struct hgpwm_v0        *dev    = (struct hgpwm_v0 *)pwm;
    struct hgpwm_v0_config  config = {0};
18009e48:	321c      	movi      	r2, 28
18009e4a:	3100      	movi      	r1, 0
18009e4c:	6c3b      	mov      	r0, r14
18009e4e:	e000600d 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>

    config.func_cmd       = HGPWM_V0_FUNC_CMD_RELEASE_IRQ;
18009e52:	334b      	movi      	r3, 75
    config.irq_data       = 0;
    config.irq_hdl        = NULL;

    hgpwm_v0_config(dev, channel, &config);
18009e54:	6cbb      	mov      	r2, r14
18009e56:	6c57      	mov      	r1, r5
18009e58:	6c13      	mov      	r0, r4
    config.func_cmd       = HGPWM_V0_FUNC_CMD_RELEASE_IRQ;
18009e5a:	b864      	st.w      	r3, (r14, 0x10)
    hgpwm_v0_config(dev, channel, &config);
18009e5c:	e3ffffd0 	bsr      	0x18009dfc	// 18009dfc <hgpwm_v0_config>
    
    return RET_OK;
}
18009e60:	3000      	movi      	r0, 0
18009e62:	1407      	addi      	r14, r14, 28
18009e64:	1492      	pop      	r4-r5, r15
	...

18009e68 <hgpwm_v0_request_irq>:
static int32 hgpwm_v0_request_irq(struct pwm_device *pwm, enum pwm_channel channel, enum pwm_irq_flag irq_flag, pwm_irq_hdl irq_hdl, uint32 data) {
18009e68:	14d5      	push      	r4-r8, r15
18009e6a:	1427      	subi      	r14, r14, 28
18009e6c:	6e0b      	mov      	r8, r2
18009e6e:	6d03      	mov      	r4, r0
18009e70:	6d47      	mov      	r5, r1
    struct hgpwm_v0_config  config  = {0};
18009e72:	321c      	movi      	r2, 28
18009e74:	3100      	movi      	r1, 0
18009e76:	6c3b      	mov      	r0, r14
static int32 hgpwm_v0_request_irq(struct pwm_device *pwm, enum pwm_channel channel, enum pwm_irq_flag irq_flag, pwm_irq_hdl irq_hdl, uint32 data) {
18009e78:	6dcf      	mov      	r7, r3
18009e7a:	98cd      	ld.w      	r6, (r14, 0x34)
    struct hgpwm_v0_config  config  = {0};
18009e7c:	e0005ff6 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
    switch (irq_flag) {
18009e80:	e9080008 	bez      	r8, 0x18009e90	// 18009e90 <hgpwm_v0_request_irq+0x28>
18009e84:	eb480001 	cmpnei      	r8, 1
18009e88:	0c0e      	bf      	0x18009ea4	// 18009ea4 <hgpwm_v0_request_irq+0x3c>
}
18009e8a:	3000      	movi      	r0, 0
18009e8c:	1407      	addi      	r14, r14, 28
18009e8e:	1495      	pop      	r4-r8, r15
            config.func_cmd       = HGPWM_V0_FUNC_CMD_REQUEST_IRQ_COMPARE;
18009e90:	3349      	movi      	r3, 73
            hgpwm_v0_config(dev, channel, &config);
18009e92:	6cbb      	mov      	r2, r14
18009e94:	6c57      	mov      	r1, r5
18009e96:	6c13      	mov      	r0, r4
            config.func_cmd       = HGPWM_V0_FUNC_CMD_REQUEST_IRQ_PERIOD;
18009e98:	b864      	st.w      	r3, (r14, 0x10)
            config.irq_hdl        = irq_hdl;
18009e9a:	b8e2      	st.w      	r7, (r14, 0x8)
            config.irq_data       = data;
18009e9c:	b8c3      	st.w      	r6, (r14, 0xc)
            hgpwm_v0_config(dev, channel, &config);
18009e9e:	e3ffffaf 	bsr      	0x18009dfc	// 18009dfc <hgpwm_v0_config>
            break;
18009ea2:	07f4      	br      	0x18009e8a	// 18009e8a <hgpwm_v0_request_irq+0x22>
            config.func_cmd       = HGPWM_V0_FUNC_CMD_REQUEST_IRQ_PERIOD;
18009ea4:	334a      	movi      	r3, 74
18009ea6:	07f6      	br      	0x18009e92	// 18009e92 <hgpwm_v0_request_irq+0x2a>

18009ea8 <hgpwm_v0_ioctl>:
static int32 hgpwm_v0_ioctl(struct pwm_device *pwm, enum pwm_channel channel, enum pwm_ioctl_cmd ioctl_cmd, uint32 param1, uint32 param2) {
18009ea8:	14d5      	push      	r4-r8, r15
18009eaa:	1427      	subi      	r14, r14, 28
18009eac:	6e0b      	mov      	r8, r2
18009eae:	6d03      	mov      	r4, r0
18009eb0:	6d47      	mov      	r5, r1
    struct hgpwm_v0_config  config  = {0};
18009eb2:	321c      	movi      	r2, 28
18009eb4:	3100      	movi      	r1, 0
18009eb6:	6c3b      	mov      	r0, r14
static int32 hgpwm_v0_ioctl(struct pwm_device *pwm, enum pwm_channel channel, enum pwm_ioctl_cmd ioctl_cmd, uint32 param1, uint32 param2) {
18009eb8:	6d8f      	mov      	r6, r3
18009eba:	98ed      	ld.w      	r7, (r14, 0x34)
    struct hgpwm_v0_config  config  = {0};
18009ebc:	e0005fd6 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
    switch (ioctl_cmd) {
18009ec0:	eb080004 	cmphsi      	r8, 5
18009ec4:	081d      	bt      	0x18009efe	// 18009efe <hgpwm_v0_ioctl+0x56>
18009ec6:	1063      	lrw      	r3, 0x18016dc4	// 18009ed0 <hgpwm_v0_ioctl+0x28>
18009ec8:	d1030883 	ldr.w      	r3, (r3, r8 << 2)
18009ecc:	780c      	jmp      	r3
18009ece:	0000      	.short	0x0000
18009ed0:	18016dc4 	.long	0x18016dc4
            config.func_cmd = HGPWM_V0_FUNC_CMD_IOCTL_SET_PERIOD_DUTY;
18009ed4:	3345      	movi      	r3, 69
            config.func_cmd = HGPWM_V0_FUNC_CMD_IOCTL_SET_PERIOD_DUTY_IMMEDIATELY;
18009ed6:	b864      	st.w      	r3, (r14, 0x10)
            config.period   = param1;
18009ed8:	b8c0      	st.w      	r6, (r14, 0x0)
			config.duty     = param2;
18009eda:	b8e1      	st.w      	r7, (r14, 0x4)
18009edc:	0408      	br      	0x18009eec	// 18009eec <hgpwm_v0_ioctl+0x44>
            config.func_cmd = HGPWM_V0_FUNC_CMD_IOCTL_SET_SINGLE_INCREAM;
18009ede:	3347      	movi      	r3, 71
18009ee0:	07fb      	br      	0x18009ed6	// 18009ed6 <hgpwm_v0_ioctl+0x2e>
            config.func_cmd = HGPWM_V0_FUNC_CMD_IOCTL_SET_INCREAM_DECREASE;
18009ee2:	3348      	movi      	r3, 72
18009ee4:	07f9      	br      	0x18009ed6	// 18009ed6 <hgpwm_v0_ioctl+0x2e>
            config.func_cmd = HGPWM_V0_FUNC_CMD_IOCTL_SET_PRESCALER;
18009ee6:	334e      	movi      	r3, 78
18009ee8:	b864      	st.w      	r3, (r14, 0x10)
            config.param1   = param1;
18009eea:	b8c5      	st.w      	r6, (r14, 0x14)
            ret_val = hgpwm_v0_config(dev, channel, &config);			
18009eec:	6cbb      	mov      	r2, r14
18009eee:	6c57      	mov      	r1, r5
18009ef0:	6c13      	mov      	r0, r4
18009ef2:	e3ffff85 	bsr      	0x18009dfc	// 18009dfc <hgpwm_v0_config>
}
18009ef6:	1407      	addi      	r14, r14, 28
18009ef8:	1495      	pop      	r4-r8, r15
            config.func_cmd = HGPWM_V0_FUNC_CMD_IOCTL_SET_PERIOD_DUTY_IMMEDIATELY;
18009efa:	334f      	movi      	r3, 79
18009efc:	07ed      	br      	0x18009ed6	// 18009ed6 <hgpwm_v0_ioctl+0x2e>
            ret_val = -ENOTSUPP;
18009efe:	ea00020b 	movi      	r0, 523
18009f02:	6c02      	nor      	r0, r0
    return ret_val;
18009f04:	07f9      	br      	0x18009ef6	// 18009ef6 <hgpwm_v0_ioctl+0x4e>
	...

18009f08 <hgpwm_v0_stop>:
static int32 hgpwm_v0_stop(struct pwm_device *pwm, enum pwm_channel channel) {
18009f08:	14d2      	push      	r4-r5, r15
18009f0a:	1427      	subi      	r14, r14, 28
18009f0c:	6d07      	mov      	r4, r1
18009f0e:	6d43      	mov      	r5, r0
    struct hgpwm_v0_config  config      = {0};
18009f10:	321c      	movi      	r2, 28
18009f12:	3100      	movi      	r1, 0
18009f14:	6c3b      	mov      	r0, r14
18009f16:	e0005fa9 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
18009f1a:	3c05      	cmphsi      	r4, 6
18009f1c:	0816      	bt      	0x18009f48	// 18009f48 <hgpwm_v0_stop+0x40>
18009f1e:	106d      	lrw      	r3, 0x18016dd8	// 18009f50 <hgpwm_v0_stop+0x48>
    if ((-1) == channel_num) {
18009f20:	3200      	movi      	r2, 0
18009f22:	d0831023 	ldr.bs      	r3, (r3, r4 << 0)
18009f26:	2a00      	subi      	r2, 1
18009f28:	648e      	cmpne      	r3, r2
18009f2a:	0c0f      	bf      	0x18009f48	// 18009f48 <hgpwm_v0_stop+0x40>
    if (!(dev->opened[channel_num])) {
18009f2c:	60d4      	addu      	r3, r5
18009f2e:	d8030024 	ld.b      	r0, (r3, 0x24)
18009f32:	e9000009 	bez      	r0, 0x18009f44	// 18009f44 <hgpwm_v0_stop+0x3c>
    config.func_cmd = HGPWM_V0_FUNC_CMD_STOP;
18009f36:	3344      	movi      	r3, 68
    ret_val = hgpwm_v0_config(dev, channel, &config);
18009f38:	6cbb      	mov      	r2, r14
18009f3a:	6c53      	mov      	r1, r4
18009f3c:	6c17      	mov      	r0, r5
    config.func_cmd = HGPWM_V0_FUNC_CMD_STOP;
18009f3e:	b864      	st.w      	r3, (r14, 0x10)
    ret_val = hgpwm_v0_config(dev, channel, &config);
18009f40:	e3ffff5e 	bsr      	0x18009dfc	// 18009dfc <hgpwm_v0_config>
}
18009f44:	1407      	addi      	r14, r14, 28
18009f46:	1492      	pop      	r4-r5, r15
        return -EINVAL;
18009f48:	3000      	movi      	r0, 0
18009f4a:	2815      	subi      	r0, 22
18009f4c:	07fc      	br      	0x18009f44	// 18009f44 <hgpwm_v0_stop+0x3c>
18009f4e:	0000      	.short	0x0000
18009f50:	18016dd8 	.long	0x18016dd8

18009f54 <hgpwm_v0_start>:
static int32 hgpwm_v0_start(struct pwm_device *pwm, enum pwm_channel channel) {
18009f54:	14d2      	push      	r4-r5, r15
18009f56:	1427      	subi      	r14, r14, 28
18009f58:	6d07      	mov      	r4, r1
18009f5a:	6d43      	mov      	r5, r0
    struct hgpwm_v0_config  config      = {0};
18009f5c:	321c      	movi      	r2, 28
18009f5e:	3100      	movi      	r1, 0
18009f60:	6c3b      	mov      	r0, r14
18009f62:	e0005f83 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
18009f66:	3c05      	cmphsi      	r4, 6
18009f68:	0816      	bt      	0x18009f94	// 18009f94 <hgpwm_v0_start+0x40>
18009f6a:	106d      	lrw      	r3, 0x18016dd8	// 18009f9c <hgpwm_v0_start+0x48>
    if ((-1) == channel_num) {
18009f6c:	3000      	movi      	r0, 0
18009f6e:	d0831023 	ldr.bs      	r3, (r3, r4 << 0)
18009f72:	2800      	subi      	r0, 1
18009f74:	640e      	cmpne      	r3, r0
18009f76:	0c0f      	bf      	0x18009f94	// 18009f94 <hgpwm_v0_start+0x40>
    if (!(dev->opened[channel_num])) {
18009f78:	60d4      	addu      	r3, r5
18009f7a:	d8630024 	ld.b      	r3, (r3, 0x24)
18009f7e:	e9030009 	bez      	r3, 0x18009f90	// 18009f90 <hgpwm_v0_start+0x3c>
    config.func_cmd = HGPWM_V0_FUNC_CMD_START;
18009f82:	3343      	movi      	r3, 67
    ret_val = hgpwm_v0_config(dev, channel, &config);
18009f84:	6cbb      	mov      	r2, r14
18009f86:	6c53      	mov      	r1, r4
18009f88:	6c17      	mov      	r0, r5
    config.func_cmd = HGPWM_V0_FUNC_CMD_START;
18009f8a:	b864      	st.w      	r3, (r14, 0x10)
    ret_val = hgpwm_v0_config(dev, channel, &config);
18009f8c:	e3ffff38 	bsr      	0x18009dfc	// 18009dfc <hgpwm_v0_config>
}
18009f90:	1407      	addi      	r14, r14, 28
18009f92:	1492      	pop      	r4-r5, r15
        return -EINVAL;
18009f94:	3000      	movi      	r0, 0
18009f96:	2815      	subi      	r0, 22
18009f98:	07fc      	br      	0x18009f90	// 18009f90 <hgpwm_v0_start+0x3c>
18009f9a:	0000      	.short	0x0000
18009f9c:	18016dd8 	.long	0x18016dd8

18009fa0 <hgpwm_v0_deinit>:
static int32 hgpwm_v0_deinit(struct pwm_device *pwm, enum pwm_channel channel) {
18009fa0:	14d3      	push      	r4-r6, r15
18009fa2:	1427      	subi      	r14, r14, 28
18009fa4:	6d47      	mov      	r5, r1
18009fa6:	6d83      	mov      	r6, r0
    struct hgpwm_v0_config  config      = {0};
18009fa8:	321c      	movi      	r2, 28
18009faa:	3100      	movi      	r1, 0
18009fac:	6c3b      	mov      	r0, r14
18009fae:	e0005f5d 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
18009fb2:	3d05      	cmphsi      	r5, 6
18009fb4:	0819      	bt      	0x18009fe6	// 18009fe6 <hgpwm_v0_deinit+0x46>
18009fb6:	106e      	lrw      	r3, 0x18016dd8	// 18009fec <hgpwm_v0_deinit+0x4c>
18009fb8:	d0a31024 	ldr.bs      	r4, (r3, r5 << 0)
    if ((-1) == channel_num) {
18009fbc:	3300      	movi      	r3, 0
18009fbe:	2b00      	subi      	r3, 1
18009fc0:	64d2      	cmpne      	r4, r3
18009fc2:	0c12      	bf      	0x18009fe6	// 18009fe6 <hgpwm_v0_deinit+0x46>
    if (!(dev->opened[channel_num])) {
18009fc4:	6118      	addu      	r4, r6
18009fc6:	d8040024 	ld.b      	r0, (r4, 0x24)
18009fca:	e900000c 	bez      	r0, 0x18009fe2	// 18009fe2 <hgpwm_v0_deinit+0x42>
    config.func_cmd = HGPWM_V0_FUNC_CMD_DEINIT;
18009fce:	3342      	movi      	r3, 66
    ret_val = hgpwm_v0_config(dev, channel, &config);
18009fd0:	6cbb      	mov      	r2, r14
18009fd2:	6c57      	mov      	r1, r5
18009fd4:	6c1b      	mov      	r0, r6
    config.func_cmd = HGPWM_V0_FUNC_CMD_DEINIT;
18009fd6:	b864      	st.w      	r3, (r14, 0x10)
    ret_val = hgpwm_v0_config(dev, channel, &config);
18009fd8:	e3ffff12 	bsr      	0x18009dfc	// 18009dfc <hgpwm_v0_config>
    dev->opened[channel_num] = 0;
18009fdc:	3300      	movi      	r3, 0
18009fde:	dc640024 	st.b      	r3, (r4, 0x24)
}
18009fe2:	1407      	addi      	r14, r14, 28
18009fe4:	1493      	pop      	r4-r6, r15
        return -EINVAL;
18009fe6:	3000      	movi      	r0, 0
18009fe8:	2815      	subi      	r0, 22
18009fea:	07fc      	br      	0x18009fe2	// 18009fe2 <hgpwm_v0_deinit+0x42>
18009fec:	18016dd8 	.long	0x18016dd8

18009ff0 <hgpwm_v0_init>:
static int32 hgpwm_v0_init(struct pwm_device *pwm, enum pwm_channel channel, uint32 period_sysclkpd_cnt, uint32 h_duty_sysclkpd_cnt) {
18009ff0:	14d5      	push      	r4-r8, r15
18009ff2:	1427      	subi      	r14, r14, 28
18009ff4:	6d47      	mov      	r5, r1
18009ff6:	6d83      	mov      	r6, r0
18009ff8:	6e0b      	mov      	r8, r2
    struct hgpwm_v0_config  config      = {0};
18009ffa:	3100      	movi      	r1, 0
18009ffc:	321c      	movi      	r2, 28
18009ffe:	6c3b      	mov      	r0, r14
static int32 hgpwm_v0_init(struct pwm_device *pwm, enum pwm_channel channel, uint32 period_sysclkpd_cnt, uint32 h_duty_sysclkpd_cnt) {
1800a000:	6dcf      	mov      	r7, r3
    struct hgpwm_v0_config  config      = {0};
1800a002:	e0005f33 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
1800a006:	3d05      	cmphsi      	r5, 6
1800a008:	081c      	bt      	0x1800a040	// 1800a040 <hgpwm_v0_init+0x50>
1800a00a:	1071      	lrw      	r3, 0x18016dd8	// 1800a04c <hgpwm_v0_init+0x5c>
    if ((-1) == channel_num) {
1800a00c:	3200      	movi      	r2, 0
1800a00e:	d0a31024 	ldr.bs      	r4, (r3, r5 << 0)
1800a012:	2a00      	subi      	r2, 1
1800a014:	6492      	cmpne      	r4, r2
1800a016:	0c15      	bf      	0x1800a040	// 1800a040 <hgpwm_v0_init+0x50>
    if (dev->opened[channel_num]) {
1800a018:	6118      	addu      	r4, r6
1800a01a:	d8640024 	ld.b      	r3, (r4, 0x24)
1800a01e:	e9230014 	bnez      	r3, 0x1800a046	// 1800a046 <hgpwm_v0_init+0x56>
    config.func_cmd = HGPWM_V0_FUNC_CMD_INIT;
1800a022:	3341      	movi      	r3, 65
    ret_val = hgpwm_v0_config(dev, channel, &config);
1800a024:	6cbb      	mov      	r2, r14
1800a026:	6c57      	mov      	r1, r5
1800a028:	6c1b      	mov      	r0, r6
    config.func_cmd = HGPWM_V0_FUNC_CMD_INIT;
1800a02a:	b864      	st.w      	r3, (r14, 0x10)
    config.period   = period_sysclkpd_cnt;
1800a02c:	dd0e2000 	st.w      	r8, (r14, 0x0)
    config.duty     = h_duty_sysclkpd_cnt;
1800a030:	b8e1      	st.w      	r7, (r14, 0x4)
    ret_val = hgpwm_v0_config(dev, channel, &config);
1800a032:	e3fffee5 	bsr      	0x18009dfc	// 18009dfc <hgpwm_v0_config>
    dev->opened[channel_num] = 1;
1800a036:	3301      	movi      	r3, 1
1800a038:	dc640024 	st.b      	r3, (r4, 0x24)
}
1800a03c:	1407      	addi      	r14, r14, 28
1800a03e:	1495      	pop      	r4-r8, r15
        return -EINVAL;
1800a040:	3000      	movi      	r0, 0
1800a042:	2815      	subi      	r0, 22
1800a044:	07fc      	br      	0x1800a03c	// 1800a03c <hgpwm_v0_init+0x4c>
        return -EBUSY;
1800a046:	3000      	movi      	r0, 0
1800a048:	280f      	subi      	r0, 16
1800a04a:	07f9      	br      	0x1800a03c	// 1800a03c <hgpwm_v0_init+0x4c>
1800a04c:	18016dd8 	.long	0x18016dd8

1800a050 <hgpwm_v0_attach>:
    .ops.suspend = NULL,//hgpwm_v0_suspend,
    .ops.resume  = NULL,//hgpwm_v0_resume,
#endif
};

int32 hgpwm_v0_attach(uint32 dev_id, struct hgpwm_v0 *pwm) {
1800a050:	14d0      	push      	r15

    uint32 i = 0;
    for (i=0; i<HGPWM_MAX_PWM_CHANNEL; i++) {
        pwm->opened[i] = 0;
1800a052:	3200      	movi      	r2, 0
1800a054:	dc410024 	st.b      	r2, (r1, 0x24)
1800a058:	dc410025 	st.b      	r2, (r1, 0x25)
1800a05c:	dc410026 	st.b      	r2, (r1, 0x26)
1800a060:	dc410027 	st.b      	r2, (r1, 0x27)
1800a064:	dc410028 	st.b      	r2, (r1, 0x28)
1800a068:	dc410029 	st.b      	r2, (r1, 0x29)
    }
    pwm->dev.dev.ops = (const struct devobj_ops *)&pwm_v0_ops;
1800a06c:	1043      	lrw      	r2, 0x18016de0	// 1800a078 <hgpwm_v0_attach+0x28>
1800a06e:	b142      	st.w      	r2, (r1, 0x8)
    dev_register(dev_id, (struct dev_obj *)pwm);    
1800a070:	e3ffc81a 	bsr      	0x180030a4	// 180030a4 <dev_register>
    return RET_OK;
}
1800a074:	3000      	movi      	r0, 0
1800a076:	1490      	pop      	r15
1800a078:	18016de0 	.long	0x18016de0

1800a07c <DVP_IRQHandler_action>:
	return ret_val;
}


void DVP_IRQHandler_action(void *p_dvp)
{
1800a07c:	14d2      	push      	r4-r5, r15
	uint32 sta = 0;
	uint8 loop;
	struct hgdvp *dvp_hw = (struct hgdvp*)p_dvp; 
	struct hgdvp_hw *hw  = (struct hgdvp_hw *)dvp_hw->hw;
1800a07e:	90a3      	ld.w      	r5, (r0, 0xc)
	sta = hw->STA;
1800a080:	9581      	ld.w      	r4, (r5, 0x4)
	for(loop = 0;loop < DVP_IRQ_NUM;loop++){
		if(sta&BIT(loop)){
1800a082:	e4642001 	andi      	r3, r4, 1
1800a086:	e903000d 	bez      	r3, 0x1800a0a0	// 1800a0a0 <DVP_IRQHandler_action+0x24>
			hw->STA = BIT(loop);
1800a08a:	3301      	movi      	r3, 1
1800a08c:	b561      	st.w      	r3, (r5, 0x4)
			if(dvpirq_vector_table[loop] != NULL)
1800a08e:	106d      	lrw      	r3, 0x2000214c	// 1800a0c0 <DVP_IRQHandler_action+0x44>
1800a090:	9360      	ld.w      	r3, (r3, 0x0)
1800a092:	e9030007 	bez      	r3, 0x1800a0a0	// 1800a0a0 <DVP_IRQHandler_action+0x24>
				dvpirq_vector_table[loop] (loop,dvpirq_dev_table[loop],0);
1800a096:	104c      	lrw      	r2, 0x20002144	// 1800a0c4 <DVP_IRQHandler_action+0x48>
1800a098:	9220      	ld.w      	r1, (r2, 0x0)
1800a09a:	3200      	movi      	r2, 0
1800a09c:	6c0b      	mov      	r0, r2
1800a09e:	7bcd      	jsr      	r3
		if(sta&BIT(loop)){
1800a0a0:	c4245424 	zext      	r4, r4, 1, 1
1800a0a4:	e904000d 	bez      	r4, 0x1800a0be	// 1800a0be <DVP_IRQHandler_action+0x42>
			hw->STA = BIT(loop);
1800a0a8:	3302      	movi      	r3, 2
1800a0aa:	b561      	st.w      	r3, (r5, 0x4)
			if(dvpirq_vector_table[loop] != NULL)
1800a0ac:	1065      	lrw      	r3, 0x2000214c	// 1800a0c0 <DVP_IRQHandler_action+0x44>
1800a0ae:	9361      	ld.w      	r3, (r3, 0x4)
1800a0b0:	e9030007 	bez      	r3, 0x1800a0be	// 1800a0be <DVP_IRQHandler_action+0x42>
				dvpirq_vector_table[loop] (loop,dvpirq_dev_table[loop],0);
1800a0b4:	1044      	lrw      	r2, 0x20002144	// 1800a0c4 <DVP_IRQHandler_action+0x48>
1800a0b6:	3001      	movi      	r0, 1
1800a0b8:	9221      	ld.w      	r1, (r2, 0x4)
1800a0ba:	3200      	movi      	r2, 0
1800a0bc:	7bcd      	jsr      	r3
		}
	}
}
1800a0be:	1492      	pop      	r4-r5, r15
1800a0c0:	2000214c 	.long	0x2000214c
1800a0c4:	20002144 	.long	0x20002144

1800a0c8 <hgdvp_open>:
}


static int32 hgdvp_open(struct dvp_device *p_dvp){
	struct hgdvp *dvp_hw = (struct hgdvp*)p_dvp;	
	struct hgdvp_hw *hw  = (struct hgdvp_hw *)dvp_hw->hw;
1800a0c8:	9043      	ld.w      	r2, (r0, 0xc)
	hw->CON |= BIT(0);
1800a0ca:	9260      	ld.w      	r3, (r2, 0x0)
1800a0cc:	ec630001 	ori      	r3, r3, 1
1800a0d0:	b260      	st.w      	r3, (r2, 0x0)
    IRQn &= 0x7FUL;
1800a0d2:	9066      	ld.w      	r3, (r0, 0x18)
    VIC->ISER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1800a0d4:	c4a354c1 	zext      	r1, r3, 6, 5
1800a0d8:	3201      	movi      	r2, 1
1800a0da:	e463201f 	andi      	r3, r3, 31
1800a0de:	c4624023 	lsl      	r3, r2, r3
	irq_enable(dvp_hw->irq_num);
	return 0;
}
1800a0e2:	3000      	movi      	r0, 0
1800a0e4:	1042      	lrw      	r2, 0xe000e100	// 1800a0ec <hgdvp_open+0x24>
1800a0e6:	d4220883 	str.w      	r3, (r2, r1 << 2)
1800a0ea:	783c      	jmp      	r15
1800a0ec:	e000e100 	.long	0xe000e100

1800a0f0 <hgdvp_ioctl>:
{
1800a0f0:	14d0      	push      	r15
	switch(ioctl_cmd){
1800a0f2:	390e      	cmphsi      	r1, 15
	struct hgdvp_hw *hw  = (struct hgdvp_hw *)dvp_hw->hw;
1800a0f4:	d9802003 	ld.w      	r12, (r0, 0xc)
	switch(ioctl_cmd){
1800a0f8:	085b      	bt      	0x1800a1ae	// 1800a1ae <hgdvp_ioctl+0xbe>
1800a0fa:	1003      	lrw      	r0, 0x18016e04	// 1800a104 <hgdvp_ioctl+0x14>
1800a0fc:	d0200880 	ldr.w      	r0, (r0, r1 << 2)
1800a100:	7800      	jmp      	r0
1800a102:	0000      	.short	0x0000
1800a104:	18016e04 	.long	0x18016e04
			hw->CON &= ~(BIT(1));
1800a108:	d86c2000 	ld.w      	r3, (r12, 0x0)
			if(param1 > 1){
1800a10c:	3a01      	cmphsi      	r2, 2
			hw->CON &= ~(BIT(1));
1800a10e:	3b81      	bclri      	r3, 1
1800a110:	dc6c2000 	st.w      	r3, (r12, 0x0)
			if(param1 > 1){
1800a114:	0c08      	bf      	0x1800a124	// 1800a124 <hgdvp_ioctl+0x34>
				os_printf("set FORMAT mode err\r\n");
1800a116:	110a      	lrw      	r0, 0x18016eda	// 1800a1bc <hgdvp_ioctl+0xcc>
1800a118:	e00014d6 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
				return RET_ERR; 
1800a11c:	3200      	movi      	r2, 0
1800a11e:	2a00      	subi      	r2, 1
}
1800a120:	6c0b      	mov      	r0, r2
1800a122:	1490      	pop      	r15
			hw->CON |= param1<<1;
1800a124:	d86c2000 	ld.w      	r3, (r12, 0x0)
1800a128:	5a08      	addu      	r0, r2, r2
1800a12a:	6c0c      	or      	r0, r3
1800a12c:	dc0c2000 	st.w      	r0, (r12, 0x0)
    int32  ret_val = RET_OK;	
1800a130:	3200      	movi      	r2, 0
1800a132:	07f7      	br      	0x1800a120	// 1800a120 <hgdvp_ioctl+0x30>
				hw->CON &= ~BIT(2);		
1800a134:	d86c2000 	ld.w      	r3, (r12, 0x0)
			if(param1)
1800a138:	e9020006 	bez      	r2, 0x1800a144	// 1800a144 <hgdvp_ioctl+0x54>
				hw->CON &= ~BIT(2);		
1800a13c:	3b82      	bclri      	r3, 2
1800a13e:	dc6c2000 	st.w      	r3, (r12, 0x0)
1800a142:	07f7      	br      	0x1800a130	// 1800a130 <hgdvp_ioctl+0x40>
				hw->CON |= BIT(2);			
1800a144:	ec630004 	ori      	r3, r3, 4
				hw->CON &= ~BIT(4);		
1800a148:	dc6c2000 	st.w      	r3, (r12, 0x0)
1800a14c:	07ea      	br      	0x1800a120	// 1800a120 <hgdvp_ioctl+0x30>
				hw->CON &= ~BIT(3);		
1800a14e:	d86c2000 	ld.w      	r3, (r12, 0x0)
			if(param1)
1800a152:	e9020004 	bez      	r2, 0x1800a15a	// 1800a15a <hgdvp_ioctl+0x6a>
				hw->CON &= ~BIT(3);		
1800a156:	3b83      	bclri      	r3, 3
1800a158:	07f3      	br      	0x1800a13e	// 1800a13e <hgdvp_ioctl+0x4e>
				hw->CON |= BIT(3);			
1800a15a:	ec630008 	ori      	r3, r3, 8
1800a15e:	07f5      	br      	0x1800a148	// 1800a148 <hgdvp_ioctl+0x58>
			if(param1){
1800a160:	e9020012 	bez      	r2, 0x1800a184	// 1800a184 <hgdvp_ioctl+0x94>
				hw->CON |= BIT(24);
1800a164:	d84c2000 	ld.w      	r2, (r12, 0x0)
1800a168:	3ab8      	bseti      	r2, 24
1800a16a:	dc4c2000 	st.w      	r2, (r12, 0x0)
				hw->CON &=~(BIT(25)|BIT(26));
1800a16e:	d84c2000 	ld.w      	r2, (r12, 0x0)
1800a172:	3a99      	bclri      	r2, 25
1800a174:	3a9a      	bclri      	r2, 26
1800a176:	dc4c2000 	st.w      	r2, (r12, 0x0)
				hw->CON |=(param2<<25);
1800a17a:	d84c2000 	ld.w      	r2, (r12, 0x0)
1800a17e:	4379      	lsli      	r3, r3, 25
1800a180:	6cc8      	or      	r3, r2
1800a182:	07de      	br      	0x1800a13e	// 1800a13e <hgdvp_ioctl+0x4e>
				hw->CON &= ~BIT(29);			
1800a184:	d86c2000 	ld.w      	r3, (r12, 0x0)
1800a188:	3b9d      	bclri      	r3, 29
1800a18a:	07df      	br      	0x1800a148	// 1800a148 <hgdvp_ioctl+0x58>
				hw->CON &= ~BIT(16);		
1800a18c:	d86c2000 	ld.w      	r3, (r12, 0x0)
			if(param1 == 0)
1800a190:	e9220004 	bnez      	r2, 0x1800a198	// 1800a198 <hgdvp_ioctl+0xa8>
				hw->CON &= ~BIT(16);		
1800a194:	3b90      	bclri      	r3, 16
1800a196:	07d9      	br      	0x1800a148	// 1800a148 <hgdvp_ioctl+0x58>
				hw->CON |= BIT(16);				
1800a198:	3bb0      	bseti      	r3, 16
1800a19a:	07d2      	br      	0x1800a13e	// 1800a13e <hgdvp_ioctl+0x4e>
				hw->CON &= ~BIT(4);		
1800a19c:	d86c2000 	ld.w      	r3, (r12, 0x0)
			if(param1 == 0)
1800a1a0:	e9220004 	bnez      	r2, 0x1800a1a8	// 1800a1a8 <hgdvp_ioctl+0xb8>
				hw->CON &= ~BIT(4);		
1800a1a4:	3b84      	bclri      	r3, 4
1800a1a6:	07d1      	br      	0x1800a148	// 1800a148 <hgdvp_ioctl+0x58>
				hw->CON |= BIT(4);				
1800a1a8:	ec630010 	ori      	r3, r3, 16
1800a1ac:	07c9      	br      	0x1800a13e	// 1800a13e <hgdvp_ioctl+0x4e>
			os_printf("NO DVP IOCTL:%d\r\n",ioctl_cmd);
1800a1ae:	1005      	lrw      	r0, 0x18016ef1	// 1800a1c0 <hgdvp_ioctl+0xd0>
1800a1b0:	e000148a 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
            ret_val = -ENOTSUPP;
1800a1b4:	ea02020b 	movi      	r2, 523
1800a1b8:	6c8a      	nor      	r2, r2
        break;
1800a1ba:	07b3      	br      	0x1800a120	// 1800a120 <hgdvp_ioctl+0x30>
1800a1bc:	18016eda 	.long	0x18016eda
1800a1c0:	18016ef1 	.long	0x18016ef1

1800a1c4 <hgdvp_set_baudrate>:
	pin_func(HG_DVP_DEVID,1);

	return 0;
}

static int32 hgdvp_set_baudrate(struct dvp_device *p_dvp,uint32 baudrate){
1800a1c4:	14d1      	push      	r4, r15
1800a1c6:	6d07      	mov      	r4, r1
	//struct hgdvp_hw *hw  = (struct hgdvp_hw *)dvp_hw->hw;
	uint8 m_cfg = 0;
#if defined(FPGA_SUPPORT)
	m_cfg = 240000000/baudrate - 1;
#else
	if(baudrate != 0)
1800a1c8:	e9010032 	bez      	r1, 0x1800a22c	// 1800a22c <hgdvp_set_baudrate+0x68>
		m_cfg = (peripheral_clock_get(HG_APB0_PT_DVP))/baudrate - 1;
1800a1cc:	3022      	movi      	r0, 34
1800a1ce:	e00037ef 	bsr      	0x180111ac	// 180111ac <peripheral_clock_get>
1800a1d2:	c4808024 	divu      	r4, r0, r4
1800a1d6:	2c00      	subi      	r4, 1
1800a1d8:	7510      	zextb      	r4, r4
	else
		m_cfg = 0x3f;
#endif
	
	_os_printf("%s:clock:%d\n",__FUNCTION__,peripheral_clock_get(HG_APB0_PT_DVP));
1800a1da:	3022      	movi      	r0, 34
1800a1dc:	e00037e8 	bsr      	0x180111ac	// 180111ac <peripheral_clock_get>
1800a1e0:	6c83      	mov      	r2, r0
1800a1e2:	1037      	lrw      	r1, 0x18016e40	// 1800a23c <hgdvp_set_baudrate+0x78>
1800a1e4:	1017      	lrw      	r0, 0x18016f04	// 1800a240 <hgdvp_set_baudrate+0x7c>
1800a1e6:	e000146f 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
	SYSCTRL->SYS_KEY = 0x3fac87e4;
1800a1ea:	ea234002 	movih      	r3, 16386
1800a1ee:	1056      	lrw      	r2, 0x3fac87e4	// 1800a244 <hgdvp_set_baudrate+0x80>
1800a1f0:	b340      	st.w      	r2, (r3, 0x0)
	SYSCTRL->CLK_CON3 &= ~(0x3f<<26);		
1800a1f2:	9354      	ld.w      	r2, (r3, 0x50)
1800a1f4:	c4025722 	zext      	r2, r2, 25, 0
1800a1f8:	b354      	st.w      	r2, (r3, 0x50)
	SYSCTRL->CLK_CON3 |= ((m_cfg&0x3f)<<26);		
1800a1fa:	9334      	ld.w      	r1, (r3, 0x50)
1800a1fc:	445a      	lsli      	r2, r4, 26
1800a1fe:	6c84      	or      	r2, r1
1800a200:	b354      	st.w      	r2, (r3, 0x50)
	if(m_cfg&0x40){
1800a202:	e4442040 	andi      	r2, r4, 64
1800a206:	e9020015 	bez      	r2, 0x1800a230	// 1800a230 <hgdvp_set_baudrate+0x6c>
		SYSCTRL->SYS_CON3 |= BIT(26);
1800a20a:	9344      	ld.w      	r2, (r3, 0x10)
1800a20c:	3aba      	bseti      	r2, 26
	}else
	{
		SYSCTRL->SYS_CON3 &= ~BIT(26);
1800a20e:	b344      	st.w      	r2, (r3, 0x10)
	}

	if(m_cfg&0x80){
1800a210:	7512      	sextb      	r4, r4
1800a212:	ea234002 	movih      	r3, 16386
		SYSCTRL->SYS_CON3 |= BIT(2);
1800a216:	9344      	ld.w      	r2, (r3, 0x10)
	if(m_cfg&0x80){
1800a218:	e9a4000f 	bhsz      	r4, 0x1800a236	// 1800a236 <hgdvp_set_baudrate+0x72>
		SYSCTRL->SYS_CON3 |= BIT(2);
1800a21c:	ec420004 	ori      	r2, r2, 4
	}else
	{
		SYSCTRL->SYS_CON3 &= ~BIT(2);
1800a220:	b344      	st.w      	r2, (r3, 0x10)
	}
	

	SYSCTRL->SYS_KEY = 0;
1800a222:	ea234002 	movih      	r3, 16386
1800a226:	3000      	movi      	r0, 0
1800a228:	b300      	st.w      	r0, (r3, 0x0)
	//vsync低有效 hsync高有效 
	//hw->CON = BIT(11);				//	


	return 0;
}
1800a22a:	1491      	pop      	r4, r15
		m_cfg = 0x3f;
1800a22c:	343f      	movi      	r4, 63
1800a22e:	07d6      	br      	0x1800a1da	// 1800a1da <hgdvp_set_baudrate+0x16>
		SYSCTRL->SYS_CON3 &= ~BIT(26);
1800a230:	9344      	ld.w      	r2, (r3, 0x10)
1800a232:	3a9a      	bclri      	r2, 26
1800a234:	07ed      	br      	0x1800a20e	// 1800a20e <hgdvp_set_baudrate+0x4a>
		SYSCTRL->SYS_CON3 &= ~BIT(2);
1800a236:	3a82      	bclri      	r2, 2
1800a238:	07f4      	br      	0x1800a220	// 1800a220 <hgdvp_set_baudrate+0x5c>
1800a23a:	0000      	.short	0x0000
1800a23c:	18016e40 	.long	0x18016e40
1800a240:	18016f04 	.long	0x18016f04
1800a244:	3fac87e4 	.long	0x3fac87e4

1800a248 <hgdvp_init>:
static int32 hgdvp_init(struct dvp_device *p_dvp){
1800a248:	14d0      	push      	r15
	SYSCTRL->CLK_CON2 |= BIT(31);
1800a24a:	ea234002 	movih      	r3, 16386
	pin_func(HG_DVP_DEVID,1);
1800a24e:	3101      	movi      	r1, 1
	SYSCTRL->CLK_CON2 |= BIT(31);
1800a250:	9353      	ld.w      	r2, (r3, 0x4c)
1800a252:	3abf      	bseti      	r2, 31
1800a254:	b353      	st.w      	r2, (r3, 0x4c)
	SYSCTRL->SYS_CON1 |= BIT(28); 
1800a256:	9342      	ld.w      	r2, (r3, 0x8)
1800a258:	3abc      	bseti      	r2, 28
1800a25a:	b342      	st.w      	r2, (r3, 0x8)
	SYSCTRL->CLK_CON1 &= ~(BIT(27)|BIT(28));
1800a25c:	9352      	ld.w      	r2, (r3, 0x48)
1800a25e:	3a9b      	bclri      	r2, 27
1800a260:	3a9c      	bclri      	r2, 28
1800a262:	b352      	st.w      	r2, (r3, 0x48)
	SYSCTRL->CLK_CON1 |= BIT(28);	
1800a264:	9352      	ld.w      	r2, (r3, 0x48)
1800a266:	3abc      	bseti      	r2, 28
1800a268:	b352      	st.w      	r2, (r3, 0x48)
	pin_func(HG_DVP_DEVID,1);
1800a26a:	3040      	movi      	r0, 64
1800a26c:	e3ffcf5e 	bsr      	0x18004128	// 18004128 <pin_func>
}
1800a270:	3000      	movi      	r0, 0
1800a272:	1490      	pop      	r15

1800a274 <hgdvp_close>:
static int32 hgdvp_close(struct dvp_device *p_dvp){
1800a274:	14d0      	push      	r15
	struct hgdvp_hw *hw  = (struct hgdvp_hw *)dvp_hw->hw;
1800a276:	9043      	ld.w      	r2, (r0, 0xc)
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1800a278:	3101      	movi      	r1, 1
	hw->CON &= ~BIT(0);
1800a27a:	9260      	ld.w      	r3, (r2, 0x0)
1800a27c:	3b80      	bclri      	r3, 0
1800a27e:	b260      	st.w      	r3, (r2, 0x0)
    IRQn &= 0x7FUL;
1800a280:	9066      	ld.w      	r3, (r0, 0x18)
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1800a282:	c4a354c2 	zext      	r2, r3, 6, 5
1800a286:	e463201f 	andi      	r3, r3, 31
1800a28a:	c4614023 	lsl      	r3, r1, r3
1800a28e:	221f      	addi      	r2, 32
1800a290:	1024      	lrw      	r1, 0xe000e100	// 1800a2a0 <hgdvp_close+0x2c>
1800a292:	d4410883 	str.w      	r3, (r1, r2 << 2)
	_os_printf("hgdvp_close...............................................................\r\n");
1800a296:	1004      	lrw      	r0, 0x18016e8d	// 1800a2a4 <hgdvp_close+0x30>
1800a298:	e0001416 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
}
1800a29c:	3000      	movi      	r0, 0
1800a29e:	1490      	pop      	r15
1800a2a0:	e000e100 	.long	0xe000e100
1800a2a4:	18016e8d 	.long	0x18016e8d

1800a2a8 <irq_dvp_enable>:
	struct hgdvp_hw *hw  = (struct hgdvp_hw *)dvp_hw->hw;
1800a2a8:	9003      	ld.w      	r0, (r0, 0xc)
1800a2aa:	2207      	addi      	r2, 8
1800a2ac:	3301      	movi      	r3, 1
	if(mode){
1800a2ae:	e9010007 	bez      	r1, 0x1800a2bc	// 1800a2bc <irq_dvp_enable+0x14>
		hw->CON |= BIT(irq+8);
1800a2b2:	9020      	ld.w      	r1, (r0, 0x0)
1800a2b4:	70c8      	lsl      	r3, r2
1800a2b6:	6cc4      	or      	r3, r1
		hw->CON &= ~BIT(irq+8);
1800a2b8:	b060      	st.w      	r3, (r0, 0x0)
}
1800a2ba:	783c      	jmp      	r15
		hw->CON &= ~BIT(irq+8);
1800a2bc:	9020      	ld.w      	r1, (r0, 0x0)
1800a2be:	70c8      	lsl      	r3, r2
1800a2c0:	c4612043 	andn      	r3, r1, r3
1800a2c4:	07fa      	br      	0x1800a2b8	// 1800a2b8 <irq_dvp_enable+0x10>
	...

1800a2c8 <dvpirq_register>:
int32 dvpirq_register(struct dvp_device *p_dvp,uint32 irq, dvp_irq_hdl isr, uint32 dev_id){
1800a2c8:	14d5      	push      	r4-r8, r15
1800a2ca:	6d07      	mov      	r4, r1
1800a2cc:	6d8b      	mov      	r6, r2
	struct hgdvp_hw *hw  = (struct hgdvp_hw *)dvp_hw->hw;
1800a2ce:	90e3      	ld.w      	r7, (r0, 0xc)
int32 dvpirq_register(struct dvp_device *p_dvp,uint32 irq, dvp_irq_hdl isr, uint32 dev_id){
1800a2d0:	6d43      	mov      	r5, r0
	request_irq(dvp_hw->irq_num, DVP_IRQHandler_action, p_dvp);
1800a2d2:	6c83      	mov      	r2, r0
1800a2d4:	102f      	lrw      	r1, 0x1800a07c	// 1800a310 <dvpirq_register+0x48>
int32 dvpirq_register(struct dvp_device *p_dvp,uint32 irq, dvp_irq_hdl isr, uint32 dev_id){
1800a2d6:	6e0f      	mov      	r8, r3
	request_irq(dvp_hw->irq_num, DVP_IRQHandler_action, p_dvp);
1800a2d8:	9006      	ld.w      	r0, (r0, 0x18)
1800a2da:	e3ffca01 	bsr      	0x180036dc	// 180036dc <request_irq>
	irq_dvp_enable(p_dvp, 1, irq);
1800a2de:	7490      	zextb      	r2, r4
1800a2e0:	6c17      	mov      	r0, r5
1800a2e2:	3101      	movi      	r1, 1
1800a2e4:	e3ffffe2 	bsr      	0x1800a2a8	// 1800a2a8 <irq_dvp_enable>
	dvpirq_vector_table[irq] = isr;
1800a2e8:	106b      	lrw      	r3, 0x2000214c	// 1800a314 <dvpirq_register+0x4c>
	dvpirq_dev_table[irq] = dev_id;
1800a2ea:	104c      	lrw      	r2, 0x20002144	// 1800a318 <dvpirq_register+0x50>
	os_printf("dvpirq_register:%d %x  %x\r\n",irq,(uint32)dvpirq_vector_table[irq],(uint32)isr);
1800a2ec:	6c53      	mov      	r1, r4
	dvpirq_vector_table[irq] = isr;
1800a2ee:	d4830886 	str.w      	r6, (r3, r4 << 2)
	dvpirq_dev_table[irq] = dev_id;
1800a2f2:	d4820888 	str.w      	r8, (r2, r4 << 2)
	hw->STA |= BIT(irq);
1800a2f6:	3301      	movi      	r3, 1
1800a2f8:	9741      	ld.w      	r2, (r7, 0x4)
1800a2fa:	70d0      	lsl      	r3, r4
1800a2fc:	6cc8      	or      	r3, r2
1800a2fe:	b761      	st.w      	r3, (r7, 0x4)
	os_printf("dvpirq_register:%d %x  %x\r\n",irq,(uint32)dvpirq_vector_table[irq],(uint32)isr);
1800a300:	6c9b      	mov      	r2, r6
1800a302:	6cdb      	mov      	r3, r6
1800a304:	1006      	lrw      	r0, 0x18016e70	// 1800a31c <dvpirq_register+0x54>
1800a306:	e00013df 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
}
1800a30a:	3000      	movi      	r0, 0
1800a30c:	1495      	pop      	r4-r8, r15
1800a30e:	0000      	.short	0x0000
1800a310:	1800a07c 	.long	0x1800a07c
1800a314:	2000214c 	.long	0x2000214c
1800a318:	20002144 	.long	0x20002144
1800a31c:	18016e70 	.long	0x18016e70

1800a320 <dvpirq_unregister>:
int32 dvpirq_unregister(struct dvp_device *p_dvp,uint32 irq){
1800a320:	14d2      	push      	r4-r5, r15
1800a322:	6d07      	mov      	r4, r1
	irq_dvp_enable(p_dvp, 0, irq);
1800a324:	7484      	zextb      	r2, r1
1800a326:	3100      	movi      	r1, 0
	struct hgdvp_hw *hw  = (struct hgdvp_hw *)dvp_hw->hw;
1800a328:	90a3      	ld.w      	r5, (r0, 0xc)
	irq_dvp_enable(p_dvp, 0, irq);
1800a32a:	e3ffffbf 	bsr      	0x1800a2a8	// 1800a2a8 <irq_dvp_enable>
	dvpirq_vector_table[irq] = NULL;
1800a32e:	3000      	movi      	r0, 0
1800a330:	1066      	lrw      	r3, 0x2000214c	// 1800a348 <dvpirq_unregister+0x28>
	hw->STA |= BIT(irq);
1800a332:	3101      	movi      	r1, 1
	dvpirq_vector_table[irq] = NULL;
1800a334:	d4830880 	str.w      	r0, (r3, r4 << 2)
	hw->STA |= BIT(irq);
1800a338:	7050      	lsl      	r1, r4
	dvpirq_dev_table[irq] = 0;
1800a33a:	1065      	lrw      	r3, 0x20002144	// 1800a34c <dvpirq_unregister+0x2c>
1800a33c:	d4830880 	str.w      	r0, (r3, r4 << 2)
	hw->STA |= BIT(irq);
1800a340:	9561      	ld.w      	r3, (r5, 0x4)
1800a342:	6c4c      	or      	r1, r3
1800a344:	b521      	st.w      	r1, (r5, 0x4)
}
1800a346:	1492      	pop      	r4-r5, r15
1800a348:	2000214c 	.long	0x2000214c
1800a34c:	20002144 	.long	0x20002144

1800a350 <hgdvp_attach>:
    .release_irq = dvpirq_unregister,
};



int32 hgdvp_attach(uint32 dev_id, struct hgdvp *dvp){
1800a350:	14d1      	push      	r4, r15
    dvp->opened          = 0;
1800a352:	815c      	ld.b      	r2, (r1, 0x1c)
1800a354:	3400      	movi      	r4, 0
    dvp->use_dma         = 0;
1800a356:	e44220fe 	andi      	r2, r2, 254
1800a35a:	c4445c01 	ins      	r2, r4, 1, 1
    IRQn &= 0x7FUL;
1800a35e:	9166      	ld.w      	r3, (r1, 0x18)
1800a360:	a15c      	st.b      	r2, (r1, 0x1c)
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1800a362:	ea0c0001 	movi      	r12, 1
    dvp->irq_hdl                   = NULL;
    //memset(dvp->irq_hdl,0,sizeof(dvp->irq_hdl));
    dvp->irq_data                  = 0;
	//memset(dvp->irq_data,0,sizeof(dvp->irq_data));
	dvp->dev.dev.ops = (const struct devobj_ops *)&dev_ops;
1800a366:	104a      	lrw      	r2, 0x18016e54	// 1800a38c <hgdvp_attach+0x3c>
1800a368:	b142      	st.w      	r2, (r1, 0x8)
1800a36a:	c4a354c2 	zext      	r2, r3, 6, 5
1800a36e:	e463201f 	andi      	r3, r3, 31
1800a372:	c46c4023 	lsl      	r3, r12, r3
1800a376:	221f      	addi      	r2, 32
1800a378:	ea8c0006 	lrw      	r12, 0xe000e100	// 1800a390 <hgdvp_attach+0x40>
    dvp->irq_hdl                   = NULL;
1800a37c:	b184      	st.w      	r4, (r1, 0x10)
    dvp->irq_data                  = 0;
1800a37e:	b185      	st.w      	r4, (r1, 0x14)
1800a380:	d44c0883 	str.w      	r3, (r12, r2 << 2)

    irq_disable(dvp->irq_num);
    dev_register(dev_id, (struct dev_obj *)dvp);	
1800a384:	e3ffc690 	bsr      	0x180030a4	// 180030a4 <dev_register>
	return 0;
}
1800a388:	6c13      	mov      	r0, r4
1800a38a:	1491      	pop      	r4, r15
1800a38c:	18016e54 	.long	0x18016e54
1800a390:	e000e100 	.long	0xe000e100

1800a394 <hgadc_v0_adc_channel_txw81x_rf_temperature>:
static int32 hgadc_v0_adc_channel_txw81x_rf_temperature(struct hgadc_v0 *dev, uint32 channel, uint32 enable) {

    #define GPIOC(offset)   (*((uint32 *)(0x40020C00+offset)))
    #define IO_NUM          (8)
    
    struct hgadc_v0_hw *hw  = (struct hgadc_v0_hw *)dev->hw;
1800a394:	9063      	ld.w      	r3, (r0, 0xc)
    __ASM volatile("mfcr %0, psr" : "=r"(result) : : "memory");
1800a396:	c0006021 	mfcr      	r1, cr<0, 0>
    __ASM volatile("psrclr ie");
1800a39a:	c0807020 	psrclr      	ie

        /* Close the interrupt to protect the RF register opreation */
        mask = disable_irq();


    if (ADC_CHANNEL_ENABLE == enable) {
1800a39e:	3a41      	cmpnei      	r2, 1
    return !(result & 0x40);
1800a3a0:	e4212040 	andi      	r1, r1, 64
1800a3a4:	081f      	bt      	0x1800a3e2	// 1800a3e2 <hgadc_v0_adc_channel_txw81x_rf_temperature+0x4e>

        /* connect to rf_temperature channel */
        *((uint32 *)(0x40019000 + 0x18))  = ( *((uint32 *)(0x40019000 + 0x18)) & ~(0xf<<27) ) | 0x8<<27;
1800a3a6:	1106      	lrw      	r0, 0x40019000	// 1800a43c <hgadc_v0_adc_channel_txw81x_rf_temperature+0xa8>
1800a3a8:	ea0c0088 	movi      	r12, 136
1800a3ac:	c70c482c 	lsli      	r12, r12, 24
1800a3b0:	9046      	ld.w      	r2, (r0, 0x18)
1800a3b2:	e58c1000 	subi      	r12, r12, 1
1800a3b6:	68b0      	and      	r2, r12
1800a3b8:	3abe      	bseti      	r2, 30
1800a3ba:	b046      	st.w      	r2, (r0, 0x18)
        //RF_TOUT & IO_OUT
        hw->ADKEY_CON = ( hw->ADKEY_CON &~ (0x7F << 4) ) | ((0x1<<10) | (0x1<<9));//PC8 
        #endif

        /* RF_TOUT */
        hw->ADKEY_CON = ( hw->ADKEY_CON &~ (0x7F << 4) ) | (0x1 << 10);
1800a3bc:	9340      	ld.w      	r2, (r3, 0x0)
1800a3be:	ea0007f0 	movi      	r0, 2032
1800a3c2:	6c02      	nor      	r0, r0
1800a3c4:	6880      	and      	r2, r0
1800a3c6:	ec420400 	ori      	r2, r2, 1024
1800a3ca:	b340      	st.w      	r2, (r3, 0x0)
1800a3cc:	3314      	movi      	r3, 20
    __ASM volatile("nop");
1800a3ce:	6c03      	mov      	r0, r0
1800a3d0:	2b00      	subi      	r3, 1

        /* Wait stable */
        for (i = 0; i < 20; i++) {
1800a3d2:	e923fffe 	bnez      	r3, 0x1800a3ce	// 1800a3ce <hgadc_v0_adc_channel_txw81x_rf_temperature+0x3a>
		
        hw->ADKEY_CON &= ~(0x7F << 4);
    }

    /* Enable interrupt */
    enable_irq(mask);
1800a3d6:	e9010004 	bez      	r1, 0x1800a3de	// 1800a3de <hgadc_v0_adc_channel_txw81x_rf_temperature+0x4a>
    __ASM volatile("psrset ie");
1800a3da:	c0807420 	psrset      	ie

    return RET_OK;

}
1800a3de:	3000      	movi      	r0, 0
1800a3e0:	783c      	jmp      	r15
    } else if (ADC_CHANNEL_SUSPEND == enable) {
1800a3e2:	3a42      	cmpnei      	r2, 2
1800a3e4:	0818      	bt      	0x1800a414	// 1800a414 <hgadc_v0_adc_channel_txw81x_rf_temperature+0x80>
		*((uint32 *)(0x40019000 + 0x18))  &= ~(0xf<<27);
1800a3e6:	1016      	lrw      	r0, 0x40019000	// 1800a43c <hgadc_v0_adc_channel_txw81x_rf_temperature+0xa8>
1800a3e8:	ea0c0088 	movi      	r12, 136
1800a3ec:	c70c482c 	lsli      	r12, r12, 24
1800a3f0:	9046      	ld.w      	r2, (r0, 0x18)
1800a3f2:	e58c1000 	subi      	r12, r12, 1
1800a3f6:	68b0      	and      	r2, r12
1800a3f8:	b046      	st.w      	r2, (r0, 0x18)
        hw->ADKEY_CON &= ~(0x7F << 4);
1800a3fa:	9340      	ld.w      	r2, (r3, 0x0)
1800a3fc:	ea0007f0 	movi      	r0, 2032
1800a400:	6c02      	nor      	r0, r0
1800a402:	6880      	and      	r2, r0
1800a404:	b340      	st.w      	r2, (r3, 0x0)
        hw->ADKEY_DATA &= ~(0xFFF);
1800a406:	9342      	ld.w      	r2, (r3, 0x8)
1800a408:	ea000fff 	movi      	r0, 4095
1800a40c:	6c02      	nor      	r0, r0
1800a40e:	6880      	and      	r2, r0
1800a410:	b342      	st.w      	r2, (r3, 0x8)
1800a412:	07e2      	br      	0x1800a3d6	// 1800a3d6 <hgadc_v0_adc_channel_txw81x_rf_temperature+0x42>
    } else if (ADC_CHANNEL_DISABLE == enable) {
1800a414:	3a43      	cmpnei      	r2, 3
1800a416:	0be0      	bt      	0x1800a3d6	// 1800a3d6 <hgadc_v0_adc_channel_txw81x_rf_temperature+0x42>
		*((uint32 *)(0x40019000 + 0x18))  &= ~(0xf<<27);
1800a418:	1009      	lrw      	r0, 0x40019000	// 1800a43c <hgadc_v0_adc_channel_txw81x_rf_temperature+0xa8>
1800a41a:	ea0c0088 	movi      	r12, 136
1800a41e:	c70c482c 	lsli      	r12, r12, 24
1800a422:	9046      	ld.w      	r2, (r0, 0x18)
1800a424:	e58c1000 	subi      	r12, r12, 1
1800a428:	68b0      	and      	r2, r12
1800a42a:	b046      	st.w      	r2, (r0, 0x18)
        hw->ADKEY_CON &= ~(0x7F << 4);
1800a42c:	9340      	ld.w      	r2, (r3, 0x0)
1800a42e:	ea0007f0 	movi      	r0, 2032
1800a432:	6c02      	nor      	r0, r0
1800a434:	6880      	and      	r2, r0
1800a436:	b340      	st.w      	r2, (r3, 0x0)
1800a438:	07cf      	br      	0x1800a3d6	// 1800a3d6 <hgadc_v0_adc_channel_txw81x_rf_temperature+0x42>
1800a43a:	0000      	.short	0x0000
1800a43c:	40019000 	.long	0x40019000

1800a440 <hgadc_v0_adc_channel_rf_vtune>:
}


static int32 hgadc_v0_adc_channel_rf_vtune(struct hgadc_v0 *dev, uint32 channel, uint32 enable)
{
    struct hgadc_v0_hw *hw  = (struct hgadc_v0_hw *)dev->hw;
1800a440:	9063      	ld.w      	r3, (r0, 0xc)
    __ASM volatile("mfcr %0, psr" : "=r"(result) : : "memory");
1800a442:	c0006021 	mfcr      	r1, cr<0, 0>
    __ASM volatile("psrclr ie");
1800a446:	c0807020 	psrclr      	ie
    uint32 i = 0;

    /* Close the interrupt to protect the RF register opreation */
    mask = disable_irq();

    if (ADC_CHANNEL_ENABLE == enable) {
1800a44a:	3a41      	cmpnei      	r2, 1
    return !(result & 0x40);
1800a44c:	e4212040 	andi      	r1, r1, 64
1800a450:	081b      	bt      	0x1800a486	// 1800a486 <hgadc_v0_adc_channel_rf_vtune+0x46>
        
        //LO的模拟测试使能信号开启  select vtune to RF_TOUT (RFSYS_REG0:0x40019000)
        (*(uint32 *)0x40019000) = ((*(uint32 *)0x40019000) & ~(15<< 7)) | 0x1<<7 | 0x4<<8;
1800a452:	1107      	lrw      	r0, 0x40019000	// 1800a4ec <hgadc_v0_adc_channel_rf_vtune+0xac>
1800a454:	ea0c0780 	movi      	r12, 1920
1800a458:	6f32      	nor      	r12, r12
1800a45a:	9040      	ld.w      	r2, (r0, 0x0)
1800a45c:	68b0      	and      	r2, r12
1800a45e:	ec420480 	ori      	r2, r2, 1152
1800a462:	b040      	st.w      	r2, (r0, 0x0)

        //AUXPEN选择  RF_TOUT放到ADKEY0
        hw->ADKEY_CON = (hw->ADKEY_CON &~ (0xF << 8) ) | (0x4 << 8);
1800a464:	9340      	ld.w      	r2, (r3, 0x0)
1800a466:	ea000f00 	movi      	r0, 3840
1800a46a:	6c02      	nor      	r0, r0
1800a46c:	6880      	and      	r2, r0
1800a46e:	ec420400 	ori      	r2, r2, 1024
1800a472:	b340      	st.w      	r2, (r3, 0x0)
1800a474:	3332      	movi      	r3, 50
    __ASM volatile("nop");
1800a476:	6c03      	mov      	r0, r0
1800a478:	2b00      	subi      	r3, 1

        /* Wait stable */
        for (i = 0; i < 50; i++) {
1800a47a:	e923fffe 	bnez      	r3, 0x1800a476	// 1800a476 <hgadc_v0_adc_channel_rf_vtune+0x36>
            __NOP();
        }
    }

    /* Enable interrupt */
    enable_irq(mask);
1800a47e:	e9210034 	bnez      	r1, 0x1800a4e6	// 1800a4e6 <hgadc_v0_adc_channel_rf_vtune+0xa6>

    return RET_OK;

}
1800a482:	3000      	movi      	r0, 0
1800a484:	783c      	jmp      	r15
    } else if (ADC_CHANNEL_SUSPEND == enable) {
1800a486:	3a42      	cmpnei      	r2, 2
1800a488:	081a      	bt      	0x1800a4bc	// 1800a4bc <hgadc_v0_adc_channel_rf_vtune+0x7c>
        (*(uint32 *)0x40019000) = ((*(uint32 *)0x40019000) & ~(15<< 7));
1800a48a:	1019      	lrw      	r0, 0x40019000	// 1800a4ec <hgadc_v0_adc_channel_rf_vtune+0xac>
1800a48c:	ea0c0780 	movi      	r12, 1920
1800a490:	6f32      	nor      	r12, r12
1800a492:	9040      	ld.w      	r2, (r0, 0x0)
1800a494:	68b0      	and      	r2, r12
1800a496:	b040      	st.w      	r2, (r0, 0x0)
        hw->ADKEY_CON &= ~(0xF << 8);
1800a498:	9340      	ld.w      	r2, (r3, 0x0)
1800a49a:	ea000f00 	movi      	r0, 3840
1800a49e:	6c02      	nor      	r0, r0
1800a4a0:	6880      	and      	r2, r0
1800a4a2:	b340      	st.w      	r2, (r3, 0x0)
        hw->ADKEY_DATA &= ~(0xFFF);
1800a4a4:	9342      	ld.w      	r2, (r3, 0x8)
1800a4a6:	ea000fff 	movi      	r0, 4095
1800a4aa:	6c02      	nor      	r0, r0
1800a4ac:	6880      	and      	r2, r0
1800a4ae:	b342      	st.w      	r2, (r3, 0x8)
1800a4b0:	3332      	movi      	r3, 50
1800a4b2:	6c03      	mov      	r0, r0
1800a4b4:	2b00      	subi      	r3, 1
        for (i = 0; i < 50; i++) {
1800a4b6:	e923fffe 	bnez      	r3, 0x1800a4b2	// 1800a4b2 <hgadc_v0_adc_channel_rf_vtune+0x72>
1800a4ba:	07e2      	br      	0x1800a47e	// 1800a47e <hgadc_v0_adc_channel_rf_vtune+0x3e>
    } else if (ADC_CHANNEL_DISABLE == enable) {
1800a4bc:	3a43      	cmpnei      	r2, 3
1800a4be:	0be0      	bt      	0x1800a47e	// 1800a47e <hgadc_v0_adc_channel_rf_vtune+0x3e>
        (*(uint32 *)0x40019000) = ((*(uint32 *)0x40019000) & ~(15<< 7));
1800a4c0:	100b      	lrw      	r0, 0x40019000	// 1800a4ec <hgadc_v0_adc_channel_rf_vtune+0xac>
1800a4c2:	ea0c0780 	movi      	r12, 1920
1800a4c6:	6f32      	nor      	r12, r12
1800a4c8:	9040      	ld.w      	r2, (r0, 0x0)
1800a4ca:	68b0      	and      	r2, r12
1800a4cc:	b040      	st.w      	r2, (r0, 0x0)
        hw->ADKEY_CON &= ~(0xF << 8);
1800a4ce:	9340      	ld.w      	r2, (r3, 0x0)
1800a4d0:	ea000f00 	movi      	r0, 3840
1800a4d4:	6c02      	nor      	r0, r0
1800a4d6:	6880      	and      	r2, r0
1800a4d8:	b340      	st.w      	r2, (r3, 0x0)
1800a4da:	3314      	movi      	r3, 20
1800a4dc:	6c03      	mov      	r0, r0
1800a4de:	2b00      	subi      	r3, 1
        for (i = 0; i < 20; i++) {
1800a4e0:	e923fffe 	bnez      	r3, 0x1800a4dc	// 1800a4dc <hgadc_v0_adc_channel_rf_vtune+0x9c>
1800a4e4:	07cd      	br      	0x1800a47e	// 1800a47e <hgadc_v0_adc_channel_rf_vtune+0x3e>
    __ASM volatile("psrset ie");
1800a4e6:	c0807420 	psrset      	ie
1800a4ea:	07cc      	br      	0x1800a482	// 1800a482 <hgadc_v0_adc_channel_rf_vtune+0x42>
1800a4ec:	40019000 	.long	0x40019000

1800a4f0 <hgadc_v0_adc_channel_rf_vco_vdd>:

static int32 hgadc_v0_adc_channel_rf_vco_vdd(struct hgadc_v0 *dev, uint32 channel, uint32 enable)
{
    struct hgadc_v0_hw *hw  = (struct hgadc_v0_hw *)dev->hw;
1800a4f0:	9063      	ld.w      	r3, (r0, 0xc)
    __ASM volatile("mfcr %0, psr" : "=r"(result) : : "memory");
1800a4f2:	c0006021 	mfcr      	r1, cr<0, 0>
    __ASM volatile("psrclr ie");
1800a4f6:	c0807020 	psrclr      	ie
    uint32 i = 0;

    /* Close the interrupt to protect the RF register opreation */
    mask = disable_irq();

    if (ADC_CHANNEL_ENABLE == enable) {
1800a4fa:	3a41      	cmpnei      	r2, 1
    return !(result & 0x40);
1800a4fc:	e4212040 	andi      	r1, r1, 64
1800a500:	081b      	bt      	0x1800a536	// 1800a536 <hgadc_v0_adc_channel_rf_vco_vdd+0x46>
        
        /*ADKEY0采样vco_vdd电压*/	
        (*(uint32 *)(0x40019000)) = ((*(uint32 *)(0x40019000)) & ~(15<< 7)) | 0x1<<7 | 0x0<<8;
1800a502:	1107      	lrw      	r0, 0x40019000	// 1800a59c <hgadc_v0_adc_channel_rf_vco_vdd+0xac>
1800a504:	ea0c0780 	movi      	r12, 1920
1800a508:	6f32      	nor      	r12, r12
1800a50a:	9040      	ld.w      	r2, (r0, 0x0)
1800a50c:	68b0      	and      	r2, r12
1800a50e:	ec420080 	ori      	r2, r2, 128
1800a512:	b040      	st.w      	r2, (r0, 0x0)

        //AUXPEN选择  RF_TOUT放到ADKEY0
        hw->ADKEY_CON = (hw->ADKEY_CON &~ (0xF << 8) ) | (0x4 << 8);
1800a514:	9340      	ld.w      	r2, (r3, 0x0)
1800a516:	ea000f00 	movi      	r0, 3840
1800a51a:	6c02      	nor      	r0, r0
1800a51c:	6880      	and      	r2, r0
1800a51e:	ec420400 	ori      	r2, r2, 1024
1800a522:	b340      	st.w      	r2, (r3, 0x0)
1800a524:	3332      	movi      	r3, 50
    __ASM volatile("nop");
1800a526:	6c03      	mov      	r0, r0
1800a528:	2b00      	subi      	r3, 1

        /* Wait stable */
        for (i = 0; i < 50; i++) {
1800a52a:	e923fffe 	bnez      	r3, 0x1800a526	// 1800a526 <hgadc_v0_adc_channel_rf_vco_vdd+0x36>
            __NOP();
        }
    }

    /* Enable interrupt */
    enable_irq(mask);
1800a52e:	e9210034 	bnez      	r1, 0x1800a596	// 1800a596 <hgadc_v0_adc_channel_rf_vco_vdd+0xa6>

    return RET_OK;

}
1800a532:	3000      	movi      	r0, 0
1800a534:	783c      	jmp      	r15
    } else if (ADC_CHANNEL_SUSPEND == enable) {
1800a536:	3a42      	cmpnei      	r2, 2
1800a538:	081a      	bt      	0x1800a56c	// 1800a56c <hgadc_v0_adc_channel_rf_vco_vdd+0x7c>
        (*(uint32 *)0x40019000) = ((*(uint32 *)0x40019000) & ~(15<< 7));
1800a53a:	1019      	lrw      	r0, 0x40019000	// 1800a59c <hgadc_v0_adc_channel_rf_vco_vdd+0xac>
1800a53c:	ea0c0780 	movi      	r12, 1920
1800a540:	6f32      	nor      	r12, r12
1800a542:	9040      	ld.w      	r2, (r0, 0x0)
1800a544:	68b0      	and      	r2, r12
1800a546:	b040      	st.w      	r2, (r0, 0x0)
        hw->ADKEY_CON &= ~(0xF << 8);
1800a548:	9340      	ld.w      	r2, (r3, 0x0)
1800a54a:	ea000f00 	movi      	r0, 3840
1800a54e:	6c02      	nor      	r0, r0
1800a550:	6880      	and      	r2, r0
1800a552:	b340      	st.w      	r2, (r3, 0x0)
        hw->ADKEY_DATA &= ~(0xFFF);
1800a554:	9342      	ld.w      	r2, (r3, 0x8)
1800a556:	ea000fff 	movi      	r0, 4095
1800a55a:	6c02      	nor      	r0, r0
1800a55c:	6880      	and      	r2, r0
1800a55e:	b342      	st.w      	r2, (r3, 0x8)
1800a560:	3332      	movi      	r3, 50
1800a562:	6c03      	mov      	r0, r0
1800a564:	2b00      	subi      	r3, 1
        for (i = 0; i < 50; i++) {
1800a566:	e923fffe 	bnez      	r3, 0x1800a562	// 1800a562 <hgadc_v0_adc_channel_rf_vco_vdd+0x72>
1800a56a:	07e2      	br      	0x1800a52e	// 1800a52e <hgadc_v0_adc_channel_rf_vco_vdd+0x3e>
    } else if (ADC_CHANNEL_DISABLE == enable) {
1800a56c:	3a43      	cmpnei      	r2, 3
1800a56e:	0be0      	bt      	0x1800a52e	// 1800a52e <hgadc_v0_adc_channel_rf_vco_vdd+0x3e>
        (*(uint32 *)0x40019000) = ((*(uint32 *)0x40019000) & ~(15<< 7));
1800a570:	100b      	lrw      	r0, 0x40019000	// 1800a59c <hgadc_v0_adc_channel_rf_vco_vdd+0xac>
1800a572:	ea0c0780 	movi      	r12, 1920
1800a576:	6f32      	nor      	r12, r12
1800a578:	9040      	ld.w      	r2, (r0, 0x0)
1800a57a:	68b0      	and      	r2, r12
1800a57c:	b040      	st.w      	r2, (r0, 0x0)
        hw->ADKEY_CON &= ~(0xF << 8);
1800a57e:	9340      	ld.w      	r2, (r3, 0x0)
1800a580:	ea000f00 	movi      	r0, 3840
1800a584:	6c02      	nor      	r0, r0
1800a586:	6880      	and      	r2, r0
1800a588:	b340      	st.w      	r2, (r3, 0x0)
1800a58a:	3314      	movi      	r3, 20
1800a58c:	6c03      	mov      	r0, r0
1800a58e:	2b00      	subi      	r3, 1
        for (i = 0; i < 20; i++) {
1800a590:	e923fffe 	bnez      	r3, 0x1800a58c	// 1800a58c <hgadc_v0_adc_channel_rf_vco_vdd+0x9c>
1800a594:	07cd      	br      	0x1800a52e	// 1800a52e <hgadc_v0_adc_channel_rf_vco_vdd+0x3e>
    __ASM volatile("psrset ie");
1800a596:	c0807420 	psrset      	ie
1800a59a:	07cc      	br      	0x1800a532	// 1800a532 <hgadc_v0_adc_channel_rf_vco_vdd+0x42>
1800a59c:	40019000 	.long	0x40019000

1800a5a0 <hgadc_v0_adc_channel_rf_vdd_div>:


static int32 hgadc_v0_adc_channel_rf_vdd_div(struct hgadc_v0 *dev, uint32 channel, uint32 enable)
{
    struct hgadc_v0_hw *hw  = (struct hgadc_v0_hw *)dev->hw;
1800a5a0:	9063      	ld.w      	r3, (r0, 0xc)
    __ASM volatile("mfcr %0, psr" : "=r"(result) : : "memory");
1800a5a2:	c0006021 	mfcr      	r1, cr<0, 0>
    __ASM volatile("psrclr ie");
1800a5a6:	c0807020 	psrclr      	ie
    uint32 i = 0;

    /* Close the interrupt to protect the RF register opreation */
    mask = disable_irq();

    if (ADC_CHANNEL_ENABLE == enable) {
1800a5aa:	3a41      	cmpnei      	r2, 1
    return !(result & 0x40);
1800a5ac:	e4212040 	andi      	r1, r1, 64
1800a5b0:	081b      	bt      	0x1800a5e6	// 1800a5e6 <hgadc_v0_adc_channel_rf_vdd_div+0x46>
        
        /*ADKEY0采样vco_vdd电压*/	
        (*(uint32 *)(0x40019000)) = ((*(uint32 *)(0x40019000)) & ~(15<< 7)) | 0x1<<7 | 0x2<<8;
1800a5b2:	1107      	lrw      	r0, 0x40019000	// 1800a64c <hgadc_v0_adc_channel_rf_vdd_div+0xac>
1800a5b4:	ea0c0780 	movi      	r12, 1920
1800a5b8:	6f32      	nor      	r12, r12
1800a5ba:	9040      	ld.w      	r2, (r0, 0x0)
1800a5bc:	68b0      	and      	r2, r12
1800a5be:	ec420280 	ori      	r2, r2, 640
1800a5c2:	b040      	st.w      	r2, (r0, 0x0)

        //AUXPEN选择  RF_TOUT放到ADKEY0
        hw->ADKEY_CON = (hw->ADKEY_CON &~ (0xF << 8) ) | (0x4 << 8);
1800a5c4:	9340      	ld.w      	r2, (r3, 0x0)
1800a5c6:	ea000f00 	movi      	r0, 3840
1800a5ca:	6c02      	nor      	r0, r0
1800a5cc:	6880      	and      	r2, r0
1800a5ce:	ec420400 	ori      	r2, r2, 1024
1800a5d2:	b340      	st.w      	r2, (r3, 0x0)
1800a5d4:	3332      	movi      	r3, 50
    __ASM volatile("nop");
1800a5d6:	6c03      	mov      	r0, r0
1800a5d8:	2b00      	subi      	r3, 1

        /* Wait stable */
        for (i = 0; i < 50; i++) {
1800a5da:	e923fffe 	bnez      	r3, 0x1800a5d6	// 1800a5d6 <hgadc_v0_adc_channel_rf_vdd_div+0x36>
            __NOP();
        }
    }

    /* Enable interrupt */
    enable_irq(mask);
1800a5de:	e9210034 	bnez      	r1, 0x1800a646	// 1800a646 <hgadc_v0_adc_channel_rf_vdd_div+0xa6>

    return RET_OK;

}
1800a5e2:	3000      	movi      	r0, 0
1800a5e4:	783c      	jmp      	r15
    } else if (ADC_CHANNEL_SUSPEND == enable) {
1800a5e6:	3a42      	cmpnei      	r2, 2
1800a5e8:	081a      	bt      	0x1800a61c	// 1800a61c <hgadc_v0_adc_channel_rf_vdd_div+0x7c>
        (*(uint32 *)0x40019000) = ((*(uint32 *)0x40019000) & ~(15<< 7));
1800a5ea:	1019      	lrw      	r0, 0x40019000	// 1800a64c <hgadc_v0_adc_channel_rf_vdd_div+0xac>
1800a5ec:	ea0c0780 	movi      	r12, 1920
1800a5f0:	6f32      	nor      	r12, r12
1800a5f2:	9040      	ld.w      	r2, (r0, 0x0)
1800a5f4:	68b0      	and      	r2, r12
1800a5f6:	b040      	st.w      	r2, (r0, 0x0)
        hw->ADKEY_CON &= ~(0xF << 8);
1800a5f8:	9340      	ld.w      	r2, (r3, 0x0)
1800a5fa:	ea000f00 	movi      	r0, 3840
1800a5fe:	6c02      	nor      	r0, r0
1800a600:	6880      	and      	r2, r0
1800a602:	b340      	st.w      	r2, (r3, 0x0)
        hw->ADKEY_DATA &= ~(0xFFF);
1800a604:	9342      	ld.w      	r2, (r3, 0x8)
1800a606:	ea000fff 	movi      	r0, 4095
1800a60a:	6c02      	nor      	r0, r0
1800a60c:	6880      	and      	r2, r0
1800a60e:	b342      	st.w      	r2, (r3, 0x8)
1800a610:	3332      	movi      	r3, 50
1800a612:	6c03      	mov      	r0, r0
1800a614:	2b00      	subi      	r3, 1
        for (i = 0; i < 50; i++) {
1800a616:	e923fffe 	bnez      	r3, 0x1800a612	// 1800a612 <hgadc_v0_adc_channel_rf_vdd_div+0x72>
1800a61a:	07e2      	br      	0x1800a5de	// 1800a5de <hgadc_v0_adc_channel_rf_vdd_div+0x3e>
    } else if (ADC_CHANNEL_DISABLE == enable) {
1800a61c:	3a43      	cmpnei      	r2, 3
1800a61e:	0be0      	bt      	0x1800a5de	// 1800a5de <hgadc_v0_adc_channel_rf_vdd_div+0x3e>
        (*(uint32 *)0x40019000) = ((*(uint32 *)0x40019000) & ~(15<< 7));
1800a620:	100b      	lrw      	r0, 0x40019000	// 1800a64c <hgadc_v0_adc_channel_rf_vdd_div+0xac>
1800a622:	ea0c0780 	movi      	r12, 1920
1800a626:	6f32      	nor      	r12, r12
1800a628:	9040      	ld.w      	r2, (r0, 0x0)
1800a62a:	68b0      	and      	r2, r12
1800a62c:	b040      	st.w      	r2, (r0, 0x0)
        hw->ADKEY_CON &= ~(0xF << 8);
1800a62e:	9340      	ld.w      	r2, (r3, 0x0)
1800a630:	ea000f00 	movi      	r0, 3840
1800a634:	6c02      	nor      	r0, r0
1800a636:	6880      	and      	r2, r0
1800a638:	b340      	st.w      	r2, (r3, 0x0)
1800a63a:	3314      	movi      	r3, 20
1800a63c:	6c03      	mov      	r0, r0
1800a63e:	2b00      	subi      	r3, 1
        for (i = 0; i < 20; i++) {
1800a640:	e923fffe 	bnez      	r3, 0x1800a63c	// 1800a63c <hgadc_v0_adc_channel_rf_vdd_div+0x9c>
1800a644:	07cd      	br      	0x1800a5de	// 1800a5de <hgadc_v0_adc_channel_rf_vdd_div+0x3e>
    __ASM volatile("psrset ie");
1800a646:	c0807420 	psrset      	ie
1800a64a:	07cc      	br      	0x1800a5e2	// 1800a5e2 <hgadc_v0_adc_channel_rf_vdd_div+0x42>
1800a64c:	40019000 	.long	0x40019000

1800a650 <hgadc_v0_adc_channel_rf_vdd_pfd>:

static int32 hgadc_v0_adc_channel_rf_vdd_pfd(struct hgadc_v0 *dev, uint32 channel, uint32 enable)
{
    struct hgadc_v0_hw *hw  = (struct hgadc_v0_hw *)dev->hw;
1800a650:	9063      	ld.w      	r3, (r0, 0xc)
    __ASM volatile("mfcr %0, psr" : "=r"(result) : : "memory");
1800a652:	c0006021 	mfcr      	r1, cr<0, 0>
    __ASM volatile("psrclr ie");
1800a656:	c0807020 	psrclr      	ie
    uint32 i = 0;

    /* Close the interrupt to protect the RF register opreation */
    mask = disable_irq();

    if (ADC_CHANNEL_ENABLE == enable) {
1800a65a:	3a41      	cmpnei      	r2, 1
    return !(result & 0x40);
1800a65c:	e4212040 	andi      	r1, r1, 64
1800a660:	081b      	bt      	0x1800a696	// 1800a696 <hgadc_v0_adc_channel_rf_vdd_pfd+0x46>
        
        /*ADKEY0采样pfd电压*/	
        (*(uint32 *)(0x40019000)) = ((*(uint32 *)(0x40019000)) & ~(15<< 7)) | 0x0<<7 | 0x1<<8;
1800a662:	1107      	lrw      	r0, 0x40019000	// 1800a6fc <hgadc_v0_adc_channel_rf_vdd_pfd+0xac>
1800a664:	ea0c0780 	movi      	r12, 1920
1800a668:	6f32      	nor      	r12, r12
1800a66a:	9040      	ld.w      	r2, (r0, 0x0)
1800a66c:	68b0      	and      	r2, r12
1800a66e:	ec420100 	ori      	r2, r2, 256
1800a672:	b040      	st.w      	r2, (r0, 0x0)

        //AUXPEN选择  RF_TOUT放到ADKEY0
        hw->ADKEY_CON = (hw->ADKEY_CON &~ (0xF << 8) ) | (0x4 << 8);
1800a674:	9340      	ld.w      	r2, (r3, 0x0)
1800a676:	ea000f00 	movi      	r0, 3840
1800a67a:	6c02      	nor      	r0, r0
1800a67c:	6880      	and      	r2, r0
1800a67e:	ec420400 	ori      	r2, r2, 1024
1800a682:	b340      	st.w      	r2, (r3, 0x0)
1800a684:	3332      	movi      	r3, 50
    __ASM volatile("nop");
1800a686:	6c03      	mov      	r0, r0
1800a688:	2b00      	subi      	r3, 1

        /* Wait stable */
        for (i = 0; i < 50; i++) {
1800a68a:	e923fffe 	bnez      	r3, 0x1800a686	// 1800a686 <hgadc_v0_adc_channel_rf_vdd_pfd+0x36>
            __NOP();
        }
    }

    /* Enable interrupt */
    enable_irq(mask);
1800a68e:	e9210034 	bnez      	r1, 0x1800a6f6	// 1800a6f6 <hgadc_v0_adc_channel_rf_vdd_pfd+0xa6>

    return RET_OK;

}
1800a692:	3000      	movi      	r0, 0
1800a694:	783c      	jmp      	r15
    } else if (ADC_CHANNEL_SUSPEND == enable) {
1800a696:	3a42      	cmpnei      	r2, 2
1800a698:	081a      	bt      	0x1800a6cc	// 1800a6cc <hgadc_v0_adc_channel_rf_vdd_pfd+0x7c>
        (*(uint32 *)0x40019000) = ((*(uint32 *)0x40019000) & ~(15<< 7));
1800a69a:	1019      	lrw      	r0, 0x40019000	// 1800a6fc <hgadc_v0_adc_channel_rf_vdd_pfd+0xac>
1800a69c:	ea0c0780 	movi      	r12, 1920
1800a6a0:	6f32      	nor      	r12, r12
1800a6a2:	9040      	ld.w      	r2, (r0, 0x0)
1800a6a4:	68b0      	and      	r2, r12
1800a6a6:	b040      	st.w      	r2, (r0, 0x0)
        hw->ADKEY_CON &= ~(0xF << 8);
1800a6a8:	9340      	ld.w      	r2, (r3, 0x0)
1800a6aa:	ea000f00 	movi      	r0, 3840
1800a6ae:	6c02      	nor      	r0, r0
1800a6b0:	6880      	and      	r2, r0
1800a6b2:	b340      	st.w      	r2, (r3, 0x0)
        hw->ADKEY_DATA &= ~(0xFFF);
1800a6b4:	9342      	ld.w      	r2, (r3, 0x8)
1800a6b6:	ea000fff 	movi      	r0, 4095
1800a6ba:	6c02      	nor      	r0, r0
1800a6bc:	6880      	and      	r2, r0
1800a6be:	b342      	st.w      	r2, (r3, 0x8)
1800a6c0:	3332      	movi      	r3, 50
1800a6c2:	6c03      	mov      	r0, r0
1800a6c4:	2b00      	subi      	r3, 1
        for (i = 0; i < 50; i++) {
1800a6c6:	e923fffe 	bnez      	r3, 0x1800a6c2	// 1800a6c2 <hgadc_v0_adc_channel_rf_vdd_pfd+0x72>
1800a6ca:	07e2      	br      	0x1800a68e	// 1800a68e <hgadc_v0_adc_channel_rf_vdd_pfd+0x3e>
    } else if (ADC_CHANNEL_DISABLE == enable) {
1800a6cc:	3a43      	cmpnei      	r2, 3
1800a6ce:	0be0      	bt      	0x1800a68e	// 1800a68e <hgadc_v0_adc_channel_rf_vdd_pfd+0x3e>
        (*(uint32 *)0x40019000) = ((*(uint32 *)0x40019000) & ~(15<< 7));
1800a6d0:	100b      	lrw      	r0, 0x40019000	// 1800a6fc <hgadc_v0_adc_channel_rf_vdd_pfd+0xac>
1800a6d2:	ea0c0780 	movi      	r12, 1920
1800a6d6:	6f32      	nor      	r12, r12
1800a6d8:	9040      	ld.w      	r2, (r0, 0x0)
1800a6da:	68b0      	and      	r2, r12
1800a6dc:	b040      	st.w      	r2, (r0, 0x0)
        hw->ADKEY_CON &= ~(0xF << 8);
1800a6de:	9340      	ld.w      	r2, (r3, 0x0)
1800a6e0:	ea000f00 	movi      	r0, 3840
1800a6e4:	6c02      	nor      	r0, r0
1800a6e6:	6880      	and      	r2, r0
1800a6e8:	b340      	st.w      	r2, (r3, 0x0)
1800a6ea:	3314      	movi      	r3, 20
1800a6ec:	6c03      	mov      	r0, r0
1800a6ee:	2b00      	subi      	r3, 1
        for (i = 0; i < 20; i++) {
1800a6f0:	e923fffe 	bnez      	r3, 0x1800a6ec	// 1800a6ec <hgadc_v0_adc_channel_rf_vdd_pfd+0x9c>
1800a6f4:	07cd      	br      	0x1800a68e	// 1800a68e <hgadc_v0_adc_channel_rf_vdd_pfd+0x3e>
    __ASM volatile("psrset ie");
1800a6f6:	c0807420 	psrset      	ie
1800a6fa:	07cc      	br      	0x1800a692	// 1800a692 <hgadc_v0_adc_channel_rf_vdd_pfd+0x42>
1800a6fc:	40019000 	.long	0x40019000

1800a700 <hgadc_v0_ioctl>:
}

static int32 hgadc_v0_ioctl(struct adc_device *adc, enum adc_ioctl_cmd ioctl_cmd, uint32 param1, uint32 param2) {

    return RET_OK;
}
1800a700:	3000      	movi      	r0, 0
1800a702:	783c      	jmp      	r15

1800a704 <hgadc_v0_request_irq>:
    struct hgadc_v0    *dev = (struct hgadc_v0 *)adc;
    
    dev->irq_hdl  = irq_hdl;
    dev->irq_data = irq_data;

    if (irq_flag & ADC_IRQ_FLAG_SAMPLE_DONE) {
1800a704:	e4212001 	andi      	r1, r1, 1
    dev->irq_hdl  = irq_hdl;
1800a708:	b044      	st.w      	r2, (r0, 0x10)
    dev->irq_data = irq_data;
1800a70a:	b065      	st.w      	r3, (r0, 0x14)
    if (irq_flag & ADC_IRQ_FLAG_SAMPLE_DONE) {
1800a70c:	e9010009 	bez      	r1, 0x1800a71e	// 1800a71e <hgadc_v0_request_irq+0x1a>
         dev->irq_en = 1;
1800a710:	d860004c 	ld.b      	r3, (r0, 0x4c)
1800a714:	3201      	movi      	r2, 1
1800a716:	c4625c02 	ins      	r3, r2, 2, 2
1800a71a:	dc60004c 	st.b      	r3, (r0, 0x4c)
    }

    return RET_OK;
}
1800a71e:	3000      	movi      	r0, 0
1800a720:	783c      	jmp      	r15
	...

1800a724 <hgadc_v0_release_irq>:

static int32 hgadc_v0_release_irq(struct adc_device *adc, enum adc_irq_flag irq_flag) {

    struct hgadc_v0 *dev = (struct hgadc_v0 *)adc;

    if (irq_flag & ADC_IRQ_FLAG_SAMPLE_DONE) {
1800a724:	e4212001 	andi      	r1, r1, 1
1800a728:	e9010009 	bez      	r1, 0x1800a73a	// 1800a73a <hgadc_v0_release_irq+0x16>
        dev->irq_en = 0;
1800a72c:	d860004c 	ld.b      	r3, (r0, 0x4c)
1800a730:	3200      	movi      	r2, 0
1800a732:	c4625c02 	ins      	r3, r2, 2, 2
1800a736:	dc60004c 	st.b      	r3, (r0, 0x4c)
    }

    return RET_OK;
}
1800a73a:	3000      	movi      	r0, 0
1800a73c:	783c      	jmp      	r15
	...

1800a740 <hgadc_v0_irq_handler>:
static void hgadc_v0_irq_handler(void *data) {
1800a740:	14d0      	push      	r15
    struct hgadc_v0_hw *hw  = (struct hgadc_v0_hw *)dev->hw;
1800a742:	9043      	ld.w      	r2, (r0, 0xc)
    if ((LL_ADKEY_GET_IRQ_EN_SAMPLE_DONE(hw)) && (LL_ADKEY_GET_IRQ_EN_SAMPLE_DONE(hw))) {
1800a744:	3380      	movi      	r3, 128
1800a746:	9220      	ld.w      	r1, (r2, 0x0)
1800a748:	436d      	lsli      	r3, r3, 13
1800a74a:	684c      	and      	r1, r3
1800a74c:	e901000b 	bez      	r1, 0x1800a762	// 1800a762 <hgadc_v0_irq_handler+0x22>
1800a750:	9220      	ld.w      	r1, (r2, 0x0)
1800a752:	68c4      	and      	r3, r1
1800a754:	e9030007 	bez      	r3, 0x1800a762	// 1800a762 <hgadc_v0_irq_handler+0x22>
        LL_ADKEY_CLEAR_DONE_PENDING(hw);
1800a758:	3301      	movi      	r3, 1
1800a75a:	b263      	st.w      	r3, (r2, 0xc)
        os_sema_up(&dev->adc_done);
1800a75c:	2023      	addi      	r0, 36
1800a75e:	e0004ee9 	bsr      	0x18014530	// 18014530 <os_sema_up>
}
1800a762:	1490      	pop      	r15

1800a764 <hgadc_v0_close>:
static int32 hgadc_v0_close(struct adc_device *adc) {
1800a764:	14d6      	push      	r4-r9, r15
    if (!dev->opened) {
1800a766:	d860004c 	ld.b      	r3, (r0, 0x4c)
1800a76a:	e4632002 	andi      	r3, r3, 2
static int32 hgadc_v0_close(struct adc_device *adc) {
1800a76e:	6d03      	mov      	r4, r0
    if (!dev->opened) {
1800a770:	e903003e 	bez      	r3, 0x1800a7ec	// 1800a7ec <hgadc_v0_close+0x88>
    struct hgadc_v0_hw *hw  = (struct hgadc_v0_hw *)dev->hw;
1800a774:	90e3      	ld.w      	r7, (r0, 0xc)
    __ASM volatile("mfcr %0, psr" : "=r"(result) : : "memory");
1800a776:	c0006026 	mfcr      	r6, cr<0, 0>
    __ASM volatile("psrclr ie");
1800a77a:	c0807020 	psrclr      	ie
    if (hgadc_v0_list_get_channel_amount(&dev->head_node)) {
1800a77e:	d8600038 	ld.b      	r3, (r0, 0x38)
    return !(result & 0x40);
1800a782:	e4c62040 	andi      	r6, r6, 64
1800a786:	e923002f 	bnez      	r3, 0x1800a7e4	// 1800a7e4 <hgadc_v0_close+0x80>
    while (temp_node->next) {
1800a78a:	e4a0002b 	addi      	r5, r0, 44
        os_printf("*** delete success: ADC channel cnt = %d\n\r", head_node->channel_amount);
1800a78e:	ea880024 	lrw      	r8, 0x18017017	// 1800a81c <hgadc_v0_close+0xb8>
    while (temp_node->next) {
1800a792:	d9252002 	ld.w      	r9, (r5, 0x8)
1800a796:	e929002d 	bnez      	r9, 0x1800a7f0	// 1800a7f0 <hgadc_v0_close+0x8c>
    enable_irq(mask);
1800a79a:	e9060004 	bez      	r6, 0x1800a7a2	// 1800a7a2 <hgadc_v0_close+0x3e>
    __ASM volatile("psrset ie");
1800a79e:	c0807420 	psrset      	ie
    IRQn &= 0x7FUL;
1800a7a2:	9466      	ld.w      	r3, (r4, 0x18)
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1800a7a4:	c4a354c2 	zext      	r2, r3, 6, 5
1800a7a8:	3101      	movi      	r1, 1
1800a7aa:	e463201f 	andi      	r3, r3, 31
1800a7ae:	704c      	lsl      	r1, r3
1800a7b0:	221f      	addi      	r2, 32
1800a7b2:	101c      	lrw      	r0, 0xe000e100	// 1800a820 <hgadc_v0_close+0xbc>
1800a7b4:	d4400881 	str.w      	r1, (r0, r2 << 2)
    dev->head_node.data.channel   = -1;
1800a7b8:	3200      	movi      	r2, 0
1800a7ba:	3300      	movi      	r3, 0
1800a7bc:	2a00      	subi      	r2, 1
1800a7be:	ac58      	st.h      	r2, (r4, 0x30)
    dev->head_node.channel_amount = 0;
1800a7c0:	dc640038 	st.b      	r3, (r4, 0x38)
    dev->head_node.next           = NULL;
1800a7c4:	b46d      	st.w      	r3, (r4, 0x34)
    dev->head_node.data.func      = NULL;
1800a7c6:	b46b      	st.w      	r3, (r4, 0x2c)
    hw->ADKEY_CON      = 0;
1800a7c8:	b760      	st.w      	r3, (r7, 0x0)
    hw->ADKEY_DATA     = 0;
1800a7ca:	b762      	st.w      	r3, (r7, 0x8)
    dev->irq_en        = 0;
1800a7cc:	d844004c 	ld.b      	r2, (r4, 0x4c)
    dev->rf_vddi_en    = 0;
1800a7d0:	e44220f9 	andi      	r2, r2, 249
1800a7d4:	c4435c00 	ins      	r2, r3, 0, 0
    dev->refer_tsensor = 0;
1800a7d8:	b471      	st.w      	r3, (r4, 0x44)
    dev->refer_vddi    = 0;
1800a7da:	b46f      	st.w      	r3, (r4, 0x3c)
    dev->rf_vddi_en    = 0;
1800a7dc:	dc44004c 	st.b      	r2, (r4, 0x4c)
    dev->refer_vddi_adc_data = 0;
1800a7e0:	b470      	st.w      	r3, (r4, 0x40)
    return RET_OK;
1800a7e2:	0405      	br      	0x1800a7ec	// 1800a7ec <hgadc_v0_close+0x88>
        enable_irq(mask);
1800a7e4:	e9060004 	bez      	r6, 0x1800a7ec	// 1800a7ec <hgadc_v0_close+0x88>
1800a7e8:	c0807420 	psrset      	ie
}
1800a7ec:	3000      	movi      	r0, 0
1800a7ee:	1496      	pop      	r4-r9, r15
        delete_node->data.func(dev, delete_node->data.channel, ADC_CHANNEL_DISABLE);
1800a7f0:	d8291002 	ld.h      	r1, (r9, 0x4)
1800a7f4:	d8692000 	ld.w      	r3, (r9, 0x0)
1800a7f8:	3203      	movi      	r2, 3
1800a7fa:	6c13      	mov      	r0, r4
1800a7fc:	7bcd      	jsr      	r3
        temp_node->next = temp_node->next->next;
1800a7fe:	9562      	ld.w      	r3, (r5, 0x8)
        os_free(delete_node);
1800a800:	6c27      	mov      	r0, r9
        temp_node->next = temp_node->next->next;
1800a802:	9362      	ld.w      	r3, (r3, 0x8)
1800a804:	b562      	st.w      	r3, (r5, 0x8)
        os_free(delete_node);
1800a806:	e00010b5 	bsr      	0x1800c970	// 1800c970 <_os_free>
        head_node->channel_amount--;
1800a80a:	852c      	ld.b      	r1, (r5, 0xc)
1800a80c:	2900      	subi      	r1, 1
1800a80e:	7444      	zextb      	r1, r1
1800a810:	a52c      	st.b      	r1, (r5, 0xc)
        os_printf("*** delete success: ADC channel cnt = %d\n\r", head_node->channel_amount);
1800a812:	6c23      	mov      	r0, r8
1800a814:	e0001158 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
1800a818:	07bd      	br      	0x1800a792	// 1800a792 <hgadc_v0_close+0x2e>
1800a81a:	0000      	.short	0x0000
1800a81c:	18017017 	.long	0x18017017
1800a820:	e000e100 	.long	0xe000e100

1800a824 <hgadc_v0_adc_channel_rf_vddi>:
static int32 hgadc_v0_adc_channel_rf_vddi(struct hgadc_v0 *dev, uint32 channel, uint32 enable) {
1800a824:	14d8      	push      	r4-r11, r15
1800a826:	1421      	subi      	r14, r14, 4
1800a828:	6e03      	mov      	r8, r0
1800a82a:	6e4b      	mov      	r9, r2
    struct hgadc_v0_hw *hw  = (struct hgadc_v0_hw *)dev->hw;
1800a82c:	90e3      	ld.w      	r7, (r0, 0xc)
    __ASM volatile("mfcr %0, psr" : "=r"(result) : : "memory");
1800a82e:	c0006025 	mfcr      	r5, cr<0, 0>
    __ASM volatile("psrclr ie");
1800a832:	c0807020 	psrclr      	ie
    if (ADC_CHANNEL_ENABLE == enable) {
1800a836:	3a41      	cmpnei      	r2, 1
    return !(result & 0x40);
1800a838:	e4a52040 	andi      	r5, r5, 64
1800a83c:	0876      	bt      	0x1800a928	// 1800a928 <hgadc_v0_adc_channel_rf_vddi+0x104>
    if ((0==( (SOFT_RFIF_CON) & BIT(0) ) ) && (dev->rf_vddi_en==0) ) {
1800a83e:	129c      	lrw      	r4, 0x4001d080	// 1800a9ac <hgadc_v0_adc_channel_rf_vddi+0x188>
1800a840:	9473      	ld.w      	r3, (r4, 0x4c)
1800a842:	e4632001 	andi      	r3, r3, 1
1800a846:	e9230057 	bnez      	r3, 0x1800a8f4	// 1800a8f4 <hgadc_v0_adc_channel_rf_vddi+0xd0>
1800a84a:	d940004c 	ld.b      	r10, (r0, 0x4c)
1800a84e:	e54a2001 	andi      	r10, r10, 1
1800a852:	e92a0051 	bnez      	r10, 0x1800a8f4	// 1800a8f4 <hgadc_v0_adc_channel_rf_vddi+0xd0>
        os_printf("Open VDDI!\r\n");
1800a856:	1217      	lrw      	r0, 0x18016f5c	// 1800a9b0 <hgadc_v0_adc_channel_rf_vddi+0x18c>
1800a858:	e0001136 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
        SYSCTRL->SYS_CON3 &= ~(1 << 3); //RF_POR=0 to reset RFDIG register
1800a85c:	ea234002 	movih      	r3, 16386
    sysctrl_efuse_config_and_read(EFUSE_RF_PMU_OFFSET_FOR_ADC, (void *)efuse_buf, EFUSE_RF_PMU_SIZE_FOR_ADC);
1800a860:	6c7b      	mov      	r1, r14
        SYSCTRL->SYS_CON3 &= ~(1 << 3); //RF_POR=0 to reset RFDIG register
1800a862:	9344      	ld.w      	r2, (r3, 0x10)
1800a864:	3a83      	bclri      	r2, 3
1800a866:	b344      	st.w      	r2, (r3, 0x10)
        SYSCTRL->SYS_CON3 |= (1 << 3);  //RF_POR=1 to wakeup RFDIG
1800a868:	9344      	ld.w      	r2, (r3, 0x10)
1800a86a:	ec420008 	ori      	r2, r2, 8
1800a86e:	b344      	st.w      	r2, (r3, 0x10)
        (SOFT_RFIF_CON) |= BIT(25); // bbgclk is always generated
1800a870:	9473      	ld.w      	r3, (r4, 0x4c)
1800a872:	ea023f81 	movi      	r2, 16257
1800a876:	3ab9      	bseti      	r2, 25
1800a878:	6cc8      	or      	r3, r2
1800a87a:	b473      	st.w      	r3, (r4, 0x4c)
    sysctrl_efuse_config_and_read(EFUSE_RF_PMU_OFFSET_FOR_ADC, (void *)efuse_buf, EFUSE_RF_PMU_SIZE_FOR_ADC);
1800a87c:	3203      	movi      	r2, 3
1800a87e:	3034      	movi      	r0, 52
1800a880:	e0002d1e 	bsr      	0x180102bc	// 180102bc <sysctrl_efuse_config_and_read>
    p_pmu->rf_vref    = (efuse_buf[0]>>4) & 0x0F;
1800a884:	d88e0000 	ld.b      	r4, (r14, 0x0)
    p_pmu->rf_lo_vref = efuse_buf[2] & 0x0F;
1800a888:	d96e0002 	ld.b      	r11, (r14, 0x2)
    p_pmu->rf_ibpt    = efuse_buf[1] & 0x0F;
1800a88c:	d8ce0001 	ld.b      	r6, (r14, 0x1)
    if(efuse_buf[0]) {
1800a890:	e924007b 	bnez      	r4, 0x1800a986	// 1800a986 <hgadc_v0_adc_channel_rf_vddi+0x162>
            (RFSYS_REG7) = 0x13099f10; //RF_VREF=15
1800a894:	1268      	lrw      	r3, 0x40019000	// 1800a9b4 <hgadc_v0_adc_channel_rf_vddi+0x190>
1800a896:	1249      	lrw      	r2, 0x13099f10	// 1800a9b8 <hgadc_v0_adc_channel_rf_vddi+0x194>
1800a898:	b347      	st.w      	r2, (r3, 0x1c)
1800a89a:	0416      	br      	0x1800a8c6	// 1800a8c6 <hgadc_v0_adc_channel_rf_vddi+0xa2>
                p_pmu.rf_ibct    = 0xa;
1800a89c:	330a      	movi      	r3, 10
                p_pmu.rf_lo_vref = 0x8;
1800a89e:	3208      	movi      	r2, 8
                p_pmu.rf_ibpt    = 0xa;
1800a8a0:	6c4f      	mov      	r1, r3
                p_pmu.rf_vref    = 8;
1800a8a2:	6d0b      	mov      	r4, r2
            (RFSYS_REG7) |= (p_pmu.rf_vref<<9)|(p_pmu.rf_ibpt<<5)|(p_pmu.rf_ibct<<1);
1800a8a4:	1204      	lrw      	r0, 0x40019000	// 1800a9b4 <hgadc_v0_adc_channel_rf_vddi+0x190>
1800a8a6:	4125      	lsli      	r1, r1, 5
1800a8a8:	4489      	lsli      	r4, r4, 9
1800a8aa:	6d04      	or      	r4, r1
1800a8ac:	60cc      	addu      	r3, r3
1800a8ae:	6d0c      	or      	r4, r3
            (RFSYS_REG7) &= ~((0xf<<9)|(0xf<<5)|(0xf<<1));
1800a8b0:	ea011ffe 	movi      	r1, 8190
1800a8b4:	6c46      	nor      	r1, r1
1800a8b6:	9067      	ld.w      	r3, (r0, 0x1c)
1800a8b8:	68c4      	and      	r3, r1
            (RFSYS_REG7) |= (p_pmu.rf_vref<<9)|(p_pmu.rf_ibpt<<5)|(p_pmu.rf_ibct<<1);
1800a8ba:	6d0c      	or      	r4, r3
            (RFSYS_REG4) |= (p_pmu.rf_lo_vref<<11);
1800a8bc:	424b      	lsli      	r2, r2, 11
1800a8be:	1260      	lrw      	r3, 0x2a6f043c	// 1800a9bc <hgadc_v0_adc_channel_rf_vddi+0x198>
1800a8c0:	6c8c      	or      	r2, r3
            (RFSYS_REG7) |= (p_pmu.rf_vref<<9)|(p_pmu.rf_ibpt<<5)|(p_pmu.rf_ibct<<1);
1800a8c2:	b087      	st.w      	r4, (r0, 0x1c)
            (RFSYS_REG4) |= (p_pmu.rf_lo_vref<<11);
1800a8c4:	b044      	st.w      	r2, (r0, 0x10)
        (RFIDLEDIS0) = 0x02000803;
1800a8c6:	117c      	lrw      	r3, 0x40019000	// 1800a9b4 <hgadc_v0_adc_channel_rf_vddi+0x190>
1800a8c8:	ea220200 	movih      	r2, 512
1800a8cc:	e4420802 	addi      	r2, r2, 2051
1800a8d0:	b355      	st.w      	r2, (r3, 0x54)
        (SOFT_RFIF_CON) &= ~ BIT(0); //RF_EN为0
1800a8d2:	1157      	lrw      	r2, 0x4001d080	// 1800a9ac <hgadc_v0_adc_channel_rf_vddi+0x188>
1800a8d4:	9273      	ld.w      	r3, (r2, 0x4c)
1800a8d6:	3b80      	bclri      	r3, 0
1800a8d8:	b273      	st.w      	r3, (r2, 0x4c)
        SYSCTRL->SYS_CON3 |= 1<<3 | 1<<5;
1800a8da:	ea224002 	movih      	r2, 16386
1800a8de:	9264      	ld.w      	r3, (r2, 0x10)
1800a8e0:	ec630028 	ori      	r3, r3, 40
1800a8e4:	b264      	st.w      	r3, (r2, 0x10)
        dev->rf_vddi_en = 1;
1800a8e6:	d868004c 	ld.b      	r3, (r8, 0x4c)
1800a8ea:	3201      	movi      	r2, 1
1800a8ec:	c4625c00 	ins      	r3, r2, 0, 0
1800a8f0:	dc68004c 	st.b      	r3, (r8, 0x4c)
        RFSYS_REG6  = ( RFSYS_REG6 & ~(0xf<<27) ) | 0x9<<27 | 0x1<<31;
1800a8f4:	1150      	lrw      	r2, 0x40019000	// 1800a9b4 <hgadc_v0_adc_channel_rf_vddi+0x190>
1800a8f6:	31c8      	movi      	r1, 200
1800a8f8:	9266      	ld.w      	r3, (r2, 0x18)
1800a8fa:	c4035743 	zext      	r3, r3, 26, 0
1800a8fe:	4138      	lsli      	r1, r1, 24
1800a900:	6cc4      	or      	r3, r1
1800a902:	b266      	st.w      	r3, (r2, 0x18)
        hw->ADKEY_CON = ( hw->ADKEY_CON &~ (0xF << 8) ) | (0x4 << 8);
1800a904:	9760      	ld.w      	r3, (r7, 0x0)
1800a906:	ea020f00 	movi      	r2, 3840
1800a90a:	6c8a      	nor      	r2, r2
1800a90c:	68c8      	and      	r3, r2
1800a90e:	ec630400 	ori      	r3, r3, 1024
1800a912:	b760      	st.w      	r3, (r7, 0x0)
1800a914:	3314      	movi      	r3, 20
    __ASM volatile("nop");
1800a916:	6c03      	mov      	r0, r0
1800a918:	2b00      	subi      	r3, 1
        for (i = 0; i < 20; i++) {
1800a91a:	e923fffe 	bnez      	r3, 0x1800a916	// 1800a916 <hgadc_v0_adc_channel_rf_vddi+0xf2>
    enable_irq(mask);
1800a91e:	e9250031 	bnez      	r5, 0x1800a980	// 1800a980 <hgadc_v0_adc_channel_rf_vddi+0x15c>
}
1800a922:	3000      	movi      	r0, 0
1800a924:	1401      	addi      	r14, r14, 4
1800a926:	1498      	pop      	r4-r11, r15
    } else if (ADC_CHANNEL_SUSPEND == enable) {
1800a928:	3a42      	cmpnei      	r2, 2
1800a92a:	0818      	bt      	0x1800a95a	// 1800a95a <hgadc_v0_adc_channel_rf_vddi+0x136>
		RFSYS_REG6  &= ~((0xf<<27) | (0x1<<31));
1800a92c:	1142      	lrw      	r2, 0x40019000	// 1800a9b4 <hgadc_v0_adc_channel_rf_vddi+0x190>
1800a92e:	9266      	ld.w      	r3, (r2, 0x18)
1800a930:	c4035743 	zext      	r3, r3, 26, 0
1800a934:	b266      	st.w      	r3, (r2, 0x18)
        hw->ADKEY_CON &= ~(0xF << 8);
1800a936:	9760      	ld.w      	r3, (r7, 0x0)
1800a938:	ea020f00 	movi      	r2, 3840
1800a93c:	6c8a      	nor      	r2, r2
1800a93e:	68c8      	and      	r3, r2
1800a940:	b760      	st.w      	r3, (r7, 0x0)
        hw->ADKEY_DATA &= ~(0xFFF);
1800a942:	9762      	ld.w      	r3, (r7, 0x8)
1800a944:	ea020fff 	movi      	r2, 4095
1800a948:	6c8a      	nor      	r2, r2
1800a94a:	68c8      	and      	r3, r2
1800a94c:	b762      	st.w      	r3, (r7, 0x8)
1800a94e:	3314      	movi      	r3, 20
1800a950:	6c03      	mov      	r0, r0
1800a952:	2b00      	subi      	r3, 1
        for (i = 0; i < 20; i++) {
1800a954:	e923fffe 	bnez      	r3, 0x1800a950	// 1800a950 <hgadc_v0_adc_channel_rf_vddi+0x12c>
1800a958:	07e3      	br      	0x1800a91e	// 1800a91e <hgadc_v0_adc_channel_rf_vddi+0xfa>
    } else if (ADC_CHANNEL_DISABLE == enable) {
1800a95a:	3a43      	cmpnei      	r2, 3
1800a95c:	0be1      	bt      	0x1800a91e	// 1800a91e <hgadc_v0_adc_channel_rf_vddi+0xfa>
		RFSYS_REG6  &= ~((0xf<<27) | (0x1<<31));
1800a95e:	1056      	lrw      	r2, 0x40019000	// 1800a9b4 <hgadc_v0_adc_channel_rf_vddi+0x190>
1800a960:	9266      	ld.w      	r3, (r2, 0x18)
1800a962:	c4035743 	zext      	r3, r3, 26, 0
1800a966:	b266      	st.w      	r3, (r2, 0x18)
        hw->ADKEY_CON &= ~(0xF << 8);
1800a968:	9760      	ld.w      	r3, (r7, 0x0)
1800a96a:	ea020f00 	movi      	r2, 3840
1800a96e:	6c8a      	nor      	r2, r2
1800a970:	68c8      	and      	r3, r2
1800a972:	b760      	st.w      	r3, (r7, 0x0)
1800a974:	3314      	movi      	r3, 20
1800a976:	6c03      	mov      	r0, r0
1800a978:	2b00      	subi      	r3, 1
        for (i = 0; i < 20; i++) {
1800a97a:	e923fffe 	bnez      	r3, 0x1800a976	// 1800a976 <hgadc_v0_adc_channel_rf_vddi+0x152>
1800a97e:	07d0      	br      	0x1800a91e	// 1800a91e <hgadc_v0_adc_channel_rf_vddi+0xfa>
    __ASM volatile("psrset ie");
1800a980:	c0807420 	psrset      	ie
    return RET_OK;
1800a984:	07cf      	br      	0x1800a922	// 1800a922 <hgadc_v0_adc_channel_rf_vddi+0xfe>
    sysctrl_efuse_config_and_read(EFUSE_PACK_OFFSET_FOR_ADC, &pack, 1);
1800a986:	6ca7      	mov      	r2, r9
1800a988:	6c7b      	mov      	r1, r14
1800a98a:	ea000101 	movi      	r0, 257
    uint8 pack = 0;
1800a98e:	dd4e0000 	st.b      	r10, (r14, 0x0)
    sysctrl_efuse_config_and_read(EFUSE_PACK_OFFSET_FOR_ADC, &pack, 1);
1800a992:	e0002c95 	bsr      	0x180102bc	// 180102bc <sysctrl_efuse_config_and_read>
    return pack;
1800a996:	d86e0000 	ld.b      	r3, (r14, 0x0)
            if(get_chip_pack_for_adc() == 0) {   //for QFN58 RFDC config
1800a99a:	e903ff81 	bez      	r3, 0x1800a89c	// 1800a89c <hgadc_v0_adc_channel_rf_vddi+0x78>
    p_pmu->rf_lo_vref = efuse_buf[2] & 0x0F;
1800a99e:	e44b200f 	andi      	r2, r11, 15
    p_pmu->rf_ibpt    = efuse_buf[1] & 0x0F;
1800a9a2:	e426200f 	andi      	r1, r6, 15
    p_pmu->rf_ibct    = (efuse_buf[1]>>4) & 0x0F;
1800a9a6:	4e64      	lsri      	r3, r6, 4
    p_pmu->rf_vref    = (efuse_buf[0]>>4) & 0x0F;
1800a9a8:	4c84      	lsri      	r4, r4, 4
1800a9aa:	077d      	br      	0x1800a8a4	// 1800a8a4 <hgadc_v0_adc_channel_rf_vddi+0x80>
1800a9ac:	4001d080 	.long	0x4001d080
1800a9b0:	18016f5c 	.long	0x18016f5c
1800a9b4:	40019000 	.long	0x40019000
1800a9b8:	13099f10 	.long	0x13099f10
1800a9bc:	2a6f043c 	.long	0x2a6f043c

1800a9c0 <hgadc_v0_adc_channel_txw81x_io_class>:
static int32 hgadc_v0_adc_channel_txw81x_io_class(struct hgadc_v0 *dev, uint32 channel, uint32 enable) {
1800a9c0:	14d2      	push      	r4-r5, r15
    if (ADC_CHANNEL_ENABLE == enable) {
1800a9c2:	3a41      	cmpnei      	r2, 1
static int32 hgadc_v0_adc_channel_txw81x_io_class(struct hgadc_v0 *dev, uint32 channel, uint32 enable) {
1800a9c4:	6d47      	mov      	r5, r1
    struct hgadc_v0_hw *hw  = (struct hgadc_v0_hw *)dev->hw;
1800a9c6:	9083      	ld.w      	r4, (r0, 0xc)
    if (ADC_CHANNEL_ENABLE == enable) {
1800a9c8:	0840      	bt      	0x1800aa48	// 1800aa48 <hgadc_v0_adc_channel_txw81x_io_class+0x88>
	 if ( (channel > PC_15) ||
1800a9ca:	eb01002f 	cmphsi      	r1, 48
1800a9ce:	0805      	bt      	0x1800a9d8	// 1800a9d8 <hgadc_v0_adc_channel_txw81x_io_class+0x18>
		  ( (channel >= PB_0) && (channel <= PB_5) )
1800a9d0:	e461100f 	subi      	r3, r1, 16
	 if ( (channel > PC_15) ||
1800a9d4:	3b05      	cmphsi      	r3, 6
1800a9d6:	085b      	bt      	0x1800aa8c	// 1800aa8c <hgadc_v0_adc_channel_txw81x_io_class+0xcc>
			os_printf("ADKEY can't support above PC15 and the range from PB0 to PB5\r\n");
1800a9d8:	111b      	lrw      	r0, 0x18016f6a	// 1800aac4 <hgadc_v0_adc_channel_txw81x_io_class+0x104>
1800a9da:	e0001075 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
            return RET_ERR;
1800a9de:	3000      	movi      	r0, 0
1800a9e0:	2800      	subi      	r0, 1
}
1800a9e2:	1492      	pop      	r4-r5, r15
		 else if (((channel>=PA_8)&&(channel<=PA_14))) {
1800a9e4:	5d7f      	subi      	r3, r5, 8
1800a9e6:	3b06      	cmphsi      	r3, 7
1800a9e8:	080b      	bt      	0x1800a9fe	// 1800a9fe <hgadc_v0_adc_channel_txw81x_io_class+0x3e>
			 hw->ADKEY_CON &= ~(0x7F << 4);
1800a9ea:	9460      	ld.w      	r3, (r4, 0x0)
1800a9ec:	ea0207f0 	movi      	r2, 2032
1800a9f0:	6c8a      	nor      	r2, r2
1800a9f2:	68c8      	and      	r3, r2
1800a9f4:	b460      	st.w      	r3, (r4, 0x0)
			 hw->ADKEY_CON |= (1<<24) | (1<<5);
1800a9f6:	9460      	ld.w      	r3, (r4, 0x0)
1800a9f8:	3ba5      	bseti      	r3, 5
1800a9fa:	3bb8      	bseti      	r3, 24
1800a9fc:	045d      	br      	0x1800aab6	// 1800aab6 <hgadc_v0_adc_channel_txw81x_io_class+0xf6>
		else if (((channel>=PB_6)&&(channel<=PB_15))) {
1800a9fe:	e4651015 	subi      	r3, r5, 22
1800aa02:	3b09      	cmphsi      	r3, 10
1800aa04:	080b      	bt      	0x1800aa1a	// 1800aa1a <hgadc_v0_adc_channel_txw81x_io_class+0x5a>
			hw->ADKEY_CON &= ~(0x7F << 4);
1800aa06:	9460      	ld.w      	r3, (r4, 0x0)
1800aa08:	ea0207f0 	movi      	r2, 2032
1800aa0c:	6c8a      	nor      	r2, r2
1800aa0e:	68c8      	and      	r3, r2
1800aa10:	b460      	st.w      	r3, (r4, 0x0)
			hw->ADKEY_CON |= (1<<24) | (1<<6);
1800aa12:	9460      	ld.w      	r3, (r4, 0x0)
1800aa14:	3ba6      	bseti      	r3, 6
1800aa16:	3bb8      	bseti      	r3, 24
1800aa18:	044f      	br      	0x1800aab6	// 1800aab6 <hgadc_v0_adc_channel_txw81x_io_class+0xf6>
		else if (((channel>=PC_0)&&(channel<=PC_5))) {
1800aa1a:	e465101f 	subi      	r3, r5, 32
1800aa1e:	3b05      	cmphsi      	r3, 6
1800aa20:	0809      	bt      	0x1800aa32	// 1800aa32 <hgadc_v0_adc_channel_txw81x_io_class+0x72>
			hw->ADKEY_CON &= ~((0x7F << 4) | ((1<<24)));
1800aa22:	9460      	ld.w      	r3, (r4, 0x0)
1800aa24:	1149      	lrw      	r2, 0xfefff80f	// 1800aac8 <hgadc_v0_adc_channel_txw81x_io_class+0x108>
1800aa26:	68c8      	and      	r3, r2
1800aa28:	b460      	st.w      	r3, (r4, 0x0)
			hw->ADKEY_CON |= (1<<8);			
1800aa2a:	9460      	ld.w      	r3, (r4, 0x0)
1800aa2c:	ec630100 	ori      	r3, r3, 256
1800aa30:	0443      	br      	0x1800aab6	// 1800aab6 <hgadc_v0_adc_channel_txw81x_io_class+0xf6>
		else if (((channel>=PC_8)&&(channel<=PC_15))) {
1800aa32:	2d27      	subi      	r5, 40
1800aa34:	3d07      	cmphsi      	r5, 8
1800aa36:	0841      	bt      	0x1800aab8	// 1800aab8 <hgadc_v0_adc_channel_txw81x_io_class+0xf8>
			hw->ADKEY_CON &= ~((0x7F << 4) | ((1<<24)));
1800aa38:	9460      	ld.w      	r3, (r4, 0x0)
1800aa3a:	1144      	lrw      	r2, 0xfefff80f	// 1800aac8 <hgadc_v0_adc_channel_txw81x_io_class+0x108>
1800aa3c:	68c8      	and      	r3, r2
1800aa3e:	b460      	st.w      	r3, (r4, 0x0)
			hw->ADKEY_CON |= (1<<9);				
1800aa40:	9460      	ld.w      	r3, (r4, 0x0)
1800aa42:	ec630200 	ori      	r3, r3, 512
1800aa46:	0438      	br      	0x1800aab6	// 1800aab6 <hgadc_v0_adc_channel_txw81x_io_class+0xf6>
    } else if (ADC_CHANNEL_SUSPEND == enable) {
1800aa48:	3a42      	cmpnei      	r2, 2
1800aa4a:	0816      	bt      	0x1800aa76	// 1800aa76 <hgadc_v0_adc_channel_txw81x_io_class+0xb6>
        ret = pin_func(dev->dev.dev.dev_id , BIT(27) | channel);
1800aa4c:	39bb      	bseti      	r1, 27
1800aa4e:	9000      	ld.w      	r0, (r0, 0x0)
1800aa50:	e3ffcb6c 	bsr      	0x18004128	// 18004128 <pin_func>
		hw->ADKEY_CON &= ~((0x7F << 4) | ((1<<24)));
1800aa54:	9460      	ld.w      	r3, (r4, 0x0)
1800aa56:	105d      	lrw      	r2, 0xfefff80f	// 1800aac8 <hgadc_v0_adc_channel_txw81x_io_class+0x108>
1800aa58:	68c8      	and      	r3, r2
1800aa5a:	b460      	st.w      	r3, (r4, 0x0)
        hw->ADKEY_DATA &= ~(0xFFF);
1800aa5c:	9462      	ld.w      	r3, (r4, 0x8)
1800aa5e:	ea020fff 	movi      	r2, 4095
1800aa62:	6c8a      	nor      	r2, r2
1800aa64:	68c8      	and      	r3, r2
1800aa66:	b462      	st.w      	r3, (r4, 0x8)
        if (ret == RET_ERR) {
1800aa68:	3300      	movi      	r3, 0
1800aa6a:	2b00      	subi      	r3, 1
1800aa6c:	64c2      	cmpne      	r0, r3
1800aa6e:	64c3      	mvcv      	r3
1800aa70:	3000      	movi      	r0, 0
1800aa72:	600e      	subu      	r0, r3
1800aa74:	07b7      	br      	0x1800a9e2	// 1800a9e2 <hgadc_v0_adc_channel_txw81x_io_class+0x22>
    } else if (ADC_CHANNEL_DISABLE == enable) {
1800aa76:	3a43      	cmpnei      	r2, 3
1800aa78:	0824      	bt      	0x1800aac0	// 1800aac0 <hgadc_v0_adc_channel_txw81x_io_class+0x100>
        ret = pin_func(dev->dev.dev.dev_id , BIT(28) | channel);
1800aa7a:	39bc      	bseti      	r1, 28
1800aa7c:	9000      	ld.w      	r0, (r0, 0x0)
1800aa7e:	e3ffcb55 	bsr      	0x18004128	// 18004128 <pin_func>
		hw->ADKEY_CON &= ~((0x7F << 4) | ((1<<24)));
1800aa82:	9460      	ld.w      	r3, (r4, 0x0)
1800aa84:	1051      	lrw      	r2, 0xfefff80f	// 1800aac8 <hgadc_v0_adc_channel_txw81x_io_class+0x108>
1800aa86:	68c8      	and      	r3, r2
1800aa88:	b460      	st.w      	r3, (r4, 0x0)
1800aa8a:	07ef      	br      	0x1800aa68	// 1800aa68 <hgadc_v0_adc_channel_txw81x_io_class+0xa8>
        ret = pin_func(dev->dev.dev.dev_id , BIT(26) | channel);
1800aa8c:	39ba      	bseti      	r1, 26
1800aa8e:	9000      	ld.w      	r0, (r0, 0x0)
1800aa90:	e3ffcb4c 	bsr      	0x18004128	// 18004128 <pin_func>
        if (ret == RET_ERR) {
1800aa94:	3300      	movi      	r3, 0
1800aa96:	2b00      	subi      	r3, 1
1800aa98:	64c2      	cmpne      	r0, r3
1800aa9a:	0fa4      	bf      	0x1800a9e2	// 1800a9e2 <hgadc_v0_adc_channel_txw81x_io_class+0x22>
		 if (((channel>=PA_0)&&(channel<=PA_7))||\
1800aa9c:	3d07      	cmphsi      	r5, 8
1800aa9e:	0c03      	bf      	0x1800aaa4	// 1800aaa4 <hgadc_v0_adc_channel_txw81x_io_class+0xe4>
1800aaa0:	3d4f      	cmpnei      	r5, 15
1800aaa2:	0ba1      	bt      	0x1800a9e4	// 1800a9e4 <hgadc_v0_adc_channel_txw81x_io_class+0x24>
			 hw->ADKEY_CON &= ~(0x7F << 4);
1800aaa4:	9460      	ld.w      	r3, (r4, 0x0)
1800aaa6:	ea0207f0 	movi      	r2, 2032
1800aaaa:	6c8a      	nor      	r2, r2
1800aaac:	68c8      	and      	r3, r2
1800aaae:	b460      	st.w      	r3, (r4, 0x0)
			 hw->ADKEY_CON |= (1<<24) | (1<<4);
1800aab0:	9460      	ld.w      	r3, (r4, 0x0)
1800aab2:	3ba4      	bseti      	r3, 4
1800aab4:	3bb8      	bseti      	r3, 24
			hw->ADKEY_CON |= (1<<9);				
1800aab6:	b460      	st.w      	r3, (r4, 0x0)
    __ASM volatile("nop");
1800aab8:	6c03      	mov      	r0, r0
1800aaba:	6c03      	mov      	r0, r0
1800aabc:	6c03      	mov      	r0, r0
1800aabe:	6c03      	mov      	r0, r0
    return RET_OK;
1800aac0:	3000      	movi      	r0, 0
1800aac2:	0790      	br      	0x1800a9e2	// 1800a9e2 <hgadc_v0_adc_channel_txw81x_io_class+0x22>
1800aac4:	18016f6a 	.long	0x18016f6a
1800aac8:	fefff80f 	.long	0xfefff80f

1800aacc <hgadc_v0_list_insert.constprop.1>:
static int32 hgadc_v0_list_insert(adc_channel_node *head_node, adc_channel_node *new_node) {
1800aacc:	14d1      	push      	r4, r15
1800aace:	6cc3      	mov      	r3, r0
    while (temp_node->next) {
1800aad0:	9382      	ld.w      	r4, (r3, 0x8)
1800aad2:	e924000f 	bnez      	r4, 0x1800aaf0	// 1800aaf0 <hgadc_v0_list_insert.constprop.1+0x24>
    temp_node->next = new_node;
1800aad6:	b322      	st.w      	r1, (r3, 0x8)
    new_node->next  = NULL;
1800aad8:	b182      	st.w      	r4, (r1, 0x8)
    head_node->channel_amount++;
1800aada:	806c      	ld.b      	r3, (r0, 0xc)
1800aadc:	2300      	addi      	r3, 1
1800aade:	74cc      	zextb      	r3, r3
1800aae0:	a06c      	st.b      	r3, (r0, 0xc)
    os_printf("*** add success: ADC channel cnt = %d, name:%d\n\r", head_node->channel_amount, new_node->data.channel);
1800aae2:	8942      	ld.h      	r2, (r1, 0x4)
1800aae4:	1004      	lrw      	r0, 0x180170e9	// 1800aaf4 <hgadc_v0_list_insert.constprop.1+0x28>
1800aae6:	6c4f      	mov      	r1, r3
1800aae8:	e0000fee 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
}
1800aaec:	6c13      	mov      	r0, r4
1800aaee:	1491      	pop      	r4, r15
    while (temp_node->next) {
1800aaf0:	6cd3      	mov      	r3, r4
1800aaf2:	07ef      	br      	0x1800aad0	// 1800aad0 <hgadc_v0_list_insert.constprop.1+0x4>
1800aaf4:	180170e9 	.long	0x180170e9

1800aaf8 <hgadc_v0_add_channel>:
static int32 hgadc_v0_add_channel(struct adc_device *adc, uint32 channel) {
1800aaf8:	14d3      	push      	r4-r6, r15
    if (!dev->opened) {
1800aafa:	d860004c 	ld.b      	r3, (r0, 0x4c)
1800aafe:	e4632002 	andi      	r3, r3, 2
static int32 hgadc_v0_add_channel(struct adc_device *adc, uint32 channel) {
1800ab02:	6d87      	mov      	r6, r1
    if (!dev->opened) {
1800ab04:	e9230005 	bnez      	r3, 0x1800ab0e	// 1800ab0e <hgadc_v0_add_channel+0x16>
                return RET_ERR;
1800ab08:	3000      	movi      	r0, 0
1800ab0a:	2800      	subi      	r0, 1
}
1800ab0c:	1493      	pop      	r4-r6, r15
    if ((ADKEY1_BASE == dev->hw) && (PA_15 < channel) && (channel < 0x100)) {
1800ab0e:	9043      	ld.w      	r2, (r0, 0xc)
1800ab10:	1168      	lrw      	r3, 0x4001a00c	// 1800abb0 <hgadc_v0_add_channel+0xb8>
1800ab12:	64ca      	cmpne      	r2, r3
1800ab14:	080a      	bt      	0x1800ab28	// 1800ab28 <hgadc_v0_add_channel+0x30>
1800ab16:	e461100f 	subi      	r3, r1, 16
1800ab1a:	eb0300ef 	cmphsi      	r3, 240
1800ab1e:	0805      	bt      	0x1800ab28	// 1800ab28 <hgadc_v0_add_channel+0x30>
        os_printf("*** ADC module info: ADKEY1 can't support the %d channel!!!\r\n", channel);
1800ab20:	1105      	lrw      	r0, 0x18016faa	// 1800abb4 <hgadc_v0_add_channel+0xbc>
1800ab22:	e0000fd1 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
1800ab26:	07f1      	br      	0x1800ab08	// 1800ab08 <hgadc_v0_add_channel+0x10>
    __ASM volatile("mfcr %0, psr" : "=r"(result) : : "memory");
1800ab28:	c0006025 	mfcr      	r5, cr<0, 0>
    __ASM volatile("psrclr ie");
1800ab2c:	c0807020 	psrclr      	ie
    if (RET_ERR == hgadc_v0_list_check_repetition(&dev->head_node, channel)) {
1800ab30:	e480002b 	addi      	r4, r0, 44
    return !(result & 0x40);
1800ab34:	e4a52040 	andi      	r5, r5, 64
    for (i = 0; i < head_node->channel_amount; i++) {
1800ab38:	842c      	ld.b      	r1, (r4, 0xc)
    adc_channel_node *temp_node = head_node;
1800ab3a:	6cd3      	mov      	r3, r4
    for (i = 0; i < head_node->channel_amount; i++) {
1800ab3c:	3200      	movi      	r2, 0
1800ab3e:	6448      	cmphs      	r2, r1
1800ab40:	0c18      	bf      	0x1800ab70	// 1800ab70 <hgadc_v0_add_channel+0x78>
    if (channel < 0x101) {
1800ab42:	eb060100 	cmphsi      	r6, 257
1800ab46:	081d      	bt      	0x1800ab80	// 1800ab80 <hgadc_v0_add_channel+0x88>
            new_node = (adc_channel_node *)os_malloc(sizeof(adc_channel_node));
1800ab48:	3010      	movi      	r0, 16
1800ab4a:	e0000eeb 	bsr      	0x1800c920	// 1800c920 <_os_malloc>
1800ab4e:	6c43      	mov      	r1, r0
            if (!new_node) {
1800ab50:	e9000023 	bez      	r0, 0x1800ab96	// 1800ab96 <hgadc_v0_add_channel+0x9e>
			new_node->data.func    = hgadc_v0_adc_channel_txw81x_io_class;
1800ab54:	1079      	lrw      	r3, 0x1800a9c0	// 1800abb8 <hgadc_v0_add_channel+0xc0>
            new_node->data.func    = hgadc_v0_adc_channel_rf_vdd_pfd;
1800ab56:	b160      	st.w      	r3, (r1, 0x0)
            new_node->next         = NULL;
1800ab58:	3300      	movi      	r3, 0
            new_node->data.channel = channel;
1800ab5a:	a9c2      	st.h      	r6, (r1, 0x4)
            new_node->next         = NULL;
1800ab5c:	b162      	st.w      	r3, (r1, 0x8)
            hgadc_v0_list_insert(&dev->head_node, new_node);
1800ab5e:	6c13      	mov      	r0, r4
1800ab60:	e3ffffb6 	bsr      	0x1800aacc	// 1800aacc <hgadc_v0_list_insert.constprop.1>
        enable_irq(mask);
1800ab64:	e9050004 	bez      	r5, 0x1800ab6c	// 1800ab6c <hgadc_v0_add_channel+0x74>
    __ASM volatile("psrset ie");
1800ab68:	c0807420 	psrset      	ie
    return RET_OK;
1800ab6c:	3000      	movi      	r0, 0
1800ab6e:	07cf      	br      	0x1800ab0c	// 1800ab0c <hgadc_v0_add_channel+0x14>
        if (temp_node->next) {
1800ab70:	9362      	ld.w      	r3, (r3, 0x8)
1800ab72:	e9030005 	bez      	r3, 0x1800ab7c	// 1800ab7c <hgadc_v0_add_channel+0x84>
            if (channel == temp_node->next->data.channel) {
1800ab76:	8b02      	ld.h      	r0, (r3, 0x4)
1800ab78:	641a      	cmpne      	r6, r0
1800ab7a:	0c55      	bf      	0x1800ac24	// 1800ac24 <hgadc_v0_add_channel+0x12c>
    for (i = 0; i < head_node->channel_amount; i++) {
1800ab7c:	2200      	addi      	r2, 1
1800ab7e:	07e0      	br      	0x1800ab3e	// 1800ab3e <hgadc_v0_add_channel+0x46>
1800ab80:	e4661100 	subi      	r3, r6, 257
1800ab84:	3b05      	cmphsi      	r3, 6
1800ab86:	0808      	bt      	0x1800ab96	// 1800ab96 <hgadc_v0_add_channel+0x9e>
1800ab88:	104d      	lrw      	r2, 0x18016f34	// 1800abbc <hgadc_v0_add_channel+0xc4>
1800ab8a:	d0621023 	ldr.bs      	r3, (r2, r3 << 0)
    if (RET_ERR == _class) {
1800ab8e:	3200      	movi      	r2, 0
1800ab90:	2a00      	subi      	r2, 1
1800ab92:	648e      	cmpne      	r3, r2
1800ab94:	0806      	bt      	0x1800aba0	// 1800aba0 <hgadc_v0_add_channel+0xa8>
                enable_irq(mask);
1800ab96:	e905ffb9 	bez      	r5, 0x1800ab08	// 1800ab08 <hgadc_v0_add_channel+0x10>
1800ab9a:	c0807420 	psrset      	ie
1800ab9e:	07b5      	br      	0x1800ab08	// 1800ab08 <hgadc_v0_add_channel+0x10>
    switch (_class) {
1800aba0:	74cc      	zextb      	r3, r3
1800aba2:	3b07      	cmphsi      	r3, 8
1800aba4:	0be0      	bt      	0x1800ab64	// 1800ab64 <hgadc_v0_add_channel+0x6c>
1800aba6:	1047      	lrw      	r2, 0x18016f14	// 1800abc0 <hgadc_v0_add_channel+0xc8>
1800aba8:	d0620883 	ldr.w      	r3, (r2, r3 << 2)
1800abac:	780c      	jmp      	r3
1800abae:	0000      	.short	0x0000
1800abb0:	4001a00c 	.long	0x4001a00c
1800abb4:	18016faa 	.long	0x18016faa
1800abb8:	1800a9c0 	.long	0x1800a9c0
1800abbc:	18016f34 	.long	0x18016f34
1800abc0:	18016f14 	.long	0x18016f14
            new_node = (adc_channel_node *)os_malloc(sizeof(adc_channel_node));
1800abc4:	3010      	movi      	r0, 16
1800abc6:	e0000ead 	bsr      	0x1800c920	// 1800c920 <_os_malloc>
1800abca:	6c43      	mov      	r1, r0
            if (!new_node) {
1800abcc:	e900ffe5 	bez      	r0, 0x1800ab96	// 1800ab96 <hgadc_v0_add_channel+0x9e>
			new_node->data.func    = hgadc_v0_adc_channel_txw81x_rf_temperature;
1800abd0:	1077      	lrw      	r3, 0x1800a394	// 1800ac2c <hgadc_v0_add_channel+0x134>
1800abd2:	07c2      	br      	0x1800ab56	// 1800ab56 <hgadc_v0_add_channel+0x5e>
            new_node = (adc_channel_node *)os_malloc(sizeof(adc_channel_node));
1800abd4:	3010      	movi      	r0, 16
1800abd6:	e0000ea5 	bsr      	0x1800c920	// 1800c920 <_os_malloc>
1800abda:	6c43      	mov      	r1, r0
            if (!new_node) {
1800abdc:	e900ffdd 	bez      	r0, 0x1800ab96	// 1800ab96 <hgadc_v0_add_channel+0x9e>
            new_node->data.func    = hgadc_v0_adc_channel_rf_vtune;
1800abe0:	1074      	lrw      	r3, 0x1800a440	// 1800ac30 <hgadc_v0_add_channel+0x138>
1800abe2:	07ba      	br      	0x1800ab56	// 1800ab56 <hgadc_v0_add_channel+0x5e>
            new_node = (adc_channel_node *)os_malloc(sizeof(adc_channel_node));
1800abe4:	3010      	movi      	r0, 16
1800abe6:	e0000e9d 	bsr      	0x1800c920	// 1800c920 <_os_malloc>
1800abea:	6c43      	mov      	r1, r0
            if (!new_node) {
1800abec:	e900ffd5 	bez      	r0, 0x1800ab96	// 1800ab96 <hgadc_v0_add_channel+0x9e>
            new_node->data.func    = hgadc_v0_adc_channel_rf_vco_vdd;
1800abf0:	1071      	lrw      	r3, 0x1800a4f0	// 1800ac34 <hgadc_v0_add_channel+0x13c>
1800abf2:	07b2      	br      	0x1800ab56	// 1800ab56 <hgadc_v0_add_channel+0x5e>
            new_node = (adc_channel_node *)os_malloc(sizeof(adc_channel_node));
1800abf4:	3010      	movi      	r0, 16
1800abf6:	e0000e95 	bsr      	0x1800c920	// 1800c920 <_os_malloc>
1800abfa:	6c43      	mov      	r1, r0
            if (!new_node) {
1800abfc:	e900ffcd 	bez      	r0, 0x1800ab96	// 1800ab96 <hgadc_v0_add_channel+0x9e>
            new_node->data.func    = hgadc_v0_adc_channel_rf_vdd_div;
1800ac00:	106e      	lrw      	r3, 0x1800a5a0	// 1800ac38 <hgadc_v0_add_channel+0x140>
1800ac02:	07aa      	br      	0x1800ab56	// 1800ab56 <hgadc_v0_add_channel+0x5e>
            new_node = (adc_channel_node *)os_malloc(sizeof(adc_channel_node));
1800ac04:	3010      	movi      	r0, 16
1800ac06:	e0000e8d 	bsr      	0x1800c920	// 1800c920 <_os_malloc>
1800ac0a:	6c43      	mov      	r1, r0
            if (!new_node) {
1800ac0c:	e900ffc5 	bez      	r0, 0x1800ab96	// 1800ab96 <hgadc_v0_add_channel+0x9e>
            new_node->data.func    = hgadc_v0_adc_channel_rf_vddi;
1800ac10:	106b      	lrw      	r3, 0x1800a824	// 1800ac3c <hgadc_v0_add_channel+0x144>
1800ac12:	07a2      	br      	0x1800ab56	// 1800ab56 <hgadc_v0_add_channel+0x5e>
            new_node = (adc_channel_node *)os_malloc(sizeof(adc_channel_node));
1800ac14:	3010      	movi      	r0, 16
1800ac16:	e0000e85 	bsr      	0x1800c920	// 1800c920 <_os_malloc>
1800ac1a:	6c43      	mov      	r1, r0
            if (!new_node) {
1800ac1c:	e900ffbd 	bez      	r0, 0x1800ab96	// 1800ab96 <hgadc_v0_add_channel+0x9e>
            new_node->data.func    = hgadc_v0_adc_channel_rf_vdd_pfd;
1800ac20:	1068      	lrw      	r3, 0x1800a650	// 1800ac40 <hgadc_v0_add_channel+0x148>
1800ac22:	079a      	br      	0x1800ab56	// 1800ab56 <hgadc_v0_add_channel+0x5e>
        os_printf("*** ADC module info: ADC channel repeat!!!\n\r");
1800ac24:	1008      	lrw      	r0, 0x18016fe9	// 1800ac44 <hgadc_v0_add_channel+0x14c>
1800ac26:	e0000f4f 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
1800ac2a:	079d      	br      	0x1800ab64	// 1800ab64 <hgadc_v0_add_channel+0x6c>
1800ac2c:	1800a394 	.long	0x1800a394
1800ac30:	1800a440 	.long	0x1800a440
1800ac34:	1800a4f0 	.long	0x1800a4f0
1800ac38:	1800a5a0 	.long	0x1800a5a0
1800ac3c:	1800a824 	.long	0x1800a824
1800ac40:	1800a650 	.long	0x1800a650
1800ac44:	18016fe9 	.long	0x18016fe9

1800ac48 <hgadc_v0_delete_channel>:
static int32 hgadc_v0_delete_channel(struct adc_device *adc, uint32 channel) {
1800ac48:	14d4      	push      	r4-r7, r15
    if (!dev->opened) {
1800ac4a:	d860004c 	ld.b      	r3, (r0, 0x4c)
1800ac4e:	e4632002 	andi      	r3, r3, 2
static int32 hgadc_v0_delete_channel(struct adc_device *adc, uint32 channel) {
1800ac52:	6dc7      	mov      	r7, r1
    if (!dev->opened) {
1800ac54:	e9230005 	bnez      	r3, 0x1800ac5e	// 1800ac5e <hgadc_v0_delete_channel+0x16>
        return RET_ERR;
1800ac58:	3000      	movi      	r0, 0
1800ac5a:	2800      	subi      	r0, 1
}
1800ac5c:	1494      	pop      	r4-r7, r15
    __ASM volatile("mfcr %0, psr" : "=r"(result) : : "memory");
1800ac5e:	c0006024 	mfcr      	r4, cr<0, 0>
    __ASM volatile("psrclr ie");
1800ac62:	c0807020 	psrclr      	ie
    if (RET_ERR == hgadc_v0_list_get_by_channel(&dev->head_node, channel, &get_node)) {
1800ac66:	e4a0002b 	addi      	r5, r0, 44
    return !(result & 0x40);
1800ac6a:	e4842040 	andi      	r4, r4, 64
    adc_channel_node *temp_node = head_node;
1800ac6e:	6cd7      	mov      	r3, r5
1800ac70:	6d97      	mov      	r6, r5
    while (temp_node->next) {
1800ac72:	9362      	ld.w      	r3, (r3, 0x8)
1800ac74:	e923000a 	bnez      	r3, 0x1800ac88	// 1800ac88 <hgadc_v0_delete_channel+0x40>
        os_printf("*** ADC module info: Delete func: No this ADC channel!!!\n\r");
1800ac78:	1014      	lrw      	r0, 0x18017043	// 1800acc8 <hgadc_v0_delete_channel+0x80>
1800ac7a:	e0000f25 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
        enable_irq(mask);
1800ac7e:	e904ffed 	bez      	r4, 0x1800ac58	// 1800ac58 <hgadc_v0_delete_channel+0x10>
    __ASM volatile("psrset ie");
1800ac82:	c0807420 	psrset      	ie
1800ac86:	07e9      	br      	0x1800ac58	// 1800ac58 <hgadc_v0_delete_channel+0x10>
        if (channel == temp_node->next->data.channel) {
1800ac88:	8b42      	ld.h      	r2, (r3, 0x4)
1800ac8a:	649e      	cmpne      	r7, r2
1800ac8c:	0bf3      	bt      	0x1800ac72	// 1800ac72 <hgadc_v0_delete_channel+0x2a>
    get_node->data.func(dev, channel, ADC_CHANNEL_DISABLE);
1800ac8e:	9360      	ld.w      	r3, (r3, 0x0)
1800ac90:	3203      	movi      	r2, 3
1800ac92:	6c5f      	mov      	r1, r7
1800ac94:	7bcd      	jsr      	r3
1800ac96:	0402      	br      	0x1800ac9a	// 1800ac9a <hgadc_v0_delete_channel+0x52>
        if (channel == temp_node->next->data.channel) {
1800ac98:	6d43      	mov      	r5, r0
    while (temp_node->next) {
1800ac9a:	9502      	ld.w      	r0, (r5, 0x8)
1800ac9c:	e9000010 	bez      	r0, 0x1800acbc	// 1800acbc <hgadc_v0_delete_channel+0x74>
        if (channel == temp_node->next->data.channel) {
1800aca0:	8862      	ld.h      	r3, (r0, 0x4)
1800aca2:	64de      	cmpne      	r7, r3
1800aca4:	0bfa      	bt      	0x1800ac98	// 1800ac98 <hgadc_v0_delete_channel+0x50>
            temp_node->next = temp_node->next->next;
1800aca6:	9062      	ld.w      	r3, (r0, 0x8)
1800aca8:	b562      	st.w      	r3, (r5, 0x8)
            os_free(delete_node);
1800acaa:	e0000e63 	bsr      	0x1800c970	// 1800c970 <_os_free>
            head_node->channel_amount--;
1800acae:	862c      	ld.b      	r1, (r6, 0xc)
1800acb0:	2900      	subi      	r1, 1
1800acb2:	7444      	zextb      	r1, r1
1800acb4:	a62c      	st.b      	r1, (r6, 0xc)
            os_printf("*** delete success: ADC channel cnt = %d\n\r", head_node->channel_amount);
1800acb6:	1006      	lrw      	r0, 0x18017017	// 1800accc <hgadc_v0_delete_channel+0x84>
1800acb8:	e0000f06 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    enable_irq(mask);
1800acbc:	e9040004 	bez      	r4, 0x1800acc4	// 1800acc4 <hgadc_v0_delete_channel+0x7c>
1800acc0:	c0807420 	psrset      	ie
    return RET_OK;
1800acc4:	3000      	movi      	r0, 0
1800acc6:	07cb      	br      	0x1800ac5c	// 1800ac5c <hgadc_v0_delete_channel+0x14>
1800acc8:	18017043 	.long	0x18017043
1800accc:	18017017 	.long	0x18017017

1800acd0 <hgadc_v0_txw81x_raw_data_handle>:
{
1800acd0:	1421      	subi      	r14, r14, 4
      if (ADC_CHANNEL_RF_TEMPERATURE == channel) {
1800acd2:	eb410101 	cmpnei      	r1, 257
    volatile int32  data_temp = 0;
1800acd6:	3300      	movi      	r3, 0
1800acd8:	b860      	st.w      	r3, (r14, 0x0)
      if (ADC_CHANNEL_RF_TEMPERATURE == channel) {
1800acda:	0819      	bt      	0x1800ad0c	// 1800ad0c <hgadc_v0_txw81x_raw_data_handle+0x3c>
        data_temp = *adc_data - (dev->refer_tsensor);
1800acdc:	9031      	ld.w      	r1, (r0, 0x44)
1800acde:	9260      	ld.w      	r3, (r2, 0x0)
1800ace0:	60c6      	subu      	r3, r1
1800ace2:	b860      	st.w      	r3, (r14, 0x0)
        data_temp = dev->refer_adda_vref * data_temp * 1000;
1800ace4:	31fa      	movi      	r1, 250
1800ace6:	9860      	ld.w      	r3, (r14, 0x0)
1800ace8:	4122      	lsli      	r1, r1, 2
1800acea:	7cc4      	mult      	r3, r1
1800acec:	9032      	ld.w      	r1, (r0, 0x48)
1800acee:	7cc4      	mult      	r3, r1
1800acf0:	b860      	st.w      	r3, (r14, 0x0)
        data_temp = data_temp >> 14;
1800acf2:	9860      	ld.w      	r3, (r14, 0x0)
1800acf4:	536e      	asri      	r3, r3, 14
1800acf6:	b860      	st.w      	r3, (r14, 0x0)
        data_temp = data_temp >> 10;
1800acf8:	9860      	ld.w      	r3, (r14, 0x0)
1800acfa:	536a      	asri      	r3, r3, 10
1800acfc:	b860      	st.w      	r3, (r14, 0x0)
        data_temp = data_temp + 30;
1800acfe:	9860      	ld.w      	r3, (r14, 0x0)
1800ad00:	231d      	addi      	r3, 30
1800ad02:	b860      	st.w      	r3, (r14, 0x0)
        *adc_data = data_temp;
1800ad04:	9860      	ld.w      	r3, (r14, 0x0)
		*adc_data = (data_temp) >> 10;
1800ad06:	b260      	st.w      	r3, (r2, 0x0)
}
1800ad08:	1401      	addi      	r14, r14, 4
1800ad0a:	783c      	jmp      	r15
    }else if ((ADC_CHANNEL_VCO_VDD == channel) || (ADC_CHANNEL_VDD_DIV == channel)) {
1800ad0c:	e4611102 	subi      	r3, r1, 259
1800ad10:	3b01      	cmphsi      	r3, 2
1800ad12:	0ffb      	bf      	0x1800ad08	// 1800ad08 <hgadc_v0_txw81x_raw_data_handle+0x38>
    } else if ((ADC_CHANNEL_VTUNE == channel) || (ADC_CHANNEL_VDD_PFD == channel)) {
1800ad14:	3982      	bclri      	r1, 2
1800ad16:	eb410102 	cmpnei      	r1, 258
1800ad1a:	9072      	ld.w      	r3, (r0, 0x48)
1800ad1c:	9220      	ld.w      	r1, (r2, 0x0)
1800ad1e:	0805      	bt      	0x1800ad28	// 1800ad28 <hgadc_v0_txw81x_raw_data_handle+0x58>
   		*adc_data = (((*adc_data) * (dev->refer_adda_vref) * (64))/4096);	
1800ad20:	4366      	lsli      	r3, r3, 6
1800ad22:	7cc4      	mult      	r3, r1
1800ad24:	4b6c      	lsri      	r3, r3, 12
1800ad26:	07f0      	br      	0x1800ad06	// 1800ad06 <hgadc_v0_txw81x_raw_data_handle+0x36>
		data_temp = ((dev->refer_adda_vref * 10) / (27));
1800ad28:	300a      	movi      	r0, 10
1800ad2a:	7cc0      	mult      	r3, r0
1800ad2c:	301b      	movi      	r0, 27
1800ad2e:	c4038023 	divu      	r3, r3, r0
1800ad32:	b860      	st.w      	r3, (r14, 0x0)
		data_temp = data_temp * (*adc_data);
1800ad34:	9860      	ld.w      	r3, (r14, 0x0)
1800ad36:	7cc4      	mult      	r3, r1
1800ad38:	b860      	st.w      	r3, (r14, 0x0)
		*adc_data = (data_temp) >> 10;
1800ad3a:	9860      	ld.w      	r3, (r14, 0x0)
1800ad3c:	536a      	asri      	r3, r3, 10
1800ad3e:	eb030ffe 	cmphsi      	r3, 4095
1800ad42:	ea010fff 	movi      	r1, 4095
1800ad46:	c4610c40 	inct      	r3, r1, 0
1800ad4a:	07de      	br      	0x1800ad06	// 1800ad06 <hgadc_v0_txw81x_raw_data_handle+0x36>

1800ad4c <hgadc_v0_get_value>:
static int32 hgadc_v0_get_value(struct adc_device *adc, uint32 channel, uint32 *raw_data) {
1800ad4c:	14d7      	push      	r4-r10, r15
    if (!dev->opened) {
1800ad4e:	d860004c 	ld.b      	r3, (r0, 0x4c)
1800ad52:	e4632002 	andi      	r3, r3, 2
static int32 hgadc_v0_get_value(struct adc_device *adc, uint32 channel, uint32 *raw_data) {
1800ad56:	6d03      	mov      	r4, r0
1800ad58:	6e47      	mov      	r9, r1
1800ad5a:	6e8b      	mov      	r10, r2
    struct hgadc_v0_hw *hw  = (struct hgadc_v0_hw *)dev->hw;
1800ad5c:	90c3      	ld.w      	r6, (r0, 0xc)
    if (!dev->opened) {
1800ad5e:	e9030014 	bez      	r3, 0x1800ad86	// 1800ad86 <hgadc_v0_get_value+0x3a>
    os_mutex_lock(&dev->adc_lock, osWaitForever);
1800ad62:	e500001b 	addi      	r8, r0, 28
1800ad66:	3100      	movi      	r1, 0
1800ad68:	2900      	subi      	r1, 1
1800ad6a:	6c23      	mov      	r0, r8
1800ad6c:	e0004b50 	bsr      	0x1801440c	// 1801440c <os_mutex_lock>
    if (RET_ERR == hgadc_v0_list_get_by_channel(&dev->head_node, channel, &get_node)) {
1800ad70:	e4a4002b 	addi      	r5, r4, 44
    while (temp_node->next) {
1800ad74:	95a2      	ld.w      	r5, (r5, 0x8)
1800ad76:	e925000b 	bnez      	r5, 0x1800ad8c	// 1800ad8c <hgadc_v0_get_value+0x40>
        os_printf("*** ADC module info: get_value func: No this ADC channel!!!\n\r");
1800ad7a:	110e      	lrw      	r0, 0x180170aa	// 1800ae30 <hgadc_v0_get_value+0xe4>
1800ad7c:	e0000ea4 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
        os_mutex_unlock(&dev->adc_lock);
1800ad80:	6c23      	mov      	r0, r8
1800ad82:	e0004b5f 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
        return RET_ERR;
1800ad86:	3000      	movi      	r0, 0
1800ad88:	2800      	subi      	r0, 1
1800ad8a:	044f      	br      	0x1800ae28	// 1800ae28 <hgadc_v0_get_value+0xdc>
        if (channel == temp_node->next->data.channel) {
1800ad8c:	8d62      	ld.h      	r3, (r5, 0x4)
1800ad8e:	64e6      	cmpne      	r9, r3
1800ad90:	0bf2      	bt      	0x1800ad74	// 1800ad74 <hgadc_v0_get_value+0x28>
    if (get_node->data.func) {
1800ad92:	9560      	ld.w      	r3, (r5, 0x0)
    delay_cnt = (hw->ADKEY_DATA >> 16);
1800ad94:	96e2      	ld.w      	r7, (r6, 0x8)
1800ad96:	4ff0      	lsri      	r7, r7, 16
    if (get_node->data.func) {
1800ad98:	e903fff4 	bez      	r3, 0x1800ad80	// 1800ad80 <hgadc_v0_get_value+0x34>
        get_node->data.func(dev, channel, ADC_CHANNEL_ENABLE);
1800ad9c:	3201      	movi      	r2, 1
1800ad9e:	6c67      	mov      	r1, r9
1800ada0:	6c13      	mov      	r0, r4
1800ada2:	7bcd      	jsr      	r3
    __ASM volatile("mfcr %0, psr" : "=r"(result) : : "memory");
1800ada4:	c0006023 	mfcr      	r3, cr<0, 0>
    __ASM volatile("psrclr ie");
1800ada8:	c0807020 	psrclr      	ie
    LL_ADKEY_CLEAR_DONE_PENDING(hw);
1800adac:	3201      	movi      	r2, 1
1800adae:	b643      	st.w      	r2, (r6, 0xc)
    LL_ADKEY_SOTF_KICK(hw);
1800adb0:	9640      	ld.w      	r2, (r6, 0x0)
1800adb2:	3ab3      	bseti      	r2, 19
1800adb4:	b640      	st.w      	r2, (r6, 0x0)
    return !(result & 0x40);
1800adb6:	e4632040 	andi      	r3, r3, 64
    for (cnt  = 0; cnt < (delay_cnt + 300); cnt++) {
1800adba:	3200      	movi      	r2, 0
1800adbc:	e4e7012b 	addi      	r7, r7, 300
1800adc0:	65c8      	cmphs      	r2, r7
1800adc2:	0c34      	bf      	0x1800ae2a	// 1800ae2a <hgadc_v0_get_value+0xde>
    enable_irq(mask);
1800adc4:	e9030004 	bez      	r3, 0x1800adcc	// 1800adcc <hgadc_v0_get_value+0x80>
    __ASM volatile("psrset ie");
1800adc8:	c0807420 	psrset      	ie
    if (os_sema_down(&dev->adc_done, 5000) <= 0){
1800adcc:	ea011388 	movi      	r1, 5000
1800add0:	e4040023 	addi      	r0, r4, 36
1800add4:	e0004b92 	bsr      	0x180144f8	// 180144f8 <os_sema_down>
1800add8:	e9400007 	bhz      	r0, 0x1800ade6	// 1800ade6 <hgadc_v0_get_value+0x9a>
        LL_ADKEY_CLEAR_DONE_PENDING(hw);
1800addc:	3301      	movi      	r3, 1
1800adde:	b663      	st.w      	r3, (r6, 0xc)
        os_printf("*** adc module info: ADC sample err1 !!!!");
1800ade0:	1015      	lrw      	r0, 0x1801707f	// 1800ae34 <hgadc_v0_get_value+0xe8>
1800ade2:	e0000e71 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    *raw_data = LL_ADKEY_GET_DATA(hw);
1800ade6:	9662      	ld.w      	r3, (r6, 0x8)
1800ade8:	e4632fff 	andi      	r3, r3, 4095
1800adec:	dc6a2000 	st.w      	r3, (r10, 0x0)
    get_node->data.func(dev, channel, ADC_CHANNEL_SUSPEND);
1800adf0:	3202      	movi      	r2, 2
1800adf2:	9560      	ld.w      	r3, (r5, 0x0)
1800adf4:	6c67      	mov      	r1, r9
1800adf6:	6c13      	mov      	r0, r4
1800adf8:	7bcd      	jsr      	r3
    hgadc_v0_txw81x_raw_data_handle(dev, channel, raw_data);
1800adfa:	6cab      	mov      	r2, r10
1800adfc:	6c67      	mov      	r1, r9
1800adfe:	6c13      	mov      	r0, r4
1800ae00:	e3ffff68 	bsr      	0x1800acd0	// 1800acd0 <hgadc_v0_txw81x_raw_data_handle>
    if (dev->irq_en && dev->irq_hdl) {
1800ae04:	d864004c 	ld.b      	r3, (r4, 0x4c)
1800ae08:	e4632004 	andi      	r3, r3, 4
1800ae0c:	e903000a 	bez      	r3, 0x1800ae20	// 1800ae20 <hgadc_v0_get_value+0xd4>
1800ae10:	9464      	ld.w      	r3, (r4, 0x10)
1800ae12:	e9030007 	bez      	r3, 0x1800ae20	// 1800ae20 <hgadc_v0_get_value+0xd4>
        dev->irq_hdl(ADC_IRQ_FLAG_SAMPLE_DONE, get_node->data.channel, *raw_data);
1800ae16:	d84a2000 	ld.w      	r2, (r10, 0x0)
1800ae1a:	8d22      	ld.h      	r1, (r5, 0x4)
1800ae1c:	3001      	movi      	r0, 1
1800ae1e:	7bcd      	jsr      	r3
    os_mutex_unlock(&dev->adc_lock);
1800ae20:	6c23      	mov      	r0, r8
1800ae22:	e0004b0f 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
    return RET_OK;
1800ae26:	3000      	movi      	r0, 0
}
1800ae28:	1497      	pop      	r4-r10, r15
    __ASM volatile("nop");
1800ae2a:	6c03      	mov      	r0, r0
    for (cnt  = 0; cnt < (delay_cnt + 300); cnt++) {
1800ae2c:	2200      	addi      	r2, 1
1800ae2e:	07c9      	br      	0x1800adc0	// 1800adc0 <hgadc_v0_get_value+0x74>
1800ae30:	180170aa 	.long	0x180170aa
1800ae34:	1801707f 	.long	0x1801707f

1800ae38 <hgadc_v0_txw81x_open_data_handler>:
{
1800ae38:	14d2      	push      	r4-r5, r15
    struct hgadc_v0_hw *hw  = (struct hgadc_v0_hw *)dev->hw;
1800ae3a:	9083      	ld.w      	r4, (r0, 0xc)
{
1800ae3c:	6d43      	mov      	r5, r0
    dev->refer_adda_vref = ((2*1024) + sysctrl_efuse_adda_vref_get());
1800ae3e:	e0002b2f 	bsr      	0x1801049c	// 1801049c <sysctrl_efuse_adda_vref_get>
1800ae42:	e40007ff 	addi      	r0, r0, 2048
1800ae46:	b512      	st.w      	r0, (r5, 0x48)
    dev->refer_tsensor   = sysctrl_efuse_tsensor_get();
1800ae48:	e0002b3c 	bsr      	0x180104c0	// 180104c0 <sysctrl_efuse_tsensor_get>
    pmu_reg_write((uint32)&PMU->PMUCON11, PMU->PMUCON11 | (BIT(27)));
1800ae4c:	ea038003 	movi      	r3, 32771
1800ae50:	c5e34903 	rotli      	r3, r3, 15
    dev->refer_tsensor   = sysctrl_efuse_tsensor_get();
1800ae54:	b511      	st.w      	r0, (r5, 0x44)
    pmu_reg_write((uint32)&PMU->PMUCON11, PMU->PMUCON11 | (BIT(27)));
1800ae56:	9331      	ld.w      	r1, (r3, 0x44)
1800ae58:	39bb      	bseti      	r1, 27
1800ae5a:	101d      	lrw      	r0, 0x40018044	// 1800aecc <hgadc_v0_txw81x_open_data_handler+0x94>
1800ae5c:	e0002ce2 	bsr      	0x18010820	// 18010820 <pmu_reg_write>
    hw->ADKEY_CON |= (1 << 0) | (1 << 2) | BIT(20);
1800ae60:	9460      	ld.w      	r3, (r4, 0x0)
1800ae62:	c6605022 	bmaski      	r2, 20
1800ae66:	2205      	addi      	r2, 6
1800ae68:	6cc8      	or      	r3, r2
1800ae6a:	b460      	st.w      	r3, (r4, 0x0)
    hw->ADKEY_CON |= BIT(23);
1800ae6c:	9460      	ld.w      	r3, (r4, 0x0)
1800ae6e:	3bb7      	bseti      	r3, 23
1800ae70:	b460      	st.w      	r3, (r4, 0x0)
    hw->ADKEY_CON &= ~(0xF << 15);
1800ae72:	9460      	ld.w      	r3, (r4, 0x0)
1800ae74:	c7605022 	bmaski      	r2, 28
1800ae78:	c6624902 	rotli      	r2, r2, 19
1800ae7c:	68c8      	and      	r3, r2
1800ae7e:	b460      	st.w      	r3, (r4, 0x0)
    div = (peripheral_clock_get(HG_APB1_PT_ADKEY)/ (1000000)) - 1;
1800ae80:	3031      	movi      	r0, 49
1800ae82:	e0003195 	bsr      	0x180111ac	// 180111ac <peripheral_clock_get>
1800ae86:	ea05f424 	movi      	r5, 62500
1800ae8a:	c4854905 	rotli      	r5, r5, 4
1800ae8e:	c4a08025 	divu      	r5, r0, r5
1800ae92:	2d00      	subi      	r5, 1
1800ae94:	3d01      	cmphsi      	r5, 2
1800ae96:	3002      	movi      	r0, 2
1800ae98:	c4a00c20 	incf      	r5, r0, 0
    os_printf("ADKEY baud:%d\r\n", div);
1800ae9c:	6c57      	mov      	r1, r5
1800ae9e:	100d      	lrw      	r0, 0x18017134	// 1800aed0 <hgadc_v0_txw81x_open_data_handler+0x98>
1800aea0:	e0000e12 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    hw->ADKEY_DATA = ( hw->ADKEY_DATA &~ (0xFFFF << 16) ) | (div << 16);
1800aea4:	9462      	ld.w      	r3, (r4, 0x8)
1800aea6:	c40355e3 	zext      	r3, r3, 15, 0
1800aeaa:	45b0      	lsli      	r5, r5, 16
1800aeac:	6d4c      	or      	r5, r3
1800aeae:	b4a2      	st.w      	r5, (r4, 0x8)
    hw->ADKEY_CON &= ~ BIT(0);
1800aeb0:	9460      	ld.w      	r3, (r4, 0x0)
1800aeb2:	3b80      	bclri      	r3, 0
1800aeb4:	b460      	st.w      	r3, (r4, 0x0)
    hw->ADKEY_CON |= BIT(0);
1800aeb6:	9460      	ld.w      	r3, (r4, 0x0)
1800aeb8:	ec630001 	ori      	r3, r3, 1
1800aebc:	b460      	st.w      	r3, (r4, 0x0)
1800aebe:	33c8      	movi      	r3, 200
1800aec0:	6c03      	mov      	r0, r0
1800aec2:	2b00      	subi      	r3, 1
    for (i = 0; i < 200; i++) {
1800aec4:	e923fffe 	bnez      	r3, 0x1800aec0	// 1800aec0 <hgadc_v0_txw81x_open_data_handler+0x88>
}
1800aec8:	1492      	pop      	r4-r5, r15
1800aeca:	0000      	.short	0x0000
1800aecc:	40018044 	.long	0x40018044
1800aed0:	18017134 	.long	0x18017134

1800aed4 <hgadc_v0_open>:
static int32 hgadc_v0_open(struct adc_device *adc) {
1800aed4:	14d3      	push      	r4-r6, r15
1800aed6:	6d83      	mov      	r6, r0
    __ASM volatile("mfcr %0, psr" : "=r"(result) : : "memory");
1800aed8:	c0006024 	mfcr      	r4, cr<0, 0>
    __ASM volatile("psrclr ie");
1800aedc:	c0807020 	psrclr      	ie
    if (dev->opened) {
1800aee0:	d8a0004c 	ld.b      	r5, (r0, 0x4c)
1800aee4:	e4a52002 	andi      	r5, r5, 2
    return !(result & 0x40);
1800aee8:	e4842040 	andi      	r4, r4, 64
1800aeec:	e9050009 	bez      	r5, 0x1800aefe	// 1800aefe <hgadc_v0_open+0x2a>
        enable_irq(mask);
1800aef0:	e9040004 	bez      	r4, 0x1800aef8	// 1800aef8 <hgadc_v0_open+0x24>
    __ASM volatile("psrset ie");
1800aef4:	c0807420 	psrset      	ie
        return -EBUSY;
1800aef8:	3000      	movi      	r0, 0
1800aefa:	280f      	subi      	r0, 16
1800aefc:	0427      	br      	0x1800af4a	// 1800af4a <hgadc_v0_open+0x76>
    hgadc_v0_txw81x_open_data_handler(dev);
1800aefe:	e3ffff9d 	bsr      	0x1800ae38	// 1800ae38 <hgadc_v0_txw81x_open_data_handler>
    IRQn &= 0x7FUL;
1800af02:	9666      	ld.w      	r3, (r6, 0x18)
    VIC->ISER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1800af04:	c4a354c0 	zext      	r0, r3, 6, 5
1800af08:	3201      	movi      	r2, 1
1800af0a:	e463201f 	andi      	r3, r3, 31
1800af0e:	c4624023 	lsl      	r3, r2, r3
1800af12:	1030      	lrw      	r1, 0xe000e100	// 1800af50 <hgadc_v0_open+0x7c>
1800af14:	d4010883 	str.w      	r3, (r1, r0 << 2)
    dev->head_node.data.channel   = -1;
1800af18:	3300      	movi      	r3, 0
1800af1a:	2b00      	subi      	r3, 1
1800af1c:	ae78      	st.h      	r3, (r6, 0x30)
    dev->opened     = 1;
1800af1e:	d866004c 	ld.b      	r3, (r6, 0x4c)
1800af22:	c4625c01 	ins      	r3, r2, 1, 1
    dev->rf_vddi_en = 0;
1800af26:	e46320fb 	andi      	r3, r3, 251
1800af2a:	c4655c00 	ins      	r3, r5, 0, 0
    dev->head_node.channel_amount = 0;
1800af2e:	dca60038 	st.b      	r5, (r6, 0x38)
    dev->head_node.data.func      = NULL;
1800af32:	b6ab      	st.w      	r5, (r6, 0x2c)
    dev->head_node.next           = NULL;
1800af34:	b6ad      	st.w      	r5, (r6, 0x34)
    dev->rf_vddi_en = 0;
1800af36:	dc66004c 	st.b      	r3, (r6, 0x4c)
    os_printf("*** open ADC success!\n\r");
1800af3a:	1007      	lrw      	r0, 0x1801711b	// 1800af54 <hgadc_v0_open+0x80>
1800af3c:	e0000dc4 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    enable_irq(mask);
1800af40:	e9040006 	bez      	r4, 0x1800af4c	// 1800af4c <hgadc_v0_open+0x78>
1800af44:	c0807420 	psrset      	ie
    return RET_OK;
1800af48:	6c17      	mov      	r0, r5
}
1800af4a:	1493      	pop      	r4-r6, r15
    return RET_OK;
1800af4c:	6c13      	mov      	r0, r4
1800af4e:	07fe      	br      	0x1800af4a	// 1800af4a <hgadc_v0_open+0x76>
1800af50:	e000e100 	.long	0xe000e100
1800af54:	1801711b 	.long	0x1801711b

1800af58 <hgadc_v0_attach>:
    .ioctl          = hgadc_v0_ioctl,
    .request_irq    = hgadc_v0_request_irq,
    .release_irq    = hgadc_v0_release_irq,
};

int32 hgadc_v0_attach(uint32 dev_id, struct hgadc_v0 *adc) {
1800af58:	14d4      	push      	r4-r7, r15

    struct hgadc_v0_hw *hw = (struct hgadc_v0_hw *)adc->hw;

    adc->opened             = 0;
1800af5a:	d861004c 	ld.b      	r3, (r1, 0x4c)
1800af5e:	3500      	movi      	r5, 0
    adc->irq_en             = 0;
    adc->refer_vddi         = 0;
    adc->refer_tsensor      = 0;
    adc->refer_adda_vref    = 0;
    adc->refer_vddi_adc_data= 0;
    adc->rf_vddi_en         = 0;
1800af60:	e46320f9 	andi      	r3, r3, 249
1800af64:	c4655c00 	ins      	r3, r5, 0, 0
1800af68:	dc61004c 	st.b      	r3, (r1, 0x4c)
int32 hgadc_v0_attach(uint32 dev_id, struct hgadc_v0 *adc) {
1800af6c:	6d07      	mov      	r4, r1
    adc->irq_hdl            = NULL;
    adc->irq_data           = 0;
    adc->dev.dev.ops        = (const struct devobj_ops *)&adcops;
1800af6e:	1077      	lrw      	r3, 0x18016f3c	// 1800afc8 <hgadc_v0_attach+0x70>
int32 hgadc_v0_attach(uint32 dev_id, struct hgadc_v0 *adc) {
1800af70:	6d83      	mov      	r6, r0
    adc->dev.dev.ops        = (const struct devobj_ops *)&adcops;
1800af72:	b162      	st.w      	r3, (r1, 0x8)
    adc->refer_vddi         = 0;
1800af74:	b1af      	st.w      	r5, (r1, 0x3c)
    adc->refer_tsensor      = 0;
1800af76:	b1b1      	st.w      	r5, (r1, 0x44)
    adc->refer_adda_vref    = 0;
1800af78:	b1b2      	st.w      	r5, (r1, 0x48)
    adc->refer_vddi_adc_data= 0;
1800af7a:	b1b0      	st.w      	r5, (r1, 0x40)
    adc->irq_hdl            = NULL;
1800af7c:	b1a4      	st.w      	r5, (r1, 0x10)
    adc->irq_data           = 0;
1800af7e:	b1a5      	st.w      	r5, (r1, 0x14)

    os_mutex_init(&adc->adc_lock);
1800af80:	e401001b 	addi      	r0, r1, 28
    struct hgadc_v0_hw *hw = (struct hgadc_v0_hw *)adc->hw;
1800af84:	91e3      	ld.w      	r7, (r1, 0xc)
    os_mutex_init(&adc->adc_lock);
1800af86:	e0004a21 	bsr      	0x180143c8	// 180143c8 <os_mutex_init>
    os_sema_init(&adc->adc_done, 0);
1800af8a:	6c57      	mov      	r1, r5
1800af8c:	e4040023 	addi      	r0, r4, 36
1800af90:	e0004a84 	bsr      	0x18014498	// 18014498 <os_sema_init>

    request_irq(adc->irq_num, hgadc_v0_irq_handler, adc);
1800af94:	6c93      	mov      	r2, r4
1800af96:	102e      	lrw      	r1, 0x1800a740	// 1800afcc <hgadc_v0_attach+0x74>
1800af98:	9406      	ld.w      	r0, (r4, 0x18)
1800af9a:	e3ffc3a1 	bsr      	0x180036dc	// 180036dc <request_irq>
    hw->ADKEY_CON |= BIT(20);
1800af9e:	9760      	ld.w      	r3, (r7, 0x0)
1800afa0:	3bb4      	bseti      	r3, 20
1800afa2:	b760      	st.w      	r3, (r7, 0x0)
    IRQn &= 0x7FUL;
1800afa4:	9466      	ld.w      	r3, (r4, 0x18)
    VIC->ISER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1800afa6:	c4a354c1 	zext      	r1, r3, 6, 5
1800afaa:	3201      	movi      	r2, 1
1800afac:	e463201f 	andi      	r3, r3, 31
1800afb0:	c4624023 	lsl      	r3, r2, r3
1800afb4:	1047      	lrw      	r2, 0xe000e100	// 1800afd0 <hgadc_v0_attach+0x78>
1800afb6:	d4220883 	str.w      	r3, (r2, r1 << 2)
    irq_enable(adc->irq_num);
    dev_register(dev_id, (struct dev_obj *)adc);
1800afba:	6c1b      	mov      	r0, r6
1800afbc:	6c53      	mov      	r1, r4
1800afbe:	e3ffc073 	bsr      	0x180030a4	// 180030a4 <dev_register>
    
    return RET_OK;
}
1800afc2:	6c17      	mov      	r0, r5
1800afc4:	1494      	pop      	r4-r7, r15
1800afc6:	0000      	.short	0x0000
1800afc8:	18016f3c 	.long	0x18016f3c
1800afcc:	1800a740 	.long	0x1800a740
1800afd0:	e000e100 	.long	0xe000e100

1800afd4 <LCDC_IRQHandler_action>:
		hw->LCD_IFCON &= ~BIT(irq+28);
	}
}

void LCDC_IRQHandler_action(void *p_lcdc)
{
1800afd4:	14d6      	push      	r4-r9, r15
	uint32 sta = 0;
	uint8 loop;
	struct hglcdc *lcdc_hw = (struct hglcdc*)p_lcdc; 
	struct hglcdc_hw *hw  = (struct hglcdc_hw *)lcdc_hw->hw;
1800afd6:	90a3      	ld.w      	r5, (r0, 0xc)
	sta = hw->LCD_IFSTA;
1800afd8:	3400      	movi      	r4, 0
1800afda:	95c6      	ld.w      	r6, (r5, 0x18)
	for(loop = 0;loop < LCD_IRQ_NUM;loop++){
		if(sta&BIT(loop)){
			hw->LCD_IFSTA = BIT(loop);
1800afdc:	3701      	movi      	r7, 1
			if(lcdcirq_vector_table[loop] != NULL){
1800afde:	ea88000e 	lrw      	r8, 0x20002154	// 1800b014 <LCDC_IRQHandler_action+0x40>
				lcdcirq_vector_table[loop] (loop,lcdcirq_dev_table[loop],0);
1800afe2:	ea89000e 	lrw      	r9, 0x20002168	// 1800b018 <LCDC_IRQHandler_action+0x44>
		if(sta&BIT(loop)){
1800afe6:	c4864043 	lsr      	r3, r6, r4
1800afea:	e4632001 	andi      	r3, r3, 1
1800afee:	e903000e 	bez      	r3, 0x1800b00a	// 1800b00a <LCDC_IRQHandler_action+0x36>
			hw->LCD_IFSTA = BIT(loop);
1800aff2:	c4874023 	lsl      	r3, r7, r4
1800aff6:	b566      	st.w      	r3, (r5, 0x18)
			if(lcdcirq_vector_table[loop] != NULL){
1800aff8:	d0880883 	ldr.w      	r3, (r8, r4 << 2)
1800affc:	e9030007 	bez      	r3, 0x1800b00a	// 1800b00a <LCDC_IRQHandler_action+0x36>
				lcdcirq_vector_table[loop] (loop,lcdcirq_dev_table[loop],0);
1800b000:	d0890881 	ldr.w      	r1, (r9, r4 << 2)
1800b004:	3200      	movi      	r2, 0
1800b006:	6c13      	mov      	r0, r4
1800b008:	7bcd      	jsr      	r3
1800b00a:	2400      	addi      	r4, 1
	for(loop = 0;loop < LCD_IRQ_NUM;loop++){
1800b00c:	3c44      	cmpnei      	r4, 4
1800b00e:	0bec      	bt      	0x1800afe6	// 1800afe6 <LCDC_IRQHandler_action+0x12>
			}

		}
	}
}
1800b010:	1496      	pop      	r4-r9, r15
1800b012:	0000      	.short	0x0000
1800b014:	20002154 	.long	0x20002154
1800b018:	20002168 	.long	0x20002168

1800b01c <hglcdc_open>:
	return 0;
}

static int32 hglcdc_open(struct lcdc_device *p_lcdc){
	struct hglcdc *lcdc_hw = (struct hglcdc*)p_lcdc;	
	struct hglcdc_hw *hw  = (struct hglcdc_hw *)lcdc_hw->hw;
1800b01c:	9043      	ld.w      	r2, (r0, 0xc)
	hw->LCDCON |= (1<<0); 
1800b01e:	9260      	ld.w      	r3, (r2, 0x0)
1800b020:	ec630001 	ori      	r3, r3, 1
1800b024:	b260      	st.w      	r3, (r2, 0x0)
    IRQn &= 0x7FUL;
1800b026:	9066      	ld.w      	r3, (r0, 0x18)
    VIC->ISER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1800b028:	c4a354c1 	zext      	r1, r3, 6, 5
1800b02c:	3201      	movi      	r2, 1
1800b02e:	e463201f 	andi      	r3, r3, 31
1800b032:	c4624023 	lsl      	r3, r2, r3
	irq_enable(lcdc_hw->irq_num);
	return 0;
}
1800b036:	3000      	movi      	r0, 0
1800b038:	1042      	lrw      	r2, 0xe000e100	// 1800b040 <hglcdc_open+0x24>
1800b03a:	d4220883 	str.w      	r3, (r2, r1 << 2)
1800b03e:	783c      	jmp      	r15
1800b040:	e000e100 	.long	0xe000e100

1800b044 <hglcdc_ioctl>:
{
1800b044:	14d4      	push      	r4-r7, r15
	switch(ioctl_cmd){
1800b046:	eb010035 	cmphsi      	r1, 54
{
1800b04a:	6f47      	mov      	r13, r1
	struct hglcdc_hw *hw  = (struct hglcdc_hw *)lcdc_hw->hw;
1800b04c:	d9802003 	ld.w      	r12, (r0, 0xc)
	switch(ioctl_cmd){
1800b050:	e86003f4 	bt      	0x1800b838	// 1800b838 <hglcdc_ioctl+0x7f4>
1800b054:	1022      	lrw      	r1, 0x18017148	// 1800b05c <hglcdc_ioctl+0x18>
1800b056:	d1a10881 	ldr.w      	r1, (r1, r13 << 2)
1800b05a:	7804      	jmp      	r1
1800b05c:	18017148 	.long	0x18017148
			if(param1){
1800b060:	e9020018 	bez      	r2, 0x1800b090	// 1800b090 <hglcdc_ioctl+0x4c>
				if(param2 < 4){
1800b064:	3b03      	cmphsi      	r3, 4
1800b066:	080d      	bt      	0x1800b080	// 1800b080 <hglcdc_ioctl+0x3c>
					hw->TIMEOUTCON &= ~(0x3<<1);
1800b068:	d84c2032 	ld.w      	r2, (r12, 0xc8)
1800b06c:	3a81      	bclri      	r2, 1
1800b06e:	3a82      	bclri      	r2, 2
1800b070:	dc4c2032 	st.w      	r2, (r12, 0xc8)
					hw->TIMEOUTCON |= (param2<<1);
1800b074:	d80c2032 	ld.w      	r0, (r12, 0xc8)
1800b078:	5b2c      	addu      	r1, r3, r3
1800b07a:	6c40      	or      	r1, r0
1800b07c:	dc2c2032 	st.w      	r1, (r12, 0xc8)
				hw->TIMEOUTCON |= BIT(0);
1800b080:	d86c2032 	ld.w      	r3, (r12, 0xc8)
1800b084:	ec630001 	ori      	r3, r3, 1
1800b088:	dc6c2032 	st.w      	r3, (r12, 0xc8)
	int32  ret_val = RET_OK;
1800b08c:	3200      	movi      	r2, 0
		break;
1800b08e:	0406      	br      	0x1800b09a	// 1800b09a <hglcdc_ioctl+0x56>
				hw->TIMEOUTCON &= ~BIT(0);
1800b090:	d86c2032 	ld.w      	r3, (r12, 0xc8)
1800b094:	3b80      	bclri      	r3, 0
1800b096:	dc6c2032 	st.w      	r3, (r12, 0xc8)
}
1800b09a:	6c0b      	mov      	r0, r2
1800b09c:	1494      	pop      	r4-r7, r15
				hw->LCDCON |= BIT(28);
1800b09e:	d86c2000 	ld.w      	r3, (r12, 0x0)
			if(param1){
1800b0a2:	e9020006 	bez      	r2, 0x1800b0ae	// 1800b0ae <hglcdc_ioctl+0x6a>
				hw->LCDCON |= BIT(28);
1800b0a6:	3bbc      	bseti      	r3, 28
			hw->LCDCON |= BIT(3);
1800b0a8:	dc6c2000 	st.w      	r3, (r12, 0x0)
1800b0ac:	07f0      	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
				hw->LCDCON &= ~BIT(28);
1800b0ae:	3b9c      	bclri      	r3, 28
				hw->LCDCON &= ~BIT(14);
1800b0b0:	dc6c2000 	st.w      	r3, (r12, 0x0)
1800b0b4:	07f3      	br      	0x1800b09a	// 1800b09a <hglcdc_ioctl+0x56>
			if(param1){
1800b0b6:	e902000d 	bez      	r2, 0x1800b0d0	// 1800b0d0 <hglcdc_ioctl+0x8c>
				hw->LCDCON |= BIT(27);
1800b0ba:	d84c2000 	ld.w      	r2, (r12, 0x0)
1800b0be:	3abb      	bseti      	r2, 27
				hw->LCDCON &= ~BIT(27);
1800b0c0:	dc4c2000 	st.w      	r2, (r12, 0x0)
			if(param2){
1800b0c4:	e903000a 	bez      	r3, 0x1800b0d8	// 1800b0d8 <hglcdc_ioctl+0x94>
				hw->LCDCON |= BIT(21);
1800b0c8:	d86c2000 	ld.w      	r3, (r12, 0x0)
1800b0cc:	3bb5      	bseti      	r3, 21
1800b0ce:	07ed      	br      	0x1800b0a8	// 1800b0a8 <hglcdc_ioctl+0x64>
				hw->LCDCON &= ~BIT(27);
1800b0d0:	d84c2000 	ld.w      	r2, (r12, 0x0)
1800b0d4:	3a9b      	bclri      	r2, 27
1800b0d6:	07f5      	br      	0x1800b0c0	// 1800b0c0 <hglcdc_ioctl+0x7c>
				hw->LCDCON &= ~BIT(21);
1800b0d8:	d84c2000 	ld.w      	r2, (r12, 0x0)
1800b0dc:	3a95      	bclri      	r2, 21
				hw->LCDCON &= ~BIT(9);			
1800b0de:	dc4c2000 	st.w      	r2, (r12, 0x0)
1800b0e2:	07d5      	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			if(param1 <= 0x10){
1800b0e4:	3a10      	cmphsi      	r2, 17
1800b0e6:	0810      	bt      	0x1800b106	// 1800b106 <hglcdc_ioctl+0xc2>
				hw->LCDCON &= ~(0x1f<<22);
1800b0e8:	ea20f840 	movih      	r0, 63552
1800b0ec:	d82c2000 	ld.w      	r1, (r12, 0x0)
1800b0f0:	2800      	subi      	r0, 1
1800b0f2:	6840      	and      	r1, r0
1800b0f4:	dc2c2000 	st.w      	r1, (r12, 0x0)
				hw->LCDCON |= (param1<<22);
1800b0f8:	d82c2000 	ld.w      	r1, (r12, 0x0)
1800b0fc:	4216      	lsli      	r0, r2, 22
1800b0fe:	c4202422 	or      	r2, r0, r1
1800b102:	dc4c2000 	st.w      	r2, (r12, 0x0)
			if(param2 <= 0x1f){
1800b106:	3b1f      	cmphsi      	r3, 32
1800b108:	0bc2      	bt      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
				hw->LCDCON &= ~(0x1f<<16);
1800b10a:	ea21ffe1 	movih      	r1, 65505
1800b10e:	d84c2000 	ld.w      	r2, (r12, 0x0)
1800b112:	2900      	subi      	r1, 1
1800b114:	6884      	and      	r2, r1
1800b116:	dc4c2000 	st.w      	r2, (r12, 0x0)
				hw->LCDCON |= (param2<<16);
1800b11a:	d80c2000 	ld.w      	r0, (r12, 0x0)
1800b11e:	4330      	lsli      	r1, r3, 16
1800b120:	6c40      	or      	r1, r0
1800b122:	dc2c2000 	st.w      	r1, (r12, 0x0)
1800b126:	07b3      	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
				hw->LCDCON |= BIT(14);
1800b128:	d86c2000 	ld.w      	r3, (r12, 0x0)
			if(param1){
1800b12c:	e9020005 	bez      	r2, 0x1800b136	// 1800b136 <hglcdc_ioctl+0xf2>
				hw->LCDCON |= BIT(14);
1800b130:	ec634000 	ori      	r3, r3, 16384
1800b134:	07ba      	br      	0x1800b0a8	// 1800b0a8 <hglcdc_ioctl+0x64>
				hw->LCDCON &= ~BIT(14);
1800b136:	3b8e      	bclri      	r3, 14
1800b138:	07bc      	br      	0x1800b0b0	// 1800b0b0 <hglcdc_ioctl+0x6c>
			hw->LCD_IFCON &= ~(3<<3);
1800b13a:	d86c2001 	ld.w      	r3, (r12, 0x4)
			if(LCD_MODE_565 == param1){
1800b13e:	3a50      	cmpnei      	r2, 16
			hw->LCD_IFCON &= ~(3<<3);
1800b140:	3b83      	bclri      	r3, 3
1800b142:	3b84      	bclri      	r3, 4
1800b144:	dc6c2001 	st.w      	r3, (r12, 0x4)
			if(LCD_MODE_565 == param1){
1800b148:	0808      	bt      	0x1800b158	// 1800b158 <hglcdc_ioctl+0x114>
				hw->LCD_IFCON |= (2<<3);
1800b14a:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b14e:	ec630010 	ori      	r3, r3, 16
			hw->LCD_IFCON |= (1<<20);				
1800b152:	dc6c2001 	st.w      	r3, (r12, 0x4)
1800b156:	079b      	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			}else if(LCD_MODE_666 == param1){
1800b158:	3a52      	cmpnei      	r2, 18
1800b15a:	0806      	bt      	0x1800b166	// 1800b166 <hglcdc_ioctl+0x122>
				hw->LCD_IFCON |= (1<<3);
1800b15c:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b160:	ec630008 	ori      	r3, r3, 8
1800b164:	07f7      	br      	0x1800b152	// 1800b152 <hglcdc_ioctl+0x10e>
			}else if(LCD_MODE_888 == param1){
1800b166:	3a58      	cmpnei      	r2, 24
1800b168:	0b92      	bt      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
				hw->LCD_IFCON |= (0<<5);
1800b16a:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b16e:	07f2      	br      	0x1800b152	// 1800b152 <hglcdc_ioctl+0x10e>
			hw->LCD_IFCON &= ~(7<<5);
1800b170:	3100      	movi      	r1, 0
1800b172:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b176:	29e0      	subi      	r1, 225
			if(LCD_BUS_WIDTH_6 == param1){
1800b178:	3a46      	cmpnei      	r2, 6
			hw->LCD_IFCON &= ~(7<<5);
1800b17a:	68c4      	and      	r3, r1
1800b17c:	dc6c2001 	st.w      	r3, (r12, 0x4)
			if(LCD_BUS_WIDTH_6 == param1){
1800b180:	0ff5      	bf      	0x1800b16a	// 1800b16a <hglcdc_ioctl+0x126>
			}else if(LCD_BUS_WIDTH_8 == param1){
1800b182:	3a48      	cmpnei      	r2, 8
1800b184:	0806      	bt      	0x1800b190	// 1800b190 <hglcdc_ioctl+0x14c>
				hw->LCD_IFCON |= (1<<5);
1800b186:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b18a:	ec630020 	ori      	r3, r3, 32
1800b18e:	07e2      	br      	0x1800b152	// 1800b152 <hglcdc_ioctl+0x10e>
			}else if(LCD_BUS_WIDTH_9 == param1){
1800b190:	3a49      	cmpnei      	r2, 9
1800b192:	0806      	bt      	0x1800b19e	// 1800b19e <hglcdc_ioctl+0x15a>
				hw->LCD_IFCON |= (2<<5);
1800b194:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b198:	ec630040 	ori      	r3, r3, 64
1800b19c:	07db      	br      	0x1800b152	// 1800b152 <hglcdc_ioctl+0x10e>
			}else if(LCD_BUS_WIDTH_12 == param1){
1800b19e:	3a4c      	cmpnei      	r2, 12
1800b1a0:	0806      	bt      	0x1800b1ac	// 1800b1ac <hglcdc_ioctl+0x168>
				hw->LCD_IFCON |= (3<<5);
1800b1a2:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b1a6:	ec630060 	ori      	r3, r3, 96
1800b1aa:	07d4      	br      	0x1800b152	// 1800b152 <hglcdc_ioctl+0x10e>
			}else if(LCD_BUS_WIDTH_16 == param1){
1800b1ac:	3a50      	cmpnei      	r2, 16
1800b1ae:	0806      	bt      	0x1800b1ba	// 1800b1ba <hglcdc_ioctl+0x176>
				hw->LCD_IFCON |= (4<<5);
1800b1b0:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b1b4:	ec630080 	ori      	r3, r3, 128
1800b1b8:	07cd      	br      	0x1800b152	// 1800b152 <hglcdc_ioctl+0x10e>
			}else if(LCD_BUS_WIDTH_18 == param1){
1800b1ba:	3a52      	cmpnei      	r2, 18
1800b1bc:	0806      	bt      	0x1800b1c8	// 1800b1c8 <hglcdc_ioctl+0x184>
				hw->LCD_IFCON |= (5<<5);
1800b1be:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b1c2:	ec6300a0 	ori      	r3, r3, 160
1800b1c6:	07c6      	br      	0x1800b152	// 1800b152 <hglcdc_ioctl+0x10e>
			}else if(LCD_BUS_WIDTH_24 == param1){
1800b1c8:	3a58      	cmpnei      	r2, 24
1800b1ca:	0b61      	bt      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
				hw->LCD_IFCON |= (6<<5);
1800b1cc:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b1d0:	ec6300c0 	ori      	r3, r3, 192
1800b1d4:	07bf      	br      	0x1800b152	// 1800b152 <hglcdc_ioctl+0x10e>
			hw->LCD_IFCON &= ~(3<<8);
1800b1d6:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b1da:	3b88      	bclri      	r3, 8
1800b1dc:	3b89      	bclri      	r3, 9
1800b1de:	dc6c2001 	st.w      	r3, (r12, 0x4)
			if(LCD_BUS_RGB == param1){
1800b1e2:	e9220007 	bnez      	r2, 0x1800b1f0	// 1800b1f0 <hglcdc_ioctl+0x1ac>
				hw->LCD_IFCON |= (0<<8);
1800b1e6:	d86c2001 	ld.w      	r3, (r12, 0x4)
			hw->LCD_IFCON |= BIT(17);
1800b1ea:	dc6c2001 	st.w      	r3, (r12, 0x4)
		break;	
1800b1ee:	0756      	br      	0x1800b09a	// 1800b09a <hglcdc_ioctl+0x56>
			}else if(LCD_BUS_I80 == param1){
1800b1f0:	3a41      	cmpnei      	r2, 1
1800b1f2:	0806      	bt      	0x1800b1fe	// 1800b1fe <hglcdc_ioctl+0x1ba>
				hw->LCD_IFCON |= (1<<8);
1800b1f4:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b1f8:	ec630100 	ori      	r3, r3, 256
1800b1fc:	07ab      	br      	0x1800b152	// 1800b152 <hglcdc_ioctl+0x10e>
			}else if(LCD_BUS_I68 == param1){
1800b1fe:	3a42      	cmpnei      	r2, 2
1800b200:	0b46      	bt      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
				hw->LCD_IFCON |= (2<<8);
1800b202:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b206:	ec630200 	ori      	r3, r3, 512
1800b20a:	07a4      	br      	0x1800b152	// 1800b152 <hglcdc_ioctl+0x10e>
			hw->LCD_IFCON &= ~(7<<0);
1800b20c:	3100      	movi      	r1, 0
1800b20e:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b212:	2907      	subi      	r1, 8
			if(param1 < 6)
1800b214:	3a05      	cmphsi      	r2, 6
			hw->LCD_IFCON &= ~(7<<0);
1800b216:	68c4      	and      	r3, r1
1800b218:	dc6c2001 	st.w      	r3, (r12, 0x4)
			if(param1 < 6)
1800b21c:	0b38      	bt      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
				hw->LCD_IFCON |= (param1<<0);
1800b21e:	d80c2001 	ld.w      	r0, (r12, 0x4)
1800b222:	6c08      	or      	r0, r2
1800b224:	dc0c2001 	st.w      	r0, (r12, 0x4)
1800b228:	0732      	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			hw->LCD_WINCON &= ~(0X7FF<<16);
1800b22a:	ea20f801 	movih      	r0, 63489
1800b22e:	d82c2009 	ld.w      	r1, (r12, 0x24)
1800b232:	2800      	subi      	r0, 1
1800b234:	6840      	and      	r1, r0
1800b236:	dc2c2009 	st.w      	r1, (r12, 0x24)
			hw->LCD_WINCON &= ~(0X1FFF<<0);
1800b23a:	d82c2009 	ld.w      	r1, (r12, 0x24)
1800b23e:	ea001fff 	movi      	r0, 8191
1800b242:	6c02      	nor      	r0, r0
1800b244:	6840      	and      	r1, r0
1800b246:	dc2c2009 	st.w      	r1, (r12, 0x24)
			hw->LCD_WINCON |= ((h-1)<<16);
1800b24a:	ea2dffff 	movih      	r13, 65535
1800b24e:	4230      	lsli      	r1, r2, 16
1800b250:	d80c2009 	ld.w      	r0, (r12, 0x24)
1800b254:	6074      	addu      	r1, r13
1800b256:	6c40      	or      	r1, r0
1800b258:	dc2c2009 	st.w      	r1, (r12, 0x24)
			w = (param1>>16)&0xffff;
1800b25c:	4a50      	lsri      	r2, r2, 16
			hw->LCD_WINCON |= ((w*pixel_dot_num - 1)<<0);
1800b25e:	e42320ff 	andi      	r1, r3, 255
1800b262:	7c84      	mult      	r2, r1
1800b264:	d9ac2009 	ld.w      	r13, (r12, 0x24)
1800b268:	2a00      	subi      	r2, 1
1800b26a:	6cb4      	or      	r2, r13
1800b26c:	dc4c2009 	st.w      	r2, (r12, 0x24)
1800b270:	070e      	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			hw->LCD_VISIBLE_WIN &= ~(0X7FF<<16);
1800b272:	ea20f801 	movih      	r0, 63489
			w = (param1>>16)&0xffff;			
1800b276:	4ab0      	lsri      	r5, r2, 16
			h = param1&0xffff;
1800b278:	c40255e1 	zext      	r1, r2, 15, 0
			hw->LCD_VISIBLE_WIN &= ~(0X7FF<<16);
1800b27c:	2800      	subi      	r0, 1
1800b27e:	d84c200a 	ld.w      	r2, (r12, 0x28)
1800b282:	6880      	and      	r2, r0
1800b284:	dc4c200a 	st.w      	r2, (r12, 0x28)
			hw->LCD_VISIBLE_WIN &= ~(0X7FF<<0);
1800b288:	d84c200a 	ld.w      	r2, (r12, 0x28)
1800b28c:	ea0007ff 	movi      	r0, 2047
1800b290:	6c02      	nor      	r0, r0
1800b292:	6880      	and      	r2, r0
1800b294:	dc4c200a 	st.w      	r2, (r12, 0x28)
			hw->PICTURE_SIZE &= ~(0X7FF<<16);
1800b298:	ea20f801 	movih      	r0, 63489
1800b29c:	d84c200d 	ld.w      	r2, (r12, 0x34)
1800b2a0:	2800      	subi      	r0, 1
1800b2a2:	6880      	and      	r2, r0
1800b2a4:	dc4c200d 	st.w      	r2, (r12, 0x34)
			hw->PICTURE_SIZE &= ~(0X7FF<<0);
1800b2a8:	d84c200d 	ld.w      	r2, (r12, 0x34)
1800b2ac:	ea0007ff 	movi      	r0, 2047
1800b2b0:	6c02      	nor      	r0, r0
1800b2b2:	6880      	and      	r2, r0
1800b2b4:	dc4c200d 	st.w      	r2, (r12, 0x34)
			hw->LCD_VISIBLE_WIN |= ((h-1)<<16);
1800b2b8:	e5a11000 	subi      	r13, r1, 1
1800b2bc:	d84c200a 	ld.w      	r2, (r12, 0x28)
1800b2c0:	c60d482d 	lsli      	r13, r13, 16
1800b2c4:	6cb4      	or      	r2, r13
1800b2c6:	e40320ff 	andi      	r0, r3, 255
1800b2ca:	dc4c200a 	st.w      	r2, (r12, 0x28)
			hw->LCD_VISIBLE_WIN |= ((w*pixel_dot_num - 1)<<0);
1800b2ce:	c4a08424 	mult      	r4, r0, r5
1800b2d2:	d84c200a 	ld.w      	r2, (r12, 0x28)
1800b2d6:	2c00      	subi      	r4, 1
1800b2d8:	6d08      	or      	r4, r2
1800b2da:	dc8c200a 	st.w      	r4, (r12, 0x28)
			hw->PICTURE_SIZE |= ((h-1)<<16);
1800b2de:	d86c200d 	ld.w      	r3, (r12, 0x34)
1800b2e2:	6f4c      	or      	r13, r3
1800b2e4:	ddac200d 	st.w      	r13, (r12, 0x34)
			hw->LCD_LEN	   = h * w * pixel_dot_num - 1;
1800b2e8:	7c54      	mult      	r1, r5
			hw->PICTURE_SIZE |= ((w-1)<<0);	
1800b2ea:	d86c200d 	ld.w      	r3, (r12, 0x34)
1800b2ee:	e5a51000 	subi      	r13, r5, 1
			hw->LCD_LEN	   = h * w * pixel_dot_num - 1;
1800b2f2:	7c40      	mult      	r1, r0
			hw->PICTURE_SIZE |= ((w-1)<<0);	
1800b2f4:	6f4c      	or      	r13, r3
			hw->LCD_LEN	   = h * w * pixel_dot_num - 1;
1800b2f6:	2900      	subi      	r1, 1
			hw->PICTURE_SIZE |= ((w-1)<<0);	
1800b2f8:	ddac200d 	st.w      	r13, (r12, 0x34)
			hw->LCD_LEN	   = h * w * pixel_dot_num - 1;
1800b2fc:	dc2c2005 	st.w      	r1, (r12, 0x14)
1800b300:	06c6      	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			if(vs_en == 1){
1800b302:	e4622001 	andi      	r3, r2, 1
			hs_en  = ((param1&BIT(1))>>1);
1800b306:	c4225421 	zext      	r1, r2, 1, 1
			de_en  = ((param1&BIT(2))>>2);
1800b30a:	c442544d 	zext      	r13, r2, 2, 2
			clk_inv= ((param1&BIT(6))>>6);
1800b30e:	c4c254c0 	zext      	r0, r2, 6, 6
			if(vs_en == 1){
1800b312:	e9030040 	bez      	r3, 0x1800b392	// 1800b392 <hglcdc_ioctl+0x34e>
				hw->LCD_IFCON |= (1<<10);
1800b316:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b31a:	ec630400 	ori      	r3, r3, 1024
1800b31e:	dc6c2001 	st.w      	r3, (r12, 0x4)
				if(vs_inv == 1){
1800b322:	c4625463 	zext      	r3, r2, 3, 3
1800b326:	e9030032 	bez      	r3, 0x1800b38a	// 1800b38a <hglcdc_ioctl+0x346>
					hw->LCD_IFCON |= (1<<13);
1800b32a:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b32e:	ec632000 	ori      	r3, r3, 8192
				hw->LCD_IFCON &= ~(1<<10);
1800b332:	dc6c2001 	st.w      	r3, (r12, 0x4)
			if(hs_en == 1){
1800b336:	e9010036 	bez      	r1, 0x1800b3a2	// 1800b3a2 <hglcdc_ioctl+0x35e>
				hw->LCD_IFCON |= (1<<11);
1800b33a:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b33e:	ec630800 	ori      	r3, r3, 2048
1800b342:	dc6c2001 	st.w      	r3, (r12, 0x4)
				if(hs_inv == 1){
1800b346:	c4825483 	zext      	r3, r2, 4, 4
1800b34a:	e9030028 	bez      	r3, 0x1800b39a	// 1800b39a <hglcdc_ioctl+0x356>
					hw->LCD_IFCON |= (1<<14);
1800b34e:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b352:	ec634000 	ori      	r3, r3, 16384
					hw->LCD_IFCON &= ~(1<<14);
1800b356:	dc6c2001 	st.w      	r3, (r12, 0x4)
				hw->LCD_IFCON |= (1<<12);
1800b35a:	d82c2001 	ld.w      	r1, (r12, 0x4)
			if(de_en == 1){
1800b35e:	e90d002a 	bez      	r13, 0x1800b3b2	// 1800b3b2 <hglcdc_ioctl+0x36e>
				hw->LCD_IFCON |= (1<<12);
1800b362:	ec211000 	ori      	r1, r1, 4096
				if(de_inv == 1){
1800b366:	c4a254a2 	zext      	r2, r2, 5, 5
				hw->LCD_IFCON |= (1<<12);
1800b36a:	dc2c2001 	st.w      	r1, (r12, 0x4)
					hw->LCD_IFCON |= (1<<15);
1800b36e:	d82c2001 	ld.w      	r1, (r12, 0x4)
				if(de_inv == 1){
1800b372:	e902001e 	bez      	r2, 0x1800b3ae	// 1800b3ae <hglcdc_ioctl+0x36a>
					hw->LCD_IFCON |= (1<<15);
1800b376:	ec218000 	ori      	r1, r1, 32768
				hw->LCD_IFCON &= ~(1<<12);
1800b37a:	dc2c2001 	st.w      	r1, (r12, 0x4)
			if(clk_inv == 1){
1800b37e:	e900001c 	bez      	r0, 0x1800b3b6	// 1800b3b6 <hglcdc_ioctl+0x372>
				hw->LCD_IFCON |= (1<<16);
1800b382:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b386:	3bb0      	bseti      	r3, 16
1800b388:	06e5      	br      	0x1800b152	// 1800b152 <hglcdc_ioctl+0x10e>
					hw->LCD_IFCON &= ~(1<<13);
1800b38a:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b38e:	3b8d      	bclri      	r3, 13
1800b390:	07d1      	br      	0x1800b332	// 1800b332 <hglcdc_ioctl+0x2ee>
				hw->LCD_IFCON &= ~(1<<10);
1800b392:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b396:	3b8a      	bclri      	r3, 10
1800b398:	07cd      	br      	0x1800b332	// 1800b332 <hglcdc_ioctl+0x2ee>
					hw->LCD_IFCON &= ~(1<<14);
1800b39a:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b39e:	3b8e      	bclri      	r3, 14
1800b3a0:	07db      	br      	0x1800b356	// 1800b356 <hglcdc_ioctl+0x312>
				hw->LCD_IFCON &= ~(1<<11);
1800b3a2:	d82c2001 	ld.w      	r1, (r12, 0x4)
1800b3a6:	398b      	bclri      	r1, 11
1800b3a8:	dc2c2001 	st.w      	r1, (r12, 0x4)
1800b3ac:	07d7      	br      	0x1800b35a	// 1800b35a <hglcdc_ioctl+0x316>
					hw->LCD_IFCON &= ~(1<<15);
1800b3ae:	398f      	bclri      	r1, 15
1800b3b0:	07e5      	br      	0x1800b37a	// 1800b37a <hglcdc_ioctl+0x336>
				hw->LCD_IFCON &= ~(1<<12);
1800b3b2:	398c      	bclri      	r1, 12
1800b3b4:	07e3      	br      	0x1800b37a	// 1800b37a <hglcdc_ioctl+0x336>
				hw->LCD_IFCON &= ~(1<<16);
1800b3b6:	d82c2001 	ld.w      	r1, (r12, 0x4)
1800b3ba:	3990      	bclri      	r1, 16
1800b3bc:	dc2c2001 	st.w      	r1, (r12, 0x4)
1800b3c0:	0666      	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			hw->LCD_IFCON &= ~(param1<<13);
1800b3c2:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b3c6:	420d      	lsli      	r0, r2, 13
1800b3c8:	68c1      	andn      	r3, r0
1800b3ca:	dc6c2001 	st.w      	r3, (r12, 0x4)
			hw->LCD_IFCON |= (param1<<13);
1800b3ce:	d84c2001 	ld.w      	r2, (r12, 0x4)
1800b3d2:	6c80      	or      	r2, r0
				hw->LCD_IFCON |= (param1<<23);		
1800b3d4:	dc4c2001 	st.w      	r2, (r12, 0x4)
1800b3d8:	065a      	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			hw->LCD_IFCON &= ~(0x1f<<23);
1800b3da:	ea21f080 	movih      	r1, 61568
1800b3de:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b3e2:	2900      	subi      	r1, 1
			if(param1 < 0x20)
1800b3e4:	3a1f      	cmphsi      	r2, 32
			hw->LCD_IFCON &= ~(0x1f<<23);
1800b3e6:	68c4      	and      	r3, r1
1800b3e8:	dc6c2001 	st.w      	r3, (r12, 0x4)
			if(param1 < 0x20)
1800b3ec:	0a50      	bt      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
				hw->LCD_IFCON |= (param1<<23);		
1800b3ee:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b3f2:	4217      	lsli      	r0, r2, 23
1800b3f4:	c4602422 	or      	r2, r0, r3
1800b3f8:	07ee      	br      	0x1800b3d4	// 1800b3d4 <hglcdc_ioctl+0x390>
			hw->LCD_VISIBLE_START = 0;
1800b3fa:	3000      	movi      	r0, 0
1800b3fc:	dc0c200b 	st.w      	r0, (r12, 0x2c)
			hw->LCD_VISIBLE_START |= ((param2)<<16);
1800b400:	d9ac200b 	ld.w      	r13, (r12, 0x2c)
1800b404:	4330      	lsli      	r1, r3, 16
1800b406:	6c74      	or      	r1, r13
1800b408:	dc2c200b 	st.w      	r1, (r12, 0x2c)
			hw->LCD_VISIBLE_START |= ((param1)<<0);
1800b40c:	d82c200b 	ld.w      	r1, (r12, 0x2c)
1800b410:	6c48      	or      	r1, r2
1800b412:	dc2c200b 	st.w      	r1, (r12, 0x2c)
1800b416:	063b      	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			hw->LCD_HSYNCON = 0;
1800b418:	3000      	movi      	r0, 0
1800b41a:	dc0c2008 	st.w      	r0, (r12, 0x20)
			hw->LCD_HSYNCON |= (param1<<16);
1800b41e:	d82c2008 	ld.w      	r1, (r12, 0x20)
1800b422:	4250      	lsli      	r2, r2, 16
1800b424:	6c84      	or      	r2, r1
1800b426:	dc4c2008 	st.w      	r2, (r12, 0x20)
			hw->LCD_HSYNCON |= ((0)<<0);	
1800b42a:	d84c2008 	ld.w      	r2, (r12, 0x20)
1800b42e:	dc4c2008 	st.w      	r2, (r12, 0x20)
			hw->LCD_VSYNCON = 0;
1800b432:	dc0c2007 	st.w      	r0, (r12, 0x1c)
			hw->LCD_VSYNCON |= (param2<<16);
1800b436:	d84c2007 	ld.w      	r2, (r12, 0x1c)
1800b43a:	4330      	lsli      	r1, r3, 16
1800b43c:	6c48      	or      	r1, r2
1800b43e:	dc2c2007 	st.w      	r1, (r12, 0x1c)
			hw->LCD_VSYNCON |= ((0)<<0);
1800b442:	d86c2007 	ld.w      	r3, (r12, 0x1c)
1800b446:	dc6c2007 	st.w      	r3, (r12, 0x1c)
1800b44a:	0621      	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
				hw->LCD_IFCON &= ~(1<<22);
1800b44c:	d86c2001 	ld.w      	r3, (r12, 0x4)
			if(param1)
1800b450:	e9020004 	bez      	r2, 0x1800b458	// 1800b458 <hglcdc_ioctl+0x414>
				hw->LCD_IFCON &= ~(1<<22);
1800b454:	3b96      	bclri      	r3, 22
1800b456:	067e      	br      	0x1800b152	// 1800b152 <hglcdc_ioctl+0x10e>
				hw->LCD_IFCON |= (1<<22);
1800b458:	3bb6      	bseti      	r3, 22
1800b45a:	06c8      	br      	0x1800b1ea	// 1800b1ea <hglcdc_ioctl+0x1a6>
			hw->VIDEO_WINCON = 0;
1800b45c:	3000      	movi      	r0, 0
1800b45e:	dc0c2016 	st.w      	r0, (r12, 0x58)
			hw->VIDEO_WINCON |= ((param1-1)<<0);
1800b462:	d9ac2016 	ld.w      	r13, (r12, 0x58)
1800b466:	5a23      	subi      	r1, r2, 1
1800b468:	6c74      	or      	r1, r13
1800b46a:	dc2c2016 	st.w      	r1, (r12, 0x58)
			hw->VIDEO_WINCON |= ((param2-1)<<16);
1800b46e:	5b23      	subi      	r1, r3, 1
1800b470:	d84c2016 	ld.w      	r2, (r12, 0x58)
1800b474:	4130      	lsli      	r1, r1, 16
1800b476:	6c48      	or      	r1, r2
1800b478:	dc2c2016 	st.w      	r1, (r12, 0x58)
1800b47c:	0608      	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			hw->ROTATE_PICTURE0_YDMA_STADR = param1;
1800b47e:	dc4c2018 	st.w      	r2, (r12, 0x60)
1800b482:	0605      	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			hw->ROTATE_PICTURE0_UDMA_STADR = param1;
1800b484:	dc4c2019 	st.w      	r2, (r12, 0x64)
1800b488:	0602      	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			hw->ROTATE_PICTURE0_VDMA_STADR = param1;
1800b48a:	dc4c201a 	st.w      	r2, (r12, 0x68)
1800b48e:	e800fdff 	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			hw->ROTATE_PICTURE1_YDMA_STADR = param1;
1800b492:	dc4c201b 	st.w      	r2, (r12, 0x6c)
1800b496:	e800fdfb 	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			hw->ROTATE_PICTURE1_UDMA_STADR = param1;
1800b49a:	dc4c201c 	st.w      	r2, (r12, 0x70)
1800b49e:	e800fdf7 	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			hw->ROTATE_PICTURE1_VDMA_STADR = param1;
1800b4a2:	dc4c201d 	st.w      	r2, (r12, 0x74)
1800b4a6:	e800fdf3 	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
				hw->LCDCON |= BIT(10);
1800b4aa:	d86c2000 	ld.w      	r3, (r12, 0x0)
			if(param1){
1800b4ae:	e9020006 	bez      	r2, 0x1800b4ba	// 1800b4ba <hglcdc_ioctl+0x476>
				hw->LCDCON |= BIT(10);
1800b4b2:	ec630400 	ori      	r3, r3, 1024
1800b4b6:	e800fdf9 	br      	0x1800b0a8	// 1800b0a8 <hglcdc_ioctl+0x64>
				hw->LCDCON &= ~BIT(10);
1800b4ba:	3b8a      	bclri      	r3, 10
1800b4bc:	e800fdfa 	br      	0x1800b0b0	// 1800b0b0 <hglcdc_ioctl+0x6c>
			hw->ROTATE_PICTURE0_START = x|(y<<16);
1800b4c0:	dc4c201e 	st.w      	r2, (r12, 0x78)
			hw->ROTATE_PICTURE1_START = x|(y<<16);
1800b4c4:	dc6c2020 	st.w      	r3, (r12, 0x80)
1800b4c8:	e800fde2 	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			hw->ROTATE_OUTBUF_LINE_NUM = param1;
1800b4cc:	dc4c2022 	st.w      	r2, (r12, 0x88)
1800b4d0:	e800fdde 	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			hw->VIDEO_YDMA_STADR = param1;
1800b4d4:	dc4c2013 	st.w      	r2, (r12, 0x4c)
1800b4d8:	e800fdda 	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			hw->VIDEO_UDMA_STADR = param1;
1800b4dc:	dc4c2014 	st.w      	r2, (r12, 0x50)
1800b4e0:	e800fdd6 	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			hw->VIDEO_VDMA_STADR = param1;
1800b4e4:	dc4c2015 	st.w      	r2, (r12, 0x54)
1800b4e8:	e800fdd2 	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			if(param1){
1800b4ec:	e9020014 	bez      	r2, 0x1800b514	// 1800b514 <hglcdc_ioctl+0x4d0>
				hw->LCDCON |= BIT(13);	
1800b4f0:	d84c2000 	ld.w      	r2, (r12, 0x0)
1800b4f4:	ec422000 	ori      	r2, r2, 8192
				hw->LCDCON &= ~BIT(13);	
1800b4f8:	dc4c2000 	st.w      	r2, (r12, 0x0)
			if(param2 == LCD_ROTATE_0){
1800b4fc:	e9230010 	bnez      	r3, 0x1800b51c	// 1800b51c <hglcdc_ioctl+0x4d8>
				hw->LCDCON &= ~BIT(11);
1800b500:	d84c2000 	ld.w      	r2, (r12, 0x0)
1800b504:	3a8b      	bclri      	r2, 11
1800b506:	dc4c2000 	st.w      	r2, (r12, 0x0)
				hw->LCDCON &= ~BIT(12);
1800b50a:	d84c2000 	ld.w      	r2, (r12, 0x0)
1800b50e:	3a8c      	bclri      	r2, 12
1800b510:	e800fde7 	br      	0x1800b0de	// 1800b0de <hglcdc_ioctl+0x9a>
				hw->LCDCON &= ~BIT(13);	
1800b514:	d84c2000 	ld.w      	r2, (r12, 0x0)
1800b518:	3a8d      	bclri      	r2, 13
1800b51a:	07ef      	br      	0x1800b4f8	// 1800b4f8 <hglcdc_ioctl+0x4b4>
			if(param2 == LCD_ROTATE_90){
1800b51c:	3b41      	cmpnei      	r3, 1
1800b51e:	080c      	bt      	0x1800b536	// 1800b536 <hglcdc_ioctl+0x4f2>
				hw->LCDCON |= BIT(11);
1800b520:	d86c2000 	ld.w      	r3, (r12, 0x0)
1800b524:	ec630800 	ori      	r3, r3, 2048
1800b528:	dc6c2000 	st.w      	r3, (r12, 0x0)
				hw->LCDCON &= ~BIT(12);
1800b52c:	d86c2000 	ld.w      	r3, (r12, 0x0)
1800b530:	3b8c      	bclri      	r3, 12
1800b532:	e800fdbb 	br      	0x1800b0a8	// 1800b0a8 <hglcdc_ioctl+0x64>
			}else if(param2 == LCD_ROTATE_180){
1800b536:	3b42      	cmpnei      	r3, 2
1800b538:	080c      	bt      	0x1800b550	// 1800b550 <hglcdc_ioctl+0x50c>
				hw->LCDCON &= ~BIT(11);
1800b53a:	d86c2000 	ld.w      	r3, (r12, 0x0)
1800b53e:	3b8b      	bclri      	r3, 11
				hw->LCDCON |= BIT(11);
1800b540:	dc6c2000 	st.w      	r3, (r12, 0x0)
				hw->LCDCON |= BIT(12);		
1800b544:	d86c2000 	ld.w      	r3, (r12, 0x0)
1800b548:	ec631000 	ori      	r3, r3, 4096
1800b54c:	e800fdae 	br      	0x1800b0a8	// 1800b0a8 <hglcdc_ioctl+0x64>
			}else if(param2 == LCD_ROTATE_270){
1800b550:	3b43      	cmpnei      	r3, 3
1800b552:	e860fd9d 	bt      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
				hw->LCDCON |= BIT(11);
1800b556:	d86c2000 	ld.w      	r3, (r12, 0x0)
1800b55a:	ec630800 	ori      	r3, r3, 2048
1800b55e:	07f1      	br      	0x1800b540	// 1800b540 <hglcdc_ioctl+0x4fc>
			hw->ROTATE_PICTURE0_WINCON = 0;
1800b560:	3000      	movi      	r0, 0
1800b562:	dc0c201f 	st.w      	r0, (r12, 0x7c)
			hw->ROTATE_PICTURE0_WINCON |= ((h-1)<<16);
1800b566:	4230      	lsli      	r1, r2, 16
1800b568:	ea24ffff 	movih      	r4, 65535
1800b56c:	d9ac201f 	ld.w      	r13, (r12, 0x7c)
1800b570:	6050      	addu      	r1, r4
1800b572:	6c74      	or      	r1, r13
1800b574:	dc2c201f 	st.w      	r1, (r12, 0x7c)
			w = (param1>>16)&0xffff;			
1800b578:	c602484d 	lsri      	r13, r2, 16
			hw->ROTATE_PICTURE0_WINCON |= ((w-1)<<0);
1800b57c:	d82c201f 	ld.w      	r1, (r12, 0x7c)
1800b580:	e5ad1000 	subi      	r13, r13, 1
1800b584:	6f44      	or      	r13, r1
1800b586:	ddac201f 	st.w      	r13, (r12, 0x7c)
			hw->ROTATE_PICTURE1_WINCON = 0;
1800b58a:	dc0c2021 	st.w      	r0, (r12, 0x84)
			hw->ROTATE_PICTURE1_WINCON |= ((h-1)<<16);
1800b58e:	c603482d 	lsli      	r13, r3, 16
1800b592:	d84c2021 	ld.w      	r2, (r12, 0x84)
1800b596:	6350      	addu      	r13, r4
1800b598:	6f48      	or      	r13, r2
1800b59a:	ddac2021 	st.w      	r13, (r12, 0x84)
			w = (param2>>16)&0xffff;			
1800b59e:	4b30      	lsri      	r1, r3, 16
			hw->ROTATE_PICTURE1_WINCON |= ((w-1)<<0);
1800b5a0:	d84c2021 	ld.w      	r2, (r12, 0x84)
1800b5a4:	2900      	subi      	r1, 1
1800b5a6:	6c48      	or      	r1, r2
1800b5a8:	dc2c2021 	st.w      	r1, (r12, 0x84)
1800b5ac:	e800fd70 	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			hw->LCDCON &= ~(3<<4);
1800b5b0:	d86c2000 	ld.w      	r3, (r12, 0x0)
1800b5b4:	3b84      	bclri      	r3, 4
1800b5b6:	3b85      	bclri      	r3, 5
1800b5b8:	dc6c2000 	st.w      	r3, (r12, 0x0)
			hw->LCDCON |= (param1<<4);
1800b5bc:	d86c2000 	ld.w      	r3, (r12, 0x0)
1800b5c0:	4204      	lsli      	r0, r2, 4
1800b5c2:	c4602422 	or      	r2, r0, r3
1800b5c6:	e800fd8c 	br      	0x1800b0de	// 1800b0de <hglcdc_ioctl+0x9a>
			hw->VIDEO_START = 0;
1800b5ca:	3000      	movi      	r0, 0
1800b5cc:	dc0c2017 	st.w      	r0, (r12, 0x5c)
			hw->VIDEO_START |= ((y)<<16);
1800b5d0:	ea21ffff 	movih      	r1, 65535
1800b5d4:	d86c2017 	ld.w      	r3, (r12, 0x5c)
1800b5d8:	6848      	and      	r1, r2
1800b5da:	6c4c      	or      	r1, r3
1800b5dc:	dc2c2017 	st.w      	r1, (r12, 0x5c)
			hw->VIDEO_START |= ((x)<<0);
1800b5e0:	d86c2017 	ld.w      	r3, (r12, 0x5c)
			x = param1&0xffff;
1800b5e4:	c40255e1 	zext      	r1, r2, 15, 0
			hw->VIDEO_START |= ((x)<<0);
1800b5e8:	6c4c      	or      	r1, r3
1800b5ea:	dc2c2017 	st.w      	r1, (r12, 0x5c)
1800b5ee:	e800fd4f 	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
				hw->LCDCON |= BIT(1);
1800b5f2:	d86c2000 	ld.w      	r3, (r12, 0x0)
			if(param1){
1800b5f6:	e9020006 	bez      	r2, 0x1800b602	// 1800b602 <hglcdc_ioctl+0x5be>
				hw->LCDCON |= BIT(1);
1800b5fa:	ec630002 	ori      	r3, r3, 2
1800b5fe:	e800fd55 	br      	0x1800b0a8	// 1800b0a8 <hglcdc_ioctl+0x64>
				hw->LCDCON &= ~BIT(1);
1800b602:	3b81      	bclri      	r3, 1
1800b604:	e800fd56 	br      	0x1800b0b0	// 1800b0b0 <hglcdc_ioctl+0x6c>
			hw->OSD0_WINCON = 0;
1800b608:	3000      	movi      	r0, 0
1800b60a:	dc0c2011 	st.w      	r0, (r12, 0x44)
			w = param1&0xffff;
1800b60e:	c40255e1 	zext      	r1, r2, 15, 0
			hw->OSD0_WINCON |= ((w-1)<<0);
1800b612:	d86c2011 	ld.w      	r3, (r12, 0x44)
1800b616:	2900      	subi      	r1, 1
1800b618:	6c4c      	or      	r1, r3
1800b61a:	dc2c2011 	st.w      	r1, (r12, 0x44)
			hw->OSD0_WINCON |= ((h-1)<<16);
1800b61e:	ea21ffff 	movih      	r1, 65535
1800b622:	6848      	and      	r1, r2
1800b624:	ea22ffff 	movih      	r2, 65535
1800b628:	d86c2011 	ld.w      	r3, (r12, 0x44)
1800b62c:	6048      	addu      	r1, r2
1800b62e:	6c4c      	or      	r1, r3
1800b630:	dc2c2011 	st.w      	r1, (r12, 0x44)
1800b634:	e800fd2c 	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			hw->OSD0_START = 0;	
1800b638:	3000      	movi      	r0, 0
1800b63a:	dc0c2012 	st.w      	r0, (r12, 0x48)
			hw->OSD0_START |= ((param1)<<16);
1800b63e:	d9ac2012 	ld.w      	r13, (r12, 0x48)
1800b642:	4230      	lsli      	r1, r2, 16
1800b644:	6c74      	or      	r1, r13
1800b646:	dc2c2012 	st.w      	r1, (r12, 0x48)
			hw->OSD0_START |= ((param2)<<0);	
1800b64a:	d82c2012 	ld.w      	r1, (r12, 0x48)
1800b64e:	6c4c      	or      	r1, r3
1800b650:	dc2c2012 	st.w      	r1, (r12, 0x48)
1800b654:	e800fd1c 	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			hw->OSD0_LUTDMA_STADR = param1;
1800b658:	dc4c200f 	st.w      	r2, (r12, 0x3c)
1800b65c:	e800fd18 	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			hw->OSD0_DMA_STADR = param1;
1800b660:	dc4c200e 	st.w      	r2, (r12, 0x38)
1800b664:	e800fd14 	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			hw->OSD0_WORD_LEN = param1/4;
1800b668:	4a02      	lsri      	r0, r2, 2
1800b66a:	dc0c2010 	st.w      	r0, (r12, 0x40)
1800b66e:	e800fd0f 	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			hw->LCDCON &= ~(3<<6);
1800b672:	d86c2000 	ld.w      	r3, (r12, 0x0)
1800b676:	3b86      	bclri      	r3, 6
1800b678:	3b87      	bclri      	r3, 7
1800b67a:	dc6c2000 	st.w      	r3, (r12, 0x0)
			if(OSD_RGB_256 == param1){
1800b67e:	e9220006 	bnez      	r2, 0x1800b68a	// 1800b68a <hglcdc_ioctl+0x646>
				hw->LCDCON |= (0<<6);
1800b682:	d86c2000 	ld.w      	r3, (r12, 0x0)
1800b686:	e800fd15 	br      	0x1800b0b0	// 1800b0b0 <hglcdc_ioctl+0x6c>
			}else if(OSD_RGB_565 == param1){
1800b68a:	3a41      	cmpnei      	r2, 1
1800b68c:	0807      	bt      	0x1800b69a	// 1800b69a <hglcdc_ioctl+0x656>
				hw->LCDCON |= (1<<6);
1800b68e:	d86c2000 	ld.w      	r3, (r12, 0x0)
1800b692:	ec630040 	ori      	r3, r3, 64
1800b696:	e800fd09 	br      	0x1800b0a8	// 1800b0a8 <hglcdc_ioctl+0x64>
			}else if(OSD_RGB_888 == param1){
1800b69a:	3a42      	cmpnei      	r2, 2
1800b69c:	e860fcf8 	bt      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
				hw->LCDCON |= (2<<6);
1800b6a0:	d86c2000 	ld.w      	r3, (r12, 0x0)
1800b6a4:	ec630080 	ori      	r3, r3, 128
1800b6a8:	e800fd00 	br      	0x1800b0a8	// 1800b0a8 <hglcdc_ioctl+0x64>
			hw->ALPHA &= ~(0x1ff<<0);
1800b6ac:	d86c200c 	ld.w      	r3, (r12, 0x30)
1800b6b0:	ea0101ff 	movi      	r1, 511
1800b6b4:	6c46      	nor      	r1, r1
1800b6b6:	68c4      	and      	r3, r1
1800b6b8:	dc6c200c 	st.w      	r3, (r12, 0x30)
			hw->ALPHA |= (param1<<0);
1800b6bc:	d80c200c 	ld.w      	r0, (r12, 0x30)
1800b6c0:	6c08      	or      	r0, r2
1800b6c2:	dc0c200c 	st.w      	r0, (r12, 0x30)
1800b6c6:	e800fce3 	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			if(param1)
1800b6ca:	e9020010 	bez      	r2, 0x1800b6ea	// 1800b6ea <hglcdc_ioctl+0x6a6>
				hw->LCDCON |= BIT(8);
1800b6ce:	d84c2000 	ld.w      	r2, (r12, 0x0)
1800b6d2:	ec420100 	ori      	r2, r2, 256
				hw->LCDCON &= ~BIT(8);
1800b6d6:	dc4c2000 	st.w      	r2, (r12, 0x0)
			if(param2)
1800b6da:	e903000c 	bez      	r3, 0x1800b6f2	// 1800b6f2 <hglcdc_ioctl+0x6ae>
				hw->LCDCON |= BIT(9);
1800b6de:	d86c2000 	ld.w      	r3, (r12, 0x0)
1800b6e2:	ec630200 	ori      	r3, r3, 512
1800b6e6:	e800fce1 	br      	0x1800b0a8	// 1800b0a8 <hglcdc_ioctl+0x64>
				hw->LCDCON &= ~BIT(8);
1800b6ea:	d84c2000 	ld.w      	r2, (r12, 0x0)
1800b6ee:	3a88      	bclri      	r2, 8
1800b6f0:	07f3      	br      	0x1800b6d6	// 1800b6d6 <hglcdc_ioctl+0x692>
				hw->LCDCON &= ~BIT(9);			
1800b6f2:	d84c2000 	ld.w      	r2, (r12, 0x0)
1800b6f6:	3a89      	bclri      	r2, 9
1800b6f8:	e800fcf3 	br      	0x1800b0de	// 1800b0de <hglcdc_ioctl+0x9a>
			hw->OSD_ENC_IDENT0 = param1;
1800b6fc:	dc4c202e 	st.w      	r2, (r12, 0xb8)
			hw->OSD_ENC_IDENT1 = param2;
1800b700:	dc6c202f 	st.w      	r3, (r12, 0xbc)
1800b704:	e800fcc4 	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			hw->OSD_ENC_TRANS0 = param1;
1800b708:	dc4c2030 	st.w      	r2, (r12, 0xc0)
			hw->OSD_ENC_TRANS1 = param2;
1800b70c:	dc6c2031 	st.w      	r3, (r12, 0xc4)
1800b710:	e800fcbe 	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
				hw->LCDCON |= (1<<2); 
1800b714:	d86c2000 	ld.w      	r3, (r12, 0x0)
			if(param1)
1800b718:	e9020006 	bez      	r2, 0x1800b724	// 1800b724 <hglcdc_ioctl+0x6e0>
				hw->LCDCON |= (1<<2); 
1800b71c:	ec630004 	ori      	r3, r3, 4
1800b720:	e800fcc4 	br      	0x1800b0a8	// 1800b0a8 <hglcdc_ioctl+0x64>
				hw->LCDCON &= ~(1<<2);
1800b724:	3b82      	bclri      	r3, 2
1800b726:	e800fcc5 	br      	0x1800b0b0	// 1800b0b0 <hglcdc_ioctl+0x6c>
			hw->OSD_ENC_SADR = param1;
1800b72a:	dc4c202a 	st.w      	r2, (r12, 0xa8)
1800b72e:	e800fcaf 	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			hw->OSD_ENC_TADR = param1;
1800b732:	dc4c202b 	st.w      	r2, (r12, 0xac)
1800b736:	e800fcab 	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			hw->OSD_ENC_RLEN = param1/4;
1800b73a:	4a02      	lsri      	r0, r2, 2
1800b73c:	dc0c202c 	st.w      	r0, (r12, 0xb0)
1800b740:	e800fca6 	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
			ret_val = hw->OSD_ENC_DLEN*4;
1800b744:	d84c202d 	ld.w      	r2, (r12, 0xb4)
1800b748:	4242      	lsli      	r2, r2, 2
		break;	
1800b74a:	e800fca8 	br      	0x1800b09a	// 1800b09a <hglcdc_ioctl+0x56>
			hw->LCDCON |= BIT(3);
1800b74e:	d86c2000 	ld.w      	r3, (r12, 0x0)
1800b752:	ec630008 	ori      	r3, r3, 8
1800b756:	e800fca9 	br      	0x1800b0a8	// 1800b0a8 <hglcdc_ioctl+0x64>
			hw->LCD_IFCON &= ~BIT(17); // LCD_CS==0
1800b75a:	d82c2001 	ld.w      	r1, (r12, 0x4)
1800b75e:	3991      	bclri      	r1, 17
1800b760:	dc2c2001 	st.w      	r1, (r12, 0x4)
			if(!param2)
1800b764:	e923001a 	bnez      	r3, 0x1800b798	// 1800b798 <hglcdc_ioctl+0x754>
				hw->LCD_IFCON &= ~BIT(18); // LCD_DC==0,tx cmd
1800b768:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b76c:	3b92      	bclri      	r3, 18
				hw->LCD_IFCON |= BIT(18);  // LCD_DC==1,tx data
1800b76e:	dc6c2001 	st.w      	r3, (r12, 0x4)
			hw->LCD_IFCON |= BIT(19);  // LCD_CMD_WR=1
1800b772:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b776:	3bb3      	bseti      	r3, 19
1800b778:	dc6c2001 	st.w      	r3, (r12, 0x4)
			while (hw->LCD_IFSTA & BIT(17));
1800b77c:	3380      	movi      	r3, 128
			hw->LCD_CMD = param1;
1800b77e:	dc4c2003 	st.w      	r2, (r12, 0xc)
			while (hw->LCD_IFSTA & BIT(17));
1800b782:	436a      	lsli      	r3, r3, 10
1800b784:	d84c2006 	ld.w      	r2, (r12, 0x18)
1800b788:	688c      	and      	r2, r3
1800b78a:	e922fffd 	bnez      	r2, 0x1800b784	// 1800b784 <hglcdc_ioctl+0x740>
			hw->LCD_IFCON |= BIT(17);
1800b78e:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b792:	3bb1      	bseti      	r3, 17
1800b794:	e800fd2b 	br      	0x1800b1ea	// 1800b1ea <hglcdc_ioctl+0x1a6>
				hw->LCD_IFCON |= BIT(18);  // LCD_DC==1,tx data
1800b798:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b79c:	3bb2      	bseti      	r3, 18
1800b79e:	07e8      	br      	0x1800b76e	// 1800b76e <hglcdc_ioctl+0x72a>
			uint32_t baud_tmp = hw->LCD_BAUD;
1800b7a0:	d88c2002 	ld.w      	r4, (r12, 0x8)
			if(baud_tmp %2 == 0)
1800b7a4:	e4242001 	andi      	r1, r4, 1
			uint8_t cmd = param2>>16;
1800b7a8:	4bb0      	lsri      	r5, r3, 16
			uint8_t *read_buf = (uint8_t*)param1;
1800b7aa:	6f4b      	mov      	r13, r2
			uint32_t len_tmp = hw->LCD_LEN;
1800b7ac:	d8ec2005 	ld.w      	r7, (r12, 0x14)
			if(baud_tmp %2 == 0)
1800b7b0:	e9210005 	bnez      	r1, 0x1800b7ba	// 1800b7ba <hglcdc_ioctl+0x776>
				hw->LCD_BAUD = baud_tmp + 1;
1800b7b4:	5c22      	addi      	r1, r4, 1
1800b7b6:	dc2c2002 	st.w      	r1, (r12, 0x8)
			hw->LCD_IFCON &= ~BIT(17);// LCD_CS==0
1800b7ba:	d82c2001 	ld.w      	r1, (r12, 0x4)
			hw->LCD_LEN = len-1;
1800b7be:	e40320ff 	andi      	r0, r3, 255
			hw->LCD_IFCON &= ~BIT(17);// LCD_CS==0
1800b7c2:	3991      	bclri      	r1, 17
			hw->LCD_LEN = len-1;
1800b7c4:	5863      	subi      	r3, r0, 1
			hw->LCD_IFCON &= ~BIT(17);// LCD_CS==0
1800b7c6:	dc2c2001 	st.w      	r1, (r12, 0x4)
			hw->LCD_LEN = len-1;
1800b7ca:	dc6c2005 	st.w      	r3, (r12, 0x14)
			hw->LCD_IFCON &= ~BIT(18); // LCD_DC==0,tx cmd
1800b7ce:	d8cc2001 	ld.w      	r6, (r12, 0x4)
1800b7d2:	3e92      	bclri      	r6, 18
1800b7d4:	dccc2001 	st.w      	r6, (r12, 0x4)
			hw->LCD_IFCON &= ~BIT(19); // LCD_CMD_WR=0
1800b7d8:	d8cc2001 	ld.w      	r6, (r12, 0x4)
1800b7dc:	e4a520ff 	andi      	r5, r5, 255
1800b7e0:	3e93      	bclri      	r6, 19
1800b7e2:	dccc2001 	st.w      	r6, (r12, 0x4)
			hw->LCD_CMD = cmd;
1800b7e6:	dcac2003 	st.w      	r5, (r12, 0xc)
				while ((hw->LCD_IFSTA & BIT(18)) == 0)
1800b7ea:	3580      	movi      	r5, 128
1800b7ec:	45ab      	lsli      	r5, r5, 11
			for (int i = 0; i < len; i++)
1800b7ee:	c44d0083 	subu      	r3, r13, r2
1800b7f2:	640d      	cmplt      	r3, r0
1800b7f4:	080c      	bt      	0x1800b80c	// 1800b80c <hglcdc_ioctl+0x7c8>
			hw->LCD_IFCON |= BIT(17); // LCD_CS==1
1800b7f6:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b7fa:	3bb1      	bseti      	r3, 17
1800b7fc:	dc6c2001 	st.w      	r3, (r12, 0x4)
			hw->LCD_LEN = len_tmp;
1800b800:	dcec2005 	st.w      	r7, (r12, 0x14)
			hw->LCD_BAUD = baud_tmp;
1800b804:	dc8c2002 	st.w      	r4, (r12, 0x8)
1800b808:	e800fc42 	br      	0x1800b08c	// 1800b08c <hglcdc_ioctl+0x48>
				while ((hw->LCD_IFSTA & BIT(18)) == 0)
1800b80c:	d8cc2006 	ld.w      	r6, (r12, 0x18)
1800b810:	6994      	and      	r6, r5
1800b812:	e906fffd 	bez      	r6, 0x1800b80c	// 1800b80c <hglcdc_ioctl+0x7c8>
				read_cmd = hw->LCD_CMD;
1800b816:	d86c2003 	ld.w      	r3, (r12, 0xc)
1800b81a:	dc6d0000 	st.b      	r3, (r13, 0x0)
				read_buf++;
1800b81e:	e5ad0000 	addi      	r13, r13, 1
1800b822:	07e6      	br      	0x1800b7ee	// 1800b7ee <hglcdc_ioctl+0x7aa>
			hw->LCD_IFCON &= ~BIT(17); // LCD_CS==0
1800b824:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b828:	3b91      	bclri      	r3, 17
1800b82a:	dc6c2001 	st.w      	r3, (r12, 0x4)
			hw->LCD_IFCON |= (1<<20);				
1800b82e:	d86c2001 	ld.w      	r3, (r12, 0x4)
1800b832:	3bb4      	bseti      	r3, 20
1800b834:	e800fc8f 	br      	0x1800b152	// 1800b152 <hglcdc_ioctl+0x10e>
			os_printf("NO LCDC IOCTL:%d\r\n",ioctl_cmd);
1800b838:	1004      	lrw      	r0, 0x1801723c	// 1800b848 <hglcdc_ioctl+0x804>
1800b83a:	e0000945 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
			ret_val = -ENOTSUPP;
1800b83e:	ea02020b 	movi      	r2, 523
1800b842:	6c8a      	nor      	r2, r2
	return ret_val;
1800b844:	e800fc2b 	br      	0x1800b09a	// 1800b09a <hglcdc_ioctl+0x56>
1800b848:	1801723c 	.long	0x1801723c

1800b84c <hglcdc_set_baudrate>:
static int32 hglcdc_set_baudrate(struct lcdc_device *p_lcdc,uint32 baudrate){
1800b84c:	14d2      	push      	r4-r5, r15
1800b84e:	6d07      	mov      	r4, r1
	struct hglcdc_hw *hw  = (struct hglcdc_hw *)lcdc_hw->hw;
1800b850:	90a3      	ld.w      	r5, (r0, 0xc)
	baud = system_clock_get()/baudrate;
1800b852:	e0002ca7 	bsr      	0x180111a0	// 180111a0 <system_clock_get>
1800b856:	c4808024 	divu      	r4, r0, r4
	_os_printf("lcd baud:%d\r\n",baud);
1800b85a:	6c53      	mov      	r1, r4
1800b85c:	1003      	lrw      	r0, 0x18017250	// 1800b868 <hglcdc_set_baudrate+0x1c>
1800b85e:	e0000933 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
}
1800b862:	3000      	movi      	r0, 0
	hw->LCD_BAUD = baud;
1800b864:	b582      	st.w      	r4, (r5, 0x8)
}
1800b866:	1492      	pop      	r4-r5, r15
1800b868:	18017250 	.long	0x18017250

1800b86c <hglcdc_init>:
static int32 hglcdc_init(struct lcdc_device *p_lcdc){
1800b86c:	14d2      	push      	r4-r5, r15
	SYSCTRL->CLK_CON4      |= BIT(29)|BIT(30);
1800b86e:	ea224002 	movih      	r2, 16386
	struct hglcdc_hw *hw  = (struct hglcdc_hw *)lcdc_hw->hw;
1800b872:	9083      	ld.w      	r4, (r0, 0xc)
	SYSCTRL->CLK_CON4      |= BIT(29)|BIT(30);
1800b874:	9275      	ld.w      	r3, (r2, 0x54)
1800b876:	3bbd      	bseti      	r3, 29
1800b878:	3bbe      	bseti      	r3, 30
1800b87a:	b275      	st.w      	r3, (r2, 0x54)
	pin_func(HG_LCDC_DEVID,1);
1800b87c:	3101      	movi      	r1, 1
	lcd_glo = hw;
1800b87e:	1067      	lrw      	r3, 0x20002164	// 1800b898 <hglcdc_init+0x2c>
	pin_func(HG_LCDC_DEVID,1);
1800b880:	3041      	movi      	r0, 65
	SYSCTRL->CLK_CON4      |= BIT(29)|BIT(30);
1800b882:	3500      	movi      	r5, 0
	lcd_glo = hw;
1800b884:	b380      	st.w      	r4, (r3, 0x0)
	pin_func(HG_LCDC_DEVID,1);
1800b886:	e3ffc451 	bsr      	0x18004128	// 18004128 <pin_func>
	hw->LCD_IFCON = 0x80000;
1800b88a:	3380      	movi      	r3, 128
1800b88c:	436c      	lsli      	r3, r3, 12
}
1800b88e:	6c17      	mov      	r0, r5
	hw->LCD_IFCON = 0x80000;
1800b890:	b461      	st.w      	r3, (r4, 0x4)
	hw->LCDCON = 0; 
1800b892:	b4a0      	st.w      	r5, (r4, 0x0)
}
1800b894:	1492      	pop      	r4-r5, r15
1800b896:	0000      	.short	0x0000
1800b898:	20002164 	.long	0x20002164

1800b89c <hglcdc_close>:

static int32 hglcdc_close(struct lcdc_device *p_lcdc){
	struct hglcdc *lcdc_hw = (struct hglcdc*)p_lcdc;	
	struct hglcdc_hw *hw  = (struct hglcdc_hw *)lcdc_hw->hw;
1800b89c:	9043      	ld.w      	r2, (r0, 0xc)
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1800b89e:	3101      	movi      	r1, 1
	hw->LCDCON &= ~(1<<0); 
1800b8a0:	9260      	ld.w      	r3, (r2, 0x0)
1800b8a2:	3b80      	bclri      	r3, 0
1800b8a4:	b260      	st.w      	r3, (r2, 0x0)
    IRQn &= 0x7FUL;
1800b8a6:	9066      	ld.w      	r3, (r0, 0x18)
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1800b8a8:	c4a354c2 	zext      	r2, r3, 6, 5
1800b8ac:	e463201f 	andi      	r3, r3, 31
1800b8b0:	c4614023 	lsl      	r3, r1, r3
1800b8b4:	221f      	addi      	r2, 32
1800b8b6:	1023      	lrw      	r1, 0xe000e100	// 1800b8c0 <hglcdc_close+0x24>
	irq_disable(lcdc_hw->irq_num);
	return 0;
}
1800b8b8:	3000      	movi      	r0, 0
1800b8ba:	d4410883 	str.w      	r3, (r1, r2 << 2)
1800b8be:	783c      	jmp      	r15
1800b8c0:	e000e100 	.long	0xe000e100

1800b8c4 <irq_lcdc_enable>:
	struct hglcdc_hw *hw  = (struct hglcdc_hw *)lcdc_hw->hw;
1800b8c4:	9003      	ld.w      	r0, (r0, 0xc)
1800b8c6:	221b      	addi      	r2, 28
1800b8c8:	3301      	movi      	r3, 1
	if(mode){
1800b8ca:	e9010007 	bez      	r1, 0x1800b8d8	// 1800b8d8 <irq_lcdc_enable+0x14>
		hw->LCD_IFCON |= BIT(irq+28);
1800b8ce:	9021      	ld.w      	r1, (r0, 0x4)
1800b8d0:	70c8      	lsl      	r3, r2
1800b8d2:	6cc4      	or      	r3, r1
		hw->LCD_IFCON &= ~BIT(irq+28);
1800b8d4:	b061      	st.w      	r3, (r0, 0x4)
}
1800b8d6:	783c      	jmp      	r15
		hw->LCD_IFCON &= ~BIT(irq+28);
1800b8d8:	9021      	ld.w      	r1, (r0, 0x4)
1800b8da:	70c8      	lsl      	r3, r2
1800b8dc:	c4612043 	andn      	r3, r1, r3
1800b8e0:	07fa      	br      	0x1800b8d4	// 1800b8d4 <irq_lcdc_enable+0x10>
	...

1800b8e4 <lcdcirq_register>:
int32 lcdcirq_register(struct lcdc_device *p_lcdc,uint32 irq, lcdc_irq_hdl isr, uint32 dev_id){
1800b8e4:	14d5      	push      	r4-r8, r15
1800b8e6:	6d07      	mov      	r4, r1
1800b8e8:	6d8b      	mov      	r6, r2
	struct hglcdc_hw *hw  = (struct hglcdc_hw *)lcdc_hw->hw;
1800b8ea:	90e3      	ld.w      	r7, (r0, 0xc)
int32 lcdcirq_register(struct lcdc_device *p_lcdc,uint32 irq, lcdc_irq_hdl isr, uint32 dev_id){
1800b8ec:	6d43      	mov      	r5, r0
	request_irq(lcdc_hw->irq_num, LCDC_IRQHandler_action, p_lcdc);
1800b8ee:	6c83      	mov      	r2, r0
1800b8f0:	102f      	lrw      	r1, 0x1800afd4	// 1800b92c <lcdcirq_register+0x48>
int32 lcdcirq_register(struct lcdc_device *p_lcdc,uint32 irq, lcdc_irq_hdl isr, uint32 dev_id){
1800b8f2:	6e0f      	mov      	r8, r3
	request_irq(lcdc_hw->irq_num, LCDC_IRQHandler_action, p_lcdc);
1800b8f4:	9006      	ld.w      	r0, (r0, 0x18)
1800b8f6:	e3ffbef3 	bsr      	0x180036dc	// 180036dc <request_irq>
	irq_lcdc_enable(p_lcdc, 1, irq);
1800b8fa:	7490      	zextb      	r2, r4
1800b8fc:	6c17      	mov      	r0, r5
1800b8fe:	3101      	movi      	r1, 1
1800b900:	e3ffffe2 	bsr      	0x1800b8c4	// 1800b8c4 <irq_lcdc_enable>
	lcdcirq_vector_table[irq] = isr;
1800b904:	106b      	lrw      	r3, 0x20002154	// 1800b930 <lcdcirq_register+0x4c>
	lcdcirq_dev_table[irq] = dev_id;
1800b906:	104c      	lrw      	r2, 0x20002168	// 1800b934 <lcdcirq_register+0x50>
	os_printf("lcdcirq1_register:%d %x  %x\r\n",irq,(uint32)lcdcirq_vector_table[irq],(uint32)isr);
1800b908:	6c53      	mov      	r1, r4
	lcdcirq_dev_table[irq] = dev_id;
1800b90a:	d4820888 	str.w      	r8, (r2, r4 << 2)
	lcdcirq_vector_table[irq] = isr;
1800b90e:	d4830886 	str.w      	r6, (r3, r4 << 2)
	hw->LCD_IFSTA |= BIT(irq);
1800b912:	3301      	movi      	r3, 1
1800b914:	9746      	ld.w      	r2, (r7, 0x18)
1800b916:	70d0      	lsl      	r3, r4
1800b918:	6cc8      	or      	r3, r2
1800b91a:	b766      	st.w      	r3, (r7, 0x18)
	os_printf("lcdcirq1_register:%d %x  %x\r\n",irq,(uint32)lcdcirq_vector_table[irq],(uint32)isr);
1800b91c:	6c9b      	mov      	r2, r6
1800b91e:	6cdb      	mov      	r3, r6
1800b920:	1006      	lrw      	r0, 0x1801725e	// 1800b938 <lcdcirq_register+0x54>
1800b922:	e00008d1 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
}
1800b926:	3000      	movi      	r0, 0
1800b928:	1495      	pop      	r4-r8, r15
1800b92a:	0000      	.short	0x0000
1800b92c:	1800afd4 	.long	0x1800afd4
1800b930:	20002154 	.long	0x20002154
1800b934:	20002168 	.long	0x20002168
1800b938:	1801725e 	.long	0x1801725e

1800b93c <lcdcirq_unregister>:
int32 lcdcirq_unregister(struct lcdc_device *p_lcdc,uint32 irq){
1800b93c:	14d2      	push      	r4-r5, r15
1800b93e:	6d07      	mov      	r4, r1
	irq_lcdc_enable(p_lcdc, 0, irq);
1800b940:	7484      	zextb      	r2, r1
1800b942:	3100      	movi      	r1, 0
	struct hglcdc_hw *hw  = (struct hglcdc_hw *)lcdc_hw->hw;
1800b944:	90a3      	ld.w      	r5, (r0, 0xc)
	irq_lcdc_enable(p_lcdc, 0, irq);
1800b946:	e3ffffbf 	bsr      	0x1800b8c4	// 1800b8c4 <irq_lcdc_enable>
	lcdcirq_vector_table[irq] = NULL;
1800b94a:	3000      	movi      	r0, 0
1800b94c:	1066      	lrw      	r3, 0x20002154	// 1800b964 <lcdcirq_unregister+0x28>
	hw->LCD_IFSTA |= BIT(irq);
1800b94e:	3101      	movi      	r1, 1
	lcdcirq_vector_table[irq] = NULL;
1800b950:	d4830880 	str.w      	r0, (r3, r4 << 2)
	hw->LCD_IFSTA |= BIT(irq);
1800b954:	7050      	lsl      	r1, r4
	lcdcirq_dev_table[irq] = 0;
1800b956:	1065      	lrw      	r3, 0x20002168	// 1800b968 <lcdcirq_unregister+0x2c>
1800b958:	d4830880 	str.w      	r0, (r3, r4 << 2)
	hw->LCD_IFSTA |= BIT(irq);
1800b95c:	9566      	ld.w      	r3, (r5, 0x18)
1800b95e:	6c4c      	or      	r1, r3
1800b960:	b526      	st.w      	r1, (r5, 0x18)
}
1800b962:	1492      	pop      	r4-r5, r15
1800b964:	20002154 	.long	0x20002154
1800b968:	20002168 	.long	0x20002168

1800b96c <hglcdc_attach>:
    .request_irq = lcdcirq_register,
    .release_irq = lcdcirq_unregister,
};


int32 hglcdc_attach(uint32 dev_id, struct hglcdc *lcdc){
1800b96c:	14d1      	push      	r4, r15
    lcdc->opened          = 0;
1800b96e:	815c      	ld.b      	r2, (r1, 0x1c)
1800b970:	3400      	movi      	r4, 0
    lcdc->use_dma         = 0;
1800b972:	e44220fe 	andi      	r2, r2, 254
1800b976:	c4445c01 	ins      	r2, r4, 1, 1
    IRQn &= 0x7FUL;
1800b97a:	9166      	ld.w      	r3, (r1, 0x18)
1800b97c:	a15c      	st.b      	r2, (r1, 0x1c)
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1800b97e:	ea0c0001 	movi      	r12, 1
    lcdc->irq_hdl                   = NULL;
    lcdc->irq_data                  = 0;
	lcdc->dev.dev.ops = (const struct devobj_ops *)&dev_ops;
1800b982:	104a      	lrw      	r2, 0x18017220	// 1800b9a8 <hglcdc_attach+0x3c>
1800b984:	b142      	st.w      	r2, (r1, 0x8)
1800b986:	c4a354c2 	zext      	r2, r3, 6, 5
1800b98a:	e463201f 	andi      	r3, r3, 31
1800b98e:	c46c4023 	lsl      	r3, r12, r3
1800b992:	221f      	addi      	r2, 32
1800b994:	ea8c0006 	lrw      	r12, 0xe000e100	// 1800b9ac <hglcdc_attach+0x40>
    lcdc->irq_hdl                   = NULL;
1800b998:	b184      	st.w      	r4, (r1, 0x10)
    lcdc->irq_data                  = 0;
1800b99a:	b185      	st.w      	r4, (r1, 0x14)
1800b99c:	d44c0883 	str.w      	r3, (r12, r2 << 2)
    irq_disable(lcdc->irq_num);
    dev_register(dev_id, (struct dev_obj *)lcdc);	
1800b9a0:	e3ffbb82 	bsr      	0x180030a4	// 180030a4 <dev_register>
	return 0;
}
1800b9a4:	6c13      	mov      	r0, r4
1800b9a6:	1491      	pop      	r4, r15
1800b9a8:	18017220 	.long	0x18017220
1800b9ac:	e000e100 	.long	0xe000e100

1800b9b0 <PRC_IRQHandler_action>:
	return ret_val;
}


void PRC_IRQHandler_action(void *p_prc)
{
1800b9b0:	14d0      	push      	r15
	uint32 sta = 0;
	uint8 loop;
	struct hgprc *prc_hw = (struct hgprc*)p_prc; 
	struct hgprc_hw *hw  = (struct hgprc_hw *)prc_hw->hw;
1800b9b2:	9043      	ld.w      	r2, (r0, 0xc)
	sta = hw->STA;
1800b9b4:	9261      	ld.w      	r3, (r2, 0x4)
	for(loop = 0;loop < PRC_IRQ_NUM;loop++){
		if(sta&BIT(loop)){
1800b9b6:	e4632001 	andi      	r3, r3, 1
1800b9ba:	e903000d 	bez      	r3, 0x1800b9d4	// 1800b9d4 <PRC_IRQHandler_action+0x24>
			hw->STA = BIT(loop);
1800b9be:	3301      	movi      	r3, 1
1800b9c0:	b261      	st.w      	r3, (r2, 0x4)
			if(prcirq_vector_table[loop] != NULL)
1800b9c2:	1066      	lrw      	r3, 0x2000217c	// 1800b9d8 <PRC_IRQHandler_action+0x28>
1800b9c4:	9360      	ld.w      	r3, (r3, 0x0)
1800b9c6:	e9030007 	bez      	r3, 0x1800b9d4	// 1800b9d4 <PRC_IRQHandler_action+0x24>
				prcirq_vector_table[loop] (loop,prcirq_dev_table[loop],0);
1800b9ca:	1045      	lrw      	r2, 0x20002178	// 1800b9dc <PRC_IRQHandler_action+0x2c>
1800b9cc:	9220      	ld.w      	r1, (r2, 0x0)
1800b9ce:	3200      	movi      	r2, 0
1800b9d0:	6c0b      	mov      	r0, r2
1800b9d2:	7bcd      	jsr      	r3
		}
	}
}
1800b9d4:	1490      	pop      	r15
1800b9d6:	0000      	.short	0x0000
1800b9d8:	2000217c 	.long	0x2000217c
1800b9dc:	20002178 	.long	0x20002178

1800b9e0 <hgprc_init>:
}

static int32 hgprc_init(struct prc_device *p_prc){
	int32  ret_val = RET_OK;
	struct hgprc *prc_hw = (struct hgprc*)p_prc;	
	struct hgprc_hw *hw  = (struct hgprc_hw *)prc_hw->hw;
1800b9e0:	9063      	ld.w      	r3, (r0, 0xc)
	hw->CON  = 0;
1800b9e2:	3000      	movi      	r0, 0
1800b9e4:	b300      	st.w      	r0, (r3, 0x0)
	hw->SADR = 0;
1800b9e6:	b302      	st.w      	r0, (r3, 0x8)
	hw->YADR = 0;
1800b9e8:	b303      	st.w      	r0, (r3, 0xc)
	hw->UADR = 0;
1800b9ea:	b304      	st.w      	r0, (r3, 0x10)
	hw->VADR = 0;
1800b9ec:	b305      	st.w      	r0, (r3, 0x14)

	return ret_val;
}
1800b9ee:	783c      	jmp      	r15

1800b9f0 <hgprc_ioctl>:
static int32 hgprc_ioctl(struct prc_device *p_prc, enum prc_ioctl_cmd ioctl_cmd, uint32 param1, uint32 param2){
1800b9f0:	14d0      	push      	r15
	switch(ioctl_cmd){
1800b9f2:	3906      	cmphsi      	r1, 7
static int32 hgprc_ioctl(struct prc_device *p_prc, enum prc_ioctl_cmd ioctl_cmd, uint32 param1, uint32 param2){
1800b9f4:	6f07      	mov      	r12, r1
	struct hgprc_hw *hw  = (struct hgprc_hw *)prc_hw->hw;
1800b9f6:	9063      	ld.w      	r3, (r0, 0xc)
	switch(ioctl_cmd){
1800b9f8:	082b      	bt      	0x1800ba4e	// 1800ba4e <hgprc_ioctl+0x5e>
1800b9fa:	1023      	lrw      	r1, 0x18017280	// 1800ba04 <hgprc_ioctl+0x14>
1800b9fc:	d1810881 	ldr.w      	r1, (r1, r12 << 2)
1800ba00:	7804      	jmp      	r1
1800ba02:	0000      	.short	0x0000
1800ba04:	18017280 	.long	0x18017280
			hw->CON &= ~((0x7ff)<<16);
1800ba08:	ea20f801 	movih      	r0, 63489
1800ba0c:	9320      	ld.w      	r1, (r3, 0x0)
1800ba0e:	2800      	subi      	r0, 1
1800ba10:	6840      	and      	r1, r0
1800ba12:	b320      	st.w      	r1, (r3, 0x0)
			hw->CON |= ((param1)<<16);
1800ba14:	9320      	ld.w      	r1, (r3, 0x0)
1800ba16:	4250      	lsli      	r2, r2, 16
			hw->CON |= ((param1)<<2);
1800ba18:	6c84      	or      	r2, r1
			hw->CON |= BIT(0);
1800ba1a:	b340      	st.w      	r2, (r3, 0x0)
1800ba1c:	0409      	br      	0x1800ba2e	// 1800ba2e <hgprc_ioctl+0x3e>
			hw->CON &= ~((0x3)<<2);
1800ba1e:	9320      	ld.w      	r1, (r3, 0x0)
1800ba20:	3982      	bclri      	r1, 2
1800ba22:	3983      	bclri      	r1, 3
1800ba24:	b320      	st.w      	r1, (r3, 0x0)
			hw->CON |= ((param1)<<2);
1800ba26:	9320      	ld.w      	r1, (r3, 0x0)
1800ba28:	4242      	lsli      	r2, r2, 2
1800ba2a:	07f7      	br      	0x1800ba18	// 1800ba18 <hgprc_ioctl+0x28>
			hw->YADR = param1;
1800ba2c:	b343      	st.w      	r2, (r3, 0xc)
    int32  ret_val = RET_OK;
1800ba2e:	3000      	movi      	r0, 0
}
1800ba30:	1490      	pop      	r15
			hw->UADR = param1;
1800ba32:	b344      	st.w      	r2, (r3, 0x10)
1800ba34:	07fd      	br      	0x1800ba2e	// 1800ba2e <hgprc_ioctl+0x3e>
			hw->VADR = param1;
1800ba36:	b345      	st.w      	r2, (r3, 0x14)
1800ba38:	07fb      	br      	0x1800ba2e	// 1800ba2e <hgprc_ioctl+0x3e>
			hw->SADR = param1;
1800ba3a:	b342      	st.w      	r2, (r3, 0x8)
1800ba3c:	07f9      	br      	0x1800ba2e	// 1800ba2e <hgprc_ioctl+0x3e>
			hw->CON |= BIT(1);				//enable prc
1800ba3e:	9340      	ld.w      	r2, (r3, 0x0)
1800ba40:	ec420002 	ori      	r2, r2, 2
1800ba44:	b340      	st.w      	r2, (r3, 0x0)
			hw->CON |= BIT(0);
1800ba46:	9340      	ld.w      	r2, (r3, 0x0)
1800ba48:	ec420001 	ori      	r2, r2, 1
1800ba4c:	07e7      	br      	0x1800ba1a	// 1800ba1a <hgprc_ioctl+0x2a>
			os_printf("NO PRC IOCTL:%d\r\n",ioctl_cmd);
1800ba4e:	1004      	lrw      	r0, 0x180172ac	// 1800ba5c <hgprc_ioctl+0x6c>
1800ba50:	e000083a 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
            ret_val = -ENOTSUPP;
1800ba54:	ea00020b 	movi      	r0, 523
1800ba58:	6c02      	nor      	r0, r0
	return ret_val;
1800ba5a:	07eb      	br      	0x1800ba30	// 1800ba30 <hgprc_ioctl+0x40>
1800ba5c:	180172ac 	.long	0x180172ac

1800ba60 <irq_prc_enable>:
	struct hgprc_hw *hw  = (struct hgprc_hw *)prc_hw->hw;
1800ba60:	9003      	ld.w      	r0, (r0, 0xc)
1800ba62:	2207      	addi      	r2, 8
1800ba64:	3301      	movi      	r3, 1
	if(mode){
1800ba66:	e9010007 	bez      	r1, 0x1800ba74	// 1800ba74 <irq_prc_enable+0x14>
		hw->CON |= BIT(irq+8);
1800ba6a:	9020      	ld.w      	r1, (r0, 0x0)
1800ba6c:	70c8      	lsl      	r3, r2
1800ba6e:	6cc4      	or      	r3, r1
		hw->CON &= ~BIT(irq+8);
1800ba70:	b060      	st.w      	r3, (r0, 0x0)
}
1800ba72:	783c      	jmp      	r15
		hw->CON &= ~BIT(irq+8);
1800ba74:	9020      	ld.w      	r1, (r0, 0x0)
1800ba76:	70c8      	lsl      	r3, r2
1800ba78:	c4612043 	andn      	r3, r1, r3
1800ba7c:	07fa      	br      	0x1800ba70	// 1800ba70 <irq_prc_enable+0x10>
	...

1800ba80 <prcirq_register>:
int32 prcirq_register(struct prc_device *p_prc,uint32 irq, prc_irq_hdl isr, uint32 dev_id){
1800ba80:	14d5      	push      	r4-r8, r15
1800ba82:	6d47      	mov      	r5, r1
	struct hgprc_hw *hw  = (struct hgprc_hw *)prc_hw->hw;
1800ba84:	90c3      	ld.w      	r6, (r0, 0xc)
int32 prcirq_register(struct prc_device *p_prc,uint32 irq, prc_irq_hdl isr, uint32 dev_id){
1800ba86:	6d03      	mov      	r4, r0
1800ba88:	6e0b      	mov      	r8, r2
	request_irq(prc_hw->irq_num, PRC_IRQHandler_action, p_prc);
1800ba8a:	1032      	lrw      	r1, 0x1800b9b0	// 1800bad0 <prcirq_register+0x50>
1800ba8c:	6c83      	mov      	r2, r0
1800ba8e:	9006      	ld.w      	r0, (r0, 0x18)
int32 prcirq_register(struct prc_device *p_prc,uint32 irq, prc_irq_hdl isr, uint32 dev_id){
1800ba90:	6dcf      	mov      	r7, r3
	request_irq(prc_hw->irq_num, PRC_IRQHandler_action, p_prc);
1800ba92:	e3ffbe25 	bsr      	0x180036dc	// 180036dc <request_irq>
	irq_prc_enable(p_prc, 1, irq);
1800ba96:	7494      	zextb      	r2, r5
1800ba98:	6c13      	mov      	r0, r4
1800ba9a:	3101      	movi      	r1, 1
1800ba9c:	e3ffffe2 	bsr      	0x1800ba60	// 1800ba60 <irq_prc_enable>
    IRQn &= 0x7FUL;
1800baa0:	9446      	ld.w      	r2, (r4, 0x18)
    VIC->ISER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1800baa2:	c4a254c0 	zext      	r0, r2, 6, 5
1800baa6:	3101      	movi      	r1, 1
1800baa8:	e442201f 	andi      	r2, r2, 31
1800baac:	c4414022 	lsl      	r2, r1, r2
1800bab0:	1069      	lrw      	r3, 0xe000e100	// 1800bad4 <prcirq_register+0x54>
1800bab2:	d4030882 	str.w      	r2, (r3, r0 << 2)
	hw->STA |= BIT(irq);
1800bab6:	7054      	lsl      	r1, r5
	prcirq_dev_table[irq] = dev_id;
1800bab8:	1048      	lrw      	r2, 0x20002178	// 1800bad8 <prcirq_register+0x58>
	prcirq_vector_table[irq] = isr;
1800baba:	1069      	lrw      	r3, 0x2000217c	// 1800badc <prcirq_register+0x5c>
}
1800babc:	3000      	movi      	r0, 0
	prcirq_dev_table[irq] = dev_id;
1800babe:	d4a20887 	str.w      	r7, (r2, r5 << 2)
	prcirq_vector_table[irq] = isr;
1800bac2:	d4a30888 	str.w      	r8, (r3, r5 << 2)
	hw->STA |= BIT(irq);
1800bac6:	9661      	ld.w      	r3, (r6, 0x4)
1800bac8:	6c4c      	or      	r1, r3
1800baca:	b621      	st.w      	r1, (r6, 0x4)
}
1800bacc:	1495      	pop      	r4-r8, r15
1800bace:	0000      	.short	0x0000
1800bad0:	1800b9b0 	.long	0x1800b9b0
1800bad4:	e000e100 	.long	0xe000e100
1800bad8:	20002178 	.long	0x20002178
1800badc:	2000217c 	.long	0x2000217c

1800bae0 <prcirq_unregister>:
int32 prcirq_unregister(struct prc_device *p_prc,uint32 irq){
1800bae0:	14d2      	push      	r4-r5, r15
1800bae2:	6d07      	mov      	r4, r1
	irq_prc_enable(p_prc, 0, irq);
1800bae4:	7484      	zextb      	r2, r1
1800bae6:	3100      	movi      	r1, 0
	struct hgprc_hw *hw  = (struct hgprc_hw *)prc_hw->hw;
1800bae8:	90a3      	ld.w      	r5, (r0, 0xc)
	irq_prc_enable(p_prc, 0, irq);
1800baea:	e3ffffbb 	bsr      	0x1800ba60	// 1800ba60 <irq_prc_enable>
	prcirq_vector_table[irq] = NULL;
1800baee:	3000      	movi      	r0, 0
1800baf0:	1066      	lrw      	r3, 0x2000217c	// 1800bb08 <prcirq_unregister+0x28>
	hw->STA |= BIT(irq);
1800baf2:	3101      	movi      	r1, 1
	prcirq_vector_table[irq] = NULL;
1800baf4:	d4830880 	str.w      	r0, (r3, r4 << 2)
	hw->STA |= BIT(irq);
1800baf8:	7050      	lsl      	r1, r4
	prcirq_dev_table[irq] = 0;
1800bafa:	1065      	lrw      	r3, 0x20002178	// 1800bb0c <prcirq_unregister+0x2c>
1800bafc:	d4830880 	str.w      	r0, (r3, r4 << 2)
	hw->STA |= BIT(irq);
1800bb00:	9561      	ld.w      	r3, (r5, 0x4)
1800bb02:	6c4c      	or      	r1, r3
1800bb04:	b521      	st.w      	r1, (r5, 0x4)
}
1800bb06:	1492      	pop      	r4-r5, r15
1800bb08:	2000217c 	.long	0x2000217c
1800bb0c:	20002178 	.long	0x20002178

1800bb10 <hgprc_attach>:
};



void hgprc_attach(uint32 dev_id, struct hgprc *prc)
{
1800bb10:	14d0      	push      	r15
    IRQn &= 0x7FUL;
1800bb12:	9166      	ld.w      	r3, (r1, 0x18)
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1800bb14:	ea0c0001 	movi      	r12, 1
	prc->dev.dev.ops = (const struct devobj_ops *)&dev_ops;
1800bb18:	1048      	lrw      	r2, 0x1801729c	// 1800bb38 <hgprc_attach+0x28>
1800bb1a:	b142      	st.w      	r2, (r1, 0x8)
1800bb1c:	c4a354c2 	zext      	r2, r3, 6, 5
1800bb20:	e463201f 	andi      	r3, r3, 31
1800bb24:	c46c4023 	lsl      	r3, r12, r3
1800bb28:	221f      	addi      	r2, 32
1800bb2a:	ea8c0005 	lrw      	r12, 0xe000e100	// 1800bb3c <hgprc_attach+0x2c>
1800bb2e:	d44c0883 	str.w      	r3, (r12, r2 << 2)
    irq_disable(prc->irq_num);
    dev_register(dev_id, (struct dev_obj *)prc);
1800bb32:	e3ffbab9 	bsr      	0x180030a4	// 180030a4 <dev_register>
}
1800bb36:	1490      	pop      	r15
1800bb38:	1801729c 	.long	0x1801729c
1800bb3c:	e000e100 	.long	0xe000e100

1800bb40 <csi_vic_enable_irq>:
    VIC->ISER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1800bb40:	c4a054c2 	zext      	r2, r0, 6, 5
1800bb44:	3301      	movi      	r3, 1
1800bb46:	e400201f 	andi      	r0, r0, 31
1800bb4a:	c4034020 	lsl      	r0, r3, r0
1800bb4e:	1063      	lrw      	r3, 0xe000e100	// 1800bb58 <csi_vic_enable_irq+0x18>
1800bb50:	d4430880 	str.w      	r0, (r3, r2 << 2)
}
1800bb54:	783c      	jmp      	r15
1800bb56:	0000      	.short	0x0000
1800bb58:	e000e100 	.long	0xe000e100

1800bb5c <csi_vic_disable_irq>:
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1800bb5c:	c4a054c3 	zext      	r3, r0, 6, 5
1800bb60:	3201      	movi      	r2, 1
1800bb62:	e400201f 	andi      	r0, r0, 31
1800bb66:	c4024020 	lsl      	r0, r2, r0
1800bb6a:	231f      	addi      	r3, 32
1800bb6c:	1042      	lrw      	r2, 0xe000e100	// 1800bb74 <csi_vic_disable_irq+0x18>
1800bb6e:	d4620880 	str.w      	r0, (r2, r3 << 2)
}
1800bb72:	783c      	jmp      	r15
1800bb74:	e000e100 	.long	0xe000e100

1800bb78 <SCALE1_IRQHandler_action>:
		hw->SCALECON &= ~BIT(irq+16);
	}
}

void SCALE1_IRQHandler_action(void *p_scale)
{
1800bb78:	14d2      	push      	r4-r5, r15
	uint32 sta = 0;
	uint8 loop;
	struct hgscale *scale_hw = (struct hgscale*)p_scale; 
	struct hgscale1_hw *hw  = (struct hgscale1_hw *)scale_hw->hw;
1800bb7a:	90a3      	ld.w      	r5, (r0, 0xc)
	sta = hw->SCALESTA;
1800bb7c:	958b      	ld.w      	r4, (r5, 0x2c)
	for(loop = 0;loop < SCALE_IRQ_NUM;loop++){
		if(sta&BIT(loop)){
1800bb7e:	e4642001 	andi      	r3, r4, 1
1800bb82:	e903000d 	bez      	r3, 0x1800bb9c	// 1800bb9c <SCALE1_IRQHandler_action+0x24>
			hw->SCALESTA = BIT(loop);
1800bb86:	3301      	movi      	r3, 1
1800bb88:	b56b      	st.w      	r3, (r5, 0x2c)
			if(scaleirq1_vector_table[loop] != NULL)
1800bb8a:	106d      	lrw      	r3, 0x20002198	// 1800bbbc <SCALE1_IRQHandler_action+0x44>
1800bb8c:	9360      	ld.w      	r3, (r3, 0x0)
1800bb8e:	e9030007 	bez      	r3, 0x1800bb9c	// 1800bb9c <SCALE1_IRQHandler_action+0x24>
				scaleirq1_vector_table[loop] (loop,scaleirq1_dev_table[loop],0);
1800bb92:	104c      	lrw      	r2, 0x20002180	// 1800bbc0 <SCALE1_IRQHandler_action+0x48>
1800bb94:	9220      	ld.w      	r1, (r2, 0x0)
1800bb96:	3200      	movi      	r2, 0
1800bb98:	6c0b      	mov      	r0, r2
1800bb9a:	7bcd      	jsr      	r3
		if(sta&BIT(loop)){
1800bb9c:	c4245424 	zext      	r4, r4, 1, 1
1800bba0:	e904000d 	bez      	r4, 0x1800bbba	// 1800bbba <SCALE1_IRQHandler_action+0x42>
			hw->SCALESTA = BIT(loop);
1800bba4:	3302      	movi      	r3, 2
1800bba6:	b56b      	st.w      	r3, (r5, 0x2c)
			if(scaleirq1_vector_table[loop] != NULL)
1800bba8:	1065      	lrw      	r3, 0x20002198	// 1800bbbc <SCALE1_IRQHandler_action+0x44>
1800bbaa:	9361      	ld.w      	r3, (r3, 0x4)
1800bbac:	e9030007 	bez      	r3, 0x1800bbba	// 1800bbba <SCALE1_IRQHandler_action+0x42>
				scaleirq1_vector_table[loop] (loop,scaleirq1_dev_table[loop],0);
1800bbb0:	1044      	lrw      	r2, 0x20002180	// 1800bbc0 <SCALE1_IRQHandler_action+0x48>
1800bbb2:	3001      	movi      	r0, 1
1800bbb4:	9221      	ld.w      	r1, (r2, 0x4)
1800bbb6:	3200      	movi      	r2, 0
1800bbb8:	7bcd      	jsr      	r3
		}
	}
}
1800bbba:	1492      	pop      	r4-r5, r15
1800bbbc:	20002198 	.long	0x20002198
1800bbc0:	20002180 	.long	0x20002180

1800bbc4 <SCALE2_IRQHandler_action>:
	return 0;
}


void SCALE2_IRQHandler_action(void *p_scale)
{
1800bbc4:	14d2      	push      	r4-r5, r15
	uint32 sta = 0;
	uint8 loop;
	struct hgscale *scale_hw = (struct hgscale*)p_scale; 
	struct hgscale2_hw *hw  = (struct hgscale2_hw *)scale_hw->hw;
1800bbc6:	90a3      	ld.w      	r5, (r0, 0xc)
	sta = hw->SCALESTA;
1800bbc8:	958b      	ld.w      	r4, (r5, 0x2c)
	for(loop = 0;loop < SCALE_IRQ_NUM;loop++){
		if(sta&BIT(loop)){
1800bbca:	e4642001 	andi      	r3, r4, 1
1800bbce:	e903000d 	bez      	r3, 0x1800bbe8	// 1800bbe8 <SCALE2_IRQHandler_action+0x24>
			hw->SCALESTA = BIT(loop);
1800bbd2:	3301      	movi      	r3, 1
1800bbd4:	b56b      	st.w      	r3, (r5, 0x2c)
			if(scaleirq2_vector_table[loop] != NULL)
1800bbd6:	106d      	lrw      	r3, 0x200021a0	// 1800bc08 <SCALE2_IRQHandler_action+0x44>
1800bbd8:	9360      	ld.w      	r3, (r3, 0x0)
1800bbda:	e9030007 	bez      	r3, 0x1800bbe8	// 1800bbe8 <SCALE2_IRQHandler_action+0x24>
				scaleirq2_vector_table[loop] (loop,scaleirq2_dev_table[loop],0);
1800bbde:	104c      	lrw      	r2, 0x200021a8	// 1800bc0c <SCALE2_IRQHandler_action+0x48>
1800bbe0:	9220      	ld.w      	r1, (r2, 0x0)
1800bbe2:	3200      	movi      	r2, 0
1800bbe4:	6c0b      	mov      	r0, r2
1800bbe6:	7bcd      	jsr      	r3
		if(sta&BIT(loop)){
1800bbe8:	c4245424 	zext      	r4, r4, 1, 1
1800bbec:	e904000d 	bez      	r4, 0x1800bc06	// 1800bc06 <SCALE2_IRQHandler_action+0x42>
			hw->SCALESTA = BIT(loop);
1800bbf0:	3302      	movi      	r3, 2
1800bbf2:	b56b      	st.w      	r3, (r5, 0x2c)
			if(scaleirq2_vector_table[loop] != NULL)
1800bbf4:	1065      	lrw      	r3, 0x200021a0	// 1800bc08 <SCALE2_IRQHandler_action+0x44>
1800bbf6:	9361      	ld.w      	r3, (r3, 0x4)
1800bbf8:	e9030007 	bez      	r3, 0x1800bc06	// 1800bc06 <SCALE2_IRQHandler_action+0x42>
				scaleirq2_vector_table[loop] (loop,scaleirq2_dev_table[loop],0);
1800bbfc:	1044      	lrw      	r2, 0x200021a8	// 1800bc0c <SCALE2_IRQHandler_action+0x48>
1800bbfe:	3001      	movi      	r0, 1
1800bc00:	9221      	ld.w      	r1, (r2, 0x4)
1800bc02:	3200      	movi      	r2, 0
1800bc04:	7bcd      	jsr      	r3
		}
	}
}
1800bc06:	1492      	pop      	r4-r5, r15
1800bc08:	200021a0 	.long	0x200021a0
1800bc0c:	200021a8 	.long	0x200021a8

1800bc10 <SCALE3_IRQHandler_action>:
	return 0;
}


void SCALE3_IRQHandler_action(void *p_scale)
{
1800bc10:	14d2      	push      	r4-r5, r15
	uint32 sta = 0;
	uint8 loop;
	struct hgscale *scale_hw = (struct hgscale*)p_scale; 
	struct hgscale3_hw *hw  = (struct hgscale3_hw *)scale_hw->hw;
1800bc12:	90a3      	ld.w      	r5, (r0, 0xc)
	sta = hw->SCALESTA;
1800bc14:	958f      	ld.w      	r4, (r5, 0x3c)
	for(loop = 0;loop < SCALE_IRQ_NUM;loop++){
		if(sta&BIT(loop)){
1800bc16:	e4642001 	andi      	r3, r4, 1
1800bc1a:	e903000d 	bez      	r3, 0x1800bc34	// 1800bc34 <SCALE3_IRQHandler_action+0x24>
			hw->SCALESTA = BIT(loop);
1800bc1e:	3301      	movi      	r3, 1
1800bc20:	b56f      	st.w      	r3, (r5, 0x3c)
			if(scaleirq3_vector_table[loop] != NULL)
1800bc22:	106d      	lrw      	r3, 0x20002188	// 1800bc54 <SCALE3_IRQHandler_action+0x44>
1800bc24:	9360      	ld.w      	r3, (r3, 0x0)
1800bc26:	e9030007 	bez      	r3, 0x1800bc34	// 1800bc34 <SCALE3_IRQHandler_action+0x24>
				scaleirq3_vector_table[loop] (loop,scaleirq3_dev_table[loop],0);
1800bc2a:	104c      	lrw      	r2, 0x20002190	// 1800bc58 <SCALE3_IRQHandler_action+0x48>
1800bc2c:	9220      	ld.w      	r1, (r2, 0x0)
1800bc2e:	3200      	movi      	r2, 0
1800bc30:	6c0b      	mov      	r0, r2
1800bc32:	7bcd      	jsr      	r3
		if(sta&BIT(loop)){
1800bc34:	c4245424 	zext      	r4, r4, 1, 1
1800bc38:	e904000d 	bez      	r4, 0x1800bc52	// 1800bc52 <SCALE3_IRQHandler_action+0x42>
			hw->SCALESTA = BIT(loop);
1800bc3c:	3302      	movi      	r3, 2
1800bc3e:	b56f      	st.w      	r3, (r5, 0x3c)
			if(scaleirq3_vector_table[loop] != NULL)
1800bc40:	1065      	lrw      	r3, 0x20002188	// 1800bc54 <SCALE3_IRQHandler_action+0x44>
1800bc42:	9361      	ld.w      	r3, (r3, 0x4)
1800bc44:	e9030007 	bez      	r3, 0x1800bc52	// 1800bc52 <SCALE3_IRQHandler_action+0x42>
				scaleirq3_vector_table[loop] (loop,scaleirq3_dev_table[loop],0);
1800bc48:	1044      	lrw      	r2, 0x20002190	// 1800bc58 <SCALE3_IRQHandler_action+0x48>
1800bc4a:	3001      	movi      	r0, 1
1800bc4c:	9221      	ld.w      	r1, (r2, 0x4)
1800bc4e:	3200      	movi      	r2, 0
1800bc50:	7bcd      	jsr      	r3
		}
	}
}
1800bc52:	1492      	pop      	r4-r5, r15
1800bc54:	20002188 	.long	0x20002188
1800bc58:	20002190 	.long	0x20002190

1800bc5c <hgscale1_open>:
	hw->SCALESTA |= BIT(irq);
	return 0;
}


static int32 hgscale1_open(struct scale_device *p_scale){
1800bc5c:	14d1      	push      	r4, r15
	struct hgscale *scale_hw = (struct hgscale*)p_scale;	
	struct hgscale1_hw *hw  = (struct hgscale1_hw *)scale_hw->hw;	
1800bc5e:	9083      	ld.w      	r4, (r0, 0xc)
	irq_enable(scale_hw->irq_num);
1800bc60:	9006      	ld.w      	r0, (r0, 0x18)
1800bc62:	e3ffff6f 	bsr      	0x1800bb40	// 1800bb40 <csi_vic_enable_irq>
	hw->SCALECON |= BIT(0);	 //enable
1800bc66:	9460      	ld.w      	r3, (r4, 0x0)
1800bc68:	ec630001 	ori      	r3, r3, 1
	return 0;
}
1800bc6c:	3000      	movi      	r0, 0
	hw->SCALECON |= BIT(0);	 //enable
1800bc6e:	b460      	st.w      	r3, (r4, 0x0)
}
1800bc70:	1491      	pop      	r4, r15
	...

1800bc74 <hgscale1_close>:

static int32 hgscale1_close(struct scale_device *p_scale){
	struct hgscale *scale_hw = (struct hgscale*)p_scale;	
	struct hgscale1_hw *hw  = (struct hgscale1_hw *)scale_hw->hw;
1800bc74:	9043      	ld.w      	r2, (r0, 0xc)
	
	hw->SCALECON &= ~BIT(0);  //disable
	return 0;
}
1800bc76:	3000      	movi      	r0, 0
	hw->SCALECON &= ~BIT(0);  //disable
1800bc78:	9260      	ld.w      	r3, (r2, 0x0)
1800bc7a:	3b80      	bclri      	r3, 0
1800bc7c:	b260      	st.w      	r3, (r2, 0x0)
}
1800bc7e:	783c      	jmp      	r15

1800bc80 <hgscale2_open>:

static int32 hgscale2_open(struct scale_device *p_scale){
1800bc80:	14d1      	push      	r4, r15
	struct hgscale *scale_hw = (struct hgscale*)p_scale;	
	struct hgscale2_hw *hw  = (struct hgscale2_hw *)scale_hw->hw;	
1800bc82:	9083      	ld.w      	r4, (r0, 0xc)
	irq_enable(scale_hw->irq_num);
1800bc84:	9006      	ld.w      	r0, (r0, 0x18)
1800bc86:	e3ffff5d 	bsr      	0x1800bb40	// 1800bb40 <csi_vic_enable_irq>
	hw->SCALECON |= BIT(0);	 //enable
1800bc8a:	9460      	ld.w      	r3, (r4, 0x0)
1800bc8c:	ec630001 	ori      	r3, r3, 1
	return 0;
}
1800bc90:	3000      	movi      	r0, 0
	hw->SCALECON |= BIT(0);	 //enable
1800bc92:	b460      	st.w      	r3, (r4, 0x0)
}
1800bc94:	1491      	pop      	r4, r15
	...

1800bc98 <hgscale2_close>:

static int32 hgscale2_close(struct scale_device *p_scale){
	struct hgscale *scale_hw = (struct hgscale*)p_scale;	
	struct hgscale2_hw *hw  = (struct hgscale2_hw *)scale_hw->hw;
1800bc98:	9043      	ld.w      	r2, (r0, 0xc)
	
	hw->SCALECON &= ~BIT(0);  //disable
	return 0;
}
1800bc9a:	3000      	movi      	r0, 0
	hw->SCALECON &= ~BIT(0);  //disable
1800bc9c:	9260      	ld.w      	r3, (r2, 0x0)
1800bc9e:	3b80      	bclri      	r3, 0
1800bca0:	b260      	st.w      	r3, (r2, 0x0)
}
1800bca2:	783c      	jmp      	r15

1800bca4 <hgscale3_open>:

static int32 hgscale3_open(struct scale_device *p_scale){
1800bca4:	14d1      	push      	r4, r15
	struct hgscale *scale_hw = (struct hgscale*)p_scale;	
	struct hgscale3_hw *hw  = (struct hgscale3_hw *)scale_hw->hw;	
1800bca6:	9083      	ld.w      	r4, (r0, 0xc)
	irq_enable(scale_hw->irq_num);
1800bca8:	9006      	ld.w      	r0, (r0, 0x18)
1800bcaa:	e3ffff4b 	bsr      	0x1800bb40	// 1800bb40 <csi_vic_enable_irq>
	hw->SCALECON |= BIT(0);	 //enable
1800bcae:	9460      	ld.w      	r3, (r4, 0x0)
1800bcb0:	ec630001 	ori      	r3, r3, 1
	return 0;
}
1800bcb4:	3000      	movi      	r0, 0
	hw->SCALECON |= BIT(0);	 //enable
1800bcb6:	b460      	st.w      	r3, (r4, 0x0)
}
1800bcb8:	1491      	pop      	r4, r15
	...

1800bcbc <hgscale3_close>:

static int32 hgscale3_close(struct scale_device *p_scale){
	struct hgscale *scale_hw = (struct hgscale*)p_scale;	
	struct hgscale3_hw *hw  = (struct hgscale3_hw *)scale_hw->hw;
1800bcbc:	9043      	ld.w      	r2, (r0, 0xc)
	
	hw->SCALECON &= ~BIT(0);  //disable
	return 0;
}
1800bcbe:	3000      	movi      	r0, 0
	hw->SCALECON &= ~BIT(0);  //disable
1800bcc0:	9260      	ld.w      	r3, (r2, 0x0)
1800bcc2:	3b80      	bclri      	r3, 0
1800bcc4:	b260      	st.w      	r3, (r2, 0x0)
}
1800bcc6:	783c      	jmp      	r15

1800bcc8 <hgscale1_ioctl>:
{
1800bcc8:	14d0      	push      	r15
	switch(ioctl_cmd){
1800bcca:	3913      	cmphsi      	r1, 20
	struct hgscale1_hw *hw  = (struct hgscale1_hw *)scale_hw->hw;
1800bccc:	d9802003 	ld.w      	r12, (r0, 0xc)
	switch(ioctl_cmd){
1800bcd0:	085e      	bt      	0x1800bd8c	// 1800bd8c <hgscale1_ioctl+0xc4>
1800bcd2:	1003      	lrw      	r0, 0x180172c0	// 1800bcdc <hgscale1_ioctl+0x14>
1800bcd4:	d0200880 	ldr.w      	r0, (r0, r1 << 2)
1800bcd8:	7800      	jmp      	r0
1800bcda:	0000      	.short	0x0000
1800bcdc:	180172c0 	.long	0x180172c0
			hw->SWINCON = (s_w-1)|((s_h-1)<<16);
1800bce0:	ea21ffff 	movih      	r1, 65535
1800bce4:	ea20ffff 	movih      	r0, 65535
1800bce8:	6848      	and      	r1, r2
			s_w = param1 & 0xffff;
1800bcea:	c40255e2 	zext      	r2, r2, 15, 0
			hw->SWINCON = (s_w-1)|((s_h-1)<<16);
1800bcee:	6040      	addu      	r1, r0
1800bcf0:	2a00      	subi      	r2, 1
1800bcf2:	6c84      	or      	r2, r1
1800bcf4:	dc4c2001 	st.w      	r2, (r12, 0x4)
			hw->TWINCON = (d_w-1)|((d_h-1)<<16);
1800bcf8:	c4032022 	and      	r2, r3, r0
			d_w = param2 & 0xffff;
1800bcfc:	c40355e3 	zext      	r3, r3, 15, 0
			hw->TWINCON = (d_w-1)|((d_h-1)<<16);
1800bd00:	6080      	addu      	r2, r0
1800bd02:	2b00      	subi      	r3, 1
1800bd04:	6cc8      	or      	r3, r2
1800bd06:	dc6c2002 	st.w      	r3, (r12, 0x8)
    int32  ret_val = RET_OK;	
1800bd0a:	3000      	movi      	r0, 0
		break;
1800bd0c:	042d      	br      	0x1800bd66	// 1800bd66 <hgscale1_ioctl+0x9e>
			s_w = param1 & 0xffff;
1800bd0e:	c40255e1 	zext      	r1, r2, 15, 0
			s_h = (param1>>16) & 0xffff;
1800bd12:	4a50      	lsri      	r2, r2, 16
			d_w = param2 & 0xffff;
1800bd14:	c40355e0 	zext      	r0, r3, 15, 0
			hw->SWIDTH_STEP = 256*s_w/d_w;
1800bd18:	4128      	lsli      	r1, r1, 8
			hw->SHEIGH_STEP = 256*s_h/d_h;
1800bd1a:	4248      	lsli      	r2, r2, 8
			d_h = (param2>>16) & 0xffff;
1800bd1c:	4b70      	lsri      	r3, r3, 16
			hw->SWIDTH_STEP = 256*s_w/d_w;
1800bd1e:	c4018021 	divu      	r1, r1, r0
			hw->SHEIGH_STEP = 256*s_h/d_h;
1800bd22:	c4628023 	divu      	r3, r2, r3
			hw->SWIDTH_STEP = 256*s_w/d_w;
1800bd26:	dc2c2003 	st.w      	r1, (r12, 0xc)
			hw->SHEIGH_STEP = 256*s_h/d_h;
1800bd2a:	dc6c2004 	st.w      	r3, (r12, 0x10)
1800bd2e:	07ee      	br      	0x1800bd0a	// 1800bd0a <hgscale1_ioctl+0x42>
			hw->INBUF_LINE_NUM = param1;
1800bd30:	dc4c2005 	st.w      	r2, (r12, 0x14)
1800bd34:	07eb      	br      	0x1800bd0a	// 1800bd0a <hgscale1_ioctl+0x42>
			hw->INYDMA_STADR = param1;
1800bd36:	dc4c2006 	st.w      	r2, (r12, 0x18)
1800bd3a:	07e8      	br      	0x1800bd0a	// 1800bd0a <hgscale1_ioctl+0x42>
			hw->INUDMA_STADR = param1;
1800bd3c:	dc4c2007 	st.w      	r2, (r12, 0x1c)
1800bd40:	07e5      	br      	0x1800bd0a	// 1800bd0a <hgscale1_ioctl+0x42>
			hw->INVDMA_STADR = param1;
1800bd42:	dc4c2008 	st.w      	r2, (r12, 0x20)
1800bd46:	07e2      	br      	0x1800bd0a	// 1800bd0a <hgscale1_ioctl+0x42>
				hw->SCALECON &=~BIT(2);				//vpp
1800bd48:	d86c2000 	ld.w      	r3, (r12, 0x0)
			if(param1)
1800bd4c:	e9020006 	bez      	r2, 0x1800bd58	// 1800bd58 <hgscale1_ioctl+0x90>
				hw->SCALECON &=~BIT(2);				//vpp
1800bd50:	3b82      	bclri      	r3, 2
				hw->SCALECON |= BIT(2);				//soft
1800bd52:	dc6c2000 	st.w      	r3, (r12, 0x0)
1800bd56:	07da      	br      	0x1800bd0a	// 1800bd0a <hgscale1_ioctl+0x42>
1800bd58:	ec630004 	ori      	r3, r3, 4
1800bd5c:	07fb      	br      	0x1800bd52	// 1800bd52 <hgscale1_ioctl+0x8a>
			ret_val = (hw->INBUFCON>>16)&0x3ff;
1800bd5e:	d80c2009 	ld.w      	r0, (r12, 0x24)
1800bd62:	c6005720 	zext      	r0, r0, 25, 16
}
1800bd66:	1490      	pop      	r15
			hw->INBUFCON = ((param1)<<16);
1800bd68:	4210      	lsli      	r0, r2, 16
1800bd6a:	dc0c2009 	st.w      	r0, (r12, 0x24)
1800bd6e:	07ce      	br      	0x1800bd0a	// 1800bd0a <hgscale1_ioctl+0x42>
			hw->INBUFCON |= BIT(15);
1800bd70:	d86c2009 	ld.w      	r3, (r12, 0x24)
1800bd74:	ec638000 	ori      	r3, r3, 32768
			hw->INBUFCON |= BIT(31);
1800bd78:	dc6c2009 	st.w      	r3, (r12, 0x24)
1800bd7c:	07c7      	br      	0x1800bd0a	// 1800bd0a <hgscale1_ioctl+0x42>
1800bd7e:	d86c2009 	ld.w      	r3, (r12, 0x24)
1800bd82:	3bbf      	bseti      	r3, 31
1800bd84:	07fa      	br      	0x1800bd78	// 1800bd78 <hgscale1_ioctl+0xb0>
			ret_val = hw->SHEIGH_CNT;
1800bd86:	d80c200a 	ld.w      	r0, (r12, 0x28)
		break;
1800bd8a:	07ee      	br      	0x1800bd66	// 1800bd66 <hgscale1_ioctl+0x9e>
			os_printf("NO SCALE1 IOCTL:%d\r\n",ioctl_cmd);
1800bd8c:	1004      	lrw      	r0, 0x180173ec	// 1800bd9c <hgscale1_ioctl+0xd4>
1800bd8e:	e000069b 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
            ret_val = -ENOTSUPP;
1800bd92:	ea00020b 	movi      	r0, 523
1800bd96:	6c02      	nor      	r0, r0
	return ret_val;
1800bd98:	07e7      	br      	0x1800bd66	// 1800bd66 <hgscale1_ioctl+0x9e>
1800bd9a:	0000      	.short	0x0000
1800bd9c:	180173ec 	.long	0x180173ec

1800bda0 <hgscale2_ioctl>:
{
1800bda0:	14d0      	push      	r15
	switch(ioctl_cmd){
1800bda2:	3913      	cmphsi      	r1, 20
	struct hgscale2_hw *hw  = (struct hgscale2_hw *)scale_hw->hw;
1800bda4:	9003      	ld.w      	r0, (r0, 0xc)
	switch(ioctl_cmd){
1800bda6:	0853      	bt      	0x1800be4c	// 1800be4c <hgscale2_ioctl+0xac>
1800bda8:	ea8c0003 	lrw      	r12, 0x18017310	// 1800bdb4 <hgscale2_ioctl+0x14>
1800bdac:	d02c088c 	ldr.w      	r12, (r12, r1 << 2)
1800bdb0:	7830      	jmp      	r12
1800bdb2:	0000      	.short	0x0000
1800bdb4:	18017310 	.long	0x18017310
			hw->SWINCON = (s_w-1)|((s_h-1)<<16);
1800bdb8:	ea21ffff 	movih      	r1, 65535
1800bdbc:	ea2cffff 	movih      	r12, 65535
1800bdc0:	6848      	and      	r1, r2
			s_w = param1 & 0xffff;
1800bdc2:	c40255e2 	zext      	r2, r2, 15, 0
			hw->SWINCON = (s_w-1)|((s_h-1)<<16);
1800bdc6:	6070      	addu      	r1, r12
1800bdc8:	2a00      	subi      	r2, 1
1800bdca:	6c84      	or      	r2, r1
1800bdcc:	b041      	st.w      	r2, (r0, 0x4)
			hw->TWINCON = (d_w-1)|((d_h-1)<<16);
1800bdce:	c5832022 	and      	r2, r3, r12
			d_w = param2 & 0xffff;
1800bdd2:	c40355e3 	zext      	r3, r3, 15, 0
			hw->TWINCON = (d_w-1)|((d_h-1)<<16);
1800bdd6:	60b0      	addu      	r2, r12
1800bdd8:	2b00      	subi      	r3, 1
1800bdda:	6cc8      	or      	r3, r2
1800bddc:	b063      	st.w      	r3, (r0, 0xc)
    int32  ret_val = RET_OK;
1800bdde:	3000      	movi      	r0, 0
	return ret_val;
1800bde0:	0435      	br      	0x1800be4a	// 1800be4a <hgscale2_ioctl+0xaa>
			s_w = param1 & 0xffff;
1800bde2:	c40255e1 	zext      	r1, r2, 15, 0
			s_h = (param1>>16) & 0xffff;	
1800bde6:	4a50      	lsri      	r2, r2, 16
			d_w = param2 & 0xffff;
1800bde8:	c40355ec 	zext      	r12, r3, 15, 0
			hw->SWIDTH_STEP = 256*s_w/d_w;
1800bdec:	4128      	lsli      	r1, r1, 8
			hw->SHEIGH_STEP = 256*s_h/d_h;
1800bdee:	4248      	lsli      	r2, r2, 8
			d_h = (param2>>16) & 0xffff;
1800bdf0:	4b70      	lsri      	r3, r3, 16
			hw->SWIDTH_STEP = 256*s_w/d_w;
1800bdf2:	c5818021 	divu      	r1, r1, r12
			hw->SHEIGH_STEP = 256*s_h/d_h;
1800bdf6:	c4628023 	divu      	r3, r2, r3
			hw->SWIDTH_STEP = 256*s_w/d_w;
1800bdfa:	b024      	st.w      	r1, (r0, 0x10)
			hw->SHEIGH_STEP = 256*s_h/d_h;
1800bdfc:	b065      	st.w      	r3, (r0, 0x14)
1800bdfe:	07f0      	br      	0x1800bdde	// 1800bdde <hgscale2_ioctl+0x3e>
			hw->SSTART = (s_x) |(s_y<<16);
1800be00:	b042      	st.w      	r2, (r0, 0x8)
1800be02:	07ee      	br      	0x1800bdde	// 1800bdde <hgscale2_ioctl+0x3e>
			hw->SCALECON &= ~(BIT(4)|BIT(5));
1800be04:	9060      	ld.w      	r3, (r0, 0x0)
			if(param1 == 64){
1800be06:	eb420040 	cmpnei      	r2, 64
			hw->SCALECON &= ~(BIT(4)|BIT(5));
1800be0a:	3b84      	bclri      	r3, 4
1800be0c:	3b85      	bclri      	r3, 5
1800be0e:	b060      	st.w      	r3, (r0, 0x0)
			if(param1 == 64){
1800be10:	0806      	bt      	0x1800be1c	// 1800be1c <hgscale2_ioctl+0x7c>
				hw->SCALECON |= BIT(4);
1800be12:	9060      	ld.w      	r3, (r0, 0x0)
1800be14:	ec630010 	ori      	r3, r3, 16
				hw->SCALECON |= (BIT(4)|BIT(5));
1800be18:	b060      	st.w      	r3, (r0, 0x0)
1800be1a:	07e2      	br      	0x1800bdde	// 1800bdde <hgscale2_ioctl+0x3e>
			}else if(param1 == 256){
1800be1c:	eb420100 	cmpnei      	r2, 256
1800be20:	0805      	bt      	0x1800be2a	// 1800be2a <hgscale2_ioctl+0x8a>
				hw->SCALECON |= BIT(5);
1800be22:	9060      	ld.w      	r3, (r0, 0x0)
1800be24:	ec630020 	ori      	r3, r3, 32
1800be28:	07f8      	br      	0x1800be18	// 1800be18 <hgscale2_ioctl+0x78>
			}else if(param1 == 512){
1800be2a:	eb420200 	cmpnei      	r2, 512
1800be2e:	0bd8      	bt      	0x1800bdde	// 1800bdde <hgscale2_ioctl+0x3e>
				hw->SCALECON |= (BIT(4)|BIT(5));
1800be30:	9060      	ld.w      	r3, (r0, 0x0)
1800be32:	ec630030 	ori      	r3, r3, 48
1800be36:	07f1      	br      	0x1800be18	// 1800be18 <hgscale2_ioctl+0x78>
			hw->OUTYDMA_STADR = param1;
1800be38:	b047      	st.w      	r2, (r0, 0x1c)
1800be3a:	07d2      	br      	0x1800bdde	// 1800bdde <hgscale2_ioctl+0x3e>
			hw->OUTUDMA_STADR = param1;
1800be3c:	b048      	st.w      	r2, (r0, 0x20)
1800be3e:	07d0      	br      	0x1800bdde	// 1800bdde <hgscale2_ioctl+0x3e>
			hw->OUTVDMA_STADR = param1;
1800be40:	b049      	st.w      	r2, (r0, 0x24)
1800be42:	07ce      	br      	0x1800bdde	// 1800bdde <hgscale2_ioctl+0x3e>
			hw->SRAMBUF_STADR = param1;
1800be44:	b046      	st.w      	r2, (r0, 0x18)
1800be46:	07cc      	br      	0x1800bdde	// 1800bdde <hgscale2_ioctl+0x3e>
			ret_val = hw->SHEIGH_CNT;
1800be48:	900a      	ld.w      	r0, (r0, 0x28)
}
1800be4a:	1490      	pop      	r15
			os_printf("NO SCALE2 IOCTL:%d\r\n",ioctl_cmd);
1800be4c:	1004      	lrw      	r0, 0x18017402	// 1800be5c <hgscale2_ioctl+0xbc>
1800be4e:	e000063b 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
            ret_val = -ENOTSUPP;
1800be52:	ea00020b 	movi      	r0, 523
1800be56:	6c02      	nor      	r0, r0
        break;
1800be58:	07f9      	br      	0x1800be4a	// 1800be4a <hgscale2_ioctl+0xaa>
1800be5a:	0000      	.short	0x0000
1800be5c:	18017402 	.long	0x18017402

1800be60 <hgscale3_ioctl>:
{
1800be60:	14d0      	push      	r15
	switch(ioctl_cmd){
1800be62:	3913      	cmphsi      	r1, 20
	struct hgscale3_hw *hw  = (struct hgscale3_hw *)scale_hw->hw;
1800be64:	d9802003 	ld.w      	r12, (r0, 0xc)
	switch(ioctl_cmd){
1800be68:	0875      	bt      	0x1800bf52	// 1800bf52 <hgscale3_ioctl+0xf2>
1800be6a:	1003      	lrw      	r0, 0x18017360	// 1800be74 <hgscale3_ioctl+0x14>
1800be6c:	d0200880 	ldr.w      	r0, (r0, r1 << 2)
1800be70:	7800      	jmp      	r0
1800be72:	0000      	.short	0x0000
1800be74:	18017360 	.long	0x18017360
			hw->SWINCON = (s_w-1)|((s_h-1)<<16);
1800be78:	ea21ffff 	movih      	r1, 65535
1800be7c:	c4222020 	and      	r0, r2, r1
1800be80:	6040      	addu      	r1, r0
			s_w = param1 & 0xffff;
1800be82:	c40255e0 	zext      	r0, r2, 15, 0
			hw->SWINCON = (s_w-1)|((s_h-1)<<16);
1800be86:	2800      	subi      	r0, 1
			hw->TWINCON = (d_w-1)|((d_h-1)<<16);
1800be88:	ea22ffff 	movih      	r2, 65535
			hw->SWINCON = (s_w-1)|((s_h-1)<<16);
1800be8c:	6c04      	or      	r0, r1
			hw->TWINCON = (d_w-1)|((d_h-1)<<16);
1800be8e:	c4432021 	and      	r1, r3, r2
			d_w = param2 & 0xffff;
1800be92:	c40355e3 	zext      	r3, r3, 15, 0
			hw->TWINCON = (d_w-1)|((d_h-1)<<16);
1800be96:	6048      	addu      	r1, r2
1800be98:	2b00      	subi      	r3, 1
1800be9a:	6cc4      	or      	r3, r1
			hw->SWINCON = (s_w-1)|((s_h-1)<<16);
1800be9c:	dc0c2001 	st.w      	r0, (r12, 0x4)
			hw->TWINCON = (d_w-1)|((d_h-1)<<16);
1800bea0:	dc6c2003 	st.w      	r3, (r12, 0xc)
    int32  ret_val = RET_OK;	
1800bea4:	3000      	movi      	r0, 0
		break;
1800bea6:	0442      	br      	0x1800bf2a	// 1800bf2a <hgscale3_ioctl+0xca>
			s_w = param1 & 0xffff;
1800bea8:	c40255e1 	zext      	r1, r2, 15, 0
			d_w = param2 & 0xffff;
1800beac:	c40355e0 	zext      	r0, r3, 15, 0
			hw->SWIDTH_STEP = 256*s_w/d_w;
1800beb0:	4128      	lsli      	r1, r1, 8
1800beb2:	c4018021 	divu      	r1, r1, r0
			s_h = (param1>>16) & 0xffff;	
1800beb6:	4a10      	lsri      	r0, r2, 16
			hw->SHEIGH_STEP = 256*s_h/d_h;
1800beb8:	4008      	lsli      	r0, r0, 8
			d_h = (param2>>16) & 0xffff;
1800beba:	4b70      	lsri      	r3, r3, 16
			hw->SHEIGH_STEP = 256*s_h/d_h;
1800bebc:	c4608020 	divu      	r0, r0, r3
			hw->SWIDTH_STEP = 256*s_w/d_w;
1800bec0:	dc2c2004 	st.w      	r1, (r12, 0x10)
			hw->SHEIGH_STEP = 256*s_h/d_h;
1800bec4:	dc0c2005 	st.w      	r0, (r12, 0x14)
1800bec8:	07ee      	br      	0x1800bea4	// 1800bea4 <hgscale3_ioctl+0x44>
			hw->SSTART = (s_x) |(s_y<<16);
1800beca:	dc4c2002 	st.w      	r2, (r12, 0x8)
1800bece:	07eb      	br      	0x1800bea4	// 1800bea4 <hgscale3_ioctl+0x44>
			hw->INBUF_LINE_NUM = param1;
1800bed0:	dc4c2006 	st.w      	r2, (r12, 0x18)
1800bed4:	07e8      	br      	0x1800bea4	// 1800bea4 <hgscale3_ioctl+0x44>
			hw->INYDMA_STADR = param1;
1800bed6:	dc4c2007 	st.w      	r2, (r12, 0x1c)
1800beda:	07e5      	br      	0x1800bea4	// 1800bea4 <hgscale3_ioctl+0x44>
			hw->INUDMA_STADR = param1;
1800bedc:	dc4c2008 	st.w      	r2, (r12, 0x20)
1800bee0:	07e2      	br      	0x1800bea4	// 1800bea4 <hgscale3_ioctl+0x44>
			hw->INVDMA_STADR = param1;
1800bee2:	dc4c2009 	st.w      	r2, (r12, 0x24)
1800bee6:	07df      	br      	0x1800bea4	// 1800bea4 <hgscale3_ioctl+0x44>
			hw->OUTYDMA_STADR = param1;
1800bee8:	dc4c200a 	st.w      	r2, (r12, 0x28)
1800beec:	07dc      	br      	0x1800bea4	// 1800bea4 <hgscale3_ioctl+0x44>
			hw->OUTUDMA_STADR = param1;
1800beee:	dc4c200b 	st.w      	r2, (r12, 0x2c)
1800bef2:	07d9      	br      	0x1800bea4	// 1800bea4 <hgscale3_ioctl+0x44>
			hw->OUTVDMA_STADR = param1;
1800bef4:	dc4c200c 	st.w      	r2, (r12, 0x30)
1800bef8:	07d6      	br      	0x1800bea4	// 1800bea4 <hgscale3_ioctl+0x44>
				hw->SCALECON |= BIT(1);
1800befa:	d86c2000 	ld.w      	r3, (r12, 0x0)
			if(param1){
1800befe:	e9020007 	bez      	r2, 0x1800bf0c	// 1800bf0c <hgscale3_ioctl+0xac>
				hw->SCALECON |= BIT(1);
1800bf02:	ec630002 	ori      	r3, r3, 2
				hw->SCALECON |= BIT(2);				//soft
1800bf06:	dc6c2000 	st.w      	r3, (r12, 0x0)
1800bf0a:	07cd      	br      	0x1800bea4	// 1800bea4 <hgscale3_ioctl+0x44>
				hw->SCALECON &= ~BIT(1);
1800bf0c:	3b81      	bclri      	r3, 1
1800bf0e:	07fc      	br      	0x1800bf06	// 1800bf06 <hgscale3_ioctl+0xa6>
				hw->SCALECON &=~BIT(2);				//vpp
1800bf10:	d86c2000 	ld.w      	r3, (r12, 0x0)
			if(param1)
1800bf14:	e9020004 	bez      	r2, 0x1800bf1c	// 1800bf1c <hgscale3_ioctl+0xbc>
				hw->SCALECON &=~BIT(2);				//vpp
1800bf18:	3b82      	bclri      	r3, 2
1800bf1a:	07f6      	br      	0x1800bf06	// 1800bf06 <hgscale3_ioctl+0xa6>
				hw->SCALECON |= BIT(2);				//soft
1800bf1c:	ec630004 	ori      	r3, r3, 4
1800bf20:	07f3      	br      	0x1800bf06	// 1800bf06 <hgscale3_ioctl+0xa6>
			ret_val = (hw->INBUFCON>>16)&0x3ff;
1800bf22:	d80c200d 	ld.w      	r0, (r12, 0x34)
1800bf26:	c6005720 	zext      	r0, r0, 25, 16
}
1800bf2a:	1490      	pop      	r15
			hw->INBUFCON = ((param1)<<16)|(param2);
1800bf2c:	4210      	lsli      	r0, r2, 16
1800bf2e:	6c0c      	or      	r0, r3
1800bf30:	dc0c200d 	st.w      	r0, (r12, 0x34)
1800bf34:	07b8      	br      	0x1800bea4	// 1800bea4 <hgscale3_ioctl+0x44>
			hw->INBUFCON |= BIT(15);
1800bf36:	d86c200d 	ld.w      	r3, (r12, 0x34)
1800bf3a:	ec638000 	ori      	r3, r3, 32768
			hw->INBUFCON |= BIT(31);
1800bf3e:	dc6c200d 	st.w      	r3, (r12, 0x34)
1800bf42:	07b1      	br      	0x1800bea4	// 1800bea4 <hgscale3_ioctl+0x44>
1800bf44:	d86c200d 	ld.w      	r3, (r12, 0x34)
1800bf48:	3bbf      	bseti      	r3, 31
1800bf4a:	07fa      	br      	0x1800bf3e	// 1800bf3e <hgscale3_ioctl+0xde>
			ret_val = hw->SHEIGH_CNT;
1800bf4c:	d80c200e 	ld.w      	r0, (r12, 0x38)
		break;
1800bf50:	07ed      	br      	0x1800bf2a	// 1800bf2a <hgscale3_ioctl+0xca>
			os_printf("NO SCALE3 IOCTL:%d\r\n",ioctl_cmd);
1800bf52:	1004      	lrw      	r0, 0x18017418	// 1800bf60 <hgscale3_ioctl+0x100>
1800bf54:	e00005b8 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
            ret_val = -ENOTSUPP;
1800bf58:	ea00020b 	movi      	r0, 523
1800bf5c:	6c02      	nor      	r0, r0
	return ret_val;
1800bf5e:	07e6      	br      	0x1800bf2a	// 1800bf2a <hgscale3_ioctl+0xca>
1800bf60:	18017418 	.long	0x18017418

1800bf64 <irq_scale1_enable>:
	struct hgscale1_hw *hw  = (struct hgscale1_hw *)scale_hw->hw;
1800bf64:	9003      	ld.w      	r0, (r0, 0xc)
1800bf66:	220f      	addi      	r2, 16
1800bf68:	3301      	movi      	r3, 1
	if(mode){
1800bf6a:	e9010007 	bez      	r1, 0x1800bf78	// 1800bf78 <irq_scale1_enable+0x14>
		hw->SCALECON |= BIT(irq+16);
1800bf6e:	9020      	ld.w      	r1, (r0, 0x0)
1800bf70:	70c8      	lsl      	r3, r2
1800bf72:	6cc4      	or      	r3, r1
		hw->SCALECON &= ~BIT(irq+16);
1800bf74:	b060      	st.w      	r3, (r0, 0x0)
}
1800bf76:	783c      	jmp      	r15
		hw->SCALECON &= ~BIT(irq+16);
1800bf78:	9020      	ld.w      	r1, (r0, 0x0)
1800bf7a:	70c8      	lsl      	r3, r2
1800bf7c:	c4612043 	andn      	r3, r1, r3
1800bf80:	07fa      	br      	0x1800bf74	// 1800bf74 <irq_scale1_enable+0x10>
	...

1800bf84 <scaleirq1_register>:
int32 scaleirq1_register(struct scale_device *p_scale,uint32 irq, scale_irq_hdl isr, uint32 dev_id){
1800bf84:	14d5      	push      	r4-r8, r15
1800bf86:	6d07      	mov      	r4, r1
1800bf88:	6d8b      	mov      	r6, r2
	struct hgscale1_hw *hw  = (struct hgscale1_hw *)scale_hw->hw;
1800bf8a:	90e3      	ld.w      	r7, (r0, 0xc)
int32 scaleirq1_register(struct scale_device *p_scale,uint32 irq, scale_irq_hdl isr, uint32 dev_id){
1800bf8c:	6d43      	mov      	r5, r0
	request_irq(scale_hw->irq_num, SCALE1_IRQHandler_action, p_scale);
1800bf8e:	6c83      	mov      	r2, r0
1800bf90:	102f      	lrw      	r1, 0x1800bb78	// 1800bfcc <scaleirq1_register+0x48>
int32 scaleirq1_register(struct scale_device *p_scale,uint32 irq, scale_irq_hdl isr, uint32 dev_id){
1800bf92:	6e0f      	mov      	r8, r3
	request_irq(scale_hw->irq_num, SCALE1_IRQHandler_action, p_scale);
1800bf94:	9006      	ld.w      	r0, (r0, 0x18)
1800bf96:	e3ffbba3 	bsr      	0x180036dc	// 180036dc <request_irq>
	irq_scale1_enable(p_scale, 1, irq);
1800bf9a:	7490      	zextb      	r2, r4
1800bf9c:	6c17      	mov      	r0, r5
1800bf9e:	3101      	movi      	r1, 1
1800bfa0:	e3ffffe2 	bsr      	0x1800bf64	// 1800bf64 <irq_scale1_enable>
	scaleirq1_vector_table[irq] = isr;
1800bfa4:	106b      	lrw      	r3, 0x20002198	// 1800bfd0 <scaleirq1_register+0x4c>
	scaleirq1_dev_table[irq] = dev_id;
1800bfa6:	104c      	lrw      	r2, 0x20002180	// 1800bfd4 <scaleirq1_register+0x50>
	os_printf("scaleirq1_register:%d %x  %x\r\n",irq,(uint32)scaleirq1_vector_table[irq],(uint32)isr);
1800bfa8:	6c53      	mov      	r1, r4
	scaleirq1_dev_table[irq] = dev_id;
1800bfaa:	d4820888 	str.w      	r8, (r2, r4 << 2)
	scaleirq1_vector_table[irq] = isr;
1800bfae:	d4830886 	str.w      	r6, (r3, r4 << 2)
	hw->SCALESTA |= BIT(irq);
1800bfb2:	3301      	movi      	r3, 1
1800bfb4:	974b      	ld.w      	r2, (r7, 0x2c)
1800bfb6:	70d0      	lsl      	r3, r4
1800bfb8:	6cc8      	or      	r3, r2
1800bfba:	b76b      	st.w      	r3, (r7, 0x2c)
	os_printf("scaleirq1_register:%d %x  %x\r\n",irq,(uint32)scaleirq1_vector_table[irq],(uint32)isr);
1800bfbc:	6c9b      	mov      	r2, r6
1800bfbe:	6cdb      	mov      	r3, r6
1800bfc0:	1006      	lrw      	r0, 0x1801742e	// 1800bfd8 <scaleirq1_register+0x54>
1800bfc2:	e0000581 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
}
1800bfc6:	3000      	movi      	r0, 0
1800bfc8:	1495      	pop      	r4-r8, r15
1800bfca:	0000      	.short	0x0000
1800bfcc:	1800bb78 	.long	0x1800bb78
1800bfd0:	20002198 	.long	0x20002198
1800bfd4:	20002180 	.long	0x20002180
1800bfd8:	1801742e 	.long	0x1801742e

1800bfdc <scaleirq1_unregister>:
int32 scaleirq1_unregister(struct scale_device *p_scale,uint32 irq){
1800bfdc:	14d2      	push      	r4-r5, r15
1800bfde:	6d07      	mov      	r4, r1
	irq_scale1_enable(p_scale, 0, irq);
1800bfe0:	7484      	zextb      	r2, r1
1800bfe2:	3100      	movi      	r1, 0
	struct hgscale1_hw *hw  = (struct hgscale1_hw *)scale_hw->hw;
1800bfe4:	90a3      	ld.w      	r5, (r0, 0xc)
	irq_scale1_enable(p_scale, 0, irq);
1800bfe6:	e3ffffbf 	bsr      	0x1800bf64	// 1800bf64 <irq_scale1_enable>
	scaleirq1_vector_table[irq] = NULL;
1800bfea:	3000      	movi      	r0, 0
1800bfec:	1066      	lrw      	r3, 0x20002198	// 1800c004 <scaleirq1_unregister+0x28>
	hw->SCALESTA |= BIT(irq);
1800bfee:	3101      	movi      	r1, 1
	scaleirq1_vector_table[irq] = NULL;
1800bff0:	d4830880 	str.w      	r0, (r3, r4 << 2)
	hw->SCALESTA |= BIT(irq);
1800bff4:	7050      	lsl      	r1, r4
	scaleirq1_dev_table[irq] = 0;
1800bff6:	1065      	lrw      	r3, 0x20002180	// 1800c008 <scaleirq1_unregister+0x2c>
1800bff8:	d4830880 	str.w      	r0, (r3, r4 << 2)
	hw->SCALESTA |= BIT(irq);
1800bffc:	956b      	ld.w      	r3, (r5, 0x2c)
1800bffe:	6c4c      	or      	r1, r3
1800c000:	b52b      	st.w      	r1, (r5, 0x2c)
}
1800c002:	1492      	pop      	r4-r5, r15
1800c004:	20002198 	.long	0x20002198
1800c008:	20002180 	.long	0x20002180

1800c00c <irq_scale2_enable>:
	struct hgscale2_hw *hw  = (struct hgscale2_hw *)scale_hw->hw;
1800c00c:	9003      	ld.w      	r0, (r0, 0xc)
1800c00e:	220f      	addi      	r2, 16
1800c010:	3301      	movi      	r3, 1
	if(mode){
1800c012:	e9010007 	bez      	r1, 0x1800c020	// 1800c020 <irq_scale2_enable+0x14>
		hw->SCALECON |= BIT(irq+16);
1800c016:	9020      	ld.w      	r1, (r0, 0x0)
1800c018:	70c8      	lsl      	r3, r2
1800c01a:	6cc4      	or      	r3, r1
		hw->SCALECON &= ~BIT(irq+16);
1800c01c:	b060      	st.w      	r3, (r0, 0x0)
}
1800c01e:	783c      	jmp      	r15
		hw->SCALECON &= ~BIT(irq+16);
1800c020:	9020      	ld.w      	r1, (r0, 0x0)
1800c022:	70c8      	lsl      	r3, r2
1800c024:	c4612043 	andn      	r3, r1, r3
1800c028:	07fa      	br      	0x1800c01c	// 1800c01c <irq_scale2_enable+0x10>
	...

1800c02c <scaleirq2_register>:
int32 scaleirq2_register(struct scale_device *p_scale,uint32 irq, scale_irq_hdl isr, uint32 dev_id){
1800c02c:	14d5      	push      	r4-r8, r15
1800c02e:	6d07      	mov      	r4, r1
1800c030:	6d8b      	mov      	r6, r2
	struct hgscale2_hw *hw  = (struct hgscale2_hw *)scale_hw->hw;
1800c032:	90e3      	ld.w      	r7, (r0, 0xc)
int32 scaleirq2_register(struct scale_device *p_scale,uint32 irq, scale_irq_hdl isr, uint32 dev_id){
1800c034:	6d43      	mov      	r5, r0
	request_irq(scale_hw->irq_num, SCALE2_IRQHandler_action, p_scale);
1800c036:	6c83      	mov      	r2, r0
1800c038:	102f      	lrw      	r1, 0x1800bbc4	// 1800c074 <scaleirq2_register+0x48>
int32 scaleirq2_register(struct scale_device *p_scale,uint32 irq, scale_irq_hdl isr, uint32 dev_id){
1800c03a:	6e0f      	mov      	r8, r3
	request_irq(scale_hw->irq_num, SCALE2_IRQHandler_action, p_scale);
1800c03c:	9006      	ld.w      	r0, (r0, 0x18)
1800c03e:	e3ffbb4f 	bsr      	0x180036dc	// 180036dc <request_irq>
	irq_scale2_enable(p_scale, 1, irq);
1800c042:	7490      	zextb      	r2, r4
1800c044:	6c17      	mov      	r0, r5
1800c046:	3101      	movi      	r1, 1
1800c048:	e3ffffe2 	bsr      	0x1800c00c	// 1800c00c <irq_scale2_enable>
	scaleirq2_vector_table[irq] = isr;
1800c04c:	106b      	lrw      	r3, 0x200021a0	// 1800c078 <scaleirq2_register+0x4c>
	scaleirq2_dev_table[irq] = dev_id;
1800c04e:	104c      	lrw      	r2, 0x200021a8	// 1800c07c <scaleirq2_register+0x50>
	os_printf("scaleirq2_register:%d %x  %x\r\n",irq,(uint32)scaleirq2_vector_table[irq],(uint32)isr);
1800c050:	6c53      	mov      	r1, r4
	scaleirq2_dev_table[irq] = dev_id;
1800c052:	d4820888 	str.w      	r8, (r2, r4 << 2)
	scaleirq2_vector_table[irq] = isr;
1800c056:	d4830886 	str.w      	r6, (r3, r4 << 2)
	hw->SCALESTA |= BIT(irq);
1800c05a:	3301      	movi      	r3, 1
1800c05c:	974b      	ld.w      	r2, (r7, 0x2c)
1800c05e:	70d0      	lsl      	r3, r4
1800c060:	6cc8      	or      	r3, r2
1800c062:	b76b      	st.w      	r3, (r7, 0x2c)
	os_printf("scaleirq2_register:%d %x  %x\r\n",irq,(uint32)scaleirq2_vector_table[irq],(uint32)isr);
1800c064:	6c9b      	mov      	r2, r6
1800c066:	6cdb      	mov      	r3, r6
1800c068:	1006      	lrw      	r0, 0x1801744e	// 1800c080 <scaleirq2_register+0x54>
1800c06a:	e000052d 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
}
1800c06e:	3000      	movi      	r0, 0
1800c070:	1495      	pop      	r4-r8, r15
1800c072:	0000      	.short	0x0000
1800c074:	1800bbc4 	.long	0x1800bbc4
1800c078:	200021a0 	.long	0x200021a0
1800c07c:	200021a8 	.long	0x200021a8
1800c080:	1801744e 	.long	0x1801744e

1800c084 <scaleirq2_unregister>:
int32 scaleirq2_unregister(struct scale_device *p_scale,uint32 irq){
1800c084:	14d2      	push      	r4-r5, r15
1800c086:	6d07      	mov      	r4, r1
	irq_scale2_enable(p_scale, 0, irq);
1800c088:	7484      	zextb      	r2, r1
1800c08a:	3100      	movi      	r1, 0
	struct hgscale2_hw *hw  = (struct hgscale2_hw *)scale_hw->hw;
1800c08c:	90a3      	ld.w      	r5, (r0, 0xc)
	irq_scale2_enable(p_scale, 0, irq);
1800c08e:	e3ffffbf 	bsr      	0x1800c00c	// 1800c00c <irq_scale2_enable>
	scaleirq2_vector_table[irq] = NULL;
1800c092:	3000      	movi      	r0, 0
1800c094:	1066      	lrw      	r3, 0x200021a0	// 1800c0ac <scaleirq2_unregister+0x28>
	hw->SCALESTA |= BIT(irq);
1800c096:	3101      	movi      	r1, 1
	scaleirq2_vector_table[irq] = NULL;
1800c098:	d4830880 	str.w      	r0, (r3, r4 << 2)
	hw->SCALESTA |= BIT(irq);
1800c09c:	7050      	lsl      	r1, r4
	scaleirq2_dev_table[irq] = 0;
1800c09e:	1065      	lrw      	r3, 0x200021a8	// 1800c0b0 <scaleirq2_unregister+0x2c>
1800c0a0:	d4830880 	str.w      	r0, (r3, r4 << 2)
	hw->SCALESTA |= BIT(irq);
1800c0a4:	956b      	ld.w      	r3, (r5, 0x2c)
1800c0a6:	6c4c      	or      	r1, r3
1800c0a8:	b52b      	st.w      	r1, (r5, 0x2c)
}
1800c0aa:	1492      	pop      	r4-r5, r15
1800c0ac:	200021a0 	.long	0x200021a0
1800c0b0:	200021a8 	.long	0x200021a8

1800c0b4 <irq_scale3_enable>:
	struct hgscale3_hw *hw  = (struct hgscale3_hw *)scale_hw->hw;
1800c0b4:	9003      	ld.w      	r0, (r0, 0xc)
1800c0b6:	220f      	addi      	r2, 16
1800c0b8:	3301      	movi      	r3, 1
	if(mode){
1800c0ba:	e9010007 	bez      	r1, 0x1800c0c8	// 1800c0c8 <irq_scale3_enable+0x14>
		hw->SCALECON |= BIT(irq+16);
1800c0be:	9020      	ld.w      	r1, (r0, 0x0)
1800c0c0:	70c8      	lsl      	r3, r2
1800c0c2:	6cc4      	or      	r3, r1
		hw->SCALECON &= ~BIT(irq+16);
1800c0c4:	b060      	st.w      	r3, (r0, 0x0)
}
1800c0c6:	783c      	jmp      	r15
		hw->SCALECON &= ~BIT(irq+16);
1800c0c8:	9020      	ld.w      	r1, (r0, 0x0)
1800c0ca:	70c8      	lsl      	r3, r2
1800c0cc:	c4612043 	andn      	r3, r1, r3
1800c0d0:	07fa      	br      	0x1800c0c4	// 1800c0c4 <irq_scale3_enable+0x10>
	...

1800c0d4 <scaleirq3_register>:
int32 scaleirq3_register(struct scale_device *p_scale,uint32 irq, scale_irq_hdl isr, uint32 dev_id){
1800c0d4:	14d5      	push      	r4-r8, r15
1800c0d6:	6d07      	mov      	r4, r1
1800c0d8:	6d8b      	mov      	r6, r2
	struct hgscale3_hw *hw  = (struct hgscale3_hw *)scale_hw->hw;
1800c0da:	90e3      	ld.w      	r7, (r0, 0xc)
int32 scaleirq3_register(struct scale_device *p_scale,uint32 irq, scale_irq_hdl isr, uint32 dev_id){
1800c0dc:	6d43      	mov      	r5, r0
	request_irq(scale_hw->irq_num, SCALE3_IRQHandler_action, p_scale);
1800c0de:	6c83      	mov      	r2, r0
1800c0e0:	102f      	lrw      	r1, 0x1800bc10	// 1800c11c <scaleirq3_register+0x48>
int32 scaleirq3_register(struct scale_device *p_scale,uint32 irq, scale_irq_hdl isr, uint32 dev_id){
1800c0e2:	6e0f      	mov      	r8, r3
	request_irq(scale_hw->irq_num, SCALE3_IRQHandler_action, p_scale);
1800c0e4:	9006      	ld.w      	r0, (r0, 0x18)
1800c0e6:	e3ffbafb 	bsr      	0x180036dc	// 180036dc <request_irq>
	irq_scale3_enable(p_scale, 1, irq);
1800c0ea:	7490      	zextb      	r2, r4
1800c0ec:	6c17      	mov      	r0, r5
1800c0ee:	3101      	movi      	r1, 1
1800c0f0:	e3ffffe2 	bsr      	0x1800c0b4	// 1800c0b4 <irq_scale3_enable>
	scaleirq3_vector_table[irq] = isr;
1800c0f4:	106b      	lrw      	r3, 0x20002188	// 1800c120 <scaleirq3_register+0x4c>
	scaleirq3_dev_table[irq] = dev_id;
1800c0f6:	104c      	lrw      	r2, 0x20002190	// 1800c124 <scaleirq3_register+0x50>
	os_printf("scaleirq3_register:%d %x  %x\r\n",irq,(uint32)scaleirq3_vector_table[irq],(uint32)isr);
1800c0f8:	6c53      	mov      	r1, r4
	scaleirq3_dev_table[irq] = dev_id;
1800c0fa:	d4820888 	str.w      	r8, (r2, r4 << 2)
	scaleirq3_vector_table[irq] = isr;
1800c0fe:	d4830886 	str.w      	r6, (r3, r4 << 2)
	hw->SCALESTA |= BIT(irq);
1800c102:	3301      	movi      	r3, 1
1800c104:	974f      	ld.w      	r2, (r7, 0x3c)
1800c106:	70d0      	lsl      	r3, r4
1800c108:	6cc8      	or      	r3, r2
1800c10a:	b76f      	st.w      	r3, (r7, 0x3c)
	os_printf("scaleirq3_register:%d %x  %x\r\n",irq,(uint32)scaleirq3_vector_table[irq],(uint32)isr);
1800c10c:	6c9b      	mov      	r2, r6
1800c10e:	6cdb      	mov      	r3, r6
1800c110:	1006      	lrw      	r0, 0x1801746e	// 1800c128 <scaleirq3_register+0x54>
1800c112:	e00004d9 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
}
1800c116:	3000      	movi      	r0, 0
1800c118:	1495      	pop      	r4-r8, r15
1800c11a:	0000      	.short	0x0000
1800c11c:	1800bc10 	.long	0x1800bc10
1800c120:	20002188 	.long	0x20002188
1800c124:	20002190 	.long	0x20002190
1800c128:	1801746e 	.long	0x1801746e

1800c12c <scaleirq3_unregister>:
int32 scaleirq3_unregister(struct scale_device *p_scale,uint32 irq){
1800c12c:	14d2      	push      	r4-r5, r15
1800c12e:	6d07      	mov      	r4, r1
	irq_scale3_enable(p_scale, 0, irq);
1800c130:	7484      	zextb      	r2, r1
1800c132:	3100      	movi      	r1, 0
	struct hgscale3_hw *hw  = (struct hgscale3_hw *)scale_hw->hw;
1800c134:	90a3      	ld.w      	r5, (r0, 0xc)
	irq_scale3_enable(p_scale, 0, irq);
1800c136:	e3ffffbf 	bsr      	0x1800c0b4	// 1800c0b4 <irq_scale3_enable>
	scaleirq3_vector_table[irq] = NULL;
1800c13a:	3000      	movi      	r0, 0
1800c13c:	1066      	lrw      	r3, 0x20002188	// 1800c154 <scaleirq3_unregister+0x28>
	hw->SCALESTA |= BIT(irq);
1800c13e:	3101      	movi      	r1, 1
	scaleirq3_vector_table[irq] = NULL;
1800c140:	d4830880 	str.w      	r0, (r3, r4 << 2)
	hw->SCALESTA |= BIT(irq);
1800c144:	7050      	lsl      	r1, r4
	scaleirq3_dev_table[irq] = 0;
1800c146:	1065      	lrw      	r3, 0x20002190	// 1800c158 <scaleirq3_unregister+0x2c>
1800c148:	d4830880 	str.w      	r0, (r3, r4 << 2)
	hw->SCALESTA |= BIT(irq);
1800c14c:	956f      	ld.w      	r3, (r5, 0x3c)
1800c14e:	6c4c      	or      	r1, r3
1800c150:	b52f      	st.w      	r1, (r5, 0x3c)
}
1800c152:	1492      	pop      	r4-r5, r15
1800c154:	20002188 	.long	0x20002188
1800c158:	20002190 	.long	0x20002190

1800c15c <hgscale1_attach>:
    .ioctl       = hgscale3_ioctl,
    .request_irq = scaleirq3_register,
    .release_irq = scaleirq3_unregister,
};

int32 hgscale1_attach(uint32 dev_id, struct hgscale *scale){
1800c15c:	14d2      	push      	r4-r5, r15
1800c15e:	1421      	subi      	r14, r14, 4
    scale->opened          = 0;
1800c160:	817c      	ld.b      	r3, (r1, 0x1c)
1800c162:	3400      	movi      	r4, 0
    scale->use_dma         = 0;
1800c164:	e46320fe 	andi      	r3, r3, 254
1800c168:	c4645c01 	ins      	r3, r4, 1, 1
1800c16c:	a17c      	st.b      	r3, (r1, 0x1c)
int32 hgscale1_attach(uint32 dev_id, struct hgscale *scale){
1800c16e:	6d43      	mov      	r5, r0
    scale->irq_hdl                   = NULL;
    //memset(dvp->irq_hdl,0,sizeof(dvp->irq_hdl));
    scale->irq_data                  = 0;
	//memset(dvp->irq_data,0,sizeof(dvp->irq_data));

	scale->dev.dev.ops = (const struct devobj_ops *)&dev1_ops;
1800c170:	1068      	lrw      	r3, 0x180173b0	// 1800c190 <hgscale1_attach+0x34>
1800c172:	b162      	st.w      	r3, (r1, 0x8)
    scale->irq_hdl                   = NULL;
1800c174:	b184      	st.w      	r4, (r1, 0x10)
    scale->irq_data                  = 0;
1800c176:	b185      	st.w      	r4, (r1, 0x14)

    irq_disable(scale->irq_num);
1800c178:	9106      	ld.w      	r0, (r1, 0x18)
1800c17a:	b820      	st.w      	r1, (r14, 0x0)
1800c17c:	e3fffcf0 	bsr      	0x1800bb5c	// 1800bb5c <csi_vic_disable_irq>
    dev_register(dev_id, (struct dev_obj *)scale);	
1800c180:	9820      	ld.w      	r1, (r14, 0x0)
1800c182:	6c17      	mov      	r0, r5
1800c184:	e3ffb790 	bsr      	0x180030a4	// 180030a4 <dev_register>
	return 0;
}
1800c188:	6c13      	mov      	r0, r4
1800c18a:	1401      	addi      	r14, r14, 4
1800c18c:	1492      	pop      	r4-r5, r15
1800c18e:	0000      	.short	0x0000
1800c190:	180173b0 	.long	0x180173b0

1800c194 <hgscale2_attach>:


int32 hgscale2_attach(uint32 dev_id, struct hgscale *scale){
1800c194:	14d2      	push      	r4-r5, r15
1800c196:	1421      	subi      	r14, r14, 4
    scale->opened          = 0;
1800c198:	817c      	ld.b      	r3, (r1, 0x1c)
1800c19a:	3400      	movi      	r4, 0
    scale->use_dma         = 0;
1800c19c:	e46320fe 	andi      	r3, r3, 254
1800c1a0:	c4645c01 	ins      	r3, r4, 1, 1
1800c1a4:	a17c      	st.b      	r3, (r1, 0x1c)
int32 hgscale2_attach(uint32 dev_id, struct hgscale *scale){
1800c1a6:	6d43      	mov      	r5, r0
    scale->irq_hdl                   = NULL;
    //memset(dvp->irq_hdl,0,sizeof(dvp->irq_hdl));
    scale->irq_data                  = 0;
	//memset(dvp->irq_data,0,sizeof(dvp->irq_data));

	scale->dev.dev.ops = (const struct devobj_ops *)&dev2_ops;
1800c1a8:	1068      	lrw      	r3, 0x180173c4	// 1800c1c8 <hgscale2_attach+0x34>
1800c1aa:	b162      	st.w      	r3, (r1, 0x8)
    scale->irq_hdl                   = NULL;
1800c1ac:	b184      	st.w      	r4, (r1, 0x10)
    scale->irq_data                  = 0;
1800c1ae:	b185      	st.w      	r4, (r1, 0x14)

    irq_disable(scale->irq_num);
1800c1b0:	9106      	ld.w      	r0, (r1, 0x18)
1800c1b2:	b820      	st.w      	r1, (r14, 0x0)
1800c1b4:	e3fffcd4 	bsr      	0x1800bb5c	// 1800bb5c <csi_vic_disable_irq>
    dev_register(dev_id, (struct dev_obj *)scale);	
1800c1b8:	9820      	ld.w      	r1, (r14, 0x0)
1800c1ba:	6c17      	mov      	r0, r5
1800c1bc:	e3ffb774 	bsr      	0x180030a4	// 180030a4 <dev_register>
	return 0;
}
1800c1c0:	6c13      	mov      	r0, r4
1800c1c2:	1401      	addi      	r14, r14, 4
1800c1c4:	1492      	pop      	r4-r5, r15
1800c1c6:	0000      	.short	0x0000
1800c1c8:	180173c4 	.long	0x180173c4

1800c1cc <hgscale3_attach>:


int32 hgscale3_attach(uint32 dev_id, struct hgscale *scale){
1800c1cc:	14d2      	push      	r4-r5, r15
1800c1ce:	1421      	subi      	r14, r14, 4
    scale->opened          = 0;
1800c1d0:	817c      	ld.b      	r3, (r1, 0x1c)
1800c1d2:	3400      	movi      	r4, 0
    scale->use_dma         = 0;
1800c1d4:	e46320fe 	andi      	r3, r3, 254
1800c1d8:	c4645c01 	ins      	r3, r4, 1, 1
1800c1dc:	a17c      	st.b      	r3, (r1, 0x1c)
int32 hgscale3_attach(uint32 dev_id, struct hgscale *scale){
1800c1de:	6d43      	mov      	r5, r0
    scale->irq_hdl                   = NULL;
    //memset(dvp->irq_hdl,0,sizeof(dvp->irq_hdl));
    scale->irq_data                  = 0;
	//memset(dvp->irq_data,0,sizeof(dvp->irq_data));
	scale->dev.dev.ops = (const struct devobj_ops *)&dev3_ops;
1800c1e0:	1068      	lrw      	r3, 0x180173d8	// 1800c200 <hgscale3_attach+0x34>
1800c1e2:	b162      	st.w      	r3, (r1, 0x8)
    scale->irq_hdl                   = NULL;
1800c1e4:	b184      	st.w      	r4, (r1, 0x10)
    scale->irq_data                  = 0;
1800c1e6:	b185      	st.w      	r4, (r1, 0x14)


    irq_disable(scale->irq_num);
1800c1e8:	9106      	ld.w      	r0, (r1, 0x18)
1800c1ea:	b820      	st.w      	r1, (r14, 0x0)
1800c1ec:	e3fffcb8 	bsr      	0x1800bb5c	// 1800bb5c <csi_vic_disable_irq>
    dev_register(dev_id, (struct dev_obj *)scale);	
1800c1f0:	9820      	ld.w      	r1, (r14, 0x0)
1800c1f2:	6c17      	mov      	r0, r5
1800c1f4:	e3ffb758 	bsr      	0x180030a4	// 180030a4 <dev_register>
	return 0;
}
1800c1f8:	6c13      	mov      	r0, r4
1800c1fa:	1401      	addi      	r14, r14, 4
1800c1fc:	1492      	pop      	r4-r5, r15
1800c1fe:	0000      	.short	0x0000
1800c200:	180173d8 	.long	0x180173d8

1800c204 <VPP_IRQHandler_action>:
	return ret_val;
}


void VPP_IRQHandler_action(void *p_vpp)
{
1800c204:	14d6      	push      	r4-r9, r15
	uint32 sta = 0;
	uint8 loop;
	struct hgvpp *vpp_hw = (struct hgvpp*)p_vpp; 
	struct hgvpp_hw *hw  = (struct hgvpp_hw *)vpp_hw->hw;
1800c206:	90a3      	ld.w      	r5, (r0, 0xc)
	sta = hw->STA;
1800c208:	3400      	movi      	r4, 0
1800c20a:	95c4      	ld.w      	r6, (r5, 0x10)
	for(loop = 0;loop < VPP_IRQ_NUM;loop++){
		if(sta&BIT(loop)){
			hw->STA = BIT(loop);
1800c20c:	3701      	movi      	r7, 1
			if(vppirq_vector_table[loop] != NULL)
1800c20e:	ea88000e 	lrw      	r8, 0x200021d0	// 1800c244 <VPP_IRQHandler_action+0x40>
				vppirq_vector_table[loop] (loop,vppirq_dev_table[loop],0);
1800c212:	ea89000e 	lrw      	r9, 0x200021b0	// 1800c248 <VPP_IRQHandler_action+0x44>
		if(sta&BIT(loop)){
1800c216:	c4864043 	lsr      	r3, r6, r4
1800c21a:	e4632001 	andi      	r3, r3, 1
1800c21e:	e903000e 	bez      	r3, 0x1800c23a	// 1800c23a <VPP_IRQHandler_action+0x36>
			hw->STA = BIT(loop);
1800c222:	c4874023 	lsl      	r3, r7, r4
1800c226:	b564      	st.w      	r3, (r5, 0x10)
			if(vppirq_vector_table[loop] != NULL)
1800c228:	d0880883 	ldr.w      	r3, (r8, r4 << 2)
1800c22c:	e9030007 	bez      	r3, 0x1800c23a	// 1800c23a <VPP_IRQHandler_action+0x36>
				vppirq_vector_table[loop] (loop,vppirq_dev_table[loop],0);
1800c230:	d0890881 	ldr.w      	r1, (r9, r4 << 2)
1800c234:	3200      	movi      	r2, 0
1800c236:	6c13      	mov      	r0, r4
1800c238:	7bcd      	jsr      	r3
1800c23a:	2400      	addi      	r4, 1
	for(loop = 0;loop < VPP_IRQ_NUM;loop++){
1800c23c:	3c48      	cmpnei      	r4, 8
1800c23e:	0bec      	bt      	0x1800c216	// 1800c216 <VPP_IRQHandler_action+0x12>
		}
	}
}
1800c240:	1496      	pop      	r4-r9, r15
1800c242:	0000      	.short	0x0000
1800c244:	200021d0 	.long	0x200021d0
1800c248:	200021b0 	.long	0x200021b0

1800c24c <hgvpp_open>:
}


static int32 hgvpp_open(struct vpp_device *p_vpp){
	struct hgvpp *vpp_hw = (struct hgvpp*)p_vpp;	
	struct hgvpp_hw *hw  = (struct hgvpp_hw *)vpp_hw->hw;
1800c24c:	9043      	ld.w      	r2, (r0, 0xc)
	hw->CON |= BIT(0);
1800c24e:	9260      	ld.w      	r3, (r2, 0x0)
1800c250:	ec630001 	ori      	r3, r3, 1
1800c254:	b260      	st.w      	r3, (r2, 0x0)
    IRQn &= 0x7FUL;
1800c256:	9066      	ld.w      	r3, (r0, 0x18)
    VIC->ISER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1800c258:	c4a354c1 	zext      	r1, r3, 6, 5
1800c25c:	3201      	movi      	r2, 1
1800c25e:	e463201f 	andi      	r3, r3, 31
1800c262:	c4624023 	lsl      	r3, r2, r3
	irq_enable(vpp_hw->irq_num);
	return 0;
}
1800c266:	3000      	movi      	r0, 0
1800c268:	1042      	lrw      	r2, 0xe000e100	// 1800c270 <hgvpp_open+0x24>
1800c26a:	d4220883 	str.w      	r3, (r2, r1 << 2)
1800c26e:	783c      	jmp      	r15
1800c270:	e000e100 	.long	0xe000e100

1800c274 <hgvpp_ioctl>:
{
1800c274:	14d2      	push      	r4-r5, r15
	switch(ioctl_cmd){
1800c276:	eb01002d 	cmphsi      	r1, 46
{
1800c27a:	6d0b      	mov      	r4, r2
	struct hgvpp_hw *hw  = (struct hgvpp_hw *)vpp_hw->hw;
1800c27c:	90a3      	ld.w      	r5, (r0, 0xc)
	switch(ioctl_cmd){
1800c27e:	09e6      	bt      	0x1800c64a	// 1800c64a <hgvpp_ioctl+0x3d6>
1800c280:	1042      	lrw      	r2, 0x18017490	// 1800c288 <hgvpp_ioctl+0x14>
1800c282:	d0220882 	ldr.w      	r2, (r2, r1 << 2)
1800c286:	7808      	jmp      	r2
1800c288:	18017490 	.long	0x18017490
				hw->CON |= BIT(30);		
1800c28c:	9560      	ld.w      	r3, (r5, 0x0)
			if(param1)
1800c28e:	e9040005 	bez      	r4, 0x1800c298	// 1800c298 <hgvpp_ioctl+0x24>
				hw->CON |= BIT(30);		
1800c292:	3bbe      	bseti      	r3, 30
				hw->CON |= BIT(29);
1800c294:	b560      	st.w      	r3, (r5, 0x0)
1800c296:	041c      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
				hw->CON &= ~BIT(30);	
1800c298:	3b9e      	bclri      	r3, 30
				hw->CON &= ~BIT(29);
1800c29a:	b560      	st.w      	r3, (r5, 0x0)
1800c29c:	0424      	br      	0x1800c2e4	// 1800c2e4 <hgvpp_ioctl+0x70>
			if(param1 < 8){
1800c29e:	3c07      	cmphsi      	r4, 8
1800c2a0:	0817      	bt      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
				hw->CON &= ~(0x7<<17);
1800c2a2:	ea22fff2 	movih      	r2, 65522
1800c2a6:	9560      	ld.w      	r3, (r5, 0x0)
1800c2a8:	2a00      	subi      	r2, 1
1800c2aa:	68c8      	and      	r3, r2
1800c2ac:	b560      	st.w      	r3, (r5, 0x0)
				hw->CON |= (param1<<17);				
1800c2ae:	9540      	ld.w      	r2, (r5, 0x0)
1800c2b0:	4411      	lsli      	r0, r4, 17
			hw->CON |= (param1<<13);
1800c2b2:	c4402424 	or      	r4, r0, r2
1800c2b6:	b580      	st.w      	r4, (r5, 0x0)
1800c2b8:	040b      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
				hw->CON |= BIT(4);		
1800c2ba:	9560      	ld.w      	r3, (r5, 0x0)
			if(param1)
1800c2bc:	e9040005 	bez      	r4, 0x1800c2c6	// 1800c2c6 <hgvpp_ioctl+0x52>
				hw->CON |= BIT(4);		
1800c2c0:	ec630010 	ori      	r3, r3, 16
1800c2c4:	07e8      	br      	0x1800c294	// 1800c294 <hgvpp_ioctl+0x20>
				hw->CON &= ~BIT(4);	
1800c2c6:	3b84      	bclri      	r3, 4
1800c2c8:	07e9      	br      	0x1800c29a	// 1800c29a <hgvpp_ioctl+0x26>
			hw->DLT = param1;	
1800c2ca:	b582      	st.w      	r4, (r5, 0x8)
			hw->DHT = param2;
1800c2cc:	b563      	st.w      	r3, (r5, 0xc)
    int32  ret_val = RET_OK;
1800c2ce:	3400      	movi      	r4, 0
1800c2d0:	040a      	br      	0x1800c2e4	// 1800c2e4 <hgvpp_ioctl+0x70>
				hw->IWM0_CON |= BIT(5);
1800c2d2:	956b      	ld.w      	r3, (r5, 0x2c)
			if(param1)
1800c2d4:	e9040006 	bez      	r4, 0x1800c2e0	// 1800c2e0 <hgvpp_ioctl+0x6c>
				hw->IWM0_CON |= BIT(5);
1800c2d8:	ec630020 	ori      	r3, r3, 32
				hw->IWM0_CON |= BIT(0);
1800c2dc:	b56b      	st.w      	r3, (r5, 0x2c)
1800c2de:	07f8      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
				hw->IWM0_CON &= ~BIT(5);	
1800c2e0:	3b85      	bclri      	r3, 5
				hw->IWM0_CON &= ~BIT(0);	
1800c2e2:	b56b      	st.w      	r3, (r5, 0x2c)
}
1800c2e4:	6c13      	mov      	r0, r4
1800c2e6:	1492      	pop      	r4-r5, r15
				hw->IWM1_CON |= BIT(5);
1800c2e8:	9572      	ld.w      	r3, (r5, 0x48)
			if(param1)
1800c2ea:	e9040006 	bez      	r4, 0x1800c2f6	// 1800c2f6 <hgvpp_ioctl+0x82>
				hw->IWM1_CON |= BIT(5);
1800c2ee:	ec630020 	ori      	r3, r3, 32
				hw->IWM1_CON |= BIT(0);
1800c2f2:	b572      	st.w      	r3, (r5, 0x48)
1800c2f4:	07ed      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
				hw->IWM1_CON &= ~BIT(5);	
1800c2f6:	3b85      	bclri      	r3, 5
				hw->IWM1_CON &= ~BIT(0);	
1800c2f8:	b572      	st.w      	r3, (r5, 0x48)
1800c2fa:	07f5      	br      	0x1800c2e4	// 1800c2e4 <hgvpp_ioctl+0x70>
			hw->IWM0_YUV = 	param1;
1800c2fc:	b58d      	st.w      	r4, (r5, 0x34)
1800c2fe:	07e8      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
			hw->IWM1_YUV =	param1;
1800c300:	b594      	st.w      	r4, (r5, 0x50)
1800c302:	07e6      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
			hw->IWM0_LADR =	param1;
1800c304:	b58e      	st.w      	r4, (r5, 0x38)
1800c306:	07e4      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
			hw->IWM1_LADR =	param1;
1800c308:	b595      	st.w      	r4, (r5, 0x54)
1800c30a:	07e2      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
			hw->IWM0_CON &= ~(0xff<<16);
1800c30c:	ea22ff01 	movih      	r2, 65281
1800c310:	956b      	ld.w      	r3, (r5, 0x2c)
1800c312:	2a00      	subi      	r2, 1
1800c314:	68c8      	and      	r3, r2
1800c316:	b56b      	st.w      	r3, (r5, 0x2c)
			hw->IWM0_CON &= ~(0xff<<24);
1800c318:	956b      	ld.w      	r3, (r5, 0x2c)
1800c31a:	c40356e3 	zext      	r3, r3, 23, 0
1800c31e:	b56b      	st.w      	r3, (r5, 0x2c)
			hw->IWM0_CON |= (((param1&0Xff00)>>8)<<24);
1800c320:	4c68      	lsri      	r3, r4, 8
1800c322:	954b      	ld.w      	r2, (r5, 0x2c)
1800c324:	4378      	lsli      	r3, r3, 24
1800c326:	6cc8      	or      	r3, r2
1800c328:	b56b      	st.w      	r3, (r5, 0x2c)
			hw->IWM0_CON |= ((param1&0Xff)<<16);			
1800c32a:	33ff      	movi      	r3, 255
1800c32c:	4410      	lsli      	r0, r4, 16
1800c32e:	4370      	lsli      	r3, r3, 16
1800c330:	954b      	ld.w      	r2, (r5, 0x2c)
1800c332:	c4602024 	and      	r4, r0, r3
1800c336:	6d08      	or      	r4, r2
			hw->IWM0_CON |= (param1<<2);
1800c338:	b58b      	st.w      	r4, (r5, 0x2c)
1800c33a:	07ca      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
			hw->IWM1_CON &= ~(0xff<<16);
1800c33c:	ea22ff01 	movih      	r2, 65281
1800c340:	9572      	ld.w      	r3, (r5, 0x48)
1800c342:	2a00      	subi      	r2, 1
1800c344:	68c8      	and      	r3, r2
1800c346:	b572      	st.w      	r3, (r5, 0x48)
			hw->IWM1_CON &= ~(0xff<<24);
1800c348:	9572      	ld.w      	r3, (r5, 0x48)
1800c34a:	c40356e3 	zext      	r3, r3, 23, 0
1800c34e:	b572      	st.w      	r3, (r5, 0x48)
			hw->IWM1_CON |= (((param1&0Xff00)>>8)<<24);
1800c350:	4c68      	lsri      	r3, r4, 8
1800c352:	9552      	ld.w      	r2, (r5, 0x48)
1800c354:	4378      	lsli      	r3, r3, 24
1800c356:	6cc8      	or      	r3, r2
1800c358:	b572      	st.w      	r3, (r5, 0x48)
			hw->IWM1_CON |= ((param1&0Xff)<<16);			
1800c35a:	33ff      	movi      	r3, 255
1800c35c:	4410      	lsli      	r0, r4, 16
1800c35e:	4370      	lsli      	r3, r3, 16
1800c360:	9552      	ld.w      	r2, (r5, 0x48)
1800c362:	c4602024 	and      	r4, r0, r3
1800c366:	6d08      	or      	r4, r2
			hw->IWM1_CON |= (param1<<2);
1800c368:	b592      	st.w      	r4, (r5, 0x48)
1800c36a:	07b2      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
			hw->IWM0_CON &= ~(0x7<<2);
1800c36c:	3200      	movi      	r2, 0
1800c36e:	956b      	ld.w      	r3, (r5, 0x2c)
1800c370:	2a1c      	subi      	r2, 29
1800c372:	68c8      	and      	r3, r2
1800c374:	b56b      	st.w      	r3, (r5, 0x2c)
			hw->IWM0_CON |= (param1<<2);
1800c376:	954b      	ld.w      	r2, (r5, 0x2c)
1800c378:	4402      	lsli      	r0, r4, 2
1800c37a:	c4402424 	or      	r4, r0, r2
1800c37e:	07dd      	br      	0x1800c338	// 1800c338 <hgvpp_ioctl+0xc4>
			hw->IWM1_CON &= ~(0x7<<2);
1800c380:	3200      	movi      	r2, 0
1800c382:	9572      	ld.w      	r3, (r5, 0x48)
1800c384:	2a1c      	subi      	r2, 29
1800c386:	68c8      	and      	r3, r2
1800c388:	b572      	st.w      	r3, (r5, 0x48)
			hw->IWM1_CON |= (param1<<2);
1800c38a:	9552      	ld.w      	r2, (r5, 0x48)
1800c38c:	4402      	lsli      	r0, r4, 2
1800c38e:	c4402424 	or      	r4, r0, r2
1800c392:	07eb      	br      	0x1800c368	// 1800c368 <hgvpp_ioctl+0xf4>
			hw->IWM0_SIZE &= ~(0x1f<<0);
1800c394:	3200      	movi      	r2, 0
1800c396:	950c      	ld.w      	r0, (r5, 0x30)
1800c398:	2a1f      	subi      	r2, 32
1800c39a:	6808      	and      	r0, r2
1800c39c:	b50c      	st.w      	r0, (r5, 0x30)
			hw->IWM0_SIZE |= (num<<0);
1800c39e:	950c      	ld.w      	r0, (r5, 0x30)
			num = param2&0xff;
1800c3a0:	e46320ff 	andi      	r3, r3, 255
			hw->IWM0_SIZE |= (num<<0);
1800c3a4:	6c0c      	or      	r0, r3
1800c3a6:	b50c      	st.w      	r0, (r5, 0x30)
			hw->IWM0_SIZE &= ~(0x3f<<5);
1800c3a8:	950c      	ld.w      	r0, (r5, 0x30)
1800c3aa:	ea0207e0 	movi      	r2, 2016
1800c3ae:	6c8a      	nor      	r2, r2
1800c3b0:	6808      	and      	r0, r2
1800c3b2:	b50c      	st.w      	r0, (r5, 0x30)
			w = param1&0xff;
1800c3b4:	e42420ff 	andi      	r1, r4, 255
			hw->IWM0_SIZE |= (w<<5);
1800c3b8:	954c      	ld.w      	r2, (r5, 0x30)
1800c3ba:	4105      	lsli      	r0, r1, 5
1800c3bc:	6c08      	or      	r0, r2
1800c3be:	b50c      	st.w      	r0, (r5, 0x30)
			hw->IWM0_SIZE &= ~(0x3ff<<11);
1800c3c0:	950c      	ld.w      	r0, (r5, 0x30)
1800c3c2:	c6a05022 	bmaski      	r2, 22
1800c3c6:	c6a24902 	rotli      	r2, r2, 21
1800c3ca:	6808      	and      	r0, r2
1800c3cc:	b50c      	st.w      	r0, (r5, 0x30)
			hw->IWM0_SIZE |= ((w*num)<<11);
1800c3ce:	7cc4      	mult      	r3, r1
1800c3d0:	954c      	ld.w      	r2, (r5, 0x30)
1800c3d2:	436b      	lsli      	r3, r3, 11
1800c3d4:	6cc8      	or      	r3, r2
1800c3d6:	b56c      	st.w      	r3, (r5, 0x30)
			hw->IWM0_SIZE &= ~(0xff<<21);
1800c3d8:	ea22e020 	movih      	r2, 57376
1800c3dc:	956c      	ld.w      	r3, (r5, 0x30)
1800c3de:	2a00      	subi      	r2, 1
1800c3e0:	68c8      	and      	r3, r2
1800c3e2:	b56c      	st.w      	r3, (r5, 0x30)
			hw->IWM0_SIZE |= (h<<21);
1800c3e4:	33ff      	movi      	r3, 255
1800c3e6:	440d      	lsli      	r0, r4, 13
1800c3e8:	4375      	lsli      	r3, r3, 21
1800c3ea:	954c      	ld.w      	r2, (r5, 0x30)
1800c3ec:	c4602024 	and      	r4, r0, r3
1800c3f0:	6d08      	or      	r4, r2
1800c3f2:	b58c      	st.w      	r4, (r5, 0x30)
1800c3f4:	076d      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
			if(param2 > 23)
1800c3f6:	3b17      	cmphsi      	r3, 24
1800c3f8:	0b6b      	bt      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
			if(param2 < 8){
1800c3fa:	3b07      	cmphsi      	r3, 8
1800c3fc:	080f      	bt      	0x1800c41a	// 1800c41a <hgvpp_ioctl+0x1a6>
				hw->IWM0_IDX0 &= ~(0xf<<(param2*4));
1800c3fe:	4362      	lsli      	r3, r3, 2
1800c400:	320f      	movi      	r2, 15
1800c402:	952f      	ld.w      	r1, (r5, 0x3c)
1800c404:	708c      	lsl      	r2, r3
1800c406:	c4412042 	andn      	r2, r1, r2
1800c40a:	b54f      	st.w      	r2, (r5, 0x3c)
				hw->IWM0_IDX0 |= (param1<<(param2*4));
1800c40c:	954f      	ld.w      	r2, (r5, 0x3c)
1800c40e:	c4644020 	lsl      	r0, r4, r3
1800c412:	c4402423 	or      	r3, r0, r2
1800c416:	b56f      	st.w      	r3, (r5, 0x3c)
1800c418:	075b      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
			else if(param2 < 16){
1800c41a:	3b0f      	cmphsi      	r3, 16
1800c41c:	310f      	movi      	r1, 15
1800c41e:	0812      	bt      	0x1800c442	// 1800c442 <hgvpp_ioctl+0x1ce>
				hw->IWM0_IDX1 &= ~(0xf<<((param2-8)*4));
1800c420:	c7a05020 	bmaski      	r0, 30
1800c424:	2806      	subi      	r0, 7
1800c426:	60c0      	addu      	r3, r0
1800c428:	4362      	lsli      	r3, r3, 2
1800c42a:	9550      	ld.w      	r2, (r5, 0x40)
1800c42c:	704c      	lsl      	r1, r3
1800c42e:	c4222041 	andn      	r1, r2, r1
1800c432:	b530      	st.w      	r1, (r5, 0x40)
				hw->IWM0_IDX1 |= (param1<<((param2-8)*4));
1800c434:	9550      	ld.w      	r2, (r5, 0x40)
1800c436:	c4644020 	lsl      	r0, r4, r3
1800c43a:	c4402423 	or      	r3, r0, r2
1800c43e:	b570      	st.w      	r3, (r5, 0x40)
1800c440:	0747      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
				hw->IWM0_IDX2 &= ~(0xf<<((param2-16)*4));
1800c442:	c7a05020 	bmaski      	r0, 30
1800c446:	280e      	subi      	r0, 15
1800c448:	60c0      	addu      	r3, r0
1800c44a:	4362      	lsli      	r3, r3, 2
1800c44c:	9551      	ld.w      	r2, (r5, 0x44)
1800c44e:	704c      	lsl      	r1, r3
1800c450:	c4222041 	andn      	r1, r2, r1
1800c454:	b531      	st.w      	r1, (r5, 0x44)
				hw->IWM0_IDX2 |= (param1<<((param2-16)*4));
1800c456:	9551      	ld.w      	r2, (r5, 0x44)
1800c458:	c4644020 	lsl      	r0, r4, r3
1800c45c:	c4402423 	or      	r3, r0, r2
1800c460:	b571      	st.w      	r3, (r5, 0x44)
1800c462:	0736      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
			hw->IWM1_SIZE &= ~(0xff<<11);
1800c464:	9573      	ld.w      	r3, (r5, 0x4c)
1800c466:	c6e05022 	bmaski      	r2, 24
1800c46a:	c6624902 	rotli      	r2, r2, 19
1800c46e:	68c8      	and      	r3, r2
			hw->IWM1_SIZE |= (w<<11);
1800c470:	31ff      	movi      	r1, 255
			hw->IWM1_SIZE &= ~(0xff<<11);
1800c472:	b573      	st.w      	r3, (r5, 0x4c)
			hw->IWM1_SIZE |= (w<<11);
1800c474:	412b      	lsli      	r1, r1, 11
1800c476:	446b      	lsli      	r3, r4, 11
1800c478:	9553      	ld.w      	r2, (r5, 0x4c)
1800c47a:	68c4      	and      	r3, r1
1800c47c:	6cc8      	or      	r3, r2
1800c47e:	b573      	st.w      	r3, (r5, 0x4c)
			hw->IWM1_SIZE &= ~(0xff<<21);
1800c480:	ea22e020 	movih      	r2, 57376
1800c484:	9573      	ld.w      	r3, (r5, 0x4c)
1800c486:	2a00      	subi      	r2, 1
1800c488:	68c8      	and      	r3, r2
1800c48a:	b573      	st.w      	r3, (r5, 0x4c)
			hw->IWM1_SIZE |= (h<<21);
1800c48c:	33ff      	movi      	r3, 255
1800c48e:	440d      	lsli      	r0, r4, 13
1800c490:	4375      	lsli      	r3, r3, 21
1800c492:	9553      	ld.w      	r2, (r5, 0x4c)
1800c494:	c4602024 	and      	r4, r0, r3
1800c498:	6d08      	or      	r4, r2
1800c49a:	b593      	st.w      	r4, (r5, 0x4c)
1800c49c:	0719      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
				hw->IWM0_CON |= BIT(1);
1800c49e:	956b      	ld.w      	r3, (r5, 0x2c)
			if(param1)
1800c4a0:	e9040005 	bez      	r4, 0x1800c4aa	// 1800c4aa <hgvpp_ioctl+0x236>
				hw->IWM0_CON |= BIT(1);
1800c4a4:	ec630002 	ori      	r3, r3, 2
1800c4a8:	071a      	br      	0x1800c2dc	// 1800c2dc <hgvpp_ioctl+0x68>
				hw->IWM0_CON &= ~BIT(1);	
1800c4aa:	3b81      	bclri      	r3, 1
1800c4ac:	071b      	br      	0x1800c2e2	// 1800c2e2 <hgvpp_ioctl+0x6e>
				hw->IWM1_CON |= BIT(1);
1800c4ae:	9572      	ld.w      	r3, (r5, 0x48)
			if(param1)
1800c4b0:	e9040005 	bez      	r4, 0x1800c4ba	// 1800c4ba <hgvpp_ioctl+0x246>
				hw->IWM1_CON |= BIT(1);
1800c4b4:	ec630002 	ori      	r3, r3, 2
1800c4b8:	071d      	br      	0x1800c2f2	// 1800c2f2 <hgvpp_ioctl+0x7e>
				hw->IWM1_CON &= ~BIT(1);	
1800c4ba:	3b81      	bclri      	r3, 1
1800c4bc:	071e      	br      	0x1800c2f8	// 1800c2f8 <hgvpp_ioctl+0x84>
				hw->IWM0_CON |= BIT(0);
1800c4be:	956b      	ld.w      	r3, (r5, 0x2c)
			if(param1)
1800c4c0:	e9040005 	bez      	r4, 0x1800c4ca	// 1800c4ca <hgvpp_ioctl+0x256>
				hw->IWM0_CON |= BIT(0);
1800c4c4:	ec630001 	ori      	r3, r3, 1
1800c4c8:	070a      	br      	0x1800c2dc	// 1800c2dc <hgvpp_ioctl+0x68>
				hw->IWM0_CON &= ~BIT(0);	
1800c4ca:	3b80      	bclri      	r3, 0
1800c4cc:	070b      	br      	0x1800c2e2	// 1800c2e2 <hgvpp_ioctl+0x6e>
				hw->IWM1_CON |= BIT(0);
1800c4ce:	9572      	ld.w      	r3, (r5, 0x48)
			if(param1)
1800c4d0:	e9040005 	bez      	r4, 0x1800c4da	// 1800c4da <hgvpp_ioctl+0x266>
				hw->IWM1_CON |= BIT(0);
1800c4d4:	ec630001 	ori      	r3, r3, 1
1800c4d8:	070d      	br      	0x1800c2f2	// 1800c2f2 <hgvpp_ioctl+0x7e>
				hw->IWM1_CON &= ~BIT(0);	
1800c4da:	3b80      	bclri      	r3, 0
1800c4dc:	070e      	br      	0x1800c2f8	// 1800c2f8 <hgvpp_ioctl+0x84>
				hw->MD_CON &= ~(0x1f<<18);
1800c4de:	9577      	ld.w      	r3, (r5, 0x5c)
			if(param1){
1800c4e0:	e904000f 	bez      	r4, 0x1800c4fe	// 1800c4fe <hgvpp_ioctl+0x28a>
				hw->MD_CON &= ~(0x1f<<18);
1800c4e4:	ea22ff84 	movih      	r2, 65412
1800c4e8:	2a00      	subi      	r2, 1
1800c4ea:	68c8      	and      	r3, r2
1800c4ec:	b577      	st.w      	r3, (r5, 0x5c)
				hw->MD_CON |= (BIT(23));				
1800c4ee:	9577      	ld.w      	r3, (r5, 0x5c)
1800c4f0:	3bb7      	bseti      	r3, 23
1800c4f2:	b577      	st.w      	r3, (r5, 0x5c)
				hw->MD_CON |= BIT(0);
1800c4f4:	9577      	ld.w      	r3, (r5, 0x5c)
1800c4f6:	ec630001 	ori      	r3, r3, 1
1800c4fa:	b577      	st.w      	r3, (r5, 0x5c)
1800c4fc:	06e9      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
				hw->MD_CON &= ~BIT(0);	
1800c4fe:	3b80      	bclri      	r3, 0
1800c500:	b577      	st.w      	r3, (r5, 0x5c)
1800c502:	06f1      	br      	0x1800c2e4	// 1800c2e4 <hgvpp_ioctl+0x70>
			hw->MD_BASE_ADDR = param1;
1800c504:	b59a      	st.w      	r4, (r5, 0x68)
1800c506:	06e4      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
			hw->MD_WIN_CON1 = ((x_e-1) | ((y_e-1)<<16));			
1800c508:	ea22ffff 	movih      	r2, 65535
1800c50c:	c4432021 	and      	r1, r3, r2
			x_e = param2&0xffff;
1800c510:	c40355e3 	zext      	r3, r3, 15, 0
			hw->MD_WIN_CON1 = ((x_e-1) | ((y_e-1)<<16));			
1800c514:	6048      	addu      	r1, r2
1800c516:	2b00      	subi      	r3, 1
1800c518:	6cc4      	or      	r3, r1
			hw->MD_WIN_CON0 = (x_s | (y_s<<16));
1800c51a:	b598      	st.w      	r4, (r5, 0x60)
			hw->MD_WIN_CON1 = ((x_e-1) | ((y_e-1)<<16));			
1800c51c:	b579      	st.w      	r3, (r5, 0x64)
1800c51e:	06d8      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
			hw->MD_CON &= ~(0xff<<1);
1800c520:	9577      	ld.w      	r3, (r5, 0x5c)
1800c522:	ea0201fe 	movi      	r2, 510
1800c526:	6c8a      	nor      	r2, r2
1800c528:	68c8      	and      	r3, r2
1800c52a:	b577      	st.w      	r3, (r5, 0x5c)
			hw->MD_CON |= (param1<<1);
1800c52c:	5c10      	addu      	r0, r4, r4
1800c52e:	9557      	ld.w      	r2, (r5, 0x5c)
1800c530:	e48021fe 	andi      	r4, r0, 510
			hw->MD_CON |= (param1<<9);
1800c534:	6d08      	or      	r4, r2
1800c536:	b597      	st.w      	r4, (r5, 0x5c)
1800c538:	06cb      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
			hw->MD_CON &= ~(0x1ff<<9);
1800c53a:	9577      	ld.w      	r3, (r5, 0x5c)
1800c53c:	c6c05022 	bmaski      	r2, 23
1800c540:	c6424902 	rotli      	r2, r2, 18
1800c544:	68c8      	and      	r3, r2
1800c546:	b577      	st.w      	r3, (r5, 0x5c)
			hw->MD_CON |= (param1<<9);
1800c548:	4409      	lsli      	r0, r4, 9
1800c54a:	ea230004 	movih      	r3, 4
1800c54e:	e46311ff 	subi      	r3, r3, 512
1800c552:	9557      	ld.w      	r2, (r5, 0x5c)
1800c554:	c4602024 	and      	r4, r0, r3
1800c558:	07ee      	br      	0x1800c534	// 1800c534 <hgvpp_ioctl+0x2c0>
			hw->IPF_SADR = param1;
1800c55a:	b596      	st.w      	r4, (r5, 0x58)
1800c55c:	06b9      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
				hw->CON |= BIT(28);
1800c55e:	9560      	ld.w      	r3, (r5, 0x0)
			if(param1)
1800c560:	e9040004 	bez      	r4, 0x1800c568	// 1800c568 <hgvpp_ioctl+0x2f4>
				hw->CON |= BIT(28);
1800c564:	3bbc      	bseti      	r3, 28
1800c566:	0697      	br      	0x1800c294	// 1800c294 <hgvpp_ioctl+0x20>
				hw->CON &= ~BIT(28);	
1800c568:	3b9c      	bclri      	r3, 28
1800c56a:	0698      	br      	0x1800c29a	// 1800c29a <hgvpp_ioctl+0x26>
				hw->CON |= BIT(1);
1800c56c:	9560      	ld.w      	r3, (r5, 0x0)
			if(param1)
1800c56e:	e9040005 	bez      	r4, 0x1800c578	// 1800c578 <hgvpp_ioctl+0x304>
				hw->CON |= BIT(1);
1800c572:	ec630002 	ori      	r3, r3, 2
1800c576:	068f      	br      	0x1800c294	// 1800c294 <hgvpp_ioctl+0x20>
				hw->CON &= ~BIT(1);	
1800c578:	3b81      	bclri      	r3, 1
1800c57a:	0690      	br      	0x1800c29a	// 1800c29a <hgvpp_ioctl+0x26>
			hw->SIZE = 0;
1800c57c:	3200      	movi      	r2, 0
1800c57e:	b541      	st.w      	r2, (r5, 0x4)
			hw->SIZE |= (w<<0);
1800c580:	9501      	ld.w      	r0, (r5, 0x4)
1800c582:	6c10      	or      	r0, r4
1800c584:	b501      	st.w      	r0, (r5, 0x4)
			hw->SIZE |= (h<<11);
1800c586:	9541      	ld.w      	r2, (r5, 0x4)
1800c588:	436b      	lsli      	r3, r3, 11
1800c58a:	6cc8      	or      	r3, r2
1800c58c:	b561      	st.w      	r3, (r5, 0x4)
1800c58e:	06a0      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
			if(param1 > 3){
1800c590:	3c03      	cmphsi      	r4, 4
1800c592:	0c05      	bf      	0x1800c59c	// 1800c59c <hgvpp_ioctl+0x328>
				os_printf("set ycbcr error:%d\r\n",param1);
1800c594:	6c53      	mov      	r1, r4
1800c596:	1111      	lrw      	r0, 0x1801755c	// 1800c658 <hgvpp_ioctl+0x3e4>
1800c598:	e0000296 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
			hw->CON &= ~(BIT(2)|BIT(3));
1800c59c:	9560      	ld.w      	r3, (r5, 0x0)
1800c59e:	3b82      	bclri      	r3, 2
1800c5a0:	3b83      	bclri      	r3, 3
1800c5a2:	b560      	st.w      	r3, (r5, 0x0)
			hw->CON |= param1<<2;
1800c5a4:	9540      	ld.w      	r2, (r5, 0x0)
1800c5a6:	4402      	lsli      	r0, r4, 2
1800c5a8:	0685      	br      	0x1800c2b2	// 1800c2b2 <hgvpp_ioctl+0x3e>
			if(param1 > 16){
1800c5aa:	3c10      	cmphsi      	r4, 17
1800c5ac:	0c05      	bf      	0x1800c5b6	// 1800c5b6 <hgvpp_ioctl+0x342>
				os_printf("set buf0 error:%d\r\n",param1);
1800c5ae:	6c53      	mov      	r1, r4
1800c5b0:	110b      	lrw      	r0, 0x18017572	// 1800c65c <hgvpp_ioctl+0x3e8>
1800c5b2:	e0000289 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
			hw->CON &= ~(0x0f<<7);
1800c5b6:	9560      	ld.w      	r3, (r5, 0x0)
1800c5b8:	ea020780 	movi      	r2, 1920
1800c5bc:	6c8a      	nor      	r2, r2
1800c5be:	68c8      	and      	r3, r2
1800c5c0:	b560      	st.w      	r3, (r5, 0x0)
			hw->CON |= (param1<<7);
1800c5c2:	9540      	ld.w      	r2, (r5, 0x0)
1800c5c4:	4407      	lsli      	r0, r4, 7
1800c5c6:	0676      	br      	0x1800c2b2	// 1800c2b2 <hgvpp_ioctl+0x3e>
			if(param1 > 16){
1800c5c8:	3c10      	cmphsi      	r4, 17
1800c5ca:	0c05      	bf      	0x1800c5d4	// 1800c5d4 <hgvpp_ioctl+0x360>
				os_printf("set buf1 error:%d\r\n",param1);
1800c5cc:	6c53      	mov      	r1, r4
1800c5ce:	1105      	lrw      	r0, 0x18017587	// 1800c660 <hgvpp_ioctl+0x3ec>
1800c5d0:	e000027a 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
			hw->CON &= ~(0x0f<<13);
1800c5d4:	9560      	ld.w      	r3, (r5, 0x0)
1800c5d6:	c7605022 	bmaski      	r2, 28
1800c5da:	c6224902 	rotli      	r2, r2, 17
1800c5de:	68c8      	and      	r3, r2
1800c5e0:	b560      	st.w      	r3, (r5, 0x0)
			hw->CON |= (param1<<13);
1800c5e2:	9540      	ld.w      	r2, (r5, 0x0)
1800c5e4:	440d      	lsli      	r0, r4, 13
1800c5e6:	0666      	br      	0x1800c2b2	// 1800c2b2 <hgvpp_ioctl+0x3e>
				hw->CON |= BIT(11);
1800c5e8:	9560      	ld.w      	r3, (r5, 0x0)
			if(param1)
1800c5ea:	e9040005 	bez      	r4, 0x1800c5f4	// 1800c5f4 <hgvpp_ioctl+0x380>
				hw->CON |= BIT(11);
1800c5ee:	ec630800 	ori      	r3, r3, 2048
1800c5f2:	0651      	br      	0x1800c294	// 1800c294 <hgvpp_ioctl+0x20>
				hw->CON &= ~BIT(11);	
1800c5f4:	3b8b      	bclri      	r3, 11
1800c5f6:	0652      	br      	0x1800c29a	// 1800c29a <hgvpp_ioctl+0x26>
				hw->CON &= ~BIT(12);			// 1/2
1800c5f8:	9560      	ld.w      	r3, (r5, 0x0)
			if(param1)
1800c5fa:	e9040004 	bez      	r4, 0x1800c602	// 1800c602 <hgvpp_ioctl+0x38e>
				hw->CON &= ~BIT(12);			// 1/2
1800c5fe:	3b8c      	bclri      	r3, 12
1800c600:	064a      	br      	0x1800c294	// 1800c294 <hgvpp_ioctl+0x20>
				hw->CON |= BIT(12);	            // 1/3
1800c602:	ec631000 	ori      	r3, r3, 4096
1800c606:	064a      	br      	0x1800c29a	// 1800c29a <hgvpp_ioctl+0x26>
				hw->CON |= BIT(5);
1800c608:	9560      	ld.w      	r3, (r5, 0x0)
			if(param1)
1800c60a:	e9040005 	bez      	r4, 0x1800c614	// 1800c614 <hgvpp_ioctl+0x3a0>
				hw->CON |= BIT(5);
1800c60e:	ec630020 	ori      	r3, r3, 32
1800c612:	0641      	br      	0x1800c294	// 1800c294 <hgvpp_ioctl+0x20>
				hw->CON &= ~BIT(5);	
1800c614:	3b85      	bclri      	r3, 5
1800c616:	0642      	br      	0x1800c29a	// 1800c29a <hgvpp_ioctl+0x26>
			hw->DMA_YADR = param1;
1800c618:	b585      	st.w      	r4, (r5, 0x14)
1800c61a:	065a      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
			hw->DMA_UADR = param1;
1800c61c:	b586      	st.w      	r4, (r5, 0x18)
1800c61e:	0658      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
			hw->DMA_VADR = param1;
1800c620:	b587      	st.w      	r4, (r5, 0x1c)
1800c622:	0656      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
			hw->DMA_YADR1 = param1;
1800c624:	b588      	st.w      	r4, (r5, 0x20)
1800c626:	0654      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
			hw->DMA_UADR1 = param1;
1800c628:	b589      	st.w      	r4, (r5, 0x24)
1800c62a:	0652      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
			hw->DMA_VADR1 = param1;
1800c62c:	b58a      	st.w      	r4, (r5, 0x28)
1800c62e:	0650      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
			hw->ITP_YADR = param1;
1800c630:	b59b      	st.w      	r4, (r5, 0x6c)
1800c632:	064e      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
			hw->ITP_UADR = param1;
1800c634:	b59c      	st.w      	r4, (r5, 0x70)
1800c636:	064c      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
			hw->ITP_VADR = param1;
1800c638:	b59d      	st.w      	r4, (r5, 0x74)
1800c63a:	064a      	br      	0x1800c2ce	// 1800c2ce <hgvpp_ioctl+0x5a>
				hw->CON |= BIT(29);
1800c63c:	9560      	ld.w      	r3, (r5, 0x0)
			if(param1)
1800c63e:	e9040004 	bez      	r4, 0x1800c646	// 1800c646 <hgvpp_ioctl+0x3d2>
				hw->CON |= BIT(29);
1800c642:	3bbd      	bseti      	r3, 29
1800c644:	0628      	br      	0x1800c294	// 1800c294 <hgvpp_ioctl+0x20>
				hw->CON &= ~BIT(29);
1800c646:	3b9d      	bclri      	r3, 29
1800c648:	0629      	br      	0x1800c29a	// 1800c29a <hgvpp_ioctl+0x26>
			os_printf("NO VPP IOCTL:%d\r\n",ioctl_cmd);
1800c64a:	1007      	lrw      	r0, 0x1801759c	// 1800c664 <hgvpp_ioctl+0x3f0>
1800c64c:	e000023c 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
            ret_val = -ENOTSUPP;
1800c650:	ea04020b 	movi      	r4, 523
1800c654:	6d12      	nor      	r4, r4
        break;
1800c656:	0647      	br      	0x1800c2e4	// 1800c2e4 <hgvpp_ioctl+0x70>
1800c658:	1801755c 	.long	0x1801755c
1800c65c:	18017572 	.long	0x18017572
1800c660:	18017587 	.long	0x18017587
1800c664:	1801759c 	.long	0x1801759c

1800c668 <hgvpp_close>:

static int32 hgvpp_close(struct vpp_device *p_vpp){
	struct hgvpp *vpp_hw = (struct hgvpp*)p_vpp; 	
	struct hgvpp_hw *hw  = (struct hgvpp_hw *)vpp_hw->hw;
1800c668:	9043      	ld.w      	r2, (r0, 0xc)
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1800c66a:	3101      	movi      	r1, 1
	hw->CON &= ~BIT(0);
1800c66c:	9260      	ld.w      	r3, (r2, 0x0)
1800c66e:	3b80      	bclri      	r3, 0
1800c670:	b260      	st.w      	r3, (r2, 0x0)
    IRQn &= 0x7FUL;
1800c672:	9066      	ld.w      	r3, (r0, 0x18)
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1800c674:	c4a354c2 	zext      	r2, r3, 6, 5
1800c678:	e463201f 	andi      	r3, r3, 31
1800c67c:	c4614023 	lsl      	r3, r1, r3
1800c680:	221f      	addi      	r2, 32
1800c682:	1023      	lrw      	r1, 0xe000e100	// 1800c68c <hgvpp_close+0x24>
	irq_disable(vpp_hw->irq_num);
	return 0;
}
1800c684:	3000      	movi      	r0, 0
1800c686:	d4410883 	str.w      	r3, (r1, r2 << 2)
1800c68a:	783c      	jmp      	r15
1800c68c:	e000e100 	.long	0xe000e100

1800c690 <irq_vpp_enable>:
	struct hgvpp_hw *hw  = (struct hgvpp_hw *)vpp_hw->hw;
1800c690:	9003      	ld.w      	r0, (r0, 0xc)
1800c692:	2213      	addi      	r2, 20
1800c694:	3301      	movi      	r3, 1
	if(mode){
1800c696:	e9010007 	bez      	r1, 0x1800c6a4	// 1800c6a4 <irq_vpp_enable+0x14>
		hw->CON |= BIT(irq+20);
1800c69a:	9020      	ld.w      	r1, (r0, 0x0)
1800c69c:	70c8      	lsl      	r3, r2
1800c69e:	6cc4      	or      	r3, r1
		hw->CON &= ~BIT(irq+20);
1800c6a0:	b060      	st.w      	r3, (r0, 0x0)
}
1800c6a2:	783c      	jmp      	r15
		hw->CON &= ~BIT(irq+20);
1800c6a4:	9020      	ld.w      	r1, (r0, 0x0)
1800c6a6:	70c8      	lsl      	r3, r2
1800c6a8:	c4612043 	andn      	r3, r1, r3
1800c6ac:	07fa      	br      	0x1800c6a0	// 1800c6a0 <irq_vpp_enable+0x10>
	...

1800c6b0 <vppirq_register>:
int32 vppirq_register(struct vpp_device *p_vpp,uint32 irq, vpp_irq_hdl isr, uint32 dev_id){
1800c6b0:	14d5      	push      	r4-r8, r15
1800c6b2:	6d07      	mov      	r4, r1
1800c6b4:	6d8b      	mov      	r6, r2
	struct hgvpp_hw *hw  = (struct hgvpp_hw *)vpp_hw->hw;
1800c6b6:	90e3      	ld.w      	r7, (r0, 0xc)
int32 vppirq_register(struct vpp_device *p_vpp,uint32 irq, vpp_irq_hdl isr, uint32 dev_id){
1800c6b8:	6d43      	mov      	r5, r0
	request_irq(vpp_hw->irq_num, VPP_IRQHandler_action, p_vpp);
1800c6ba:	6c83      	mov      	r2, r0
1800c6bc:	102f      	lrw      	r1, 0x1800c204	// 1800c6f8 <vppirq_register+0x48>
int32 vppirq_register(struct vpp_device *p_vpp,uint32 irq, vpp_irq_hdl isr, uint32 dev_id){
1800c6be:	6e0f      	mov      	r8, r3
	request_irq(vpp_hw->irq_num, VPP_IRQHandler_action, p_vpp);
1800c6c0:	9006      	ld.w      	r0, (r0, 0x18)
1800c6c2:	e3ffb80d 	bsr      	0x180036dc	// 180036dc <request_irq>
	irq_vpp_enable(p_vpp, 1, irq);
1800c6c6:	7490      	zextb      	r2, r4
1800c6c8:	6c17      	mov      	r0, r5
1800c6ca:	3101      	movi      	r1, 1
1800c6cc:	e3ffffe2 	bsr      	0x1800c690	// 1800c690 <irq_vpp_enable>
	vppirq_vector_table[irq] = isr;
1800c6d0:	106b      	lrw      	r3, 0x200021d0	// 1800c6fc <vppirq_register+0x4c>
	vppirq_dev_table[irq] = dev_id;
1800c6d2:	104c      	lrw      	r2, 0x200021b0	// 1800c700 <vppirq_register+0x50>
	os_printf("vppirq_register:%d %x  %x\r\n",irq,(uint32)vppirq_vector_table[irq],(uint32)isr);
1800c6d4:	6c53      	mov      	r1, r4
	vppirq_vector_table[irq] = isr;
1800c6d6:	d4830886 	str.w      	r6, (r3, r4 << 2)
	vppirq_dev_table[irq] = dev_id;
1800c6da:	d4820888 	str.w      	r8, (r2, r4 << 2)
	hw->STA |= BIT(irq);
1800c6de:	3301      	movi      	r3, 1
1800c6e0:	9744      	ld.w      	r2, (r7, 0x10)
1800c6e2:	70d0      	lsl      	r3, r4
1800c6e4:	6cc8      	or      	r3, r2
1800c6e6:	b764      	st.w      	r3, (r7, 0x10)
	os_printf("vppirq_register:%d %x  %x\r\n",irq,(uint32)vppirq_vector_table[irq],(uint32)isr);
1800c6e8:	6c9b      	mov      	r2, r6
1800c6ea:	6cdb      	mov      	r3, r6
1800c6ec:	1006      	lrw      	r0, 0x180175af	// 1800c704 <vppirq_register+0x54>
1800c6ee:	e00001eb 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
}
1800c6f2:	3000      	movi      	r0, 0
1800c6f4:	1495      	pop      	r4-r8, r15
1800c6f6:	0000      	.short	0x0000
1800c6f8:	1800c204 	.long	0x1800c204
1800c6fc:	200021d0 	.long	0x200021d0
1800c700:	200021b0 	.long	0x200021b0
1800c704:	180175af 	.long	0x180175af

1800c708 <vppirq_unregister>:
int32 vppirq_unregister(struct vpp_device *p_vpp,uint32 irq){
1800c708:	14d2      	push      	r4-r5, r15
1800c70a:	6d07      	mov      	r4, r1
	irq_vpp_enable(p_vpp, 0, irq);
1800c70c:	7484      	zextb      	r2, r1
1800c70e:	3100      	movi      	r1, 0
	struct hgvpp_hw *hw  = (struct hgvpp_hw *)vpp_hw->hw;
1800c710:	90a3      	ld.w      	r5, (r0, 0xc)
	irq_vpp_enable(p_vpp, 0, irq);
1800c712:	e3ffffbf 	bsr      	0x1800c690	// 1800c690 <irq_vpp_enable>
	vppirq_vector_table[irq] = NULL;
1800c716:	3000      	movi      	r0, 0
1800c718:	1066      	lrw      	r3, 0x200021d0	// 1800c730 <vppirq_unregister+0x28>
	hw->STA |= BIT(irq);
1800c71a:	3101      	movi      	r1, 1
	vppirq_vector_table[irq] = NULL;
1800c71c:	d4830880 	str.w      	r0, (r3, r4 << 2)
	hw->STA |= BIT(irq);
1800c720:	7050      	lsl      	r1, r4
	vppirq_dev_table[irq] = 0;
1800c722:	1065      	lrw      	r3, 0x200021b0	// 1800c734 <vppirq_unregister+0x2c>
1800c724:	d4830880 	str.w      	r0, (r3, r4 << 2)
	hw->STA |= BIT(irq);
1800c728:	9564      	ld.w      	r3, (r5, 0x10)
1800c72a:	6c4c      	or      	r1, r3
1800c72c:	b524      	st.w      	r1, (r5, 0x10)
}
1800c72e:	1492      	pop      	r4-r5, r15
1800c730:	200021d0 	.long	0x200021d0
1800c734:	200021b0 	.long	0x200021b0

1800c738 <hgvpp_attach>:
    .release_irq = vppirq_unregister,
};



int32 hgvpp_attach(uint32 dev_id, struct hgvpp *vpp){
1800c738:	14d1      	push      	r4, r15
    vpp->opened          = 0;
1800c73a:	815c      	ld.b      	r2, (r1, 0x1c)
1800c73c:	3400      	movi      	r4, 0
    vpp->use_dma         = 0;
1800c73e:	e44220fe 	andi      	r2, r2, 254
1800c742:	c4445c01 	ins      	r2, r4, 1, 1
    IRQn &= 0x7FUL;
1800c746:	9166      	ld.w      	r3, (r1, 0x18)
1800c748:	a15c      	st.b      	r2, (r1, 0x1c)
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1800c74a:	ea0c0001 	movi      	r12, 1
    vpp->irq_hdl                   = NULL;
    //memset(dvp->irq_hdl,0,sizeof(dvp->irq_hdl));
    vpp->irq_data                  = 0;
	//memset(dvp->irq_data,0,sizeof(dvp->irq_data));
	vpp->dev.dev.ops = (const struct devobj_ops *)&dev_ops;
1800c74e:	104a      	lrw      	r2, 0x18017548	// 1800c774 <hgvpp_attach+0x3c>
1800c750:	b142      	st.w      	r2, (r1, 0x8)
1800c752:	c4a354c2 	zext      	r2, r3, 6, 5
1800c756:	e463201f 	andi      	r3, r3, 31
1800c75a:	c46c4023 	lsl      	r3, r12, r3
1800c75e:	221f      	addi      	r2, 32
1800c760:	ea8c0006 	lrw      	r12, 0xe000e100	// 1800c778 <hgvpp_attach+0x40>
    vpp->irq_hdl                   = NULL;
1800c764:	b184      	st.w      	r4, (r1, 0x10)
    vpp->irq_data                  = 0;
1800c766:	b185      	st.w      	r4, (r1, 0x14)
1800c768:	d44c0883 	str.w      	r3, (r12, r2 << 2)

    irq_disable(vpp->irq_num);
    dev_register(dev_id, (struct dev_obj *)vpp);	
1800c76c:	e3ffb49c 	bsr      	0x180030a4	// 180030a4 <dev_register>
	return 0;
}
1800c770:	6c13      	mov      	r0, r4
1800c772:	1491      	pop      	r4, r15
1800c774:	18017548 	.long	0x18017548
1800c778:	e000e100 	.long	0xe000e100

1800c77c <hgof_init>:
}

static int32 hgof_init(struct of_device *p_of){
    int32  ret_val = RET_OK;
	struct hgof *of_hw = (struct hgof*)p_of;	
	struct hgof_hw *hw  = (struct hgof_hw *)of_hw->hw;
1800c77c:	9063      	ld.w      	r3, (r0, 0xc)
	hw->CTL   = 0;
1800c77e:	3000      	movi      	r0, 0
1800c780:	b300      	st.w      	r0, (r3, 0x0)
	hw->ADDR0 = 0;
1800c782:	b301      	st.w      	r0, (r3, 0x4)
	hw->ADDR1 = 0;
1800c784:	b302      	st.w      	r0, (r3, 0x8)
	return ret_val;
}	
1800c786:	783c      	jmp      	r15

1800c788 <hgof_ioctl>:
static int32 hgof_ioctl(struct of_device *p_of, enum of_ioctl_cmd ioctl_cmd, uint32 param1, uint32 param2){
1800c788:	14d0      	push      	r15
	switch(ioctl_cmd){
1800c78a:	3905      	cmphsi      	r1, 6
static int32 hgof_ioctl(struct of_device *p_of, enum of_ioctl_cmd ioctl_cmd, uint32 param1, uint32 param2){
1800c78c:	6f07      	mov      	r12, r1
	struct hgof_hw *hw  = (struct hgof_hw *)of_hw->hw;
1800c78e:	9003      	ld.w      	r0, (r0, 0xc)
	switch(ioctl_cmd){
1800c790:	0830      	bt      	0x1800c7f0	// 1800c7f0 <hgof_ioctl+0x68>
1800c792:	1023      	lrw      	r1, 0x180175cc	// 1800c79c <hgof_ioctl+0x14>
1800c794:	d1810881 	ldr.w      	r1, (r1, r12 << 2)
1800c798:	7804      	jmp      	r1
1800c79a:	0000      	.short	0x0000
1800c79c:	180175cc 	.long	0x180175cc
			hw->CTL &= ~(3<<19);
1800c7a0:	9060      	ld.w      	r3, (r0, 0x0)
1800c7a2:	3b93      	bclri      	r3, 19
1800c7a4:	3b94      	bclri      	r3, 20
1800c7a6:	b060      	st.w      	r3, (r0, 0x0)
			hw->CTL |= (param1<<19);
1800c7a8:	9060      	ld.w      	r3, (r0, 0x0)
1800c7aa:	4253      	lsli      	r2, r2, 19
			hw->CTL |= (param1<<17);
1800c7ac:	6c8c      	or      	r2, r3
1800c7ae:	b040      	st.w      	r2, (r0, 0x0)
    int32  ret_val = RET_OK;
1800c7b0:	3000      	movi      	r0, 0
}
1800c7b2:	1490      	pop      	r15
			hw->CTL &= ~(3<<17);
1800c7b4:	9060      	ld.w      	r3, (r0, 0x0)
1800c7b6:	3b91      	bclri      	r3, 17
1800c7b8:	3b92      	bclri      	r3, 18
1800c7ba:	b060      	st.w      	r3, (r0, 0x0)
			hw->CTL |= (param1<<17);
1800c7bc:	9060      	ld.w      	r3, (r0, 0x0)
1800c7be:	4251      	lsli      	r2, r2, 17
1800c7c0:	07f6      	br      	0x1800c7ac	// 1800c7ac <hgof_ioctl+0x24>
			hw->CTL &= ~(0x1f<<12);
1800c7c2:	9060      	ld.w      	r3, (r0, 0x0)
1800c7c4:	c7405021 	bmaski      	r1, 27
1800c7c8:	c6214901 	rotli      	r1, r1, 17
1800c7cc:	68c4      	and      	r3, r1
1800c7ce:	b060      	st.w      	r3, (r0, 0x0)
			hw->CTL |= (param1<<12);
1800c7d0:	9060      	ld.w      	r3, (r0, 0x0)
1800c7d2:	424c      	lsli      	r2, r2, 12
1800c7d4:	07ec      	br      	0x1800c7ac	// 1800c7ac <hgof_ioctl+0x24>
			hw->CTL &= ~(0xfff<<0);
1800c7d6:	9060      	ld.w      	r3, (r0, 0x0)
1800c7d8:	ea010fff 	movi      	r1, 4095
1800c7dc:	6c46      	nor      	r1, r1
1800c7de:	68c4      	and      	r3, r1
1800c7e0:	b060      	st.w      	r3, (r0, 0x0)
			hw->CTL |= (param1<<0);
1800c7e2:	9060      	ld.w      	r3, (r0, 0x0)
1800c7e4:	07e4      	br      	0x1800c7ac	// 1800c7ac <hgof_ioctl+0x24>
			hw->ADDR0 = param1;
1800c7e6:	b041      	st.w      	r2, (r0, 0x4)
			hw->ADDR1 = param2;
1800c7e8:	b062      	st.w      	r3, (r0, 0x8)
1800c7ea:	07e3      	br      	0x1800c7b0	// 1800c7b0 <hgof_ioctl+0x28>
			ret_val = hw->ACC;
1800c7ec:	9003      	ld.w      	r0, (r0, 0xc)
		break;
1800c7ee:	07e2      	br      	0x1800c7b2	// 1800c7b2 <hgof_ioctl+0x2a>
			os_printf("NO OF IOCTL:%d\r\n",ioctl_cmd);
1800c7f0:	1004      	lrw      	r0, 0x180175ec	// 1800c800 <hgof_ioctl+0x78>
1800c7f2:	e0000169 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
            ret_val = -ENOTSUPP;
1800c7f6:	ea00020b 	movi      	r0, 523
1800c7fa:	6c02      	nor      	r0, r0
	return ret_val;
1800c7fc:	07db      	br      	0x1800c7b2	// 1800c7b2 <hgof_ioctl+0x2a>
1800c7fe:	0000      	.short	0x0000
1800c800:	180175ec 	.long	0x180175ec

1800c804 <hgof_attach>:
	.init                  = hgof_init,
	.ioctl				   = hgof_ioctl,
};

void hgof_attach(uint32 dev_id, struct hgof *of)
{
1800c804:	14d0      	push      	r15
    IRQn &= 0x7FUL;
1800c806:	9165      	ld.w      	r3, (r1, 0x14)
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1800c808:	ea0c0001 	movi      	r12, 1
	of->dev.dev.ops = (const struct devobj_ops *)&dev_ops;
1800c80c:	1048      	lrw      	r2, 0x180175e4	// 1800c82c <hgof_attach+0x28>
1800c80e:	b142      	st.w      	r2, (r1, 0x8)
1800c810:	c4a354c2 	zext      	r2, r3, 6, 5
1800c814:	e463201f 	andi      	r3, r3, 31
1800c818:	c46c4023 	lsl      	r3, r12, r3
1800c81c:	221f      	addi      	r2, 32
1800c81e:	ea8c0005 	lrw      	r12, 0xe000e100	// 1800c830 <hgof_attach+0x2c>
1800c822:	d44c0883 	str.w      	r3, (r12, r2 << 2)
    irq_disable(of->irq_num);
    dev_register(dev_id, (struct dev_obj *)of);
1800c826:	e3ffb43f 	bsr      	0x180030a4	// 180030a4 <dev_register>
}
1800c82a:	1490      	pop      	r15
1800c82c:	180175e4 	.long	0x180175e4
1800c830:	e000e100 	.long	0xe000e100

1800c834 <csi_dcache_clean_invalid_range.constprop.0>:
    uint32_t op_addr = (uint32_t)addr & CACHE_CIR_INV_ADDR_Msk;
1800c834:	3300      	movi      	r3, 0
1800c836:	2b0f      	subi      	r3, 16
1800c838:	68c0      	and      	r3, r0
        CACHE->CIR = op_addr;
1800c83a:	104b      	lrw      	r2, 0xe000f000	// 1800c864 <csi_dcache_clean_invalid_range.constprop.0+0x30>
    op_addr |= _VAL2FLD(CACHE_CIR_CLR_ONE, 1) | _VAL2FLD(CACHE_CIR_INV_ONE, 1);
1800c83c:	ec63000a 	ori      	r3, r3, 10
        CACHE->CIR = op_addr;
1800c840:	b261      	st.w      	r3, (r2, 0x4)
    int32_t op_size = dsize + (int32_t)addr % 16;
1800c842:	c7c05022 	bmaski      	r2, 31
1800c846:	220f      	addi      	r2, 16
1800c848:	6808      	and      	r0, r2
        op_addr += linesize;
1800c84a:	230f      	addi      	r3, 16
    int32_t op_size = dsize + (int32_t)addr % 16;
1800c84c:	e9a00007 	bhsz      	r0, 0x1800c85a	// 1800c85a <csi_dcache_clean_invalid_range.constprop.0+0x26>
1800c850:	3200      	movi      	r2, 0
1800c852:	2800      	subi      	r0, 1
1800c854:	2a0f      	subi      	r2, 16
1800c856:	6c08      	or      	r0, r2
1800c858:	2000      	addi      	r0, 1
    while (op_size > 0) {
1800c85a:	e9600004 	blsz      	r0, 0x1800c862	// 1800c862 <csi_dcache_clean_invalid_range.constprop.0+0x2e>
        CACHE->CIR = op_addr;
1800c85e:	1042      	lrw      	r2, 0xe000f000	// 1800c864 <csi_dcache_clean_invalid_range.constprop.0+0x30>
1800c860:	b261      	st.w      	r3, (r2, 0x4)
}
1800c862:	783c      	jmp      	r15
1800c864:	e000f000 	.long	0xe000f000

1800c868 <sys_dcache_clean_invalid_range>:
{
1800c868:	14d2      	push      	r4-r5, r15
    if (((uint32)addr >= PSRAM_BASE) && 
1800c86a:	33c8      	movi      	r3, 200
1800c86c:	4378      	lsli      	r3, r3, 24
1800c86e:	584c      	addu      	r2, r0, r3
1800c870:	c6e05023 	bmaski      	r3, 24
1800c874:	648c      	cmphs      	r3, r2
{
1800c876:	6d03      	mov      	r4, r0
1800c878:	6d47      	mov      	r5, r1
    if (((uint32)addr >= PSRAM_BASE) && 
1800c87a:	0c33      	bf      	0x1800c8e0	// 1800c8e0 <sys_dcache_clean_invalid_range+0x78>
    return (CACHE->CER & CACHE_CER_EN_Msk);  
1800c87c:	1168      	lrw      	r3, 0xe000f000	// 1800c91c <sys_dcache_clean_invalid_range+0xb4>
1800c87e:	9360      	ld.w      	r3, (r3, 0x0)
1800c880:	e4632001 	andi      	r3, r3, 1
        ((uint32)addr < PSRAM_END_ADDR) && 
1800c884:	e903002e 	bez      	r3, 0x1800c8e0	// 1800c8e0 <sys_dcache_clean_invalid_range+0x78>
        if ((uint32_t)addr & 0xF) {
1800c888:	e460200f 	andi      	r3, r0, 15
1800c88c:	e9030004 	bez      	r3, 0x1800c894	// 1800c894 <sys_dcache_clean_invalid_range+0x2c>
            csi_dcache_clean_invalid_range(addr, 16);
1800c890:	e3ffffd2 	bsr      	0x1800c834	// 1800c834 <csi_dcache_clean_invalid_range.constprop.0>
        if (((uint32_t)addr+dsize) & 0xF) {
1800c894:	5c74      	addu      	r3, r4, r5
1800c896:	e463200f 	andi      	r3, r3, 15
1800c89a:	e9030006 	bez      	r3, 0x1800c8a6	// 1800c8a6 <sys_dcache_clean_invalid_range+0x3e>
            csi_dcache_clean_invalid_range((addr+dsize), 16);
1800c89e:	4502      	lsli      	r0, r5, 2
1800c8a0:	6010      	addu      	r0, r4
1800c8a2:	e3ffffc9 	bsr      	0x1800c834	// 1800c834 <csi_dcache_clean_invalid_range.constprop.0>
    int32_t op_size = dsize + (int32_t)addr % 16;
1800c8a6:	c7c05023 	bmaski      	r3, 31
1800c8aa:	230f      	addi      	r3, 16
1800c8ac:	68d0      	and      	r3, r4
1800c8ae:	e9a30007 	bhsz      	r3, 0x1800c8bc	// 1800c8bc <sys_dcache_clean_invalid_range+0x54>
1800c8b2:	3200      	movi      	r2, 0
1800c8b4:	2b00      	subi      	r3, 1
1800c8b6:	2a0f      	subi      	r2, 16
1800c8b8:	6cc8      	or      	r3, r2
1800c8ba:	2300      	addi      	r3, 1
    uint32_t op_addr = (uint32_t)addr & CACHE_CIR_INV_ADDR_Msk;
1800c8bc:	3200      	movi      	r2, 0
1800c8be:	2a0f      	subi      	r2, 16
1800c8c0:	c4442020 	and      	r0, r4, r2
    int32_t op_size = dsize + (int32_t)addr % 16;
1800c8c4:	60d4      	addu      	r3, r5
    op_addr |= _VAL2FLD(CACHE_CIR_INV_ONE, 1);
1800c8c6:	ec000002 	ori      	r0, r0, 2
        CACHE->CIR = op_addr;
1800c8ca:	1055      	lrw      	r2, 0xe000f000	// 1800c91c <sys_dcache_clean_invalid_range+0xb4>
    while (op_size >= 128) {
1800c8cc:	eb23007f 	cmplti      	r3, 128
1800c8d0:	0c09      	bf      	0x1800c8e2	// 1800c8e2 <sys_dcache_clean_invalid_range+0x7a>
1800c8d2:	600c      	addu      	r0, r3
        CACHE->CIR = op_addr;
1800c8d4:	1032      	lrw      	r1, 0xe000f000	// 1800c91c <sys_dcache_clean_invalid_range+0xb4>
1800c8d6:	584d      	subu      	r2, r0, r3
    while (op_size > 0) {
1800c8d8:	e943001e 	bhz      	r3, 0x1800c914	// 1800c914 <sys_dcache_clean_invalid_range+0xac>
    __ASM volatile("sync"::: "memory");
1800c8dc:	c0000420 	sync
}
1800c8e0:	1492      	pop      	r4-r5, r15
        op_addr += linesize;
1800c8e2:	e420000f 	addi      	r1, r0, 16
        CACHE->CIR = op_addr;
1800c8e6:	b201      	st.w      	r0, (r2, 0x4)
        CACHE->CIR = op_addr;
1800c8e8:	b221      	st.w      	r1, (r2, 0x4)
        op_addr += linesize;
1800c8ea:	e420001f 	addi      	r1, r0, 32
        CACHE->CIR = op_addr;
1800c8ee:	b221      	st.w      	r1, (r2, 0x4)
        op_addr += linesize;
1800c8f0:	e420002f 	addi      	r1, r0, 48
        CACHE->CIR = op_addr;
1800c8f4:	b221      	st.w      	r1, (r2, 0x4)
        op_addr += linesize;
1800c8f6:	e420003f 	addi      	r1, r0, 64
        CACHE->CIR = op_addr;
1800c8fa:	b221      	st.w      	r1, (r2, 0x4)
        op_addr += linesize;
1800c8fc:	e420004f 	addi      	r1, r0, 80
        CACHE->CIR = op_addr;
1800c900:	b221      	st.w      	r1, (r2, 0x4)
        op_addr += linesize;
1800c902:	e420005f 	addi      	r1, r0, 96
        CACHE->CIR = op_addr;
1800c906:	b221      	st.w      	r1, (r2, 0x4)
        op_addr += linesize;
1800c908:	e420006f 	addi      	r1, r0, 112
        CACHE->CIR = op_addr;
1800c90c:	b221      	st.w      	r1, (r2, 0x4)
        op_addr += linesize;
1800c90e:	207f      	addi      	r0, 128
        op_size -= 128;
1800c910:	2b7f      	subi      	r3, 128
1800c912:	07dd      	br      	0x1800c8cc	// 1800c8cc <sys_dcache_clean_invalid_range+0x64>
        CACHE->CIR = op_addr;
1800c914:	b141      	st.w      	r2, (r1, 0x4)
        op_size -= linesize;
1800c916:	2b0f      	subi      	r3, 16
1800c918:	07df      	br      	0x1800c8d6	// 1800c8d6 <sys_dcache_clean_invalid_range+0x6e>
1800c91a:	0000      	.short	0x0000
1800c91c:	e000f000 	.long	0xe000f000

1800c920 <_os_malloc>:

__bobj struct sys_heap sram_heap;


void *_os_malloc(int size)
{
1800c920:	14d0      	push      	r15
    return sysheap_alloc(&sram_heap, size, RETURN_ADDR(), 0);
1800c922:	6c43      	mov      	r1, r0
1800c924:	3300      	movi      	r3, 0
1800c926:	6cbf      	mov      	r2, r15
1800c928:	1002      	lrw      	r0, 0x200021f0	// 1800c930 <_os_malloc+0x10>
1800c92a:	e000390f 	bsr      	0x18013b48	// 18013b48 <sysheap_alloc>
}
1800c92e:	1490      	pop      	r15
1800c930:	200021f0 	.long	0x200021f0

1800c934 <_os_zalloc>:
        sysheap_free(&sram_heap, ptr);
    }
}

void *_os_zalloc(int size)
{
1800c934:	14d2      	push      	r4-r5, r15
    void *ptr = sysheap_alloc(&sram_heap, size, RETURN_ADDR(), 0);
1800c936:	6c43      	mov      	r1, r0
{
1800c938:	6d43      	mov      	r5, r0
    void *ptr = sysheap_alloc(&sram_heap, size, RETURN_ADDR(), 0);
1800c93a:	3300      	movi      	r3, 0
1800c93c:	6cbf      	mov      	r2, r15
1800c93e:	1007      	lrw      	r0, 0x200021f0	// 1800c958 <_os_zalloc+0x24>
1800c940:	e0003904 	bsr      	0x18013b48	// 18013b48 <sysheap_alloc>
1800c944:	6d03      	mov      	r4, r0
    if (ptr) {
1800c946:	e9000006 	bez      	r0, 0x1800c952	// 1800c952 <_os_zalloc+0x1e>
        os_memset(ptr, 0, size);
1800c94a:	6c97      	mov      	r2, r5
1800c94c:	3100      	movi      	r1, 0
1800c94e:	e0004a8d 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
    }
    return ptr;
}
1800c952:	6c13      	mov      	r0, r4
1800c954:	1492      	pop      	r4-r5, r15
1800c956:	0000      	.short	0x0000
1800c958:	200021f0 	.long	0x200021f0

1800c95c <_os_free_t>:
{
    return sysheap_alloc(&sram_heap, size, func, line);
}

void _os_free_t(void *ptr)
{
1800c95c:	14d0      	push      	r15
1800c95e:	6c43      	mov      	r1, r0
    if (ptr) {
1800c960:	e9000005 	bez      	r0, 0x1800c96a	// 1800c96a <_os_free_t+0xe>
        sysheap_free(&sram_heap, ptr);
1800c964:	1002      	lrw      	r0, 0x200021f0	// 1800c96c <_os_free_t+0x10>
1800c966:	e0003913 	bsr      	0x18013b8c	// 18013b8c <sysheap_free>
    }
}
1800c96a:	1490      	pop      	r15
1800c96c:	200021f0 	.long	0x200021f0

1800c970 <_os_free>:
1800c970:	14d0      	push      	r15
1800c972:	e3fffff5 	bsr      	0x1800c95c	// 1800c95c <_os_free_t>
1800c976:	1490      	pop      	r15

1800c978 <_os_malloc_psram>:
//////////////////////////////////////////////////////////////////////////
#ifdef PSRAM_HEAP
__bobj struct sys_heap psram_heap;

void *_os_malloc_psram(int size)
{
1800c978:	14d2      	push      	r4-r5, r15
    void *ret = sysheap_alloc(&psram_heap, size, RETURN_ADDR(), 0);
1800c97a:	6c43      	mov      	r1, r0
{
1800c97c:	6d43      	mov      	r5, r0
    void *ret = sysheap_alloc(&psram_heap, size, RETURN_ADDR(), 0);
1800c97e:	3300      	movi      	r3, 0
1800c980:	6cbf      	mov      	r2, r15
1800c982:	1006      	lrw      	r0, 0x20002220	// 1800c998 <_os_malloc_psram+0x20>
1800c984:	e00038e2 	bsr      	0x18013b48	// 18013b48 <sysheap_alloc>
1800c988:	6d03      	mov      	r4, r0
    if(ret)
1800c98a:	e9000005 	bez      	r0, 0x1800c994	// 1800c994 <_os_malloc_psram+0x1c>
    {
        sys_dcache_clean_invalid_range(ret,size);
1800c98e:	6c57      	mov      	r1, r5
1800c990:	e3ffff6c 	bsr      	0x1800c868	// 1800c868 <sys_dcache_clean_invalid_range>
    }
    return ret;
}
1800c994:	6c13      	mov      	r0, r4
1800c996:	1492      	pop      	r4-r5, r15
1800c998:	20002220 	.long	0x20002220

1800c99c <hw_memcpy>:
    return 0;
}

#ifdef M2M_DMA
void hw_memcpy(void *dest, const void *src, uint32 size)
{
1800c99c:	14d0      	push      	r15
    if (dest && src) {
1800c99e:	e9000012 	bez      	r0, 0x1800c9c2	// 1800c9c2 <hw_memcpy+0x26>
1800c9a2:	e9010010 	bez      	r1, 0x1800c9c2	// 1800c9c2 <hw_memcpy+0x26>
        if (m2mdma && size > 45) {
1800c9a6:	106a      	lrw      	r3, 0x20002258	// 1800c9cc <hw_memcpy+0x30>
1800c9a8:	d9832000 	ld.w      	r12, (r3, 0x0)
1800c9ac:	e90c000c 	bez      	r12, 0x1800c9c4	// 1800c9c4 <hw_memcpy+0x28>
1800c9b0:	eb02002d 	cmphsi      	r2, 46
1800c9b4:	0c08      	bf      	0x1800c9c4	// 1800c9c4 <hw_memcpy+0x28>
                    os_printf("check addr fail: %x, size:%d \r\n", dest, size);
                }
                ASSERT(ret == 1);
            }
#endif
            dma_memcpy(m2mdma, dest, src, size);
1800c9b6:	6ccb      	mov      	r3, r2
1800c9b8:	6c87      	mov      	r2, r1
1800c9ba:	6c43      	mov      	r1, r0
1800c9bc:	6c33      	mov      	r0, r12
1800c9be:	e3ffb609 	bsr      	0x180035d0	// 180035d0 <dma_memcpy>
        } else {
            os_memcpy(dest, src, size);
        }
    }
}
1800c9c2:	1490      	pop      	r15
            os_memcpy(dest, src, size);
1800c9c4:	e0004a4c 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
}
1800c9c8:	07fd      	br      	0x1800c9c2	// 1800c9c2 <hw_memcpy+0x26>
1800c9ca:	0000      	.short	0x0000
1800c9cc:	20002258 	.long	0x20002258

1800c9d0 <os_random_bytes>:
    return CORET->VAL;
1800c9d0:	1070      	lrw      	r3, 0xe000e010	// 1800ca10 <os_random_bytes+0x40>
    int32 i = 0;
    int32 seed;
#ifdef TXW4002ACK803
    seed = csi_coret_get_value() ^ (csi_coret_get_value() << 8) ^ (csi_coret_get_value() >> 8);
#else
    seed = csi_coret_get_value() ^ sysctrl_get_trng() ^ (sysctrl_get_trng() >> 8);
1800c9d2:	ea224002 	movih      	r2, 16386
1800c9d6:	d9832002 	ld.w      	r12, (r3, 0x8)
1800c9da:	d8622064 	ld.w      	r3, (r2, 0x190)
1800c9de:	d8422064 	ld.w      	r2, (r2, 0x190)
1800c9e2:	4a48      	lsri      	r2, r2, 8
1800c9e4:	6cf1      	xor      	r3, r12
1800c9e6:	6cc9      	xor      	r3, r2
#endif
    for (i = 0; i < len; i++) {
        seed = seed * 214013L + 2531011L;
1800c9e8:	ea8d000b 	lrw      	r13, 0x343fd	// 1800ca14 <os_random_bytes+0x44>
    for (i = 0; i < len; i++) {
1800c9ec:	6c83      	mov      	r2, r0
1800c9ee:	c402008c 	subu      	r12, r2, r0
1800c9f2:	6471      	cmplt      	r12, r1
1800c9f4:	0803      	bt      	0x1800c9fa	// 1800c9fa <os_random_bytes+0x2a>
        data[i] = (uint8)(((seed >> 16) & 0x7fff) & 0xff);
    }
    return 0;
}
1800c9f6:	3000      	movi      	r0, 0
1800c9f8:	783c      	jmp      	r15
        seed = seed * 214013L + 2531011L;
1800c9fa:	ea8c0008 	lrw      	r12, 0x269ec3	// 1800ca18 <os_random_bytes+0x48>
1800c9fe:	7cf4      	mult      	r3, r13
1800ca00:	60f0      	addu      	r3, r12
        data[i] = (uint8)(((seed >> 16) & 0x7fff) & 0xff);
1800ca02:	c603488c 	asri      	r12, r3, 16
1800ca06:	dd820000 	st.b      	r12, (r2, 0x0)
1800ca0a:	2200      	addi      	r2, 1
1800ca0c:	07f1      	br      	0x1800c9ee	// 1800c9ee <os_random_bytes+0x1e>
1800ca0e:	0000      	.short	0x0000
1800ca10:	e000e010 	.long	0xe000e010
1800ca14:	000343fd 	.long	0x000343fd
1800ca18:	00269ec3 	.long	0x00269ec3

1800ca1c <hw_crc>:

uint32 hw_crc(enum CRC_DEV_TYPE type, uint8 *data, uint32 len)
{
1800ca1c:	14d4      	push      	r4-r7, r15
1800ca1e:	1424      	subi      	r14, r14, 16
1800ca20:	6dc3      	mov      	r7, r0
    uint32 crc = 0xffff;
1800ca22:	ea03ffff 	movi      	r3, 65535
    struct crc_dev_req req;
    struct crc_dev *crcdev = (struct crc_dev *)dev_get(HG_CRC_DEVID);
1800ca26:	303b      	movi      	r0, 59
{
1800ca28:	6d07      	mov      	r4, r1
1800ca2a:	6d8b      	mov      	r6, r2
    uint32 crc = 0xffff;
1800ca2c:	b860      	st.w      	r3, (r14, 0x0)
    struct crc_dev *crcdev = (struct crc_dev *)dev_get(HG_CRC_DEVID);
1800ca2e:	e3ffb321 	bsr      	0x18003070	// 18003070 <dev_get>
1800ca32:	6d43      	mov      	r5, r0
    if (crcdev) {
1800ca34:	e900001c 	bez      	r0, 0x1800ca6c	// 1800ca6c <hw_crc+0x50>
        req.type = type;
        req.data = data;
1800ca38:	b882      	st.w      	r4, (r14, 0x8)
        req.len  = len;
        ASSERT((uint32)data % 4 == 0); // crc模块数据地址必须4字节对齐检查
1800ca3a:	e4842003 	andi      	r4, r4, 3
        req.type = type;
1800ca3e:	dcee1002 	st.h      	r7, (r14, 0x4)
        req.len  = len;
1800ca42:	b8c3      	st.w      	r6, (r14, 0xc)
        ASSERT((uint32)data % 4 == 0); // crc模块数据地址必须4字节对齐检查
1800ca44:	e9040007 	bez      	r4, 0x1800ca52	// 1800ca52 <hw_crc+0x36>
1800ca48:	104d      	lrw      	r2, 0x18017605	// 1800ca7c <hw_crc+0x60>
1800ca4a:	31ce      	movi      	r1, 206
1800ca4c:	100d      	lrw      	r0, 0x180175fe	// 1800ca80 <hw_crc+0x64>
1800ca4e:	e3ffb2e3 	bsr      	0x18003014	// 18003014 <assert_internal>
  * @note
  */
static inline int32 crc_dev_calc(struct crc_dev *dev, struct crc_dev_req *req, uint32 *crc_val, uint32 flags)
{
    const struct crc_hal_ops *ops = (const struct crc_hal_ops *)dev->dev.ops;
    return (dev && ops->calc) ? ops->calc(dev, req, crc_val, flags) : RET_ERR;
1800ca52:	9562      	ld.w      	r3, (r5, 0x8)
1800ca54:	d9832001 	ld.w      	r12, (r3, 0x4)
1800ca58:	e90c0007 	bez      	r12, 0x1800ca66	// 1800ca66 <hw_crc+0x4a>
1800ca5c:	3300      	movi      	r3, 0
1800ca5e:	6cbb      	mov      	r2, r14
1800ca60:	1901      	addi      	r1, r14, 4
1800ca62:	6c17      	mov      	r0, r5
1800ca64:	7bf1      	jsr      	r12
    } else {
        os_printf("no crc dev\r\n");
        crc = (uint32)os_jiffies();
    }
    return crc;
}
1800ca66:	9800      	ld.w      	r0, (r14, 0x0)
1800ca68:	1404      	addi      	r14, r14, 16
1800ca6a:	1494      	pop      	r4-r7, r15
        os_printf("no crc dev\r\n");
1800ca6c:	1006      	lrw      	r0, 0x1801761b	// 1800ca84 <hw_crc+0x68>
1800ca6e:	e000002b 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
        crc = (uint32)os_jiffies();
1800ca72:	e0003e59 	bsr      	0x18014724	// 18014724 <os_jiffies>
1800ca76:	b800      	st.w      	r0, (r14, 0x0)
1800ca78:	07f7      	br      	0x1800ca66	// 1800ca66 <hw_crc+0x4a>
1800ca7a:	0000      	.short	0x0000
1800ca7c:	18017605 	.long	0x18017605
1800ca80:	180175fe 	.long	0x180175fe
1800ca84:	1801761b 	.long	0x1801761b

1800ca88 <hgprintf_out>:
{
    __print_level__ = level;
}

static void hgprintf_out(char *str, int32 len)
{
1800ca88:	14d4      	push      	r4-r7, r15
1800ca8a:	6d83      	mov      	r6, r0
1800ca8c:	6d47      	mov      	r5, r1
    int32 off = 0;
    if (len == 0) len = os_strlen(str);
1800ca8e:	e9210005 	bnez      	r1, 0x1800ca98	// 1800ca98 <hgprintf_out+0x10>
1800ca92:	e3ffa969 	bsr      	0x18001d64	// 18001d64 <__strlen_fast>
1800ca96:	6d43      	mov      	r5, r0
{
1800ca98:	6d1b      	mov      	r4, r6
    while (off < len) {
        uart_putc((struct uart_device *)console_handle, str[off++]);
1800ca9a:	10e7      	lrw      	r7, 0x20002260	// 1800cab4 <hgprintf_out+0x2c>
    while (off < len) {
1800ca9c:	5c79      	subu      	r3, r4, r6
1800ca9e:	654d      	cmplt      	r3, r5
1800caa0:	0802      	bt      	0x1800caa4	// 1800caa4 <hgprintf_out+0x1c>
    }
}
1800caa2:	1494      	pop      	r4-r7, r15
        uart_putc((struct uart_device *)console_handle, str[off++]);
1800caa4:	d8244000 	ld.bs      	r1, (r4, 0x0)
1800caa8:	9700      	ld.w      	r0, (r7, 0x0)
1800caaa:	e3ffb4b7 	bsr      	0x18003418	// 18003418 <uart_putc>
1800caae:	2400      	addi      	r4, 1
1800cab0:	07f6      	br      	0x1800ca9c	// 1800ca9c <hgprintf_out+0x14>
1800cab2:	0000      	.short	0x0000
1800cab4:	20002260 	.long	0x20002260

1800cab8 <print_level>:
    __print_level__ = level;
1800cab8:	1062      	lrw      	r3, 0x2000225c	// 1800cac0 <print_level+0x8>
1800caba:	a300      	st.b      	r0, (r3, 0x0)
}
1800cabc:	783c      	jmp      	r15
1800cabe:	0000      	.short	0x0000
1800cac0:	2000225c 	.long	0x2000225c

1800cac4 <__cskyvprintfprintf>:

void hgprintf(const char *fmt, ...)
{
1800cac4:	1424      	subi      	r14, r14, 16
1800cac6:	b863      	st.w      	r3, (r14, 0xc)
1800cac8:	b842      	st.w      	r2, (r14, 0x8)
1800caca:	b821      	st.w      	r1, (r14, 0x4)
1800cacc:	b800      	st.w      	r0, (r14, 0x0)
1800cace:	14d6      	push      	r4-r9, r15
    va_list ap;
    uint8 level = 6;
    uint8 tick = 0;
    int32 len = 0;

    if (__disable_print__) {
1800cad0:	126d      	lrw      	r3, 0x2000225d	// 1800cc04 <__cskyvprintfprintf+0x140>
{
1800cad2:	98a7      	ld.w      	r5, (r14, 0x1c)
    if (__disable_print__) {
1800cad4:	d8634000 	ld.bs      	r3, (r3, 0x0)
1800cad8:	e9230079 	bnez      	r3, 0x1800cbca	// 1800cbca <__cskyvprintfprintf+0x106>
    __ASM volatile("mfcr %0, psr" : "=r"(result) : : "memory");
1800cadc:	c0006023 	mfcr      	r3, cr<0, 0>
    __ASM volatile("psrclr ie");
1800cae0:	c0807020 	psrclr      	ie
        return;
    }

    flag = disable_irq();
    _print_priv = __print_hook_priv;
1800cae4:	1249      	lrw      	r2, 0x20001fdc	// 1800cc08 <__cskyvprintfprintf+0x144>
    return !(result & 0x40);
1800cae6:	e4632040 	andi      	r3, r3, 64
1800caea:	d9022000 	ld.w      	r8, (r2, 0x0)
    _print = __print_hook;
1800caee:	1248      	lrw      	r2, 0x20001fd8	// 1800cc0c <__cskyvprintfprintf+0x148>
1800caf0:	92e0      	ld.w      	r7, (r2, 0x0)
    enable_irq(flag);
1800caf2:	e9030004 	bez      	r3, 0x1800cafa	// 1800cafa <__cskyvprintfprintf+0x36>
    __ASM volatile("psrset ie");
1800caf6:	c0807420 	psrset      	ie

    va_start(ap, fmt);
    if (fmt[0] == 2) {
1800cafa:	8560      	ld.b      	r3, (r5, 0x0)
1800cafc:	3b42      	cmpnei      	r3, 2
1800cafe:	085e      	bt      	0x1800cbba	// 1800cbba <__cskyvprintfprintf+0xf6>
        tick = 1;
        fmt++;
1800cb00:	2500      	addi      	r5, 1
        tick = 1;
1800cb02:	3401      	movi      	r4, 1
    }
    if (fmt[0] == 1) {
1800cb04:	8560      	ld.b      	r3, (r5, 0x0)
1800cb06:	3b41      	cmpnei      	r3, 1
1800cb08:	085b      	bt      	0x1800cbbe	// 1800cbbe <__cskyvprintfprintf+0xfa>
        level = fmt[1] - '0';
1800cb0a:	8541      	ld.b      	r2, (r5, 0x1)
1800cb0c:	2a2f      	subi      	r2, 48
1800cb0e:	7488      	zextb      	r2, r2
1800cb10:	3a07      	cmphsi      	r2, 8
        fmt += 2;
1800cb12:	2501      	addi      	r5, 2
1800cb14:	6ccb      	mov      	r3, r2
1800cb16:	0c02      	bf      	0x1800cb1a	// 1800cb1a <__cskyvprintfprintf+0x56>
1800cb18:	3307      	movi      	r3, 7
1800cb1a:	74cc      	zextb      	r3, r3
        if (level > 7) level = 7;
        color = (char *)__print_color__[level];
1800cb1c:	115d      	lrw      	r2, 0x1801762c	// 1800cc10 <__cskyvprintfprintf+0x14c>
1800cb1e:	d0620886 	ldr.w      	r6, (r2, r3 << 2)
    }
    if (__print_level__ && level > __print_level__) {
1800cb22:	115d      	lrw      	r2, 0x2000225c	// 1800cc14 <__cskyvprintfprintf+0x150>
1800cb24:	d8424000 	ld.bs      	r2, (r2, 0x0)
1800cb28:	e9020004 	bez      	r2, 0x1800cb30	// 1800cb30 <__cskyvprintfprintf+0x6c>
1800cb2c:	64c9      	cmplt      	r2, r3
1800cb2e:	084e      	bt      	0x1800cbca	// 1800cbca <__cskyvprintfprintf+0x106>
        return;
    }

    flag = 0;
    if (tick) {
1800cb30:	e904000b 	bez      	r4, 0x1800cb46	// 1800cb46 <__cskyvprintfprintf+0x82>
        flag = os_sprintf(_print_buff_p, "[%llu]", os_jiffies());
1800cb34:	e0003df8 	bsr      	0x18014724	// 18014724 <os_jiffies>
1800cb38:	6c83      	mov      	r2, r0
1800cb3a:	6cc7      	mov      	r3, r1
1800cb3c:	1137      	lrw      	r1, 0x18017650	// 1800cc18 <__cskyvprintfprintf+0x154>
1800cb3e:	1118      	lrw      	r0, 0x20002264	// 1800cc1c <__cskyvprintfprintf+0x158>
1800cb40:	e3ffa8ae 	bsr      	0x18001c9c	// 18001c9c <__cskyvprintfsprintf>
1800cb44:	6d03      	mov      	r4, r0
    }
    len = vsnprintf(_print_buff_p + flag, (PRINT_BUFF_SIZE - 2 - flag), fmt, ap);
1800cb46:	ea0900fe 	movi      	r9, 254
1800cb4a:	6252      	subu      	r9, r4
1800cb4c:	1114      	lrw      	r0, 0x20002264	// 1800cc1c <__cskyvprintfprintf+0x158>
1800cb4e:	1b08      	addi      	r3, r14, 32
1800cb50:	6c97      	mov      	r2, r5
1800cb52:	6c67      	mov      	r1, r9
1800cb54:	6010      	addu      	r0, r4
1800cb56:	e3ffa8d1 	bsr      	0x18001cf8	// 18001cf8 <__cskyvprintfvsnprintf>
    if (len < 0 || len > (PRINT_BUFF_SIZE - 2 - flag)) {
1800cb5a:	e9800004 	blz      	r0, 0x1800cb62	// 1800cb62 <__cskyvprintfprintf+0x9e>
1800cb5e:	6424      	cmphs      	r9, r0
1800cb60:	0832      	bt      	0x1800cbc4	// 1800cbc4 <__cskyvprintfprintf+0x100>
        flag = PRINT_BUFF_SIZE - 1;
        _print_buff_p[flag - 1] = '\n';
1800cb62:	116f      	lrw      	r3, 0x20002264	// 1800cc1c <__cskyvprintfprintf+0x158>
1800cb64:	320a      	movi      	r2, 10
1800cb66:	dc4300fe 	st.b      	r2, (r3, 0xfe)
        _print_buff_p[flag - 2] = '\r';
1800cb6a:	320d      	movi      	r2, 13
1800cb6c:	dc4300fd 	st.b      	r2, (r3, 0xfd)
        flag = PRINT_BUFF_SIZE - 1;
1800cb70:	34ff      	movi      	r4, 255
        flag += len;
    }
    va_end(ap);

    if (flag > 0) {
        if (_print_buff_p[flag - 1] == '\n' && _print_buff_p[flag - 2] != '\r') {
1800cb72:	116b      	lrw      	r3, 0x20002264	// 1800cc1c <__cskyvprintfprintf+0x158>
1800cb74:	5c03      	subi      	r0, r4, 1
1800cb76:	d0030021 	ldr.b      	r1, (r3, r0 << 0)
1800cb7a:	394a      	cmpnei      	r1, 10
1800cb7c:	080c      	bt      	0x1800cb94	// 1800cb94 <__cskyvprintfprintf+0xd0>
1800cb7e:	5b50      	addu      	r2, r3, r4
1800cb80:	2a01      	subi      	r2, 2
1800cb82:	8240      	ld.b      	r2, (r2, 0x0)
1800cb84:	3a4d      	cmpnei      	r2, 13
1800cb86:	0c07      	bf      	0x1800cb94	// 1800cb94 <__cskyvprintfprintf+0xd0>
            _print_buff_p[flag - 1] = '\r';
1800cb88:	320d      	movi      	r2, 13
1800cb8a:	d4030022 	str.b      	r2, (r3, r0 << 0)
            _print_buff_p[flag++] = '\n';
1800cb8e:	d4830021 	str.b      	r1, (r3, r4 << 0)
1800cb92:	2400      	addi      	r4, 1
        }
        _print_buff_p[flag] = 0;
1800cb94:	3200      	movi      	r2, 0
1800cb96:	d4830022 	str.b      	r2, (r3, r4 << 0)
        if (_print) {
1800cb9a:	e9070024 	bez      	r7, 0x1800cbe2	// 1800cbe2 <__cskyvprintfprintf+0x11e>
            if (color) _print(_print_priv, color);
1800cb9e:	e9060005 	bez      	r6, 0x1800cba8	// 1800cba8 <__cskyvprintfprintf+0xe4>
1800cba2:	6c5b      	mov      	r1, r6
1800cba4:	6c23      	mov      	r0, r8
1800cba6:	7bdd      	jsr      	r7
            _print(_print_priv, _print_buff_p);
1800cba8:	103d      	lrw      	r1, 0x20002264	// 1800cc1c <__cskyvprintfprintf+0x158>
1800cbaa:	6c23      	mov      	r0, r8
1800cbac:	7bdd      	jsr      	r7
            if (color) _print(_print_priv, (char *)__print_color__[8]);
1800cbae:	e906000e 	bez      	r6, 0x1800cbca	// 1800cbca <__cskyvprintfprintf+0x106>
1800cbb2:	103c      	lrw      	r1, 0x18017657	// 1800cc20 <__cskyvprintfprintf+0x15c>
1800cbb4:	6c23      	mov      	r0, r8
1800cbb6:	7bdd      	jsr      	r7
1800cbb8:	0409      	br      	0x1800cbca	// 1800cbca <__cskyvprintfprintf+0x106>
    uint8 tick = 0;
1800cbba:	3400      	movi      	r4, 0
1800cbbc:	07a4      	br      	0x1800cb04	// 1800cb04 <__cskyvprintfprintf+0x40>
    uint8 level = 6;
1800cbbe:	3306      	movi      	r3, 6
    char *color = NULL;
1800cbc0:	3600      	movi      	r6, 0
1800cbc2:	07b0      	br      	0x1800cb22	// 1800cb22 <__cskyvprintfprintf+0x5e>
        flag += len;
1800cbc4:	6100      	addu      	r4, r0
    if (flag > 0) {
1800cbc6:	e924ffd6 	bnez      	r4, 0x1800cb72	// 1800cb72 <__cskyvprintfprintf+0xae>
            if (color) hgprintf_out(color, 0);
            hgprintf_out(_print_buff_p, flag);
            if (color) hgprintf_out((char *)__print_color__[8], 0);
        }
    }
}
1800cbca:	d9ee2006 	ld.w      	r15, (r14, 0x18)
1800cbce:	d92e2005 	ld.w      	r9, (r14, 0x14)
1800cbd2:	d90e2004 	ld.w      	r8, (r14, 0x10)
1800cbd6:	98e3      	ld.w      	r7, (r14, 0xc)
1800cbd8:	98c2      	ld.w      	r6, (r14, 0x8)
1800cbda:	98a1      	ld.w      	r5, (r14, 0x4)
1800cbdc:	9880      	ld.w      	r4, (r14, 0x0)
1800cbde:	140b      	addi      	r14, r14, 44
1800cbe0:	783c      	jmp      	r15
            if (color) hgprintf_out(color, 0);
1800cbe2:	e9060006 	bez      	r6, 0x1800cbee	// 1800cbee <__cskyvprintfprintf+0x12a>
1800cbe6:	6c5f      	mov      	r1, r7
1800cbe8:	6c1b      	mov      	r0, r6
1800cbea:	e3ffff4f 	bsr      	0x1800ca88	// 1800ca88 <hgprintf_out>
            hgprintf_out(_print_buff_p, flag);
1800cbee:	6c53      	mov      	r1, r4
1800cbf0:	100b      	lrw      	r0, 0x20002264	// 1800cc1c <__cskyvprintfprintf+0x158>
1800cbf2:	e3ffff4b 	bsr      	0x1800ca88	// 1800ca88 <hgprintf_out>
            if (color) hgprintf_out((char *)__print_color__[8], 0);
1800cbf6:	e906ffea 	bez      	r6, 0x1800cbca	// 1800cbca <__cskyvprintfprintf+0x106>
1800cbfa:	3100      	movi      	r1, 0
1800cbfc:	1009      	lrw      	r0, 0x18017657	// 1800cc20 <__cskyvprintfprintf+0x15c>
1800cbfe:	e3ffff45 	bsr      	0x1800ca88	// 1800ca88 <hgprintf_out>
1800cc02:	07e4      	br      	0x1800cbca	// 1800cbca <__cskyvprintfprintf+0x106>
1800cc04:	2000225d 	.long	0x2000225d
1800cc08:	20001fdc 	.long	0x20001fdc
1800cc0c:	20001fd8 	.long	0x20001fd8
1800cc10:	1801762c 	.long	0x1801762c
1800cc14:	2000225c 	.long	0x2000225c
1800cc18:	18017650 	.long	0x18017650
1800cc1c:	20002264 	.long	0x20002264
1800cc20:	18017657 	.long	0x18017657

1800cc24 <os_sleep_us>:
#include "osal/sleep.h"
#include "hal/timer_device.h"
#include "lib/common/ticker_api.h"

void os_sleep_us(int us)
{
1800cc24:	14d1      	push      	r4, r15
    uint32 ms = us / 1000;
1800cc26:	33fa      	movi      	r3, 250
1800cc28:	4362      	lsli      	r3, r3, 2
1800cc2a:	c4608042 	divs      	r2, r0, r3
    us = us % 1000;
1800cc2e:	7cc8      	mult      	r3, r2
1800cc30:	588d      	subu      	r4, r0, r3
    if (ms > 0) {
1800cc32:	e9020005 	bez      	r2, 0x1800cc3c	// 1800cc3c <os_sleep_us+0x18>
        os_sleep_ms(ms);
1800cc36:	6c0b      	mov      	r0, r2
1800cc38:	e0003d72 	bsr      	0x1801471c	// 1801471c <os_sleep_ms>
    }
    delay_us(us);
1800cc3c:	6c13      	mov      	r0, r4
1800cc3e:	e3ffc25b 	bsr      	0x180050f4	// 180050f4 <delay_us>
}
1800cc42:	1491      	pop      	r4, r15

1800cc44 <custom_mem_init>:
#include "custom_mem.h"
static struct sys_heap custom_sram_heap = { .name = "c_sram", };
static void *g_custom_buf = NULL;

void custom_mem_init(void *buf,uint32_t custom_heap_size)
{
1800cc44:	14d3      	push      	r4-r6, r15
1800cc46:	6d87      	mov      	r6, r1
1800cc48:	6d03      	mov      	r4, r0
1800cc4a:	102d      	lrw      	r1, 0x20001fe0	// 1800cc7c <custom_mem_init+0x38>
    if(!buf || g_custom_buf)
1800cc4c:	e9000005 	bez      	r0, 0x1800cc56	// 1800cc56 <custom_mem_init+0x12>
1800cc50:	91a0      	ld.w      	r5, (r1, 0x0)
1800cc52:	e9050009 	bez      	r5, 0x1800cc64	// 1800cc64 <custom_mem_init+0x20>
    {
        os_printf("%s:%d err,g_custom_buf:%X\n",__FUNCTION__,__LINE__,g_custom_buf);
1800cc56:	9160      	ld.w      	r3, (r1, 0x0)
1800cc58:	320d      	movi      	r2, 13
1800cc5a:	102a      	lrw      	r1, 0x1801768b	// 1800cc80 <custom_mem_init+0x3c>
1800cc5c:	100a      	lrw      	r0, 0x180176b1	// 1800cc84 <custom_mem_init+0x40>
1800cc5e:	e3ffff33 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    #ifdef MEM_TRACE
        flags |= SYSHEAP_FLAGS_MEM_LEAK_TRACE | SYSHEAP_FLAGS_MEM_OVERFLOW_CHECK;
    #endif
        os_printf("custom_mem_init:%x\n",buf);
        sysheap_init(&custom_sram_heap, (void *)buf, custom_heap_size, flags);
}
1800cc62:	1493      	pop      	r4-r6, r15
    g_custom_buf = buf;
1800cc64:	b100      	st.w      	r0, (r1, 0x0)
        os_printf("custom_mem_init:%x\n",buf);
1800cc66:	6c43      	mov      	r1, r0
1800cc68:	1008      	lrw      	r0, 0x180176cd	// 1800cc88 <custom_mem_init+0x44>
1800cc6a:	e3ffff2d 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
        sysheap_init(&custom_sram_heap, (void *)buf, custom_heap_size, flags);
1800cc6e:	6cd7      	mov      	r3, r5
1800cc70:	6c9b      	mov      	r2, r6
1800cc72:	6c53      	mov      	r1, r4
1800cc74:	1006      	lrw      	r0, 0x20000b58	// 1800cc8c <custom_mem_init+0x48>
1800cc76:	e000372b 	bsr      	0x18013acc	// 18013acc <sysheap_init>
1800cc7a:	07f4      	br      	0x1800cc62	// 1800cc62 <custom_mem_init+0x1e>
1800cc7c:	20001fe0 	.long	0x20001fe0
1800cc80:	1801768b 	.long	0x1801768b
1800cc84:	180176b1 	.long	0x180176b1
1800cc88:	180176cd 	.long	0x180176cd
1800cc8c:	20000b58 	.long	0x20000b58

1800cc90 <print_custom_sram>:
{
    g_custom_buf = NULL;
}

void print_custom_sram()
{
1800cc90:	14d0      	push      	r15
    os_printf("custom mem sram:%d\n",sysheap_freesize(&custom_sram_heap));
1800cc92:	1005      	lrw      	r0, 0x20000b58	// 1800cca4 <print_custom_sram+0x14>
1800cc94:	e0003784 	bsr      	0x18013b9c	// 18013b9c <sysheap_freesize>
1800cc98:	6c43      	mov      	r1, r0
1800cc9a:	1004      	lrw      	r0, 0x18017724	// 1800cca8 <print_custom_sram+0x18>
1800cc9c:	e3ffff14 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
}
1800cca0:	1490      	pop      	r15
1800cca2:	0000      	.short	0x0000
1800cca4:	20000b58 	.long	0x20000b58
1800cca8:	18017724 	.long	0x18017724

1800ccac <custom_mem_psram_init>:
#ifdef PSRAM_HEAP

static struct sys_heap custom_psram_heap = { .name = "c_psram", };
static void *g_custom_psram_buf = NULL;
void custom_mem_psram_init(void *buf,uint32_t custom_heap_size)
{
1800ccac:	14d2      	push      	r4-r5, r15
1800ccae:	6d03      	mov      	r4, r0
1800ccb0:	6d47      	mov      	r5, r1
1800ccb2:	106e      	lrw      	r3, 0x20001fe4	// 1800cce8 <custom_mem_psram_init+0x3c>
    if(!buf || g_custom_psram_buf)
1800ccb4:	e9000005 	bez      	r0, 0x1800ccbe	// 1800ccbe <custom_mem_psram_init+0x12>
1800ccb8:	9340      	ld.w      	r2, (r3, 0x0)
1800ccba:	e9020009 	bez      	r2, 0x1800cccc	// 1800cccc <custom_mem_psram_init+0x20>
    {
        os_printf("%s:%d err,g_custom__psram_buf:%X\n",__FUNCTION__,__LINE__,g_custom_psram_buf);
1800ccbe:	9360      	ld.w      	r3, (r3, 0x0)
1800ccc0:	3254      	movi      	r2, 84
1800ccc2:	102b      	lrw      	r1, 0x1801769b	// 1800ccec <custom_mem_psram_init+0x40>
1800ccc4:	100b      	lrw      	r0, 0x180176e2	// 1800ccf0 <custom_mem_psram_init+0x44>
1800ccc6:	e3fffeff 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
        flags |= SYSHEAP_FLAGS_MEM_LEAK_TRACE | SYSHEAP_FLAGS_MEM_OVERFLOW_CHECK;
    #endif
    flags |= SYSHEAP_FLAGS_MEM_ALIGN_16;
    os_printf("%s :%x\n",__FUNCTION__,buf);
    sysheap_init(&custom_psram_heap, (void *)buf, custom_heap_size, flags);
}
1800ccca:	1492      	pop      	r4-r5, r15
    g_custom_psram_buf = buf;
1800cccc:	b300      	st.w      	r0, (r3, 0x0)
    os_printf("%s :%x\n",__FUNCTION__,buf);
1800ccce:	6c83      	mov      	r2, r0
1800ccd0:	1027      	lrw      	r1, 0x1801769b	// 1800ccec <custom_mem_psram_init+0x40>
1800ccd2:	1009      	lrw      	r0, 0x18017705	// 1800ccf4 <custom_mem_psram_init+0x48>
1800ccd4:	e3fffef8 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    sysheap_init(&custom_psram_heap, (void *)buf, custom_heap_size, flags);
1800ccd8:	3304      	movi      	r3, 4
1800ccda:	6c97      	mov      	r2, r5
1800ccdc:	6c53      	mov      	r1, r4
1800ccde:	1007      	lrw      	r0, 0x20000b28	// 1800ccf8 <custom_mem_psram_init+0x4c>
1800cce0:	e00036f6 	bsr      	0x18013acc	// 18013acc <sysheap_init>
1800cce4:	07f3      	br      	0x1800ccca	// 1800ccca <custom_mem_psram_init+0x1e>
1800cce6:	0000      	.short	0x0000
1800cce8:	20001fe4 	.long	0x20001fe4
1800ccec:	1801769b 	.long	0x1801769b
1800ccf0:	180176e2 	.long	0x180176e2
1800ccf4:	18017705 	.long	0x18017705
1800ccf8:	20000b28 	.long	0x20000b28

1800ccfc <print_custom_psram>:
{
    g_custom_psram_buf = NULL;
}

void print_custom_psram()
{
1800ccfc:	14d0      	push      	r15
    os_printf("custom mem psram:%d\n",sysheap_freesize(&custom_psram_heap));
1800ccfe:	1005      	lrw      	r0, 0x20000b28	// 1800cd10 <print_custom_psram+0x14>
1800cd00:	e000374e 	bsr      	0x18013b9c	// 18013b9c <sysheap_freesize>
1800cd04:	6c43      	mov      	r1, r0
1800cd06:	1004      	lrw      	r0, 0x1801770e	// 1800cd14 <print_custom_psram+0x18>
1800cd08:	e3fffede 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
}
1800cd0c:	1490      	pop      	r15
1800cd0e:	0000      	.short	0x0000
1800cd10:	20000b28 	.long	0x20000b28
1800cd14:	1801770e 	.long	0x1801770e

1800cd18 <tmr_adapt_cb>:
    void       *arg;
    tmr_ad_t   *tmr_above;
} tmr_arg_t;

static void tmr_adapt_cb(void *timer, void *arg)
{
1800cd18:	14d0      	push      	r15
    ktimer_t  *get = (ktimer_t *)timer;
    tmr_arg_t *arg_above = (tmr_arg_t *)(get->timer_cb_arg);
1800cd1a:	9065      	ld.w      	r3, (r0, 0x14)
    tmr_ad_t  *tmr_above = (tmr_ad_t *)arg_above->tmr_above;
    tmr_above->func(arg_above->arg);
1800cd1c:	9341      	ld.w      	r2, (r3, 0x4)
1800cd1e:	9300      	ld.w      	r0, (r3, 0x0)
1800cd20:	9240      	ld.w      	r2, (r2, 0x0)
1800cd22:	7bc9      	jsr      	r2
    return;
}
1800cd24:	1490      	pop      	r15
	...

1800cd28 <csi_kernel_init>:
{
1800cd28:	14d0      	push      	r15
    kstat_t ret = krhino_init();
1800cd2a:	e0000b7b 	bsr      	0x1800e420	// 1800e420 <krhino_init>
    if (ret == RHINO_SUCCESS) {
1800cd2e:	3840      	cmpnei      	r0, 0
1800cd30:	c4000503 	mvc      	r3
1800cd34:	3000      	movi      	r0, 0
1800cd36:	600e      	subu      	r0, r3
}
1800cd38:	1490      	pop      	r15
	...

1800cd3c <csi_kernel_start>:
{
1800cd3c:	14d0      	push      	r15
    kstat_t ret = krhino_start();
1800cd3e:	e0000baf 	bsr      	0x1800e49c	// 1800e49c <krhino_start>
    if (ret == RHINO_SUCCESS) {
1800cd42:	3840      	cmpnei      	r0, 0
1800cd44:	c4000503 	mvc      	r3
1800cd48:	3000      	movi      	r0, 0
1800cd4a:	600e      	subu      	r0, r3
}
1800cd4c:	1490      	pop      	r15
	...

1800cd50 <csi_kernel_sched_suspend>:
{
1800cd50:	14d0      	push      	r15
    if (g_sys_stat != RHINO_RUNNING) {
1800cd52:	1065      	lrw      	r3, 0x20002568	// 1800cd64 <csi_kernel_sched_suspend+0x14>
1800cd54:	9360      	ld.w      	r3, (r3, 0x0)
1800cd56:	3b43      	cmpnei      	r3, 3
1800cd58:	0803      	bt      	0x1800cd5e	// 1800cd5e <csi_kernel_sched_suspend+0xe>
    krhino_sched_disable();
1800cd5a:	e0000903 	bsr      	0x1800df60	// 1800df60 <krhino_sched_disable>
}
1800cd5e:	3000      	movi      	r0, 0
1800cd60:	1490      	pop      	r15
1800cd62:	0000      	.short	0x0000
1800cd64:	20002568 	.long	0x20002568

1800cd68 <csi_kernel_sched_resume>:
{
1800cd68:	14d0      	push      	r15
    if (g_sys_stat != RHINO_RUNNING) {
1800cd6a:	1064      	lrw      	r3, 0x20002568	// 1800cd78 <csi_kernel_sched_resume+0x10>
1800cd6c:	9360      	ld.w      	r3, (r3, 0x0)
1800cd6e:	3b43      	cmpnei      	r3, 3
1800cd70:	0803      	bt      	0x1800cd76	// 1800cd76 <csi_kernel_sched_resume+0xe>
    krhino_sched_enable();
1800cd72:	e0000941 	bsr      	0x1800dff4	// 1800dff4 <krhino_sched_enable>
}
1800cd76:	1490      	pop      	r15
1800cd78:	20002568 	.long	0x20002568

1800cd7c <csi_kernel_task_new>:
{
1800cd7c:	14d4      	push      	r4-r7, r15
1800cd7e:	1428      	subi      	r14, r14, 32
1800cd80:	98b0      	ld.w      	r5, (r14, 0x40)
1800cd82:	6dc3      	mov      	r7, r0
1800cd84:	98cd      	ld.w      	r6, (r14, 0x34)
1800cd86:	980e      	ld.w      	r0, (r14, 0x38)
1800cd88:	988f      	ld.w      	r4, (r14, 0x3c)
    if ((task_handle == NULL) || (stack_size % 4 != 0) || ((stack_size == 0) && (stack == NULL)) || prio <= KPRIO_IDLE || prio > KPRIO_REALTIME7) {
1800cd8a:	e9050037 	bez      	r5, 0x1800cdf8	// 1800cdf8 <csi_kernel_task_new+0x7c>
1800cd8e:	e5842003 	andi      	r12, r4, 3
1800cd92:	e92c0033 	bnez      	r12, 0x1800cdf8	// 1800cdf8 <csi_kernel_task_new+0x7c>
1800cd96:	e9240004 	bnez      	r4, 0x1800cd9e	// 1800cd9e <csi_kernel_task_new+0x22>
1800cd9a:	e900002f 	bez      	r0, 0x1800cdf8	// 1800cdf8 <csi_kernel_task_new+0x7c>
1800cd9e:	5b03      	subi      	r0, r3, 1
1800cda0:	eb00002f 	cmphsi      	r0, 48
1800cda4:	b847      	st.w      	r2, (r14, 0x1c)
1800cda6:	b826      	st.w      	r1, (r14, 0x18)
1800cda8:	0828      	bt      	0x1800cdf8	// 1800cdf8 <csi_kernel_task_new+0x7c>
    uint8_t prio_trans = RHINO_CONFIG_USER_PRI_MAX - prio;
1800cdaa:	303c      	movi      	r0, 60
1800cdac:	586d      	subu      	r3, r0, r3
1800cdae:	74cc      	zextb      	r3, r3
1800cdb0:	b865      	st.w      	r3, (r14, 0x14)
    csi_kernel_sched_suspend();
1800cdb2:	e3ffffcf 	bsr      	0x1800cd50	// 1800cd50 <csi_kernel_sched_suspend>
    if (name) {
1800cdb6:	9826      	ld.w      	r1, (r14, 0x18)
1800cdb8:	3001      	movi      	r0, 1
1800cdba:	4c82      	lsri      	r4, r4, 2
1800cdbc:	9865      	ld.w      	r3, (r14, 0x14)
1800cdbe:	9847      	ld.w      	r2, (r14, 0x1c)
        ret = krhino_task_dyn_create((ktask_t **)task_handle, name, arg, prio_trans, time_quanta, stack_size / 4, task, AUTORUN);
1800cdc0:	b804      	st.w      	r0, (r14, 0x10)
1800cdc2:	b8e3      	st.w      	r7, (r14, 0xc)
1800cdc4:	b882      	st.w      	r4, (r14, 0x8)
1800cdc6:	b8c0      	st.w      	r6, (r14, 0x0)
    if (name) {
1800cdc8:	e901000f 	bez      	r1, 0x1800cde6	// 1800cde6 <csi_kernel_task_new+0x6a>
        ret = krhino_task_dyn_create((ktask_t **)task_handle, name, arg, prio_trans, time_quanta, stack_size / 4, task, AUTORUN);
1800cdcc:	3000      	movi      	r0, 0
1800cdce:	b801      	st.w      	r0, (r14, 0x4)
        ret = krhino_task_dyn_create((ktask_t **)task_handle, "user_task", arg, prio_trans, time_quanta, stack_size / 4, task, AUTORUN);
1800cdd0:	6c17      	mov      	r0, r5
1800cdd2:	e0000d15 	bsr      	0x1800e7fc	// 1800e7fc <krhino_task_dyn_create>
1800cdd6:	6d03      	mov      	r4, r0
    if (ret == RHINO_SUCCESS) {
1800cdd8:	e920000a 	bnez      	r0, 0x1800cdec	// 1800cdec <csi_kernel_task_new+0x70>
        csi_kernel_sched_resume(0);
1800cddc:	e3ffffc6 	bsr      	0x1800cd68	// 1800cd68 <csi_kernel_sched_resume>
        return 0;
1800cde0:	6c13      	mov      	r0, r4
}
1800cde2:	1408      	addi      	r14, r14, 32
1800cde4:	1494      	pop      	r4-r7, r15
        ret = krhino_task_dyn_create((ktask_t **)task_handle, "user_task", arg, prio_trans, time_quanta, stack_size / 4, task, AUTORUN);
1800cde6:	b821      	st.w      	r1, (r14, 0x4)
1800cde8:	1026      	lrw      	r1, 0x1801775a	// 1800ce00 <csi_kernel_task_new+0x84>
1800cdea:	07f3      	br      	0x1800cdd0	// 1800cdd0 <csi_kernel_task_new+0x54>
        csi_kernel_sched_resume(0);
1800cdec:	3000      	movi      	r0, 0
1800cdee:	e3ffffbd 	bsr      	0x1800cd68	// 1800cd68 <csi_kernel_sched_resume>
        return -EPERM;
1800cdf2:	3000      	movi      	r0, 0
1800cdf4:	2800      	subi      	r0, 1
1800cdf6:	07f6      	br      	0x1800cde2	// 1800cde2 <csi_kernel_task_new+0x66>
        return -EINVAL;
1800cdf8:	3000      	movi      	r0, 0
1800cdfa:	2815      	subi      	r0, 22
1800cdfc:	07f3      	br      	0x1800cde2	// 1800cde2 <csi_kernel_task_new+0x66>
1800cdfe:	0000      	.short	0x0000
1800ce00:	1801775a 	.long	0x1801775a

1800ce04 <csi_kernel_task_set_prio>:
{
1800ce04:	14d0      	push      	r15
1800ce06:	1421      	subi      	r14, r14, 4
    if (task_handle  == NULL || priority <= KPRIO_IDLE || priority > KPRIO_REALTIME7) {
1800ce08:	e9000014 	bez      	r0, 0x1800ce30	// 1800ce30 <csi_kernel_task_set_prio+0x2c>
1800ce0c:	5963      	subi      	r3, r1, 1
1800ce0e:	eb03002f 	cmphsi      	r3, 48
1800ce12:	080f      	bt      	0x1800ce30	// 1800ce30 <csi_kernel_task_set_prio+0x2c>
    uint8_t prio = RHINO_CONFIG_USER_PRI_MAX - priority;
1800ce14:	333c      	movi      	r3, 60
1800ce16:	5b25      	subu      	r1, r3, r1
    kstat_t ret = krhino_task_pri_change(task_handle, prio, &old);
1800ce18:	e44e0002 	addi      	r2, r14, 3
1800ce1c:	7444      	zextb      	r1, r1
1800ce1e:	e0000db5 	bsr      	0x1800e988	// 1800e988 <krhino_task_pri_change>
    if (ret == RHINO_SUCCESS) {
1800ce22:	3840      	cmpnei      	r0, 0
1800ce24:	c4000503 	mvc      	r3
1800ce28:	3000      	movi      	r0, 0
1800ce2a:	600e      	subu      	r0, r3
}
1800ce2c:	1401      	addi      	r14, r14, 4
1800ce2e:	1490      	pop      	r15
        return -EINVAL;
1800ce30:	3000      	movi      	r0, 0
1800ce32:	2815      	subi      	r0, 22
1800ce34:	07fc      	br      	0x1800ce2c	// 1800ce2c <csi_kernel_task_set_prio+0x28>
	...

1800ce38 <csi_kernel_task_dump>:
{
1800ce38:	14d0      	push      	r15
    krhino_task_dump(task_handle, stack);
1800ce3a:	e0000f03 	bsr      	0x1800ec40	// 1800ec40 <krhino_task_dump>
}
1800ce3e:	1490      	pop      	r15

1800ce40 <csi_kernel_intrpt_enter>:
{
1800ce40:	14d0      	push      	r15
    kstat_t ret = krhino_intrpt_enter();
1800ce42:	e0000b4b 	bsr      	0x1800e4d8	// 1800e4d8 <krhino_intrpt_enter>
    if (ret == RHINO_SUCCESS) {
1800ce46:	3840      	cmpnei      	r0, 0
1800ce48:	c4000503 	mvc      	r3
1800ce4c:	3000      	movi      	r0, 0
1800ce4e:	600e      	subu      	r0, r3
}
1800ce50:	1490      	pop      	r15
	...

1800ce54 <csi_kernel_intrpt_exit>:
{
1800ce54:	14d0      	push      	r15
    krhino_intrpt_exit();
1800ce56:	e0000b5d 	bsr      	0x1800e510	// 1800e510 <krhino_intrpt_exit>
}
1800ce5a:	3000      	movi      	r0, 0
1800ce5c:	1490      	pop      	r15
	...

1800ce60 <csi_kernel_ms2tick>:
}
1800ce60:	3100      	movi      	r1, 0
1800ce62:	783c      	jmp      	r15

1800ce64 <csi_kernel_delay_ms>:
{
1800ce64:	14d1      	push      	r4, r15
    kstat_t ret = krhino_task_sleep(ticks);
1800ce66:	3400      	movi      	r4, 0
1800ce68:	6c53      	mov      	r1, r4
1800ce6a:	e0000ce9 	bsr      	0x1800e83c	// 1800e83c <krhino_task_sleep>
    if (ret == RHINO_SUCCESS) {
1800ce6e:	3840      	cmpnei      	r0, 0
1800ce70:	c4000500 	mvc      	r0
1800ce74:	5c01      	subu      	r0, r4, r0
}
1800ce76:	1491      	pop      	r4, r15

1800ce78 <csi_kernel_timer_new>:

k_timer_handle_t csi_kernel_timer_new(k_timer_cb_t func, k_timer_type_t type, void *arg)
{
1800ce78:	14d7      	push      	r4-r10, r15
1800ce7a:	1425      	subi      	r14, r14, 20
    if (type < 0 || type > 3 || func == NULL) {
1800ce7c:	3903      	cmphsi      	r1, 4
1800ce7e:	6d3f      	mov      	r4, r15
{
1800ce80:	6dc3      	mov      	r7, r0
1800ce82:	6e8b      	mov      	r10, r2
    if (type < 0 || type > 3 || func == NULL) {
1800ce84:	0c04      	bf      	0x1800ce8c	// 1800ce8c <csi_kernel_timer_new+0x14>
        return NULL;
1800ce86:	3000      	movi      	r0, 0
    } else {
        krhino_mm_free((void *)handle_ad);
        krhino_mm_free((void *)get_arg);
        return NULL;
    }
}
1800ce88:	1405      	addi      	r14, r14, 20
1800ce8a:	1497      	pop      	r4-r10, r15
    if (type < 0 || type > 3 || func == NULL) {
1800ce8c:	e900fffd 	bez      	r0, 0x1800ce86	// 1800ce86 <csi_kernel_timer_new+0xe>
    if (type == KTIMER_TYPE_ONCE) {
1800ce90:	e9010019 	bez      	r1, 0x1800cec2	// 1800cec2 <csi_kernel_timer_new+0x4a>
        round = TMR_PERIODIC_PERIOD;
1800ce94:	ea08000a 	movi      	r8, 10
    tmr_ad_t *handle_ad = (tmr_ad_t *)krhino_mm_alloc(sizeof(tmr_ad_t), __builtin_return_address(0));
1800ce98:	6c53      	mov      	r1, r4
1800ce9a:	3048      	movi      	r0, 72
1800ce9c:	e3ffb0ae 	bsr      	0x18002ff8	// 18002ff8 <krhino_mm_alloc>
        round = 0;
1800cea0:	ea090000 	movi      	r9, 0
    tmr_ad_t *handle_ad = (tmr_ad_t *)krhino_mm_alloc(sizeof(tmr_ad_t), __builtin_return_address(0));
1800cea4:	6d43      	mov      	r5, r0
    if (handle_ad == NULL) {
1800cea6:	e900fff0 	bez      	r0, 0x1800ce86	// 1800ce86 <csi_kernel_timer_new+0xe>
    tmr_arg_t *get_arg = (tmr_arg_t *)krhino_mm_alloc(sizeof(tmr_arg_t), __builtin_return_address(0));
1800ceaa:	6c53      	mov      	r1, r4
1800ceac:	3008      	movi      	r0, 8
1800ceae:	e3ffb0a5 	bsr      	0x18002ff8	// 18002ff8 <krhino_mm_alloc>
1800ceb2:	6d83      	mov      	r6, r0
1800ceb4:	3400      	movi      	r4, 0
    if (get_arg == NULL) {
1800ceb6:	e9200009 	bnez      	r0, 0x1800cec8	// 1800cec8 <csi_kernel_timer_new+0x50>
        krhino_mm_free((void *)handle_ad);
1800ceba:	6c17      	mov      	r0, r5
1800cebc:	e3ffb0a8 	bsr      	0x1800300c	// 1800300c <krhino_mm_free>
1800cec0:	07e3      	br      	0x1800ce86	// 1800ce86 <csi_kernel_timer_new+0xe>
        round = 0;
1800cec2:	ea080000 	movi      	r8, 0
1800cec6:	07e9      	br      	0x1800ce98	// 1800ce98 <csi_kernel_timer_new+0x20>
    get_arg->arg = arg;
1800cec8:	dd402000 	st.w      	r10, (r0, 0x0)
    kstat_t ret = krhino_timer_create(&(handle_ad->tmr), "UserTmr", (timer_cb_t)tmr_adapt_cb, first, round, get_arg, 0);
1800cecc:	330a      	movi      	r3, 10
1800cece:	b803      	st.w      	r0, (r14, 0xc)
1800ced0:	b884      	st.w      	r4, (r14, 0x10)
1800ced2:	dd0e2001 	st.w      	r8, (r14, 0x4)
1800ced6:	dd2e2002 	st.w      	r9, (r14, 0x8)
1800ceda:	b880      	st.w      	r4, (r14, 0x0)
1800cedc:	5d0e      	addi      	r0, r5, 4
1800cede:	104a      	lrw      	r2, 0x1800cd18	// 1800cf04 <csi_kernel_timer_new+0x8c>
1800cee0:	102a      	lrw      	r1, 0x18017764	// 1800cf08 <csi_kernel_timer_new+0x90>
1800cee2:	e0001141 	bsr      	0x1800f164	// 1800f164 <krhino_timer_create>
    if (ret == RHINO_SUCCESS) {
1800cee6:	e9200006 	bnez      	r0, 0x1800cef2	// 1800cef2 <csi_kernel_timer_new+0x7a>
        handle_ad->func = func;
1800ceea:	b5e0      	st.w      	r7, (r5, 0x0)
        return handle_ad;
1800ceec:	6c17      	mov      	r0, r5
        get_arg->tmr_above = handle_ad;
1800ceee:	b6a1      	st.w      	r5, (r6, 0x4)
        return handle_ad;
1800cef0:	07cc      	br      	0x1800ce88	// 1800ce88 <csi_kernel_timer_new+0x10>
        krhino_mm_free((void *)handle_ad);
1800cef2:	6c17      	mov      	r0, r5
1800cef4:	e3ffb08c 	bsr      	0x1800300c	// 1800300c <krhino_mm_free>
        krhino_mm_free((void *)get_arg);
1800cef8:	6c1b      	mov      	r0, r6
1800cefa:	e3ffb089 	bsr      	0x1800300c	// 1800300c <krhino_mm_free>
        return NULL;
1800cefe:	6c13      	mov      	r0, r4
1800cf00:	07c4      	br      	0x1800ce88	// 1800ce88 <csi_kernel_timer_new+0x10>
1800cf02:	0000      	.short	0x0000
1800cf04:	1800cd18 	.long	0x1800cd18
1800cf08:	18017764 	.long	0x18017764

1800cf0c <csi_kernel_timer_start>:
        return -EPERM;
    }
}

k_status_t csi_kernel_timer_start(k_timer_handle_t timer_handle, uint32_t ticks)
{
1800cf0c:	14d2      	push      	r4-r5, r15
1800cf0e:	1421      	subi      	r14, r14, 4
    if (timer_handle == NULL || ticks == 0) {
1800cf10:	e9000022 	bez      	r0, 0x1800cf54	// 1800cf54 <csi_kernel_timer_start+0x48>
1800cf14:	e9010020 	bez      	r1, 0x1800cf54	// 1800cf54 <csi_kernel_timer_start+0x48>

    tick_t round;
    tmr_ad_t *handle_ad = (tmr_ad_t *)timer_handle;
    ktimer_t *handle = (ktimer_t *)(&(handle_ad->tmr));

    round = handle->round_ticks;
1800cf18:	906d      	ld.w      	r3, (r0, 0x34)
    ktimer_t *handle = (ktimer_t *)(&(handle_ad->tmr));
1800cf1a:	58ae      	addi      	r5, r0, 4
    round = handle->round_ticks;
1800cf1c:	900e      	ld.w      	r0, (r0, 0x38)

    tick_t tr;
    tick_t tf = ticks;

    if (round != 0) {
1800cf1e:	c403242c 	or      	r12, r3, r0
        tr = ticks;
1800cf22:	eb4c0000 	cmpnei      	r12, 0
1800cf26:	c4610c40 	inct      	r3, r1, 0
1800cf2a:	3200      	movi      	r2, 0
1800cf2c:	eb4c0000 	cmpnei      	r12, 0
1800cf30:	c4020c40 	inct      	r0, r2, 0
    } else {
        tr = 0;
    }

    kstat_t ret1 = krhino_timer_change(handle, tf, tr);
1800cf34:	b800      	st.w      	r0, (r14, 0x0)
1800cf36:	6c17      	mov      	r0, r5
1800cf38:	e0001194 	bsr      	0x1800f260	// 1800f260 <krhino_timer_change>
1800cf3c:	6d03      	mov      	r4, r0

    if (ret1 == RHINO_SUCCESS) {
1800cf3e:	e920000e 	bnez      	r0, 0x1800cf5a	// 1800cf5a <csi_kernel_timer_start+0x4e>
        kstat_t ret2 = krhino_timer_start(handle);
1800cf42:	6c17      	mov      	r0, r5
1800cf44:	e00010fc 	bsr      	0x1800f13c	// 1800f13c <krhino_timer_start>

        if (ret2 == RHINO_SUCCESS) {
1800cf48:	3840      	cmpnei      	r0, 0
1800cf4a:	c4000500 	mvc      	r0
1800cf4e:	5c01      	subu      	r0, r4, r0
            return -EPERM;
        }
    } else {
        return -EPERM;
    }
}
1800cf50:	1401      	addi      	r14, r14, 4
1800cf52:	1492      	pop      	r4-r5, r15
        return -EINVAL;
1800cf54:	3000      	movi      	r0, 0
1800cf56:	2815      	subi      	r0, 22
1800cf58:	07fc      	br      	0x1800cf50	// 1800cf50 <csi_kernel_timer_start+0x44>
        return -EPERM;
1800cf5a:	3000      	movi      	r0, 0
1800cf5c:	2800      	subi      	r0, 1
1800cf5e:	07f9      	br      	0x1800cf50	// 1800cf50 <csi_kernel_timer_start+0x44>

1800cf60 <csi_kernel_timer_stop>:

k_status_t csi_kernel_timer_stop(k_timer_handle_t timer_handle)
{
1800cf60:	14d0      	push      	r15
    if (timer_handle == NULL) {
1800cf62:	e900000b 	bez      	r0, 0x1800cf78	// 1800cf78 <csi_kernel_timer_stop+0x18>
    }

    tmr_ad_t *handle_ad = (tmr_ad_t *)timer_handle;
    ktimer_t *handle = (ktimer_t *)(&(handle_ad->tmr));

    kstat_t ret = krhino_timer_stop(handle);
1800cf66:	2003      	addi      	r0, 4
1800cf68:	e0001168 	bsr      	0x1800f238	// 1800f238 <krhino_timer_stop>

    if (ret == RHINO_SUCCESS) {
1800cf6c:	3840      	cmpnei      	r0, 0
1800cf6e:	c4000503 	mvc      	r3
1800cf72:	3000      	movi      	r0, 0
1800cf74:	600e      	subu      	r0, r3
        return 0;
    } else {
        return -EPERM;
    }
}
1800cf76:	1490      	pop      	r15
        return -EINVAL;
1800cf78:	3000      	movi      	r0, 0
1800cf7a:	2815      	subi      	r0, 22
1800cf7c:	07fd      	br      	0x1800cf76	// 1800cf76 <csi_kernel_timer_stop+0x16>
	...

1800cf80 <csi_kernel_event_del>:
#endif

}

k_status_t csi_kernel_event_del(k_event_handle_t ev_handle)
{
1800cf80:	14d2      	push      	r4-r5, r15
1800cf82:	6d43      	mov      	r5, r0
#if (RHINO_CONFIG_EVENT_FLAG > 0)

    if (ev_handle == NULL) {
1800cf84:	e900000c 	bez      	r0, 0x1800cf9c	// 1800cf9c <csi_kernel_event_del+0x1c>
        return -EINVAL;
    }

    kstat_t ret = krhino_event_del(ev_handle);
1800cf88:	e00002bc 	bsr      	0x1800d500	// 1800d500 <krhino_event_del>
1800cf8c:	6d03      	mov      	r4, r0

    if (ret == RHINO_SUCCESS) {
1800cf8e:	e920000a 	bnez      	r0, 0x1800cfa2	// 1800cfa2 <csi_kernel_event_del+0x22>
        krhino_mm_free(ev_handle);
1800cf92:	6c17      	mov      	r0, r5
1800cf94:	e3ffb03c 	bsr      	0x1800300c	// 1800300c <krhino_mm_free>
        return 0;
1800cf98:	6c13      	mov      	r0, r4
    }

#else
    return -EOPNOTSUPP;
#endif
}
1800cf9a:	1492      	pop      	r4-r5, r15
        return -EINVAL;
1800cf9c:	3000      	movi      	r0, 0
1800cf9e:	2815      	subi      	r0, 22
1800cfa0:	07fd      	br      	0x1800cf9a	// 1800cf9a <csi_kernel_event_del+0x1a>
        return -EPERM;
1800cfa2:	3000      	movi      	r0, 0
1800cfa4:	2800      	subi      	r0, 1
1800cfa6:	07fa      	br      	0x1800cf9a	// 1800cf9a <csi_kernel_event_del+0x1a>

1800cfa8 <csi_kernel_event_set>:

k_status_t csi_kernel_event_set(k_event_handle_t ev_handle, uint32_t flags, uint32_t *ret_flags)
{
1800cfa8:	14d2      	push      	r4-r5, r15
1800cfaa:	6d43      	mov      	r5, r0
1800cfac:	6d0b      	mov      	r4, r2
#if (RHINO_CONFIG_EVENT_FLAG > 0)

    if (ev_handle == NULL || ret_flags == NULL) {
1800cfae:	e900000c 	bez      	r0, 0x1800cfc6	// 1800cfc6 <csi_kernel_event_set+0x1e>
1800cfb2:	e902000a 	bez      	r2, 0x1800cfc6	// 1800cfc6 <csi_kernel_event_set+0x1e>
        return -EINVAL;
    }

    kstat_t ret = krhino_event_set(ev_handle, flags, RHINO_OR);
1800cfb6:	3200      	movi      	r2, 0
1800cfb8:	e0000356 	bsr      	0x1800d664	// 1800d664 <krhino_event_set>

    if (ret == RHINO_SUCCESS) {
1800cfbc:	e9200008 	bnez      	r0, 0x1800cfcc	// 1800cfcc <csi_kernel_event_set+0x24>
        kevent_t *handle = (kevent_t *)ev_handle;
        *ret_flags = handle->flags;
1800cfc0:	9564      	ld.w      	r3, (r5, 0x10)
1800cfc2:	b460      	st.w      	r3, (r4, 0x0)
    }

#else
    return -EOPNOTSUPP;
#endif
}
1800cfc4:	1492      	pop      	r4-r5, r15
        return -EINVAL;
1800cfc6:	3000      	movi      	r0, 0
1800cfc8:	2815      	subi      	r0, 22
1800cfca:	07fd      	br      	0x1800cfc4	// 1800cfc4 <csi_kernel_event_set+0x1c>
        return -EPERM;
1800cfcc:	3000      	movi      	r0, 0
1800cfce:	2800      	subi      	r0, 1
1800cfd0:	07fa      	br      	0x1800cfc4	// 1800cfc4 <csi_kernel_event_set+0x1c>
	...

1800cfd4 <csi_kernel_event_clear>:

k_status_t csi_kernel_event_clear(k_event_handle_t ev_handle, uint32_t flags, uint32_t *ret_flags)
{
1800cfd4:	14d2      	push      	r4-r5, r15
1800cfd6:	6d43      	mov      	r5, r0
1800cfd8:	6d0b      	mov      	r4, r2
#if (RHINO_CONFIG_EVENT_FLAG > 0)

    if (ev_handle == NULL) {
1800cfda:	e900000d 	bez      	r0, 0x1800cff4	// 1800cff4 <csi_kernel_event_clear+0x20>
        return -EINVAL;
    }

    kstat_t ret = krhino_event_set(ev_handle, ~flags, RHINO_AND);
1800cfde:	3202      	movi      	r2, 2
1800cfe0:	6c46      	nor      	r1, r1
1800cfe2:	e0000341 	bsr      	0x1800d664	// 1800d664 <krhino_event_set>

    if (ret == RHINO_SUCCESS) {
1800cfe6:	e920000a 	bnez      	r0, 0x1800cffa	// 1800cffa <csi_kernel_event_clear+0x26>
        kevent_t *handle = (kevent_t *)ev_handle;
        if(ret_flags) *ret_flags = handle->flags;
1800cfea:	e904000b 	bez      	r4, 0x1800d000	// 1800d000 <csi_kernel_event_clear+0x2c>
1800cfee:	9564      	ld.w      	r3, (r5, 0x10)
1800cff0:	b460      	st.w      	r3, (r4, 0x0)
    }

#else
    return -EOPNOTSUPP;
#endif
}
1800cff2:	1492      	pop      	r4-r5, r15
        return -EINVAL;
1800cff4:	3000      	movi      	r0, 0
1800cff6:	2815      	subi      	r0, 22
1800cff8:	07fd      	br      	0x1800cff2	// 1800cff2 <csi_kernel_event_clear+0x1e>
        return -EPERM;
1800cffa:	3000      	movi      	r0, 0
1800cffc:	2800      	subi      	r0, 1
1800cffe:	07fa      	br      	0x1800cff2	// 1800cff2 <csi_kernel_event_clear+0x1e>
        return 0;
1800d000:	6c13      	mov      	r0, r4
1800d002:	07f8      	br      	0x1800cff2	// 1800cff2 <csi_kernel_event_clear+0x1e>

1800d004 <csi_kernel_event_wait>:
}

k_status_t csi_kernel_event_wait(k_event_handle_t ev_handle, uint32_t flags,
                                 k_event_opt_t options, uint8_t clr_on_exit,
                                 uint32_t *actl_flags, int32_t timeout)
{
1800d004:	14d1      	push      	r4, r15
1800d006:	1422      	subi      	r14, r14, 8
1800d008:	6f4b      	mov      	r13, r2
1800d00a:	d98e2005 	ld.w      	r12, (r14, 0x14)
1800d00e:	6c8f      	mov      	r2, r3
1800d010:	9864      	ld.w      	r3, (r14, 0x10)
#if (RHINO_CONFIG_EVENT_FLAG > 0)

    if (ev_handle == NULL || actl_flags == NULL
1800d012:	e9000031 	bez      	r0, 0x1800d074	// 1800d074 <csi_kernel_event_wait+0x70>
1800d016:	e903002f 	bez      	r3, 0x1800d074	// 1800d074 <csi_kernel_event_wait+0x70>
        || ((clr_on_exit != 0) && (clr_on_exit != 1))) {
1800d01a:	3a01      	cmphsi      	r2, 2
1800d01c:	082c      	bt      	0x1800d074	// 1800d074 <csi_kernel_event_wait+0x70>
        return -EINVAL;
    }

    if (options == KEVENT_OPT_CLR_ANY || options == KEVENT_OPT_CLR_ALL) {
1800d01e:	e48d1001 	subi      	r4, r13, 2
1800d022:	3c01      	cmphsi      	r4, 2
1800d024:	0c2b      	bf      	0x1800d07a	// 1800d07a <csi_kernel_event_wait+0x76>
        return -EOPNOTSUPP;
    }

    uint8_t opt = 0;

    if (options == KEVENT_OPT_SET_ANY) {
1800d026:	e90d0008 	bez      	r13, 0x1800d036	// 1800d036 <csi_kernel_event_wait+0x32>
        if (clr_on_exit == 1) {
            opt = RHINO_OR_CLEAR;
        } else {
            opt = RHINO_OR;
        }
    } else if (options == KEVENT_OPT_SET_ALL) {
1800d02a:	eb4d0001 	cmpnei      	r13, 1
1800d02e:	081b      	bt      	0x1800d064	// 1800d064 <csi_kernel_event_wait+0x60>
        if (clr_on_exit == 1) {
            opt = RHINO_AND_CLEAR;
        } else {
            opt = RHINO_AND;
1800d030:	3a41      	cmpnei      	r2, 1
1800d032:	6483      	mvcv      	r2
1800d034:	2201      	addi      	r2, 2
        }
    }

    tick_t t;

    if (timeout < 0) {
1800d036:	e98c0019 	blz      	r12, 0x1800d068	// 1800d068 <csi_kernel_event_wait+0x64>
        t = RHINO_WAIT_FOREVER;
    } else {
        t = timeout;
1800d03a:	c7ec488d 	asri      	r13, r12, 31
    }

    kstat_t ret = krhino_event_get(ev_handle, flags, opt, actl_flags, t);
1800d03e:	dd8e2000 	st.w      	r12, (r14, 0x0)
1800d042:	ddae2001 	st.w      	r13, (r14, 0x4)
1800d046:	e0000295 	bsr      	0x1800d570	// 1800d570 <krhino_event_get>

    if (ret == RHINO_SUCCESS) {
1800d04a:	e900000b 	bez      	r0, 0x1800d060	// 1800d060 <csi_kernel_event_wait+0x5c>
        return 0;
    } else if (ret == RHINO_BLK_TIMEOUT) {
        return -ETIMEDOUT;
    } else {
        return -EPERM;
1800d04e:	3200      	movi      	r2, 0
1800d050:	3300      	movi      	r3, 0
1800d052:	eb400192 	cmpnei      	r0, 402
1800d056:	2a6d      	subi      	r2, 110
1800d058:	2b00      	subi      	r3, 1
1800d05a:	c4620c20 	incf      	r3, r2, 0
1800d05e:	6c0f      	mov      	r0, r3
    }

#else
    return -EOPNOTSUPP;
#endif
}
1800d060:	1402      	addi      	r14, r14, 8
1800d062:	1491      	pop      	r4, r15
    uint8_t opt = 0;
1800d064:	3200      	movi      	r2, 0
1800d066:	07e8      	br      	0x1800d036	// 1800d036 <csi_kernel_event_wait+0x32>
        t = RHINO_WAIT_FOREVER;
1800d068:	ea0c0000 	movi      	r12, 0
1800d06c:	e58c1000 	subi      	r12, r12, 1
1800d070:	6f73      	mov      	r13, r12
1800d072:	07e6      	br      	0x1800d03e	// 1800d03e <csi_kernel_event_wait+0x3a>
        return -EINVAL;
1800d074:	3000      	movi      	r0, 0
1800d076:	2815      	subi      	r0, 22
1800d078:	07f4      	br      	0x1800d060	// 1800d060 <csi_kernel_event_wait+0x5c>
        return -EOPNOTSUPP;
1800d07a:	3000      	movi      	r0, 0
1800d07c:	285e      	subi      	r0, 95
1800d07e:	07f1      	br      	0x1800d060	// 1800d060 <csi_kernel_event_wait+0x5c>

1800d080 <csi_kernel_mutex_new>:

k_mutex_handle_t csi_kernel_mutex_new(void)
{
1800d080:	14d1      	push      	r4, r15
    kmutex_t *handle = (kmutex_t *)krhino_mm_alloc(sizeof(kmutex_t), __builtin_return_address(0));
1800d082:	6c7f      	mov      	r1, r15
1800d084:	3028      	movi      	r0, 40
1800d086:	e3ffafb9 	bsr      	0x18002ff8	// 18002ff8 <krhino_mm_alloc>
1800d08a:	6d03      	mov      	r4, r0

    if (handle == NULL) {
1800d08c:	e9000007 	bez      	r0, 0x1800d09a	// 1800d09a <csi_kernel_mutex_new+0x1a>
        return NULL;
    }

    kstat_t ret = krhino_mutex_create(handle, "UserMutex");
1800d090:	1025      	lrw      	r1, 0x18017748	// 1800d0a4 <csi_kernel_mutex_new+0x24>
1800d092:	e000037d 	bsr      	0x1800d78c	// 1800d78c <krhino_mutex_create>

    if (ret == RHINO_SUCCESS) {
1800d096:	e9000004 	bez      	r0, 0x1800d09e	// 1800d09e <csi_kernel_mutex_new+0x1e>
        return handle;
    } else {
        return NULL;
1800d09a:	3000      	movi      	r0, 0
    }
}
1800d09c:	1491      	pop      	r4, r15
1800d09e:	6c13      	mov      	r0, r4
1800d0a0:	07fe      	br      	0x1800d09c	// 1800d09c <csi_kernel_mutex_new+0x1c>
1800d0a2:	0000      	.short	0x0000
1800d0a4:	18017748 	.long	0x18017748

1800d0a8 <csi_kernel_mutex_del>:

k_status_t csi_kernel_mutex_del(k_mutex_handle_t mutex_handle)
{
1800d0a8:	14d2      	push      	r4-r5, r15
1800d0aa:	6d43      	mov      	r5, r0
    if (mutex_handle == NULL) {
1800d0ac:	e900000c 	bez      	r0, 0x1800d0c4	// 1800d0c4 <csi_kernel_mutex_del+0x1c>
        return -EINVAL;
    }

    kstat_t ret = krhino_mutex_del(mutex_handle);
1800d0b0:	e00003ac 	bsr      	0x1800d808	// 1800d808 <krhino_mutex_del>
1800d0b4:	6d03      	mov      	r4, r0

    if (ret == RHINO_SUCCESS) {
1800d0b6:	e920000a 	bnez      	r0, 0x1800d0ca	// 1800d0ca <csi_kernel_mutex_del+0x22>
        krhino_mm_free(mutex_handle);
1800d0ba:	6c17      	mov      	r0, r5
1800d0bc:	e3ffafa8 	bsr      	0x1800300c	// 1800300c <krhino_mm_free>
        return 0;
1800d0c0:	6c13      	mov      	r0, r4
    } else {
        return -EPERM;
    }
}
1800d0c2:	1492      	pop      	r4-r5, r15
        return -EINVAL;
1800d0c4:	3000      	movi      	r0, 0
1800d0c6:	2815      	subi      	r0, 22
1800d0c8:	07fd      	br      	0x1800d0c2	// 1800d0c2 <csi_kernel_mutex_del+0x1a>
        return -EPERM;
1800d0ca:	3000      	movi      	r0, 0
1800d0cc:	2800      	subi      	r0, 1
1800d0ce:	07fa      	br      	0x1800d0c2	// 1800d0c2 <csi_kernel_mutex_del+0x1a>

1800d0d0 <csi_kernel_mutex_lock>:

k_status_t csi_kernel_mutex_lock(k_mutex_handle_t mutex_handle, int32_t timeout)
{
1800d0d0:	14d0      	push      	r15
    if (mutex_handle == NULL) {
1800d0d2:	e900001a 	bez      	r0, 0x1800d106	// 1800d106 <csi_kernel_mutex_lock+0x36>
        return -EINVAL;
    }

    tick_t t;

    if (timeout < 0) {
1800d0d6:	e9810014 	blz      	r1, 0x1800d0fe	// 1800d0fe <csi_kernel_mutex_lock+0x2e>
        t = RHINO_WAIT_FOREVER;
    } else {
        t = timeout;
1800d0da:	515f      	asri      	r2, r1, 31
    }

    kstat_t ret = krhino_mutex_lock(mutex_handle, t);
1800d0dc:	e00003e6 	bsr      	0x1800d8a8	// 1800d8a8 <krhino_mutex_lock>

    if (ret == RHINO_SUCCESS || ret == RHINO_MUTEX_OWNER_NESTED) {
1800d0e0:	e900000e 	bez      	r0, 0x1800d0fc	// 1800d0fc <csi_kernel_mutex_lock+0x2c>
1800d0e4:	eb400385 	cmpnei      	r0, 901
1800d0e8:	0c12      	bf      	0x1800d10c	// 1800d10c <csi_kernel_mutex_lock+0x3c>
        return 0;
    } else if (ret == RHINO_BLK_TIMEOUT) {
        return -ETIMEDOUT;
    } else {
        return -EPERM;
1800d0ea:	3200      	movi      	r2, 0
1800d0ec:	3300      	movi      	r3, 0
1800d0ee:	eb400192 	cmpnei      	r0, 402
1800d0f2:	2a6d      	subi      	r2, 110
1800d0f4:	2b00      	subi      	r3, 1
1800d0f6:	c4620c20 	incf      	r3, r2, 0
1800d0fa:	6c0f      	mov      	r0, r3
    }
}
1800d0fc:	1490      	pop      	r15
        t = RHINO_WAIT_FOREVER;
1800d0fe:	3100      	movi      	r1, 0
1800d100:	2900      	subi      	r1, 1
1800d102:	6c87      	mov      	r2, r1
1800d104:	07ec      	br      	0x1800d0dc	// 1800d0dc <csi_kernel_mutex_lock+0xc>
        return -EINVAL;
1800d106:	3000      	movi      	r0, 0
1800d108:	2815      	subi      	r0, 22
1800d10a:	07f9      	br      	0x1800d0fc	// 1800d0fc <csi_kernel_mutex_lock+0x2c>
        return 0;
1800d10c:	3000      	movi      	r0, 0
1800d10e:	07f7      	br      	0x1800d0fc	// 1800d0fc <csi_kernel_mutex_lock+0x2c>

1800d110 <csi_kernel_mutex_unlock>:

k_status_t csi_kernel_mutex_unlock(k_mutex_handle_t mutex_handle)
{
1800d110:	14d0      	push      	r15
    if (mutex_handle == NULL) {
1800d112:	e900000d 	bez      	r0, 0x1800d12c	// 1800d12c <csi_kernel_mutex_unlock+0x1c>
        return -EINVAL;
    }

    kstat_t ret = krhino_mutex_unlock(mutex_handle);
1800d116:	e0000447 	bsr      	0x1800d9a4	// 1800d9a4 <krhino_mutex_unlock>

    if (ret == RHINO_SUCCESS || ret == RHINO_MUTEX_OWNER_NESTED) {
1800d11a:	e9000008 	bez      	r0, 0x1800d12a	// 1800d12a <csi_kernel_mutex_unlock+0x1a>
1800d11e:	eb400385 	cmpnei      	r0, 901
1800d122:	c4000503 	mvc      	r3
1800d126:	3000      	movi      	r0, 0
1800d128:	600e      	subu      	r0, r3
        return 0;
    } else {
        return -EPERM;
    }
}
1800d12a:	1490      	pop      	r15
        return -EINVAL;
1800d12c:	3000      	movi      	r0, 0
1800d12e:	2815      	subi      	r0, 22
1800d130:	07fd      	br      	0x1800d12a	// 1800d12a <csi_kernel_mutex_unlock+0x1a>
	...

1800d134 <csi_kernel_sem_new>:
    kmutex_t *handle = (kmutex_t *)mutex_handle;
    return  handle->mutex_task;
}

k_sem_handle_t csi_kernel_sem_new(int32_t max_count, int32_t initial_count)
{
1800d134:	14d2      	push      	r4-r5, r15
1800d136:	6d47      	mov      	r5, r1
    if (max_count <= 0 || initial_count < 0) {
1800d138:	e9600013 	blsz      	r0, 0x1800d15e	// 1800d15e <csi_kernel_sem_new+0x2a>
1800d13c:	e9810011 	blz      	r1, 0x1800d15e	// 1800d15e <csi_kernel_sem_new+0x2a>
        return NULL;
    }

    if (max_count < initial_count) {
1800d140:	6441      	cmplt      	r0, r1
1800d142:	080e      	bt      	0x1800d15e	// 1800d15e <csi_kernel_sem_new+0x2a>
        return NULL;
    }

    ksem_t *handle = (ksem_t *)krhino_mm_alloc(sizeof(ksem_t), __builtin_return_address(0));
1800d144:	6c7f      	mov      	r1, r15
1800d146:	3024      	movi      	r0, 36
1800d148:	e3ffaf58 	bsr      	0x18002ff8	// 18002ff8 <krhino_mm_alloc>
1800d14c:	6d03      	mov      	r4, r0

    if (handle == NULL) {
1800d14e:	e9000008 	bez      	r0, 0x1800d15e	// 1800d15e <csi_kernel_sem_new+0x2a>
        return NULL;
    }

    kstat_t ret = krhino_sem_create(handle, "UserSem", initial_count);
1800d152:	6c97      	mov      	r2, r5
1800d154:	1025      	lrw      	r1, 0x18017752	// 1800d168 <csi_kernel_sem_new+0x34>
1800d156:	e0000875 	bsr      	0x1800e240	// 1800e240 <krhino_sem_create>

    if (ret == RHINO_SUCCESS) {
1800d15a:	e9000004 	bez      	r0, 0x1800d162	// 1800d162 <csi_kernel_sem_new+0x2e>
        return handle;
    } else {
        return NULL;
1800d15e:	3000      	movi      	r0, 0
    }
}
1800d160:	1492      	pop      	r4-r5, r15
1800d162:	6c13      	mov      	r0, r4
1800d164:	07fe      	br      	0x1800d160	// 1800d160 <csi_kernel_sem_new+0x2c>
1800d166:	0000      	.short	0x0000
1800d168:	18017752 	.long	0x18017752

1800d16c <csi_kernel_sem_del>:

k_status_t csi_kernel_sem_del(k_sem_handle_t sem_handle)
{
1800d16c:	14d2      	push      	r4-r5, r15
1800d16e:	6d43      	mov      	r5, r0
    if (sem_handle == NULL) {
1800d170:	e900000c 	bez      	r0, 0x1800d188	// 1800d188 <csi_kernel_sem_del+0x1c>
        return -EINVAL;
    }

    kstat_t ret = krhino_sem_del(sem_handle);
1800d174:	e000088c 	bsr      	0x1800e28c	// 1800e28c <krhino_sem_del>
1800d178:	6d03      	mov      	r4, r0

    if (ret == RHINO_SUCCESS) {
1800d17a:	e920000a 	bnez      	r0, 0x1800d18e	// 1800d18e <csi_kernel_sem_del+0x22>
        krhino_mm_free(sem_handle);
1800d17e:	6c17      	mov      	r0, r5
1800d180:	e3ffaf46 	bsr      	0x1800300c	// 1800300c <krhino_mm_free>
        return 0;
1800d184:	6c13      	mov      	r0, r4
    } else {
        return -EPERM;
    }
}
1800d186:	1492      	pop      	r4-r5, r15
        return -EINVAL;
1800d188:	3000      	movi      	r0, 0
1800d18a:	2815      	subi      	r0, 22
1800d18c:	07fd      	br      	0x1800d186	// 1800d186 <csi_kernel_sem_del+0x1a>
        return -EPERM;
1800d18e:	3000      	movi      	r0, 0
1800d190:	2800      	subi      	r0, 1
1800d192:	07fa      	br      	0x1800d186	// 1800d186 <csi_kernel_sem_del+0x1a>

1800d194 <csi_kernel_sem_wait>:

k_status_t csi_kernel_sem_wait(k_sem_handle_t sem_handle, int32_t timeout)
{
1800d194:	14d0      	push      	r15
    if (sem_handle == NULL) {
1800d196:	e9000017 	bez      	r0, 0x1800d1c4	// 1800d1c4 <csi_kernel_sem_wait+0x30>
        return -EINVAL;
    }

    tick_t t;

    if (timeout < 0) {
1800d19a:	e9810011 	blz      	r1, 0x1800d1bc	// 1800d1bc <csi_kernel_sem_wait+0x28>
        t = RHINO_WAIT_FOREVER;
    } else {
        t = timeout;
1800d19e:	515f      	asri      	r2, r1, 31
    }

    kstat_t ret = krhino_sem_take(sem_handle, t);
1800d1a0:	e00008b8 	bsr      	0x1800e310	// 1800e310 <krhino_sem_take>

    if (ret == RHINO_SUCCESS) {
1800d1a4:	e900000b 	bez      	r0, 0x1800d1ba	// 1800d1ba <csi_kernel_sem_wait+0x26>
        return 0;
    } else  if (ret == RHINO_BLK_TIMEOUT) {
        return -ETIMEDOUT;
    } else {
        return -EPERM;
1800d1a8:	3200      	movi      	r2, 0
1800d1aa:	3300      	movi      	r3, 0
1800d1ac:	eb400192 	cmpnei      	r0, 402
1800d1b0:	2a6d      	subi      	r2, 110
1800d1b2:	2b00      	subi      	r3, 1
1800d1b4:	c4620c20 	incf      	r3, r2, 0
1800d1b8:	6c0f      	mov      	r0, r3
    }
}
1800d1ba:	1490      	pop      	r15
        t = RHINO_WAIT_FOREVER;
1800d1bc:	3100      	movi      	r1, 0
1800d1be:	2900      	subi      	r1, 1
1800d1c0:	6c87      	mov      	r2, r1
1800d1c2:	07ef      	br      	0x1800d1a0	// 1800d1a0 <csi_kernel_sem_wait+0xc>
        return -EINVAL;
1800d1c4:	3000      	movi      	r0, 0
1800d1c6:	2815      	subi      	r0, 22
1800d1c8:	07f9      	br      	0x1800d1ba	// 1800d1ba <csi_kernel_sem_wait+0x26>
	...

1800d1cc <csi_kernel_sem_post>:

k_status_t csi_kernel_sem_post(k_sem_handle_t sem_handle)
{
1800d1cc:	14d0      	push      	r15
    if (sem_handle == NULL) {
1800d1ce:	e900000a 	bez      	r0, 0x1800d1e2	// 1800d1e2 <csi_kernel_sem_post+0x16>
        return -EINVAL;
    }

    kstat_t ret = krhino_sem_give(sem_handle);
1800d1d2:	e0000895 	bsr      	0x1800e2fc	// 1800e2fc <krhino_sem_give>

    if (ret == RHINO_SUCCESS) {
1800d1d6:	3840      	cmpnei      	r0, 0
1800d1d8:	c4000503 	mvc      	r3
1800d1dc:	3000      	movi      	r0, 0
1800d1de:	600e      	subu      	r0, r3
        return 0;
    } else {
        return -EPERM;
    }
}
1800d1e0:	1490      	pop      	r15
        return -EINVAL;
1800d1e2:	3000      	movi      	r0, 0
1800d1e4:	2815      	subi      	r0, 22
1800d1e6:	07fd      	br      	0x1800d1e0	// 1800d1e0 <csi_kernel_sem_post+0x14>

1800d1e8 <buf_queue_create>:

#if (RHINO_CONFIG_BUF_QUEUE > 0)

static kstat_t buf_queue_create(kbuf_queue_t *queue, const name_t *name,
                                void *buf, size_t size, size_t max_msg, uint8_t mm_alloc_flag, size_t type)
{
1800d1e8:	14d5      	push      	r4-r8, r15
1800d1ea:	1422      	subi      	r14, r14, 8
1800d1ec:	6e0f      	mov      	r8, r3
1800d1ee:	986a      	ld.w      	r3, (r14, 0x28)
1800d1f0:	b861      	st.w      	r3, (r14, 0x4)
1800d1f2:	6d03      	mov      	r4, r0
1800d1f4:	6d8b      	mov      	r6, r2
1800d1f6:	98e8      	ld.w      	r7, (r14, 0x20)
1800d1f8:	d86e0024 	ld.b      	r3, (r14, 0x24)
    CPSR_ALLOC();

    NULL_PARA_CHK(queue);
1800d1fc:	e9000033 	bez      	r0, 0x1800d262	// 1800d262 <buf_queue_create+0x7a>
    NULL_PARA_CHK(buf);
1800d200:	e9020031 	bez      	r2, 0x1800d262	// 1800d262 <buf_queue_create+0x7a>
    NULL_PARA_CHK(name);
1800d204:	e901002f 	bez      	r1, 0x1800d262	// 1800d262 <buf_queue_create+0x7a>

    if (max_msg == 0u) {
1800d208:	e907002f 	bez      	r7, 0x1800d266	// 1800d266 <buf_queue_create+0x7e>
        return RHINO_INV_PARAM;
    }

    if (size == 0u) {
1800d20c:	e908002f 	bez      	r8, 0x1800d26a	// 1800d26a <buf_queue_create+0x82>

    /* init the queue blocked list */
    klist_init(&queue->blk_obj.blk_list);

    queue->buf                = buf;
    queue->cur_num            = 0u;
1800d210:	3500      	movi      	r5, 0
    queue->buf                = buf;
1800d212:	b444      	st.w      	r2, (r4, 0x10)

#define krhino_list_entry(node, type, member) ((type *)((uint8_t *)(node) - (size_t)(&((type *)0)->member)))

RHINO_INLINE void klist_init(klist_t *list_head)
{
    list_head->next = list_head;
1800d214:	b400      	st.w      	r0, (r4, 0x0)
    list_head->prev = list_head;
1800d216:	b401      	st.w      	r0, (r4, 0x4)
    queue->peak_num           = 0u;
    queue->max_msg_size       = max_msg;
    queue->blk_obj.name       = name;
1800d218:	b022      	st.w      	r1, (r0, 0x8)
    queue->blk_obj.blk_policy = BLK_POLICY_PRI;
    queue->mm_alloc_flag      = mm_alloc_flag;
1800d21a:	dc600048 	st.b      	r3, (r0, 0x48)
    queue->cur_num            = 0u;
1800d21e:	b0ad      	st.w      	r5, (r0, 0x34)
    queue->peak_num           = 0u;
1800d220:	b0ae      	st.w      	r5, (r0, 0x38)
    queue->max_msg_size       = max_msg;
1800d222:	b0ec      	st.w      	r7, (r0, 0x30)
    queue->blk_obj.blk_policy = BLK_POLICY_PRI;
1800d224:	a0ac      	st.b      	r5, (r0, 0xc)

    RHINO_CRITICAL_ENTER();
1800d226:	e3ff9bcd 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
    return (list->next == list);
}

RHINO_INLINE void klist_insert(klist_t *head, klist_t *element)
{
    element->prev = head->prev;
1800d22a:	1072      	lrw      	r3, 0x20002530	// 1800d270 <buf_queue_create+0x88>
#if (RHINO_CONFIG_SYSTEM_STATS > 0)
    klist_insert(&(g_kobj_list.buf_queue_head), &queue->buf_queue_item);
1800d22c:	e444003f 	addi      	r2, r4, 64
1800d230:	932d      	ld.w      	r1, (r3, 0x34)
    element->next = head;
1800d232:	e583002f 	addi      	r12, r3, 48
    element->prev = head->prev;
1800d236:	b431      	st.w      	r1, (r4, 0x44)
    element->next = head;
1800d238:	dd842010 	st.w      	r12, (r4, 0x40)

    head->prev->next = element;
1800d23c:	b140      	st.w      	r2, (r1, 0x0)
    head->prev       = element;
1800d23e:	b34d      	st.w      	r2, (r3, 0x34)
#endif
    RHINO_CRITICAL_EXIT();
1800d240:	e3ff9bc5 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>

    queue->blk_obj.obj_type = RHINO_BUF_QUEUE_OBJ_TYPE;
1800d244:	3304      	movi      	r3, 4
1800d246:	a46d      	st.b      	r3, (r4, 0xd)

    ringbuf_init(&(queue->ringbuf), buf, size, type, max_msg);
1800d248:	b8e0      	st.w      	r7, (r14, 0x0)
1800d24a:	9861      	ld.w      	r3, (r14, 0x4)
1800d24c:	6ca3      	mov      	r2, r8
1800d24e:	6c5b      	mov      	r1, r6
1800d250:	e4040013 	addi      	r0, r4, 20
1800d254:	e000061e 	bsr      	0x1800de90	// 1800de90 <ringbuf_init>
    queue->min_free_buf_size  = queue->ringbuf.freesize;
1800d258:	9469      	ld.w      	r3, (r4, 0x24)
1800d25a:	b46f      	st.w      	r3, (r4, 0x3c)
1800d25c:	6c17      	mov      	r0, r5
    TRACE_BUF_QUEUE_CREATE(krhino_cur_task_get(), queue);

    return RHINO_SUCCESS;
}
1800d25e:	1402      	addi      	r14, r14, 8
1800d260:	1495      	pop      	r4-r8, r15
    NULL_PARA_CHK(queue);
1800d262:	3006      	movi      	r0, 6
1800d264:	07fd      	br      	0x1800d25e	// 1800d25e <buf_queue_create+0x76>
        return RHINO_INV_PARAM;
1800d266:	3005      	movi      	r0, 5
1800d268:	07fb      	br      	0x1800d25e	// 1800d25e <buf_queue_create+0x76>
        return RHINO_BUF_QUEUE_SIZE_ZERO;
1800d26a:	ea0002bd 	movi      	r0, 701
1800d26e:	07f8      	br      	0x1800d25e	// 1800d25e <buf_queue_create+0x76>
1800d270:	20002530 	.long	0x20002530

1800d274 <krhino_fix_buf_queue_create>:
    return buf_queue_create(queue, name, buf, size, max_msg, K_OBJ_STATIC_ALLOC, RINGBUF_TYPE_DYN);
}

kstat_t krhino_fix_buf_queue_create(kbuf_queue_t *queue, const name_t *name,
                                   void *buf, size_t msg_size, size_t msg_num)
{
1800d274:	14d0      	push      	r15
1800d276:	1423      	subi      	r14, r14, 12
    return buf_queue_create(queue, name, buf, msg_size * msg_num, msg_size, K_OBJ_STATIC_ALLOC, RINGBUF_TYPE_FIX);
1800d278:	ea0d0000 	movi      	r13, 0
{
1800d27c:	d98e2004 	ld.w      	r12, (r14, 0x10)
    return buf_queue_create(queue, name, buf, msg_size * msg_num, msg_size, K_OBJ_STATIC_ALLOC, RINGBUF_TYPE_FIX);
1800d280:	ddae2002 	st.w      	r13, (r14, 0x8)
1800d284:	ea0d0001 	movi      	r13, 1
1800d288:	b860      	st.w      	r3, (r14, 0x0)
1800d28a:	ddae2001 	st.w      	r13, (r14, 0x4)
1800d28e:	7cf0      	mult      	r3, r12
1800d290:	e3ffffac 	bsr      	0x1800d1e8	// 1800d1e8 <buf_queue_create>
}
1800d294:	1403      	addi      	r14, r14, 12
1800d296:	1490      	pop      	r15

1800d298 <krhino_buf_queue_send>:

    return RHINO_SUCCESS;
}

kstat_t krhino_buf_queue_send(kbuf_queue_t *queue, void *msg, size_t size)
{
1800d298:	14d3      	push      	r4-r6, r15
1800d29a:	1421      	subi      	r14, r14, 4
1800d29c:	6d03      	mov      	r4, r0
1800d29e:	6d4b      	mov      	r5, r2
    NULL_PARA_CHK(queue);
1800d2a0:	e9000056 	bez      	r0, 0x1800d34c	// 1800d34c <krhino_buf_queue_send+0xb4>
    NULL_PARA_CHK(msg);
1800d2a4:	b820      	st.w      	r1, (r14, 0x0)
1800d2a6:	e9010053 	bez      	r1, 0x1800d34c	// 1800d34c <krhino_buf_queue_send+0xb4>
    RHINO_CRITICAL_ENTER();
1800d2aa:	e3ff9b8b 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
    if (queue->blk_obj.obj_type != RHINO_BUF_QUEUE_OBJ_TYPE) {
1800d2ae:	846d      	ld.b      	r3, (r4, 0xd)
1800d2b0:	3b44      	cmpnei      	r3, 4
    RHINO_CRITICAL_ENTER();
1800d2b2:	6d83      	mov      	r6, r0
    if (queue->blk_obj.obj_type != RHINO_BUF_QUEUE_OBJ_TYPE) {
1800d2b4:	9820      	ld.w      	r1, (r14, 0x0)
1800d2b6:	0c07      	bf      	0x1800d2c4	// 1800d2c4 <krhino_buf_queue_send+0x2c>
        RHINO_CRITICAL_EXIT();
1800d2b8:	e3ff9b89 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_KOBJ_TYPE_ERR;
1800d2bc:	3508      	movi      	r5, 8

    return buf_queue_send(queue, msg, size);
}
1800d2be:	6c17      	mov      	r0, r5
1800d2c0:	1401      	addi      	r14, r14, 4
1800d2c2:	1493      	pop      	r4-r6, r15
    if (msg_size > queue->max_msg_size) {
1800d2c4:	946c      	ld.w      	r3, (r4, 0x30)
1800d2c6:	654c      	cmphs      	r3, r5
1800d2c8:	0806      	bt      	0x1800d2d4	// 1800d2d4 <krhino_buf_queue_send+0x3c>
        RHINO_CRITICAL_EXIT();
1800d2ca:	e3ff9b80 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_BUF_QUEUE_MSG_SIZE_OVERFLOW;
1800d2ce:	ea0502bf 	movi      	r5, 703
1800d2d2:	07f6      	br      	0x1800d2be	// 1800d2be <krhino_buf_queue_send+0x26>
    if (msg_size == 0) {
1800d2d4:	e9250006 	bnez      	r5, 0x1800d2e0	// 1800d2e0 <krhino_buf_queue_send+0x48>
        RHINO_CRITICAL_EXIT();
1800d2d8:	e3ff9b79 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_INV_PARAM;
1800d2dc:	3505      	movi      	r5, 5
1800d2de:	07f0      	br      	0x1800d2be	// 1800d2be <krhino_buf_queue_send+0x26>
    return (list->next == list);
1800d2e0:	9460      	ld.w      	r3, (r4, 0x0)
    if (is_klist_empty(head)) {
1800d2e2:	64d2      	cmpne      	r4, r3
1800d2e4:	0823      	bt      	0x1800d32a	// 1800d32a <krhino_buf_queue_send+0x92>
        err = ringbuf_push(&(queue->ringbuf), msg, msg_size);
1800d2e6:	6c97      	mov      	r2, r5
1800d2e8:	e4040013 	addi      	r0, r4, 20
1800d2ec:	e0000470 	bsr      	0x1800dbcc	// 1800dbcc <ringbuf_push>
1800d2f0:	6d43      	mov      	r5, r0
        if (err != RHINO_SUCCESS) {
1800d2f2:	e900000c 	bez      	r0, 0x1800d30a	// 1800d30a <krhino_buf_queue_send+0x72>
            RHINO_CRITICAL_EXIT();
1800d2f6:	6c1b      	mov      	r0, r6
1800d2f8:	e3ff9b69 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
                err =  RHINO_BUF_QUEUE_FULL;
1800d2fc:	eb45006a 	cmpnei      	r5, 106
1800d300:	ea0302be 	movi      	r3, 702
1800d304:	c4a30c20 	incf      	r5, r3, 0
1800d308:	07db      	br      	0x1800d2be	// 1800d2be <krhino_buf_queue_send+0x26>
        queue->cur_num ++;
1800d30a:	946d      	ld.w      	r3, (r4, 0x34)
1800d30c:	2300      	addi      	r3, 1
        if (queue->peak_num  < queue->cur_num) {
1800d30e:	944e      	ld.w      	r2, (r4, 0x38)
1800d310:	64c8      	cmphs      	r2, r3
        queue->cur_num ++;
1800d312:	b46d      	st.w      	r3, (r4, 0x34)
        if (queue->peak_num  < queue->cur_num) {
1800d314:	0802      	bt      	0x1800d318	// 1800d318 <krhino_buf_queue_send+0x80>
            queue->peak_num  = queue->cur_num;
1800d316:	b46e      	st.w      	r3, (r4, 0x38)
        if (queue->min_free_buf_size > queue->ringbuf.freesize) {
1800d318:	9469      	ld.w      	r3, (r4, 0x24)
1800d31a:	944f      	ld.w      	r2, (r4, 0x3c)
1800d31c:	648c      	cmphs      	r3, r2
1800d31e:	0802      	bt      	0x1800d322	// 1800d322 <krhino_buf_queue_send+0x8a>
            queue->min_free_buf_size = queue->ringbuf.freesize;
1800d320:	b46f      	st.w      	r3, (r4, 0x3c)
        RHINO_CRITICAL_EXIT();
1800d322:	6c1b      	mov      	r0, r6
1800d324:	e3ff9b53 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800d328:	07cb      	br      	0x1800d2be	// 1800d2be <krhino_buf_queue_send+0x26>
    task = krhino_list_entry(head->next, ktask_t, task_list);
1800d32a:	e483100b 	subi      	r4, r3, 12
    memcpy(task->msg, msg, msg_size);
1800d32e:	6c97      	mov      	r2, r5
1800d330:	930d      	ld.w      	r0, (r3, 0x34)
1800d332:	e0004595 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
    task->bq_msg_size = msg_size;
1800d336:	b4b1      	st.w      	r5, (r4, 0x44)
    pend_task_wakeup(task);
1800d338:	6c13      	mov      	r0, r4
1800d33a:	e00003a3 	bsr      	0x1800da80	// 1800da80 <pend_task_wakeup>
    RHINO_CRITICAL_EXIT_SCHED();
1800d33e:	6c1b      	mov      	r0, r6
1800d340:	e3ff9b45 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800d344:	e000062e 	bsr      	0x1800dfa0	// 1800dfa0 <core_sched>
    return RHINO_SUCCESS;
1800d348:	3500      	movi      	r5, 0
1800d34a:	07ba      	br      	0x1800d2be	// 1800d2be <krhino_buf_queue_send+0x26>
    NULL_PARA_CHK(queue);
1800d34c:	3506      	movi      	r5, 6
1800d34e:	07b8      	br      	0x1800d2be	// 1800d2be <krhino_buf_queue_send+0x26>

1800d350 <krhino_buf_queue_recv>:

kstat_t krhino_buf_queue_recv(kbuf_queue_t *queue, tick_t ticks, void *msg,
                              size_t *size)
{
1800d350:	14d8      	push      	r4-r11, r15
1800d352:	1421      	subi      	r14, r14, 4
1800d354:	6d83      	mov      	r6, r0
1800d356:	6e87      	mov      	r10, r1
1800d358:	6e4b      	mov      	r9, r2
1800d35a:	6ecf      	mov      	r11, r3
1800d35c:	98aa      	ld.w      	r5, (r14, 0x28)
    CPSR_ALLOC();

    kstat_t ret;
    uint8_t cur_cpu_num;

    NULL_PARA_CHK(queue);
1800d35e:	e9000072 	bez      	r0, 0x1800d442	// 1800d442 <krhino_buf_queue_recv+0xf2>
    NULL_PARA_CHK(msg);
1800d362:	e9030070 	bez      	r3, 0x1800d442	// 1800d442 <krhino_buf_queue_recv+0xf2>
    NULL_PARA_CHK(size);
1800d366:	e905006e 	bez      	r5, 0x1800d442	// 1800d442 <krhino_buf_queue_recv+0xf2>

    RHINO_CRITICAL_ENTER();
1800d36a:	e3ff9b2b 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>

    cur_cpu_num = cpu_cur_get();

    if ((g_intrpt_nested_level[cur_cpu_num] > 0u) && (ticks != RHINO_NO_WAIT)) {
1800d36e:	1177      	lrw      	r3, 0x20002841	// 1800d448 <krhino_buf_queue_recv+0xf8>
    RHINO_CRITICAL_ENTER();
1800d370:	6dc3      	mov      	r7, r0
    if ((g_intrpt_nested_level[cur_cpu_num] > 0u) && (ticks != RHINO_NO_WAIT)) {
1800d372:	8360      	ld.b      	r3, (r3, 0x0)
1800d374:	e903000d 	bez      	r3, 0x1800d38e	// 1800d38e <krhino_buf_queue_recv+0x3e>
1800d378:	c52a2423 	or      	r3, r10, r9
1800d37c:	e9030009 	bez      	r3, 0x1800d38e	// 1800d38e <krhino_buf_queue_recv+0x3e>
        RHINO_CRITICAL_EXIT();
1800d380:	e3ff9b25 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_NOT_CALLED_BY_INTRPT;
1800d384:	ea0403ea 	movi      	r4, 1002
    }

    RHINO_CPU_INTRPT_ENABLE();

    return ret;
}
1800d388:	6c13      	mov      	r0, r4
1800d38a:	1401      	addi      	r14, r14, 4
1800d38c:	1498      	pop      	r4-r11, r15
    if (queue->blk_obj.obj_type != RHINO_BUF_QUEUE_OBJ_TYPE) {
1800d38e:	866d      	ld.b      	r3, (r6, 0xd)
1800d390:	3b44      	cmpnei      	r3, 4
1800d392:	0c06      	bf      	0x1800d39e	// 1800d39e <krhino_buf_queue_recv+0x4e>
        RHINO_CRITICAL_EXIT();
1800d394:	6c1f      	mov      	r0, r7
1800d396:	e3ff9b1a 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_KOBJ_TYPE_ERR;
1800d39a:	3408      	movi      	r4, 8
1800d39c:	07f6      	br      	0x1800d388	// 1800d388 <krhino_buf_queue_recv+0x38>
    if (!ringbuf_is_empty(&(queue->ringbuf))) {
1800d39e:	e5060013 	addi      	r8, r6, 20
1800d3a2:	6c23      	mov      	r0, r8
1800d3a4:	e00004c8 	bsr      	0x1800dd34	// 1800dd34 <ringbuf_is_empty>
1800d3a8:	6d03      	mov      	r4, r0
1800d3aa:	e920000e 	bnez      	r0, 0x1800d3c6	// 1800d3c6 <krhino_buf_queue_recv+0x76>
        ringbuf_pop(&(queue->ringbuf), msg, size);
1800d3ae:	6c97      	mov      	r2, r5
1800d3b0:	6c6f      	mov      	r1, r11
1800d3b2:	6c23      	mov      	r0, r8
1800d3b4:	e00004c8 	bsr      	0x1800dd44	// 1800dd44 <ringbuf_pop>
        queue->cur_num --;
1800d3b8:	966d      	ld.w      	r3, (r6, 0x34)
1800d3ba:	2b00      	subi      	r3, 1
1800d3bc:	b66d      	st.w      	r3, (r6, 0x34)
        RHINO_CRITICAL_EXIT();
1800d3be:	6c1f      	mov      	r0, r7
    RHINO_CPU_INTRPT_ENABLE();
1800d3c0:	e3ff9b05 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
    return ret;
1800d3c4:	07e2      	br      	0x1800d388	// 1800d388 <krhino_buf_queue_recv+0x38>
    if (ticks == RHINO_NO_WAIT) {
1800d3c6:	c52a2423 	or      	r3, r10, r9
1800d3ca:	e9230009 	bnez      	r3, 0x1800d3dc	// 1800d3dc <krhino_buf_queue_recv+0x8c>
        *size = 0u;
1800d3ce:	b560      	st.w      	r3, (r5, 0x0)
        RHINO_CRITICAL_EXIT();
1800d3d0:	6c1f      	mov      	r0, r7
        return RHINO_NO_PEND_WAIT;
1800d3d2:	34c8      	movi      	r4, 200
        RHINO_CRITICAL_EXIT();
1800d3d4:	e3ff9afb 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_NO_PEND_WAIT;
1800d3d8:	4481      	lsli      	r4, r4, 1
1800d3da:	07d7      	br      	0x1800d388	// 1800d388 <krhino_buf_queue_recv+0x38>
    if (g_sched_lock[cur_cpu_num] > 0u) {
1800d3dc:	107c      	lrw      	r3, 0x20002944	// 1800d44c <krhino_buf_queue_recv+0xfc>
1800d3de:	d9830000 	ld.b      	r12, (r3, 0x0)
1800d3e2:	e90c0009 	bez      	r12, 0x1800d3f4	// 1800d3f4 <krhino_buf_queue_recv+0xa4>
        *size = 0u;
1800d3e6:	3300      	movi      	r3, 0
1800d3e8:	b560      	st.w      	r3, (r5, 0x0)
        RHINO_CRITICAL_EXIT();
1800d3ea:	6c1f      	mov      	r0, r7
1800d3ec:	e3ff9aef 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_SCHED_DISABLE;
1800d3f0:	34c8      	movi      	r4, 200
1800d3f2:	07cb      	br      	0x1800d388	// 1800d388 <krhino_buf_queue_recv+0x38>
    g_active_task[cur_cpu_num]->msg = msg;
1800d3f4:	ea880017 	lrw      	r8, 0x20002828	// 1800d450 <krhino_buf_queue_recv+0x100>
    pend_to_blk_obj((blk_obj_t *)queue, g_active_task[cur_cpu_num], ticks);
1800d3f8:	6cab      	mov      	r2, r10
    g_active_task[cur_cpu_num]->msg = msg;
1800d3fa:	d8282000 	ld.w      	r1, (r8, 0x0)
    pend_to_blk_obj((blk_obj_t *)queue, g_active_task[cur_cpu_num], ticks);
1800d3fe:	6ce7      	mov      	r3, r9
    g_active_task[cur_cpu_num]->msg = msg;
1800d400:	dd612010 	st.w      	r11, (r1, 0x40)
    pend_to_blk_obj((blk_obj_t *)queue, g_active_task[cur_cpu_num], ticks);
1800d404:	6c1b      	mov      	r0, r6
1800d406:	dd8e2000 	st.w      	r12, (r14, 0x0)
1800d40a:	e000035d 	bsr      	0x1800dac4	// 1800dac4 <pend_to_blk_obj>
    RHINO_CRITICAL_EXIT_SCHED();
1800d40e:	6c1f      	mov      	r0, r7
1800d410:	e3ff9add 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800d414:	e00005c6 	bsr      	0x1800dfa0	// 1800dfa0 <core_sched>
    RHINO_CPU_INTRPT_DISABLE();
1800d418:	e3ff9ad4 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
1800d41c:	6d83      	mov      	r6, r0
    ret = pend_state_end_proc(g_active_task[cur_cpu_num]);
1800d41e:	d8082000 	ld.w      	r0, (r8, 0x0)
1800d422:	e00003ab 	bsr      	0x1800db78	// 1800db78 <pend_state_end_proc>
1800d426:	6d03      	mov      	r4, r0
    switch (ret) {
1800d428:	d98e2000 	ld.w      	r12, (r14, 0x0)
1800d42c:	e9200008 	bnez      	r0, 0x1800d43c	// 1800d43c <krhino_buf_queue_recv+0xec>
            *size = g_active_task[cur_cpu_num]->bq_msg_size;
1800d430:	d8682000 	ld.w      	r3, (r8, 0x0)
1800d434:	9371      	ld.w      	r3, (r3, 0x44)
1800d436:	b560      	st.w      	r3, (r5, 0x0)
    RHINO_CPU_INTRPT_ENABLE();
1800d438:	6c1b      	mov      	r0, r6
1800d43a:	07c3      	br      	0x1800d3c0	// 1800d3c0 <krhino_buf_queue_recv+0x70>
            *size = 0u;
1800d43c:	dd852000 	st.w      	r12, (r5, 0x0)
            break;
1800d440:	07fc      	br      	0x1800d438	// 1800d438 <krhino_buf_queue_recv+0xe8>
    NULL_PARA_CHK(queue);
1800d442:	3406      	movi      	r4, 6
1800d444:	07a2      	br      	0x1800d388	// 1800d388 <krhino_buf_queue_recv+0x38>
1800d446:	0000      	.short	0x0000
1800d448:	20002841 	.long	0x20002841
1800d44c:	20002944 	.long	0x20002944
1800d450:	20002828 	.long	0x20002828

1800d454 <dyn_mem_proc_task>:

#include <k_api.h>

#if (RHINO_CONFIG_KOBJ_DYN_ALLOC > 0)
void dyn_mem_proc_task(void *arg)
{
1800d454:	14d2      	push      	r4-r5, r15
1800d456:	1427      	subi      	r14, r14, 28
1800d458:	10b7      	lrw      	r5, 0x20002620	// 1800d4b4 <dyn_mem_proc_task+0x60>
    uint32_t    i;

    (void)arg;

    while (1) {
        ret = krhino_sem_take(&g_res_sem, RHINO_WAIT_FOREVER);
1800d45a:	3100      	movi      	r1, 0
1800d45c:	3200      	movi      	r2, 0
1800d45e:	2900      	subi      	r1, 1
1800d460:	2a00      	subi      	r2, 1
1800d462:	1016      	lrw      	r0, 0x20002574	// 1800d4b8 <dyn_mem_proc_task+0x64>
1800d464:	e0000756 	bsr      	0x1800e310	// 1800e310 <krhino_sem_take>
        if (ret != RHINO_SUCCESS) {
1800d468:	e9000005 	bez      	r0, 0x1800d472	// 1800d472 <dyn_mem_proc_task+0x1e>
            k_err_proc(RHINO_DYN_MEM_PROC_ERR);
1800d46c:	3068      	movi      	r0, 104
1800d46e:	e0000045 	bsr      	0x1800d4f8	// 1800d4f8 <k_err_proc>
        }

        while (1) {
            RHINO_CRITICAL_ENTER();
1800d472:	e3ff9aa7 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
1800d476:	9580      	ld.w      	r4, (r5, 0x0)
            if (!is_klist_empty(&g_res_list)) {
1800d478:	6552      	cmpne      	r4, r5
1800d47a:	0c1a      	bf      	0x1800d4ae	// 1800d4ae <dyn_mem_proc_task+0x5a>
    head->next = element;
}

RHINO_INLINE void klist_rm(klist_t *element)
{
    element->prev->next = element->next;
1800d47c:	9461      	ld.w      	r3, (r4, 0x4)
1800d47e:	9440      	ld.w      	r2, (r4, 0x0)
1800d480:	b340      	st.w      	r2, (r3, 0x0)
    element->next->prev = element->prev;
1800d482:	9440      	ld.w      	r2, (r4, 0x0)
1800d484:	b261      	st.w      	r3, (r2, 0x4)
                res_free = krhino_list_entry(g_res_list.next, res_free_t, res_list);
                klist_rm(&res_free->res_list);
                RHINO_CRITICAL_EXIT();
1800d486:	e3ff9aa2 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
                memcpy(&tmp, res_free, sizeof(res_free_t));
1800d48a:	321c      	movi      	r2, 28
1800d48c:	e4241013 	subi      	r1, r4, 20
1800d490:	6c3b      	mov      	r0, r14
1800d492:	e00044e5 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
                for (i = 0; i < tmp.cnt; i++) {
1800d496:	3300      	movi      	r3, 0
1800d498:	d84e0000 	ld.b      	r2, (r14, 0x0)
1800d49c:	648c      	cmphs      	r3, r2
1800d49e:	5b82      	addi      	r4, r3, 1
1800d4a0:	0be9      	bt      	0x1800d472	// 1800d472 <dyn_mem_proc_task+0x1e>
                    krhino_mm_free(tmp.res[i]);
1800d4a2:	d08e0880 	ldr.w      	r0, (r14, r4 << 2)
1800d4a6:	e3ffadb3 	bsr      	0x1800300c	// 1800300c <krhino_mm_free>
1800d4aa:	6cd3      	mov      	r3, r4
1800d4ac:	07f6      	br      	0x1800d498	// 1800d498 <dyn_mem_proc_task+0x44>
                }
            }
            else {
                RHINO_CRITICAL_EXIT();
1800d4ae:	e3ff9a8e 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        ret = krhino_sem_take(&g_res_sem, RHINO_WAIT_FOREVER);
1800d4b2:	07d4      	br      	0x1800d45a	// 1800d45a <dyn_mem_proc_task+0x6>
1800d4b4:	20002620 	.long	0x20002620
1800d4b8:	20002574 	.long	0x20002574

1800d4bc <dyn_mem_proc_task_start>:
        }
    }
}

__init void dyn_mem_proc_task_start(void)
{
1800d4bc:	14d0      	push      	r15
1800d4be:	1426      	subi      	r14, r14, 24
    krhino_task_create(&g_dyn_task, "dyn_mem", 0, RHINO_CONFIG_K_DYN_MEM_TASK_PRI,
1800d4c0:	3301      	movi      	r3, 1
1800d4c2:	b865      	st.w      	r3, (r14, 0x14)
1800d4c4:	3200      	movi      	r2, 0
1800d4c6:	1069      	lrw      	r3, 0x1800d454	// 1800d4e8 <dyn_mem_proc_task_start+0x2c>
1800d4c8:	1029      	lrw      	r1, 0x1801776c	// 1800d4ec <dyn_mem_proc_task_start+0x30>
1800d4ca:	100a      	lrw      	r0, 0x20002598	// 1800d4f0 <dyn_mem_proc_task_start+0x34>
1800d4cc:	b864      	st.w      	r3, (r14, 0x10)
1800d4ce:	3340      	movi      	r3, 64
1800d4d0:	b863      	st.w      	r3, (r14, 0xc)
1800d4d2:	1069      	lrw      	r3, 0x20002ac4	// 1800d4f4 <dyn_mem_proc_task_start+0x38>
1800d4d4:	b862      	st.w      	r3, (r14, 0x8)
1800d4d6:	3300      	movi      	r3, 0
1800d4d8:	b840      	st.w      	r2, (r14, 0x0)
1800d4da:	b861      	st.w      	r3, (r14, 0x4)
1800d4dc:	333c      	movi      	r3, 60
1800d4de:	e00008fb 	bsr      	0x1800e6d4	// 1800e6d4 <krhino_task_create>
                        0, g_dyn_task_stack, RHINO_CONFIG_K_DYN_TASK_STACK,
                        dyn_mem_proc_task, 1);
}
1800d4e2:	1406      	addi      	r14, r14, 24
1800d4e4:	1490      	pop      	r15
1800d4e6:	0000      	.short	0x0000
1800d4e8:	1800d454 	.long	0x1800d454
1800d4ec:	1801776c 	.long	0x1801776c
1800d4f0:	20002598 	.long	0x20002598
1800d4f4:	20002ac4 	.long	0x20002ac4

1800d4f8 <k_err_proc>:
 */

#include <k_api.h>

void k_err_proc(kstat_t err)
{
1800d4f8:	14d0      	push      	r15
#if 1
    soc_err_proc(err);
1800d4fa:	e0000f2f 	bsr      	0x1800f358	// 1800f358 <soc_err_proc>
#else
    if (g_err_proc != NULL) {
        g_err_proc(err);
    }
#endif
}
1800d4fe:	1490      	pop      	r15

1800d500 <krhino_event_del>:
{
    return event_create(event, name, flags, K_OBJ_STATIC_ALLOC);
}

kstat_t krhino_event_del(kevent_t *event)
{
1800d500:	14d3      	push      	r4-r6, r15
1800d502:	6d03      	mov      	r4, r0
    CPSR_ALLOC();

    klist_t *blk_list_head;

    NULL_PARA_CHK(event);
1800d504:	e9000032 	bez      	r0, 0x1800d568	// 1800d568 <krhino_event_del+0x68>

    RHINO_CRITICAL_ENTER();
1800d508:	e3ff9a5c 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>

    INTRPT_NESTED_LEVEL_CHK();
1800d50c:	1078      	lrw      	r3, 0x20002841	// 1800d56c <krhino_event_del+0x6c>
    RHINO_CRITICAL_ENTER();
1800d50e:	6d83      	mov      	r6, r0
    INTRPT_NESTED_LEVEL_CHK();
1800d510:	8360      	ld.b      	r3, (r3, 0x0)
1800d512:	e9030007 	bez      	r3, 0x1800d520	// 1800d520 <krhino_event_del+0x20>
1800d516:	e3ff9a5a 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800d51a:	ea0003ea 	movi      	r0, 1002
    TRACE_EVENT_DEL(g_active_task[cpu_cur_get()], event);

    RHINO_CRITICAL_EXIT_SCHED();

    return RHINO_SUCCESS;
}
1800d51e:	1493      	pop      	r4-r6, r15
    if (event->blk_obj.obj_type != RHINO_EVENT_OBJ_TYPE) {
1800d520:	844d      	ld.b      	r2, (r4, 0xd)
1800d522:	3a46      	cmpnei      	r2, 6
1800d524:	0c05      	bf      	0x1800d52e	// 1800d52e <krhino_event_del+0x2e>
        RHINO_CRITICAL_EXIT();
1800d526:	e3ff9a52 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_KOBJ_TYPE_ERR;
1800d52a:	3008      	movi      	r0, 8
1800d52c:	07f9      	br      	0x1800d51e	// 1800d51e <krhino_event_del+0x1e>
    if (event->mm_alloc_flag != K_OBJ_STATIC_ALLOC) {
1800d52e:	845c      	ld.b      	r2, (r4, 0x1c)
1800d530:	3a41      	cmpnei      	r2, 1
1800d532:	0c05      	bf      	0x1800d53c	// 1800d53c <krhino_event_del+0x3c>
        RHINO_CRITICAL_EXIT();
1800d534:	e3ff9a4b 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_KOBJ_DEL_ERR;
1800d538:	3009      	movi      	r0, 9
1800d53a:	07f2      	br      	0x1800d51e	// 1800d51e <krhino_event_del+0x1e>
    event->blk_obj.obj_type = RHINO_OBJ_TYPE_NONE;
1800d53c:	a46d      	st.b      	r3, (r4, 0xd)
    return (list->next == list);
1800d53e:	9400      	ld.w      	r0, (r4, 0x0)
    while (!is_klist_empty(blk_list_head)) {
1800d540:	6412      	cmpne      	r4, r0
1800d542:	080f      	bt      	0x1800d560	// 1800d560 <krhino_event_del+0x60>
    element->prev->next = element->next;
1800d544:	9466      	ld.w      	r3, (r4, 0x18)
1800d546:	9445      	ld.w      	r2, (r4, 0x14)
    event->flags = 0u;
1800d548:	3500      	movi      	r5, 0
1800d54a:	b4a4      	st.w      	r5, (r4, 0x10)
1800d54c:	b340      	st.w      	r2, (r3, 0x0)
    element->next->prev = element->prev;
1800d54e:	9445      	ld.w      	r2, (r4, 0x14)
    RHINO_CRITICAL_EXIT_SCHED();
1800d550:	6c1b      	mov      	r0, r6
1800d552:	b261      	st.w      	r3, (r2, 0x4)
1800d554:	e3ff9a3b 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800d558:	e0000524 	bsr      	0x1800dfa0	// 1800dfa0 <core_sched>
    return RHINO_SUCCESS;
1800d55c:	6c17      	mov      	r0, r5
1800d55e:	07e0      	br      	0x1800d51e	// 1800d51e <krhino_event_del+0x1e>
        pend_task_rm(krhino_list_entry(blk_list_head->next, ktask_t, task_list));
1800d560:	280b      	subi      	r0, 12
1800d562:	e00002d9 	bsr      	0x1800db14	// 1800db14 <pend_task_rm>
1800d566:	07ec      	br      	0x1800d53e	// 1800d53e <krhino_event_del+0x3e>
    NULL_PARA_CHK(event);
1800d568:	3006      	movi      	r0, 6
1800d56a:	07da      	br      	0x1800d51e	// 1800d51e <krhino_event_del+0x1e>
1800d56c:	20002841 	.long	0x20002841

1800d570 <krhino_event_get>:
}
#endif

kstat_t krhino_event_get(kevent_t *event, uint32_t flags, uint8_t opt,
                         uint32_t *actl_flags, tick_t ticks)
{
1800d570:	14d8      	push      	r4-r11, r15
1800d572:	6d43      	mov      	r5, r0
1800d574:	6d87      	mov      	r6, r1
1800d576:	6d0b      	mov      	r4, r2
1800d578:	6e0f      	mov      	r8, r3
1800d57a:	d94e2009 	ld.w      	r10, (r14, 0x24)
1800d57e:	d92e200a 	ld.w      	r9, (r14, 0x28)

    kstat_t stat;
    uint8_t status;
    uint8_t cur_cpu_num;

    NULL_PARA_CHK(event);
1800d582:	e9000066 	bez      	r0, 0x1800d64e	// 1800d64e <krhino_event_get+0xde>
    NULL_PARA_CHK(actl_flags);
1800d586:	e9030064 	bez      	r3, 0x1800d64e	// 1800d64e <krhino_event_get+0xde>

    if ((opt != RHINO_AND) && (opt != RHINO_OR) && (opt != RHINO_AND_CLEAR) &&
1800d58a:	3a03      	cmphsi      	r2, 4
1800d58c:	0863      	bt      	0x1800d652	// 1800d652 <krhino_event_get+0xe2>
        (opt != RHINO_OR_CLEAR)) {
        return RHINO_NO_THIS_EVENT_OPT;
    }

    RHINO_CRITICAL_ENTER();
1800d58e:	e3ff9a19 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>

    INTRPT_NESTED_LEVEL_CHK();
1800d592:	1172      	lrw      	r3, 0x20002841	// 1800d658 <krhino_event_get+0xe8>
    RHINO_CRITICAL_ENTER();
1800d594:	6dc3      	mov      	r7, r0
    INTRPT_NESTED_LEVEL_CHK();
1800d596:	8360      	ld.b      	r3, (r3, 0x0)
1800d598:	e9030008 	bez      	r3, 0x1800d5a8	// 1800d5a8 <krhino_event_get+0x38>
1800d59c:	e3ff9a17 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800d5a0:	ea0403ea 	movi      	r4, 1002
    stat = pend_state_end_proc(g_active_task[cpu_cur_get()]);

    RHINO_CPU_INTRPT_ENABLE();

    return stat;
}
1800d5a4:	6c13      	mov      	r0, r4
1800d5a6:	1498      	pop      	r4-r11, r15
    if (event->blk_obj.obj_type != RHINO_EVENT_OBJ_TYPE) {
1800d5a8:	856d      	ld.b      	r3, (r5, 0xd)
1800d5aa:	3b46      	cmpnei      	r3, 6
1800d5ac:	0c05      	bf      	0x1800d5b6	// 1800d5b6 <krhino_event_get+0x46>
        RHINO_CRITICAL_EXIT();
1800d5ae:	e3ff9a0e 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_KOBJ_TYPE_ERR;
1800d5b2:	3408      	movi      	r4, 8
1800d5b4:	07f8      	br      	0x1800d5a4	// 1800d5a4 <krhino_event_get+0x34>
    if (opt & RHINO_FLAGS_AND_MASK) {
1800d5b6:	e4042002 	andi      	r0, r4, 2
1800d5ba:	9524      	ld.w      	r1, (r5, 0x10)
        if ((event->flags & flags) == flags) {
1800d5bc:	c4262023 	and      	r3, r6, r1
    if (opt & RHINO_FLAGS_AND_MASK) {
1800d5c0:	e9000013 	bez      	r0, 0x1800d5e6	// 1800d5e6 <krhino_event_get+0x76>
        if ((event->flags & flags) == flags) {
1800d5c4:	64da      	cmpne      	r6, r3
1800d5c6:	0812      	bt      	0x1800d5ea	// 1800d5ea <krhino_event_get+0x7a>
        if (opt & RHINO_FLAGS_CLEAR_MASK) {
1800d5c8:	e4842001 	andi      	r4, r4, 1
        *actl_flags = event->flags;
1800d5cc:	dc282000 	st.w      	r1, (r8, 0x0)
        if (opt & RHINO_FLAGS_CLEAR_MASK) {
1800d5d0:	e9040006 	bez      	r4, 0x1800d5dc	// 1800d5dc <krhino_event_get+0x6c>
            event->flags &= ~flags;
1800d5d4:	9524      	ld.w      	r1, (r5, 0x10)
1800d5d6:	c4c12046 	andn      	r6, r1, r6
1800d5da:	b5c4      	st.w      	r6, (r5, 0x10)
        RHINO_CRITICAL_EXIT();
1800d5dc:	6c1f      	mov      	r0, r7
1800d5de:	e3ff99f6 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_SUCCESS;
1800d5e2:	3400      	movi      	r4, 0
1800d5e4:	07e0      	br      	0x1800d5a4	// 1800d5a4 <krhino_event_get+0x34>
        if ((event->flags & flags) > 0u) {
1800d5e6:	e923fff1 	bnez      	r3, 0x1800d5c8	// 1800d5c8 <krhino_event_get+0x58>
    if (ticks == RHINO_NO_WAIT) {
1800d5ea:	c52a2423 	or      	r3, r10, r9
1800d5ee:	e9230008 	bnez      	r3, 0x1800d5fe	// 1800d5fe <krhino_event_get+0x8e>
        RHINO_CRITICAL_EXIT();
1800d5f2:	6c1f      	mov      	r0, r7
        return RHINO_NO_PEND_WAIT;
1800d5f4:	34c8      	movi      	r4, 200
        RHINO_CRITICAL_EXIT();
1800d5f6:	e3ff99ea 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_NO_PEND_WAIT;
1800d5fa:	4481      	lsli      	r4, r4, 1
1800d5fc:	07d4      	br      	0x1800d5a4	// 1800d5a4 <krhino_event_get+0x34>
    if (g_sched_lock[cur_cpu_num] > 0u) {
1800d5fe:	1078      	lrw      	r3, 0x20002944	// 1800d65c <krhino_event_get+0xec>
1800d600:	8360      	ld.b      	r3, (r3, 0x0)
1800d602:	e9030007 	bez      	r3, 0x1800d610	// 1800d610 <krhino_event_get+0xa0>
        RHINO_CRITICAL_EXIT();
1800d606:	6c1f      	mov      	r0, r7
1800d608:	e3ff99e1 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_SCHED_DISABLE;
1800d60c:	34c8      	movi      	r4, 200
1800d60e:	07cb      	br      	0x1800d5a4	// 1800d5a4 <krhino_event_get+0x34>
    g_active_task[cur_cpu_num]->pend_option = opt;
1800d610:	ea8b0014 	lrw      	r11, 0x20002828	// 1800d660 <krhino_event_get+0xf0>
    pend_to_blk_obj((blk_obj_t *)event, g_active_task[cur_cpu_num], ticks);
1800d614:	6cab      	mov      	r2, r10
    g_active_task[cur_cpu_num]->pend_option = opt;
1800d616:	d82b2000 	ld.w      	r1, (r11, 0x0)
    pend_to_blk_obj((blk_obj_t *)event, g_active_task[cur_cpu_num], ticks);
1800d61a:	6ce7      	mov      	r3, r9
    g_active_task[cur_cpu_num]->pend_option = opt;
1800d61c:	dc81006c 	st.b      	r4, (r1, 0x6c)
    g_active_task[cur_cpu_num]->pend_flags  = flags;
1800d620:	b1d9      	st.w      	r6, (r1, 0x64)
    g_active_task[cur_cpu_num]->pend_info   = actl_flags;
1800d622:	dd01201a 	st.w      	r8, (r1, 0x68)
    pend_to_blk_obj((blk_obj_t *)event, g_active_task[cur_cpu_num], ticks);
1800d626:	6c17      	mov      	r0, r5
1800d628:	e000024e 	bsr      	0x1800dac4	// 1800dac4 <pend_to_blk_obj>
    RHINO_CRITICAL_EXIT_SCHED();
1800d62c:	6c1f      	mov      	r0, r7
1800d62e:	e3ff99ce 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800d632:	e00004b7 	bsr      	0x1800dfa0	// 1800dfa0 <core_sched>
    RHINO_CPU_INTRPT_DISABLE();
1800d636:	e3ff99c5 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
1800d63a:	6d43      	mov      	r5, r0
    stat = pend_state_end_proc(g_active_task[cpu_cur_get()]);
1800d63c:	d80b2000 	ld.w      	r0, (r11, 0x0)
1800d640:	e000029c 	bsr      	0x1800db78	// 1800db78 <pend_state_end_proc>
1800d644:	6d03      	mov      	r4, r0
    RHINO_CPU_INTRPT_ENABLE();
1800d646:	6c17      	mov      	r0, r5
1800d648:	e3ff99c1 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
    return stat;
1800d64c:	07ac      	br      	0x1800d5a4	// 1800d5a4 <krhino_event_get+0x34>
    NULL_PARA_CHK(event);
1800d64e:	3406      	movi      	r4, 6
1800d650:	07aa      	br      	0x1800d5a4	// 1800d5a4 <krhino_event_get+0x34>
        return RHINO_NO_THIS_EVENT_OPT;
1800d652:	3496      	movi      	r4, 150
1800d654:	4482      	lsli      	r4, r4, 2
1800d656:	07a7      	br      	0x1800d5a4	// 1800d5a4 <krhino_event_get+0x34>
1800d658:	20002841 	.long	0x20002841
1800d65c:	20002944 	.long	0x20002944
1800d660:	20002828 	.long	0x20002828

1800d664 <krhino_event_set>:

    return RHINO_SUCCESS;
}

kstat_t krhino_event_set(kevent_t *event, uint32_t flags, uint8_t opt)
{
1800d664:	14d5      	push      	r4-r8, r15
1800d666:	6d43      	mov      	r5, r0
1800d668:	6e07      	mov      	r8, r1
1800d66a:	6d8b      	mov      	r6, r2
    NULL_PARA_CHK(event);
1800d66c:	e900004c 	bez      	r0, 0x1800d704	// 1800d704 <krhino_event_set+0xa0>

    if ((opt != RHINO_AND) && (opt != RHINO_OR)) {
1800d670:	e48220fd 	andi      	r4, r2, 253
1800d674:	e924004a 	bnez      	r4, 0x1800d708	// 1800d708 <krhino_event_set+0xa4>
    RHINO_CRITICAL_ENTER();
1800d678:	e3ff99a4 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
    if (event->blk_obj.obj_type != RHINO_EVENT_OBJ_TYPE) {
1800d67c:	856d      	ld.b      	r3, (r5, 0xd)
1800d67e:	3b46      	cmpnei      	r3, 6
    RHINO_CRITICAL_ENTER();
1800d680:	6dc3      	mov      	r7, r0
    if (event->blk_obj.obj_type != RHINO_EVENT_OBJ_TYPE) {
1800d682:	0c05      	bf      	0x1800d68c	// 1800d68c <krhino_event_set+0x28>
        RHINO_CRITICAL_EXIT();
1800d684:	e3ff99a3 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_KOBJ_TYPE_ERR;
1800d688:	3008      	movi      	r0, 8
        return RHINO_NO_THIS_EVENT_OPT;
    }

    return event_set(event, flags, opt);
}
1800d68a:	1495      	pop      	r4-r8, r15
    if (opt & RHINO_FLAGS_AND_MASK) {
1800d68c:	e4c62002 	andi      	r6, r6, 2
1800d690:	9564      	ld.w      	r3, (r5, 0x10)
1800d692:	e9060008 	bez      	r6, 0x1800d6a2	// 1800d6a2 <krhino_event_set+0x3e>
        event->flags &= flags;
1800d696:	68e0      	and      	r3, r8
1800d698:	b564      	st.w      	r3, (r5, 0x10)
        RHINO_CRITICAL_EXIT();
1800d69a:	e3ff9998 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
    return RHINO_SUCCESS;
1800d69e:	3000      	movi      	r0, 0
1800d6a0:	07f5      	br      	0x1800d68a	// 1800d68a <krhino_event_set+0x26>
        event->flags |= flags;
1800d6a2:	c4682424 	or      	r4, r8, r3
1800d6a6:	b584      	st.w      	r4, (r5, 0x10)
    iter = event_head->next;
1800d6a8:	d9052000 	ld.w      	r8, (r5, 0x0)
    while (iter != event_head) {
1800d6ac:	6616      	cmpne      	r5, r8
1800d6ae:	0807      	bt      	0x1800d6bc	// 1800d6bc <krhino_event_set+0x58>
    RHINO_CRITICAL_EXIT_SCHED();
1800d6b0:	6c1f      	mov      	r0, r7
1800d6b2:	e3ff998c 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800d6b6:	e0000475 	bsr      	0x1800dfa0	// 1800dfa0 <core_sched>
1800d6ba:	07f2      	br      	0x1800d69e	// 1800d69e <krhino_event_set+0x3a>
        task = krhino_list_entry(iter, ktask_t, task_list);
1800d6bc:	e4c8100b 	subi      	r6, r8, 12
        if (task->pend_option & RHINO_FLAGS_AND_MASK) {
1800d6c0:	d846006c 	ld.b      	r2, (r6, 0x6c)
1800d6c4:	e4422002 	andi      	r2, r2, 2
        iter_temp = iter->next;
1800d6c8:	d9082000 	ld.w      	r8, (r8, 0x0)
1800d6cc:	9679      	ld.w      	r3, (r6, 0x64)
        if (task->pend_option & RHINO_FLAGS_AND_MASK) {
1800d6ce:	e9020017 	bez      	r2, 0x1800d6fc	// 1800d6fc <krhino_event_set+0x98>
            if ((cur_event_flags & task->pend_flags) == task->pend_flags) {
1800d6d2:	c4642022 	and      	r2, r4, r3
1800d6d6:	648e      	cmpne      	r3, r2
1800d6d8:	0bea      	bt      	0x1800d6ac	// 1800d6ac <krhino_event_set+0x48>
            (*(uint32_t *)(task->pend_info)) = cur_event_flags;
1800d6da:	967a      	ld.w      	r3, (r6, 0x68)
            pend_task_wakeup(task);
1800d6dc:	6c1b      	mov      	r0, r6
            (*(uint32_t *)(task->pend_info)) = cur_event_flags;
1800d6de:	b380      	st.w      	r4, (r3, 0x0)
            pend_task_wakeup(task);
1800d6e0:	e00001d0 	bsr      	0x1800da80	// 1800da80 <pend_task_wakeup>
            if (task->pend_option & RHINO_FLAGS_CLEAR_MASK) {
1800d6e4:	d866006c 	ld.b      	r3, (r6, 0x6c)
1800d6e8:	e4632001 	andi      	r3, r3, 1
1800d6ec:	e903ffe0 	bez      	r3, 0x1800d6ac	// 1800d6ac <krhino_event_set+0x48>
                event->flags &= ~(task->pend_flags);
1800d6f0:	9679      	ld.w      	r3, (r6, 0x64)
1800d6f2:	9544      	ld.w      	r2, (r5, 0x10)
1800d6f4:	c4622043 	andn      	r3, r2, r3
1800d6f8:	b564      	st.w      	r3, (r5, 0x10)
1800d6fa:	07d9      	br      	0x1800d6ac	// 1800d6ac <krhino_event_set+0x48>
            if (cur_event_flags & task->pend_flags) {
1800d6fc:	68d0      	and      	r3, r4
1800d6fe:	e923ffee 	bnez      	r3, 0x1800d6da	// 1800d6da <krhino_event_set+0x76>
1800d702:	07d5      	br      	0x1800d6ac	// 1800d6ac <krhino_event_set+0x48>
    NULL_PARA_CHK(event);
1800d704:	3006      	movi      	r0, 6
1800d706:	07c2      	br      	0x1800d68a	// 1800d68a <krhino_event_set+0x26>
        return RHINO_NO_THIS_EVENT_OPT;
1800d708:	3096      	movi      	r0, 150
1800d70a:	4002      	lsli      	r0, r0, 2
1800d70c:	07bf      	br      	0x1800d68a	// 1800d68a <krhino_event_set+0x26>
	...

1800d710 <user_idle_hook>:
}
#endif

void __attribute__((weak)) user_idle_hook(void)
{
}
1800d710:	783c      	jmp      	r15
	...

1800d714 <idle_task>:

void idle_task(void *arg)
{
1800d714:	14d1      	push      	r4, r15
#endif

    while (RHINO_TRUE) {
        RHINO_CPU_INTRPT_DISABLE();

        g_idle_count[cpu_cur_get()]++;
1800d716:	1089      	lrw      	r4, 0x20002618	// 1800d738 <idle_task+0x24>
        RHINO_CPU_INTRPT_DISABLE();
1800d718:	e3ff9954 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
        g_idle_count[cpu_cur_get()]++;
1800d71c:	9440      	ld.w      	r2, (r4, 0x0)
1800d71e:	9461      	ld.w      	r3, (r4, 0x4)
1800d720:	2200      	addi      	r2, 1
1800d722:	3a40      	cmpnei      	r2, 0
1800d724:	c4630c21 	incf      	r3, r3, 1
1800d728:	b440      	st.w      	r2, (r4, 0x0)
1800d72a:	b461      	st.w      	r3, (r4, 0x4)

        RHINO_CPU_INTRPT_ENABLE();
1800d72c:	e3ff994f 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>

        user_idle_hook();
1800d730:	e3fffff0 	bsr      	0x1800d710	// 1800d710 <user_idle_hook>
1800d734:	07f2      	br      	0x1800d718	// 1800d718 <idle_task+0x4>
1800d736:	0000      	.short	0x0000
1800d738:	20002618 	.long	0x20002618

1800d73c <mutex_create>:
 */

#include <k_api.h>

kstat_t mutex_create(kmutex_t *mutex, const name_t *name, uint8_t mm_alloc_flag)
{
1800d73c:	14d2      	push      	r4-r5, r15
1800d73e:	6d03      	mov      	r4, r0
    CPSR_ALLOC();

    NULL_PARA_CHK(mutex);
1800d740:	e9000021 	bez      	r0, 0x1800d782	// 1800d782 <mutex_create+0x46>
    NULL_PARA_CHK(name);
1800d744:	e901001f 	bez      	r1, 0x1800d782	// 1800d782 <mutex_create+0x46>

    /* init the list */
    klist_init(&mutex->blk_obj.blk_list);
    mutex->blk_obj.blk_policy = BLK_POLICY_PRI;
1800d748:	3300      	movi      	r3, 0
    mutex->blk_obj.name       = name;
    mutex->mutex_task         = NULL;
1800d74a:	3500      	movi      	r5, 0
    list_head->next = list_head;
1800d74c:	b400      	st.w      	r0, (r4, 0x0)
    list_head->prev = list_head;
1800d74e:	b401      	st.w      	r0, (r4, 0x4)
    mutex->blk_obj.blk_policy = BLK_POLICY_PRI;
1800d750:	a06c      	st.b      	r3, (r0, 0xc)
    mutex->blk_obj.name       = name;
1800d752:	b022      	st.w      	r1, (r0, 0x8)
    mutex->mutex_list         = NULL;
    mutex->mm_alloc_flag      = mm_alloc_flag;
1800d754:	dc400024 	st.b      	r2, (r0, 0x24)
    mutex->mutex_task         = NULL;
1800d758:	b0a4      	st.w      	r5, (r0, 0x10)
    mutex->mutex_list         = NULL;
1800d75a:	b0a5      	st.w      	r5, (r0, 0x14)

#if (RHINO_CONFIG_SYSTEM_STATS > 0)
    RHINO_CRITICAL_ENTER();
1800d75c:	e3ff9932 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
    element->prev = head->prev;
1800d760:	106a      	lrw      	r3, 0x20002530	// 1800d788 <mutex_create+0x4c>
    klist_insert(&(g_kobj_list.mutex_head), &mutex->mutex_item);
1800d762:	e444001b 	addi      	r2, r4, 28
1800d766:	9323      	ld.w      	r1, (r3, 0xc)
    element->next = head;
1800d768:	e5830007 	addi      	r12, r3, 8
    element->prev = head->prev;
1800d76c:	b428      	st.w      	r1, (r4, 0x20)
    element->next = head;
1800d76e:	dd842007 	st.w      	r12, (r4, 0x1c)
    head->prev->next = element;
1800d772:	b140      	st.w      	r2, (r1, 0x0)
    head->prev       = element;
1800d774:	b343      	st.w      	r2, (r3, 0xc)
    RHINO_CRITICAL_EXIT();
1800d776:	e3ff992a 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
#endif

    mutex->blk_obj.obj_type = RHINO_MUTEX_OBJ_TYPE;
1800d77a:	3302      	movi      	r3, 2
1800d77c:	a46d      	st.b      	r3, (r4, 0xd)
1800d77e:	6c17      	mov      	r0, r5

    TRACE_MUTEX_CREATE(krhino_cur_task_get(), mutex, name);

    return RHINO_SUCCESS;
}
1800d780:	1492      	pop      	r4-r5, r15
    NULL_PARA_CHK(mutex);
1800d782:	3006      	movi      	r0, 6
1800d784:	07fe      	br      	0x1800d780	// 1800d780 <mutex_create+0x44>
1800d786:	0000      	.short	0x0000
1800d788:	20002530 	.long	0x20002530

1800d78c <krhino_mutex_create>:

kstat_t krhino_mutex_create(kmutex_t *mutex, const name_t *name)
{
1800d78c:	14d0      	push      	r15
    return mutex_create(mutex, name, K_OBJ_STATIC_ALLOC);
1800d78e:	3201      	movi      	r2, 1
1800d790:	e3ffffd6 	bsr      	0x1800d73c	// 1800d73c <mutex_create>
}
1800d794:	1490      	pop      	r15
	...

1800d798 <mutex_pri_limit>:
    ktask_t  *first_blk_task;
    klist_t *blk_list_head;

    high_pri = pri;

    for (mutex_tmp = task->mutex_list; mutex_tmp != NULL;
1800d798:	9066      	ld.w      	r3, (r0, 0x18)
    high_pri = pri;
1800d79a:	6c07      	mov      	r0, r1
    for (mutex_tmp = task->mutex_list; mutex_tmp != NULL;
1800d79c:	e9230003 	bnez      	r3, 0x1800d7a2	// 1800d7a2 <mutex_pri_limit+0xa>
            high_pri = pri;
        }
    }

    return high_pri;
}
1800d7a0:	783c      	jmp      	r15
    return (list->next == list);
1800d7a2:	9340      	ld.w      	r2, (r3, 0x0)
        if (!is_klist_empty(blk_list_head)) {
1800d7a4:	648e      	cmpne      	r3, r2
1800d7a6:	0c03      	bf      	0x1800d7ac	// 1800d7ac <mutex_pri_limit+0x14>
            pri = first_blk_task->prio;
1800d7a8:	d8220063 	ld.b      	r1, (r2, 0x63)
1800d7ac:	6440      	cmphs      	r0, r1
1800d7ae:	c4010c40 	inct      	r0, r1, 0
         mutex_tmp = mutex_tmp->mutex_list) {
1800d7b2:	9365      	ld.w      	r3, (r3, 0x14)
1800d7b4:	07f4      	br      	0x1800d79c	// 1800d79c <mutex_pri_limit+0x4>
	...

1800d7b8 <mutex_pri_look>:
    uint8_t   pri;
    ktask_t  *first_blk_task;
    klist_t  *blk_list_head;

    /* the base prio of task */
    new_pri = task->b_prio;
1800d7b8:	d9800070 	ld.b      	r12, (r0, 0x70)

    /* the highest prio in mutex which is locked */
    pri  = new_pri;
    prev = &task->mutex_list;
1800d7bc:	e4600017 	addi      	r3, r0, 24
    new_pri = task->b_prio;
1800d7c0:	6c33      	mov      	r0, r12

    while ((mutex_tmp = *prev) != NULL) {
1800d7c2:	9340      	ld.w      	r2, (r3, 0x0)
1800d7c4:	e9220003 	bnez      	r2, 0x1800d7ca	// 1800d7ca <mutex_pri_look+0x12>

        prev = &mutex_tmp->mutex_list;
    }

    return new_pri;
}
1800d7c8:	783c      	jmp      	r15
        if (mutex_tmp == mutex_rel) {
1800d7ca:	644a      	cmpne      	r2, r1
1800d7cc:	0804      	bt      	0x1800d7d4	// 1800d7d4 <mutex_pri_look+0x1c>
            *prev = mutex_tmp->mutex_list;
1800d7ce:	9145      	ld.w      	r2, (r1, 0x14)
1800d7d0:	b340      	st.w      	r2, (r3, 0x0)
            continue;
1800d7d2:	07f8      	br      	0x1800d7c2	// 1800d7c2 <mutex_pri_look+0xa>
1800d7d4:	9260      	ld.w      	r3, (r2, 0x0)
        if (!is_klist_empty(blk_list_head)) {
1800d7d6:	64ca      	cmpne      	r2, r3
1800d7d8:	0c03      	bf      	0x1800d7de	// 1800d7de <mutex_pri_look+0x26>
            pri = first_blk_task->prio;
1800d7da:	d9830063 	ld.b      	r12, (r3, 0x63)
1800d7de:	6430      	cmphs      	r12, r0
1800d7e0:	c40c0c20 	incf      	r0, r12, 0
        prev = &mutex_tmp->mutex_list;
1800d7e4:	e4620013 	addi      	r3, r2, 20
1800d7e8:	07ed      	br      	0x1800d7c2	// 1800d7c2 <mutex_pri_look+0xa>
	...

1800d7ec <mutex_release>:
{
1800d7ec:	14d1      	push      	r4, r15
1800d7ee:	6d03      	mov      	r4, r0
    new_pri = mutex_pri_look(task, mutex_rel);
1800d7f0:	e3ffffe4 	bsr      	0x1800d7b8	// 1800d7b8 <mutex_pri_look>
    if (new_pri != task->prio) {
1800d7f4:	d864006f 	ld.b      	r3, (r4, 0x6f)
1800d7f8:	640e      	cmpne      	r3, r0
    new_pri = mutex_pri_look(task, mutex_rel);
1800d7fa:	6c43      	mov      	r1, r0
    if (new_pri != task->prio) {
1800d7fc:	0c04      	bf      	0x1800d804	// 1800d804 <mutex_release+0x18>
        task_pri_change(task, new_pri);
1800d7fe:	6c13      	mov      	r0, r4
1800d800:	e000086c 	bsr      	0x1800e8d8	// 1800e8d8 <task_pri_change>
}
1800d804:	1491      	pop      	r4, r15
	...

1800d808 <krhino_mutex_del>:
{
1800d808:	14d2      	push      	r4-r5, r15
1800d80a:	6d03      	mov      	r4, r0
    if (mutex == NULL) {
1800d80c:	e9000037 	bez      	r0, 0x1800d87a	// 1800d87a <krhino_mutex_del+0x72>
    RHINO_CRITICAL_ENTER();
1800d810:	e3ff98d8 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
    INTRPT_NESTED_LEVEL_CHK();
1800d814:	107b      	lrw      	r3, 0x20002841	// 1800d880 <krhino_mutex_del+0x78>
    RHINO_CRITICAL_ENTER();
1800d816:	6d43      	mov      	r5, r0
    INTRPT_NESTED_LEVEL_CHK();
1800d818:	8360      	ld.b      	r3, (r3, 0x0)
1800d81a:	e9030007 	bez      	r3, 0x1800d828	// 1800d828 <krhino_mutex_del+0x20>
1800d81e:	e3ff98d6 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800d822:	ea0003ea 	movi      	r0, 1002
}
1800d826:	1492      	pop      	r4-r5, r15
    if (mutex->blk_obj.obj_type != RHINO_MUTEX_OBJ_TYPE) {
1800d828:	844d      	ld.b      	r2, (r4, 0xd)
1800d82a:	3a42      	cmpnei      	r2, 2
1800d82c:	0c05      	bf      	0x1800d836	// 1800d836 <krhino_mutex_del+0x2e>
        RHINO_CRITICAL_EXIT();
1800d82e:	e3ff98ce 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_KOBJ_TYPE_ERR;
1800d832:	3008      	movi      	r0, 8
1800d834:	07f9      	br      	0x1800d826	// 1800d826 <krhino_mutex_del+0x1e>
    if (mutex->mm_alloc_flag != K_OBJ_STATIC_ALLOC) {
1800d836:	d8440024 	ld.b      	r2, (r4, 0x24)
1800d83a:	3a41      	cmpnei      	r2, 1
1800d83c:	0c05      	bf      	0x1800d846	// 1800d846 <krhino_mutex_del+0x3e>
        RHINO_CRITICAL_EXIT();
1800d83e:	e3ff98c6 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_KOBJ_DEL_ERR;
1800d842:	3009      	movi      	r0, 9
1800d844:	07f1      	br      	0x1800d826	// 1800d826 <krhino_mutex_del+0x1e>
    if (mutex->mutex_task != NULL) {
1800d846:	9404      	ld.w      	r0, (r4, 0x10)
    mutex->blk_obj.obj_type = RHINO_OBJ_TYPE_NONE;
1800d848:	a46d      	st.b      	r3, (r4, 0xd)
    if (mutex->mutex_task != NULL) {
1800d84a:	e9000005 	bez      	r0, 0x1800d854	// 1800d854 <krhino_mutex_del+0x4c>
        mutex_release(mutex->mutex_task, mutex);
1800d84e:	6c53      	mov      	r1, r4
1800d850:	e3ffffce 	bsr      	0x1800d7ec	// 1800d7ec <mutex_release>
1800d854:	9400      	ld.w      	r0, (r4, 0x0)
    while (!is_klist_empty(blk_list_head)) {
1800d856:	6412      	cmpne      	r4, r0
1800d858:	080d      	bt      	0x1800d872	// 1800d872 <krhino_mutex_del+0x6a>
    element->prev->next = element->next;
1800d85a:	9468      	ld.w      	r3, (r4, 0x20)
1800d85c:	9447      	ld.w      	r2, (r4, 0x1c)
1800d85e:	b340      	st.w      	r2, (r3, 0x0)
    element->next->prev = element->prev;
1800d860:	9447      	ld.w      	r2, (r4, 0x1c)
    RHINO_CRITICAL_EXIT_SCHED();
1800d862:	6c17      	mov      	r0, r5
1800d864:	b261      	st.w      	r3, (r2, 0x4)
1800d866:	e3ff98b2 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800d86a:	e000039b 	bsr      	0x1800dfa0	// 1800dfa0 <core_sched>
    return RHINO_SUCCESS;
1800d86e:	3000      	movi      	r0, 0
1800d870:	07db      	br      	0x1800d826	// 1800d826 <krhino_mutex_del+0x1e>
        pend_task_rm(krhino_list_entry(blk_list_head->next, ktask_t, task_list));
1800d872:	280b      	subi      	r0, 12
1800d874:	e0000150 	bsr      	0x1800db14	// 1800db14 <pend_task_rm>
1800d878:	07ee      	br      	0x1800d854	// 1800d854 <krhino_mutex_del+0x4c>
        return RHINO_NULL_PTR;
1800d87a:	3006      	movi      	r0, 6
1800d87c:	07d5      	br      	0x1800d826	// 1800d826 <krhino_mutex_del+0x1e>
1800d87e:	0000      	.short	0x0000
1800d880:	20002841 	.long	0x20002841

1800d884 <mutex_task_pri_reset>:

void mutex_task_pri_reset(ktask_t *task)
{
1800d884:	14d0      	push      	r15
    kmutex_t *mutex_tmp;
    ktask_t *mutex_task;

    if (task->blk_obj->obj_type == RHINO_MUTEX_OBJ_TYPE) {
1800d886:	9075      	ld.w      	r3, (r0, 0x54)
1800d888:	834d      	ld.b      	r2, (r3, 0xd)
1800d88a:	3a42      	cmpnei      	r2, 2
1800d88c:	080c      	bt      	0x1800d8a4	// 1800d8a4 <mutex_task_pri_reset+0x20>
        mutex_tmp = (kmutex_t *)(task->blk_obj);
        mutex_task = mutex_tmp->mutex_task;
1800d88e:	9364      	ld.w      	r3, (r3, 0x10)

        /* the new highest prio task blocked on this mutex may decrease prio than before so reset the mutex task prio */
        if (mutex_task->prio == task->prio) {
1800d890:	d840006f 	ld.b      	r2, (r0, 0x6f)
1800d894:	d823006f 	ld.b      	r1, (r3, 0x6f)
1800d898:	6486      	cmpne      	r1, r2
1800d89a:	0805      	bt      	0x1800d8a4	// 1800d8a4 <mutex_task_pri_reset+0x20>
            mutex_release(mutex_task, NULL);
1800d89c:	3100      	movi      	r1, 0
1800d89e:	6c0f      	mov      	r0, r3
1800d8a0:	e3ffffa6 	bsr      	0x1800d7ec	// 1800d7ec <mutex_release>
        }
    }
}
1800d8a4:	1490      	pop      	r15
	...

1800d8a8 <krhino_mutex_lock>:

kstat_t krhino_mutex_lock(kmutex_t *mutex, tick_t ticks)
{
1800d8a8:	14d6      	push      	r4-r9, r15
1800d8aa:	6d43      	mov      	r5, r0
1800d8ac:	6e47      	mov      	r9, r1
1800d8ae:	6e0b      	mov      	r8, r2

    kstat_t  ret;
    ktask_t *mutex_task;
    uint8_t  cur_cpu_num;

    NULL_PARA_CHK(mutex);
1800d8b0:	e900006e 	bez      	r0, 0x1800d98c	// 1800d98c <krhino_mutex_lock+0xe4>

    if (g_sys_stat == RHINO_STOPPED) {
1800d8b4:	1178      	lrw      	r3, 0x20002568	// 1800d994 <krhino_mutex_lock+0xec>
1800d8b6:	9360      	ld.w      	r3, (r3, 0x0)
1800d8b8:	3b44      	cmpnei      	r3, 4
1800d8ba:	0c6b      	bf      	0x1800d990	// 1800d990 <krhino_mutex_lock+0xe8>
        return RHINO_SUCCESS;
    }

    RHINO_CRITICAL_ENTER();
1800d8bc:	e3ff9882 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>

    INTRPT_NESTED_LEVEL_CHK();
1800d8c0:	1176      	lrw      	r3, 0x20002841	// 1800d998 <krhino_mutex_lock+0xf0>
    RHINO_CRITICAL_ENTER();
1800d8c2:	6dc3      	mov      	r7, r0
    INTRPT_NESTED_LEVEL_CHK();
1800d8c4:	8360      	ld.b      	r3, (r3, 0x0)
1800d8c6:	e9030008 	bez      	r3, 0x1800d8d6	// 1800d8d6 <krhino_mutex_lock+0x2e>
1800d8ca:	e3ff9880 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800d8ce:	ea0403ea 	movi      	r4, 1002
    ret = pend_state_end_proc(g_active_task[cpu_cur_get()]);

    RHINO_CPU_INTRPT_ENABLE();

    return ret;
}
1800d8d2:	6c13      	mov      	r0, r4
1800d8d4:	1496      	pop      	r4-r9, r15
    if (mutex->blk_obj.obj_type != RHINO_MUTEX_OBJ_TYPE) {
1800d8d6:	856d      	ld.b      	r3, (r5, 0xd)
1800d8d8:	3b42      	cmpnei      	r3, 2
1800d8da:	0c05      	bf      	0x1800d8e4	// 1800d8e4 <krhino_mutex_lock+0x3c>
        RHINO_CRITICAL_EXIT();
1800d8dc:	e3ff9877 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_KOBJ_TYPE_ERR;
1800d8e0:	3408      	movi      	r4, 8
1800d8e2:	07f8      	br      	0x1800d8d2	// 1800d8d2 <krhino_mutex_lock+0x2a>
    if (g_active_task[cur_cpu_num] == mutex->mutex_task) {
1800d8e4:	11ce      	lrw      	r6, 0x20002828	// 1800d99c <krhino_mutex_lock+0xf4>
1800d8e6:	9584      	ld.w      	r4, (r5, 0x10)
1800d8e8:	9640      	ld.w      	r2, (r6, 0x0)
1800d8ea:	650a      	cmpne      	r2, r4
1800d8ec:	0817      	bt      	0x1800d91a	// 1800d91a <krhino_mutex_lock+0x72>
        if (mutex->owner_nested == (mutex_nested_t)-1) {
1800d8ee:	3200      	movi      	r2, 0
1800d8f0:	9566      	ld.w      	r3, (r5, 0x18)
1800d8f2:	2a00      	subi      	r2, 1
1800d8f4:	648e      	cmpne      	r3, r2
1800d8f6:	080b      	bt      	0x1800d90c	// 1800d90c <krhino_mutex_lock+0x64>
            k_err_proc(RHINO_MUTEX_NESTED_OVF);
1800d8f8:	ea000386 	movi      	r0, 902
1800d8fc:	e3fffdfe 	bsr      	0x1800d4f8	// 1800d4f8 <k_err_proc>
            RHINO_CRITICAL_EXIT();
1800d900:	6c1f      	mov      	r0, r7
1800d902:	e3ff9864 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
            return RHINO_MUTEX_NESTED_OVF;
1800d906:	ea040386 	movi      	r4, 902
1800d90a:	07e4      	br      	0x1800d8d2	// 1800d8d2 <krhino_mutex_lock+0x2a>
            mutex->owner_nested++;
1800d90c:	2300      	addi      	r3, 1
1800d90e:	b566      	st.w      	r3, (r5, 0x18)
        RHINO_CRITICAL_EXIT();
1800d910:	e3ff985d 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_MUTEX_OWNER_NESTED;
1800d914:	ea040385 	movi      	r4, 901
1800d918:	07dd      	br      	0x1800d8d2	// 1800d8d2 <krhino_mutex_lock+0x2a>
    if (mutex_task == NULL) {
1800d91a:	e924000b 	bnez      	r4, 0x1800d930	// 1800d930 <krhino_mutex_lock+0x88>
        mutex->mutex_list         = g_active_task[cur_cpu_num]->mutex_list;
1800d91e:	9266      	ld.w      	r3, (r2, 0x18)
1800d920:	b565      	st.w      	r3, (r5, 0x14)
        mutex->owner_nested       = 1u;
1800d922:	3301      	movi      	r3, 1
        mutex->mutex_task         = g_active_task[cur_cpu_num];
1800d924:	b544      	st.w      	r2, (r5, 0x10)
        g_active_task[cur_cpu_num]->mutex_list = mutex;
1800d926:	b2a6      	st.w      	r5, (r2, 0x18)
        mutex->owner_nested       = 1u;
1800d928:	b566      	st.w      	r3, (r5, 0x18)
    RHINO_CPU_INTRPT_ENABLE();
1800d92a:	e3ff9850 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
    return ret;
1800d92e:	07d2      	br      	0x1800d8d2	// 1800d8d2 <krhino_mutex_lock+0x2a>
    if (ticks == RHINO_NO_WAIT) {
1800d930:	c5092423 	or      	r3, r9, r8
1800d934:	e9230007 	bnez      	r3, 0x1800d942	// 1800d942 <krhino_mutex_lock+0x9a>
        return RHINO_NO_PEND_WAIT;
1800d938:	34c8      	movi      	r4, 200
        RHINO_CRITICAL_EXIT();
1800d93a:	e3ff9848 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_NO_PEND_WAIT;
1800d93e:	4481      	lsli      	r4, r4, 1
1800d940:	07c9      	br      	0x1800d8d2	// 1800d8d2 <krhino_mutex_lock+0x2a>
    if (g_sched_lock[cur_cpu_num] > 0u) {
1800d942:	1078      	lrw      	r3, 0x20002944	// 1800d9a0 <krhino_mutex_lock+0xf8>
1800d944:	8360      	ld.b      	r3, (r3, 0x0)
1800d946:	e9030006 	bez      	r3, 0x1800d952	// 1800d952 <krhino_mutex_lock+0xaa>
        RHINO_CRITICAL_EXIT();
1800d94a:	e3ff9840 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_SCHED_DISABLE;
1800d94e:	34c8      	movi      	r4, 200
1800d950:	07c1      	br      	0x1800d8d2	// 1800d8d2 <krhino_mutex_lock+0x2a>
    if (g_active_task[cur_cpu_num]->prio < mutex_task->prio) {
1800d952:	d822006f 	ld.b      	r1, (r2, 0x6f)
1800d956:	d864006f 	ld.b      	r3, (r4, 0x6f)
1800d95a:	64c4      	cmphs      	r1, r3
1800d95c:	0804      	bt      	0x1800d964	// 1800d964 <krhino_mutex_lock+0xbc>
        task_pri_change(mutex_task, g_active_task[cur_cpu_num]->prio);
1800d95e:	6c13      	mov      	r0, r4
1800d960:	e00007bc 	bsr      	0x1800e8d8	// 1800e8d8 <task_pri_change>
    pend_to_blk_obj((blk_obj_t *)mutex, g_active_task[cur_cpu_num], ticks);
1800d964:	6ca7      	mov      	r2, r9
1800d966:	6ce3      	mov      	r3, r8
1800d968:	9620      	ld.w      	r1, (r6, 0x0)
1800d96a:	6c17      	mov      	r0, r5
1800d96c:	e00000ac 	bsr      	0x1800dac4	// 1800dac4 <pend_to_blk_obj>
    RHINO_CRITICAL_EXIT_SCHED();
1800d970:	6c1f      	mov      	r0, r7
1800d972:	e3ff982c 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800d976:	e0000315 	bsr      	0x1800dfa0	// 1800dfa0 <core_sched>
    RHINO_CPU_INTRPT_DISABLE();
1800d97a:	e3ff9823 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
1800d97e:	6d43      	mov      	r5, r0
    ret = pend_state_end_proc(g_active_task[cpu_cur_get()]);
1800d980:	9600      	ld.w      	r0, (r6, 0x0)
1800d982:	e00000fb 	bsr      	0x1800db78	// 1800db78 <pend_state_end_proc>
1800d986:	6d03      	mov      	r4, r0
    RHINO_CPU_INTRPT_ENABLE();
1800d988:	6c17      	mov      	r0, r5
1800d98a:	07d0      	br      	0x1800d92a	// 1800d92a <krhino_mutex_lock+0x82>
    NULL_PARA_CHK(mutex);
1800d98c:	3406      	movi      	r4, 6
1800d98e:	07a2      	br      	0x1800d8d2	// 1800d8d2 <krhino_mutex_lock+0x2a>
        return RHINO_SUCCESS;
1800d990:	3400      	movi      	r4, 0
1800d992:	07a0      	br      	0x1800d8d2	// 1800d8d2 <krhino_mutex_lock+0x2a>
1800d994:	20002568 	.long	0x20002568
1800d998:	20002841 	.long	0x20002841
1800d99c:	20002828 	.long	0x20002828
1800d9a0:	20002944 	.long	0x20002944

1800d9a4 <krhino_mutex_unlock>:

kstat_t krhino_mutex_unlock(kmutex_t *mutex)
{
1800d9a4:	14d4      	push      	r4-r7, r15
1800d9a6:	6d43      	mov      	r5, r0

    klist_t *blk_list_head;
    ktask_t *task;
    uint8_t  cur_cpu_num;

    NULL_PARA_CHK(mutex);
1800d9a8:	e900004a 	bez      	r0, 0x1800da3c	// 1800da3c <krhino_mutex_unlock+0x98>

    if (g_sys_stat == RHINO_STOPPED) {
1800d9ac:	1165      	lrw      	r3, 0x20002568	// 1800da40 <krhino_mutex_unlock+0x9c>
1800d9ae:	9360      	ld.w      	r3, (r3, 0x0)
1800d9b0:	3b44      	cmpnei      	r3, 4
1800d9b2:	0c33      	bf      	0x1800da18	// 1800da18 <krhino_mutex_unlock+0x74>
        return RHINO_SUCCESS;
    }

    RHINO_CRITICAL_ENTER();
1800d9b4:	e3ff9806 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>

    INTRPT_NESTED_LEVEL_CHK();
1800d9b8:	1163      	lrw      	r3, 0x20002841	// 1800da44 <krhino_mutex_unlock+0xa0>
    RHINO_CRITICAL_ENTER();
1800d9ba:	6dc3      	mov      	r7, r0
    INTRPT_NESTED_LEVEL_CHK();
1800d9bc:	8360      	ld.b      	r3, (r3, 0x0)
1800d9be:	e9030007 	bez      	r3, 0x1800d9cc	// 1800d9cc <krhino_mutex_unlock+0x28>
1800d9c2:	e3ff9804 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800d9c6:	ea0003ea 	movi      	r0, 1002
    mutex->owner_nested = 1u;

    RHINO_CRITICAL_EXIT_SCHED();

    return RHINO_SUCCESS;
}
1800d9ca:	1494      	pop      	r4-r7, r15
    if (mutex->blk_obj.obj_type != RHINO_MUTEX_OBJ_TYPE) {
1800d9cc:	856d      	ld.b      	r3, (r5, 0xd)
1800d9ce:	3b42      	cmpnei      	r3, 2
1800d9d0:	0c05      	bf      	0x1800d9da	// 1800d9da <krhino_mutex_unlock+0x36>
        RHINO_CRITICAL_EXIT();
1800d9d2:	e3ff97fc 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_KOBJ_TYPE_ERR;
1800d9d6:	3008      	movi      	r0, 8
1800d9d8:	07f9      	br      	0x1800d9ca	// 1800d9ca <krhino_mutex_unlock+0x26>
    if (g_active_task[cur_cpu_num] != mutex->mutex_task) {
1800d9da:	107c      	lrw      	r3, 0x20002828	// 1800da48 <krhino_mutex_unlock+0xa4>
1800d9dc:	9544      	ld.w      	r2, (r5, 0x10)
1800d9de:	9360      	ld.w      	r3, (r3, 0x0)
1800d9e0:	648e      	cmpne      	r3, r2
1800d9e2:	0c06      	bf      	0x1800d9ee	// 1800d9ee <krhino_mutex_unlock+0x4a>
        RHINO_CRITICAL_EXIT();
1800d9e4:	e3ff97f3 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_MUTEX_NOT_RELEASED_BY_OWNER;
1800d9e8:	30e1      	movi      	r0, 225
1800d9ea:	4002      	lsli      	r0, r0, 2
1800d9ec:	07ef      	br      	0x1800d9ca	// 1800d9ca <krhino_mutex_unlock+0x26>
    mutex->owner_nested--;
1800d9ee:	9586      	ld.w      	r4, (r5, 0x18)
1800d9f0:	2c00      	subi      	r4, 1
1800d9f2:	b586      	st.w      	r4, (r5, 0x18)
    if (mutex->owner_nested > 0u) {
1800d9f4:	e9040007 	bez      	r4, 0x1800da02	// 1800da02 <krhino_mutex_unlock+0x5e>
        RHINO_CRITICAL_EXIT();
1800d9f8:	e3ff97e9 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_MUTEX_OWNER_NESTED;
1800d9fc:	ea000385 	movi      	r0, 901
1800da00:	07e5      	br      	0x1800d9ca	// 1800d9ca <krhino_mutex_unlock+0x26>
    mutex_release(g_active_task[cur_cpu_num], mutex);
1800da02:	6c57      	mov      	r1, r5
1800da04:	6c0f      	mov      	r0, r3
1800da06:	e3fffef3 	bsr      	0x1800d7ec	// 1800d7ec <mutex_release>
    return (list->next == list);
1800da0a:	95c0      	ld.w      	r6, (r5, 0x0)
    if (is_klist_empty(blk_list_head)) {
1800da0c:	6596      	cmpne      	r5, r6
1800da0e:	0807      	bt      	0x1800da1c	// 1800da1c <krhino_mutex_unlock+0x78>
        mutex->mutex_task = NULL;
1800da10:	b584      	st.w      	r4, (r5, 0x10)
        RHINO_CRITICAL_EXIT();
1800da12:	6c1f      	mov      	r0, r7
1800da14:	e3ff97db 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_SUCCESS;
1800da18:	3000      	movi      	r0, 0
1800da1a:	07d8      	br      	0x1800d9ca	// 1800d9ca <krhino_mutex_unlock+0x26>
    task = krhino_list_entry(blk_list_head->next, ktask_t, task_list);
1800da1c:	2e0b      	subi      	r6, 12
    pend_task_wakeup(task);
1800da1e:	6c1b      	mov      	r0, r6
1800da20:	e0000030 	bsr      	0x1800da80	// 1800da80 <pend_task_wakeup>
    mutex->mutex_list   = task->mutex_list;
1800da24:	9666      	ld.w      	r3, (r6, 0x18)
1800da26:	b565      	st.w      	r3, (r5, 0x14)
    mutex->owner_nested = 1u;
1800da28:	3301      	movi      	r3, 1
    mutex->mutex_task   = task;
1800da2a:	b5c4      	st.w      	r6, (r5, 0x10)
    RHINO_CRITICAL_EXIT_SCHED();
1800da2c:	6c1f      	mov      	r0, r7
    task->mutex_list    = mutex;
1800da2e:	b6a6      	st.w      	r5, (r6, 0x18)
    mutex->owner_nested = 1u;
1800da30:	b566      	st.w      	r3, (r5, 0x18)
    RHINO_CRITICAL_EXIT_SCHED();
1800da32:	e3ff97cc 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800da36:	e00002b5 	bsr      	0x1800dfa0	// 1800dfa0 <core_sched>
1800da3a:	07ef      	br      	0x1800da18	// 1800da18 <krhino_mutex_unlock+0x74>
    NULL_PARA_CHK(mutex);
1800da3c:	3006      	movi      	r0, 6
1800da3e:	07c6      	br      	0x1800d9ca	// 1800d9ca <krhino_mutex_unlock+0x26>
1800da40:	20002568 	.long	0x20002568
1800da44:	20002841 	.long	0x20002841
1800da48:	20002828 	.long	0x20002828

1800da4c <klist_rm>:
    element->prev->next = element->next;
1800da4c:	9061      	ld.w      	r3, (r0, 0x4)
1800da4e:	9040      	ld.w      	r2, (r0, 0x0)
1800da50:	b340      	st.w      	r2, (r3, 0x0)
    element->next->prev = element->prev;
1800da52:	9040      	ld.w      	r2, (r0, 0x0)
1800da54:	b261      	st.w      	r3, (r2, 0x4)
}
1800da56:	783c      	jmp      	r15

1800da58 <pend_list_add>:
{
    klist_t *tmp;
    klist_t *list_start = head;
    klist_t *list_end   = head;

    for (tmp = list_start->next; tmp != list_end; tmp = tmp->next) {
1800da58:	9060      	ld.w      	r3, (r0, 0x0)
1800da5a:	640e      	cmpne      	r3, r0
1800da5c:	0c07      	bf      	0x1800da6a	// 1800da6a <pend_list_add+0x12>
        if (krhino_list_entry(tmp, ktask_t, task_list)->prio > task->prio) {
1800da5e:	d9830063 	ld.b      	r12, (r3, 0x63)
1800da62:	d841006f 	ld.b      	r2, (r1, 0x6f)
1800da66:	6708      	cmphs      	r2, r12
1800da68:	080a      	bt      	0x1800da7c	// 1800da7c <pend_list_add+0x24>
    element->prev = head->prev;
1800da6a:	9301      	ld.w      	r0, (r3, 0x4)
1800da6c:	b104      	st.w      	r0, (r1, 0x10)
            break;
        }
    }

    klist_insert(tmp, &task->task_list);
1800da6e:	e441000b 	addi      	r2, r1, 12
    element->next = head;
1800da72:	b163      	st.w      	r3, (r1, 0xc)
    head->prev->next = element;
1800da74:	9321      	ld.w      	r1, (r3, 0x4)
1800da76:	b140      	st.w      	r2, (r1, 0x0)
    head->prev       = element;
1800da78:	b341      	st.w      	r2, (r3, 0x4)
}
1800da7a:	783c      	jmp      	r15
    for (tmp = list_start->next; tmp != list_end; tmp = tmp->next) {
1800da7c:	9360      	ld.w      	r3, (r3, 0x0)
1800da7e:	07ee      	br      	0x1800da5a	// 1800da5a <pend_list_add+0x2>

1800da80 <pend_task_wakeup>:

void pend_task_wakeup(ktask_t *task)
{
1800da80:	14d1      	push      	r4, r15
    /* wake up task depend on the different state of task */
    switch (task->task_state) {
1800da82:	9073      	ld.w      	r3, (r0, 0x4c)
1800da84:	3b42      	cmpnei      	r3, 2
{
1800da86:	6d03      	mov      	r4, r0
    switch (task->task_state) {
1800da88:	0c07      	bf      	0x1800da96	// 1800da96 <pend_task_wakeup+0x16>
1800da8a:	3b44      	cmpnei      	r3, 4
1800da8c:	0c15      	bf      	0x1800dab6	// 1800dab6 <pend_task_wakeup+0x36>
            /* remove task on the block list because task is waken up */
            klist_rm(&task->task_list);
            task->task_state = K_SUSPENDED;
            break;
        default:
            k_err_proc(RHINO_SYS_FATAL_ERR);
1800da8e:	3001      	movi      	r0, 1
1800da90:	e3fffd34 	bsr      	0x1800d4f8	// 1800d4f8 <k_err_proc>
            break;
1800da94:	040a      	br      	0x1800daa8	// 1800daa8 <pend_task_wakeup+0x28>
            klist_rm(&task->task_list);
1800da96:	200b      	addi      	r0, 12
1800da98:	e3ffffda 	bsr      	0x1800da4c	// 1800da4c <klist_rm>
            ready_list_add(&g_ready_queue, task);
1800da9c:	6c53      	mov      	r1, r4
1800da9e:	1009      	lrw      	r0, 0x20002364	// 1800dac0 <pend_task_wakeup+0x40>
1800daa0:	e00002e6 	bsr      	0x1800e06c	// 1800e06c <ready_list_add>
            task->task_state = K_RDY;
1800daa4:	3301      	movi      	r3, 1
            task->task_state = K_SUSPENDED;
1800daa6:	b473      	st.w      	r3, (r4, 0x4c)
    }

    /* remove task on the tick list because task is waken up */
    tick_list_rm(task);
1800daa8:	6c13      	mov      	r0, r4
1800daaa:	e0000953 	bsr      	0x1800ed50	// 1800ed50 <tick_list_rm>

    task->blk_state = BLK_FINISH;
1800daae:	3300      	movi      	r3, 0
1800dab0:	b474      	st.w      	r3, (r4, 0x50)
    task->blk_obj   = NULL;
1800dab2:	b475      	st.w      	r3, (r4, 0x54)
}
1800dab4:	1491      	pop      	r4, r15
            klist_rm(&task->task_list);
1800dab6:	200b      	addi      	r0, 12
1800dab8:	e3ffffca 	bsr      	0x1800da4c	// 1800da4c <klist_rm>
            task->task_state = K_SUSPENDED;
1800dabc:	3303      	movi      	r3, 3
1800dabe:	07f4      	br      	0x1800daa6	// 1800daa6 <pend_task_wakeup+0x26>
1800dac0:	20002364 	.long	0x20002364

1800dac4 <pend_to_blk_obj>:

void pend_to_blk_obj(blk_obj_t *blk_obj, ktask_t *task, tick_t timeout)
{
1800dac4:	14d2      	push      	r4-r5, r15
1800dac6:	6d07      	mov      	r4, r1
1800dac8:	6d43      	mov      	r5, r0
    /* task need to remember which object is blocked on */
    task->blk_obj = blk_obj;
1800daca:	b415      	st.w      	r0, (r4, 0x54)

    if (timeout != RHINO_WAIT_FOREVER) {
1800dacc:	3000      	movi      	r0, 0
1800dace:	2800      	subi      	r0, 1
1800dad0:	640a      	cmpne      	r2, r0
{
1800dad2:	6c4b      	mov      	r1, r2
    if (timeout != RHINO_WAIT_FOREVER) {
1800dad4:	0803      	bt      	0x1800dada	// 1800dada <pend_to_blk_obj+0x16>
1800dad6:	648e      	cmpne      	r3, r2
1800dad8:	0c05      	bf      	0x1800dae2	// 1800dae2 <pend_to_blk_obj+0x1e>
        tick_list_insert(task, timeout);
1800dada:	6c8f      	mov      	r2, r3
1800dadc:	6c13      	mov      	r0, r4
1800dade:	e0000901 	bsr      	0x1800ece0	// 1800ece0 <tick_list_insert>
    }

    task->task_state = K_PEND;
1800dae2:	3302      	movi      	r3, 2
1800dae4:	b473      	st.w      	r3, (r4, 0x4c)

    /* remove from the ready list */
    ready_list_rm(&g_ready_queue, task);
1800dae6:	6c53      	mov      	r1, r4
1800dae8:	100a      	lrw      	r0, 0x20002364	// 1800db10 <pend_to_blk_obj+0x4c>
1800daea:	e00002d3 	bsr      	0x1800e090	// 1800e090 <ready_list_rm>

    if (blk_obj->blk_policy == BLK_POLICY_FIFO) {
1800daee:	856c      	ld.b      	r3, (r5, 0xc)
1800daf0:	3b41      	cmpnei      	r3, 1
1800daf2:	080a      	bt      	0x1800db06	// 1800db06 <pend_to_blk_obj+0x42>
    element->prev = head->prev;
1800daf4:	9541      	ld.w      	r2, (r5, 0x4)
1800daf6:	b444      	st.w      	r2, (r4, 0x10)
    head->prev->next = element;
1800daf8:	9541      	ld.w      	r2, (r5, 0x4)
        /* add to the end of blocked objet list */
        klist_insert(&blk_obj->blk_list, &task->task_list);
1800dafa:	e464000b 	addi      	r3, r4, 12
    element->next = head;
1800dafe:	b4a3      	st.w      	r5, (r4, 0xc)
    head->prev->next = element;
1800db00:	b260      	st.w      	r3, (r2, 0x0)
    head->prev       = element;
1800db02:	b561      	st.w      	r3, (r5, 0x4)
    } else {
        /* add to the prio sorted block list */
        pend_list_add(&blk_obj->blk_list, task);
    }
}
1800db04:	1492      	pop      	r4-r5, r15
        pend_list_add(&blk_obj->blk_list, task);
1800db06:	6c53      	mov      	r1, r4
1800db08:	6c17      	mov      	r0, r5
1800db0a:	e3ffffa7 	bsr      	0x1800da58	// 1800da58 <pend_list_add>
}
1800db0e:	07fb      	br      	0x1800db04	// 1800db04 <pend_to_blk_obj+0x40>
1800db10:	20002364 	.long	0x20002364

1800db14 <pend_task_rm>:

void pend_task_rm(ktask_t *task)
{
1800db14:	14d1      	push      	r4, r15
    switch (task->task_state) {
1800db16:	9073      	ld.w      	r3, (r0, 0x4c)
1800db18:	3b42      	cmpnei      	r3, 2
{
1800db1a:	6d03      	mov      	r4, r0
    switch (task->task_state) {
1800db1c:	0c07      	bf      	0x1800db2a	// 1800db2a <pend_task_rm+0x16>
1800db1e:	3b44      	cmpnei      	r3, 4
1800db20:	0c16      	bf      	0x1800db4c	// 1800db4c <pend_task_rm+0x38>
            /* remove task on the block list because task is waken up */
            klist_rm(&task->task_list);
            task->task_state = K_SUSPENDED;
            break;
        default:
            k_err_proc(RHINO_SYS_FATAL_ERR);
1800db22:	3001      	movi      	r0, 1
1800db24:	e3fffcea 	bsr      	0x1800d4f8	// 1800d4f8 <k_err_proc>
            break;
1800db28:	040a      	br      	0x1800db3c	// 1800db3c <pend_task_rm+0x28>
            klist_rm(&task->task_list);
1800db2a:	200b      	addi      	r0, 12
1800db2c:	e3ffff90 	bsr      	0x1800da4c	// 1800da4c <klist_rm>
            ready_list_add(&g_ready_queue, task);
1800db30:	6c53      	mov      	r1, r4
1800db32:	100a      	lrw      	r0, 0x20002364	// 1800db58 <pend_task_rm+0x44>
1800db34:	e000029c 	bsr      	0x1800e06c	// 1800e06c <ready_list_add>
            task->task_state = K_RDY;
1800db38:	3301      	movi      	r3, 1
            task->task_state = K_SUSPENDED;
1800db3a:	b473      	st.w      	r3, (r4, 0x4c)
    }

    /* remove task on the tick list because task is waken up */
    tick_list_rm(task);
1800db3c:	6c13      	mov      	r0, r4
1800db3e:	e0000909 	bsr      	0x1800ed50	// 1800ed50 <tick_list_rm>
    task->blk_state = BLK_DEL;
1800db42:	3303      	movi      	r3, 3
1800db44:	b474      	st.w      	r3, (r4, 0x50)

    /* task is nothing blocked on so reset it to NULL */
    task->blk_obj = NULL;
1800db46:	3300      	movi      	r3, 0
1800db48:	b475      	st.w      	r3, (r4, 0x54)
}
1800db4a:	1491      	pop      	r4, r15
            klist_rm(&task->task_list);
1800db4c:	200b      	addi      	r0, 12
1800db4e:	e3ffff7f 	bsr      	0x1800da4c	// 1800da4c <klist_rm>
            task->task_state = K_SUSPENDED;
1800db52:	3303      	movi      	r3, 3
1800db54:	07f3      	br      	0x1800db3a	// 1800db3a <pend_task_rm+0x26>
1800db56:	0000      	.short	0x0000
1800db58:	20002364 	.long	0x20002364

1800db5c <pend_list_reorder>:

void pend_list_reorder(ktask_t *task)
{
1800db5c:	14d1      	push      	r4, r15
    if (task->blk_obj->blk_policy == BLK_POLICY_PRI) {
1800db5e:	9075      	ld.w      	r3, (r0, 0x54)
{
1800db60:	6d03      	mov      	r4, r0
    if (task->blk_obj->blk_policy == BLK_POLICY_PRI) {
1800db62:	836c      	ld.b      	r3, (r3, 0xc)
1800db64:	e9230009 	bnez      	r3, 0x1800db76	// 1800db76 <pend_list_reorder+0x1a>
        /* remove it first and add it again in prio sorted list */
        klist_rm(&task->task_list);
1800db68:	200b      	addi      	r0, 12
1800db6a:	e3ffff71 	bsr      	0x1800da4c	// 1800da4c <klist_rm>
        pend_list_add(&task->blk_obj->blk_list, task);
1800db6e:	6c53      	mov      	r1, r4
1800db70:	9415      	ld.w      	r0, (r4, 0x54)
1800db72:	e3ffff73 	bsr      	0x1800da58	// 1800da58 <pend_list_add>
    }
}
1800db76:	1491      	pop      	r4, r15

1800db78 <pend_state_end_proc>:

kstat_t pend_state_end_proc(ktask_t *task)
{
1800db78:	14d0      	push      	r15
    kstat_t status;

    switch (task->blk_state) {
1800db7a:	9014      	ld.w      	r0, (r0, 0x50)
1800db7c:	3841      	cmpnei      	r0, 1
1800db7e:	0c0d      	bf      	0x1800db98	// 1800db98 <pend_state_end_proc+0x20>
1800db80:	3840      	cmpnei      	r0, 0
1800db82:	0c0d      	bf      	0x1800db9c	// 1800db9c <pend_state_end_proc+0x24>
1800db84:	3842      	cmpnei      	r0, 2
1800db86:	0c0c      	bf      	0x1800db9e	// 1800db9e <pend_state_end_proc+0x26>
1800db88:	3843      	cmpnei      	r0, 3
1800db8a:	0c0d      	bf      	0x1800dba4	// 1800dba4 <pend_state_end_proc+0x2c>
            break;
        case BLK_DEL:
            status = RHINO_BLK_DEL;
            break;
        default:
            k_err_proc(RHINO_BLK_INV_STATE);
1800db8c:	30ca      	movi      	r0, 202
1800db8e:	4001      	lsli      	r0, r0, 1
1800db90:	e3fffcb4 	bsr      	0x1800d4f8	// 1800d4f8 <k_err_proc>
            status = RHINO_BLK_INV_STATE;
1800db94:	30ca      	movi      	r0, 202
1800db96:	0405      	br      	0x1800dba0	// 1800dba0 <pend_state_end_proc+0x28>
            status = RHINO_BLK_ABORT;
1800db98:	ea000191 	movi      	r0, 401
            break;
    }

    return status;
}
1800db9c:	1490      	pop      	r15
            status = RHINO_BLK_TIMEOUT;
1800db9e:	30c9      	movi      	r0, 201
            status = RHINO_BLK_INV_STATE;
1800dba0:	4001      	lsli      	r0, r0, 1
            break;
1800dba2:	07fd      	br      	0x1800db9c	// 1800db9c <pend_state_end_proc+0x24>
            status = RHINO_BLK_DEL;
1800dba4:	ea000193 	movi      	r0, 403
            break;
1800dba8:	07fa      	br      	0x1800db9c	// 1800db9c <pend_state_end_proc+0x24>
	...

1800dbac <ringbuf_is_full>:
    }
}

uint8_t ringbuf_is_full(k_ringbuf_t *p_ringbuf)
{
    if (p_ringbuf->type == RINGBUF_TYPE_DYN && p_ringbuf->freesize < 2) {
1800dbac:	9065      	ld.w      	r3, (r0, 0x14)
1800dbae:	3b41      	cmpnei      	r3, 1
1800dbb0:	0806      	bt      	0x1800dbbc	// 1800dbbc <ringbuf_is_full+0x10>
1800dbb2:	9064      	ld.w      	r3, (r0, 0x10)
1800dbb4:	3b01      	cmphsi      	r3, 2
        return 1;
    }

    if (p_ringbuf->type == RINGBUF_TYPE_FIX &&
1800dbb6:	6403      	mvcv      	r0
        return 1;
1800dbb8:	7400      	zextb      	r0, r0
        p_ringbuf->freesize < p_ringbuf->blk_size) {
        return 1;
    }

    return false;
}
1800dbba:	783c      	jmp      	r15
    if (p_ringbuf->type == RINGBUF_TYPE_FIX &&
1800dbbc:	e9230006 	bnez      	r3, 0x1800dbc8	// 1800dbc8 <ringbuf_is_full+0x1c>
1800dbc0:	9044      	ld.w      	r2, (r0, 0x10)
1800dbc2:	9066      	ld.w      	r3, (r0, 0x18)
1800dbc4:	64c8      	cmphs      	r2, r3
1800dbc6:	07f8      	br      	0x1800dbb6	// 1800dbb6 <ringbuf_is_full+0xa>
    return false;
1800dbc8:	3000      	movi      	r0, 0
1800dbca:	07f8      	br      	0x1800dbba	// 1800dbba <ringbuf_is_full+0xe>

1800dbcc <ringbuf_push>:
{
1800dbcc:	14d5      	push      	r4-r8, r15
1800dbce:	1422      	subi      	r14, r14, 8
    uint8_t  c_len[RINGBUF_LEN_MAX_SIZE] = {0};
1800dbd0:	3300      	movi      	r3, 0
{
1800dbd2:	6d03      	mov      	r4, r0
1800dbd4:	6e07      	mov      	r8, r1
1800dbd6:	6d8b      	mov      	r6, r2
    uint8_t  c_len[RINGBUF_LEN_MAX_SIZE] = {0};
1800dbd8:	dc6e1000 	st.h      	r3, (r14, 0x0)
1800dbdc:	dc6e0002 	st.b      	r3, (r14, 0x2)
    if (ringbuf_is_full(p_ringbuf)) {
1800dbe0:	e3ffffe6 	bsr      	0x1800dbac	// 1800dbac <ringbuf_is_full>
1800dbe4:	e9000005 	bez      	r0, 0x1800dbee	// 1800dbee <ringbuf_push+0x22>
        return RHINO_RINGBUF_FULL;
1800dbe8:	306a      	movi      	r0, 106
}
1800dbea:	1402      	addi      	r14, r14, 8
1800dbec:	1495      	pop      	r4-r8, r15
    if (p_ringbuf->type == RINGBUF_TYPE_FIX) {
1800dbee:	9465      	ld.w      	r3, (r4, 0x14)
1800dbf0:	e9230016 	bnez      	r3, 0x1800dc1c	// 1800dc1c <ringbuf_push+0x50>
        if (p_ringbuf->tail == p_ringbuf->end) {
1800dbf4:	9443      	ld.w      	r2, (r4, 0xc)
1800dbf6:	9461      	ld.w      	r3, (r4, 0x4)
1800dbf8:	64ca      	cmpne      	r2, r3
1800dbfa:	0803      	bt      	0x1800dc00	// 1800dc00 <ringbuf_push+0x34>
            p_ringbuf->tail = p_ringbuf->buf;
1800dbfc:	9460      	ld.w      	r3, (r4, 0x0)
1800dbfe:	b463      	st.w      	r3, (r4, 0xc)
        memcpy(p_ringbuf->tail, data, p_ringbuf->blk_size);
1800dc00:	9446      	ld.w      	r2, (r4, 0x18)
1800dc02:	6c63      	mov      	r1, r8
1800dc04:	9403      	ld.w      	r0, (r4, 0xc)
1800dc06:	e000412b 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
        p_ringbuf->tail     += p_ringbuf->blk_size;
1800dc0a:	9426      	ld.w      	r1, (r4, 0x18)
1800dc0c:	9443      	ld.w      	r2, (r4, 0xc)
        p_ringbuf->freesize -= p_ringbuf->blk_size;
1800dc0e:	9464      	ld.w      	r3, (r4, 0x10)
        p_ringbuf->tail     += p_ringbuf->blk_size;
1800dc10:	6084      	addu      	r2, r1
        p_ringbuf->freesize -= p_ringbuf->blk_size;
1800dc12:	60c6      	subu      	r3, r1
        p_ringbuf->tail     += p_ringbuf->blk_size;
1800dc14:	b443      	st.w      	r2, (r4, 0xc)
        p_ringbuf->freesize -= p_ringbuf->blk_size;
1800dc16:	b464      	st.w      	r3, (r4, 0x10)
   return RHINO_SUCCESS;
1800dc18:	3000      	movi      	r0, 0
1800dc1a:	07e8      	br      	0x1800dbea	// 1800dbea <ringbuf_push+0x1e>
    len_bytes = COMPRESS_LEN(head_len);
1800dc1c:	eb06007f 	cmphsi      	r6, 128
1800dc20:	78da      	revb      	r3, r6
    be_len = krhino_ntohl(head_len);
1800dc22:	b861      	st.w      	r3, (r14, 0x4)
    len_bytes = COMPRESS_LEN(head_len);
1800dc24:	0c61      	bf      	0x1800dce6	// 1800dce6 <ringbuf_push+0x11a>
1800dc26:	eb063fff 	cmphsi      	r6, 16384
1800dc2a:	0c66      	bf      	0x1800dcf6	// 1800dcf6 <ringbuf_push+0x12a>
1800dc2c:	c6a05023 	bmaski      	r3, 22
1800dc30:	658c      	cmphs      	r3, r6
1800dc32:	086f      	bt      	0x1800dd10	// 1800dd10 <ringbuf_push+0x144>
1800dc34:	3505      	movi      	r5, 5
        if (len_bytes == 0 || len_bytes > RINGBUF_LEN_MAX_SIZE ) {
1800dc36:	5d63      	subi      	r3, r5, 1
1800dc38:	3b02      	cmphsi      	r3, 3
1800dc3a:	0854      	bt      	0x1800dce2	// 1800dce2 <ringbuf_push+0x116>
        if (p_ringbuf->freesize < len_bytes + len ) {
1800dc3c:	5e74      	addu      	r3, r6, r5
1800dc3e:	9444      	ld.w      	r2, (r4, 0x10)
1800dc40:	64c8      	cmphs      	r2, r3
1800dc42:	0fd3      	bf      	0x1800dbe8	// 1800dbe8 <ringbuf_push+0x1c>
        if (p_ringbuf->tail == p_ringbuf->end) {
1800dc44:	94e1      	ld.w      	r7, (r4, 0x4)
1800dc46:	9463      	ld.w      	r3, (r4, 0xc)
1800dc48:	65ce      	cmpne      	r3, r7
1800dc4a:	0803      	bt      	0x1800dc50	// 1800dc50 <ringbuf_push+0x84>
            p_ringbuf->tail = p_ringbuf->buf;
1800dc4c:	9460      	ld.w      	r3, (r4, 0x0)
1800dc4e:	b463      	st.w      	r3, (r4, 0xc)
        if (p_ringbuf->tail >= p_ringbuf->head &&
1800dc50:	9403      	ld.w      	r0, (r4, 0xc)
1800dc52:	9462      	ld.w      	r3, (r4, 0x8)
1800dc54:	64c0      	cmphs      	r0, r3
1800dc56:	0c44      	bf      	0x1800dcde	// 1800dcde <ringbuf_push+0x112>
            (split_len = p_ringbuf->end - p_ringbuf->tail) < len_bytes && split_len > 0) {
1800dc58:	61c2      	subu      	r7, r0
        if (p_ringbuf->tail >= p_ringbuf->head &&
1800dc5a:	655c      	cmphs      	r7, r5
1800dc5c:	0841      	bt      	0x1800dcde	// 1800dcde <ringbuf_push+0x112>
            (split_len = p_ringbuf->end - p_ringbuf->tail) < len_bytes && split_len > 0) {
1800dc5e:	e907000e 	bez      	r7, 0x1800dc7a	// 1800dc7a <ringbuf_push+0xae>
            memcpy(p_ringbuf->tail, &c_len[0], split_len);
1800dc62:	6c9f      	mov      	r2, r7
1800dc64:	6c7b      	mov      	r1, r14
1800dc66:	e00040fb 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
            p_ringbuf->tail =  p_ringbuf->buf;
1800dc6a:	9460      	ld.w      	r3, (r4, 0x0)
1800dc6c:	b463      	st.w      	r3, (r4, 0xc)
            p_ringbuf->freesize -= split_len;
1800dc6e:	9464      	ld.w      	r3, (r4, 0x10)
1800dc70:	60de      	subu      	r3, r7
            len_bytes -= split_len;
1800dc72:	615e      	subu      	r5, r7
            p_ringbuf->freesize -= split_len;
1800dc74:	b464      	st.w      	r3, (r4, 0x10)
        if (len_bytes > 0) {
1800dc76:	e905000e 	bez      	r5, 0x1800dc92	// 1800dc92 <ringbuf_push+0xc6>
            memcpy(p_ringbuf->tail, &c_len[split_len], len_bytes);
1800dc7a:	6c97      	mov      	r2, r5
1800dc7c:	c4ee0021 	addu      	r1, r14, r7
1800dc80:	9403      	ld.w      	r0, (r4, 0xc)
1800dc82:	e00040ed 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
            p_ringbuf->freesize -= len_bytes;
1800dc86:	9464      	ld.w      	r3, (r4, 0x10)
1800dc88:	60d6      	subu      	r3, r5
1800dc8a:	b464      	st.w      	r3, (r4, 0x10)
            p_ringbuf->tail += len_bytes;
1800dc8c:	9463      	ld.w      	r3, (r4, 0xc)
1800dc8e:	614c      	addu      	r5, r3
1800dc90:	b4a3      	st.w      	r5, (r4, 0xc)
        if (p_ringbuf->tail == p_ringbuf->end) {
1800dc92:	94a1      	ld.w      	r5, (r4, 0x4)
1800dc94:	9463      	ld.w      	r3, (r4, 0xc)
1800dc96:	654e      	cmpne      	r3, r5
1800dc98:	0803      	bt      	0x1800dc9e	// 1800dc9e <ringbuf_push+0xd2>
            p_ringbuf->tail = p_ringbuf->buf;
1800dc9a:	9460      	ld.w      	r3, (r4, 0x0)
1800dc9c:	b463      	st.w      	r3, (r4, 0xc)
        if (p_ringbuf->tail >= p_ringbuf->head &&
1800dc9e:	9403      	ld.w      	r0, (r4, 0xc)
1800dca0:	9462      	ld.w      	r3, (r4, 0x8)
1800dca2:	64c0      	cmphs      	r0, r3
1800dca4:	0c11      	bf      	0x1800dcc6	// 1800dcc6 <ringbuf_push+0xfa>
            ((split_len = p_ringbuf->end - p_ringbuf->tail) < len) &&
1800dca6:	6142      	subu      	r5, r0
        if (p_ringbuf->tail >= p_ringbuf->head &&
1800dca8:	6594      	cmphs      	r5, r6
1800dcaa:	080e      	bt      	0x1800dcc6	// 1800dcc6 <ringbuf_push+0xfa>
            ((split_len = p_ringbuf->end - p_ringbuf->tail) < len) &&
1800dcac:	e905000d 	bez      	r5, 0x1800dcc6	// 1800dcc6 <ringbuf_push+0xfa>
            memcpy(p_ringbuf->tail, data, split_len);
1800dcb0:	6c97      	mov      	r2, r5
1800dcb2:	6c63      	mov      	r1, r8
1800dcb4:	e00040d4 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
            p_ringbuf->tail =  p_ringbuf->buf;
1800dcb8:	9460      	ld.w      	r3, (r4, 0x0)
1800dcba:	b463      	st.w      	r3, (r4, 0xc)
            p_ringbuf->freesize -= split_len;
1800dcbc:	9464      	ld.w      	r3, (r4, 0x10)
            data = (uint8_t *)data + split_len;
1800dcbe:	6214      	addu      	r8, r5
            len -= split_len;
1800dcc0:	6196      	subu      	r6, r5
            p_ringbuf->freesize -= split_len;
1800dcc2:	5bb5      	subu      	r5, r3, r5
1800dcc4:	b4a4      	st.w      	r5, (r4, 0x10)
        memcpy(p_ringbuf->tail, data, len);
1800dcc6:	6c9b      	mov      	r2, r6
1800dcc8:	6c63      	mov      	r1, r8
1800dcca:	9403      	ld.w      	r0, (r4, 0xc)
1800dccc:	e00040c8 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
        p_ringbuf->tail += len;
1800dcd0:	9463      	ld.w      	r3, (r4, 0xc)
1800dcd2:	60d8      	addu      	r3, r6
1800dcd4:	b463      	st.w      	r3, (r4, 0xc)
        p_ringbuf->freesize -= len;
1800dcd6:	9464      	ld.w      	r3, (r4, 0x10)
1800dcd8:	5bd9      	subu      	r6, r3, r6
1800dcda:	b4c4      	st.w      	r6, (r4, 0x10)
1800dcdc:	079e      	br      	0x1800dc18	// 1800dc18 <ringbuf_push+0x4c>
1800dcde:	3700      	movi      	r7, 0
1800dce0:	07cd      	br      	0x1800dc7a	// 1800dc7a <ringbuf_push+0xae>
            return RHINO_INV_PARAM;
1800dce2:	3005      	movi      	r0, 5
1800dce4:	0783      	br      	0x1800dbea	// 1800dbea <ringbuf_push+0x1e>
        cmp_buf[0] = RINGBUF_LEN_1BYTE_MAXVALUE & p_len[3];
1800dce6:	d86e0007 	ld.b      	r3, (r14, 0x7)
1800dcea:	e463207f 	andi      	r3, r3, 127
1800dcee:	dc6e0000 	st.b      	r3, (r14, 0x0)
    len_bytes = COMPRESS_LEN(head_len);
1800dcf2:	3501      	movi      	r5, 1
1800dcf4:	07a1      	br      	0x1800dc36	// 1800dc36 <ringbuf_push+0x6a>
        cmp_buf[0] = RINGBUF_LEN_VLE_2BYTES | p_len[2];
1800dcf6:	3200      	movi      	r2, 0
1800dcf8:	d86e0006 	ld.b      	r3, (r14, 0x6)
1800dcfc:	2a7f      	subi      	r2, 128
1800dcfe:	6cc8      	or      	r3, r2
1800dd00:	dc6e0000 	st.b      	r3, (r14, 0x0)
        cmp_buf[1] = p_len[3];
1800dd04:	d86e0007 	ld.b      	r3, (r14, 0x7)
1800dd08:	dc6e0001 	st.b      	r3, (r14, 0x1)
1800dd0c:	3502      	movi      	r5, 2
1800dd0e:	0794      	br      	0x1800dc36	// 1800dc36 <ringbuf_push+0x6a>
        cmp_buf[0] = RINGBUF_LEN_VLE_3BYTES | p_len[1];
1800dd10:	3200      	movi      	r2, 0
1800dd12:	d86e0005 	ld.b      	r3, (r14, 0x5)
1800dd16:	2a3f      	subi      	r2, 64
1800dd18:	6cc8      	or      	r3, r2
1800dd1a:	dc6e0000 	st.b      	r3, (r14, 0x0)
        cmp_buf[1] = p_len[2];
1800dd1e:	d86e0006 	ld.b      	r3, (r14, 0x6)
1800dd22:	dc6e0001 	st.b      	r3, (r14, 0x1)
        cmp_buf[2] = p_len[3];
1800dd26:	d86e0007 	ld.b      	r3, (r14, 0x7)
1800dd2a:	dc6e0002 	st.b      	r3, (r14, 0x2)
1800dd2e:	3503      	movi      	r5, 3
1800dd30:	0783      	br      	0x1800dc36	// 1800dc36 <ringbuf_push+0x6a>
	...

1800dd34 <ringbuf_is_empty>:

uint8_t ringbuf_is_empty(k_ringbuf_t *p_ringbuf)
{
    if (p_ringbuf->freesize == (size_t)(p_ringbuf->end - p_ringbuf->buf)) {
1800dd34:	9040      	ld.w      	r2, (r0, 0x0)
1800dd36:	9061      	ld.w      	r3, (r0, 0x4)
1800dd38:	60ca      	subu      	r3, r2
1800dd3a:	9044      	ld.w      	r2, (r0, 0x10)
1800dd3c:	648e      	cmpne      	r3, r2
1800dd3e:	6403      	mvcv      	r0
        return true;
    }

    return false;
}
1800dd40:	7400      	zextb      	r0, r0
1800dd42:	783c      	jmp      	r15

1800dd44 <ringbuf_pop>:
{
1800dd44:	14d8      	push      	r4-r11, r15
1800dd46:	1422      	subi      	r14, r14, 8
    uint8_t  c_len[RINGBUF_LEN_MAX_SIZE] = {0};
1800dd48:	3300      	movi      	r3, 0
{
1800dd4a:	6d03      	mov      	r4, r0
1800dd4c:	6e07      	mov      	r8, r1
1800dd4e:	6d8b      	mov      	r6, r2
    uint8_t  c_len[RINGBUF_LEN_MAX_SIZE] = {0};
1800dd50:	dc6e1000 	st.h      	r3, (r14, 0x0)
1800dd54:	dc6e0002 	st.b      	r3, (r14, 0x2)
    if (ringbuf_is_empty(p_ringbuf)) {
1800dd58:	e3ffffee 	bsr      	0x1800dd34	// 1800dd34 <ringbuf_is_empty>
1800dd5c:	e920008d 	bnez      	r0, 0x1800de76	// 1800de76 <ringbuf_pop+0x132>
    if (p_ringbuf->type == RINGBUF_TYPE_FIX) {
1800dd60:	9445      	ld.w      	r2, (r4, 0x14)
1800dd62:	9462      	ld.w      	r3, (r4, 0x8)
1800dd64:	94a1      	ld.w      	r5, (r4, 0x4)
        if (p_ringbuf->head == p_ringbuf->end) {
1800dd66:	654e      	cmpne      	r3, r5
    if (p_ringbuf->type == RINGBUF_TYPE_FIX) {
1800dd68:	e9220017 	bnez      	r2, 0x1800dd96	// 1800dd96 <ringbuf_pop+0x52>
        if (p_ringbuf->head == p_ringbuf->end) {
1800dd6c:	0803      	bt      	0x1800dd72	// 1800dd72 <ringbuf_pop+0x2e>
            p_ringbuf->head = p_ringbuf->buf;
1800dd6e:	9460      	ld.w      	r3, (r4, 0x0)
1800dd70:	b462      	st.w      	r3, (r4, 0x8)
        memcpy(pdata, p_ringbuf->head, p_ringbuf->blk_size);
1800dd72:	9446      	ld.w      	r2, (r4, 0x18)
1800dd74:	9422      	ld.w      	r1, (r4, 0x8)
1800dd76:	6c23      	mov      	r0, r8
1800dd78:	e0004072 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
        p_ringbuf->head += p_ringbuf->blk_size;
1800dd7c:	9466      	ld.w      	r3, (r4, 0x18)
1800dd7e:	9442      	ld.w      	r2, (r4, 0x8)
1800dd80:	608c      	addu      	r2, r3
1800dd82:	b442      	st.w      	r2, (r4, 0x8)
        p_ringbuf->freesize += p_ringbuf->blk_size;
1800dd84:	9444      	ld.w      	r2, (r4, 0x10)
1800dd86:	608c      	addu      	r2, r3
1800dd88:	b444      	st.w      	r2, (r4, 0x10)
        if (plen != NULL) {
1800dd8a:	e9060003 	bez      	r6, 0x1800dd90	// 1800dd90 <ringbuf_pop+0x4c>
            *plen = p_ringbuf->blk_size;
1800dd8e:	b660      	st.w      	r3, (r6, 0x0)
        return RHINO_SUCCESS;
1800dd90:	3000      	movi      	r0, 0
}
1800dd92:	1402      	addi      	r14, r14, 8
1800dd94:	1498      	pop      	r4-r11, r15
        if (p_ringbuf->head == p_ringbuf->end) {
1800dd96:	0803      	bt      	0x1800dd9c	// 1800dd9c <ringbuf_pop+0x58>
            p_ringbuf->head = p_ringbuf->buf;
1800dd98:	9460      	ld.w      	r3, (r4, 0x0)
1800dd9a:	b462      	st.w      	r3, (r4, 0x8)
        if ((*p_ringbuf->head & RINGBUF_LEN_MASK_ONEBIT) == 0 ) {
1800dd9c:	9422      	ld.w      	r1, (r4, 0x8)
1800dd9e:	8160      	ld.b      	r3, (r1, 0x0)
1800dda0:	748e      	sextb      	r2, r3
1800dda2:	e9a20063 	bhsz      	r2, 0x1800de68	// 1800de68 <ringbuf_pop+0x124>
1800dda6:	e46320c0 	andi      	r3, r3, 192
        } else if ((*p_ringbuf->head & RINGBUF_LEN_MASK_TWOBIT) ==
1800ddaa:	eb430080 	cmpnei      	r3, 128
1800ddae:	0c5f      	bf      	0x1800de6c	// 1800de6c <ringbuf_pop+0x128>
        } else if ((*p_ringbuf->head & RINGBUF_LEN_MASK_TWOBIT) ==
1800ddb0:	eb4300c0 	cmpnei      	r3, 192
1800ddb4:	0863      	bt      	0x1800de7a	// 1800de7a <ringbuf_pop+0x136>
            len_bytes = 3;
1800ddb6:	3703      	movi      	r7, 3
        if (((split_len = p_ringbuf->end - p_ringbuf->head) < len_bytes) &&
1800ddb8:	c4250089 	subu      	r9, r5, r1
1800ddbc:	65e4      	cmphs      	r9, r7
1800ddbe:	0859      	bt      	0x1800de70	// 1800de70 <ringbuf_pop+0x12c>
1800ddc0:	e909000b 	bez      	r9, 0x1800ddd6	// 1800ddd6 <ringbuf_pop+0x92>
            memcpy(&c_len[0], p_ringbuf->head, split_len);
1800ddc4:	6ca7      	mov      	r2, r9
1800ddc6:	6c3b      	mov      	r0, r14
1800ddc8:	e000404a 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
            p_ringbuf->head      =  p_ringbuf->buf;
1800ddcc:	9460      	ld.w      	r3, (r4, 0x0)
1800ddce:	b462      	st.w      	r3, (r4, 0x8)
            p_ringbuf->freesize += split_len;
1800ddd0:	9464      	ld.w      	r3, (r4, 0x10)
1800ddd2:	60e4      	addu      	r3, r9
1800ddd4:	b464      	st.w      	r3, (r4, 0x10)
            memcpy(&c_len[split_len], p_ringbuf->head, (len_bytes - split_len));
1800ddd6:	c527008a 	subu      	r10, r7, r9
1800ddda:	d9642002 	ld.w      	r11, (r4, 0x8)
1800ddde:	6cab      	mov      	r2, r10
1800dde0:	6c6f      	mov      	r1, r11
1800dde2:	c52e0020 	addu      	r0, r14, r9
1800dde6:	e000403b 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
            p_ringbuf->freesize += (len_bytes - split_len);
1800ddea:	9444      	ld.w      	r2, (r4, 0x10)
1800ddec:	60a8      	addu      	r2, r10
            p_ringbuf->head     += (len_bytes - split_len);
1800ddee:	62e8      	addu      	r11, r10
    uint32_t be_len   = 0;
1800ddf0:	e54e0003 	addi      	r10, r14, 4
1800ddf4:	3300      	movi      	r3, 0
1800ddf6:	dc6a2000 	st.w      	r3, (r10, 0x0)
    memcpy(&len_buf[sizeof(uint32_t) - buf_len], cmp_buf, buf_len);
1800ddfa:	c4ea0083 	subu      	r3, r10, r7
1800ddfe:	2303      	addi      	r3, 4
            p_ringbuf->freesize += (len_bytes - split_len);
1800de00:	b444      	st.w      	r2, (r4, 0x10)
            p_ringbuf->head     += (len_bytes - split_len);
1800de02:	dd642002 	st.w      	r11, (r4, 0x8)
    memcpy(&len_buf[sizeof(uint32_t) - buf_len], cmp_buf, buf_len);
1800de06:	6c9f      	mov      	r2, r7
1800de08:	6c7b      	mov      	r1, r14
1800de0a:	6c0f      	mov      	r0, r3
1800de0c:	e0004028 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
    if (buf_len > 1) {
1800de10:	3f41      	cmpnei      	r7, 1
1800de12:	0c05      	bf      	0x1800de1c	// 1800de1c <ringbuf_pop+0xd8>
        len_buf[sizeof(uint32_t) - buf_len] &= RINGBUF_LEN_MASK_CLEAN_TWOBIT;
1800de14:	8040      	ld.b      	r2, (r0, 0x0)
1800de16:	e442203f 	andi      	r2, r2, 63
1800de1a:	a040      	st.b      	r2, (r0, 0x0)
1800de1c:	d8ea2000 	ld.w      	r7, (r10, 0x0)
        if (p_ringbuf->head == p_ringbuf->end) {
1800de20:	66d6      	cmpne      	r5, r11
1800de22:	79de      	revb      	r7, r7
        *plen = len = ringbuf_headlen_decompress(len_bytes, c_len);
1800de24:	b6e0      	st.w      	r7, (r6, 0x0)
        if (p_ringbuf->head == p_ringbuf->end) {
1800de26:	0803      	bt      	0x1800de2c	// 1800de2c <ringbuf_pop+0xe8>
            p_ringbuf->head = p_ringbuf->buf;
1800de28:	9460      	ld.w      	r3, (r4, 0x0)
1800de2a:	b462      	st.w      	r3, (r4, 0x8)
        if (p_ringbuf->head > p_ringbuf->tail &&
1800de2c:	9422      	ld.w      	r1, (r4, 0x8)
1800de2e:	9463      	ld.w      	r3, (r4, 0xc)
1800de30:	644c      	cmphs      	r3, r1
1800de32:	080f      	bt      	0x1800de50	// 1800de50 <ringbuf_pop+0x10c>
            (split_len = p_ringbuf->end - p_ringbuf->head) < len) {
1800de34:	6146      	subu      	r5, r1
        if (p_ringbuf->head > p_ringbuf->tail &&
1800de36:	65d4      	cmphs      	r5, r7
1800de38:	080c      	bt      	0x1800de50	// 1800de50 <ringbuf_pop+0x10c>
            memcpy(pdata, p_ringbuf->head, split_len);
1800de3a:	6c97      	mov      	r2, r5
1800de3c:	6c23      	mov      	r0, r8
1800de3e:	e000400f 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
            p_ringbuf->head      = p_ringbuf->buf;
1800de42:	9460      	ld.w      	r3, (r4, 0x0)
1800de44:	b462      	st.w      	r3, (r4, 0x8)
            p_ringbuf->freesize += split_len;
1800de46:	9464      	ld.w      	r3, (r4, 0x10)
            data = (uint8_t *)pdata + split_len;
1800de48:	6214      	addu      	r8, r5
            len -= split_len;
1800de4a:	61d6      	subu      	r7, r5
            p_ringbuf->freesize += split_len;
1800de4c:	614c      	addu      	r5, r3
1800de4e:	b4a4      	st.w      	r5, (r4, 0x10)
        memcpy(data, p_ringbuf->head, len);
1800de50:	6c9f      	mov      	r2, r7
1800de52:	9422      	ld.w      	r1, (r4, 0x8)
1800de54:	6c23      	mov      	r0, r8
1800de56:	e0004003 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
        p_ringbuf->head     += len;
1800de5a:	9462      	ld.w      	r3, (r4, 0x8)
1800de5c:	60dc      	addu      	r3, r7
1800de5e:	b462      	st.w      	r3, (r4, 0x8)
        p_ringbuf->freesize += len;
1800de60:	9464      	ld.w      	r3, (r4, 0x10)
1800de62:	61cc      	addu      	r7, r3
1800de64:	b4e4      	st.w      	r7, (r4, 0x10)
1800de66:	0795      	br      	0x1800dd90	// 1800dd90 <ringbuf_pop+0x4c>
            len_bytes = 1;
1800de68:	3701      	movi      	r7, 1
1800de6a:	07a7      	br      	0x1800ddb8	// 1800ddb8 <ringbuf_pop+0x74>
            len_bytes = 2;
1800de6c:	3702      	movi      	r7, 2
1800de6e:	07a5      	br      	0x1800ddb8	// 1800ddb8 <ringbuf_pop+0x74>
1800de70:	ea090000 	movi      	r9, 0
1800de74:	07b1      	br      	0x1800ddd6	// 1800ddd6 <ringbuf_pop+0x92>
        return RHINO_RINGBUF_EMPTY;
1800de76:	306b      	movi      	r0, 107
1800de78:	078d      	br      	0x1800dd92	// 1800dd92 <ringbuf_pop+0x4e>
            return RHINO_INV_PARAM;
1800de7a:	3005      	movi      	r0, 5
1800de7c:	078b      	br      	0x1800dd92	// 1800dd92 <ringbuf_pop+0x4e>
	...

1800de80 <ringbuf_reset>:
/*external api*/

kstat_t ringbuf_reset(k_ringbuf_t *p_ringbuf)
{
    p_ringbuf->head = p_ringbuf->buf;
1800de80:	9040      	ld.w      	r2, (r0, 0x0)
    p_ringbuf->tail = p_ringbuf->buf;
    p_ringbuf->freesize = p_ringbuf->end - p_ringbuf->buf;
1800de82:	9061      	ld.w      	r3, (r0, 0x4)
1800de84:	60ca      	subu      	r3, r2
    p_ringbuf->head = p_ringbuf->buf;
1800de86:	b042      	st.w      	r2, (r0, 0x8)
    p_ringbuf->tail = p_ringbuf->buf;
1800de88:	b043      	st.w      	r2, (r0, 0xc)
    p_ringbuf->freesize = p_ringbuf->end - p_ringbuf->buf;
1800de8a:	b064      	st.w      	r3, (r0, 0x10)

    return RHINO_SUCCESS;
}
1800de8c:	3000      	movi      	r0, 0
1800de8e:	783c      	jmp      	r15

1800de90 <ringbuf_init>:
{
1800de90:	14d0      	push      	r15
1800de92:	d9ae2001 	ld.w      	r13, (r14, 0x4)
    p_ringbuf->end      = (uint8_t *)buf + len;
1800de96:	6084      	addu      	r2, r1
    p_ringbuf->type     = type;
1800de98:	b065      	st.w      	r3, (r0, 0x14)
    p_ringbuf->buf      = buf;
1800de9a:	b020      	st.w      	r1, (r0, 0x0)
    p_ringbuf->end      = (uint8_t *)buf + len;
1800de9c:	b041      	st.w      	r2, (r0, 0x4)
    p_ringbuf->blk_size = block_size;
1800de9e:	dda02006 	st.w      	r13, (r0, 0x18)
    ringbuf_reset(p_ringbuf);
1800dea2:	e3ffffef 	bsr      	0x1800de80	// 1800de80 <ringbuf_reset>
}
1800dea6:	3000      	movi      	r0, 0
1800dea8:	1490      	pop      	r15
	...

1800deac <ready_list_init>:
    }
}

RHINO_INLINE void ready_list_init(runqueue_t *rq, ktask_t *task)
{
    rq->cur_list_item[task->prio] = &task->task_list;
1800deac:	d861006f 	ld.b      	r3, (r1, 0x6f)
1800deb0:	e441000b 	addi      	r2, r1, 12
 ** @param[in]  nr      position of the bitmap to set
 ** @return  no return
 **/
RHINO_INLINE void krhino_bitmap_set(uint32_t *bitmap, int32_t nr)
{
    bitmap[BITMAP_WORD(nr)] |= BITMAP_MASK(nr);
1800deb4:	c4a3488c 	asri      	r12, r3, 5
1800deb8:	d4600882 	str.w      	r2, (r0, r3 << 2)
1800debc:	c44c482c 	lsli      	r12, r12, 2
    list_head->next = list_head;
1800dec0:	b143      	st.w      	r2, (r1, 0xc)
    list_head->prev = list_head;
1800dec2:	b144      	st.w      	r2, (r1, 0x10)
    klist_init(rq->cur_list_item[task->prio]);
    krhino_bitmap_set(rq->task_bit_map, task->prio);
1800dec4:	e44000f7 	addi      	r2, r0, 248
1800dec8:	60b0      	addu      	r2, r12
1800deca:	6cce      	nor      	r3, r3
1800decc:	e463201f 	andi      	r3, r3, 31
1800ded0:	ea0c0001 	movi      	r12, 1
1800ded4:	730c      	lsl      	r12, r3
1800ded6:	9260      	ld.w      	r3, (r2, 0x0)
1800ded8:	6cf0      	or      	r3, r12
1800deda:	b260      	st.w      	r3, (r2, 0x0)

    if ((task->prio) < (rq->highest_pri)) {
1800dedc:	d861006f 	ld.b      	r3, (r1, 0x6f)
1800dee0:	d8400100 	ld.b      	r2, (r0, 0x100)
1800dee4:	648c      	cmphs      	r3, r2
1800dee6:	0803      	bt      	0x1800deec	// 1800deec <ready_list_init+0x40>
        rq->highest_pri = task->prio;
1800dee8:	dc600100 	st.b      	r3, (r0, 0x100)
    }
}
1800deec:	783c      	jmp      	r15
	...

1800def0 <_ready_list_add_head>:

    klist_insert(rq->cur_list_item[task->prio], &task->task_list);
}

RHINO_INLINE void _ready_list_add_head(runqueue_t *rq, ktask_t *task)
{
1800def0:	14d0      	push      	r15
    return (g_ready_queue.cur_list_item[prio] == NULL);
1800def2:	d841006f 	ld.b      	r2, (r1, 0x6f)
1800def6:	ea8d000d 	lrw      	r13, 0x20002364	// 1800df28 <_ready_list_add_head+0x38>
{
1800defa:	6f03      	mov      	r12, r0
    if (is_ready_list_empty(task->prio)) {
1800defc:	d04d088d 	ldr.w      	r13, (r13, r2 << 2)
{
1800df00:	6cc7      	mov      	r3, r1
    if (is_ready_list_empty(task->prio)) {
1800df02:	e92d0005 	bnez      	r13, 0x1800df0c	// 1800df0c <_ready_list_add_head+0x1c>
        ready_list_init(rq, task);
1800df06:	e3ffffd3 	bsr      	0x1800deac	// 1800deac <ready_list_init>
        return;
    }

    klist_insert(rq->cur_list_item[task->prio], &task->task_list);
    rq->cur_list_item[task->prio] = &task->task_list;
}
1800df0a:	1490      	pop      	r15
    klist_insert(rq->cur_list_item[task->prio], &task->task_list);
1800df0c:	d0400882 	ldr.w      	r2, (r0, r2 << 2)
1800df10:	210b      	addi      	r1, 12
    element->prev = head->prev;
1800df12:	9201      	ld.w      	r0, (r2, 0x4)
1800df14:	b304      	st.w      	r0, (r3, 0x10)
    head->prev->next = element;
1800df16:	9201      	ld.w      	r0, (r2, 0x4)
    element->next = head;
1800df18:	b343      	st.w      	r2, (r3, 0xc)
    head->prev->next = element;
1800df1a:	b020      	st.w      	r1, (r0, 0x0)
    head->prev       = element;
1800df1c:	b221      	st.w      	r1, (r2, 0x4)
    rq->cur_list_item[task->prio] = &task->task_list;
1800df1e:	d863006f 	ld.b      	r3, (r3, 0x6f)
1800df22:	d46c0881 	str.w      	r1, (r12, r3 << 2)
1800df26:	07f2      	br      	0x1800df0a	// 1800df0a <_ready_list_add_head+0x1a>
1800df28:	20002364 	.long	0x20002364

1800df2c <_ready_list_add_tail>:
{
1800df2c:	14d0      	push      	r15
    return (g_ready_queue.cur_list_item[prio] == NULL);
1800df2e:	d861006f 	ld.b      	r3, (r1, 0x6f)
1800df32:	ea8d000b 	lrw      	r13, 0x20002364	// 1800df5c <_ready_list_add_tail+0x30>
{
1800df36:	6c87      	mov      	r2, r1
    if (is_ready_list_empty(task->prio)) {
1800df38:	d06d088d 	ldr.w      	r13, (r13, r3 << 2)
1800df3c:	e92d0005 	bnez      	r13, 0x1800df46	// 1800df46 <_ready_list_add_tail+0x1a>
        ready_list_init(rq, task);
1800df40:	e3ffffb6 	bsr      	0x1800deac	// 1800deac <ready_list_init>
}
1800df44:	1490      	pop      	r15
    klist_insert(rq->cur_list_item[task->prio], &task->task_list);
1800df46:	d0600883 	ldr.w      	r3, (r0, r3 << 2)
1800df4a:	210b      	addi      	r1, 12
    element->prev = head->prev;
1800df4c:	9301      	ld.w      	r0, (r3, 0x4)
1800df4e:	b204      	st.w      	r0, (r2, 0x10)
    element->next = head;
1800df50:	b263      	st.w      	r3, (r2, 0xc)
    head->prev->next = element;
1800df52:	9341      	ld.w      	r2, (r3, 0x4)
1800df54:	b220      	st.w      	r1, (r2, 0x0)
    head->prev       = element;
1800df56:	b321      	st.w      	r1, (r3, 0x4)
1800df58:	07f6      	br      	0x1800df44	// 1800df44 <_ready_list_add_tail+0x18>
1800df5a:	0000      	.short	0x0000
1800df5c:	20002364 	.long	0x20002364

1800df60 <krhino_sched_disable>:
{
1800df60:	14d1      	push      	r4, r15
    RHINO_CRITICAL_ENTER();
1800df62:	e3ff952f 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
    INTRPT_NESTED_LEVEL_CHK();
1800df66:	106d      	lrw      	r3, 0x20002841	// 1800df98 <krhino_sched_disable+0x38>
1800df68:	8380      	ld.b      	r4, (r3, 0x0)
1800df6a:	e9040007 	bez      	r4, 0x1800df78	// 1800df78 <krhino_sched_disable+0x18>
1800df6e:	e3ff952e 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800df72:	ea0003ea 	movi      	r0, 1002
}
1800df76:	1491      	pop      	r4, r15
    if (g_sched_lock[cpu_cur_get()] >= SCHED_MAX_LOCK_COUNT) {
1800df78:	1049      	lrw      	r2, 0x20002944	// 1800df9c <krhino_sched_disable+0x3c>
1800df7a:	8260      	ld.b      	r3, (r2, 0x0)
1800df7c:	eb0300c7 	cmphsi      	r3, 200
1800df80:	0c05      	bf      	0x1800df8a	// 1800df8a <krhino_sched_disable+0x2a>
        RHINO_CRITICAL_EXIT();
1800df82:	e3ff9524 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_SCHED_LOCK_COUNT_OVF;
1800df86:	30ca      	movi      	r0, 202
1800df88:	07f7      	br      	0x1800df76	// 1800df76 <krhino_sched_disable+0x16>
    g_sched_lock[cpu_cur_get()]++;
1800df8a:	2300      	addi      	r3, 1
1800df8c:	a260      	st.b      	r3, (r2, 0x0)
    RHINO_CRITICAL_EXIT();
1800df8e:	e3ff951e 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
    return RHINO_SUCCESS;
1800df92:	6c13      	mov      	r0, r4
1800df94:	07f1      	br      	0x1800df76	// 1800df76 <krhino_sched_disable+0x16>
1800df96:	0000      	.short	0x0000
1800df98:	20002841 	.long	0x20002841
1800df9c:	20002944 	.long	0x20002944

1800dfa0 <core_sched>:
{
1800dfa0:	14d1      	push      	r4, r15
    RHINO_CPU_INTRPT_DISABLE();
1800dfa2:	e3ff950f 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
    if (g_intrpt_nested_level[cur_cpu_num] > 0u) {
1800dfa6:	106f      	lrw      	r3, 0x20002841	// 1800dfe0 <core_sched+0x40>
    RHINO_CPU_INTRPT_DISABLE();
1800dfa8:	6d03      	mov      	r4, r0
    if (g_intrpt_nested_level[cur_cpu_num] > 0u) {
1800dfaa:	8360      	ld.b      	r3, (r3, 0x0)
1800dfac:	e9030005 	bez      	r3, 0x1800dfb6	// 1800dfb6 <core_sched+0x16>
    RHINO_CPU_INTRPT_ENABLE();
1800dfb0:	e3ff950d 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
}
1800dfb4:	1491      	pop      	r4, r15
    if (g_sched_lock[cur_cpu_num] > 0u) {
1800dfb6:	106c      	lrw      	r3, 0x20002944	// 1800dfe4 <core_sched+0x44>
1800dfb8:	8360      	ld.b      	r3, (r3, 0x0)
1800dfba:	e923fffb 	bnez      	r3, 0x1800dfb0	// 1800dfb0 <core_sched+0x10>
    }
}
#else
void preferred_cpu_ready_task_get(runqueue_t *rq, uint8_t cpu_num)
{
    klist_t *node = rq->cur_list_item[rq->highest_pri];
1800dfbe:	106b      	lrw      	r3, 0x20002364	// 1800dfe8 <core_sched+0x48>
1800dfc0:	d8430100 	ld.b      	r2, (r3, 0x100)
    /* get the highest prio task object */
    g_preferred_ready_task[cpu_num] = krhino_list_entry(node, ktask_t, task_list);
1800dfc4:	d0430883 	ldr.w      	r3, (r3, r2 << 2)
1800dfc8:	2b0b      	subi      	r3, 12
1800dfca:	1049      	lrw      	r2, 0x2000282c	// 1800dfec <core_sched+0x4c>
1800dfcc:	b260      	st.w      	r3, (r2, 0x0)
    if (g_preferred_ready_task[cur_cpu_num] == g_active_task[cur_cpu_num]) {
1800dfce:	1049      	lrw      	r2, 0x20002828	// 1800dff0 <core_sched+0x50>
1800dfd0:	9240      	ld.w      	r2, (r2, 0x0)
1800dfd2:	64ca      	cmpne      	r2, r3
1800dfd4:	0fee      	bf      	0x1800dfb0	// 1800dfb0 <core_sched+0x10>
    cpu_task_switch();
1800dfd6:	e3ff9508 	bsr      	0x180009e6	// 180009e6 <cpu_task_switch>
    RHINO_CPU_INTRPT_ENABLE();
1800dfda:	6c13      	mov      	r0, r4
1800dfdc:	07ea      	br      	0x1800dfb0	// 1800dfb0 <core_sched+0x10>
1800dfde:	0000      	.short	0x0000
1800dfe0:	20002841 	.long	0x20002841
1800dfe4:	20002944 	.long	0x20002944
1800dfe8:	20002364 	.long	0x20002364
1800dfec:	2000282c 	.long	0x2000282c
1800dff0:	20002828 	.long	0x20002828

1800dff4 <krhino_sched_enable>:
{
1800dff4:	14d1      	push      	r4, r15
    RHINO_CRITICAL_ENTER();
1800dff6:	e3ff94e5 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
    INTRPT_NESTED_LEVEL_CHK();
1800dffa:	1071      	lrw      	r3, 0x20002841	// 1800e03c <krhino_sched_enable+0x48>
1800dffc:	8360      	ld.b      	r3, (r3, 0x0)
1800dffe:	e9030007 	bez      	r3, 0x1800e00c	// 1800e00c <krhino_sched_enable+0x18>
1800e002:	e3ff94e4 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800e006:	ea0003ea 	movi      	r0, 1002
}
1800e00a:	1491      	pop      	r4, r15
    if (g_sched_lock[cpu_cur_get()] == 0u) {
1800e00c:	106d      	lrw      	r3, 0x20002944	// 1800e040 <krhino_sched_enable+0x4c>
1800e00e:	8380      	ld.b      	r4, (r3, 0x0)
1800e010:	e9240006 	bnez      	r4, 0x1800e01c	// 1800e01c <krhino_sched_enable+0x28>
        RHINO_CRITICAL_EXIT();
1800e014:	e3ff94db 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_SCHED_ALREADY_ENABLED;
1800e018:	30c9      	movi      	r0, 201
1800e01a:	07f8      	br      	0x1800e00a	// 1800e00a <krhino_sched_enable+0x16>
    g_sched_lock[cpu_cur_get()]--;
1800e01c:	2c00      	subi      	r4, 1
1800e01e:	7510      	zextb      	r4, r4
1800e020:	a380      	st.b      	r4, (r3, 0x0)
    if (g_sched_lock[cpu_cur_get()] > 0u) {
1800e022:	e9040006 	bez      	r4, 0x1800e02e	// 1800e02e <krhino_sched_enable+0x3a>
        RHINO_CRITICAL_EXIT();
1800e026:	e3ff94d2 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_SCHED_DISABLE;
1800e02a:	30c8      	movi      	r0, 200
1800e02c:	07ef      	br      	0x1800e00a	// 1800e00a <krhino_sched_enable+0x16>
    RHINO_CRITICAL_EXIT_SCHED();
1800e02e:	e3ff94ce 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800e032:	e3ffffb7 	bsr      	0x1800dfa0	// 1800dfa0 <core_sched>
    return RHINO_SUCCESS;
1800e036:	6c13      	mov      	r0, r4
1800e038:	07e9      	br      	0x1800e00a	// 1800e00a <krhino_sched_enable+0x16>
1800e03a:	0000      	.short	0x0000
1800e03c:	20002841 	.long	0x20002841
1800e040:	20002944 	.long	0x20002944

1800e044 <runqueue_init>:
    rq->highest_pri = RHINO_CONFIG_PRI_MAX;
1800e044:	333e      	movi      	r3, 62
1800e046:	dc600100 	st.b      	r3, (r0, 0x100)
        rq->cur_list_item[prio] = NULL;
1800e04a:	3200      	movi      	r2, 0
1800e04c:	e46000f7 	addi      	r3, r0, 248
1800e050:	b040      	st.w      	r2, (r0, 0x0)
1800e052:	2003      	addi      	r0, 4
    for (prio = 0; prio < RHINO_CONFIG_PRI_MAX; prio++) {
1800e054:	64c2      	cmpne      	r0, r3
1800e056:	0bfd      	bt      	0x1800e050	// 1800e050 <runqueue_init+0xc>
}
1800e058:	783c      	jmp      	r15
	...

1800e05c <ready_list_add_head>:
{
1800e05c:	14d0      	push      	r15
    _ready_list_add_head(rq, task);
1800e05e:	e3ffff49 	bsr      	0x1800def0	// 1800def0 <_ready_list_add_head>
}
1800e062:	1490      	pop      	r15

1800e064 <ready_list_add_tail>:
{
1800e064:	14d0      	push      	r15
    _ready_list_add_tail(rq, task);
1800e066:	e3ffff63 	bsr      	0x1800df2c	// 1800df2c <_ready_list_add_tail>
}
1800e06a:	1490      	pop      	r15

1800e06c <ready_list_add>:
{
1800e06c:	14d0      	push      	r15
    if (task->prio == g_active_task[cpu_cur_get()]->prio) {
1800e06e:	1068      	lrw      	r3, 0x20002828	// 1800e08c <ready_list_add+0x20>
1800e070:	d841006f 	ld.b      	r2, (r1, 0x6f)
1800e074:	9360      	ld.w      	r3, (r3, 0x0)
1800e076:	d863006f 	ld.b      	r3, (r3, 0x6f)
1800e07a:	64ca      	cmpne      	r2, r3
1800e07c:	0804      	bt      	0x1800e084	// 1800e084 <ready_list_add+0x18>
    _ready_list_add_tail(rq, task);
1800e07e:	e3ffff57 	bsr      	0x1800df2c	// 1800df2c <_ready_list_add_tail>
}
1800e082:	1490      	pop      	r15
    _ready_list_add_head(rq, task);
1800e084:	e3ffff36 	bsr      	0x1800def0	// 1800def0 <_ready_list_add_head>
}
1800e088:	07fd      	br      	0x1800e082	// 1800e082 <ready_list_add+0x16>
1800e08a:	0000      	.short	0x0000
1800e08c:	20002828 	.long	0x20002828

1800e090 <ready_list_rm>:
{
1800e090:	14d1      	push      	r4, r15
    uint8_t  pri = task->prio;
1800e092:	d9a1006f 	ld.b      	r13, (r1, 0x6f)
1800e096:	c44d4822 	lsli      	r2, r13, 2
1800e09a:	6080      	addu      	r2, r0
    if ((rq->cur_list_item[pri]) != (rq->cur_list_item[pri]->next)) {
1800e09c:	9260      	ld.w      	r3, (r2, 0x0)
1800e09e:	d9832000 	ld.w      	r12, (r3, 0x0)
1800e0a2:	670e      	cmpne      	r3, r12
1800e0a4:	0c0d      	bf      	0x1800e0be	// 1800e0be <ready_list_rm+0x2e>
        if (rq->cur_list_item[pri] == &task->task_list) {
1800e0a6:	e401000b 	addi      	r0, r1, 12
1800e0aa:	640e      	cmpne      	r3, r0
1800e0ac:	0803      	bt      	0x1800e0b2	// 1800e0b2 <ready_list_rm+0x22>
            rq->cur_list_item[pri] = rq->cur_list_item[pri]->next;
1800e0ae:	dd822000 	st.w      	r12, (r2, 0x0)
    element->prev->next = element->next;
1800e0b2:	9164      	ld.w      	r3, (r1, 0x10)
1800e0b4:	9143      	ld.w      	r2, (r1, 0xc)
1800e0b6:	b340      	st.w      	r2, (r3, 0x0)
    element->next->prev = element->prev;
1800e0b8:	9143      	ld.w      	r2, (r1, 0xc)
1800e0ba:	b261      	st.w      	r3, (r2, 0x4)
}
1800e0bc:	1491      	pop      	r4, r15
    rq->cur_list_item[pri] = NULL;
1800e0be:	3300      	movi      	r3, 0
1800e0c0:	b260      	st.w      	r3, (r2, 0x0)
 ** @param[in]  nr      position of the bitmap to clear
 ** @return  no return
 **/
RHINO_INLINE void krhino_bitmap_clear(uint32_t *bitmap, int32_t nr)
{
    bitmap[BITMAP_WORD(nr)] &= ~BITMAP_MASK(nr);
1800e0c2:	c4ad4882 	asri      	r2, r13, 5
    krhino_bitmap_clear(rq->task_bit_map, pri);
1800e0c6:	e42000f7 	addi      	r1, r0, 248
1800e0ca:	4242      	lsli      	r2, r2, 2
1800e0cc:	6084      	addu      	r2, r1
1800e0ce:	c5ad248c 	nor      	r12, r13, r13
1800e0d2:	e48c201f 	andi      	r4, r12, 31
1800e0d6:	e5831001 	subi      	r12, r3, 2
1800e0da:	7313      	rotl      	r12, r4
1800e0dc:	9280      	ld.w      	r4, (r2, 0x0)
1800e0de:	6b10      	and      	r12, r4
1800e0e0:	dd822000 	st.w      	r12, (r2, 0x0)
    if (pri != rq->highest_pri) {
1800e0e4:	d8400100 	ld.b      	r2, (r0, 0x100)
1800e0e8:	674a      	cmpne      	r2, r13
1800e0ea:	0be9      	bt      	0x1800e0bc	// 1800e0bc <ready_list_rm+0x2c>
RHINO_INLINE int krhino_find_first_bit(uint32_t *bitmap)
{
    int32_t  nr  = 0;
    uint32_t tmp = 0;

    while (*bitmap == 0UL) {
1800e0ec:	9140      	ld.w      	r2, (r1, 0x0)
1800e0ee:	e9020026 	bez      	r2, 0x1800e13a	// 1800e13a <ready_list_rm+0xaa>
#if (RHINO_CONFIG_LITTLE_ENDIAN == 0)
    tmp = LITTLE_TO_BIG_ENDIAN(tmp);
#endif

#if (RHINO_CONFIG_BITMAP_HW == 0)
    if (!(tmp & 0XFFFF0000)) {
1800e0f2:	ea21ffff 	movih      	r1, 65535
1800e0f6:	6848      	and      	r1, r2
1800e0f8:	e9210004 	bnez      	r1, 0x1800e100	// 1800e100 <ready_list_rm+0x70>
        tmp <<= 16;
1800e0fc:	4250      	lsli      	r2, r2, 16
        nr   += 16;
1800e0fe:	230f      	addi      	r3, 16
    }

    if (!(tmp & 0XFF000000)) {
1800e100:	31ff      	movi      	r1, 255
1800e102:	4138      	lsli      	r1, r1, 24
1800e104:	6848      	and      	r1, r2
1800e106:	e9210004 	bnez      	r1, 0x1800e10e	// 1800e10e <ready_list_rm+0x7e>
        tmp <<= 8;
1800e10a:	4248      	lsli      	r2, r2, 8
        nr   += 8;
1800e10c:	2307      	addi      	r3, 8
    }

    if (!(tmp & 0XF0000000)) {
1800e10e:	31f0      	movi      	r1, 240
1800e110:	4138      	lsli      	r1, r1, 24
1800e112:	6848      	and      	r1, r2
1800e114:	e9210004 	bnez      	r1, 0x1800e11c	// 1800e11c <ready_list_rm+0x8c>
        tmp <<= 4;
1800e118:	4244      	lsli      	r2, r2, 4
        nr   += 4;
1800e11a:	2303      	addi      	r3, 4
    }

    if (!(tmp & 0XC0000000)) {
1800e11c:	31c0      	movi      	r1, 192
1800e11e:	4138      	lsli      	r1, r1, 24
1800e120:	6848      	and      	r1, r2
1800e122:	e9210004 	bnez      	r1, 0x1800e12a	// 1800e12a <ready_list_rm+0x9a>
        tmp <<= 2;
1800e126:	4242      	lsli      	r2, r2, 2
        nr   += 2;
1800e128:	2301      	addi      	r3, 2
    }

    if (!(tmp & 0X80000000)) {
        nr   += 1;
1800e12a:	3adf      	btsti      	r2, 31
1800e12c:	c4630c21 	incf      	r3, r3, 1
    if (i >= 0) {
1800e130:	e9830008 	blz      	r3, 0x1800e140	// 1800e140 <ready_list_rm+0xb0>
        rq->highest_pri = i;
1800e134:	dc600100 	st.b      	r3, (r0, 0x100)
1800e138:	07c2      	br      	0x1800e0bc	// 1800e0bc <ready_list_rm+0x2c>
1800e13a:	231f      	addi      	r3, 32
        bitmap++;
1800e13c:	2103      	addi      	r1, 4
1800e13e:	07d7      	br      	0x1800e0ec	// 1800e0ec <ready_list_rm+0x5c>
        k_err_proc(RHINO_SYS_FATAL_ERR);
1800e140:	3001      	movi      	r0, 1
1800e142:	e3fff9db 	bsr      	0x1800d4f8	// 1800d4f8 <k_err_proc>
1800e146:	07bb      	br      	0x1800e0bc	// 1800e0bc <ready_list_rm+0x2c>

1800e148 <preferred_cpu_ready_task_get>:
    klist_t *node = rq->cur_list_item[rq->highest_pri];
1800e148:	d8600100 	ld.b      	r3, (r0, 0x100)
    g_preferred_ready_task[cpu_num] = krhino_list_entry(node, ktask_t, task_list);
1800e14c:	d0600883 	ldr.w      	r3, (r0, r3 << 2)
1800e150:	2b0b      	subi      	r3, 12
1800e152:	1043      	lrw      	r2, 0x2000282c	// 1800e15c <preferred_cpu_ready_task_get+0x14>
1800e154:	d4220883 	str.w      	r3, (r2, r1 << 2)
}
1800e158:	783c      	jmp      	r15
1800e15a:	0000      	.short	0x0000
1800e15c:	2000282c 	.long	0x2000282c

1800e160 <time_slice_update>:
}


#else
void time_slice_update(void)
{
1800e160:	14d0      	push      	r15

    ktask_t *task;
    klist_t *head;
    uint8_t  task_pri;

    RHINO_CRITICAL_ENTER();
1800e162:	e3ff942f 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
    task_pri = g_active_task[cpu_cur_get()]->prio;
1800e166:	1079      	lrw      	r3, 0x20002828	// 1800e1c8 <time_slice_update+0x68>

    head = g_ready_queue.cur_list_item[task_pri];
1800e168:	1059      	lrw      	r2, 0x20002364	// 1800e1cc <time_slice_update+0x6c>
    RHINO_CRITICAL_ENTER();
1800e16a:	6f43      	mov      	r13, r0
    task_pri = g_active_task[cpu_cur_get()]->prio;
1800e16c:	9360      	ld.w      	r3, (r3, 0x0)
    head = g_ready_queue.cur_list_item[task_pri];
1800e16e:	d863006f 	ld.b      	r3, (r3, 0x6f)
1800e172:	d0620881 	ldr.w      	r1, (r2, r3 << 2)

    /* if ready list is empty then just return because nothing is to be caculated */
    if (is_ready_list_empty(task_pri)) {
1800e176:	e9210005 	bnez      	r1, 0x1800e180	// 1800e180 <time_slice_update+0x20>
    ready_list_head_to_tail(&g_ready_queue, task);

    /* restore the task time slice */
    task->time_slice = task->time_total;

    RHINO_CRITICAL_EXIT();
1800e17a:	e3ff9428 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
}
1800e17e:	1490      	pop      	r15
    task = krhino_list_entry(head, ktask_t, task_list);
1800e180:	e461100b 	subi      	r3, r1, 12
    task->runtime++;
1800e184:	d983201e 	ld.w      	r12, (r3, 0x78)
1800e188:	e58c0000 	addi      	r12, r12, 1
1800e18c:	dd83201e 	st.w      	r12, (r3, 0x78)
    if (task->sched_policy == KSCHED_FIFO) {
1800e190:	d983006d 	ld.b      	r12, (r3, 0x6d)
1800e194:	e90cfff3 	bez      	r12, 0x1800e17a	// 1800e17a <time_slice_update+0x1a>
    if (head->next == head) {
1800e198:	d9812000 	ld.w      	r12, (r1, 0x0)
1800e19c:	6706      	cmpne      	r1, r12
1800e19e:	0fee      	bf      	0x1800e17a	// 1800e17a <time_slice_update+0x1a>
    if (task->time_slice > 0u) {
1800e1a0:	9337      	ld.w      	r1, (r3, 0x5c)
1800e1a2:	e9010004 	bez      	r1, 0x1800e1aa	// 1800e1aa <time_slice_update+0x4a>
        task->time_slice--;
1800e1a6:	2900      	subi      	r1, 1
1800e1a8:	b337      	st.w      	r1, (r3, 0x5c)
    if (task->time_slice > 0u) {
1800e1aa:	9337      	ld.w      	r1, (r3, 0x5c)
1800e1ac:	e9010004 	bez      	r1, 0x1800e1b4	// 1800e1b4 <time_slice_update+0x54>
    RHINO_CRITICAL_EXIT();
1800e1b0:	6c37      	mov      	r0, r13
1800e1b2:	07e4      	br      	0x1800e17a	// 1800e17a <time_slice_update+0x1a>
    rq->cur_list_item[task->prio] = rq->cur_list_item[task->prio]->next;
1800e1b4:	d823006f 	ld.b      	r1, (r3, 0x6f)
1800e1b8:	d0220880 	ldr.w      	r0, (r2, r1 << 2)
1800e1bc:	9000      	ld.w      	r0, (r0, 0x0)
1800e1be:	d4220880 	str.w      	r0, (r2, r1 << 2)
    task->time_slice = task->time_total;
1800e1c2:	9358      	ld.w      	r2, (r3, 0x60)
1800e1c4:	b357      	st.w      	r2, (r3, 0x5c)
1800e1c6:	07f5      	br      	0x1800e1b0	// 1800e1b0 <time_slice_update+0x50>
1800e1c8:	20002828 	.long	0x20002828
1800e1cc:	20002364 	.long	0x20002364

1800e1d0 <sem_give>:
}

#endif

static kstat_t sem_give(ksem_t *sem, uint8_t opt_wake_all)
{
1800e1d0:	14d3      	push      	r4-r6, r15
1800e1d2:	6d03      	mov      	r4, r0
1800e1d4:	6d87      	mov      	r6, r1
    /* this is only needed when system zero interrupt feature is enabled */
#if (RHINO_CONFIG_INTRPT_GUARD > 0)
    soc_intrpt_guard();
#endif

    RHINO_CRITICAL_ENTER();
1800e1d6:	e3ff93f5 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>

    if (sem->blk_obj.obj_type != RHINO_SEM_OBJ_TYPE) {
1800e1da:	846d      	ld.b      	r3, (r4, 0xd)
1800e1dc:	3b41      	cmpnei      	r3, 1
    RHINO_CRITICAL_ENTER();
1800e1de:	6d43      	mov      	r5, r0
    if (sem->blk_obj.obj_type != RHINO_SEM_OBJ_TYPE) {
1800e1e0:	0c05      	bf      	0x1800e1ea	// 1800e1ea <sem_give+0x1a>
        RHINO_CRITICAL_EXIT();
1800e1e2:	e3ff93f4 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_KOBJ_TYPE_ERR;
1800e1e6:	3008      	movi      	r0, 8
    }

    RHINO_CRITICAL_EXIT_SCHED();

    return RHINO_SUCCESS;
}
1800e1e8:	1493      	pop      	r4-r6, r15
    return (list->next == list);
1800e1ea:	9460      	ld.w      	r3, (r4, 0x0)
    if (is_klist_empty(blk_list_head)) {
1800e1ec:	64d2      	cmpne      	r4, r3
1800e1ee:	0816      	bt      	0x1800e21a	// 1800e21a <sem_give+0x4a>
        if (sem->count == (sem_count_t)-1) {
1800e1f0:	3200      	movi      	r2, 0
1800e1f2:	9464      	ld.w      	r3, (r4, 0x10)
1800e1f4:	2a00      	subi      	r2, 1
1800e1f6:	648e      	cmpne      	r3, r2
1800e1f8:	0806      	bt      	0x1800e204	// 1800e204 <sem_give+0x34>
            RHINO_CRITICAL_EXIT();
1800e1fa:	e3ff93e8 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
            return RHINO_SEM_OVF;
1800e1fe:	30c8      	movi      	r0, 200
1800e200:	4002      	lsli      	r0, r0, 2
1800e202:	07f3      	br      	0x1800e1e8	// 1800e1e8 <sem_give+0x18>
        sem->count++;
1800e204:	2300      	addi      	r3, 1
        if (sem->count > sem->peak_count) {
1800e206:	9445      	ld.w      	r2, (r4, 0x14)
1800e208:	64c8      	cmphs      	r2, r3
        sem->count++;
1800e20a:	b464      	st.w      	r3, (r4, 0x10)
        if (sem->count > sem->peak_count) {
1800e20c:	0802      	bt      	0x1800e210	// 1800e210 <sem_give+0x40>
            sem->peak_count = sem->count;
1800e20e:	b465      	st.w      	r3, (r4, 0x14)
        RHINO_CRITICAL_EXIT();
1800e210:	6c17      	mov      	r0, r5
1800e212:	e3ff93dc 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
    return RHINO_SUCCESS;
1800e216:	3000      	movi      	r0, 0
1800e218:	07e8      	br      	0x1800e1e8	// 1800e1e8 <sem_give+0x18>
    if (opt_wake_all) {
1800e21a:	e926000a 	bnez      	r6, 0x1800e22e	// 1800e22e <sem_give+0x5e>
        pend_task_wakeup(krhino_list_entry(blk_list_head->next, ktask_t, task_list));
1800e21e:	e403100b 	subi      	r0, r3, 12
1800e222:	e3fffc2f 	bsr      	0x1800da80	// 1800da80 <pend_task_wakeup>
1800e226:	0407      	br      	0x1800e234	// 1800e234 <sem_give+0x64>
            pend_task_wakeup(krhino_list_entry(blk_list_head->next, ktask_t, task_list));
1800e228:	280b      	subi      	r0, 12
1800e22a:	e3fffc2b 	bsr      	0x1800da80	// 1800da80 <pend_task_wakeup>
1800e22e:	9400      	ld.w      	r0, (r4, 0x0)
        while (!is_klist_empty(blk_list_head)) {
1800e230:	6412      	cmpne      	r4, r0
1800e232:	0bfb      	bt      	0x1800e228	// 1800e228 <sem_give+0x58>
    RHINO_CRITICAL_EXIT_SCHED();
1800e234:	6c17      	mov      	r0, r5
1800e236:	e3ff93ca 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800e23a:	e3fffeb3 	bsr      	0x1800dfa0	// 1800dfa0 <core_sched>
1800e23e:	07ec      	br      	0x1800e216	// 1800e216 <sem_give+0x46>

1800e240 <krhino_sem_create>:
{
1800e240:	14d2      	push      	r4-r5, r15
1800e242:	6d03      	mov      	r4, r0
    NULL_PARA_CHK(sem);
1800e244:	e9000020 	bez      	r0, 0x1800e284	// 1800e284 <krhino_sem_create+0x44>
    NULL_PARA_CHK(name);
1800e248:	e901001e 	bez      	r1, 0x1800e284	// 1800e284 <krhino_sem_create+0x44>
    sem->blk_obj.blk_policy = BLK_POLICY_PRI;
1800e24c:	3300      	movi      	r3, 0
    sem->mm_alloc_flag      = mm_alloc_flag;
1800e24e:	3501      	movi      	r5, 1
    list_head->next = list_head;
1800e250:	b400      	st.w      	r0, (r4, 0x0)
    list_head->prev = list_head;
1800e252:	b401      	st.w      	r0, (r4, 0x4)
    sem->count              = count;
1800e254:	b044      	st.w      	r2, (r0, 0x10)
    sem->peak_count         = count;
1800e256:	b045      	st.w      	r2, (r0, 0x14)
    sem->blk_obj.name       = name;
1800e258:	b022      	st.w      	r1, (r0, 0x8)
    sem->blk_obj.blk_policy = BLK_POLICY_PRI;
1800e25a:	a06c      	st.b      	r3, (r0, 0xc)
    sem->mm_alloc_flag      = mm_alloc_flag;
1800e25c:	dca00020 	st.b      	r5, (r0, 0x20)
    RHINO_CRITICAL_ENTER();
1800e260:	e3ff93b0 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
    element->prev = head->prev;
1800e264:	1069      	lrw      	r3, 0x20002530	// 1800e288 <krhino_sem_create+0x48>
    klist_insert(&(g_kobj_list.sem_head), &sem->sem_item);
1800e266:	e4440017 	addi      	r2, r4, 24
1800e26a:	9327      	ld.w      	r1, (r3, 0x1c)
1800e26c:	b427      	st.w      	r1, (r4, 0x1c)
    element->next = head;
1800e26e:	e4230017 	addi      	r1, r3, 24
1800e272:	b426      	st.w      	r1, (r4, 0x18)
    head->prev->next = element;
1800e274:	9327      	ld.w      	r1, (r3, 0x1c)
1800e276:	b140      	st.w      	r2, (r1, 0x0)
    head->prev       = element;
1800e278:	b347      	st.w      	r2, (r3, 0x1c)
    RHINO_CRITICAL_EXIT();
1800e27a:	e3ff93a8 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
    sem->blk_obj.obj_type = RHINO_SEM_OBJ_TYPE;
1800e27e:	a4ad      	st.b      	r5, (r4, 0xd)
1800e280:	3000      	movi      	r0, 0
}
1800e282:	1492      	pop      	r4-r5, r15
    NULL_PARA_CHK(sem);
1800e284:	3006      	movi      	r0, 6
    return sem_create(sem, name, count, K_OBJ_STATIC_ALLOC);
1800e286:	07fe      	br      	0x1800e282	// 1800e282 <krhino_sem_create+0x42>
1800e288:	20002530 	.long	0x20002530

1800e28c <krhino_sem_del>:
{
1800e28c:	14d2      	push      	r4-r5, r15
1800e28e:	6d03      	mov      	r4, r0
    NULL_PARA_CHK(sem);
1800e290:	e9000031 	bez      	r0, 0x1800e2f2	// 1800e2f2 <krhino_sem_del+0x66>
    RHINO_CRITICAL_ENTER();
1800e294:	e3ff9396 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
    INTRPT_NESTED_LEVEL_CHK();
1800e298:	1078      	lrw      	r3, 0x20002841	// 1800e2f8 <krhino_sem_del+0x6c>
    RHINO_CRITICAL_ENTER();
1800e29a:	6d43      	mov      	r5, r0
    INTRPT_NESTED_LEVEL_CHK();
1800e29c:	8360      	ld.b      	r3, (r3, 0x0)
1800e29e:	e9030007 	bez      	r3, 0x1800e2ac	// 1800e2ac <krhino_sem_del+0x20>
1800e2a2:	e3ff9394 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800e2a6:	ea0003ea 	movi      	r0, 1002
}
1800e2aa:	1492      	pop      	r4-r5, r15
    if (sem->blk_obj.obj_type != RHINO_SEM_OBJ_TYPE) {
1800e2ac:	844d      	ld.b      	r2, (r4, 0xd)
1800e2ae:	3a41      	cmpnei      	r2, 1
1800e2b0:	0c05      	bf      	0x1800e2ba	// 1800e2ba <krhino_sem_del+0x2e>
        RHINO_CRITICAL_EXIT();
1800e2b2:	e3ff938c 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_KOBJ_TYPE_ERR;
1800e2b6:	3008      	movi      	r0, 8
1800e2b8:	07f9      	br      	0x1800e2aa	// 1800e2aa <krhino_sem_del+0x1e>
    if (sem->mm_alloc_flag != K_OBJ_STATIC_ALLOC) {
1800e2ba:	d8440020 	ld.b      	r2, (r4, 0x20)
1800e2be:	3a41      	cmpnei      	r2, 1
1800e2c0:	0c05      	bf      	0x1800e2ca	// 1800e2ca <krhino_sem_del+0x3e>
        RHINO_CRITICAL_EXIT();
1800e2c2:	e3ff9384 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_KOBJ_DEL_ERR;
1800e2c6:	3009      	movi      	r0, 9
1800e2c8:	07f1      	br      	0x1800e2aa	// 1800e2aa <krhino_sem_del+0x1e>
    sem->blk_obj.obj_type = RHINO_OBJ_TYPE_NONE;
1800e2ca:	a46d      	st.b      	r3, (r4, 0xd)
    return (list->next == list);
1800e2cc:	9400      	ld.w      	r0, (r4, 0x0)
    while (!is_klist_empty(blk_list_head)) {
1800e2ce:	6412      	cmpne      	r4, r0
1800e2d0:	080d      	bt      	0x1800e2ea	// 1800e2ea <krhino_sem_del+0x5e>
    element->prev->next = element->next;
1800e2d2:	9467      	ld.w      	r3, (r4, 0x1c)
1800e2d4:	9446      	ld.w      	r2, (r4, 0x18)
1800e2d6:	b340      	st.w      	r2, (r3, 0x0)
    element->next->prev = element->prev;
1800e2d8:	9446      	ld.w      	r2, (r4, 0x18)
    RHINO_CRITICAL_EXIT_SCHED();
1800e2da:	6c17      	mov      	r0, r5
1800e2dc:	b261      	st.w      	r3, (r2, 0x4)
1800e2de:	e3ff9376 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800e2e2:	e3fffe5f 	bsr      	0x1800dfa0	// 1800dfa0 <core_sched>
    return RHINO_SUCCESS;
1800e2e6:	3000      	movi      	r0, 0
1800e2e8:	07e1      	br      	0x1800e2aa	// 1800e2aa <krhino_sem_del+0x1e>
        pend_task_rm(krhino_list_entry(blk_list_head->next, ktask_t, task_list));
1800e2ea:	280b      	subi      	r0, 12
1800e2ec:	e3fffc14 	bsr      	0x1800db14	// 1800db14 <pend_task_rm>
1800e2f0:	07ee      	br      	0x1800e2cc	// 1800e2cc <krhino_sem_del+0x40>
    NULL_PARA_CHK(sem);
1800e2f2:	3006      	movi      	r0, 6
1800e2f4:	07db      	br      	0x1800e2aa	// 1800e2aa <krhino_sem_del+0x1e>
1800e2f6:	0000      	.short	0x0000
1800e2f8:	20002841 	.long	0x20002841

1800e2fc <krhino_sem_give>:

kstat_t krhino_sem_give(ksem_t *sem)
{
1800e2fc:	14d0      	push      	r15
    NULL_PARA_CHK(sem);
1800e2fe:	e9000006 	bez      	r0, 0x1800e30a	// 1800e30a <krhino_sem_give+0xe>

    return sem_give(sem, WAKE_ONE_SEM);
1800e302:	3100      	movi      	r1, 0
1800e304:	e3ffff66 	bsr      	0x1800e1d0	// 1800e1d0 <sem_give>
}
1800e308:	1490      	pop      	r15
    NULL_PARA_CHK(sem);
1800e30a:	3006      	movi      	r0, 6
1800e30c:	07fe      	br      	0x1800e308	// 1800e308 <krhino_sem_give+0xc>
	...

1800e310 <krhino_sem_take>:

    return sem_give(sem, WAKE_ALL_SEM);
}

kstat_t krhino_sem_take(ksem_t *sem, tick_t ticks)
{
1800e310:	14d5      	push      	r4-r8, r15
1800e312:	6d43      	mov      	r5, r0
1800e314:	6dc7      	mov      	r7, r1
1800e316:	6d8b      	mov      	r6, r2
    CPSR_ALLOC();

    uint8_t  cur_cpu_num;
    kstat_t  stat;

    NULL_PARA_CHK(sem);
1800e318:	e9000044 	bez      	r0, 0x1800e3a0	// 1800e3a0 <krhino_sem_take+0x90>

    RHINO_CRITICAL_ENTER();
1800e31c:	e3ff9352 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>

    INTRPT_NESTED_LEVEL_CHK();
1800e320:	1161      	lrw      	r3, 0x20002841	// 1800e3a4 <krhino_sem_take+0x94>
    RHINO_CRITICAL_ENTER();
1800e322:	6e03      	mov      	r8, r0
    INTRPT_NESTED_LEVEL_CHK();
1800e324:	8380      	ld.b      	r4, (r3, 0x0)
1800e326:	e9040008 	bez      	r4, 0x1800e336	// 1800e336 <krhino_sem_take+0x26>
1800e32a:	e3ff9350 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800e32e:	ea0403ea 	movi      	r4, 1002
    stat = pend_state_end_proc(g_active_task[cpu_cur_get()]);

    RHINO_CPU_INTRPT_ENABLE();

    return stat;
}
1800e332:	6c13      	mov      	r0, r4
1800e334:	1495      	pop      	r4-r8, r15
    if (sem->blk_obj.obj_type != RHINO_SEM_OBJ_TYPE) {
1800e336:	856d      	ld.b      	r3, (r5, 0xd)
1800e338:	3b41      	cmpnei      	r3, 1
1800e33a:	0c05      	bf      	0x1800e344	// 1800e344 <krhino_sem_take+0x34>
        RHINO_CRITICAL_EXIT();
1800e33c:	e3ff9347 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_KOBJ_TYPE_ERR;
1800e340:	3408      	movi      	r4, 8
1800e342:	07f8      	br      	0x1800e332	// 1800e332 <krhino_sem_take+0x22>
    if (sem->count > 0u) {
1800e344:	9544      	ld.w      	r2, (r5, 0x10)
1800e346:	e9020007 	bez      	r2, 0x1800e354	// 1800e354 <krhino_sem_take+0x44>
        sem->count--;
1800e34a:	2a00      	subi      	r2, 1
1800e34c:	b544      	st.w      	r2, (r5, 0x10)
    RHINO_CPU_INTRPT_ENABLE();
1800e34e:	e3ff933e 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
    return stat;
1800e352:	07f0      	br      	0x1800e332	// 1800e332 <krhino_sem_take+0x22>
    if (ticks == RHINO_NO_WAIT) {
1800e354:	c4c72423 	or      	r3, r7, r6
1800e358:	e9230007 	bnez      	r3, 0x1800e366	// 1800e366 <krhino_sem_take+0x56>
        return RHINO_NO_PEND_WAIT;
1800e35c:	34c8      	movi      	r4, 200
        RHINO_CRITICAL_EXIT();
1800e35e:	e3ff9336 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_NO_PEND_WAIT;
1800e362:	4481      	lsli      	r4, r4, 1
1800e364:	07e7      	br      	0x1800e332	// 1800e332 <krhino_sem_take+0x22>
    if (g_sched_lock[cur_cpu_num] > 0u) {
1800e366:	1071      	lrw      	r3, 0x20002944	// 1800e3a8 <krhino_sem_take+0x98>
1800e368:	8360      	ld.b      	r3, (r3, 0x0)
1800e36a:	e9030006 	bez      	r3, 0x1800e376	// 1800e376 <krhino_sem_take+0x66>
        RHINO_CRITICAL_EXIT();
1800e36e:	e3ff932e 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_SCHED_DISABLE;
1800e372:	34c8      	movi      	r4, 200
1800e374:	07df      	br      	0x1800e332	// 1800e332 <krhino_sem_take+0x22>
    pend_to_blk_obj((blk_obj_t *)sem, g_active_task[cur_cpu_num], ticks);
1800e376:	108e      	lrw      	r4, 0x20002828	// 1800e3ac <krhino_sem_take+0x9c>
1800e378:	6c9f      	mov      	r2, r7
1800e37a:	9420      	ld.w      	r1, (r4, 0x0)
1800e37c:	6cdb      	mov      	r3, r6
1800e37e:	6c17      	mov      	r0, r5
1800e380:	e3fffba2 	bsr      	0x1800dac4	// 1800dac4 <pend_to_blk_obj>
    RHINO_CRITICAL_EXIT_SCHED();
1800e384:	6c23      	mov      	r0, r8
1800e386:	e3ff9322 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800e38a:	e3fffe0b 	bsr      	0x1800dfa0	// 1800dfa0 <core_sched>
    RHINO_CPU_INTRPT_DISABLE();
1800e38e:	e3ff9319 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
1800e392:	6d43      	mov      	r5, r0
    stat = pend_state_end_proc(g_active_task[cpu_cur_get()]);
1800e394:	9400      	ld.w      	r0, (r4, 0x0)
1800e396:	e3fffbf1 	bsr      	0x1800db78	// 1800db78 <pend_state_end_proc>
1800e39a:	6d03      	mov      	r4, r0
    RHINO_CPU_INTRPT_ENABLE();
1800e39c:	6c17      	mov      	r0, r5
1800e39e:	07d8      	br      	0x1800e34e	// 1800e34e <krhino_sem_take+0x3e>
    NULL_PARA_CHK(sem);
1800e3a0:	3406      	movi      	r4, 6
1800e3a2:	07c8      	br      	0x1800e332	// 1800e332 <krhino_sem_take+0x22>
1800e3a4:	20002841 	.long	0x20002841
1800e3a8:	20002944 	.long	0x20002944
1800e3ac:	20002828 	.long	0x20002828

1800e3b0 <kobj_list_init>:
    list_head->next = list_head;
1800e3b0:	106e      	lrw      	r3, 0x20002530	// 1800e3e8 <kobj_list_init+0x38>
1800e3b2:	5b5e      	addi      	r2, r3, 8
1800e3b4:	b342      	st.w      	r2, (r3, 0x8)
    list_head->prev = list_head;
1800e3b6:	b343      	st.w      	r2, (r3, 0xc)
    list_head->next = list_head;
1800e3b8:	e443000f 	addi      	r2, r3, 16
1800e3bc:	b344      	st.w      	r2, (r3, 0x10)
    list_head->prev = list_head;
1800e3be:	b345      	st.w      	r2, (r3, 0x14)
    list_head->next = list_head;
1800e3c0:	e4430017 	addi      	r2, r3, 24
1800e3c4:	b346      	st.w      	r2, (r3, 0x18)
    list_head->prev = list_head;
1800e3c6:	b347      	st.w      	r2, (r3, 0x1c)
    list_head->next = list_head;
1800e3c8:	e443001f 	addi      	r2, r3, 32
1800e3cc:	b348      	st.w      	r2, (r3, 0x20)
    list_head->prev = list_head;
1800e3ce:	b349      	st.w      	r2, (r3, 0x24)
    list_head->next = list_head;
1800e3d0:	e443002f 	addi      	r2, r3, 48
1800e3d4:	b34c      	st.w      	r2, (r3, 0x30)
    list_head->prev = list_head;
1800e3d6:	b34d      	st.w      	r2, (r3, 0x34)
    list_head->next = list_head;
1800e3d8:	e4430027 	addi      	r2, r3, 40
1800e3dc:	b360      	st.w      	r3, (r3, 0x0)
    list_head->prev = list_head;
1800e3de:	b361      	st.w      	r3, (r3, 0x4)
    list_head->next = list_head;
1800e3e0:	b34a      	st.w      	r2, (r3, 0x28)
    list_head->prev = list_head;
1800e3e2:	b34b      	st.w      	r2, (r3, 0x2c)
#endif

#if (RHINO_CONFIG_EVENT_FLAG > 0)
    klist_init(&(g_kobj_list.event_head));
#endif
}
1800e3e4:	783c      	jmp      	r15
1800e3e6:	0000      	.short	0x0000
1800e3e8:	20002530 	.long	0x20002530

1800e3ec <krhino_stack_ovf_check>:
#endif

#if (RHINO_CONFIG_TASK_STACK_OVF_CHECK > 0)
#if (RHINO_CONFIG_CPU_STACK_DOWN > 0)
void krhino_stack_ovf_check(void)
{
1800e3ec:	14d2      	push      	r4-r5, r15
    cpu_stack_t *stack_start;

    stack_start = g_active_task[cpu_cur_get()]->task_stack_base;
1800e3ee:	106b      	lrw      	r3, 0x20002828	// 1800e418 <krhino_stack_ovf_check+0x2c>
1800e3f0:	6d0f      	mov      	r4, r3
1800e3f2:	9340      	ld.w      	r2, (r3, 0x0)
1800e3f4:	92a1      	ld.w      	r5, (r2, 0x4)

    if (*stack_start != RHINO_TASK_STACK_OVF_MAGIC) {
1800e3f6:	104a      	lrw      	r2, 0xdeadbeaf	// 1800e41c <krhino_stack_ovf_check+0x30>
1800e3f8:	9520      	ld.w      	r1, (r5, 0x0)
1800e3fa:	6486      	cmpne      	r1, r2
1800e3fc:	0c05      	bf      	0x1800e406	// 1800e406 <krhino_stack_ovf_check+0x1a>
        k_err_proc(RHINO_TASK_STACK_OVF);
1800e3fe:	3096      	movi      	r0, 150
1800e400:	4003      	lsli      	r0, r0, 3
1800e402:	e3fff87b 	bsr      	0x1800d4f8	// 1800d4f8 <k_err_proc>
    }

    if ((cpu_stack_t *)(g_active_task[cpu_cur_get()]->task_stack) < stack_start) {
1800e406:	9460      	ld.w      	r3, (r4, 0x0)
1800e408:	9360      	ld.w      	r3, (r3, 0x0)
1800e40a:	654c      	cmphs      	r3, r5
1800e40c:	0805      	bt      	0x1800e416	// 1800e416 <krhino_stack_ovf_check+0x2a>
        k_err_proc(RHINO_TASK_STACK_OVF);
1800e40e:	3096      	movi      	r0, 150
1800e410:	4003      	lsli      	r0, r0, 3
1800e412:	e3fff873 	bsr      	0x1800d4f8	// 1800d4f8 <k_err_proc>
    }
}
1800e416:	1492      	pop      	r4-r5, r15
1800e418:	20002828 	.long	0x20002828
1800e41c:	deadbeaf 	.long	0xdeadbeaf

1800e420 <krhino_init>:
    cpu_intrpt_stack_protect();
#endif
}

__init kstat_t krhino_init(void)
{
1800e420:	14d0      	push      	r15
1800e422:	1426      	subi      	r14, r14, 24
    g_sys_stat = RHINO_STOPPED;
1800e424:	1075      	lrw      	r3, 0x20002568	// 1800e478 <krhino_init+0x58>
1800e426:	3204      	movi      	r2, 4

#if (RHINO_CONFIG_USER_HOOK > 0)
    krhino_init_hook();
#endif

    runqueue_init(&g_ready_queue);
1800e428:	1015      	lrw      	r0, 0x20002364	// 1800e47c <krhino_init+0x5c>
    g_sys_stat = RHINO_STOPPED;
1800e42a:	b340      	st.w      	r2, (r3, 0x0)
    runqueue_init(&g_ready_queue);
1800e42c:	e3fffe0c 	bsr      	0x1800e044	// 1800e044 <runqueue_init>

    tick_list_init();
1800e430:	e0000452 	bsr      	0x1800ecd4	// 1800ecd4 <tick_list_init>

#if (RHINO_CONFIG_SYSTEM_STATS > 0)
    kobj_list_init();
1800e434:	e3ffffbe 	bsr      	0x1800e3b0	// 1800e3b0 <kobj_list_init>
    list_head->next = list_head;
1800e438:	1072      	lrw      	r3, 0x20002620	// 1800e480 <krhino_init+0x60>
    //k_mm_init();
#endif

#if (RHINO_CONFIG_KOBJ_DYN_ALLOC > 0)
    klist_init(&g_res_list);
    krhino_sem_create(&g_res_sem, "res_sem", 0);
1800e43a:	3200      	movi      	r2, 0
1800e43c:	1032      	lrw      	r1, 0x18017774	// 1800e484 <krhino_init+0x64>
1800e43e:	1013      	lrw      	r0, 0x20002574	// 1800e488 <krhino_init+0x68>
    list_head->prev = list_head;
1800e440:	b361      	st.w      	r3, (r3, 0x4)
    list_head->next = list_head;
1800e442:	b360      	st.w      	r3, (r3, 0x0)
1800e444:	e3fffefe 	bsr      	0x1800e240	// 1800e240 <krhino_sem_create>
    dyn_mem_proc_task_start();
1800e448:	e3fff83a 	bsr      	0x1800d4bc	// 1800d4bc <dyn_mem_proc_task_start>
        krhino_task_cpu_create(&g_idle_task[i], "idle_task", NULL, RHINO_IDLE_PRI, 0,
                               &g_idle_task_stack[i][0], RHINO_CONFIG_IDLE_TASK_STACK_SIZE,
                               idle_task, i, 1u);
    }
#else
    krhino_task_create(&g_idle_task[0], "idle_task", NULL, RHINO_IDLE_PRI, 0,
1800e44c:	3301      	movi      	r3, 1
1800e44e:	b865      	st.w      	r3, (r14, 0x14)
1800e450:	3200      	movi      	r2, 0
1800e452:	106f      	lrw      	r3, 0x1800d714	// 1800e48c <krhino_init+0x6c>
1800e454:	102f      	lrw      	r1, 0x1801777c	// 1800e490 <krhino_init+0x70>
1800e456:	1010      	lrw      	r0, 0x20002468	// 1800e494 <krhino_init+0x74>
1800e458:	b864      	st.w      	r3, (r14, 0x10)
1800e45a:	3340      	movi      	r3, 64
1800e45c:	b863      	st.w      	r3, (r14, 0xc)
1800e45e:	106f      	lrw      	r3, 0x20002844	// 1800e498 <krhino_init+0x78>
1800e460:	b862      	st.w      	r3, (r14, 0x8)
1800e462:	3300      	movi      	r3, 0
1800e464:	b840      	st.w      	r2, (r14, 0x0)
1800e466:	b861      	st.w      	r3, (r14, 0x4)
1800e468:	333d      	movi      	r3, 61
1800e46a:	e0000135 	bsr      	0x1800e6d4	// 1800e6d4 <krhino_task_create>
#if (RHINO_CONFIG_WORKQUEUE > 0)
    workqueue_init();
#endif

#if (RHINO_CONFIG_TIMER > 0)
    ktimer_init();
1800e46e:	e0000727 	bsr      	0x1800f2bc	// 1800f2bc <ktimer_init>
#endif

    rhino_stack_check_init();

    return RHINO_SUCCESS;
}
1800e472:	3000      	movi      	r0, 0
1800e474:	1406      	addi      	r14, r14, 24
1800e476:	1490      	pop      	r15
1800e478:	20002568 	.long	0x20002568
1800e47c:	20002364 	.long	0x20002364
1800e480:	20002620 	.long	0x20002620
1800e484:	18017774 	.long	0x18017774
1800e488:	20002574 	.long	0x20002574
1800e48c:	1800d714 	.long	0x1800d714
1800e490:	1801777c 	.long	0x1801777c
1800e494:	20002468 	.long	0x20002468
1800e498:	20002844 	.long	0x20002844

1800e49c <krhino_start>:

__init kstat_t krhino_start(void)
{
1800e49c:	14d1      	push      	r4, r15
    if (g_sys_stat == RHINO_STOPPED) {
1800e49e:	108b      	lrw      	r4, 0x20002568	// 1800e4c8 <krhino_start+0x2c>
1800e4a0:	9460      	ld.w      	r3, (r4, 0x0)
1800e4a2:	3b44      	cmpnei      	r3, 4
1800e4a4:	080f      	bt      	0x1800e4c2	// 1800e4c2 <krhino_start+0x26>
            preferred_cpu_ready_task_get(&g_ready_queue, i);
            g_active_task[i] = g_preferred_ready_task[i];
            g_active_task[i]->cur_exc = 1;
        }
#else
        preferred_cpu_ready_task_get(&g_ready_queue, 0);
1800e4a6:	100a      	lrw      	r0, 0x20002364	// 1800e4cc <krhino_start+0x30>
1800e4a8:	3100      	movi      	r1, 0
1800e4aa:	e3fffe4f 	bsr      	0x1800e148	// 1800e148 <preferred_cpu_ready_task_get>
        g_active_task[0] = g_preferred_ready_task[0];
1800e4ae:	1049      	lrw      	r2, 0x2000282c	// 1800e4d0 <krhino_start+0x34>
1800e4b0:	1069      	lrw      	r3, 0x20002828	// 1800e4d4 <krhino_start+0x38>
1800e4b2:	9240      	ld.w      	r2, (r2, 0x0)
1800e4b4:	b340      	st.w      	r2, (r3, 0x0)

#if (RHINO_CONFIG_USER_HOOK > 0)
        krhino_start_hook();
#endif

        g_sys_stat = RHINO_RUNNING;
1800e4b6:	3303      	movi      	r3, 3
1800e4b8:	b460      	st.w      	r3, (r4, 0x0)
        cpu_first_task_start();
1800e4ba:	e3ff92a0 	bsr      	0x180009fa	// 180009fa <cpu_first_task_start>

        /* should not be here */
        return RHINO_SYS_FATAL_ERR;
1800e4be:	3001      	movi      	r0, 1
    }

    return RHINO_RUNNING;
}
1800e4c0:	1491      	pop      	r4, r15
    return RHINO_RUNNING;
1800e4c2:	3003      	movi      	r0, 3
1800e4c4:	07fe      	br      	0x1800e4c0	// 1800e4c0 <krhino_start+0x24>
1800e4c6:	0000      	.short	0x0000
1800e4c8:	20002568 	.long	0x20002568
1800e4cc:	20002364 	.long	0x20002364
1800e4d0:	2000282c 	.long	0x2000282c
1800e4d4:	20002828 	.long	0x20002828

1800e4d8 <krhino_intrpt_enter>:
}
#endif
#endif /* RHINO_CONFIG_INTRPT_STACK_OVF_CHECK */

kstat_t krhino_intrpt_enter(void)
{
1800e4d8:	14d1      	push      	r4, r15

#if (RHINO_CONFIG_INTRPT_STACK_OVF_CHECK > 0)
    krhino_intrpt_stack_ovf_check();
#endif

    RHINO_CPU_INTRPT_DISABLE();
1800e4da:	e3ff9273 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
    /* RHINO_CONFIG_CPU_PWR_MGMT */
#if (RHINO_CONFIG_CPU_PWR_MGMT > 0)
    cpu_pwr_up();
#endif

    if (g_intrpt_nested_level[cpu_cur_get()] >= RHINO_CONFIG_INTRPT_MAX_NESTED_LEVEL) {
1800e4de:	104c      	lrw      	r2, 0x20002841	// 1800e50c <krhino_intrpt_enter+0x34>
    RHINO_CPU_INTRPT_DISABLE();
1800e4e0:	6d03      	mov      	r4, r0
    if (g_intrpt_nested_level[cpu_cur_get()] >= RHINO_CONFIG_INTRPT_MAX_NESTED_LEVEL) {
1800e4e2:	8260      	ld.b      	r3, (r2, 0x0)
1800e4e4:	eb0300bb 	cmphsi      	r3, 188
1800e4e8:	0c0b      	bf      	0x1800e4fe	// 1800e4fe <krhino_intrpt_enter+0x26>
        k_err_proc(RHINO_INTRPT_NESTED_LEVEL_OVERFLOW);
1800e4ea:	30fa      	movi      	r0, 250
1800e4ec:	4002      	lsli      	r0, r0, 2
1800e4ee:	e3fff805 	bsr      	0x1800d4f8	// 1800d4f8 <k_err_proc>
        RHINO_CPU_INTRPT_ENABLE();
1800e4f2:	6c13      	mov      	r0, r4
1800e4f4:	e3ff926b 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>

        return RHINO_INTRPT_NESTED_LEVEL_OVERFLOW;
1800e4f8:	30fa      	movi      	r0, 250
1800e4fa:	4002      	lsli      	r0, r0, 2
    g_intrpt_nested_level[cpu_cur_get()]++;

    RHINO_CPU_INTRPT_ENABLE();

    return RHINO_SUCCESS;
}
1800e4fc:	1491      	pop      	r4, r15
    g_intrpt_nested_level[cpu_cur_get()]++;
1800e4fe:	2300      	addi      	r3, 1
1800e500:	a260      	st.b      	r3, (r2, 0x0)
    RHINO_CPU_INTRPT_ENABLE();
1800e502:	e3ff9264 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
    return RHINO_SUCCESS;
1800e506:	3000      	movi      	r0, 0
1800e508:	07fa      	br      	0x1800e4fc	// 1800e4fc <krhino_intrpt_enter+0x24>
1800e50a:	0000      	.short	0x0000
1800e50c:	20002841 	.long	0x20002841

1800e510 <krhino_intrpt_exit>:

void krhino_intrpt_exit(void)
{
1800e510:	14d2      	push      	r4-r5, r15

    RHINO_CPU_INTRPT_DISABLE();

    cur_cpu_num = cpu_cur_get();

    if (g_intrpt_nested_level[cur_cpu_num] == 0u) {
1800e512:	1094      	lrw      	r4, 0x20002841	// 1800e560 <krhino_intrpt_exit+0x50>
    RHINO_CPU_INTRPT_DISABLE();
1800e514:	e3ff9256 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
    if (g_intrpt_nested_level[cur_cpu_num] == 0u) {
1800e518:	8460      	ld.b      	r3, (r4, 0x0)
    RHINO_CPU_INTRPT_DISABLE();
1800e51a:	6d43      	mov      	r5, r0
    if (g_intrpt_nested_level[cur_cpu_num] == 0u) {
1800e51c:	e9230008 	bnez      	r3, 0x1800e52c	// 1800e52c <krhino_intrpt_exit+0x1c>
        RHINO_CPU_INTRPT_ENABLE();
1800e520:	e3ff9255 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        k_err_proc(RHINO_INV_INTRPT_NESTED_LEVEL);
1800e524:	ea0003e9 	movi      	r0, 1001
1800e528:	e3fff7e8 	bsr      	0x1800d4f8	// 1800d4f8 <k_err_proc>
    }

    g_intrpt_nested_level[cur_cpu_num]--;
1800e52c:	8460      	ld.b      	r3, (r4, 0x0)
1800e52e:	2b00      	subi      	r3, 1
1800e530:	74cc      	zextb      	r3, r3
1800e532:	a460      	st.b      	r3, (r4, 0x0)

    if (g_intrpt_nested_level[cur_cpu_num] > 0u) {
1800e534:	e9030006 	bez      	r3, 0x1800e540	// 1800e540 <krhino_intrpt_exit+0x30>
    g_active_task[cur_cpu_num]->cur_exc = 0;
#endif

    cpu_intrpt_switch();

    RHINO_CPU_INTRPT_ENABLE();
1800e538:	6c17      	mov      	r0, r5
1800e53a:	e3ff9248 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
}
1800e53e:	1492      	pop      	r4-r5, r15
    if (g_sched_lock[cur_cpu_num] > 0u) {
1800e540:	1069      	lrw      	r3, 0x20002944	// 1800e564 <krhino_intrpt_exit+0x54>
1800e542:	8320      	ld.b      	r1, (r3, 0x0)
1800e544:	e921fffa 	bnez      	r1, 0x1800e538	// 1800e538 <krhino_intrpt_exit+0x28>
    preferred_cpu_ready_task_get(&g_ready_queue, cur_cpu_num);
1800e548:	1008      	lrw      	r0, 0x20002364	// 1800e568 <krhino_intrpt_exit+0x58>
1800e54a:	e3fffdff 	bsr      	0x1800e148	// 1800e148 <preferred_cpu_ready_task_get>
    if (g_preferred_ready_task[cur_cpu_num] == g_active_task[cur_cpu_num]) {
1800e54e:	1068      	lrw      	r3, 0x2000282c	// 1800e56c <krhino_intrpt_exit+0x5c>
1800e550:	9340      	ld.w      	r2, (r3, 0x0)
1800e552:	1068      	lrw      	r3, 0x20002828	// 1800e570 <krhino_intrpt_exit+0x60>
1800e554:	9360      	ld.w      	r3, (r3, 0x0)
1800e556:	64ca      	cmpne      	r2, r3
1800e558:	0ff0      	bf      	0x1800e538	// 1800e538 <krhino_intrpt_exit+0x28>
    cpu_intrpt_switch();
1800e55a:	e3ff924b 	bsr      	0x180009f0	// 180009f0 <cpu_intrpt_switch>
1800e55e:	07ed      	br      	0x1800e538	// 1800e538 <krhino_intrpt_exit+0x28>
1800e560:	20002841 	.long	0x20002841
1800e564:	20002944 	.long	0x20002944
1800e568:	20002364 	.long	0x20002364
1800e56c:	2000282c 	.long	0x2000282c
1800e570:	20002828 	.long	0x20002828

1800e574 <task_mutex_free.isra.2>:
    return RHINO_SUCCESS;
}
#endif

#if (RHINO_CONFIG_TASK_DEL > 0)
static void task_mutex_free(ktask_t *task)
1800e574:	14d4      	push      	r4-r7, r15
1800e576:	6d03      	mov      	r4, r0
            mutex->mutex_task     = next_task;
            mutex->mutex_list     = next_task->mutex_list;
            next_task->mutex_list = mutex;
        } else {
            /* no wait task */
            mutex->mutex_task = NULL;
1800e578:	3600      	movi      	r6, 0
    while ((mutex = next_mutex) != NULL) {
1800e57a:	e9240003 	bnez      	r4, 0x1800e580	// 1800e580 <task_mutex_free.isra.2+0xc>
        }
    }
}
1800e57e:	1494      	pop      	r4-r7, r15
    return (list->next == list);
1800e580:	94a0      	ld.w      	r5, (r4, 0x0)
        if (!is_klist_empty(blk_list_head)) {
1800e582:	6552      	cmpne      	r4, r5
        next_mutex = mutex->mutex_list;
1800e584:	94e5      	ld.w      	r7, (r4, 0x14)
        if (!is_klist_empty(blk_list_head)) {
1800e586:	0c0b      	bf      	0x1800e59c	// 1800e59c <task_mutex_free.isra.2+0x28>
            next_task = krhino_list_entry(blk_list_head->next, ktask_t, task_list);
1800e588:	2d0b      	subi      	r5, 12
            pend_task_wakeup(next_task);
1800e58a:	6c17      	mov      	r0, r5
1800e58c:	e3fffa7a 	bsr      	0x1800da80	// 1800da80 <pend_task_wakeup>
            mutex->mutex_list     = next_task->mutex_list;
1800e590:	9566      	ld.w      	r3, (r5, 0x18)
            mutex->mutex_task     = next_task;
1800e592:	b4a4      	st.w      	r5, (r4, 0x10)
            mutex->mutex_list     = next_task->mutex_list;
1800e594:	b465      	st.w      	r3, (r4, 0x14)
            next_task->mutex_list = mutex;
1800e596:	b586      	st.w      	r4, (r5, 0x18)
static void task_mutex_free(ktask_t *task)
1800e598:	6d1f      	mov      	r4, r7
1800e59a:	07f0      	br      	0x1800e57a	// 1800e57a <task_mutex_free.isra.2+0x6>
            mutex->mutex_task = NULL;
1800e59c:	b4c4      	st.w      	r6, (r4, 0x10)
1800e59e:	07fd      	br      	0x1800e598	// 1800e598 <task_mutex_free.isra.2+0x24>

1800e5a0 <task_create.isra.0.part.1>:
static kstat_t task_create(ktask_t *task, const name_t *name, void *arg,
1800e5a0:	14d8      	push      	r4-r11, r15
1800e5a2:	1424      	subi      	r14, r14, 16
1800e5a4:	6e0f      	mov      	r8, r3
1800e5a6:	986e      	ld.w      	r3, (r14, 0x38)
1800e5a8:	b863      	st.w      	r3, (r14, 0xc)
1800e5aa:	986f      	ld.w      	r3, (r14, 0x3c)
1800e5ac:	b860      	st.w      	r3, (r14, 0x0)
1800e5ae:	9871      	ld.w      	r3, (r14, 0x44)
1800e5b0:	b861      	st.w      	r3, (r14, 0x4)
1800e5b2:	d86e004c 	ld.b      	r3, (r14, 0x4c)
1800e5b6:	6e8b      	mov      	r10, r2
1800e5b8:	b862      	st.w      	r3, (r14, 0x8)
1800e5ba:	6d43      	mov      	r5, r0
1800e5bc:	6ec7      	mov      	r11, r1
1800e5be:	988d      	ld.w      	r4, (r14, 0x34)
1800e5c0:	98d0      	ld.w      	r6, (r14, 0x40)
1800e5c2:	d92e0048 	ld.b      	r9, (r14, 0x48)
1800e5c6:	d8ee0050 	ld.b      	r7, (r14, 0x50)
    RHINO_CRITICAL_ENTER();
1800e5ca:	e3ff91fb 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
    INTRPT_NESTED_LEVEL_CHK();
1800e5ce:	117c      	lrw      	r3, 0x20002841	// 1800e6bc <task_create.isra.0.part.1+0x11c>
    RHINO_CRITICAL_ENTER();
1800e5d0:	6c83      	mov      	r2, r0
    INTRPT_NESTED_LEVEL_CHK();
1800e5d2:	8360      	ld.b      	r3, (r3, 0x0)
1800e5d4:	e9030008 	bez      	r3, 0x1800e5e4	// 1800e5e4 <task_create.isra.0.part.1+0x44>
1800e5d8:	e3ff91f9 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800e5dc:	ea0003ea 	movi      	r0, 1002
}
1800e5e0:	1404      	addi      	r14, r14, 16
1800e5e2:	1498      	pop      	r4-r11, r15
    if (prio == RHINO_IDLE_PRI) {
1800e5e4:	eb48003d 	cmpnei      	r8, 61
1800e5e8:	080e      	bt      	0x1800e604	// 1800e604 <task_create.isra.0.part.1+0x64>
        if (g_idle_task_spawned[cpu_num] > 0u) {
1800e5ea:	1176      	lrw      	r3, 0x20002840	// 1800e6c0 <task_create.isra.0.part.1+0x120>
1800e5ec:	d0e30021 	ldr.b      	r1, (r3, r7 << 0)
1800e5f0:	e9010007 	bez      	r1, 0x1800e5fe	// 1800e5fe <task_create.isra.0.part.1+0x5e>
            RHINO_CRITICAL_EXIT();
1800e5f4:	e3ff91eb 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
            return RHINO_IDLE_TASK_EXIST;
1800e5f8:	309a      	movi      	r0, 154
1800e5fa:	4001      	lsli      	r0, r0, 1
1800e5fc:	07f2      	br      	0x1800e5e0	// 1800e5e0 <task_create.isra.0.part.1+0x40>
        g_idle_task_spawned[cpu_num] = 1u;
1800e5fe:	3101      	movi      	r1, 1
1800e600:	d4e30021 	str.b      	r1, (r3, r7 << 0)
    RHINO_CRITICAL_EXIT();
1800e604:	6c0b      	mov      	r0, r2
1800e606:	e3ff91e2 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
    memset(task, 0, sizeof(ktask_t));
1800e60a:	327c      	movi      	r2, 124
1800e60c:	3100      	movi      	r1, 0
1800e60e:	6c17      	mov      	r0, r5
1800e610:	e0003c2c 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
    if (ticks > 0u) {
1800e614:	9863      	ld.w      	r3, (r14, 0xc)
1800e616:	6cd0      	or      	r3, r4
        task->time_total = ticks;
1800e618:	3b40      	cmpnei      	r3, 0
1800e61a:	3305      	movi      	r3, 5
1800e61c:	c4830c20 	incf      	r4, r3, 0
    task->sched_policy = KSCHED_RR;
1800e620:	3301      	movi      	r3, 1
        task->time_total = ticks;
1800e622:	b598      	st.w      	r4, (r5, 0x60)
    task->time_slice   = task->time_total;
1800e624:	b597      	st.w      	r4, (r5, 0x5c)
    task->sched_policy = KSCHED_RR;
1800e626:	dc65006d 	st.b      	r3, (r5, 0x6d)
    if (autorun > 0u) {
1800e62a:	e9090040 	bez      	r9, 0x1800e6aa	// 1800e6aa <task_create.isra.0.part.1+0x10a>
        task->task_state    = K_RDY;
1800e62e:	3301      	movi      	r3, 1
1800e630:	b573      	st.w      	r3, (r5, 0x4c)
    task->task_stack_base = stack_buf;
1800e632:	9860      	ld.w      	r3, (r14, 0x0)
1800e634:	b561      	st.w      	r3, (r5, 0x4)
    memset(tmp, 0, stack_size * sizeof(cpu_stack_t));
1800e636:	4642      	lsli      	r2, r6, 2
1800e638:	3100      	movi      	r1, 0
1800e63a:	6c0f      	mov      	r0, r3
1800e63c:	e0003c16 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
    task->mm_alloc_flag = mm_alloc_flag;
1800e640:	d86e0008 	ld.b      	r3, (r14, 0x8)
1800e644:	dc650071 	st.b      	r3, (r5, 0x71)
    *tmp = RHINO_TASK_STACK_OVF_MAGIC;
1800e648:	9561      	ld.w      	r3, (r5, 0x4)
1800e64a:	105f      	lrw      	r2, 0xdeadbeaf	// 1800e6c4 <task_create.isra.0.part.1+0x124>
    task->task_stack = cpu_task_stack_init(stack_buf, stack_size, arg, entry);
1800e64c:	6c5b      	mov      	r1, r6
    task->task_name     = name;
1800e64e:	dd652012 	st.w      	r11, (r5, 0x48)
    task->prio          = prio;
1800e652:	dd05006f 	st.b      	r8, (r5, 0x6f)
    task->b_prio        = prio;
1800e656:	dd050070 	st.b      	r8, (r5, 0x70)
    task->stack_size    = stack_size;
1800e65a:	b5c2      	st.w      	r6, (r5, 0x8)
    task->cpu_num       = cpu_num;
1800e65c:	dce5006e 	st.b      	r7, (r5, 0x6e)
    task->task_stack = cpu_task_stack_init(stack_buf, stack_size, arg, entry);
1800e660:	9800      	ld.w      	r0, (r14, 0x0)
    *tmp = RHINO_TASK_STACK_OVF_MAGIC;
1800e662:	b340      	st.w      	r2, (r3, 0x0)
    task->task_stack = cpu_task_stack_init(stack_buf, stack_size, arg, entry);
1800e664:	9861      	ld.w      	r3, (r14, 0x4)
1800e666:	6cab      	mov      	r2, r10
1800e668:	e00007f6 	bsr      	0x1800f654	// 1800f654 <cpu_task_stack_init>
1800e66c:	b500      	st.w      	r0, (r5, 0x0)
    task->arg = arg;
1800e66e:	dd45201d 	st.w      	r10, (r5, 0x74)
    RHINO_CRITICAL_ENTER();
1800e672:	e3ff91a7 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
    element->prev = head->prev;
1800e676:	1055      	lrw      	r2, 0x20002530	// 1800e6c8 <task_create.isra.0.part.1+0x128>
    klist_insert(&(g_kobj_list.task_head), &task->task_stats_item);
1800e678:	e465001b 	addi      	r3, r5, 28
1800e67c:	9221      	ld.w      	r1, (r2, 0x4)
1800e67e:	b528      	st.w      	r1, (r5, 0x20)
    element->next = head;
1800e680:	b547      	st.w      	r2, (r5, 0x1c)
    RHINO_CRITICAL_ENTER();
1800e682:	6d03      	mov      	r4, r0
    head->prev->next = element;
1800e684:	b160      	st.w      	r3, (r1, 0x0)
    head->prev       = element;
1800e686:	b261      	st.w      	r3, (r2, 0x4)
    if (autorun > 0u) {
1800e688:	e9090015 	bez      	r9, 0x1800e6b2	// 1800e6b2 <task_create.isra.0.part.1+0x112>
        ready_list_add_tail(&g_ready_queue, task);
1800e68c:	6c57      	mov      	r1, r5
1800e68e:	1010      	lrw      	r0, 0x20002364	// 1800e6cc <task_create.isra.0.part.1+0x12c>
1800e690:	e3fffcea 	bsr      	0x1800e064	// 1800e064 <ready_list_add_tail>
        if (g_sys_stat == RHINO_RUNNING) {
1800e694:	106f      	lrw      	r3, 0x20002568	// 1800e6d0 <task_create.isra.0.part.1+0x130>
1800e696:	9360      	ld.w      	r3, (r3, 0x0)
1800e698:	3b43      	cmpnei      	r3, 3
1800e69a:	080c      	bt      	0x1800e6b2	// 1800e6b2 <task_create.isra.0.part.1+0x112>
            RHINO_CRITICAL_EXIT_SCHED();
1800e69c:	6c13      	mov      	r0, r4
1800e69e:	e3ff9196 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800e6a2:	e3fffc7f 	bsr      	0x1800dfa0	// 1800dfa0 <core_sched>
    return RHINO_SUCCESS;
1800e6a6:	3000      	movi      	r0, 0
1800e6a8:	079c      	br      	0x1800e5e0	// 1800e5e0 <task_create.isra.0.part.1+0x40>
        task->task_state    = K_SUSPENDED;
1800e6aa:	3203      	movi      	r2, 3
1800e6ac:	b553      	st.w      	r2, (r5, 0x4c)
        task->suspend_count = 1u;
1800e6ae:	a574      	st.b      	r3, (r5, 0x14)
1800e6b0:	07c1      	br      	0x1800e632	// 1800e632 <task_create.isra.0.part.1+0x92>
    RHINO_CRITICAL_EXIT();
1800e6b2:	6c13      	mov      	r0, r4
1800e6b4:	e3ff918b 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800e6b8:	07f7      	br      	0x1800e6a6	// 1800e6a6 <task_create.isra.0.part.1+0x106>
1800e6ba:	0000      	.short	0x0000
1800e6bc:	20002841 	.long	0x20002841
1800e6c0:	20002840 	.long	0x20002840
1800e6c4:	deadbeaf 	.long	0xdeadbeaf
1800e6c8:	20002530 	.long	0x20002530
1800e6cc:	20002364 	.long	0x20002364
1800e6d0:	20002568 	.long	0x20002568

1800e6d4 <krhino_task_create>:
{
1800e6d4:	14d6      	push      	r4-r9, r15
1800e6d6:	1428      	subi      	r14, r14, 32
1800e6d8:	d98e200f 	ld.w      	r12, (r14, 0x3c)
1800e6dc:	d9ae2010 	ld.w      	r13, (r14, 0x40)
1800e6e0:	6e33      	mov      	r8, r12
1800e6e2:	6e77      	mov      	r9, r13
1800e6e4:	6dc7      	mov      	r7, r1
1800e6e6:	6d8f      	mov      	r6, r3
1800e6e8:	d98e2011 	ld.w      	r12, (r14, 0x44)
1800e6ec:	d9ae2012 	ld.w      	r13, (r14, 0x48)
1800e6f0:	9893      	ld.w      	r4, (r14, 0x4c)
1800e6f2:	d8ae0050 	ld.b      	r5, (r14, 0x50)
    NULL_PARA_CHK(task);
1800e6f6:	e900001f 	bez      	r0, 0x1800e734	// 1800e734 <krhino_task_create+0x60>
    NULL_PARA_CHK(name);
1800e6fa:	e901001d 	bez      	r1, 0x1800e734	// 1800e734 <krhino_task_create+0x60>
    NULL_PARA_CHK(entry);
1800e6fe:	e904001b 	bez      	r4, 0x1800e734	// 1800e734 <krhino_task_create+0x60>
    NULL_PARA_CHK(stack_buf);
1800e702:	e90c0019 	bez      	r12, 0x1800e734	// 1800e734 <krhino_task_create+0x60>
    if (stack_size == 0u) {
1800e706:	e90d0019 	bez      	r13, 0x1800e738	// 1800e738 <krhino_task_create+0x64>
    if (prio >= RHINO_CONFIG_PRI_MAX) {
1800e70a:	eb03003d 	cmphsi      	r3, 62
1800e70e:	0818      	bt      	0x1800e73e	// 1800e73e <krhino_task_create+0x6a>
1800e710:	3600      	movi      	r6, 0
1800e712:	b8c7      	st.w      	r6, (r14, 0x1c)
1800e714:	3601      	movi      	r6, 1
1800e716:	b8c6      	st.w      	r6, (r14, 0x18)
1800e718:	b8a5      	st.w      	r5, (r14, 0x14)
1800e71a:	b884      	st.w      	r4, (r14, 0x10)
1800e71c:	ddae2003 	st.w      	r13, (r14, 0xc)
1800e720:	dd8e2002 	st.w      	r12, (r14, 0x8)
1800e724:	dd0e2000 	st.w      	r8, (r14, 0x0)
1800e728:	dd2e2001 	st.w      	r9, (r14, 0x4)
1800e72c:	e3ffff3a 	bsr      	0x1800e5a0	// 1800e5a0 <task_create.isra.0.part.1>
}
1800e730:	1408      	addi      	r14, r14, 32
1800e732:	1496      	pop      	r4-r9, r15
    NULL_PARA_CHK(task);
1800e734:	3006      	movi      	r0, 6
1800e736:	07fd      	br      	0x1800e730	// 1800e730 <krhino_task_create+0x5c>
        return RHINO_TASK_INV_STACK_SIZE;
1800e738:	3096      	movi      	r0, 150
1800e73a:	4001      	lsli      	r0, r0, 1
1800e73c:	07fa      	br      	0x1800e730	// 1800e730 <krhino_task_create+0x5c>
        return RHINO_BEYOND_MAX_PRI;
1800e73e:	ea000131 	movi      	r0, 305
    return task_create(task, name, arg, prio, ticks, stack_buf, stack_size, entry,
1800e742:	07f7      	br      	0x1800e730	// 1800e730 <krhino_task_create+0x5c>

1800e744 <task_dyn_create>:
{
1800e744:	14d8      	push      	r4-r11, r15
1800e746:	142c      	subi      	r14, r14, 48
1800e748:	6d83      	mov      	r6, r0
1800e74a:	6dc7      	mov      	r7, r1
1800e74c:	9815      	ld.w      	r0, (r14, 0x54)
1800e74e:	9836      	ld.w      	r1, (r14, 0x58)
1800e750:	b808      	st.w      	r0, (r14, 0x20)
1800e752:	b829      	st.w      	r1, (r14, 0x24)
1800e754:	9897      	ld.w      	r4, (r14, 0x5c)
1800e756:	d90e2018 	ld.w      	r8, (r14, 0x60)
1800e75a:	d94e0064 	ld.b      	r10, (r14, 0x64)
1800e75e:	d92e006c 	ld.b      	r9, (r14, 0x6c)
    NULL_PARA_CHK(task);
1800e762:	e9060042 	bez      	r6, 0x1800e7e6	// 1800e7e6 <task_dyn_create+0xa2>
    if (stack == 0) {
1800e766:	e9040042 	bez      	r4, 0x1800e7ea	// 1800e7ea <task_dyn_create+0xa6>
    task_stack = krhino_mm_alloc(stack * sizeof(cpu_stack_t) + sizeof(ktask_t), __builtin_return_address(0));
1800e76a:	e564001e 	addi      	r11, r4, 31
1800e76e:	c44b482b 	lsli      	r11, r11, 2
1800e772:	6c7f      	mov      	r1, r15
1800e774:	6c2f      	mov      	r0, r11
1800e776:	b86b      	st.w      	r3, (r14, 0x2c)
1800e778:	b84a      	st.w      	r2, (r14, 0x28)
1800e77a:	e3ffa43f 	bsr      	0x18002ff8	// 18002ff8 <krhino_mm_alloc>
1800e77e:	6d43      	mov      	r5, r0
    if (task_stack == NULL) {
1800e780:	e9000037 	bez      	r0, 0x1800e7ee	// 1800e7ee <task_dyn_create+0xaa>
    task_obj = (ktask_t*)((uint8_t*)task_stack + stack * sizeof(cpu_stack_t));
1800e784:	e40b107b 	subi      	r0, r11, 124
1800e788:	6014      	addu      	r0, r5
    *task = task_obj;
1800e78a:	b600      	st.w      	r0, (r6, 0x0)
    NULL_PARA_CHK(task);
1800e78c:	e9000033 	bez      	r0, 0x1800e7f2	// 1800e7f2 <task_dyn_create+0xae>
    NULL_PARA_CHK(name);
1800e790:	e9070031 	bez      	r7, 0x1800e7f2	// 1800e7f2 <task_dyn_create+0xae>
    NULL_PARA_CHK(entry);
1800e794:	e908002f 	bez      	r8, 0x1800e7f2	// 1800e7f2 <task_dyn_create+0xae>
    if (prio >= RHINO_CONFIG_PRI_MAX) {
1800e798:	986b      	ld.w      	r3, (r14, 0x2c)
1800e79a:	eb03003d 	cmphsi      	r3, 62
1800e79e:	984a      	ld.w      	r2, (r14, 0x28)
1800e7a0:	082b      	bt      	0x1800e7f6	// 1800e7f6 <task_dyn_create+0xb2>
1800e7a2:	3102      	movi      	r1, 2
1800e7a4:	d98e2008 	ld.w      	r12, (r14, 0x20)
1800e7a8:	d9ae2009 	ld.w      	r13, (r14, 0x24)
1800e7ac:	b826      	st.w      	r1, (r14, 0x18)
1800e7ae:	b883      	st.w      	r4, (r14, 0xc)
1800e7b0:	dd4e2007 	st.w      	r10, (r14, 0x1c)
1800e7b4:	dd2e2005 	st.w      	r9, (r14, 0x14)
1800e7b8:	dd0e2004 	st.w      	r8, (r14, 0x10)
1800e7bc:	b8a2      	st.w      	r5, (r14, 0x8)
1800e7be:	dd8e2000 	st.w      	r12, (r14, 0x0)
1800e7c2:	ddae2001 	st.w      	r13, (r14, 0x4)
1800e7c6:	6c5f      	mov      	r1, r7
1800e7c8:	e3fffeec 	bsr      	0x1800e5a0	// 1800e5a0 <task_create.isra.0.part.1>
1800e7cc:	6d03      	mov      	r4, r0
    if ((ret != RHINO_SUCCESS) && (ret != RHINO_STOPPED)) {
1800e7ce:	e9000009 	bez      	r0, 0x1800e7e0	// 1800e7e0 <task_dyn_create+0x9c>
1800e7d2:	3844      	cmpnei      	r0, 4
1800e7d4:	0c06      	bf      	0x1800e7e0	// 1800e7e0 <task_dyn_create+0x9c>
        krhino_mm_free(task_stack);
1800e7d6:	6c17      	mov      	r0, r5
1800e7d8:	e3ffa41a 	bsr      	0x1800300c	// 1800300c <krhino_mm_free>
        *task = NULL;
1800e7dc:	3300      	movi      	r3, 0
1800e7de:	b660      	st.w      	r3, (r6, 0x0)
}
1800e7e0:	6c13      	mov      	r0, r4
1800e7e2:	140c      	addi      	r14, r14, 48
1800e7e4:	1498      	pop      	r4-r11, r15
    NULL_PARA_CHK(task);
1800e7e6:	3406      	movi      	r4, 6
1800e7e8:	07fc      	br      	0x1800e7e0	// 1800e7e0 <task_dyn_create+0x9c>
        return RHINO_INV_PARAM;
1800e7ea:	3405      	movi      	r4, 5
1800e7ec:	07fa      	br      	0x1800e7e0	// 1800e7e0 <task_dyn_create+0x9c>
        return RHINO_NO_MEM;
1800e7ee:	3469      	movi      	r4, 105
1800e7f0:	07f8      	br      	0x1800e7e0	// 1800e7e0 <task_dyn_create+0x9c>
    NULL_PARA_CHK(task);
1800e7f2:	3406      	movi      	r4, 6
1800e7f4:	07f1      	br      	0x1800e7d6	// 1800e7d6 <task_dyn_create+0x92>
        return RHINO_BEYOND_MAX_PRI;
1800e7f6:	ea040131 	movi      	r4, 305
1800e7fa:	07ee      	br      	0x1800e7d6	// 1800e7d6 <task_dyn_create+0x92>

1800e7fc <krhino_task_dyn_create>:
{
1800e7fc:	14d3      	push      	r4-r6, r15
1800e7fe:	1427      	subi      	r14, r14, 28
1800e800:	d98e200b 	ld.w      	r12, (r14, 0x2c)
1800e804:	d9ae200c 	ld.w      	r13, (r14, 0x30)
1800e808:	6d33      	mov      	r4, r12
1800e80a:	6d77      	mov      	r5, r13
1800e80c:	d98e200e 	ld.w      	r12, (r14, 0x38)
1800e810:	6db3      	mov      	r6, r12
1800e812:	d98e003c 	ld.b      	r12, (r14, 0x3c)
1800e816:	d9ae200d 	ld.w      	r13, (r14, 0x34)
    return task_dyn_create(task, name, arg, pri, ticks, stack, entry, 0, 0, autorun);
1800e81a:	dd8e2006 	st.w      	r12, (r14, 0x18)
1800e81e:	ea0c0000 	movi      	r12, 0
1800e822:	dd8e2005 	st.w      	r12, (r14, 0x14)
1800e826:	dd8e2004 	st.w      	r12, (r14, 0x10)
1800e82a:	b8c3      	st.w      	r6, (r14, 0xc)
1800e82c:	ddae2002 	st.w      	r13, (r14, 0x8)
1800e830:	b880      	st.w      	r4, (r14, 0x0)
1800e832:	b8a1      	st.w      	r5, (r14, 0x4)
1800e834:	e3ffff88 	bsr      	0x1800e744	// 1800e744 <task_dyn_create>
}
1800e838:	1407      	addi      	r14, r14, 28
1800e83a:	1493      	pop      	r4-r6, r15

1800e83c <krhino_task_sleep>:
{
1800e83c:	14d4      	push      	r4-r7, r15
    if (ticks == 0u) {
1800e83e:	c4202423 	or      	r3, r0, r1
{
1800e842:	6d83      	mov      	r6, r0
1800e844:	6d47      	mov      	r5, r1
    if (ticks == 0u) {
1800e846:	e9030033 	bez      	r3, 0x1800e8ac	// 1800e8ac <krhino_task_sleep+0x70>
    RHINO_CRITICAL_ENTER();
1800e84a:	e3ff90bb 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
    INTRPT_NESTED_LEVEL_CHK();
1800e84e:	1079      	lrw      	r3, 0x20002841	// 1800e8b0 <krhino_task_sleep+0x74>
    RHINO_CRITICAL_ENTER();
1800e850:	6dc3      	mov      	r7, r0
    INTRPT_NESTED_LEVEL_CHK();
1800e852:	8360      	ld.b      	r3, (r3, 0x0)
1800e854:	e9030008 	bez      	r3, 0x1800e864	// 1800e864 <krhino_task_sleep+0x28>
1800e858:	e3ff90b9 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800e85c:	ea0403ea 	movi      	r4, 1002
}
1800e860:	6c13      	mov      	r0, r4
1800e862:	1494      	pop      	r4-r7, r15
    if (g_sched_lock[cur_cpu_num] > 0u) {
1800e864:	1074      	lrw      	r3, 0x20002944	// 1800e8b4 <krhino_task_sleep+0x78>
1800e866:	8360      	ld.b      	r3, (r3, 0x0)
1800e868:	e9030006 	bez      	r3, 0x1800e874	// 1800e874 <krhino_task_sleep+0x38>
        RHINO_CRITICAL_EXIT();
1800e86c:	e3ff90af 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_SCHED_DISABLE;
1800e870:	34c8      	movi      	r4, 200
1800e872:	07f7      	br      	0x1800e860	// 1800e860 <krhino_task_sleep+0x24>
    g_active_task[cur_cpu_num]->task_state = K_SLEEP;
1800e874:	1091      	lrw      	r4, 0x20002828	// 1800e8b8 <krhino_task_sleep+0x7c>
1800e876:	3305      	movi      	r3, 5
1800e878:	9400      	ld.w      	r0, (r4, 0x0)
    tick_list_insert(g_active_task[cur_cpu_num], ticks);
1800e87a:	6c97      	mov      	r2, r5
    g_active_task[cur_cpu_num]->task_state = K_SLEEP;
1800e87c:	b073      	st.w      	r3, (r0, 0x4c)
    tick_list_insert(g_active_task[cur_cpu_num], ticks);
1800e87e:	6c5b      	mov      	r1, r6
1800e880:	e0000230 	bsr      	0x1800ece0	// 1800ece0 <tick_list_insert>
    ready_list_rm(&g_ready_queue, g_active_task[cur_cpu_num]);
1800e884:	9420      	ld.w      	r1, (r4, 0x0)
1800e886:	100e      	lrw      	r0, 0x20002364	// 1800e8bc <krhino_task_sleep+0x80>
1800e888:	e3fffc04 	bsr      	0x1800e090	// 1800e090 <ready_list_rm>
    RHINO_CRITICAL_EXIT_SCHED();
1800e88c:	6c1f      	mov      	r0, r7
1800e88e:	e3ff909e 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800e892:	e3fffb87 	bsr      	0x1800dfa0	// 1800dfa0 <core_sched>
    RHINO_CPU_INTRPT_DISABLE();
1800e896:	e3ff9095 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
1800e89a:	6d43      	mov      	r5, r0
    ret = pend_state_end_proc(g_active_task[cpu_cur_get()]);
1800e89c:	9400      	ld.w      	r0, (r4, 0x0)
1800e89e:	e3fff96d 	bsr      	0x1800db78	// 1800db78 <pend_state_end_proc>
1800e8a2:	6d03      	mov      	r4, r0
    RHINO_CPU_INTRPT_ENABLE();
1800e8a4:	6c17      	mov      	r0, r5
1800e8a6:	e3ff9092 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
    return ret;
1800e8aa:	07db      	br      	0x1800e860	// 1800e860 <krhino_task_sleep+0x24>
        return RHINO_INV_PARAM;
1800e8ac:	3405      	movi      	r4, 5
1800e8ae:	07d9      	br      	0x1800e860	// 1800e860 <krhino_task_sleep+0x24>
1800e8b0:	20002841 	.long	0x20002841
1800e8b4:	20002944 	.long	0x20002944
1800e8b8:	20002828 	.long	0x20002828
1800e8bc:	20002364 	.long	0x20002364

1800e8c0 <krhino_cur_task_get>:
{
1800e8c0:	14d1      	push      	r4, r15
    RHINO_CRITICAL_ENTER();
1800e8c2:	e3ff907f 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
    task = g_active_task[cpu_cur_get()];
1800e8c6:	1064      	lrw      	r3, 0x20002828	// 1800e8d4 <krhino_cur_task_get+0x14>
1800e8c8:	9380      	ld.w      	r4, (r3, 0x0)
    RHINO_CRITICAL_EXIT();
1800e8ca:	e3ff9080 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
}
1800e8ce:	6c13      	mov      	r0, r4
1800e8d0:	1491      	pop      	r4, r15
1800e8d2:	0000      	.short	0x0000
1800e8d4:	20002828 	.long	0x20002828

1800e8d8 <task_pri_change>:
{
1800e8d8:	14d5      	push      	r4-r8, r15
1800e8da:	6d03      	mov      	r4, r0
1800e8dc:	6d47      	mov      	r5, r1
1800e8de:	3701      	movi      	r7, 1
        if (task->prio != new_pri) {
1800e8e0:	d904006f 	ld.b      	r8, (r4, 0x6f)
1800e8e4:	6616      	cmpne      	r5, r8
1800e8e6:	0803      	bt      	0x1800e8ec	// 1800e8ec <task_pri_change+0x14>
    return RHINO_SUCCESS;
1800e8e8:	3000      	movi      	r0, 0
}
1800e8ea:	1495      	pop      	r4-r8, r15
            switch (task->task_state) {
1800e8ec:	9473      	ld.w      	r3, (r4, 0x4c)
1800e8ee:	3b06      	cmphsi      	r3, 7
1800e8f0:	0841      	bt      	0x1800e972	// 1800e972 <task_pri_change+0x9a>
1800e8f2:	c4674023 	lsl      	r3, r7, r3
1800e8f6:	e4032014 	andi      	r0, r3, 20
1800e8fa:	e920001f 	bnez      	r0, 0x1800e938	// 1800e938 <task_pri_change+0x60>
1800e8fe:	e4c32068 	andi      	r6, r3, 104
1800e902:	e9260018 	bnez      	r6, 0x1800e932	// 1800e932 <task_pri_change+0x5a>
1800e906:	e4632002 	andi      	r3, r3, 2
1800e90a:	e9030034 	bez      	r3, 0x1800e972	// 1800e972 <task_pri_change+0x9a>
                    ready_list_rm(&g_ready_queue, task);
1800e90e:	6c53      	mov      	r1, r4
1800e910:	101c      	lrw      	r0, 0x20002364	// 1800e980 <task_pri_change+0xa8>
1800e912:	e3fffbbf 	bsr      	0x1800e090	// 1800e090 <ready_list_rm>
                    if (task == g_active_task[cpu_cur_get()]) {
1800e916:	107c      	lrw      	r3, 0x20002828	// 1800e984 <task_pri_change+0xac>
                        ready_list_add_head(&g_ready_queue, task);
1800e918:	6c53      	mov      	r1, r4
                    if (task == g_active_task[cpu_cur_get()]) {
1800e91a:	9360      	ld.w      	r3, (r3, 0x0)
1800e91c:	64d2      	cmpne      	r4, r3
                    task->prio = new_pri;
1800e91e:	dca4006f 	st.b      	r5, (r4, 0x6f)
                        ready_list_add_head(&g_ready_queue, task);
1800e922:	1018      	lrw      	r0, 0x20002364	// 1800e980 <task_pri_change+0xa8>
                    if (task == g_active_task[cpu_cur_get()]) {
1800e924:	0804      	bt      	0x1800e92c	// 1800e92c <task_pri_change+0x54>
                        ready_list_add_head(&g_ready_queue, task);
1800e926:	e3fffb9b 	bsr      	0x1800e05c	// 1800e05c <ready_list_add_head>
1800e92a:	07df      	br      	0x1800e8e8	// 1800e8e8 <task_pri_change+0x10>
                        ready_list_add_tail(&g_ready_queue, task);
1800e92c:	e3fffb9c 	bsr      	0x1800e064	// 1800e064 <ready_list_add_tail>
1800e930:	07dc      	br      	0x1800e8e8	// 1800e8e8 <task_pri_change+0x10>
                    task->prio = new_pri;
1800e932:	dca4006f 	st.b      	r5, (r4, 0x6f)
                    break;
1800e936:	07da      	br      	0x1800e8ea	// 1800e8ea <task_pri_change+0x12>
                    task->prio = new_pri;
1800e938:	dca4006f 	st.b      	r5, (r4, 0x6f)
                    pend_list_reorder(task);
1800e93c:	6c13      	mov      	r0, r4
1800e93e:	e3fff90f 	bsr      	0x1800db5c	// 1800db5c <pend_list_reorder>
                    if (task->blk_obj->obj_type == RHINO_MUTEX_OBJ_TYPE) {
1800e942:	9475      	ld.w      	r3, (r4, 0x54)
1800e944:	834d      	ld.b      	r2, (r3, 0xd)
1800e946:	3a42      	cmpnei      	r2, 2
1800e948:	0bd0      	bt      	0x1800e8e8	// 1800e8e8 <task_pri_change+0x10>
                        mutex_task = mutex_tmp->mutex_task;
1800e94a:	93c4      	ld.w      	r6, (r3, 0x10)
                        if (mutex_task->prio > task->prio) {
1800e94c:	d844006f 	ld.b      	r2, (r4, 0x6f)
1800e950:	d866006f 	ld.b      	r3, (r6, 0x6f)
1800e954:	64c8      	cmphs      	r2, r3
1800e956:	0c0c      	bf      	0x1800e96e	// 1800e96e <task_pri_change+0x96>
                        } else if (mutex_task->prio == old_pri) {
1800e958:	64e2      	cmpne      	r8, r3
1800e95a:	0bc7      	bt      	0x1800e8e8	// 1800e8e8 <task_pri_change+0x10>
                            new_pri = mutex_pri_look(mutex_task, 0);
1800e95c:	3100      	movi      	r1, 0
1800e95e:	6c1b      	mov      	r0, r6
1800e960:	e3fff72c 	bsr      	0x1800d7b8	// 1800d7b8 <mutex_pri_look>
                            if (new_pri != mutex_task->prio) {
1800e964:	d866006f 	ld.b      	r3, (r6, 0x6f)
1800e968:	640e      	cmpne      	r3, r0
                            new_pri = mutex_pri_look(mutex_task, 0);
1800e96a:	6d43      	mov      	r5, r0
                            if (new_pri != mutex_task->prio) {
1800e96c:	0fbe      	bf      	0x1800e8e8	// 1800e8e8 <task_pri_change+0x10>
{
1800e96e:	6d1b      	mov      	r4, r6
1800e970:	07b8      	br      	0x1800e8e0	// 1800e8e0 <task_pri_change+0x8>
                    k_err_proc(RHINO_INV_TASK_STATE);
1800e972:	ea000133 	movi      	r0, 307
1800e976:	e3fff5c1 	bsr      	0x1800d4f8	// 1800d4f8 <k_err_proc>
                    return RHINO_INV_TASK_STATE;
1800e97a:	ea000133 	movi      	r0, 307
1800e97e:	07b6      	br      	0x1800e8ea	// 1800e8ea <task_pri_change+0x12>
1800e980:	20002364 	.long	0x20002364
1800e984:	20002828 	.long	0x20002828

1800e988 <krhino_task_pri_change>:
{
1800e988:	14d4      	push      	r4-r7, r15
1800e98a:	6d03      	mov      	r4, r0
1800e98c:	6d47      	mov      	r5, r1
1800e98e:	6dcb      	mov      	r7, r2
    NULL_PARA_CHK(task);
1800e990:	e9000035 	bez      	r0, 0x1800e9fa	// 1800e9fa <krhino_task_pri_change+0x72>
    NULL_PARA_CHK(old_pri);
1800e994:	e9020033 	bez      	r2, 0x1800e9fa	// 1800e9fa <krhino_task_pri_change+0x72>
    if (task->prio >= RHINO_IDLE_PRI) {
1800e998:	d860006f 	ld.b      	r3, (r0, 0x6f)
1800e99c:	eb03003c 	cmphsi      	r3, 61
1800e9a0:	082f      	bt      	0x1800e9fe	// 1800e9fe <krhino_task_pri_change+0x76>
    if (pri >= RHINO_IDLE_PRI) {
1800e9a2:	eb01003c 	cmphsi      	r1, 61
1800e9a6:	082c      	bt      	0x1800e9fe	// 1800e9fe <krhino_task_pri_change+0x76>
    if (task->task_state == K_DELETED) {
1800e9a8:	9073      	ld.w      	r3, (r0, 0x4c)
1800e9aa:	3b47      	cmpnei      	r3, 7
1800e9ac:	0c2c      	bf      	0x1800ea04	// 1800ea04 <krhino_task_pri_change+0x7c>
    RHINO_CRITICAL_ENTER();
1800e9ae:	e3ff9009 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
    INTRPT_NESTED_LEVEL_CHK();
1800e9b2:	1077      	lrw      	r3, 0x20002841	// 1800ea0c <krhino_task_pri_change+0x84>
    RHINO_CRITICAL_ENTER();
1800e9b4:	6d83      	mov      	r6, r0
    INTRPT_NESTED_LEVEL_CHK();
1800e9b6:	8360      	ld.b      	r3, (r3, 0x0)
1800e9b8:	e9030008 	bez      	r3, 0x1800e9c8	// 1800e9c8 <krhino_task_pri_change+0x40>
1800e9bc:	e3ff9007 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800e9c0:	ea0403ea 	movi      	r4, 1002
}
1800e9c4:	6c13      	mov      	r0, r4
1800e9c6:	1494      	pop      	r4-r7, r15
    pri_limit = mutex_pri_limit(task, pri);
1800e9c8:	6c57      	mov      	r1, r5
1800e9ca:	6c13      	mov      	r0, r4
1800e9cc:	e3fff6e6 	bsr      	0x1800d798	// 1800d798 <mutex_pri_limit>
    *old_pri = task->prio;
1800e9d0:	d864006f 	ld.b      	r3, (r4, 0x6f)
    task->b_prio = pri;
1800e9d4:	dca40070 	st.b      	r5, (r4, 0x70)
    error = task_pri_change(task, pri);
1800e9d8:	6c43      	mov      	r1, r0
    *old_pri = task->prio;
1800e9da:	a760      	st.b      	r3, (r7, 0x0)
    error = task_pri_change(task, pri);
1800e9dc:	6c13      	mov      	r0, r4
1800e9de:	e3ffff7d 	bsr      	0x1800e8d8	// 1800e8d8 <task_pri_change>
1800e9e2:	6d03      	mov      	r4, r0
        RHINO_CRITICAL_EXIT();
1800e9e4:	6c1b      	mov      	r0, r6
    if (error != RHINO_SUCCESS) {
1800e9e6:	e9040005 	bez      	r4, 0x1800e9f0	// 1800e9f0 <krhino_task_pri_change+0x68>
        RHINO_CRITICAL_EXIT();
1800e9ea:	e3ff8ff0 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return error;
1800e9ee:	07eb      	br      	0x1800e9c4	// 1800e9c4 <krhino_task_pri_change+0x3c>
    RHINO_CRITICAL_EXIT_SCHED();
1800e9f0:	e3ff8fed 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800e9f4:	e3fffad6 	bsr      	0x1800dfa0	// 1800dfa0 <core_sched>
    return RHINO_SUCCESS;
1800e9f8:	07e6      	br      	0x1800e9c4	// 1800e9c4 <krhino_task_pri_change+0x3c>
    NULL_PARA_CHK(task);
1800e9fa:	3406      	movi      	r4, 6
1800e9fc:	07e4      	br      	0x1800e9c4	// 1800e9c4 <krhino_task_pri_change+0x3c>
        return RHINO_PRI_CHG_NOT_ALLOWED;
1800e9fe:	3499      	movi      	r4, 153
1800ea00:	4481      	lsli      	r4, r4, 1
1800ea02:	07e1      	br      	0x1800e9c4	// 1800e9c4 <krhino_task_pri_change+0x3c>
        return RHINO_INV_TASK_STATE;
1800ea04:	ea040133 	movi      	r4, 307
1800ea08:	07de      	br      	0x1800e9c4	// 1800e9c4 <krhino_task_pri_change+0x3c>
1800ea0a:	0000      	.short	0x0000
1800ea0c:	20002841 	.long	0x20002841

1800ea10 <krhino_task_del>:

kstat_t krhino_task_del(ktask_t *task)
{
1800ea10:	14d3      	push      	r4-r6, r15
1800ea12:	6d03      	mov      	r4, r0

#if (RHINO_CONFIG_USER_HOOK > 0)
    res_free_t *res_free;
#endif

    RHINO_CRITICAL_ENTER();
1800ea14:	e3ff8fd6 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
    cur_cpu_num = cpu_cur_get();

    INTRPT_NESTED_LEVEL_CHK();
1800ea18:	107b      	lrw      	r3, 0x20002841	// 1800ea84 <krhino_task_del+0x74>
    RHINO_CRITICAL_ENTER();
1800ea1a:	6d43      	mov      	r5, r0
    INTRPT_NESTED_LEVEL_CHK();
1800ea1c:	8360      	ld.b      	r3, (r3, 0x0)
1800ea1e:	e9030007 	bez      	r3, 0x1800ea2c	// 1800ea2c <krhino_task_del+0x1c>
1800ea22:	e3ff8fd4 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800ea26:	ea0003ea 	movi      	r0, 1002
#endif

    RHINO_CRITICAL_EXIT_SCHED();

    return RHINO_SUCCESS;
}
1800ea2a:	1493      	pop      	r4-r6, r15
    if (task == NULL) {
1800ea2c:	e9240004 	bnez      	r4, 0x1800ea34	// 1800ea34 <krhino_task_del+0x24>
        task = g_active_task[cur_cpu_num];
1800ea30:	1076      	lrw      	r3, 0x20002828	// 1800ea88 <krhino_task_del+0x78>
1800ea32:	9380      	ld.w      	r4, (r3, 0x0)
    if (task->prio == RHINO_IDLE_PRI) {
1800ea34:	d864006f 	ld.b      	r3, (r4, 0x6f)
1800ea38:	eb43003d 	cmpnei      	r3, 61
1800ea3c:	0c55      	bf      	0x1800eae6	// 1800eae6 <krhino_task_del+0xd6>
    if (task->mm_alloc_flag != K_OBJ_STATIC_ALLOC) {
1800ea3e:	d8640071 	ld.b      	r3, (r4, 0x71)
1800ea42:	3b41      	cmpnei      	r3, 1
1800ea44:	0c06      	bf      	0x1800ea50	// 1800ea50 <krhino_task_del+0x40>
        RHINO_CRITICAL_EXIT();
1800ea46:	6c17      	mov      	r0, r5
1800ea48:	e3ff8fc1 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_KOBJ_DEL_ERR;
1800ea4c:	3009      	movi      	r0, 9
1800ea4e:	07ee      	br      	0x1800ea2a	// 1800ea2a <krhino_task_del+0x1a>
    if (task == g_active_task[cpu_cur_get()]) {
1800ea50:	106e      	lrw      	r3, 0x20002828	// 1800ea88 <krhino_task_del+0x78>
1800ea52:	9360      	ld.w      	r3, (r3, 0x0)
1800ea54:	64d2      	cmpne      	r4, r3
1800ea56:	080a      	bt      	0x1800ea6a	// 1800ea6a <krhino_task_del+0x5a>
        if (g_sched_lock[cpu_cur_get()] > 0u) {
1800ea58:	106d      	lrw      	r3, 0x20002944	// 1800ea8c <krhino_task_del+0x7c>
1800ea5a:	8360      	ld.b      	r3, (r3, 0x0)
1800ea5c:	e9030007 	bez      	r3, 0x1800ea6a	// 1800ea6a <krhino_task_del+0x5a>
            RHINO_CRITICAL_EXIT();
1800ea60:	6c17      	mov      	r0, r5
1800ea62:	e3ff8fb4 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
            return RHINO_SCHED_DISABLE;
1800ea66:	30c8      	movi      	r0, 200
1800ea68:	07e1      	br      	0x1800ea2a	// 1800ea2a <krhino_task_del+0x1a>
    task_mutex_free(task);
1800ea6a:	9406      	ld.w      	r0, (r4, 0x18)
1800ea6c:	e3fffd84 	bsr      	0x1800e574	// 1800e574 <task_mutex_free.isra.2>
    switch (task->task_state) {
1800ea70:	9473      	ld.w      	r3, (r4, 0x4c)
1800ea72:	2b00      	subi      	r3, 1
1800ea74:	3b05      	cmphsi      	r3, 6
1800ea76:	0832      	bt      	0x1800eada	// 1800eada <krhino_task_del+0xca>
1800ea78:	1046      	lrw      	r2, 0x18017788	// 1800ea90 <krhino_task_del+0x80>
1800ea7a:	d0620883 	ldr.w      	r3, (r2, r3 << 2)
1800ea7e:	3607      	movi      	r6, 7
1800ea80:	780c      	jmp      	r3
1800ea82:	0000      	.short	0x0000
1800ea84:	20002841 	.long	0x20002841
1800ea88:	20002828 	.long	0x20002828
1800ea8c:	20002944 	.long	0x20002944
1800ea90:	18017788 	.long	0x18017788
            ready_list_rm(&g_ready_queue, task);
1800ea94:	6c53      	mov      	r1, r4
1800ea96:	1016      	lrw      	r0, 0x20002364	// 1800eaec <krhino_task_del+0xdc>
1800ea98:	e3fffafc 	bsr      	0x1800e090	// 1800e090 <ready_list_rm>
            task->task_state = K_DELETED;
1800ea9c:	b4d3      	st.w      	r6, (r4, 0x4c)
    element->prev->next = element->next;
1800ea9e:	9468      	ld.w      	r3, (r4, 0x20)
1800eaa0:	9447      	ld.w      	r2, (r4, 0x1c)
1800eaa2:	b340      	st.w      	r2, (r3, 0x0)
    element->next->prev = element->prev;
1800eaa4:	9447      	ld.w      	r2, (r4, 0x1c)
    RHINO_CRITICAL_EXIT_SCHED();
1800eaa6:	6c17      	mov      	r0, r5
1800eaa8:	b261      	st.w      	r3, (r2, 0x4)
1800eaaa:	e3ff8f90 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800eaae:	e3fffa79 	bsr      	0x1800dfa0	// 1800dfa0 <core_sched>
    return RHINO_SUCCESS;
1800eab2:	3000      	movi      	r0, 0
1800eab4:	07bb      	br      	0x1800ea2a	// 1800ea2a <krhino_task_del+0x1a>
            tick_list_rm(task);
1800eab6:	6c13      	mov      	r0, r4
1800eab8:	e000014c 	bsr      	0x1800ed50	// 1800ed50 <tick_list_rm>
1800eabc:	07f0      	br      	0x1800ea9c	// 1800ea9c <krhino_task_del+0x8c>
            tick_list_rm(task);
1800eabe:	6c13      	mov      	r0, r4
1800eac0:	e0000148 	bsr      	0x1800ed50	// 1800ed50 <tick_list_rm>
    element->prev->next = element->next;
1800eac4:	9464      	ld.w      	r3, (r4, 0x10)
1800eac6:	9443      	ld.w      	r2, (r4, 0xc)
1800eac8:	b340      	st.w      	r2, (r3, 0x0)
    element->next->prev = element->prev;
1800eaca:	9443      	ld.w      	r2, (r4, 0xc)
            mutex_task_pri_reset(task);
1800eacc:	6c13      	mov      	r0, r4
1800eace:	b261      	st.w      	r3, (r2, 0x4)
            task->task_state = K_DELETED;
1800ead0:	3307      	movi      	r3, 7
1800ead2:	b473      	st.w      	r3, (r4, 0x4c)
            mutex_task_pri_reset(task);
1800ead4:	e3fff6d8 	bsr      	0x1800d884	// 1800d884 <mutex_task_pri_reset>
            break;
1800ead8:	07e3      	br      	0x1800ea9e	// 1800ea9e <krhino_task_del+0x8e>
            RHINO_CRITICAL_EXIT();
1800eada:	6c17      	mov      	r0, r5
1800eadc:	e3ff8f77 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
            return RHINO_INV_TASK_STATE;
1800eae0:	ea000133 	movi      	r0, 307
1800eae4:	07a3      	br      	0x1800ea2a	// 1800ea2a <krhino_task_del+0x1a>
        return RHINO_TASK_DEL_NOT_ALLOWED;
1800eae6:	3097      	movi      	r0, 151
1800eae8:	4001      	lsli      	r0, r0, 1
1800eaea:	07a0      	br      	0x1800ea2a	// 1800ea2a <krhino_task_del+0x1a>
1800eaec:	20002364 	.long	0x20002364

1800eaf0 <krhino_task_dyn_del>:

#if (RHINO_CONFIG_KOBJ_DYN_ALLOC > 0)
kstat_t krhino_task_dyn_del(ktask_t *task)
{
1800eaf0:	14d4      	push      	r4-r7, r15
1800eaf2:	6d03      	mov      	r4, r0

    kstat_t    ret;
    uint8_t    cur_cpu_num;
    res_free_t *res_free;

    RHINO_CRITICAL_ENTER();
1800eaf4:	e3ff8f66 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>

    cur_cpu_num = cpu_cur_get();

    INTRPT_NESTED_LEVEL_CHK();
1800eaf8:	1173      	lrw      	r3, 0x20002841	// 1800ebc4 <krhino_task_dyn_del+0xd4>
    RHINO_CRITICAL_ENTER();
1800eafa:	6d83      	mov      	r6, r0
    INTRPT_NESTED_LEVEL_CHK();
1800eafc:	8360      	ld.b      	r3, (r3, 0x0)
1800eafe:	e9030008 	bez      	r3, 0x1800eb0e	// 1800eb0e <krhino_task_dyn_del+0x1e>
1800eb02:	e3ff8f64 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800eb06:	ea0503ea 	movi      	r5, 1002
#endif

    RHINO_CRITICAL_EXIT_SCHED();

    return RHINO_SUCCESS;
}
1800eb0a:	6c17      	mov      	r0, r5
1800eb0c:	1494      	pop      	r4-r7, r15
    if (task == NULL) {
1800eb0e:	e9240004 	bnez      	r4, 0x1800eb16	// 1800eb16 <krhino_task_dyn_del+0x26>
        task = g_active_task[cur_cpu_num];
1800eb12:	116e      	lrw      	r3, 0x20002828	// 1800ebc8 <krhino_task_dyn_del+0xd8>
1800eb14:	9380      	ld.w      	r4, (r3, 0x0)
    if (task->prio == RHINO_IDLE_PRI) {
1800eb16:	d864006f 	ld.b      	r3, (r4, 0x6f)
1800eb1a:	eb43003d 	cmpnei      	r3, 61
1800eb1e:	0807      	bt      	0x1800eb2c	// 1800eb2c <krhino_task_dyn_del+0x3c>
        RHINO_CRITICAL_EXIT();
1800eb20:	6c1b      	mov      	r0, r6
        return RHINO_TASK_DEL_NOT_ALLOWED;
1800eb22:	3597      	movi      	r5, 151
        RHINO_CRITICAL_EXIT();
1800eb24:	e3ff8f53 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_TASK_DEL_NOT_ALLOWED;
1800eb28:	45a1      	lsli      	r5, r5, 1
1800eb2a:	07f0      	br      	0x1800eb0a	// 1800eb0a <krhino_task_dyn_del+0x1a>
    if (task->mm_alloc_flag != K_OBJ_DYN_ALLOC) {
1800eb2c:	d8640071 	ld.b      	r3, (r4, 0x71)
1800eb30:	3b42      	cmpnei      	r3, 2
1800eb32:	0c06      	bf      	0x1800eb3e	// 1800eb3e <krhino_task_dyn_del+0x4e>
        RHINO_CRITICAL_EXIT();
1800eb34:	6c1b      	mov      	r0, r6
1800eb36:	e3ff8f4a 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_KOBJ_DEL_ERR;
1800eb3a:	3509      	movi      	r5, 9
1800eb3c:	07e7      	br      	0x1800eb0a	// 1800eb0a <krhino_task_dyn_del+0x1a>
    if (task == g_active_task[cpu_cur_get()]) {
1800eb3e:	1163      	lrw      	r3, 0x20002828	// 1800ebc8 <krhino_task_dyn_del+0xd8>
1800eb40:	9360      	ld.w      	r3, (r3, 0x0)
1800eb42:	64d2      	cmpne      	r4, r3
1800eb44:	080a      	bt      	0x1800eb58	// 1800eb58 <krhino_task_dyn_del+0x68>
        if (g_sched_lock[cpu_cur_get()] > 0u) {
1800eb46:	1162      	lrw      	r3, 0x20002944	// 1800ebcc <krhino_task_dyn_del+0xdc>
1800eb48:	8360      	ld.b      	r3, (r3, 0x0)
1800eb4a:	e9030007 	bez      	r3, 0x1800eb58	// 1800eb58 <krhino_task_dyn_del+0x68>
            RHINO_CRITICAL_EXIT();
1800eb4e:	6c1b      	mov      	r0, r6
1800eb50:	e3ff8f3d 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
            return RHINO_SCHED_DISABLE;
1800eb54:	35c8      	movi      	r5, 200
1800eb56:	07da      	br      	0x1800eb0a	// 1800eb0a <krhino_task_dyn_del+0x1a>
    if (task->task_state == K_DELETED) {
1800eb58:	9473      	ld.w      	r3, (r4, 0x4c)
1800eb5a:	3b47      	cmpnei      	r3, 7
1800eb5c:	0807      	bt      	0x1800eb6a	// 1800eb6a <krhino_task_dyn_del+0x7a>
        RHINO_CRITICAL_EXIT();
1800eb5e:	6c1b      	mov      	r0, r6
1800eb60:	e3ff8f35 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        return RHINO_INV_TASK_STATE;
1800eb64:	ea050133 	movi      	r5, 307
1800eb68:	07d1      	br      	0x1800eb0a	// 1800eb0a <krhino_task_dyn_del+0x1a>
    g_sched_lock[cpu_cur_get()]++;
1800eb6a:	10f9      	lrw      	r7, 0x20002944	// 1800ebcc <krhino_task_dyn_del+0xdc>
    res_free = (res_free_t *)(task->task_stack_base + 1u);
1800eb6c:	9461      	ld.w      	r3, (r4, 0x4)
    g_sched_lock[cpu_cur_get()]++;
1800eb6e:	8740      	ld.b      	r2, (r7, 0x0)
1800eb70:	2200      	addi      	r2, 1
1800eb72:	a740      	st.b      	r2, (r7, 0x0)
    klist_insert(&g_res_list, &res_free->res_list);
1800eb74:	e4230017 	addi      	r1, r3, 24
    element->prev = head->prev;
1800eb78:	1056      	lrw      	r2, 0x20002620	// 1800ebd0 <krhino_task_dyn_del+0xe0>
    element->next = head;
1800eb7a:	b346      	st.w      	r2, (r3, 0x18)
    element->prev = head->prev;
1800eb7c:	9201      	ld.w      	r0, (r2, 0x4)
1800eb7e:	b307      	st.w      	r0, (r3, 0x1c)
    head->prev->next = element;
1800eb80:	b020      	st.w      	r1, (r0, 0x0)
    head->prev       = element;
1800eb82:	b221      	st.w      	r1, (r2, 0x4)
    res_free->cnt = 1;
1800eb84:	3201      	movi      	r2, 1
    res_free->res[0] = task->task_stack_base;
1800eb86:	b362      	st.w      	r3, (r3, 0x8)
    res_free->cnt = 1;
1800eb88:	a344      	st.b      	r2, (r3, 0x4)
    ret = krhino_sem_give(&g_res_sem);
1800eb8a:	1013      	lrw      	r0, 0x20002574	// 1800ebd4 <krhino_task_dyn_del+0xe4>
1800eb8c:	e3fffbb8 	bsr      	0x1800e2fc	// 1800e2fc <krhino_sem_give>
    g_sched_lock[cpu_cur_get()]--;
1800eb90:	8760      	ld.b      	r3, (r7, 0x0)
1800eb92:	2b00      	subi      	r3, 1
    ret = krhino_sem_give(&g_res_sem);
1800eb94:	6d43      	mov      	r5, r0
    g_sched_lock[cpu_cur_get()]--;
1800eb96:	a760      	st.b      	r3, (r7, 0x0)
    if (ret != RHINO_SUCCESS) {
1800eb98:	e9000009 	bez      	r0, 0x1800ebaa	// 1800ebaa <krhino_task_dyn_del+0xba>
        RHINO_CRITICAL_EXIT();
1800eb9c:	6c1b      	mov      	r0, r6
1800eb9e:	e3ff8f16 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
        k_err_proc(RHINO_SYS_SP_ERR);
1800eba2:	3002      	movi      	r0, 2
1800eba4:	e3fff4aa 	bsr      	0x1800d4f8	// 1800d4f8 <k_err_proc>
        return ret;
1800eba8:	07b1      	br      	0x1800eb0a	// 1800eb0a <krhino_task_dyn_del+0x1a>
    task_mutex_free(task);
1800ebaa:	9406      	ld.w      	r0, (r4, 0x18)
1800ebac:	e3fffce4 	bsr      	0x1800e574	// 1800e574 <task_mutex_free.isra.2>
    switch (task->task_state) {
1800ebb0:	9473      	ld.w      	r3, (r4, 0x4c)
1800ebb2:	2b00      	subi      	r3, 1
1800ebb4:	3b05      	cmphsi      	r3, 6
1800ebb6:	0818      	bt      	0x1800ebe6	// 1800ebe6 <krhino_task_dyn_del+0xf6>
1800ebb8:	1048      	lrw      	r2, 0x180177a0	// 1800ebd8 <krhino_task_dyn_del+0xe8>
1800ebba:	d0620883 	ldr.w      	r3, (r2, r3 << 2)
1800ebbe:	3707      	movi      	r7, 7
1800ebc0:	780c      	jmp      	r3
1800ebc2:	0000      	.short	0x0000
1800ebc4:	20002841 	.long	0x20002841
1800ebc8:	20002828 	.long	0x20002828
1800ebcc:	20002944 	.long	0x20002944
1800ebd0:	20002620 	.long	0x20002620
1800ebd4:	20002574 	.long	0x20002574
1800ebd8:	180177a0 	.long	0x180177a0
            ready_list_rm(&g_ready_queue, task);
1800ebdc:	6c53      	mov      	r1, r4
1800ebde:	1011      	lrw      	r0, 0x20002364	// 1800ec20 <krhino_task_dyn_del+0x130>
1800ebe0:	e3fffa58 	bsr      	0x1800e090	// 1800e090 <ready_list_rm>
            task->task_state = K_DELETED;
1800ebe4:	b4f3      	st.w      	r7, (r4, 0x4c)
    element->prev->next = element->next;
1800ebe6:	9468      	ld.w      	r3, (r4, 0x20)
1800ebe8:	9447      	ld.w      	r2, (r4, 0x1c)
1800ebea:	b340      	st.w      	r2, (r3, 0x0)
    element->next->prev = element->prev;
1800ebec:	9447      	ld.w      	r2, (r4, 0x1c)
    RHINO_CRITICAL_EXIT_SCHED();
1800ebee:	6c1b      	mov      	r0, r6
1800ebf0:	b261      	st.w      	r3, (r2, 0x4)
1800ebf2:	e3ff8eec 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
1800ebf6:	e3fff9d5 	bsr      	0x1800dfa0	// 1800dfa0 <core_sched>
    return RHINO_SUCCESS;
1800ebfa:	0788      	br      	0x1800eb0a	// 1800eb0a <krhino_task_dyn_del+0x1a>
            tick_list_rm(task);
1800ebfc:	6c13      	mov      	r0, r4
1800ebfe:	e00000a9 	bsr      	0x1800ed50	// 1800ed50 <tick_list_rm>
1800ec02:	07f1      	br      	0x1800ebe4	// 1800ebe4 <krhino_task_dyn_del+0xf4>
            tick_list_rm(task);
1800ec04:	6c13      	mov      	r0, r4
1800ec06:	e00000a5 	bsr      	0x1800ed50	// 1800ed50 <tick_list_rm>
    element->prev->next = element->next;
1800ec0a:	9464      	ld.w      	r3, (r4, 0x10)
1800ec0c:	9443      	ld.w      	r2, (r4, 0xc)
1800ec0e:	b340      	st.w      	r2, (r3, 0x0)
    element->next->prev = element->prev;
1800ec10:	9443      	ld.w      	r2, (r4, 0xc)
            mutex_task_pri_reset(task);
1800ec12:	6c13      	mov      	r0, r4
1800ec14:	b261      	st.w      	r3, (r2, 0x4)
            task->task_state = K_DELETED;
1800ec16:	3307      	movi      	r3, 7
1800ec18:	b473      	st.w      	r3, (r4, 0x4c)
            mutex_task_pri_reset(task);
1800ec1a:	e3fff635 	bsr      	0x1800d884	// 1800d884 <mutex_task_pri_reset>
            break;
1800ec1e:	07e4      	br      	0x1800ebe6	// 1800ebe6 <krhino_task_dyn_del+0xf6>
1800ec20:	20002364 	.long	0x20002364

1800ec24 <krhino_task_deathbed>:
    return RHINO_SUCCESS;
}
#endif

void krhino_task_deathbed(void)
{
1800ec24:	14d0      	push      	r15
#if (RHINO_CONFIG_TASK_DEL > 0)
    ktask_t *task;

    task = krhino_cur_task_get();
1800ec26:	e3fffe4d 	bsr      	0x1800e8c0	// 1800e8c0 <krhino_cur_task_get>

    if (task->mm_alloc_flag == K_OBJ_DYN_ALLOC) {
1800ec2a:	d8600071 	ld.b      	r3, (r0, 0x71)
1800ec2e:	3b42      	cmpnei      	r3, 2
        /* del my self*/
#if (RHINO_CONFIG_KOBJ_DYN_ALLOC > 0)
        krhino_task_dyn_del(NULL);
1800ec30:	3000      	movi      	r0, 0
    if (task->mm_alloc_flag == K_OBJ_DYN_ALLOC) {
1800ec32:	0804      	bt      	0x1800ec3a	// 1800ec3a <krhino_task_deathbed+0x16>
        krhino_task_dyn_del(NULL);
1800ec34:	e3ffff5e 	bsr      	0x1800eaf0	// 1800eaf0 <krhino_task_dyn_del>

    while (1) {
        krhino_task_sleep(RHINO_CONFIG_TICKS_PER_SECOND * 10);
    }
#endif
}
1800ec38:	1490      	pop      	r15
        krhino_task_del(NULL);
1800ec3a:	e3fffeeb 	bsr      	0x1800ea10	// 1800ea10 <krhino_task_del>
}
1800ec3e:	07fd      	br      	0x1800ec38	// 1800ec38 <krhino_task_deathbed+0x14>

1800ec40 <krhino_task_dump>:

extern void hgprintf(const char *fmt, ...);
void krhino_task_dump(ktask_t *task, void* stack)
{
1800ec40:	14d5      	push      	r4-r8, r15
1800ec42:	6d43      	mov      	r5, r0
1800ec44:	6d07      	mov      	r4, r1
    int i = 0;
    uint32_t *p = (stack ? stack : task->task_stack);
1800ec46:	e9210003 	bnez      	r1, 0x1800ec4c	// 1800ec4c <krhino_task_dump+0xc>
1800ec4a:	9080      	ld.w      	r4, (r0, 0x0)
    uint32_t *addr = 0;
    hgprintf("Task:%s\r\n", task->task_name);
1800ec4c:	9532      	ld.w      	r1, (r5, 0x48)
    int i = 0;
1800ec4e:	3600      	movi      	r6, 0
    hgprintf("Task:%s\r\n", task->task_name);
1800ec50:	1019      	lrw      	r0, 0x180177b8	// 1800ecb4 <krhino_task_dump+0x74>
1800ec52:	e3ffef39 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    hgprintf("    task_state: %d\r\n", task->task_state);
1800ec56:	9533      	ld.w      	r1, (r5, 0x4c)
1800ec58:	1018      	lrw      	r0, 0x180177c2	// 1800ecb8 <krhino_task_dump+0x78>
1800ec5a:	e3ffef35 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    hgprintf("    stack_size: %d\r\n", task->stack_size * 4);
1800ec5e:	9522      	ld.w      	r1, (r5, 0x8)
1800ec60:	4122      	lsli      	r1, r1, 2
1800ec62:	1017      	lrw      	r0, 0x180177d7	// 1800ecbc <krhino_task_dump+0x7c>
1800ec64:	e3ffef30 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    hgprintf("    task_stack: 0x%08x,0x%08x,0x%08x\r\n", (uint32_t)task->task_stack_base, (uint32_t)p, (uint32_t)(task->task_stack_base + task->stack_size));
1800ec68:	9562      	ld.w      	r3, (r5, 0x8)
1800ec6a:	9521      	ld.w      	r1, (r5, 0x4)
1800ec6c:	4362      	lsli      	r3, r3, 2
1800ec6e:	60c4      	addu      	r3, r1
1800ec70:	6c93      	mov      	r2, r4
1800ec72:	1014      	lrw      	r0, 0x180177ec	// 1800ecc0 <krhino_task_dump+0x80>
1800ec74:	e3ffef28 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    hgprintf("    stack dump:\r\n    ");
1800ec78:	1013      	lrw      	r0, 0x18017813	// 1800ecc4 <krhino_task_dump+0x84>
1800ec7a:	e3ffef25 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    for(addr=p; addr<task->task_stack_base+task->stack_size; addr++){
        hgprintf("0x%08x,", *addr);
1800ec7e:	10f3      	lrw      	r7, 0x18017829	// 1800ecc8 <krhino_task_dump+0x88>
        if(++i == 4){ 
            hgprintf("\r\n    ");
1800ec80:	ea880013 	lrw      	r8, 0x18017822	// 1800eccc <krhino_task_dump+0x8c>
    for(addr=p; addr<task->task_stack_base+task->stack_size; addr++){
1800ec84:	9562      	ld.w      	r3, (r5, 0x8)
1800ec86:	4342      	lsli      	r2, r3, 2
1800ec88:	9561      	ld.w      	r3, (r5, 0x4)
1800ec8a:	60c8      	addu      	r3, r2
1800ec8c:	64d0      	cmphs      	r4, r3
1800ec8e:	0c05      	bf      	0x1800ec98	// 1800ec98 <krhino_task_dump+0x58>
            i = 0;
        }
    }
    hgprintf("\r\n");
1800ec90:	1010      	lrw      	r0, 0x18016fe6	// 1800ecd0 <krhino_task_dump+0x90>
1800ec92:	e3ffef19 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
}
1800ec96:	1495      	pop      	r4-r8, r15
        hgprintf("0x%08x,", *addr);
1800ec98:	9420      	ld.w      	r1, (r4, 0x0)
1800ec9a:	6c1f      	mov      	r0, r7
        if(++i == 4){ 
1800ec9c:	2600      	addi      	r6, 1
        hgprintf("0x%08x,", *addr);
1800ec9e:	e3ffef13 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
        if(++i == 4){ 
1800eca2:	3e44      	cmpnei      	r6, 4
1800eca4:	0805      	bt      	0x1800ecae	// 1800ecae <krhino_task_dump+0x6e>
            hgprintf("\r\n    ");
1800eca6:	6c23      	mov      	r0, r8
1800eca8:	e3ffef0e 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
            i = 0;
1800ecac:	3600      	movi      	r6, 0
    for(addr=p; addr<task->task_stack_base+task->stack_size; addr++){
1800ecae:	2403      	addi      	r4, 4
1800ecb0:	07ea      	br      	0x1800ec84	// 1800ec84 <krhino_task_dump+0x44>
1800ecb2:	0000      	.short	0x0000
1800ecb4:	180177b8 	.long	0x180177b8
1800ecb8:	180177c2 	.long	0x180177c2
1800ecbc:	180177d7 	.long	0x180177d7
1800ecc0:	180177ec 	.long	0x180177ec
1800ecc4:	18017813 	.long	0x18017813
1800ecc8:	18017829 	.long	0x18017829
1800eccc:	18017822 	.long	0x18017822
1800ecd0:	18016fe6 	.long	0x18016fe6

1800ecd4 <tick_list_init>:
    list_head->next = list_head;
1800ecd4:	1062      	lrw      	r3, 0x20002abc	// 1800ecdc <tick_list_init+0x8>
    list_head->prev = list_head;
1800ecd6:	b361      	st.w      	r3, (r3, 0x4)
    list_head->next = list_head;
1800ecd8:	b360      	st.w      	r3, (r3, 0x0)
#include <k_api.h>

__init void tick_list_init(void)
{
   klist_init(&g_tick_head);
}
1800ecda:	783c      	jmp      	r15
1800ecdc:	20002abc 	.long	0x20002abc

1800ece0 <tick_list_insert>:

    klist_insert(q, &task->tick_list);
}

void tick_list_insert(ktask_t *task, tick_t time)
{
1800ece0:	14c4      	push      	r4-r7
1800ece2:	6f07      	mov      	r12, r1
1800ece4:	6f4b      	mov      	r13, r2
    klist_t *tick_head_ptr;

    if (time > 0u) {
1800ece6:	c5a12423 	or      	r3, r1, r13
1800ecea:	e9030021 	bez      	r3, 0x1800ed2c	// 1800ed2c <tick_list_insert+0x4c>
        task->tick_match  = g_tick_count + time;
1800ecee:	1077      	lrw      	r3, 0x20002830	// 1800ed48 <tick_list_insert+0x68>
        task->tick_remain = time;
1800ecf0:	dd80200d 	st.w      	r12, (r0, 0x34)
1800ecf4:	dda0200e 	st.w      	r13, (r0, 0x38)
        task->tick_match  = g_tick_count + time;
1800ecf8:	9380      	ld.w      	r4, (r3, 0x0)
1800ecfa:	93a1      	ld.w      	r5, (r3, 0x4)
1800ecfc:	6489      	cmplt      	r2, r2
1800ecfe:	c48c0042 	addc      	r2, r12, r4
1800ed02:	c4ad0043 	addc      	r3, r13, r5
1800ed06:	b04b      	st.w      	r2, (r0, 0x2c)
1800ed08:	b06c      	st.w      	r3, (r0, 0x30)
    for (q = list_start->next; q != list_end; q = q->next) {
1800ed0a:	1051      	lrw      	r2, 0x20002abc	// 1800ed4c <tick_list_insert+0x6c>
1800ed0c:	9260      	ld.w      	r3, (r2, 0x0)
1800ed0e:	648e      	cmpne      	r3, r2
1800ed10:	080f      	bt      	0x1800ed2e	// 1800ed2e <tick_list_insert+0x4e>
    element->prev = head->prev;
1800ed12:	d9832001 	ld.w      	r12, (r3, 0x4)
1800ed16:	dd80200a 	st.w      	r12, (r0, 0x28)
    head->prev->next = element;
1800ed1a:	d9832001 	ld.w      	r12, (r3, 0x4)
    klist_insert(q, &task->tick_list);
1800ed1e:	e4200023 	addi      	r1, r0, 36
    element->next = head;
1800ed22:	b069      	st.w      	r3, (r0, 0x24)
    head->prev->next = element;
1800ed24:	dc2c2000 	st.w      	r1, (r12, 0x0)
    head->prev       = element;
1800ed28:	b321      	st.w      	r1, (r3, 0x4)

        tick_head_ptr = &g_tick_head;
        tick_list_pri_insert(tick_head_ptr, task);
        task->tick_head = tick_head_ptr;
1800ed2a:	b04f      	st.w      	r2, (r0, 0x3c)
    }
}
1800ed2c:	1484      	pop      	r4-r7
        if ((task_iter_temp->tick_match - g_tick_count) > val) {
1800ed2e:	93c2      	ld.w      	r6, (r3, 0x8)
1800ed30:	93e3      	ld.w      	r7, (r3, 0xc)
1800ed32:	6598      	cmphs      	r6, r6
1800ed34:	6193      	subc      	r6, r4
1800ed36:	61d7      	subc      	r7, r5
1800ed38:	65f4      	cmphs      	r13, r7
1800ed3a:	0fec      	bf      	0x1800ed12	// 1800ed12 <tick_list_insert+0x32>
1800ed3c:	675e      	cmpne      	r7, r13
1800ed3e:	0803      	bt      	0x1800ed44	// 1800ed44 <tick_list_insert+0x64>
1800ed40:	65b0      	cmphs      	r12, r6
1800ed42:	0fe8      	bf      	0x1800ed12	// 1800ed12 <tick_list_insert+0x32>
    for (q = list_start->next; q != list_end; q = q->next) {
1800ed44:	9360      	ld.w      	r3, (r3, 0x0)
1800ed46:	07e4      	br      	0x1800ed0e	// 1800ed0e <tick_list_insert+0x2e>
1800ed48:	20002830 	.long	0x20002830
1800ed4c:	20002abc 	.long	0x20002abc

1800ed50 <tick_list_rm>:

void tick_list_rm(ktask_t *task)
{
    klist_t *tick_head_ptr = task->tick_head;

    if (tick_head_ptr != NULL) {
1800ed50:	906f      	ld.w      	r3, (r0, 0x3c)
1800ed52:	e9030009 	bez      	r3, 0x1800ed64	// 1800ed64 <tick_list_rm+0x14>
    element->prev->next = element->next;
1800ed56:	906a      	ld.w      	r3, (r0, 0x28)
1800ed58:	9049      	ld.w      	r2, (r0, 0x24)
1800ed5a:	b340      	st.w      	r2, (r3, 0x0)
    element->next->prev = element->prev;
1800ed5c:	9049      	ld.w      	r2, (r0, 0x24)
1800ed5e:	b261      	st.w      	r3, (r2, 0x4)
        klist_rm(&task->tick_list);
        task->tick_head = NULL;
1800ed60:	3300      	movi      	r3, 0
1800ed62:	b06f      	st.w      	r3, (r0, 0x3c)
    }
}
1800ed64:	783c      	jmp      	r15
	...

1800ed68 <tick_list_update>:

void tick_list_update(tick_i_t ticks)
{
1800ed68:	14d8      	push      	r4-r11, r15
1800ed6a:	1421      	subi      	r14, r14, 4
    klist_t *iter_temp;
    tick_i_t delta;

    RHINO_CRITICAL_ENTER();

    g_tick_count += ticks;
1800ed6c:	1282      	lrw      	r4, 0x20002830	// 1800ee74 <tick_list_update+0x10c>
{
1800ed6e:	6e03      	mov      	r8, r0
1800ed70:	6e47      	mov      	r9, r1
    RHINO_CRITICAL_ENTER();
1800ed72:	e3ff8e27 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
1800ed76:	6dc3      	mov      	r7, r0
    g_tick_count += ticks;
1800ed78:	9400      	ld.w      	r0, (r4, 0x0)
1800ed7a:	9421      	ld.w      	r1, (r4, 0x4)
1800ed7c:	6401      	cmplt      	r0, r0
1800ed7e:	6021      	addc      	r0, r8
1800ed80:	6065      	addc      	r1, r9

    tick_head_ptr = &g_tick_head;
    iter          =  tick_head_ptr->next;
1800ed82:	ea89003e 	lrw      	r9, 0x20002abc	// 1800ee78 <tick_list_update+0x110>
                        break;
                    case K_PEND_SUSPENDED:
                        tick_list_rm(p_tcb);
                        /* remove task on the block list because task is timeout */
                        klist_rm(&p_tcb->task_list);
                        p_tcb->blk_state  = BLK_TIMEOUT;
1800ed86:	ea080002 	movi      	r8, 2
    g_tick_count += ticks;
1800ed8a:	b400      	st.w      	r0, (r4, 0x0)
1800ed8c:	b421      	st.w      	r1, (r4, 0x4)
    iter          =  tick_head_ptr->next;
1800ed8e:	d9692000 	ld.w      	r11, (r9, 0x0)
                        p_tcb->task_state = K_SUSPENDED;
1800ed92:	3503      	movi      	r5, 3
                        ready_list_add(&g_ready_queue, p_tcb);
1800ed94:	11da      	lrw      	r6, 0x20002364	// 1800ee7c <tick_list_update+0x114>
        if (iter != tick_head_ptr) {
1800ed96:	666e      	cmpne      	r11, r9
1800ed98:	0c69      	bf      	0x1800ee6a	// 1800ee6a <tick_list_update+0x102>
            iter_temp = iter->next;
1800ed9a:	d94b2000 	ld.w      	r10, (r11, 0x0)
            p_tcb     = krhino_list_entry(iter, ktask_t, tick_list);
1800ed9e:	e56b1023 	subi      	r11, r11, 36
            delta = (tick_i_t)p_tcb->tick_match - (tick_i_t)g_tick_count;
1800eda2:	9400      	ld.w      	r0, (r4, 0x0)
1800eda4:	9421      	ld.w      	r1, (r4, 0x4)
1800eda6:	d84b200b 	ld.w      	r2, (r11, 0x2c)
1800edaa:	d86b200c 	ld.w      	r3, (r11, 0x30)
1800edae:	6488      	cmphs      	r2, r2
1800edb0:	6083      	subc      	r2, r0
1800edb2:	60c7      	subc      	r3, r1
            if (delta <= 0) {
1800edb4:	e943005b 	bhz      	r3, 0x1800ee6a	// 1800ee6a <tick_list_update+0x102>
1800edb8:	e9230004 	bnez      	r3, 0x1800edc0	// 1800edc0 <tick_list_update+0x58>
1800edbc:	e9220057 	bnez      	r2, 0x1800ee6a	// 1800ee6a <tick_list_update+0x102>
                switch (p_tcb->task_state) {
1800edc0:	d86b2013 	ld.w      	r3, (r11, 0x4c)
1800edc4:	3b44      	cmpnei      	r3, 4
1800edc6:	0c42      	bf      	0x1800ee4a	// 1800ee4a <tick_list_update+0xe2>
1800edc8:	3b04      	cmphsi      	r3, 5
1800edca:	0807      	bt      	0x1800edd8	// 1800edd8 <tick_list_update+0x70>
1800edcc:	3b42      	cmpnei      	r3, 2
1800edce:	0c21      	bf      	0x1800ee10	// 1800ee10 <tick_list_update+0xa8>
                        p_tcb->task_state = K_SUSPENDED;
                        p_tcb->blk_state  = BLK_FINISH;
                        tick_list_rm(p_tcb);
                        break;
                    default:
                        k_err_proc(RHINO_SYS_FATAL_ERR);
1800edd0:	3001      	movi      	r0, 1
1800edd2:	e3fff393 	bsr      	0x1800d4f8	// 1800d4f8 <k_err_proc>
                        break;
1800edd6:	041b      	br      	0x1800ee0c	// 1800ee0c <tick_list_update+0xa4>
                switch (p_tcb->task_state) {
1800edd8:	3b45      	cmpnei      	r3, 5
1800edda:	0c0c      	bf      	0x1800edf2	// 1800edf2 <tick_list_update+0x8a>
1800eddc:	3b46      	cmpnei      	r3, 6
1800edde:	0bf9      	bt      	0x1800edd0	// 1800edd0 <tick_list_update+0x68>
                        p_tcb->blk_state  = BLK_FINISH;
1800ede0:	3300      	movi      	r3, 0
                        p_tcb->task_state = K_SUSPENDED;
1800ede2:	dcab2013 	st.w      	r5, (r11, 0x4c)
                        p_tcb->blk_state  = BLK_FINISH;
1800ede6:	dc6b2014 	st.w      	r3, (r11, 0x50)
                        tick_list_rm(p_tcb);
1800edea:	6c2f      	mov      	r0, r11
1800edec:	e3ffffb2 	bsr      	0x1800ed50	// 1800ed50 <tick_list_rm>
                        break;
1800edf0:	040e      	br      	0x1800ee0c	// 1800ee0c <tick_list_update+0xa4>
                        p_tcb->blk_state  = BLK_FINISH;
1800edf2:	3300      	movi      	r3, 0
1800edf4:	dc6b2014 	st.w      	r3, (r11, 0x50)
                        p_tcb->task_state = K_RDY;
1800edf8:	3301      	movi      	r3, 1
                        tick_list_rm(p_tcb);
1800edfa:	6c2f      	mov      	r0, r11
                        p_tcb->task_state = K_RDY;
1800edfc:	dc6b2013 	st.w      	r3, (r11, 0x4c)
                        tick_list_rm(p_tcb);
1800ee00:	e3ffffa8 	bsr      	0x1800ed50	// 1800ed50 <tick_list_rm>
                        ready_list_add(&g_ready_queue, p_tcb);
1800ee04:	6c6f      	mov      	r1, r11
1800ee06:	6c1b      	mov      	r0, r6
1800ee08:	e3fff932 	bsr      	0x1800e06c	// 1800e06c <ready_list_add>
{
1800ee0c:	6eeb      	mov      	r11, r10
1800ee0e:	07c4      	br      	0x1800ed96	// 1800ed96 <tick_list_update+0x2e>
                        tick_list_rm(p_tcb);
1800ee10:	6c2f      	mov      	r0, r11
1800ee12:	b860      	st.w      	r3, (r14, 0x0)
1800ee14:	e3ffff9e 	bsr      	0x1800ed50	// 1800ed50 <tick_list_rm>
    element->prev->next = element->next;
1800ee18:	d84b2004 	ld.w      	r2, (r11, 0x10)
1800ee1c:	d86b2003 	ld.w      	r3, (r11, 0xc)
1800ee20:	b260      	st.w      	r3, (r2, 0x0)
    element->next->prev = element->prev;
1800ee22:	d82b2003 	ld.w      	r1, (r11, 0xc)
                        ready_list_add(&g_ready_queue, p_tcb);
1800ee26:	6c1b      	mov      	r0, r6
1800ee28:	b141      	st.w      	r2, (r1, 0x4)
1800ee2a:	6c6f      	mov      	r1, r11
1800ee2c:	e3fff920 	bsr      	0x1800e06c	// 1800e06c <ready_list_add>
                        p_tcb->blk_state  = BLK_TIMEOUT;
1800ee30:	9860      	ld.w      	r3, (r14, 0x0)
1800ee32:	dc6b2014 	st.w      	r3, (r11, 0x50)
                        p_tcb->task_state = K_RDY;
1800ee36:	3301      	movi      	r3, 1
1800ee38:	dc6b2013 	st.w      	r3, (r11, 0x4c)
                        mutex_task_pri_reset(p_tcb);
1800ee3c:	6c2f      	mov      	r0, r11
1800ee3e:	e3fff523 	bsr      	0x1800d884	// 1800d884 <mutex_task_pri_reset>
                        p_tcb->blk_obj    = NULL;
1800ee42:	3300      	movi      	r3, 0
1800ee44:	dc6b2015 	st.w      	r3, (r11, 0x54)
                        break;
1800ee48:	07e2      	br      	0x1800ee0c	// 1800ee0c <tick_list_update+0xa4>
                        tick_list_rm(p_tcb);
1800ee4a:	6c2f      	mov      	r0, r11
1800ee4c:	e3ffff82 	bsr      	0x1800ed50	// 1800ed50 <tick_list_rm>
    element->prev->next = element->next;
1800ee50:	d86b2004 	ld.w      	r3, (r11, 0x10)
1800ee54:	d84b2003 	ld.w      	r2, (r11, 0xc)
1800ee58:	b340      	st.w      	r2, (r3, 0x0)
    element->next->prev = element->prev;
1800ee5a:	d84b2003 	ld.w      	r2, (r11, 0xc)
1800ee5e:	b261      	st.w      	r3, (r2, 0x4)
                        p_tcb->blk_state  = BLK_TIMEOUT;
1800ee60:	dd0b2014 	st.w      	r8, (r11, 0x50)
                        p_tcb->task_state = K_SUSPENDED;
1800ee64:	dcab2013 	st.w      	r5, (r11, 0x4c)
1800ee68:	07ea      	br      	0x1800ee3c	// 1800ee3c <tick_list_update+0xd4>
        } else {
            break;
        }
    }

    RHINO_CRITICAL_EXIT();
1800ee6a:	6c1f      	mov      	r0, r7
1800ee6c:	e3ff8daf 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>
}
1800ee70:	1401      	addi      	r14, r14, 4
1800ee72:	1498      	pop      	r4-r11, r15
1800ee74:	20002830 	.long	0x20002830
1800ee78:	20002abc 	.long	0x20002abc
1800ee7c:	20002364 	.long	0x20002364

1800ee80 <krhino_tick_proc>:
#include <k_api.h>

void mcu_watchdog_feed(void);

void krhino_tick_proc(void)
{
1800ee80:	14d0      	push      	r15

#if (RHINO_CONFIG_USER_HOOK > 0)
    krhino_tick_hook();
#endif

    tick_list_update(1);
1800ee82:	3001      	movi      	r0, 1
1800ee84:	3100      	movi      	r1, 0
1800ee86:	e3ffff71 	bsr      	0x1800ed68	// 1800ed68 <tick_list_update>

#if (RHINO_CONFIG_SCHED_RR > 0)
    time_slice_update();
1800ee8a:	e3fff96b 	bsr      	0x1800e160	// 1800e160 <time_slice_update>
#endif

    /**
     * if you want feed dog in your project, then you close this 
     */
    mcu_watchdog_feed();
1800ee8e:	e0001283 	bsr      	0x18011394	// 18011394 <mcu_watchdog_feed>
}
1800ee92:	1490      	pop      	r15

1800ee94 <krhino_sys_tick_get>:

sys_time_t krhino_sys_tick_get(void)
{
1800ee94:	14d2      	push      	r4-r5, r15
    CPSR_ALLOC();

    sys_time_t tick_tmp;

    RHINO_CPU_INTRPT_DISABLE();
1800ee96:	e3ff8d95 	bsr      	0x180009c0	// 180009c0 <cpu_intrpt_save>
    tick_tmp = g_tick_count;
1800ee9a:	1065      	lrw      	r3, 0x20002830	// 1800eeac <krhino_sys_tick_get+0x18>
1800ee9c:	9380      	ld.w      	r4, (r3, 0x0)
1800ee9e:	93a1      	ld.w      	r5, (r3, 0x4)
    RHINO_CPU_INTRPT_ENABLE();
1800eea0:	e3ff8d95 	bsr      	0x180009ca	// 180009ca <cpu_intrpt_restore>

    return tick_tmp;
}
1800eea4:	6c13      	mov      	r0, r4
1800eea6:	6c57      	mov      	r1, r5
1800eea8:	1492      	pop      	r4-r5, r15
1800eeaa:	0000      	.short	0x0000
1800eeac:	20002830 	.long	0x20002830

1800eeb0 <timer_list_rm>:
static void timer_list_rm(ktimer_t *timer)
{
    klist_t *head;

    head = timer->to_head;
    if (head != NULL) {
1800eeb0:	9062      	ld.w      	r3, (r0, 0x8)
1800eeb2:	e9030009 	bez      	r3, 0x1800eec4	// 1800eec4 <timer_list_rm+0x14>
    element->prev->next = element->next;
1800eeb6:	9061      	ld.w      	r3, (r0, 0x4)
1800eeb8:	9040      	ld.w      	r2, (r0, 0x0)
1800eeba:	b340      	st.w      	r2, (r3, 0x0)
    element->next->prev = element->prev;
1800eebc:	9040      	ld.w      	r2, (r0, 0x0)
1800eebe:	b261      	st.w      	r3, (r2, 0x4)
        klist_rm(&timer->timer_list);
        timer->to_head = NULL;
1800eec0:	3300      	movi      	r3, 0
1800eec2:	b062      	st.w      	r3, (r0, 0x8)
    }
}
1800eec4:	783c      	jmp      	r15
	...

1800eec8 <timer_list_pri_insert.constprop.3>:
static void timer_list_pri_insert(klist_t *head, ktimer_t *timer)
1800eec8:	14c3      	push      	r4-r6
    for (q = start->next; q != end; q = q->next) {
1800eeca:	1052      	lrw      	r2, 0x2000256c	// 1800ef10 <timer_list_pri_insert.constprop.3+0x48>
        if ((task_iter_temp->match - g_timer_count) > val) {
1800eecc:	ea8c0012 	lrw      	r12, 0x20002948	// 1800ef14 <timer_list_pri_insert.constprop.3+0x4c>
    for (q = start->next; q != end; q = q->next) {
1800eed0:	9260      	ld.w      	r3, (r2, 0x0)
    val = timer->remain;
1800eed2:	90c8      	ld.w      	r6, (r0, 0x20)
1800eed4:	9029      	ld.w      	r1, (r0, 0x24)
        if ((task_iter_temp->match - g_timer_count) > val) {
1800eed6:	d88c2000 	ld.w      	r4, (r12, 0x0)
1800eeda:	d8ac2001 	ld.w      	r5, (r12, 0x4)
    for (q = start->next; q != end; q = q->next) {
1800eede:	648e      	cmpne      	r3, r2
1800eee0:	0808      	bt      	0x1800eef0	// 1800eef0 <timer_list_pri_insert.constprop.3+0x28>
    element->prev = head->prev;
1800eee2:	9341      	ld.w      	r2, (r3, 0x4)
1800eee4:	b041      	st.w      	r2, (r0, 0x4)
    head->prev->next = element;
1800eee6:	9341      	ld.w      	r2, (r3, 0x4)
    element->next = head;
1800eee8:	b060      	st.w      	r3, (r0, 0x0)
    head->prev->next = element;
1800eeea:	b200      	st.w      	r0, (r2, 0x0)
    head->prev       = element;
1800eeec:	b301      	st.w      	r0, (r3, 0x4)
}
1800eeee:	1483      	pop      	r4-r6
        if ((task_iter_temp->match - g_timer_count) > val) {
1800eef0:	d9832006 	ld.w      	r12, (r3, 0x18)
1800eef4:	d9a32007 	ld.w      	r13, (r3, 0x1c)
1800eef8:	6730      	cmphs      	r12, r12
1800eefa:	6313      	subc      	r12, r4
1800eefc:	6357      	subc      	r13, r5
1800eefe:	6744      	cmphs      	r1, r13
1800ef00:	0ff1      	bf      	0x1800eee2	// 1800eee2 <timer_list_pri_insert.constprop.3+0x1a>
1800ef02:	6476      	cmpne      	r13, r1
1800ef04:	0803      	bt      	0x1800ef0a	// 1800ef0a <timer_list_pri_insert.constprop.3+0x42>
1800ef06:	6718      	cmphs      	r6, r12
1800ef08:	0fed      	bf      	0x1800eee2	// 1800eee2 <timer_list_pri_insert.constprop.3+0x1a>
    for (q = start->next; q != end; q = q->next) {
1800ef0a:	9360      	ld.w      	r3, (r3, 0x0)
1800ef0c:	07e9      	br      	0x1800eede	// 1800eede <timer_list_pri_insert.constprop.3+0x16>
1800ef0e:	0000      	.short	0x0000
1800ef10:	2000256c 	.long	0x2000256c
1800ef14:	20002948 	.long	0x20002948

1800ef18 <cmd_proc>:
        }
    }
}

static void cmd_proc(k_timer_queue_cb *cb, uint8_t cmd)
{
1800ef18:	14d2      	push      	r4-r5, r15
    ktimer_t *timer;
    timer = cb->timer;

    switch (cmd) {
1800ef1a:	2900      	subi      	r1, 1
1800ef1c:	7444      	zextb      	r1, r1
1800ef1e:	3906      	cmphsi      	r1, 7
{
1800ef20:	6d43      	mov      	r5, r0
    timer = cb->timer;
1800ef22:	9080      	ld.w      	r4, (r0, 0x0)
    switch (cmd) {
1800ef24:	0872      	bt      	0x1800f008	// 1800f008 <cmd_proc+0xf0>
1800ef26:	1063      	lrw      	r3, 0x18017834	// 1800ef30 <cmd_proc+0x18>
1800ef28:	d0230883 	ldr.w      	r3, (r3, r1 << 2)
1800ef2c:	780c      	jmp      	r3
1800ef2e:	0000      	.short	0x0000
1800ef30:	18017834 	.long	0x18017834
        case TIMER_CMD_START:
            if (timer->obj_type != RHINO_TIMER_OBJ_TYPE) {  
1800ef34:	946f      	ld.w      	r3, (r4, 0x3c)
1800ef36:	3b45      	cmpnei      	r3, 5
1800ef38:	0819      	bt      	0x1800ef6a	// 1800ef6a <cmd_proc+0x52>
                break;
            }

            if (timer->timer_state == TIMER_ACTIVE) {      
1800ef3a:	d8640040 	ld.b      	r3, (r4, 0x40)
1800ef3e:	3b41      	cmpnei      	r3, 1
1800ef40:	0c15      	bf      	0x1800ef6a	// 1800ef6a <cmd_proc+0x52>
                break;
            }

            timer->match   =  g_timer_count + timer->init_count;
1800ef42:	1174      	lrw      	r3, 0x20002948	// 1800f010 <cmd_proc+0xf8>
1800ef44:	940a      	ld.w      	r0, (r4, 0x28)
1800ef46:	942b      	ld.w      	r1, (r4, 0x2c)
1800ef48:	9340      	ld.w      	r2, (r3, 0x0)
1800ef4a:	9361      	ld.w      	r3, (r3, 0x4)
1800ef4c:	6489      	cmplt      	r2, r2
1800ef4e:	6081      	addc      	r2, r0
1800ef50:	60c5      	addc      	r3, r1
1800ef52:	b446      	st.w      	r2, (r4, 0x18)
1800ef54:	b467      	st.w      	r3, (r4, 0x1c)
            /* sort by remain time */
            timer->remain  =  timer->init_count;
1800ef56:	b408      	st.w      	r0, (r4, 0x20)
1800ef58:	b429      	st.w      	r1, (r4, 0x24)
            /* used by timer delete */
            timer->to_head = &g_timer_head;
            timer_list_pri_insert(&g_timer_head, timer);
1800ef5a:	6c13      	mov      	r0, r4
            timer->to_head = &g_timer_head;
1800ef5c:	116e      	lrw      	r3, 0x2000256c	// 1800f014 <cmd_proc+0xfc>
1800ef5e:	b462      	st.w      	r3, (r4, 0x8)
            timer_list_pri_insert(&g_timer_head, timer);
1800ef60:	e3ffffb4 	bsr      	0x1800eec8	// 1800eec8 <timer_list_pri_insert.constprop.3>
            timer->timer_state = TIMER_ACTIVE; 
1800ef64:	3301      	movi      	r3, 1

            if (timer->timer_state == TIMER_DEACTIVE) {
                break;
            }
            timer_list_rm(timer);
            timer->timer_state = TIMER_DEACTIVE;
1800ef66:	dc640040 	st.b      	r3, (r4, 0x40)
        default:
            k_err_proc(RHINO_SYS_FATAL_ERR);
            break;
    }   

}
1800ef6a:	1492      	pop      	r4-r5, r15
            if (timer->obj_type != RHINO_TIMER_OBJ_TYPE) {
1800ef6c:	946f      	ld.w      	r3, (r4, 0x3c)
1800ef6e:	3b45      	cmpnei      	r3, 5
1800ef70:	0bfd      	bt      	0x1800ef6a	// 1800ef6a <cmd_proc+0x52>
            if (timer->timer_state == TIMER_DEACTIVE) {
1800ef72:	d8640040 	ld.b      	r3, (r4, 0x40)
1800ef76:	e903fffa 	bez      	r3, 0x1800ef6a	// 1800ef6a <cmd_proc+0x52>
            timer_list_rm(timer);
1800ef7a:	6c13      	mov      	r0, r4
1800ef7c:	e3ffff9a 	bsr      	0x1800eeb0	// 1800eeb0 <timer_list_rm>
            timer->timer_state = TIMER_DEACTIVE;
1800ef80:	3300      	movi      	r3, 0
1800ef82:	07f2      	br      	0x1800ef66	// 1800ef66 <cmd_proc+0x4e>
            if (cb->first == 0u) {
1800ef84:	9062      	ld.w      	r3, (r0, 0x8)
1800ef86:	9043      	ld.w      	r2, (r0, 0xc)
1800ef88:	6cc8      	or      	r3, r2
1800ef8a:	e903fff0 	bez      	r3, 0x1800ef6a	// 1800ef6a <cmd_proc+0x52>
            if (timer->obj_type != RHINO_TIMER_OBJ_TYPE) {
1800ef8e:	946f      	ld.w      	r3, (r4, 0x3c)
1800ef90:	3b45      	cmpnei      	r3, 5
1800ef92:	0bec      	bt      	0x1800ef6a	// 1800ef6a <cmd_proc+0x52>
            if (timer->timer_state != TIMER_DEACTIVE) {
1800ef94:	d8640040 	ld.b      	r3, (r4, 0x40)
1800ef98:	e9030008 	bez      	r3, 0x1800efa8	// 1800efa8 <cmd_proc+0x90>
                timer_list_rm(timer);
1800ef9c:	6c13      	mov      	r0, r4
1800ef9e:	e3ffff89 	bsr      	0x1800eeb0	// 1800eeb0 <timer_list_rm>
                timer->timer_state = TIMER_DEACTIVE;
1800efa2:	3300      	movi      	r3, 0
1800efa4:	dc640040 	st.b      	r3, (r4, 0x40)
            timer->init_count  = cb->first;
1800efa8:	9542      	ld.w      	r2, (r5, 0x8)
1800efaa:	9563      	ld.w      	r3, (r5, 0xc)
1800efac:	b44a      	st.w      	r2, (r4, 0x28)
1800efae:	b46b      	st.w      	r3, (r4, 0x2c)
            timer->round_ticks = cb->u.round;
1800efb0:	9544      	ld.w      	r2, (r5, 0x10)
1800efb2:	9565      	ld.w      	r3, (r5, 0x14)
1800efb4:	b44c      	st.w      	r2, (r4, 0x30)
1800efb6:	b46d      	st.w      	r3, (r4, 0x34)
            break;
1800efb8:	07d9      	br      	0x1800ef6a	// 1800ef6a <cmd_proc+0x52>
            if (timer->obj_type != RHINO_TIMER_OBJ_TYPE) {
1800efba:	946f      	ld.w      	r3, (r4, 0x3c)
1800efbc:	3b45      	cmpnei      	r3, 5
1800efbe:	0bd6      	bt      	0x1800ef6a	// 1800ef6a <cmd_proc+0x52>
            if (timer->timer_state != TIMER_DEACTIVE) {
1800efc0:	d8640040 	ld.b      	r3, (r4, 0x40)
1800efc4:	e923ffd3 	bnez      	r3, 0x1800ef6a	// 1800ef6a <cmd_proc+0x52>
            timer->timer_cb_arg = cb->u.arg;
1800efc8:	9064      	ld.w      	r3, (r0, 0x10)
1800efca:	b465      	st.w      	r3, (r4, 0x14)
            break;
1800efcc:	07cf      	br      	0x1800ef6a	// 1800ef6a <cmd_proc+0x52>
            if (timer->obj_type != RHINO_TIMER_OBJ_TYPE) {
1800efce:	946f      	ld.w      	r3, (r4, 0x3c)
1800efd0:	3b45      	cmpnei      	r3, 5
1800efd2:	0bcc      	bt      	0x1800ef6a	// 1800ef6a <cmd_proc+0x52>
            if (timer->timer_state != TIMER_DEACTIVE) {
1800efd4:	d8640040 	ld.b      	r3, (r4, 0x40)
1800efd8:	e923ffc9 	bnez      	r3, 0x1800ef6a	// 1800ef6a <cmd_proc+0x52>
            if (timer->mm_alloc_flag != K_OBJ_STATIC_ALLOC) {
1800efdc:	d8440041 	ld.b      	r2, (r4, 0x41)
1800efe0:	3a41      	cmpnei      	r2, 1
1800efe2:	0bc4      	bt      	0x1800ef6a	// 1800ef6a <cmd_proc+0x52>
            timer->obj_type = RHINO_OBJ_TYPE_NONE;
1800efe4:	b46f      	st.w      	r3, (r4, 0x3c)
            break;
1800efe6:	07c2      	br      	0x1800ef6a	// 1800ef6a <cmd_proc+0x52>
            if (timer->obj_type != RHINO_TIMER_OBJ_TYPE) {
1800efe8:	946f      	ld.w      	r3, (r4, 0x3c)
1800efea:	3b45      	cmpnei      	r3, 5
1800efec:	0bbf      	bt      	0x1800ef6a	// 1800ef6a <cmd_proc+0x52>
            if (timer->timer_state != TIMER_DEACTIVE) {
1800efee:	d8640040 	ld.b      	r3, (r4, 0x40)
1800eff2:	e923ffbc 	bnez      	r3, 0x1800ef6a	// 1800ef6a <cmd_proc+0x52>
            if (timer->mm_alloc_flag != K_OBJ_DYN_ALLOC) {
1800eff6:	d8440041 	ld.b      	r2, (r4, 0x41)
1800effa:	3a42      	cmpnei      	r2, 2
1800effc:	0bb7      	bt      	0x1800ef6a	// 1800ef6a <cmd_proc+0x52>
            timer->obj_type = RHINO_OBJ_TYPE_NONE;
1800effe:	b46f      	st.w      	r3, (r4, 0x3c)
            krhino_mm_free(timer);
1800f000:	6c13      	mov      	r0, r4
1800f002:	e3ffa005 	bsr      	0x1800300c	// 1800300c <krhino_mm_free>
            break;
1800f006:	07b2      	br      	0x1800ef6a	// 1800ef6a <cmd_proc+0x52>
            k_err_proc(RHINO_SYS_FATAL_ERR);
1800f008:	3001      	movi      	r0, 1
1800f00a:	e3fff277 	bsr      	0x1800d4f8	// 1800d4f8 <k_err_proc>
}
1800f00e:	07ae      	br      	0x1800ef6a	// 1800ef6a <cmd_proc+0x52>
1800f010:	20002948 	.long	0x20002948
1800f014:	2000256c 	.long	0x2000256c

1800f018 <timer_cmd_proc>:

static void timer_cmd_proc(k_timer_queue_cb *cb)
{
1800f018:	14d1      	push      	r4, r15
    if (cb->cb_num == TIMER_ARG_CHG_AUTO) {
1800f01a:	8024      	ld.b      	r1, (r0, 0x4)
1800f01c:	3945      	cmpnei      	r1, 5
{
1800f01e:	6d03      	mov      	r4, r0
    if (cb->cb_num == TIMER_ARG_CHG_AUTO) {
1800f020:	080a      	bt      	0x1800f034	// 1800f034 <timer_cmd_proc+0x1c>
        cmd_proc(cb, TIMER_CMD_STOP);
1800f022:	3102      	movi      	r1, 2
1800f024:	e3ffff7a 	bsr      	0x1800ef18	// 1800ef18 <cmd_proc>
        cmd_proc(cb, TIMER_ARG_CHG);
1800f028:	3104      	movi      	r1, 4
1800f02a:	6c13      	mov      	r0, r4
1800f02c:	e3ffff76 	bsr      	0x1800ef18	// 1800ef18 <cmd_proc>
        cmd_proc(cb, TIMER_CMD_START);
1800f030:	3101      	movi      	r1, 1
1800f032:	6c13      	mov      	r0, r4
    }
    else {
        cmd_proc(cb, cb->cb_num);
1800f034:	e3ffff72 	bsr      	0x1800ef18	// 1800ef18 <cmd_proc>
    }
}
1800f038:	1491      	pop      	r4, r15
	...

1800f03c <timer_task>:

static void timer_task(void *pa)
{
1800f03c:	14d5      	push      	r4-r8, r15
1800f03e:	1428      	subi      	r14, r14, 32
    while (RHINO_TRUE) {
        err = krhino_buf_queue_recv(&g_timer_queue, RHINO_WAIT_FOREVER, &cb_msg, &msg_size);
        tick_end   = krhino_sys_tick_get();

        if (err == RHINO_SUCCESS) {
            g_timer_count = tick_end;
1800f040:	119c      	lrw      	r4, 0x20002948	// 1800f130 <timer_task+0xf4>
        err = krhino_buf_queue_recv(&g_timer_queue, RHINO_WAIT_FOREVER, &cb_msg, &msg_size);
1800f042:	1e01      	addi      	r6, r14, 4
1800f044:	3100      	movi      	r1, 0
1800f046:	3200      	movi      	r2, 0
1800f048:	b8c0      	st.w      	r6, (r14, 0x0)
1800f04a:	1b02      	addi      	r3, r14, 8
1800f04c:	2900      	subi      	r1, 1
1800f04e:	2a00      	subi      	r2, 1
1800f050:	1119      	lrw      	r0, 0x200024e4	// 1800f134 <timer_task+0xf8>
1800f052:	e3fff17f 	bsr      	0x1800d350	// 1800d350 <krhino_buf_queue_recv>
1800f056:	6d43      	mov      	r5, r0
        tick_end   = krhino_sys_tick_get();
1800f058:	e3ffff1e 	bsr      	0x1800ee94	// 1800ee94 <krhino_sys_tick_get>
        if (err == RHINO_SUCCESS) {
1800f05c:	e925002c 	bnez      	r5, 0x1800f0b4	// 1800f0b4 <timer_task+0x78>
            g_timer_count = tick_end;
1800f060:	b400      	st.w      	r0, (r4, 0x0)
1800f062:	b421      	st.w      	r1, (r4, 0x4)
        }
        else {
            k_err_proc(RHINO_SYS_FATAL_ERR);
        }

        timer_cmd_proc(&cb_msg);
1800f064:	1802      	addi      	r0, r14, 8
1800f066:	e3ffffd9 	bsr      	0x1800f018	// 1800f018 <timer_cmd_proc>
    return (list->next == list);
1800f06a:	11f4      	lrw      	r7, 0x2000256c	// 1800f138 <timer_task+0xfc>
1800f06c:	6d5f      	mov      	r5, r7
1800f06e:	d9072000 	ld.w      	r8, (r7, 0x0)

        while (!is_klist_empty(&g_timer_head)) {
1800f072:	65e2      	cmpne      	r8, r7
1800f074:	0fe7      	bf      	0x1800f042	// 1800f042 <timer_task+0x6>
            timer = krhino_list_entry(g_timer_head.next, ktimer_t, timer_list);
            tick_start = krhino_sys_tick_get();
1800f076:	e3ffff0f 	bsr      	0x1800ee94	// 1800ee94 <krhino_sys_tick_get>
            delta = (sys_time_i_t)timer->match - (sys_time_i_t)tick_start;
1800f07a:	d9882006 	ld.w      	r12, (r8, 0x18)
1800f07e:	d9a82007 	ld.w      	r13, (r8, 0x1c)
1800f082:	6730      	cmphs      	r12, r12
1800f084:	6303      	subc      	r12, r0
1800f086:	6347      	subc      	r13, r1
            if (delta > 0) {
1800f088:	e94d0006 	bhz      	r13, 0x1800f094	// 1800f094 <timer_task+0x58>
1800f08c:	e92d0011 	bnez      	r13, 0x1800f0ae	// 1800f0ae <timer_task+0x72>
1800f090:	e90c000f 	bez      	r12, 0x1800f0ae	// 1800f0ae <timer_task+0x72>
                err = krhino_buf_queue_recv(&g_timer_queue, (tick_t)delta, &cb_msg, &msg_size);
1800f094:	1b02      	addi      	r3, r14, 8
1800f096:	6c73      	mov      	r1, r12
1800f098:	6cb7      	mov      	r2, r13
1800f09a:	b8c0      	st.w      	r6, (r14, 0x0)
1800f09c:	1106      	lrw      	r0, 0x200024e4	// 1800f134 <timer_task+0xf8>
1800f09e:	e3fff159 	bsr      	0x1800d350	// 1800d350 <krhino_buf_queue_recv>
1800f0a2:	6e03      	mov      	r8, r0
                tick_end = krhino_sys_tick_get();
1800f0a4:	e3fffef8 	bsr      	0x1800ee94	// 1800ee94 <krhino_sys_tick_get>
                if (err == RHINO_BLK_TIMEOUT) {
1800f0a8:	eb480192 	cmpnei      	r8, 402
1800f0ac:	0808      	bt      	0x1800f0bc	// 1800f0bc <timer_task+0x80>
                else {
                    k_err_proc(RHINO_SYS_FATAL_ERR);
                }
            }
            else {
                g_timer_count = tick_start;
1800f0ae:	b400      	st.w      	r0, (r4, 0x0)
1800f0b0:	b421      	st.w      	r1, (r4, 0x4)
1800f0b2:	040c      	br      	0x1800f0ca	// 1800f0ca <timer_task+0x8e>
            k_err_proc(RHINO_SYS_FATAL_ERR);
1800f0b4:	3001      	movi      	r0, 1
1800f0b6:	e3fff221 	bsr      	0x1800d4f8	// 1800d4f8 <k_err_proc>
1800f0ba:	07d5      	br      	0x1800f064	// 1800f064 <timer_task+0x28>
                else if (err == RHINO_SUCCESS) {
1800f0bc:	e9280032 	bnez      	r8, 0x1800f120	// 1800f120 <timer_task+0xe4>
                    g_timer_count = tick_end;
1800f0c0:	b400      	st.w      	r0, (r4, 0x0)
1800f0c2:	b421      	st.w      	r1, (r4, 0x4)
                    timer_cmd_proc(&cb_msg);
1800f0c4:	1802      	addi      	r0, r14, 8
1800f0c6:	e3ffffa9 	bsr      	0x1800f018	// 1800f018 <timer_cmd_proc>
    for (q = start->next; q != end; q = q->next) {
1800f0ca:	97e0      	ld.w      	r7, (r7, 0x0)
1800f0cc:	655e      	cmpne      	r7, r5
1800f0ce:	0fce      	bf      	0x1800f06a	// 1800f06a <timer_task+0x2e>
        delta = (sys_time_i_t)timer->match - (sys_time_i_t)g_timer_count;
1800f0d0:	9746      	ld.w      	r2, (r7, 0x18)
1800f0d2:	9767      	ld.w      	r3, (r7, 0x1c)
1800f0d4:	9400      	ld.w      	r0, (r4, 0x0)
1800f0d6:	9421      	ld.w      	r1, (r4, 0x4)
1800f0d8:	6488      	cmphs      	r2, r2
1800f0da:	6083      	subc      	r2, r0
1800f0dc:	60c7      	subc      	r3, r1
        if (delta <= 0) {
1800f0de:	e943ffc6 	bhz      	r3, 0x1800f06a	// 1800f06a <timer_task+0x2e>
1800f0e2:	e9230004 	bnez      	r3, 0x1800f0ea	// 1800f0ea <timer_task+0xae>
1800f0e6:	e922ffc2 	bnez      	r2, 0x1800f06a	// 1800f06a <timer_task+0x2e>
            timer->cb(timer, timer->timer_cb_arg);
1800f0ea:	9764      	ld.w      	r3, (r7, 0x10)
1800f0ec:	9725      	ld.w      	r1, (r7, 0x14)
1800f0ee:	6c1f      	mov      	r0, r7
1800f0f0:	7bcd      	jsr      	r3
            timer_list_rm(timer);
1800f0f2:	6c1f      	mov      	r0, r7
1800f0f4:	e3fffede 	bsr      	0x1800eeb0	// 1800eeb0 <timer_list_rm>
            if (timer->round_ticks > 0u) {
1800f0f8:	970c      	ld.w      	r0, (r7, 0x30)
1800f0fa:	972d      	ld.w      	r1, (r7, 0x34)
1800f0fc:	c4202423 	or      	r3, r0, r1
1800f100:	e9030014 	bez      	r3, 0x1800f128	// 1800f128 <timer_task+0xec>
                timer->match   =  g_timer_count + timer->remain;
1800f104:	9440      	ld.w      	r2, (r4, 0x0)
1800f106:	9461      	ld.w      	r3, (r4, 0x4)
1800f108:	6489      	cmplt      	r2, r2
1800f10a:	6081      	addc      	r2, r0
1800f10c:	60c5      	addc      	r3, r1
                timer->remain  =  timer->round_ticks;
1800f10e:	b708      	st.w      	r0, (r7, 0x20)
1800f110:	b729      	st.w      	r1, (r7, 0x24)
                timer->match   =  g_timer_count + timer->remain;
1800f112:	b746      	st.w      	r2, (r7, 0x18)
1800f114:	b767      	st.w      	r3, (r7, 0x1c)
                timer->to_head = &g_timer_head;
1800f116:	b7a2      	st.w      	r5, (r7, 0x8)
                timer_list_pri_insert(&g_timer_head, timer);
1800f118:	6c1f      	mov      	r0, r7
1800f11a:	e3fffed7 	bsr      	0x1800eec8	// 1800eec8 <timer_list_pri_insert.constprop.3>
1800f11e:	07d6      	br      	0x1800f0ca	// 1800f0ca <timer_task+0x8e>
                    k_err_proc(RHINO_SYS_FATAL_ERR);
1800f120:	3001      	movi      	r0, 1
1800f122:	e3fff1eb 	bsr      	0x1800d4f8	// 1800d4f8 <k_err_proc>
1800f126:	07d2      	br      	0x1800f0ca	// 1800f0ca <timer_task+0x8e>
                timer->timer_state = TIMER_DEACTIVE;
1800f128:	dc670040 	st.b      	r3, (r7, 0x40)
1800f12c:	07cf      	br      	0x1800f0ca	// 1800f0ca <timer_task+0x8e>
1800f12e:	0000      	.short	0x0000
1800f130:	20002948 	.long	0x20002948
1800f134:	200024e4 	.long	0x200024e4
1800f138:	2000256c 	.long	0x2000256c

1800f13c <krhino_timer_start>:
{
1800f13c:	14d0      	push      	r15
1800f13e:	1426      	subi      	r14, r14, 24
    NULL_PARA_CHK(timer);
1800f140:	e900000d 	bez      	r0, 0x1800f15a	// 1800f15a <krhino_timer_start+0x1e>
    cb.timer  = timer;
1800f144:	b800      	st.w      	r0, (r14, 0x0)
    cb.cb_num = TIMER_CMD_START;
1800f146:	3301      	movi      	r3, 1
    err = krhino_buf_queue_send(&g_timer_queue, &cb, sizeof(k_timer_queue_cb));
1800f148:	3218      	movi      	r2, 24
1800f14a:	6c7b      	mov      	r1, r14
1800f14c:	1005      	lrw      	r0, 0x200024e4	// 1800f160 <krhino_timer_start+0x24>
    cb.cb_num = TIMER_CMD_START;
1800f14e:	dc6e0004 	st.b      	r3, (r14, 0x4)
    err = krhino_buf_queue_send(&g_timer_queue, &cb, sizeof(k_timer_queue_cb));
1800f152:	e3fff0a3 	bsr      	0x1800d298	// 1800d298 <krhino_buf_queue_send>
}
1800f156:	1406      	addi      	r14, r14, 24
1800f158:	1490      	pop      	r15
    NULL_PARA_CHK(timer);
1800f15a:	3006      	movi      	r0, 6
1800f15c:	07fd      	br      	0x1800f156	// 1800f156 <krhino_timer_start+0x1a>
1800f15e:	0000      	.short	0x0000
1800f160:	200024e4 	.long	0x200024e4

1800f164 <krhino_timer_create>:
{
1800f164:	1421      	subi      	r14, r14, 4
1800f166:	14d6      	push      	r4-r9, r15
1800f168:	b867      	st.w      	r3, (r14, 0x1c)
1800f16a:	986b      	ld.w      	r3, (r14, 0x2c)
1800f16c:	6e4f      	mov      	r9, r3
1800f16e:	9887      	ld.w      	r4, (r14, 0x1c)
1800f170:	98a8      	ld.w      	r5, (r14, 0x20)
1800f172:	d90e2009 	ld.w      	r8, (r14, 0x24)
1800f176:	d98e200a 	ld.w      	r12, (r14, 0x28)
1800f17a:	d86e0030 	ld.b      	r3, (r14, 0x30)
    NULL_PARA_CHK(timer);
1800f17e:	e9000056 	bez      	r0, 0x1800f22a	// 1800f22a <krhino_timer_create+0xc6>
    NULL_PARA_CHK(name);
1800f182:	e9010054 	bez      	r1, 0x1800f22a	// 1800f22a <krhino_timer_create+0xc6>
    NULL_PARA_CHK(cb);
1800f186:	e9020052 	bez      	r2, 0x1800f22a	// 1800f22a <krhino_timer_create+0xc6>
    if (first == 0u) {
1800f18a:	6d93      	mov      	r6, r4
1800f18c:	6dd7      	mov      	r7, r5
1800f18e:	3e40      	cmpnei      	r6, 0
1800f190:	c4e70c81 	decf      	r7, r7, 1
1800f194:	2e00      	subi      	r6, 1
1800f196:	c7c0502d 	bmaski      	r13, 31
1800f19a:	65f4      	cmphs      	r13, r7
1800f19c:	0c49      	bf      	0x1800f22e	// 1800f22e <krhino_timer_create+0xca>
1800f19e:	675e      	cmpne      	r7, r13
1800f1a0:	0807      	bt      	0x1800f1ae	// 1800f1ae <krhino_timer_create+0x4a>
1800f1a2:	ea0d0000 	movi      	r13, 0
1800f1a6:	e5ad1002 	subi      	r13, r13, 3
1800f1aa:	65b4      	cmphs      	r13, r6
1800f1ac:	0c41      	bf      	0x1800f22e	// 1800f22e <krhino_timer_create+0xca>
    if (round >= MAX_TIMER_TICKS) {
1800f1ae:	c7c0502d 	bmaski      	r13, 31
1800f1b2:	6734      	cmphs      	r13, r12
1800f1b4:	0c3d      	bf      	0x1800f22e	// 1800f22e <krhino_timer_create+0xca>
1800f1b6:	6772      	cmpne      	r12, r13
1800f1b8:	0807      	bt      	0x1800f1c6	// 1800f1c6 <krhino_timer_create+0x62>
1800f1ba:	ea0d0000 	movi      	r13, 0
1800f1be:	e5ad1001 	subi      	r13, r13, 2
1800f1c2:	6634      	cmphs      	r13, r8
1800f1c4:	0c35      	bf      	0x1800f22e	// 1800f22e <krhino_timer_create+0xca>
    timer->cb            = cb;
1800f1c6:	b044      	st.w      	r2, (r0, 0x10)
    timer->timer_state   = TIMER_DEACTIVE;
1800f1c8:	3200      	movi      	r2, 0
1800f1ca:	dc400040 	st.b      	r2, (r0, 0x40)
    timer->to_head       = NULL;
1800f1ce:	3200      	movi      	r2, 0
1800f1d0:	b042      	st.w      	r2, (r0, 0x8)
    timer->mm_alloc_flag = mm_alloc_flag;
1800f1d2:	3201      	movi      	r2, 1
    timer->remain        = 0u;
1800f1d4:	ea0d0000 	movi      	r13, 0
    timer->round_ticks   = round;
1800f1d8:	dd80200d 	st.w      	r12, (r0, 0x34)
    timer->mm_alloc_flag = mm_alloc_flag;
1800f1dc:	dc400041 	st.b      	r2, (r0, 0x41)
    timer->remain        = 0u;
1800f1e0:	ea0c0000 	movi      	r12, 0
    timer->obj_type = RHINO_TIMER_OBJ_TYPE;
1800f1e4:	3205      	movi      	r2, 5
    timer->name          = name;
1800f1e6:	b023      	st.w      	r1, (r0, 0xc)
    timer->init_count    = first;
1800f1e8:	b08a      	st.w      	r4, (r0, 0x28)
1800f1ea:	b0ab      	st.w      	r5, (r0, 0x2c)
    timer->round_ticks   = round;
1800f1ec:	dd00200c 	st.w      	r8, (r0, 0x30)
    timer->remain        = 0u;
1800f1f0:	dd802008 	st.w      	r12, (r0, 0x20)
1800f1f4:	dda02009 	st.w      	r13, (r0, 0x24)
    timer->match         = 0u;
1800f1f8:	dd802006 	st.w      	r12, (r0, 0x18)
1800f1fc:	dda02007 	st.w      	r13, (r0, 0x1c)
    timer->timer_cb_arg  = arg;
1800f200:	dd202005 	st.w      	r9, (r0, 0x14)
    list_head->next = list_head;
1800f204:	b000      	st.w      	r0, (r0, 0x0)
    list_head->prev = list_head;
1800f206:	b001      	st.w      	r0, (r0, 0x4)
    timer->obj_type = RHINO_TIMER_OBJ_TYPE;
1800f208:	b04f      	st.w      	r2, (r0, 0x3c)
    if (auto_run > 0u) {
1800f20a:	e9030014 	bez      	r3, 0x1800f232	// 1800f232 <krhino_timer_create+0xce>
        err = krhino_timer_start(timer);
1800f20e:	e3ffff97 	bsr      	0x1800f13c	// 1800f13c <krhino_timer_start>
}
1800f212:	d9ee2006 	ld.w      	r15, (r14, 0x18)
1800f216:	d92e2005 	ld.w      	r9, (r14, 0x14)
1800f21a:	d90e2004 	ld.w      	r8, (r14, 0x10)
1800f21e:	98e3      	ld.w      	r7, (r14, 0xc)
1800f220:	98c2      	ld.w      	r6, (r14, 0x8)
1800f222:	98a1      	ld.w      	r5, (r14, 0x4)
1800f224:	9880      	ld.w      	r4, (r14, 0x0)
1800f226:	1408      	addi      	r14, r14, 32
1800f228:	783c      	jmp      	r15
    NULL_PARA_CHK(timer);
1800f22a:	3006      	movi      	r0, 6
1800f22c:	07f3      	br      	0x1800f212	// 1800f212 <krhino_timer_create+0xae>
        return RHINO_INV_PARAM;
1800f22e:	3005      	movi      	r0, 5
1800f230:	07f1      	br      	0x1800f212	// 1800f212 <krhino_timer_create+0xae>
    kstat_t err = RHINO_SUCCESS;
1800f232:	6c0f      	mov      	r0, r3
    return timer_create(timer, name, cb, first, round, arg, auto_run,
1800f234:	07ef      	br      	0x1800f212	// 1800f212 <krhino_timer_create+0xae>
	...

1800f238 <krhino_timer_stop>:
{
1800f238:	14d0      	push      	r15
1800f23a:	1426      	subi      	r14, r14, 24
    NULL_PARA_CHK(timer);
1800f23c:	e900000d 	bez      	r0, 0x1800f256	// 1800f256 <krhino_timer_stop+0x1e>
    cb.timer  = timer;
1800f240:	b800      	st.w      	r0, (r14, 0x0)
    cb.cb_num = TIMER_CMD_STOP;
1800f242:	3302      	movi      	r3, 2
    err = krhino_buf_queue_send(&g_timer_queue, &cb, sizeof(k_timer_queue_cb));
1800f244:	3218      	movi      	r2, 24
1800f246:	6c7b      	mov      	r1, r14
1800f248:	1005      	lrw      	r0, 0x200024e4	// 1800f25c <krhino_timer_stop+0x24>
    cb.cb_num = TIMER_CMD_STOP;
1800f24a:	dc6e0004 	st.b      	r3, (r14, 0x4)
    err = krhino_buf_queue_send(&g_timer_queue, &cb, sizeof(k_timer_queue_cb));
1800f24e:	e3fff025 	bsr      	0x1800d298	// 1800d298 <krhino_buf_queue_send>
}
1800f252:	1406      	addi      	r14, r14, 24
1800f254:	1490      	pop      	r15
    NULL_PARA_CHK(timer);
1800f256:	3006      	movi      	r0, 6
1800f258:	07fd      	br      	0x1800f252	// 1800f252 <krhino_timer_stop+0x1a>
1800f25a:	0000      	.short	0x0000
1800f25c:	200024e4 	.long	0x200024e4

1800f260 <krhino_timer_change>:
{
1800f260:	1421      	subi      	r14, r14, 4
1800f262:	14d0      	push      	r15
1800f264:	1426      	subi      	r14, r14, 24
1800f266:	b867      	st.w      	r3, (r14, 0x1c)
1800f268:	d9ae2008 	ld.w      	r13, (r14, 0x20)
    NULL_PARA_CHK(timer);
1800f26c:	e9000021 	bez      	r0, 0x1800f2ae	// 1800f2ae <krhino_timer_change+0x4e>
    if (first >= (tick_t)-1) {
1800f270:	ea0c0000 	movi      	r12, 0
1800f274:	e58c1000 	subi      	r12, r12, 1
1800f278:	6706      	cmpne      	r1, r12
1800f27a:	0803      	bt      	0x1800f280	// 1800f280 <krhino_timer_change+0x20>
1800f27c:	644a      	cmpne      	r2, r1
1800f27e:	0c1a      	bf      	0x1800f2b2	// 1800f2b2 <krhino_timer_change+0x52>
    if (round >= (tick_t)-1) {
1800f280:	670e      	cmpne      	r3, r12
1800f282:	0803      	bt      	0x1800f288	// 1800f288 <krhino_timer_change+0x28>
1800f284:	64f6      	cmpne      	r13, r3
1800f286:	0c16      	bf      	0x1800f2b2	// 1800f2b2 <krhino_timer_change+0x52>
    cb.timer   = timer;
1800f288:	b800      	st.w      	r0, (r14, 0x0)
    cb.first   = first;
1800f28a:	b822      	st.w      	r1, (r14, 0x8)
1800f28c:	b843      	st.w      	r2, (r14, 0xc)
    cb.u.round = round;
1800f28e:	b864      	st.w      	r3, (r14, 0x10)
    err = krhino_buf_queue_send(&g_timer_queue, &cb, sizeof(k_timer_queue_cb));
1800f290:	3218      	movi      	r2, 24
    cb.cb_num  = TIMER_CMD_CHG;
1800f292:	3303      	movi      	r3, 3
    err = krhino_buf_queue_send(&g_timer_queue, &cb, sizeof(k_timer_queue_cb));
1800f294:	6c7b      	mov      	r1, r14
1800f296:	1009      	lrw      	r0, 0x200024e4	// 1800f2b8 <krhino_timer_change+0x58>
    cb.u.round = round;
1800f298:	ddae2005 	st.w      	r13, (r14, 0x14)
    cb.cb_num  = TIMER_CMD_CHG;
1800f29c:	dc6e0004 	st.b      	r3, (r14, 0x4)
    err = krhino_buf_queue_send(&g_timer_queue, &cb, sizeof(k_timer_queue_cb));
1800f2a0:	e3ffeffc 	bsr      	0x1800d298	// 1800d298 <krhino_buf_queue_send>
}
1800f2a4:	1406      	addi      	r14, r14, 24
1800f2a6:	d9ee2000 	ld.w      	r15, (r14, 0x0)
1800f2aa:	1402      	addi      	r14, r14, 8
1800f2ac:	783c      	jmp      	r15
    NULL_PARA_CHK(timer);
1800f2ae:	3006      	movi      	r0, 6
1800f2b0:	07fa      	br      	0x1800f2a4	// 1800f2a4 <krhino_timer_change+0x44>
        return RHINO_INV_PARAM;
1800f2b2:	3005      	movi      	r0, 5
1800f2b4:	07f8      	br      	0x1800f2a4	// 1800f2a4 <krhino_timer_change+0x44>
1800f2b6:	0000      	.short	0x0000
1800f2b8:	200024e4 	.long	0x200024e4

1800f2bc <ktimer_init>:
        }
    }
}

__init void ktimer_init(void)
{
1800f2bc:	14d0      	push      	r15
1800f2be:	1426      	subi      	r14, r14, 24
    list_head->next = list_head;
1800f2c0:	106f      	lrw      	r3, 0x2000256c	// 1800f2fc <ktimer_init+0x40>
    klist_init(&g_timer_head);

    krhino_fix_buf_queue_create(&g_timer_queue, "timer_queue",
1800f2c2:	1050      	lrw      	r2, 0x20002950	// 1800f300 <ktimer_init+0x44>
1800f2c4:	1030      	lrw      	r1, 0x18017850	// 1800f304 <ktimer_init+0x48>
1800f2c6:	1011      	lrw      	r0, 0x200024e4	// 1800f308 <ktimer_init+0x4c>
    list_head->prev = list_head;
1800f2c8:	b361      	st.w      	r3, (r3, 0x4)
    list_head->next = list_head;
1800f2ca:	b360      	st.w      	r3, (r3, 0x0)
1800f2cc:	330a      	movi      	r3, 10
1800f2ce:	b860      	st.w      	r3, (r14, 0x0)
1800f2d0:	3318      	movi      	r3, 24
1800f2d2:	e3ffefd1 	bsr      	0x1800d274	// 1800d274 <krhino_fix_buf_queue_create>
                                 timer_queue_cb, sizeof(k_timer_queue_cb), RHINO_CONFIG_TIMER_MSG_NUM);
    krhino_task_create(&g_timer_task, "timer_task", NULL,
1800f2d6:	3301      	movi      	r3, 1
1800f2d8:	b865      	st.w      	r3, (r14, 0x14)
1800f2da:	3200      	movi      	r2, 0
1800f2dc:	106c      	lrw      	r3, 0x1800f03c	// 1800f30c <ktimer_init+0x50>
1800f2de:	102d      	lrw      	r1, 0x1801785c	// 1800f310 <ktimer_init+0x54>
1800f2e0:	100d      	lrw      	r0, 0x20002a40	// 1800f314 <ktimer_init+0x58>
1800f2e2:	b864      	st.w      	r3, (r14, 0x10)
1800f2e4:	3380      	movi      	r3, 128
1800f2e6:	b863      	st.w      	r3, (r14, 0xc)
1800f2e8:	106c      	lrw      	r3, 0x20002628	// 1800f318 <ktimer_init+0x5c>
1800f2ea:	b862      	st.w      	r3, (r14, 0x8)
1800f2ec:	3300      	movi      	r3, 0
1800f2ee:	b840      	st.w      	r2, (r14, 0x0)
1800f2f0:	b861      	st.w      	r3, (r14, 0x4)
1800f2f2:	3305      	movi      	r3, 5
1800f2f4:	e3fff9f0 	bsr      	0x1800e6d4	// 1800e6d4 <krhino_task_create>
                       RHINO_CONFIG_TIMER_TASK_PRI, 0u, g_timer_task_stack,
                       RHINO_CONFIG_TIMER_TASK_STACK_SIZE, timer_task, 1u);
}
1800f2f8:	1406      	addi      	r14, r14, 24
1800f2fa:	1490      	pop      	r15
1800f2fc:	2000256c 	.long	0x2000256c
1800f300:	20002950 	.long	0x20002950
1800f304:	18017850 	.long	0x18017850
1800f308:	200024e4 	.long	0x200024e4
1800f30c:	1800f03c 	.long	0x1800f03c
1800f310:	1801785c 	.long	0x1801785c
1800f314:	20002a40 	.long	0x20002a40
1800f318:	20002628 	.long	0x20002628

1800f31c <systick_handler>:

__bobj uint64_t g_sys_tick_count;
__bobj osTimespec_t os_time2;

void systick_handler(void)
{
1800f31c:	14d0      	push      	r15
    g_sys_tick_count++;
1800f31e:	102d      	lrw      	r1, 0x20002bcc	// 1800f350 <systick_handler+0x34>
1800f320:	9140      	ld.w      	r2, (r1, 0x0)
1800f322:	9161      	ld.w      	r3, (r1, 0x4)
1800f324:	2200      	addi      	r2, 1
1800f326:	3a40      	cmpnei      	r2, 0
1800f328:	c4630c21 	incf      	r3, r3, 1
1800f32c:	b140      	st.w      	r2, (r1, 0x0)
1800f32e:	b161      	st.w      	r3, (r1, 0x4)
    os_time2.tv_msec += (1000/CONFIG_SYSTICK_HZ);
1800f330:	1069      	lrw      	r3, 0x20002bc4	// 1800f354 <systick_handler+0x38>
1800f332:	9341      	ld.w      	r2, (r3, 0x4)
1800f334:	2200      	addi      	r2, 1
    if(os_time2.tv_msec > 1000){
1800f336:	eb2203e8 	cmplti      	r2, 1001
    os_time2.tv_msec += (1000/CONFIG_SYSTICK_HZ);
1800f33a:	b341      	st.w      	r2, (r3, 0x4)
    if(os_time2.tv_msec > 1000){
1800f33c:	0806      	bt      	0x1800f348	// 1800f348 <systick_handler+0x2c>
        os_time2.tv_sec++;
1800f33e:	9340      	ld.w      	r2, (r3, 0x0)
1800f340:	2200      	addi      	r2, 1
1800f342:	b340      	st.w      	r2, (r3, 0x0)
        os_time2.tv_msec = 0;
1800f344:	3200      	movi      	r2, 0
1800f346:	b341      	st.w      	r2, (r3, 0x4)
    }
    krhino_tick_proc();
1800f348:	e3fffd9c 	bsr      	0x1800ee80	// 1800ee80 <krhino_tick_proc>
}
1800f34c:	1490      	pop      	r15
1800f34e:	0000      	.short	0x0000
1800f350:	20002bcc 	.long	0x20002bcc
1800f354:	20002bc4 	.long	0x20002bc4

1800f358 <soc_err_proc>:
    return __get_SP();
}

extern void mcu_reset(void);
void soc_err_proc(kstat_t err)
{
1800f358:	14d0      	push      	r15
    switch(err) {
1800f35a:	e46014af 	subi      	r3, r0, 1200
1800f35e:	3b01      	cmphsi      	r3, 2
{
1800f360:	6c43      	mov      	r1, r0
1800f362:	1068      	lrw      	r3, 0x20002828	// 1800f380 <soc_err_proc+0x28>
    switch(err) {
1800f364:	0809      	bt      	0x1800f376	// 1800f376 <soc_err_proc+0x1e>
        case RHINO_TASK_STACK_OVF:
        case RHINO_INTRPT_STACK_OVF:
            printf("stack overflow: %s!, %p\n", g_active_task[0]->task_name, g_active_task[0]);
1800f366:	9340      	ld.w      	r2, (r3, 0x0)
1800f368:	9232      	ld.w      	r1, (r2, 0x48)
1800f36a:	1007      	lrw      	r0, 0x18017867	// 1800f384 <soc_err_proc+0x2c>
            break;
        default:
            printf("sys error:%d %s!\n", err, g_active_task[0]->task_name);
1800f36c:	e3ffebac 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
    }
    
    mcu_reset();
1800f370:	e0000fa4 	bsr      	0x180112b8	// 180112b8 <mcu_reset>
    //while(1);
}
1800f374:	1490      	pop      	r15
            printf("sys error:%d %s!\n", err, g_active_task[0]->task_name);
1800f376:	9360      	ld.w      	r3, (r3, 0x0)
1800f378:	1004      	lrw      	r0, 0x18017880	// 1800f388 <soc_err_proc+0x30>
1800f37a:	9352      	ld.w      	r2, (r3, 0x48)
1800f37c:	07f8      	br      	0x1800f36c	// 1800f36c <soc_err_proc+0x14>
1800f37e:	0000      	.short	0x0000
1800f380:	20002828 	.long	0x20002828
1800f384:	18017867 	.long	0x18017867
1800f388:	18017880 	.long	0x18017880

1800f38c <eth_mdio_bus_attach>:
#include "hal/netdev.h"
#include "lib/net/ethphy/eth_phy.h"
#include "lib/net/ethphy/eth_mdio_bus.h"

__init int32 eth_mdio_bus_attach(uint32 dev_id, struct ethernet_mdio_bus *p_mdio_bus)
{
1800f38c:	14d0      	push      	r15
    dev_register(dev_id, (struct dev_obj *)p_mdio_bus);
1800f38e:	e3ff9e8b 	bsr      	0x180030a4	// 180030a4 <dev_register>
    return RET_OK;
}
1800f392:	3000      	movi      	r0, 0
1800f394:	1490      	pop      	r15
	...

1800f398 <eth_phy_attach>:
{
    os_work_cancle(&eth_phy_wkq.os_work_phy, 1);
}

__init void eth_phy_attach(uint32 dev_id, struct ethernet_phy_device *phydev)
{
1800f398:	14d0      	push      	r15
    dev_register(dev_id, (struct dev_obj *)phydev);
1800f39a:	e3ff9e85 	bsr      	0x180030a4	// 180030a4 <dev_register>
}
1800f39e:	1490      	pop      	r15

1800f3a0 <phy_read>:
  * @brief  Convenience function for reading a given PHY register
  * @param  phydev : the phy_device struct
  * @param  reg    : register number to read
  * @retval Returns the data in the PHY register
  */
uint16 phy_read(struct ethernet_phy_device *phydev, uint16 reg) {
1800f3a0:	14d0      	push      	r15
    return phydev->bus->read(phydev->bus->priv, phydev->addr, reg);
1800f3a2:	9065      	ld.w      	r3, (r0, 0x14)
1800f3a4:	6c87      	mov      	r2, r1
1800f3a6:	d9832004 	ld.w      	r12, (r3, 0x10)
1800f3aa:	8826      	ld.h      	r1, (r0, 0xc)
1800f3ac:	9303      	ld.w      	r0, (r3, 0xc)
1800f3ae:	7bf1      	jsr      	r12
}
1800f3b0:	7401      	zexth      	r0, r0
1800f3b2:	1490      	pop      	r15

1800f3b4 <genphy_config_init>:
    
    return 1;
}

__init int genphy_config_init(struct ethernet_phy_device *phydev)
{
1800f3b4:	14d2      	push      	r4-r5, r15
     * all possible port types */
    features = (SUPPORTED_TP | SUPPORTED_MII | SUPPORTED_AUI |
               SUPPORTED_FIBRE | SUPPORTED_BNC);

    /* Do we support autonegotiation? */
    val = phy_read(phydev, MII_BMSR);
1800f3b6:	3101      	movi      	r1, 1
{
1800f3b8:	6d43      	mov      	r5, r0
    val = phy_read(phydev, MII_BMSR);
1800f3ba:	e3fffff3 	bsr      	0x1800f3a0	// 1800f3a0 <phy_read>

    if(val < 0) {
        return val;
    }

    if(val & BMSR_ANEGCAPABLE) {
1800f3be:	e4402008 	andi      	r2, r0, 8
        features |= SUPPORTED_Autoneg;
1800f3c2:	34f8      	movi      	r4, 248
1800f3c4:	33fc      	movi      	r3, 252
1800f3c6:	4364      	lsli      	r3, r3, 4
1800f3c8:	4484      	lsli      	r4, r4, 4
1800f3ca:	3a40      	cmpnei      	r2, 0
1800f3cc:	c4830c40 	inct      	r4, r3, 0
    }

    if(val & BMSR_100FULL) {
1800f3d0:	3380      	movi      	r3, 128
1800f3d2:	4367      	lsli      	r3, r3, 7
1800f3d4:	68c0      	and      	r3, r0
1800f3d6:	e9030004 	bez      	r3, 0x1800f3de	// 1800f3de <genphy_config_init+0x2a>
        features |= SUPPORTED_100baseT_Full;
1800f3da:	ec840008 	ori      	r4, r4, 8
    }
    if(val & BMSR_100HALF) {
1800f3de:	3380      	movi      	r3, 128
1800f3e0:	4366      	lsli      	r3, r3, 6
1800f3e2:	68c0      	and      	r3, r0
1800f3e4:	e9030004 	bez      	r3, 0x1800f3ec	// 1800f3ec <genphy_config_init+0x38>
        features |= SUPPORTED_100baseT_Half;
1800f3e8:	ec840004 	ori      	r4, r4, 4
    }
    if(val & BMSR_10FULL) {
1800f3ec:	3380      	movi      	r3, 128
1800f3ee:	4365      	lsli      	r3, r3, 5
1800f3f0:	68c0      	and      	r3, r0
1800f3f2:	e9030004 	bez      	r3, 0x1800f3fa	// 1800f3fa <genphy_config_init+0x46>
        features |= SUPPORTED_10baseT_Full;
1800f3f6:	ec840002 	ori      	r4, r4, 2
    }
    if(val & BMSR_10HALF) {
1800f3fa:	e4602800 	andi      	r3, r0, 2048
1800f3fe:	e9030004 	bez      	r3, 0x1800f406	// 1800f406 <genphy_config_init+0x52>
        features |= SUPPORTED_10baseT_Half;
1800f402:	ec840001 	ori      	r4, r4, 1
    }
    if(val & BMSR_ESTATEN) {
1800f406:	e4002100 	andi      	r0, r0, 256
1800f40a:	e9000014 	bez      	r0, 0x1800f432	// 1800f432 <genphy_config_init+0x7e>
        val = phy_read(phydev, MII_ESTATUS);
1800f40e:	310f      	movi      	r1, 15
1800f410:	6c17      	mov      	r0, r5
1800f412:	e3ffffc7 	bsr      	0x1800f3a0	// 1800f3a0 <phy_read>

        if(val < 0) {
            return val;
        }
        if(val & ESTATUS_1000_TFULL) {
1800f416:	3380      	movi      	r3, 128
1800f418:	4366      	lsli      	r3, r3, 6
1800f41a:	68c0      	and      	r3, r0
1800f41c:	e9030004 	bez      	r3, 0x1800f424	// 1800f424 <genphy_config_init+0x70>
            features |= SUPPORTED_1000baseT_Full;
1800f420:	ec840020 	ori      	r4, r4, 32
        }
        if(val & ESTATUS_1000_THALF) {
1800f424:	3380      	movi      	r3, 128
1800f426:	4365      	lsli      	r3, r3, 5
1800f428:	680c      	and      	r0, r3
1800f42a:	e9000004 	bez      	r0, 0x1800f432	// 1800f432 <genphy_config_init+0x7e>
            features |= SUPPORTED_1000baseT_Half;
1800f42e:	ec840010 	ori      	r4, r4, 16

    phydev->supported = features;
    phydev->advertising = features;

    return 0;
}
1800f432:	3000      	movi      	r0, 0
    phydev->supported = features;
1800f434:	b58c      	st.w      	r4, (r5, 0x30)
    phydev->advertising = features;
1800f436:	b58d      	st.w      	r4, (r5, 0x34)
}
1800f438:	1492      	pop      	r4-r5, r15
	...

1800f43c <phy_write>:
void phy_write(struct ethernet_phy_device *phydev, uint16 reg, uint16 val) {
1800f43c:	14d0      	push      	r15
    phydev->bus->write(phydev->bus->priv, phydev->addr, reg, val);
1800f43e:	d9802005 	ld.w      	r12, (r0, 0x14)
1800f442:	6ccb      	mov      	r3, r2
1800f444:	d9ac2005 	ld.w      	r13, (r12, 0x14)
1800f448:	6c87      	mov      	r2, r1
1800f44a:	8826      	ld.h      	r1, (r0, 0xc)
1800f44c:	d80c2003 	ld.w      	r0, (r12, 0xc)
1800f450:	7bf5      	jsr      	r13
}
1800f452:	1490      	pop      	r15

1800f454 <genphy_restart_aneg>:
  * @brief  Enable and Restart Autonegotiation
  * @param  phydev : target phy_device struct
  * @retval Returning 0 means the PHY supports auto-negotiation.
  */
int genphy_restart_aneg(struct ethernet_phy_device *phydev)
{
1800f454:	14d1      	push      	r4, r15
    int ctl;

    ctl = phy_read(phydev, MII_BMCR);
1800f456:	3100      	movi      	r1, 0
{
1800f458:	6d03      	mov      	r4, r0
    ctl = phy_read(phydev, MII_BMCR);
1800f45a:	e3ffffa3 	bsr      	0x1800f3a0	// 1800f3a0 <phy_read>

    if(ctl < 0) {
        return ctl;
    }
    ctl |= (BMCR_ANENABLE | BMCR_ANRESTART);
1800f45e:	ec401200 	ori      	r2, r0, 4608

    /* Don't isolate the PHY if we're negotiating */
    ctl &= ~(BMCR_ISOLATE);

    phy_write(phydev, MII_BMCR, ctl);
1800f462:	ea03fbff 	movi      	r3, 64511
1800f466:	6c13      	mov      	r0, r4
1800f468:	688c      	and      	r2, r3
1800f46a:	3100      	movi      	r1, 0
1800f46c:	e3ffffe8 	bsr      	0x1800f43c	// 1800f43c <phy_write>

    return 0;
}
1800f470:	3000      	movi      	r0, 0
1800f472:	1491      	pop      	r4, r15

1800f474 <genphy_config_aneg>:
  * @note   If auto-negotiation is enabled, we configure the advertising,
  *         and then restart auto-negotiation. If it is not enabled, then we
  *         write the BMCR
  */
int genphy_config_aneg(struct ethernet_phy_device *phydev)
{
1800f474:	14d2      	push      	r4-r5, r15
    int result;

    if(AUTONEG_ENABLE != phydev->autoneg) {
1800f476:	906e      	ld.w      	r3, (r0, 0x38)
1800f478:	3b41      	cmpnei      	r3, 1
{
1800f47a:	6d03      	mov      	r4, r0
    if(AUTONEG_ENABLE != phydev->autoneg) {
1800f47c:	0c1c      	bf      	0x1800f4b4	// 1800f4b4 <genphy_config_aneg+0x40>
    phydev->pause = phydev->asym_pause = 0;
1800f47e:	3300      	movi      	r3, 0
1800f480:	a875      	st.h      	r3, (r0, 0x2a)
1800f482:	a874      	st.h      	r3, (r0, 0x28)
    if(SPEED_1000 == phydev->speed) {
1800f484:	d8605012 	ld.hs      	r3, (r0, 0x24)
1800f488:	eb4303e8 	cmpnei      	r3, 1000
1800f48c:	0c12      	bf      	0x1800f4b0	// 1800f4b0 <genphy_config_aneg+0x3c>
        ctl |= BMCR_SPEED100;
1800f48e:	eb430064 	cmpnei      	r3, 100
1800f492:	6483      	mvcv      	r2
1800f494:	424d      	lsli      	r2, r2, 13
    if(DUPLEX_FULL == phydev->duplex) {
1800f496:	d8645013 	ld.hs      	r3, (r4, 0x26)
1800f49a:	3b41      	cmpnei      	r3, 1
1800f49c:	0803      	bt      	0x1800f4a2	// 1800f4a2 <genphy_config_aneg+0x2e>
        ctl |= BMCR_FULLDPLX;
1800f49e:	ec420100 	ori      	r2, r2, 256
    phy_write(phydev, MII_BMCR, ctl);
1800f4a2:	7489      	zexth      	r2, r2
1800f4a4:	3100      	movi      	r1, 0
1800f4a6:	6c13      	mov      	r0, r4
1800f4a8:	e3ffffca 	bsr      	0x1800f43c	// 1800f43c <phy_write>
        int ctl = phy_read(phydev, MII_BMCR);

        if(ctl < 0) {
            return ctl;
        }
        if(!(ctl & BMCR_ANENABLE) || (ctl & BMCR_ISOLATE)) {
1800f4ac:	3000      	movi      	r0, 0
     * than we were before.     */
    if(result > 0) {
        result = genphy_restart_aneg(phydev);
    }
    return result;
}
1800f4ae:	1492      	pop      	r4-r5, r15
        ctl |= BMCR_SPEED1000;
1800f4b0:	3240      	movi      	r2, 64
1800f4b2:	07f2      	br      	0x1800f496	// 1800f496 <genphy_config_aneg+0x22>
    phydev->advertising &= phydev->supported;
1800f4b4:	90ad      	ld.w      	r5, (r0, 0x34)
1800f4b6:	906c      	ld.w      	r3, (r0, 0x30)
1800f4b8:	694c      	and      	r5, r3
    oldadv = adv = phy_read(phydev, MII_ADVERTISE);
1800f4ba:	3104      	movi      	r1, 4
    phydev->advertising &= phydev->supported;
1800f4bc:	b0ad      	st.w      	r5, (r0, 0x34)
    oldadv = adv = phy_read(phydev, MII_ADVERTISE);
1800f4be:	e3ffff71 	bsr      	0x1800f3a0	// 1800f3a0 <phy_read>
    if(ethadv & ADVERTISED_10baseT_Half) {
1800f4c2:	e4452001 	andi      	r2, r5, 1
        result |= ADVERTISE_10HALF;
1800f4c6:	3a40      	cmpnei      	r2, 0
    if(ethadv & ADVERTISED_10baseT_Full) {
1800f4c8:	e4252002 	andi      	r1, r5, 2
    adv &= ~(ADVERTISE_ALL | ADVERTISE_100BASE4 | ADVERTISE_PAUSE_CAP |
1800f4cc:	ea030fe0 	movi      	r3, 4064
1800f4d0:	6cce      	nor      	r3, r3
        result |= ADVERTISE_10HALF;
1800f4d2:	c4000502 	mvc      	r2
    adv &= ~(ADVERTISE_ALL | ADVERTISE_100BASE4 | ADVERTISE_PAUSE_CAP |
1800f4d6:	68c0      	and      	r3, r0
        result |= ADVERTISE_10HALF;
1800f4d8:	4245      	lsli      	r2, r2, 5
    if(ethadv & ADVERTISED_10baseT_Full) {
1800f4da:	e9010004 	bez      	r1, 0x1800f4e2	// 1800f4e2 <genphy_config_aneg+0x6e>
        result |= ADVERTISE_10FULL;
1800f4de:	ec420040 	ori      	r2, r2, 64
    if(ethadv & ADVERTISED_100baseT_Half) {
1800f4e2:	e4252004 	andi      	r1, r5, 4
1800f4e6:	e9010004 	bez      	r1, 0x1800f4ee	// 1800f4ee <genphy_config_aneg+0x7a>
        result |= ADVERTISE_100HALF;
1800f4ea:	ec420080 	ori      	r2, r2, 128
    if(ethadv & ADVERTISED_100baseT_Full) {
1800f4ee:	e4252008 	andi      	r1, r5, 8
1800f4f2:	e9010004 	bez      	r1, 0x1800f4fa	// 1800f4fa <genphy_config_aneg+0x86>
        result |= ADVERTISE_100FULL;
1800f4f6:	ec420100 	ori      	r2, r2, 256
    if(ethadv & ADVERTISED_Pause) {
1800f4fa:	3180      	movi      	r1, 128
1800f4fc:	4126      	lsli      	r1, r1, 6
1800f4fe:	6854      	and      	r1, r5
1800f500:	e9010004 	bez      	r1, 0x1800f508	// 1800f508 <genphy_config_aneg+0x94>
        result |= ADVERTISE_PAUSE_CAP;
1800f504:	ec420400 	ori      	r2, r2, 1024
    if(ethadv & ADVERTISED_Asym_Pause) {
1800f508:	3180      	movi      	r1, 128
1800f50a:	4127      	lsli      	r1, r1, 7
1800f50c:	6944      	and      	r5, r1
1800f50e:	e9050004 	bez      	r5, 0x1800f516	// 1800f516 <genphy_config_aneg+0xa2>
        result |= ADVERTISE_PAUSE_ASYM;
1800f512:	ec420800 	ori      	r2, r2, 2048
    adv |= eth_phy_adv_to_mii_adv_t(advertise);
1800f516:	6c8c      	or      	r2, r3
    if(adv != oldadv) {
1800f518:	6482      	cmpne      	r0, r2
1800f51a:	0c0a      	bf      	0x1800f52e	// 1800f52e <genphy_config_aneg+0xba>
        phy_write(phydev, MII_ADVERTISE, adv);
1800f51c:	7489      	zexth      	r2, r2
1800f51e:	3104      	movi      	r1, 4
1800f520:	6c13      	mov      	r0, r4
1800f522:	e3ffff8d 	bsr      	0x1800f43c	// 1800f43c <phy_write>
        result = genphy_restart_aneg(phydev);
1800f526:	6c13      	mov      	r0, r4
1800f528:	e3ffff96 	bsr      	0x1800f454	// 1800f454 <genphy_restart_aneg>
1800f52c:	07c1      	br      	0x1800f4ae	// 1800f4ae <genphy_config_aneg+0x3a>
        int ctl = phy_read(phydev, MII_BMCR);
1800f52e:	3100      	movi      	r1, 0
1800f530:	6c13      	mov      	r0, r4
1800f532:	e3ffff37 	bsr      	0x1800f3a0	// 1800f3a0 <phy_read>
        if(!(ctl & BMCR_ANENABLE) || (ctl & BMCR_ISOLATE)) {
1800f536:	33a0      	movi      	r3, 160
1800f538:	4365      	lsli      	r3, r3, 5
1800f53a:	680c      	and      	r0, r3
1800f53c:	eb401000 	cmpnei      	r0, 4096
1800f540:	0bf3      	bt      	0x1800f526	// 1800f526 <genphy_config_aneg+0xb2>
1800f542:	07b5      	br      	0x1800f4ac	// 1800f4ac <genphy_config_aneg+0x38>

1800f544 <genphy_update_link>:
  * @note   Update the value in phydev->link to reflect the current link
  *         value. In order to do this, we need to read the status register
  *         twice, keeping the second value.
  */
int genphy_update_link(struct ethernet_phy_device *phydev)
{
1800f544:	14d1      	push      	r4, r15
1800f546:	6d03      	mov      	r4, r0
    int status;

    /* Do a fake read */
    status = phy_read(phydev, MII_BMSR);
1800f548:	3101      	movi      	r1, 1
1800f54a:	e3ffff2b 	bsr      	0x1800f3a0	// 1800f3a0 <phy_read>

    if(status < 0) {
        return status;
    }
    /* Read link and autonegotiation status */
    status = phy_read(phydev, MII_BMSR);
1800f54e:	3101      	movi      	r1, 1
1800f550:	6c13      	mov      	r0, r4
1800f552:	e3ffff27 	bsr      	0x1800f3a0	// 1800f3a0 <phy_read>

    if(status < 0) {
        return status;
    }
    if((status & BMSR_LSTATUS) == 0) {
1800f556:	e4002004 	andi      	r0, r0, 4
1800f55a:	e9200005 	bnez      	r0, 0x1800f564	// 1800f564 <genphy_update_link+0x20>
        phydev->link = 0;
1800f55e:	ac16      	st.h      	r0, (r4, 0x2c)
    } else {
        phydev->link = 1;
    }
    return 0;
}
1800f560:	3000      	movi      	r0, 0
1800f562:	1491      	pop      	r4, r15
        phydev->link = 1;
1800f564:	3301      	movi      	r3, 1
1800f566:	ac76      	st.h      	r3, (r4, 0x2c)
1800f568:	07fc      	br      	0x1800f560	// 1800f560 <genphy_update_link+0x1c>
	...

1800f56c <genphy_read_status>:
  * @note   Check the link, then figure out the current state by comparing
  *         what we advertise with what the link partner advertises. Start
  *         by checking the gigabit possibilities, then move on to 10/100.
  */
int genphy_read_status(struct ethernet_phy_device *phydev)
{
1800f56c:	14d4      	push      	r4-r7, r15
1800f56e:	6d03      	mov      	r4, r0
    int lpa;
    int lpagb = 0;

    /* Update the link, but return if there
     * was an error */
    err = genphy_update_link(phydev);
1800f570:	e3ffffea 	bsr      	0x1800f544	// 1800f544 <genphy_update_link>
1800f574:	6dc3      	mov      	r7, r0
    if(err) {
1800f576:	e920003d 	bnez      	r0, 0x1800f5f0	// 1800f5f0 <genphy_read_status+0x84>
        return err;
    }
    if(AUTONEG_ENABLE == phydev->autoneg) {
1800f57a:	946e      	ld.w      	r3, (r4, 0x38)
1800f57c:	3b41      	cmpnei      	r3, 1
1800f57e:	084b      	bt      	0x1800f614	// 1800f614 <genphy_read_status+0xa8>
        if(phydev->supported & (SUPPORTED_1000baseT_Half |
1800f580:	946c      	ld.w      	r3, (r4, 0x30)
1800f582:	e4632030 	andi      	r3, r3, 48
1800f586:	e9030037 	bez      	r3, 0x1800f5f4	// 1800f5f4 <genphy_read_status+0x88>
                                SUPPORTED_1000baseT_Full)) {
            lpagb = phy_read(phydev, MII_STAT1000);
1800f58a:	310a      	movi      	r1, 10
1800f58c:	6c13      	mov      	r0, r4
1800f58e:	e3ffff09 	bsr      	0x1800f3a0	// 1800f3a0 <phy_read>
1800f592:	6d83      	mov      	r6, r0

            if(lpagb < 0) {
                return lpagb;
            }
            adv = phy_read(phydev, MII_CTRL1000);
1800f594:	3109      	movi      	r1, 9
1800f596:	6c13      	mov      	r0, r4
1800f598:	e3ffff04 	bsr      	0x1800f3a0	// 1800f3a0 <phy_read>

            if(adv < 0) {
                return adv;
            }
            lpagb &= adv << 2;
1800f59c:	4002      	lsli      	r0, r0, 2
1800f59e:	6980      	and      	r6, r0
        }

        lpa = phy_read(phydev, MII_LPA);
1800f5a0:	3105      	movi      	r1, 5
1800f5a2:	6c13      	mov      	r0, r4
1800f5a4:	e3fffefe 	bsr      	0x1800f3a0	// 1800f3a0 <phy_read>
1800f5a8:	6d43      	mov      	r5, r0

        if(lpa < 0) {
            return lpa;
        }
        adv = phy_read(phydev, MII_ADVERTISE);
1800f5aa:	3104      	movi      	r1, 4
1800f5ac:	6c13      	mov      	r0, r4
1800f5ae:	e3fffef9 	bsr      	0x1800f3a0	// 1800f3a0 <phy_read>
        if(adv < 0) {
            return adv;
        }
        lpa &= adv;

        phydev->speed  = SPEED_10;
1800f5b2:	330a      	movi      	r3, 10
1800f5b4:	ac72      	st.h      	r3, (r4, 0x24)
        phydev->duplex = DUPLEX_HALF;
1800f5b6:	3300      	movi      	r3, 0
1800f5b8:	ac73      	st.h      	r3, (r4, 0x26)
        phydev->pause  = phydev->asym_pause = 0;
1800f5ba:	ac75      	st.h      	r3, (r4, 0x2a)
1800f5bc:	ac74      	st.h      	r3, (r4, 0x28)

        if(lpagb & (LPA_1000FULL | LPA_1000HALF)) {
1800f5be:	e4662c00 	andi      	r3, r6, 3072
1800f5c2:	6814      	and      	r0, r5
1800f5c4:	7401      	zexth      	r0, r0
1800f5c6:	e9030019 	bez      	r3, 0x1800f5f8	// 1800f5f8 <genphy_read_status+0x8c>
            phydev->speed = SPEED_1000;
1800f5ca:	33fa      	movi      	r3, 250
            
            if(lpagb & LPA_1000FULL) {
1800f5cc:	e4c62800 	andi      	r6, r6, 2048
            phydev->speed = SPEED_1000;
1800f5d0:	4362      	lsli      	r3, r3, 2
1800f5d2:	ac72      	st.h      	r3, (r4, 0x24)
            if(lpagb & LPA_1000FULL) {
1800f5d4:	e9060004 	bez      	r6, 0x1800f5dc	// 1800f5dc <genphy_read_status+0x70>
                phydev->duplex = DUPLEX_FULL;
1800f5d8:	3301      	movi      	r3, 1
1800f5da:	ac73      	st.h      	r3, (r4, 0x26)
        } else {
            if(lpa & LPA_10FULL) {
                phydev->duplex = DUPLEX_FULL;
            }
        }
        if(phydev->duplex == DUPLEX_FULL){
1800f5dc:	d8645013 	ld.hs      	r3, (r4, 0x26)
1800f5e0:	3b41      	cmpnei      	r3, 1
1800f5e2:	0807      	bt      	0x1800f5f0	// 1800f5f0 <genphy_read_status+0x84>
            phydev->pause = lpa & LPA_PAUSE_CAP ? 1 : 0;
1800f5e4:	c5405543 	zext      	r3, r0, 10, 10
            phydev->asym_pause = lpa & LPA_PAUSE_ASYM ? 1 : 0;
1800f5e8:	c5605560 	zext      	r0, r0, 11, 11
            phydev->pause = lpa & LPA_PAUSE_CAP ? 1 : 0;
1800f5ec:	ac74      	st.h      	r3, (r4, 0x28)
            phydev->asym_pause = lpa & LPA_PAUSE_ASYM ? 1 : 0;
1800f5ee:	ac15      	st.h      	r0, (r4, 0x2a)
        }
        phydev->pause = phydev->asym_pause = 0;
    }

    return 0;
}
1800f5f0:	6c1f      	mov      	r0, r7
1800f5f2:	1494      	pop      	r4-r7, r15
    int lpagb = 0;
1800f5f4:	6d83      	mov      	r6, r0
1800f5f6:	07d5      	br      	0x1800f5a0	// 1800f5a0 <genphy_read_status+0x34>
        } else if(lpa & (LPA_100FULL | LPA_100HALF)) {
1800f5f8:	e4602180 	andi      	r3, r0, 384
1800f5fc:	e9030009 	bez      	r3, 0x1800f60e	// 1800f60e <genphy_read_status+0xa2>
            phydev->speed = SPEED_100;
1800f600:	3364      	movi      	r3, 100
1800f602:	ac72      	st.h      	r3, (r4, 0x24)
            if(lpa & LPA_100FULL) {
1800f604:	e4602100 	andi      	r3, r0, 256
            if(lpa & LPA_10FULL) {
1800f608:	e923ffe8 	bnez      	r3, 0x1800f5d8	// 1800f5d8 <genphy_read_status+0x6c>
1800f60c:	07e8      	br      	0x1800f5dc	// 1800f5dc <genphy_read_status+0x70>
1800f60e:	e4602040 	andi      	r3, r0, 64
1800f612:	07fb      	br      	0x1800f608	// 1800f608 <genphy_read_status+0x9c>
        int bmcr = phy_read(phydev, MII_BMCR);
1800f614:	6c43      	mov      	r1, r0
1800f616:	6c13      	mov      	r0, r4
1800f618:	e3fffec4 	bsr      	0x1800f3a0	// 1800f3a0 <phy_read>
        if(bmcr & BMCR_FULLDPLX) {
1800f61c:	e4602100 	andi      	r3, r0, 256
1800f620:	e903000f 	bez      	r3, 0x1800f63e	// 1800f63e <genphy_read_status+0xd2>
            phydev->duplex = DUPLEX_FULL;
1800f624:	3301      	movi      	r3, 1
1800f626:	ac73      	st.h      	r3, (r4, 0x26)
        if(bmcr & BMCR_SPEED1000) {
1800f628:	e4602040 	andi      	r3, r0, 64
1800f62c:	e903000b 	bez      	r3, 0x1800f642	// 1800f642 <genphy_read_status+0xd6>
            phydev->speed = SPEED_1000;
1800f630:	33fa      	movi      	r3, 250
1800f632:	4362      	lsli      	r3, r3, 2
            phydev->speed = SPEED_10;
1800f634:	ac72      	st.h      	r3, (r4, 0x24)
        phydev->pause = phydev->asym_pause = 0;
1800f636:	3300      	movi      	r3, 0
1800f638:	ac75      	st.h      	r3, (r4, 0x2a)
1800f63a:	ac74      	st.h      	r3, (r4, 0x28)
1800f63c:	07da      	br      	0x1800f5f0	// 1800f5f0 <genphy_read_status+0x84>
            phydev->duplex = DUPLEX_HALF;
1800f63e:	acf3      	st.h      	r7, (r4, 0x26)
1800f640:	07f4      	br      	0x1800f628	// 1800f628 <genphy_read_status+0xbc>
        } else if(bmcr & BMCR_SPEED100) {
1800f642:	3380      	movi      	r3, 128
1800f644:	4366      	lsli      	r3, r3, 6
1800f646:	680c      	and      	r0, r3
1800f648:	e9000004 	bez      	r0, 0x1800f650	// 1800f650 <genphy_read_status+0xe4>
            phydev->speed = SPEED_100;
1800f64c:	3364      	movi      	r3, 100
1800f64e:	07f3      	br      	0x1800f634	// 1800f634 <genphy_read_status+0xc8>
            phydev->speed = SPEED_10;
1800f650:	330a      	movi      	r3, 10
1800f652:	07f1      	br      	0x1800f634	// 1800f634 <genphy_read_status+0xc8>

1800f654 <cpu_task_stack_init>:
#include "csi_core.h"
void *cpu_task_stack_init(cpu_stack_t *stack_base, size_t stack_size,
                          void *arg, task_entry_t entry)
{
    cpu_stack_t *stk;
    uint32_t temp = (uint32_t)(stack_base + stack_size);
1800f654:	4122      	lsli      	r1, r1, 2
1800f656:	6004      	addu      	r0, r1

    temp &= 0xfffffffc;
1800f658:	3880      	bclri      	r0, 0
1800f65a:	3881      	bclri      	r0, 1

    stk = (cpu_stack_t *)temp;
    *(--stk) = (uint32_t)0x28282828L;             /* R28           */
1800f65c:	582f      	subi      	r1, r0, 4
1800f65e:	ea8c0025 	lrw      	r12, 0x28282828	// 1800f6f0 <cpu_task_stack_init+0x9c>
1800f662:	dd812000 	st.w      	r12, (r1, 0x0)
    *(--stk) = (uint32_t)entry;                   /* entry point   */
1800f666:	583f      	subi      	r1, r0, 8
1800f668:	b160      	st.w      	r3, (r1, 0x0)
    *(--stk) = (uint32_t)0x80000140L;             /* PSR           */
1800f66a:	e460100b 	subi      	r3, r0, 12
1800f66e:	ea218000 	movih      	r1, 32768
1800f672:	e421013f 	addi      	r1, r1, 320
1800f676:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)krhino_task_deathbed;    /* R15 (LR)      */
1800f678:	e460100f 	subi      	r3, r0, 16
1800f67c:	103e      	lrw      	r1, 0x1800ec24	// 1800f6f4 <cpu_task_stack_init+0xa0>
1800f67e:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x13131313L;             /* R13           */
1800f680:	e4601013 	subi      	r3, r0, 20
1800f684:	103d      	lrw      	r1, 0x13131313	// 1800f6f8 <cpu_task_stack_init+0xa4>
1800f686:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x12121212L;             /* R12           */
1800f688:	e4601017 	subi      	r3, r0, 24
1800f68c:	103c      	lrw      	r1, 0x12121212	// 1800f6fc <cpu_task_stack_init+0xa8>
1800f68e:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x11111111L;             /* R11           */
1800f690:	e460101b 	subi      	r3, r0, 28
1800f694:	103b      	lrw      	r1, 0x11111111	// 1800f700 <cpu_task_stack_init+0xac>
1800f696:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x10101010L;             /* R10           */
1800f698:	e460101f 	subi      	r3, r0, 32
1800f69c:	103a      	lrw      	r1, 0x10101010	// 1800f704 <cpu_task_stack_init+0xb0>
1800f69e:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x09090909L;             /* R9            */
1800f6a0:	e4601023 	subi      	r3, r0, 36
1800f6a4:	1039      	lrw      	r1, 0x9090909	// 1800f708 <cpu_task_stack_init+0xb4>
1800f6a6:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x00000000L;             /* R8            */
1800f6a8:	e4601027 	subi      	r3, r0, 40
1800f6ac:	3100      	movi      	r1, 0
1800f6ae:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x07070707L;             /* R7            */
1800f6b0:	e460102b 	subi      	r3, r0, 44
1800f6b4:	1036      	lrw      	r1, 0x7070707	// 1800f70c <cpu_task_stack_init+0xb8>
1800f6b6:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x06060606L;             /* R6            */
1800f6b8:	e460102f 	subi      	r3, r0, 48
1800f6bc:	1035      	lrw      	r1, 0x6060606	// 1800f710 <cpu_task_stack_init+0xbc>
1800f6be:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x05050505L;             /* R5            */
1800f6c0:	e4601033 	subi      	r3, r0, 52
1800f6c4:	1034      	lrw      	r1, 0x5050505	// 1800f714 <cpu_task_stack_init+0xc0>
1800f6c6:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x04040404L;             /* R4            */
1800f6c8:	e4601037 	subi      	r3, r0, 56
1800f6cc:	1033      	lrw      	r1, 0x4040404	// 1800f718 <cpu_task_stack_init+0xc4>
1800f6ce:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x03030303L;             /* R3            */
1800f6d0:	e460103b 	subi      	r3, r0, 60
1800f6d4:	1032      	lrw      	r1, 0x3030303	// 1800f71c <cpu_task_stack_init+0xc8>
1800f6d6:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x02020202L;             /* R2            */
1800f6d8:	e460103f 	subi      	r3, r0, 64
1800f6dc:	1031      	lrw      	r1, 0x2020202	// 1800f720 <cpu_task_stack_init+0xcc>
1800f6de:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x01010101L;             /* R1            */
1800f6e0:	e4601043 	subi      	r3, r0, 68
    *(--stk) = (uint32_t)arg;                     /* R0 : argument */
1800f6e4:	2847      	subi      	r0, 72
    *(--stk) = (uint32_t)0x01010101L;             /* R1            */
1800f6e6:	1030      	lrw      	r1, 0x1010101	// 1800f724 <cpu_task_stack_init+0xd0>
1800f6e8:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)arg;                     /* R0 : argument */
1800f6ea:	b040      	st.w      	r2, (r0, 0x0)

    return stk;
}
1800f6ec:	783c      	jmp      	r15
1800f6ee:	0000      	.short	0x0000
1800f6f0:	28282828 	.long	0x28282828
1800f6f4:	1800ec24 	.long	0x1800ec24
1800f6f8:	13131313 	.long	0x13131313
1800f6fc:	12121212 	.long	0x12121212
1800f700:	11111111 	.long	0x11111111
1800f704:	10101010 	.long	0x10101010
1800f708:	09090909 	.long	0x09090909
1800f70c:	07070707 	.long	0x07070707
1800f710:	06060606 	.long	0x06060606
1800f714:	05050505 	.long	0x05050505
1800f718:	04040404 	.long	0x04040404
1800f71c:	03030303 	.long	0x03030303
1800f720:	02020202 	.long	0x02020202
1800f724:	01010101 	.long	0x01010101

1800f728 <ip101g_config_init>:
#include "lib/net/ethphy/eth_mdio_bus.h"
#include "lib/net/ethphy/eth_phy.h"
#include "lib/net/ethphy/phy/ip101g.h"

static int ip101g_config_init(struct ethernet_phy_device *phydev)
{
1800f728:	14d1      	push      	r4, r15
1800f72a:	6d03      	mov      	r4, r0
    /* Disalbe 100BASE-TX EEE capability. Fix the problem of a large number of
     * symbol errors in the communication between IP101GRI and Realtek RTL8168
     * network card.
     */
    phy_write(phydev, 13, 0x0007);
1800f72c:	3207      	movi      	r2, 7
1800f72e:	310d      	movi      	r1, 13
1800f730:	e3fffe86 	bsr      	0x1800f43c	// 1800f43c <phy_write>
    phy_write(phydev, 14, 0x003C);
1800f734:	6c13      	mov      	r0, r4
1800f736:	323c      	movi      	r2, 60
1800f738:	310e      	movi      	r1, 14
1800f73a:	e3fffe81 	bsr      	0x1800f43c	// 1800f43c <phy_write>
    phy_write(phydev, 13, 0x4007);
1800f73e:	6c13      	mov      	r0, r4
1800f740:	ea024007 	movi      	r2, 16391
1800f744:	310d      	movi      	r1, 13
1800f746:	e3fffe7b 	bsr      	0x1800f43c	// 1800f43c <phy_write>
    phy_write(phydev, 14, 0x0000);
1800f74a:	3200      	movi      	r2, 0
1800f74c:	310e      	movi      	r1, 14
1800f74e:	6c13      	mov      	r0, r4
1800f750:	e3fffe76 	bsr      	0x1800f43c	// 1800f43c <phy_write>
    
    return genphy_config_init(phydev);
1800f754:	6c13      	mov      	r0, r4
1800f756:	e3fffe2f 	bsr      	0x1800f3b4	// 1800f3b4 <genphy_config_init>
}
1800f75a:	1491      	pop      	r4, r15

1800f75c <spi_nor_xip_close>:
}

static void spi_nor_xip_close(struct spi_nor_flash *flash)
{
	
}
1800f75c:	783c      	jmp      	r15
	...

1800f760 <spi_nor_qpi_release_power_down>:
{
1800f760:	14d1      	push      	r4, r15
1800f762:	1421      	subi      	r14, r14, 4
1800f764:	6d03      	mov      	r4, r0
    uint8 instruction = SPI_NOR_STANDARD_RELEASE_POWER_DOWN;
1800f766:	3300      	movi      	r3, 0
1800f768:	2b54      	subi      	r3, 85
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800f76a:	9027      	ld.w      	r1, (r0, 0x1c)
1800f76c:	3200      	movi      	r2, 0
1800f76e:	9003      	ld.w      	r0, (r0, 0xc)
    uint8 instruction = SPI_NOR_STANDARD_RELEASE_POWER_DOWN;
1800f770:	dc6e0003 	st.b      	r3, (r14, 0x3)
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800f774:	e3ff9d4a 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, &instruction, 1);
1800f778:	e42e0002 	addi      	r1, r14, 3
1800f77c:	3201      	movi      	r2, 1
1800f77e:	9403      	ld.w      	r0, (r4, 0xc)
1800f780:	e3ff9d38 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1800f784:	3201      	movi      	r2, 1
1800f786:	9427      	ld.w      	r1, (r4, 0x1c)
1800f788:	9403      	ld.w      	r0, (r4, 0xc)
1800f78a:	e3ff9d3f 	bsr      	0x18003208	// 18003208 <spi_set_cs>
}
1800f78e:	1401      	addi      	r14, r14, 4
1800f790:	1491      	pop      	r4, r15
	...

1800f794 <spi_nor_standard_release_power_down>:
1800f794:	14d0      	push      	r15
1800f796:	e3ffffe5 	bsr      	0x1800f760	// 1800f760 <spi_nor_qpi_release_power_down>
1800f79a:	1490      	pop      	r15

1800f79c <spi_nor_qpi_power_down>:
{
1800f79c:	14d1      	push      	r4, r15
1800f79e:	1421      	subi      	r14, r14, 4
1800f7a0:	6d03      	mov      	r4, r0
    uint8 instruction = SPI_NOR_STANDARD_POWER_DOWN;
1800f7a2:	3300      	movi      	r3, 0
1800f7a4:	2b46      	subi      	r3, 71
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800f7a6:	9027      	ld.w      	r1, (r0, 0x1c)
1800f7a8:	3200      	movi      	r2, 0
1800f7aa:	9003      	ld.w      	r0, (r0, 0xc)
    uint8 instruction = SPI_NOR_STANDARD_POWER_DOWN;
1800f7ac:	dc6e0003 	st.b      	r3, (r14, 0x3)
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800f7b0:	e3ff9d2c 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, &instruction, 1);
1800f7b4:	e42e0002 	addi      	r1, r14, 3
1800f7b8:	3201      	movi      	r2, 1
1800f7ba:	9403      	ld.w      	r0, (r4, 0xc)
1800f7bc:	e3ff9d1a 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1800f7c0:	3201      	movi      	r2, 1
1800f7c2:	9427      	ld.w      	r1, (r4, 0x1c)
1800f7c4:	9403      	ld.w      	r0, (r4, 0xc)
1800f7c6:	e3ff9d21 	bsr      	0x18003208	// 18003208 <spi_set_cs>
}
1800f7ca:	1401      	addi      	r14, r14, 4
1800f7cc:	1491      	pop      	r4, r15
	...

1800f7d0 <spi_nor_standard_power_down>:
1800f7d0:	14d0      	push      	r15
1800f7d2:	e3ffffe5 	bsr      	0x1800f79c	// 1800f79c <spi_nor_qpi_power_down>
1800f7d6:	1490      	pop      	r15

1800f7d8 <spi_nor_standard_write_enable>:
{
1800f7d8:	14d1      	push      	r4, r15
1800f7da:	1421      	subi      	r14, r14, 4
1800f7dc:	6d03      	mov      	r4, r0
    uint8 instruction = SPI_NOR_STANDARD_WRITE_ENABLE;
1800f7de:	3306      	movi      	r3, 6
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800f7e0:	9027      	ld.w      	r1, (r0, 0x1c)
1800f7e2:	3200      	movi      	r2, 0
1800f7e4:	9003      	ld.w      	r0, (r0, 0xc)
    uint8 instruction = SPI_NOR_STANDARD_WRITE_ENABLE;
1800f7e6:	dc6e0003 	st.b      	r3, (r14, 0x3)
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800f7ea:	e3ff9d0f 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, &instruction, 1);
1800f7ee:	e42e0002 	addi      	r1, r14, 3
1800f7f2:	3201      	movi      	r2, 1
1800f7f4:	9403      	ld.w      	r0, (r4, 0xc)
1800f7f6:	e3ff9cfd 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1800f7fa:	3201      	movi      	r2, 1
1800f7fc:	9427      	ld.w      	r1, (r4, 0x1c)
1800f7fe:	9403      	ld.w      	r0, (r4, 0xc)
1800f800:	e3ff9d04 	bsr      	0x18003208	// 18003208 <spi_set_cs>
}
1800f804:	1401      	addi      	r14, r14, 4
1800f806:	1491      	pop      	r4, r15

1800f808 <spi_nor_standard_write_disable>:
{
1800f808:	14d1      	push      	r4, r15
1800f80a:	1421      	subi      	r14, r14, 4
1800f80c:	6d03      	mov      	r4, r0
    uint8 instruction = SPI_NOR_STANDARD_WRITE_DISABLE;
1800f80e:	3304      	movi      	r3, 4
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800f810:	9027      	ld.w      	r1, (r0, 0x1c)
1800f812:	3200      	movi      	r2, 0
1800f814:	9003      	ld.w      	r0, (r0, 0xc)
    uint8 instruction = SPI_NOR_STANDARD_WRITE_DISABLE;
1800f816:	dc6e0003 	st.b      	r3, (r14, 0x3)
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800f81a:	e3ff9cf7 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, &instruction, 1);
1800f81e:	e42e0002 	addi      	r1, r14, 3
1800f822:	3201      	movi      	r2, 1
1800f824:	9403      	ld.w      	r0, (r4, 0xc)
1800f826:	e3ff9ce5 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1800f82a:	3201      	movi      	r2, 1
1800f82c:	9427      	ld.w      	r1, (r4, 0x1c)
1800f82e:	9403      	ld.w      	r0, (r4, 0xc)
1800f830:	e3ff9cec 	bsr      	0x18003208	// 18003208 <spi_set_cs>
}
1800f834:	1401      	addi      	r14, r14, 4
1800f836:	1491      	pop      	r4, r15

1800f838 <spi_nor_standard_write_status_register>:
{
1800f838:	14d2      	push      	r4-r5, r15
1800f83a:	1421      	subi      	r14, r14, 4
1800f83c:	6d03      	mov      	r4, r0
1800f83e:	6d47      	mov      	r5, r1
    spi_nor_standard_write_enable(flash);
1800f840:	e3ffffcc 	bsr      	0x1800f7d8	// 1800f7d8 <spi_nor_standard_write_enable>
    write_buf[0] = SPI_NOR_STANDARD_WRITE_STATUS_REG;
1800f844:	3301      	movi      	r3, 1
    write_buf[1] = data;
1800f846:	dcae0001 	st.b      	r5, (r14, 0x1)
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800f84a:	9427      	ld.w      	r1, (r4, 0x1c)
    write_buf[2] = data >> 8;
1800f84c:	4da8      	lsri      	r5, r5, 8
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800f84e:	3200      	movi      	r2, 0
1800f850:	9403      	ld.w      	r0, (r4, 0xc)
    write_buf[0] = SPI_NOR_STANDARD_WRITE_STATUS_REG;
1800f852:	dc6e0000 	st.b      	r3, (r14, 0x0)
    write_buf[2] = data >> 8;
1800f856:	dcae0002 	st.b      	r5, (r14, 0x2)
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800f85a:	e3ff9cd7 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, write_buf, 3);
1800f85e:	6c7b      	mov      	r1, r14
1800f860:	3203      	movi      	r2, 3
1800f862:	9403      	ld.w      	r0, (r4, 0xc)
1800f864:	e3ff9cc6 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1800f868:	3201      	movi      	r2, 1
1800f86a:	9427      	ld.w      	r1, (r4, 0x1c)
1800f86c:	9403      	ld.w      	r0, (r4, 0xc)
1800f86e:	e3ff9ccd 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_nor_standard_write_disable(flash);
1800f872:	6c13      	mov      	r0, r4
1800f874:	e3ffffca 	bsr      	0x1800f808	// 1800f808 <spi_nor_standard_write_disable>
}
1800f878:	1401      	addi      	r14, r14, 4
1800f87a:	1492      	pop      	r4-r5, r15

1800f87c <spi_nor_standard_read_status_register>:
{
1800f87c:	14d1      	push      	r4, r15
1800f87e:	1421      	subi      	r14, r14, 4
1800f880:	6d03      	mov      	r4, r0
    uint8 instruction = SPI_NOR_STANDARD_READ_STATUS_REG;
1800f882:	3305      	movi      	r3, 5
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800f884:	9027      	ld.w      	r1, (r0, 0x1c)
1800f886:	3200      	movi      	r2, 0
1800f888:	9003      	ld.w      	r0, (r0, 0xc)
    uint8 instruction = SPI_NOR_STANDARD_READ_STATUS_REG;
1800f88a:	dc6e0002 	st.b      	r3, (r14, 0x2)
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800f88e:	e3ff9cbd 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, &instruction, 1);
1800f892:	e42e0001 	addi      	r1, r14, 2
1800f896:	3201      	movi      	r2, 1
1800f898:	9403      	ld.w      	r0, (r4, 0xc)
1800f89a:	e3ff9cab 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_read(flash->spidev, &result, 1);
1800f89e:	e42e0002 	addi      	r1, r14, 3
1800f8a2:	3201      	movi      	r2, 1
1800f8a4:	9403      	ld.w      	r0, (r4, 0xc)
1800f8a6:	e3ff9c99 	bsr      	0x180031d8	// 180031d8 <spi_read>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1800f8aa:	3201      	movi      	r2, 1
1800f8ac:	9427      	ld.w      	r1, (r4, 0x1c)
1800f8ae:	9403      	ld.w      	r0, (r4, 0xc)
1800f8b0:	e3ff9cac 	bsr      	0x18003208	// 18003208 <spi_set_cs>
}
1800f8b4:	d80e0003 	ld.b      	r0, (r14, 0x3)
1800f8b8:	1401      	addi      	r14, r14, 4
1800f8ba:	1491      	pop      	r4, r15

1800f8bc <spi_nor_standard_program_security_reg>:
{
1800f8bc:	14d4      	push      	r4-r7, r15
1800f8be:	1421      	subi      	r14, r14, 4
1800f8c0:	6d03      	mov      	r4, r0
1800f8c2:	6d47      	mov      	r5, r1
1800f8c4:	6d8b      	mov      	r6, r2
1800f8c6:	6dcf      	mov      	r7, r3
    spi_nor_standard_write_enable(flash);
1800f8c8:	e3ffff88 	bsr      	0x1800f7d8	// 1800f7d8 <spi_nor_standard_write_enable>
    write_buf[0] = SPI_NOR_STANDARD_PROGRAM_SECURITY_REG;
1800f8cc:	3342      	movi      	r3, 66
1800f8ce:	dc6e0000 	st.b      	r3, (r14, 0x0)
    write_buf[1] = addr >> 16;
1800f8d2:	4d70      	lsri      	r3, r5, 16
1800f8d4:	dc6e0001 	st.b      	r3, (r14, 0x1)
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800f8d8:	3200      	movi      	r2, 0
    write_buf[2] = addr >> 8;
1800f8da:	4d68      	lsri      	r3, r5, 8
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800f8dc:	9427      	ld.w      	r1, (r4, 0x1c)
1800f8de:	9403      	ld.w      	r0, (r4, 0xc)
    write_buf[2] = addr >> 8;
1800f8e0:	dc6e0002 	st.b      	r3, (r14, 0x2)
    write_buf[3] = addr;
1800f8e4:	dcae0003 	st.b      	r5, (r14, 0x3)
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800f8e8:	e3ff9c90 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, write_buf, 4);
1800f8ec:	3204      	movi      	r2, 4
1800f8ee:	6c7b      	mov      	r1, r14
1800f8f0:	9403      	ld.w      	r0, (r4, 0xc)
1800f8f2:	e3ff9c7f 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_write(flash->spidev, buf, buf_size);
1800f8f6:	6c9f      	mov      	r2, r7
1800f8f8:	6c5b      	mov      	r1, r6
1800f8fa:	9403      	ld.w      	r0, (r4, 0xc)
1800f8fc:	e3ff9c7a 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1800f900:	3201      	movi      	r2, 1
1800f902:	9427      	ld.w      	r1, (r4, 0x1c)
1800f904:	9403      	ld.w      	r0, (r4, 0xc)
1800f906:	e3ff9c81 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    while (spi_nor_standard_read_status_register(flash) & SPI_NOR_STATUS_BUSY);
1800f90a:	6c13      	mov      	r0, r4
1800f90c:	e3ffffb8 	bsr      	0x1800f87c	// 1800f87c <spi_nor_standard_read_status_register>
1800f910:	e4002001 	andi      	r0, r0, 1
1800f914:	e920fffb 	bnez      	r0, 0x1800f90a	// 1800f90a <spi_nor_standard_program_security_reg+0x4e>
    spi_nor_standard_write_disable(flash);
1800f918:	6c13      	mov      	r0, r4
1800f91a:	e3ffff77 	bsr      	0x1800f808	// 1800f808 <spi_nor_standard_write_disable>
}
1800f91e:	1401      	addi      	r14, r14, 4
1800f920:	1494      	pop      	r4-r7, r15
	...

1800f924 <spi_nor_standard_erase_security_reg>:
{
1800f924:	14d2      	push      	r4-r5, r15
1800f926:	1421      	subi      	r14, r14, 4
1800f928:	6d03      	mov      	r4, r0
1800f92a:	6d47      	mov      	r5, r1
    spi_nor_standard_write_enable(flash);
1800f92c:	e3ffff56 	bsr      	0x1800f7d8	// 1800f7d8 <spi_nor_standard_write_enable>
    write_buf[0] = SPI_NOR_STANDARD_ERASE_SECURITY_REG;
1800f930:	3344      	movi      	r3, 68
1800f932:	dc6e0000 	st.b      	r3, (r14, 0x0)
    write_buf[1] = addr >> 16;
1800f936:	4d70      	lsri      	r3, r5, 16
1800f938:	dc6e0001 	st.b      	r3, (r14, 0x1)
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800f93c:	3200      	movi      	r2, 0
    write_buf[2] = addr >> 8;
1800f93e:	4d68      	lsri      	r3, r5, 8
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800f940:	9427      	ld.w      	r1, (r4, 0x1c)
1800f942:	9403      	ld.w      	r0, (r4, 0xc)
    write_buf[2] = addr >> 8;
1800f944:	dc6e0002 	st.b      	r3, (r14, 0x2)
    write_buf[3] = addr;
1800f948:	dcae0003 	st.b      	r5, (r14, 0x3)
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800f94c:	e3ff9c5e 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, write_buf, 4);
1800f950:	3204      	movi      	r2, 4
1800f952:	6c7b      	mov      	r1, r14
1800f954:	9403      	ld.w      	r0, (r4, 0xc)
1800f956:	e3ff9c4d 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1800f95a:	3201      	movi      	r2, 1
1800f95c:	9427      	ld.w      	r1, (r4, 0x1c)
1800f95e:	9403      	ld.w      	r0, (r4, 0xc)
1800f960:	e3ff9c54 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    while (spi_nor_standard_read_status_register(flash) & SPI_NOR_STATUS_BUSY);
1800f964:	6c13      	mov      	r0, r4
1800f966:	e3ffff8b 	bsr      	0x1800f87c	// 1800f87c <spi_nor_standard_read_status_register>
1800f96a:	e4002001 	andi      	r0, r0, 1
1800f96e:	e920fffb 	bnez      	r0, 0x1800f964	// 1800f964 <spi_nor_standard_erase_security_reg+0x40>
    spi_nor_standard_write_disable(flash);
1800f972:	6c13      	mov      	r0, r4
1800f974:	e3ffff4a 	bsr      	0x1800f808	// 1800f808 <spi_nor_standard_write_disable>
}
1800f978:	1401      	addi      	r14, r14, 4
1800f97a:	1492      	pop      	r4-r5, r15

1800f97c <spi_nor_standard_chip_erase>:
{
1800f97c:	14d1      	push      	r4, r15
1800f97e:	1421      	subi      	r14, r14, 4
1800f980:	6d03      	mov      	r4, r0
    uint8 instruction = SPI_NOR_STANDARD_CHIP_ERASE;
1800f982:	3300      	movi      	r3, 0
1800f984:	2b38      	subi      	r3, 57
1800f986:	dc6e0003 	st.b      	r3, (r14, 0x3)
    spi_nor_standard_write_enable(flash);
1800f98a:	e3ffff27 	bsr      	0x1800f7d8	// 1800f7d8 <spi_nor_standard_write_enable>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800f98e:	3200      	movi      	r2, 0
1800f990:	9427      	ld.w      	r1, (r4, 0x1c)
1800f992:	9403      	ld.w      	r0, (r4, 0xc)
1800f994:	e3ff9c3a 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, &instruction, 1);
1800f998:	3201      	movi      	r2, 1
1800f99a:	e42e0002 	addi      	r1, r14, 3
1800f99e:	9403      	ld.w      	r0, (r4, 0xc)
1800f9a0:	e3ff9c28 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1800f9a4:	3201      	movi      	r2, 1
1800f9a6:	9427      	ld.w      	r1, (r4, 0x1c)
1800f9a8:	9403      	ld.w      	r0, (r4, 0xc)
1800f9aa:	e3ff9c2f 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    while (spi_nor_standard_read_status_register(flash) & SPI_NOR_STATUS_BUSY);
1800f9ae:	6c13      	mov      	r0, r4
1800f9b0:	e3ffff66 	bsr      	0x1800f87c	// 1800f87c <spi_nor_standard_read_status_register>
1800f9b4:	e4002001 	andi      	r0, r0, 1
1800f9b8:	e920fffb 	bnez      	r0, 0x1800f9ae	// 1800f9ae <spi_nor_standard_chip_erase+0x32>
    spi_nor_standard_write_disable(flash);
1800f9bc:	6c13      	mov      	r0, r4
1800f9be:	e3ffff25 	bsr      	0x1800f808	// 1800f808 <spi_nor_standard_write_disable>
}
1800f9c2:	1401      	addi      	r14, r14, 4
1800f9c4:	1491      	pop      	r4, r15
	...

1800f9c8 <spi_nor_standard_block_erase>:
{
1800f9c8:	14d2      	push      	r4-r5, r15
1800f9ca:	1421      	subi      	r14, r14, 4
1800f9cc:	6d03      	mov      	r4, r0
1800f9ce:	6d47      	mov      	r5, r1
    spi_nor_standard_write_enable(flash);
1800f9d0:	e3ffff04 	bsr      	0x1800f7d8	// 1800f7d8 <spi_nor_standard_write_enable>
    write_buf[0] = SPI_NOR_STANDARD_BLOCK_ERASE;
1800f9d4:	3300      	movi      	r3, 0
1800f9d6:	2b27      	subi      	r3, 40
1800f9d8:	dc6e0000 	st.b      	r3, (r14, 0x0)
    write_buf[1] = addr >> 16;
1800f9dc:	4d70      	lsri      	r3, r5, 16
1800f9de:	dc6e0001 	st.b      	r3, (r14, 0x1)
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800f9e2:	3200      	movi      	r2, 0
    write_buf[2] = addr >> 8;
1800f9e4:	4d68      	lsri      	r3, r5, 8
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800f9e6:	9427      	ld.w      	r1, (r4, 0x1c)
1800f9e8:	9403      	ld.w      	r0, (r4, 0xc)
    write_buf[2] = addr >> 8;
1800f9ea:	dc6e0002 	st.b      	r3, (r14, 0x2)
    write_buf[3] = addr;
1800f9ee:	dcae0003 	st.b      	r5, (r14, 0x3)
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800f9f2:	e3ff9c0b 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, write_buf, 4);
1800f9f6:	3204      	movi      	r2, 4
1800f9f8:	6c7b      	mov      	r1, r14
1800f9fa:	9403      	ld.w      	r0, (r4, 0xc)
1800f9fc:	e3ff9bfa 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1800fa00:	3201      	movi      	r2, 1
1800fa02:	9427      	ld.w      	r1, (r4, 0x1c)
1800fa04:	9403      	ld.w      	r0, (r4, 0xc)
1800fa06:	e3ff9c01 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    while (spi_nor_standard_read_status_register(flash) & SPI_NOR_STATUS_BUSY);
1800fa0a:	6c13      	mov      	r0, r4
1800fa0c:	e3ffff38 	bsr      	0x1800f87c	// 1800f87c <spi_nor_standard_read_status_register>
1800fa10:	e4002001 	andi      	r0, r0, 1
1800fa14:	e920fffb 	bnez      	r0, 0x1800fa0a	// 1800fa0a <spi_nor_standard_block_erase+0x42>
    spi_nor_standard_write_disable(flash);
1800fa18:	6c13      	mov      	r0, r4
1800fa1a:	e3fffef7 	bsr      	0x1800f808	// 1800f808 <spi_nor_standard_write_disable>
}
1800fa1e:	1401      	addi      	r14, r14, 4
1800fa20:	1492      	pop      	r4-r5, r15
	...

1800fa24 <spi_nor_standard_sector_erase>:
{
1800fa24:	14d2      	push      	r4-r5, r15
1800fa26:	1421      	subi      	r14, r14, 4
1800fa28:	6d03      	mov      	r4, r0
1800fa2a:	6d47      	mov      	r5, r1
    spi_nor_standard_write_enable(flash);
1800fa2c:	e3fffed6 	bsr      	0x1800f7d8	// 1800f7d8 <spi_nor_standard_write_enable>
    write_buf[0] = SPI_NOR_STANDARD_SECTOR_ERASE;
1800fa30:	3320      	movi      	r3, 32
1800fa32:	dc6e0000 	st.b      	r3, (r14, 0x0)
    write_buf[1] = addr >> 16;
1800fa36:	4d70      	lsri      	r3, r5, 16
1800fa38:	dc6e0001 	st.b      	r3, (r14, 0x1)
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800fa3c:	3200      	movi      	r2, 0
    write_buf[2] = addr >> 8;
1800fa3e:	4d68      	lsri      	r3, r5, 8
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800fa40:	9427      	ld.w      	r1, (r4, 0x1c)
1800fa42:	9403      	ld.w      	r0, (r4, 0xc)
    write_buf[2] = addr >> 8;
1800fa44:	dc6e0002 	st.b      	r3, (r14, 0x2)
    write_buf[3] = addr;
1800fa48:	dcae0003 	st.b      	r5, (r14, 0x3)
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800fa4c:	e3ff9bde 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, write_buf, 4);
1800fa50:	3204      	movi      	r2, 4
1800fa52:	6c7b      	mov      	r1, r14
1800fa54:	9403      	ld.w      	r0, (r4, 0xc)
1800fa56:	e3ff9bcd 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1800fa5a:	3201      	movi      	r2, 1
1800fa5c:	9427      	ld.w      	r1, (r4, 0x1c)
1800fa5e:	9403      	ld.w      	r0, (r4, 0xc)
1800fa60:	e3ff9bd4 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    while (spi_nor_standard_read_status_register(flash) & SPI_NOR_STATUS_BUSY);
1800fa64:	6c13      	mov      	r0, r4
1800fa66:	e3ffff0b 	bsr      	0x1800f87c	// 1800f87c <spi_nor_standard_read_status_register>
1800fa6a:	e4002001 	andi      	r0, r0, 1
1800fa6e:	e920fffb 	bnez      	r0, 0x1800fa64	// 1800fa64 <spi_nor_standard_sector_erase+0x40>
    spi_nor_standard_write_disable(flash);
1800fa72:	6c13      	mov      	r0, r4
1800fa74:	e3fffeca 	bsr      	0x1800f808	// 1800f808 <spi_nor_standard_write_disable>
}
1800fa78:	1401      	addi      	r14, r14, 4
1800fa7a:	1492      	pop      	r4-r5, r15

1800fa7c <spi_nor_standard_page_program>:
{
1800fa7c:	14d4      	push      	r4-r7, r15
1800fa7e:	1421      	subi      	r14, r14, 4
1800fa80:	6d03      	mov      	r4, r0
1800fa82:	6d47      	mov      	r5, r1
1800fa84:	6d8b      	mov      	r6, r2
1800fa86:	6dcf      	mov      	r7, r3
    spi_nor_standard_write_enable(flash);
1800fa88:	e3fffea8 	bsr      	0x1800f7d8	// 1800f7d8 <spi_nor_standard_write_enable>
    write_buf[0] = SPI_NOR_STANDARD_PAGE_PROGRAM;
1800fa8c:	3302      	movi      	r3, 2
1800fa8e:	dc6e0000 	st.b      	r3, (r14, 0x0)
    write_buf[1] = addr >> 16;
1800fa92:	4d70      	lsri      	r3, r5, 16
1800fa94:	dc6e0001 	st.b      	r3, (r14, 0x1)
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800fa98:	3200      	movi      	r2, 0
    write_buf[2] = addr >> 8;
1800fa9a:	4d68      	lsri      	r3, r5, 8
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800fa9c:	9427      	ld.w      	r1, (r4, 0x1c)
1800fa9e:	9403      	ld.w      	r0, (r4, 0xc)
    write_buf[2] = addr >> 8;
1800faa0:	dc6e0002 	st.b      	r3, (r14, 0x2)
    write_buf[3] = addr;
1800faa4:	dcae0003 	st.b      	r5, (r14, 0x3)
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800faa8:	e3ff9bb0 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, write_buf, 4);
1800faac:	3204      	movi      	r2, 4
1800faae:	6c7b      	mov      	r1, r14
1800fab0:	9403      	ld.w      	r0, (r4, 0xc)
1800fab2:	e3ff9b9f 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_write(flash->spidev, buf, buf_size);
1800fab6:	6c9f      	mov      	r2, r7
1800fab8:	6c5b      	mov      	r1, r6
1800faba:	9403      	ld.w      	r0, (r4, 0xc)
1800fabc:	e3ff9b9a 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1800fac0:	3201      	movi      	r2, 1
1800fac2:	9427      	ld.w      	r1, (r4, 0x1c)
1800fac4:	9403      	ld.w      	r0, (r4, 0xc)
1800fac6:	e3ff9ba1 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    while (spi_nor_standard_read_status_register(flash) & SPI_NOR_STATUS_BUSY);
1800faca:	6c13      	mov      	r0, r4
1800facc:	e3fffed8 	bsr      	0x1800f87c	// 1800f87c <spi_nor_standard_read_status_register>
1800fad0:	e4002001 	andi      	r0, r0, 1
1800fad4:	e920fffb 	bnez      	r0, 0x1800faca	// 1800faca <spi_nor_standard_page_program+0x4e>
    spi_nor_standard_write_disable(flash);
1800fad8:	6c13      	mov      	r0, r4
1800fada:	e3fffe97 	bsr      	0x1800f808	// 1800f808 <spi_nor_standard_write_disable>
}
1800fade:	1401      	addi      	r14, r14, 4
1800fae0:	1494      	pop      	r4-r7, r15
	...

1800fae4 <spi_nor_standard_read_security_reg>:
{
1800fae4:	14d3      	push      	r4-r6, r15
1800fae6:	1422      	subi      	r14, r14, 8
1800fae8:	6d8f      	mov      	r6, r3
    write_buf[0] = SPI_NOR_STANDARD_READ_SECURITY_REG;
1800faea:	3348      	movi      	r3, 72
1800faec:	dc6e0000 	st.b      	r3, (r14, 0x0)
    write_buf[1] = addr >> 16;
1800faf0:	4970      	lsri      	r3, r1, 16
{
1800faf2:	6d03      	mov      	r4, r0
    write_buf[1] = addr >> 16;
1800faf4:	dc6e0001 	st.b      	r3, (r14, 0x1)
    write_buf[2] = addr >> 8;
1800faf8:	4968      	lsri      	r3, r1, 8
{
1800fafa:	6d4b      	mov      	r5, r2
    write_buf[2] = addr >> 8;
1800fafc:	dc6e0002 	st.b      	r3, (r14, 0x2)
    write_buf[3] = addr;
1800fb00:	dc2e0003 	st.b      	r1, (r14, 0x3)
    write_buf[4] = 0;   //dummy
1800fb04:	3300      	movi      	r3, 0
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800fb06:	9027      	ld.w      	r1, (r0, 0x1c)
1800fb08:	3200      	movi      	r2, 0
1800fb0a:	9003      	ld.w      	r0, (r0, 0xc)
    write_buf[4] = 0;   //dummy
1800fb0c:	dc6e0004 	st.b      	r3, (r14, 0x4)
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800fb10:	e3ff9b7c 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, write_buf, 5);
1800fb14:	6c7b      	mov      	r1, r14
1800fb16:	3205      	movi      	r2, 5
1800fb18:	9403      	ld.w      	r0, (r4, 0xc)
1800fb1a:	e3ff9b6b 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_read(flash->spidev, buf, buf_size);
1800fb1e:	6c9b      	mov      	r2, r6
1800fb20:	6c57      	mov      	r1, r5
1800fb22:	9403      	ld.w      	r0, (r4, 0xc)
1800fb24:	e3ff9b5a 	bsr      	0x180031d8	// 180031d8 <spi_read>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1800fb28:	3201      	movi      	r2, 1
1800fb2a:	9427      	ld.w      	r1, (r4, 0x1c)
1800fb2c:	9403      	ld.w      	r0, (r4, 0xc)
1800fb2e:	e3ff9b6d 	bsr      	0x18003208	// 18003208 <spi_set_cs>
}
1800fb32:	1402      	addi      	r14, r14, 8
1800fb34:	1493      	pop      	r4-r6, r15
	...

1800fb38 <spi_nor_standard_read_data>:
{
1800fb38:	14d3      	push      	r4-r6, r15
1800fb3a:	1421      	subi      	r14, r14, 4
1800fb3c:	6d8f      	mov      	r6, r3
    write_buf[0] = SPI_NOR_STANDARD_READ_DATA;
1800fb3e:	3303      	movi      	r3, 3
{
1800fb40:	6d03      	mov      	r4, r0
    write_buf[0] = SPI_NOR_STANDARD_READ_DATA;
1800fb42:	dc6e0000 	st.b      	r3, (r14, 0x0)
    write_buf[1] = addr >> 16;
1800fb46:	4970      	lsri      	r3, r1, 16
{
1800fb48:	6d4b      	mov      	r5, r2
    write_buf[1] = addr >> 16;
1800fb4a:	dc6e0001 	st.b      	r3, (r14, 0x1)
    write_buf[3] = addr;
1800fb4e:	dc2e0003 	st.b      	r1, (r14, 0x3)
    write_buf[2] = addr >> 8;
1800fb52:	4968      	lsri      	r3, r1, 8
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800fb54:	3200      	movi      	r2, 0
1800fb56:	9027      	ld.w      	r1, (r0, 0x1c)
1800fb58:	9003      	ld.w      	r0, (r0, 0xc)
    write_buf[2] = addr >> 8;
1800fb5a:	dc6e0002 	st.b      	r3, (r14, 0x2)
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800fb5e:	e3ff9b55 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, write_buf, 4);
1800fb62:	6c7b      	mov      	r1, r14
1800fb64:	3204      	movi      	r2, 4
1800fb66:	9403      	ld.w      	r0, (r4, 0xc)
1800fb68:	e3ff9b44 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_read(flash->spidev, buf, buf_size);
1800fb6c:	6c9b      	mov      	r2, r6
1800fb6e:	6c57      	mov      	r1, r5
1800fb70:	9403      	ld.w      	r0, (r4, 0xc)
1800fb72:	e3ff9b33 	bsr      	0x180031d8	// 180031d8 <spi_read>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1800fb76:	3201      	movi      	r2, 1
1800fb78:	9427      	ld.w      	r1, (r4, 0x1c)
1800fb7a:	9403      	ld.w      	r0, (r4, 0xc)
1800fb7c:	e3ff9b46 	bsr      	0x18003208	// 18003208 <spi_set_cs>
}
1800fb80:	1401      	addi      	r14, r14, 4
1800fb82:	1493      	pop      	r4-r6, r15

1800fb84 <spi_nor_xip_ioctl>:
{
    spi_ioctl(flash->spidev,SPI_XIP_CUSTOM_ERASE_CMD,param,0);
}

static int32_t spi_nor_xip_ioctl(struct spi_nor_flash *flash, uint32_t cmd,uint32_t param1,uint32_t param2)
{
1800fb84:	14d0      	push      	r15
    return spi_ioctl(flash->spidev,cmd,param1,param2);
1800fb86:	9003      	ld.w      	r0, (r0, 0xc)
1800fb88:	e3ff9b1a 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
}
1800fb8c:	1490      	pop      	r15
	...

1800fb90 <spi_nor_xip_custom_erase>:
{
1800fb90:	14d0      	push      	r15
    spi_ioctl(flash->spidev,SPI_XIP_CUSTOM_ERASE_CMD,param,0);
1800fb92:	6c87      	mov      	r2, r1
1800fb94:	3300      	movi      	r3, 0
1800fb96:	3121      	movi      	r1, 33
1800fb98:	9003      	ld.w      	r0, (r0, 0xc)
1800fb9a:	e3ff9b11 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
}
1800fb9e:	1490      	pop      	r15

1800fba0 <spi_nor_xip_custom_write_data>:
{
1800fba0:	14d0      	push      	r15
    spi_ioctl(flash->spidev,SPI_XIP_CUSTOM_WRITE_CMD,param,0);
1800fba2:	6c87      	mov      	r2, r1
1800fba4:	3300      	movi      	r3, 0
1800fba6:	3120      	movi      	r1, 32
1800fba8:	9003      	ld.w      	r0, (r0, 0xc)
1800fbaa:	e3ff9b09 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
}
1800fbae:	1490      	pop      	r15

1800fbb0 <spi_nor_xip_custom_read_data>:
{
1800fbb0:	14d0      	push      	r15
    spi_ioctl(flash->spidev,SPI_XIP_CUSTOM_READ_CMD,param,0);
1800fbb2:	6c87      	mov      	r2, r1
1800fbb4:	3300      	movi      	r3, 0
1800fbb6:	311f      	movi      	r1, 31
1800fbb8:	9003      	ld.w      	r0, (r0, 0xc)
1800fbba:	e3ff9b01 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
}
1800fbbe:	1490      	pop      	r15

1800fbc0 <spi_nor_xip_read_security_reg>:
{
1800fbc0:	14d3      	push      	r4-r6, r15
1800fbc2:	6d03      	mov      	r4, r0
1800fbc4:	6d4b      	mov      	r5, r2
1800fbc6:	6d8f      	mov      	r6, r3
    spi_ioctl(flash->spidev,SPI_XIP_SET_ADR,addr, XIP_SECURITY_READ);
1800fbc8:	6c87      	mov      	r2, r1
1800fbca:	3305      	movi      	r3, 5
1800fbcc:	310c      	movi      	r1, 12
1800fbce:	9003      	ld.w      	r0, (r0, 0xc)
1800fbd0:	e3ff9af6 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    spi_ioctl(flash->spidev,SPI_XIP_READ_SECURITY_REG, (uint32)buf, buf_size);
1800fbd4:	6cdb      	mov      	r3, r6
1800fbd6:	6c97      	mov      	r2, r5
1800fbd8:	3111      	movi      	r1, 17
1800fbda:	9403      	ld.w      	r0, (r4, 0xc)
1800fbdc:	e3ff9af0 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
}
1800fbe0:	1493      	pop      	r4-r6, r15
	...

1800fbe4 <spi_nor_xip_program_security_reg>:
{
1800fbe4:	14d3      	push      	r4-r6, r15
1800fbe6:	6d03      	mov      	r4, r0
1800fbe8:	6d4b      	mov      	r5, r2
1800fbea:	6d8f      	mov      	r6, r3
    spi_ioctl(flash->spidev,SPI_XIP_SET_ADR,addr, XIP_SECURITY_WRITE);
1800fbec:	6c87      	mov      	r2, r1
1800fbee:	3304      	movi      	r3, 4
1800fbf0:	310c      	movi      	r1, 12
1800fbf2:	9003      	ld.w      	r0, (r0, 0xc)
1800fbf4:	e3ff9ae4 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    spi_ioctl(flash->spidev,SPI_XIP_PROGRAM_SECURITY_REG, (uint32)buf, buf_size);
1800fbf8:	6cdb      	mov      	r3, r6
1800fbfa:	6c97      	mov      	r2, r5
1800fbfc:	3110      	movi      	r1, 16
1800fbfe:	9403      	ld.w      	r0, (r4, 0xc)
1800fc00:	e3ff9ade 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
}
1800fc04:	1493      	pop      	r4-r6, r15
	...

1800fc08 <spi_nor_xip_erase_security_reg>:
{
1800fc08:	14d0      	push      	r15
    spi_ioctl(flash->spidev,SPI_XIP_ERASE_SECURITY_REG,addr, 0);
1800fc0a:	6c87      	mov      	r2, r1
1800fc0c:	3300      	movi      	r3, 0
1800fc0e:	310f      	movi      	r1, 15
1800fc10:	9003      	ld.w      	r0, (r0, 0xc)
1800fc12:	e3ff9ad5 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
}
1800fc16:	1490      	pop      	r15

1800fc18 <spi_nor_xip_block_erase>:
{
1800fc18:	14d0      	push      	r15
	spi_ioctl(flash->spidev,SPI_XIP_ERASE_64KB,addr, 0);
1800fc1a:	6c87      	mov      	r2, r1
1800fc1c:	3300      	movi      	r3, 0
1800fc1e:	310e      	movi      	r1, 14
1800fc20:	9003      	ld.w      	r0, (r0, 0xc)
1800fc22:	e3ff9acd 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
}
1800fc26:	1490      	pop      	r15

1800fc28 <spi_nor_xip_sector_erase>:
{
1800fc28:	14d0      	push      	r15
	spi_ioctl(flash->spidev,SPI_XIP_ERASE_4KB,addr, XIP_ERASE);
1800fc2a:	6c87      	mov      	r2, r1
1800fc2c:	3302      	movi      	r3, 2
1800fc2e:	310d      	movi      	r1, 13
1800fc30:	9003      	ld.w      	r0, (r0, 0xc)
1800fc32:	e3ff9ac5 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
}
1800fc36:	1490      	pop      	r15

1800fc38 <spi_nor_xip_page_program>:
{
1800fc38:	14d3      	push      	r4-r6, r15
1800fc3a:	6d03      	mov      	r4, r0
1800fc3c:	6d4b      	mov      	r5, r2
1800fc3e:	6d8f      	mov      	r6, r3
	spi_ioctl(flash->spidev,SPI_XIP_SET_ADR,addr, XIP_WRITE);
1800fc40:	6c87      	mov      	r2, r1
1800fc42:	3301      	movi      	r3, 1
1800fc44:	310c      	movi      	r1, 12
1800fc46:	9003      	ld.w      	r0, (r0, 0xc)
1800fc48:	e3ff9aba 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    spi_write(flash->spidev, buf, buf_size);
1800fc4c:	6c9b      	mov      	r2, r6
1800fc4e:	6c57      	mov      	r1, r5
1800fc50:	9403      	ld.w      	r0, (r4, 0xc)
1800fc52:	e3ff9acf 	bsr      	0x180031f0	// 180031f0 <spi_write>
}
1800fc56:	1493      	pop      	r4-r6, r15

1800fc58 <spi_nor_xip_read_data>:
{
1800fc58:	14d3      	push      	r4-r6, r15
1800fc5a:	6d03      	mov      	r4, r0
1800fc5c:	6d4b      	mov      	r5, r2
1800fc5e:	6d8f      	mov      	r6, r3
	spi_ioctl(flash->spidev,SPI_XIP_SET_ADR,addr, XIP_READ);
1800fc60:	6c87      	mov      	r2, r1
1800fc62:	3300      	movi      	r3, 0
1800fc64:	310c      	movi      	r1, 12
1800fc66:	9003      	ld.w      	r0, (r0, 0xc)
1800fc68:	e3ff9aaa 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    spi_read(flash->spidev, buf, buf_size);
1800fc6c:	6c9b      	mov      	r2, r6
1800fc6e:	6c57      	mov      	r1, r5
1800fc70:	9403      	ld.w      	r0, (r4, 0xc)
1800fc72:	e3ff9ab3 	bsr      	0x180031d8	// 180031d8 <spi_read>
}
1800fc76:	1493      	pop      	r4-r6, r15

1800fc78 <spi_nor_qpi_write_enable>:
{
1800fc78:	14d1      	push      	r4, r15
1800fc7a:	1421      	subi      	r14, r14, 4
    uint8 instruction = SPI_NOR_QPI_WRITE_ENABLE;
1800fc7c:	3306      	movi      	r3, 6
{
1800fc7e:	6d03      	mov      	r4, r0
    uint8 instruction = SPI_NOR_QPI_WRITE_ENABLE;
1800fc80:	dc6e0003 	st.b      	r3, (r14, 0x3)
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_QUAD_MODE, 0);
1800fc84:	3300      	movi      	r3, 0
1800fc86:	6c4f      	mov      	r1, r3
1800fc88:	3203      	movi      	r2, 3
1800fc8a:	9003      	ld.w      	r0, (r0, 0xc)
1800fc8c:	e3ff9a98 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800fc90:	9427      	ld.w      	r1, (r4, 0x1c)
1800fc92:	3200      	movi      	r2, 0
1800fc94:	9403      	ld.w      	r0, (r4, 0xc)
1800fc96:	e3ff9ab9 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, &instruction, 1);
1800fc9a:	e42e0002 	addi      	r1, r14, 3
1800fc9e:	3201      	movi      	r2, 1
1800fca0:	9403      	ld.w      	r0, (r4, 0xc)
1800fca2:	e3ff9aa7 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1800fca6:	9427      	ld.w      	r1, (r4, 0x1c)
1800fca8:	3201      	movi      	r2, 1
1800fcaa:	9403      	ld.w      	r0, (r4, 0xc)
1800fcac:	e3ff9aae 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_NORMAL_MODE, 0);
1800fcb0:	3300      	movi      	r3, 0
1800fcb2:	3201      	movi      	r2, 1
1800fcb4:	6c4f      	mov      	r1, r3
1800fcb6:	9403      	ld.w      	r0, (r4, 0xc)
1800fcb8:	e3ff9a82 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
}
1800fcbc:	1401      	addi      	r14, r14, 4
1800fcbe:	1491      	pop      	r4, r15

1800fcc0 <spi_nor_qpi_read_status_register>:
{
1800fcc0:	14d1      	push      	r4, r15
1800fcc2:	1421      	subi      	r14, r14, 4
    uint8 instruction = SPI_NOR_QPI_READ_STATUS_REG;
1800fcc4:	3305      	movi      	r3, 5
{
1800fcc6:	6d03      	mov      	r4, r0
    uint8 instruction = SPI_NOR_QPI_READ_STATUS_REG;
1800fcc8:	dc6e0002 	st.b      	r3, (r14, 0x2)
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_QUAD_MODE, 0);
1800fccc:	3300      	movi      	r3, 0
1800fcce:	6c4f      	mov      	r1, r3
1800fcd0:	3203      	movi      	r2, 3
1800fcd2:	9003      	ld.w      	r0, (r0, 0xc)
1800fcd4:	e3ff9a74 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800fcd8:	9427      	ld.w      	r1, (r4, 0x1c)
1800fcda:	3200      	movi      	r2, 0
1800fcdc:	9403      	ld.w      	r0, (r4, 0xc)
1800fcde:	e3ff9a95 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, &instruction, 1);
1800fce2:	e42e0001 	addi      	r1, r14, 2
1800fce6:	3201      	movi      	r2, 1
1800fce8:	9403      	ld.w      	r0, (r4, 0xc)
1800fcea:	e3ff9a83 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_read(flash->spidev, &result, 1);
1800fcee:	e42e0002 	addi      	r1, r14, 3
1800fcf2:	3201      	movi      	r2, 1
1800fcf4:	9403      	ld.w      	r0, (r4, 0xc)
1800fcf6:	e3ff9a71 	bsr      	0x180031d8	// 180031d8 <spi_read>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1800fcfa:	9427      	ld.w      	r1, (r4, 0x1c)
1800fcfc:	3201      	movi      	r2, 1
1800fcfe:	9403      	ld.w      	r0, (r4, 0xc)
1800fd00:	e3ff9a84 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_NORMAL_MODE, 0);
1800fd04:	3300      	movi      	r3, 0
1800fd06:	3201      	movi      	r2, 1
1800fd08:	6c4f      	mov      	r1, r3
1800fd0a:	9403      	ld.w      	r0, (r4, 0xc)
1800fd0c:	e3ff9a58 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
}
1800fd10:	d80e0003 	ld.b      	r0, (r14, 0x3)
1800fd14:	1401      	addi      	r14, r14, 4
1800fd16:	1491      	pop      	r4, r15

1800fd18 <spi_nor_qpi_write_disable>:
{
1800fd18:	14d1      	push      	r4, r15
1800fd1a:	1421      	subi      	r14, r14, 4
    uint8 instruction = SPI_NOR_QPI_WRITE_DISABLE;
1800fd1c:	3304      	movi      	r3, 4
{
1800fd1e:	6d03      	mov      	r4, r0
    uint8 instruction = SPI_NOR_QPI_WRITE_DISABLE;
1800fd20:	dc6e0003 	st.b      	r3, (r14, 0x3)
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_QUAD_MODE, 0);
1800fd24:	3300      	movi      	r3, 0
1800fd26:	6c4f      	mov      	r1, r3
1800fd28:	3203      	movi      	r2, 3
1800fd2a:	9003      	ld.w      	r0, (r0, 0xc)
1800fd2c:	e3ff9a48 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800fd30:	9427      	ld.w      	r1, (r4, 0x1c)
1800fd32:	3200      	movi      	r2, 0
1800fd34:	9403      	ld.w      	r0, (r4, 0xc)
1800fd36:	e3ff9a69 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, &instruction, 1);
1800fd3a:	e42e0002 	addi      	r1, r14, 3
1800fd3e:	3201      	movi      	r2, 1
1800fd40:	9403      	ld.w      	r0, (r4, 0xc)
1800fd42:	e3ff9a57 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1800fd46:	9427      	ld.w      	r1, (r4, 0x1c)
1800fd48:	3201      	movi      	r2, 1
1800fd4a:	9403      	ld.w      	r0, (r4, 0xc)
1800fd4c:	e3ff9a5e 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_NORMAL_MODE, 0);
1800fd50:	3300      	movi      	r3, 0
1800fd52:	3201      	movi      	r2, 1
1800fd54:	6c4f      	mov      	r1, r3
1800fd56:	9403      	ld.w      	r0, (r4, 0xc)
1800fd58:	e3ff9a32 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
}
1800fd5c:	1401      	addi      	r14, r14, 4
1800fd5e:	1491      	pop      	r4, r15

1800fd60 <spi_nor_qpi_chip_erase>:
{
1800fd60:	14d1      	push      	r4, r15
1800fd62:	1421      	subi      	r14, r14, 4
    uint8 instruction = SPI_NOR_QPI_CHIP_ERASE;
1800fd64:	3300      	movi      	r3, 0
{
1800fd66:	6d03      	mov      	r4, r0
    uint8 instruction = SPI_NOR_QPI_CHIP_ERASE;
1800fd68:	2b38      	subi      	r3, 57
1800fd6a:	dc6e0003 	st.b      	r3, (r14, 0x3)
    spi_nor_qpi_write_enable(flash);
1800fd6e:	e3ffff85 	bsr      	0x1800fc78	// 1800fc78 <spi_nor_qpi_write_enable>
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_QUAD_MODE, 0);
1800fd72:	3300      	movi      	r3, 0
1800fd74:	6c4f      	mov      	r1, r3
1800fd76:	3203      	movi      	r2, 3
1800fd78:	9403      	ld.w      	r0, (r4, 0xc)
1800fd7a:	e3ff9a21 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800fd7e:	3200      	movi      	r2, 0
1800fd80:	9427      	ld.w      	r1, (r4, 0x1c)
1800fd82:	9403      	ld.w      	r0, (r4, 0xc)
1800fd84:	e3ff9a42 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, &instruction, 1);
1800fd88:	3201      	movi      	r2, 1
1800fd8a:	e42e0002 	addi      	r1, r14, 3
1800fd8e:	9403      	ld.w      	r0, (r4, 0xc)
1800fd90:	e3ff9a30 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1800fd94:	3201      	movi      	r2, 1
1800fd96:	9427      	ld.w      	r1, (r4, 0x1c)
1800fd98:	9403      	ld.w      	r0, (r4, 0xc)
1800fd9a:	e3ff9a37 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_NORMAL_MODE, 0);
1800fd9e:	3300      	movi      	r3, 0
1800fda0:	3201      	movi      	r2, 1
1800fda2:	6c4f      	mov      	r1, r3
1800fda4:	9403      	ld.w      	r0, (r4, 0xc)
1800fda6:	e3ff9a0b 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    while (spi_nor_qpi_read_status_register(flash) & SPI_NOR_STATUS_BUSY);
1800fdaa:	6c13      	mov      	r0, r4
1800fdac:	e3ffff8a 	bsr      	0x1800fcc0	// 1800fcc0 <spi_nor_qpi_read_status_register>
1800fdb0:	e4002001 	andi      	r0, r0, 1
1800fdb4:	e920fffb 	bnez      	r0, 0x1800fdaa	// 1800fdaa <spi_nor_qpi_chip_erase+0x4a>
    spi_nor_qpi_write_disable(flash);
1800fdb8:	6c13      	mov      	r0, r4
1800fdba:	e3ffffaf 	bsr      	0x1800fd18	// 1800fd18 <spi_nor_qpi_write_disable>
}
1800fdbe:	1401      	addi      	r14, r14, 4
1800fdc0:	1491      	pop      	r4, r15
	...

1800fdc4 <spi_nor_qpi_block_erase>:
{
1800fdc4:	14d2      	push      	r4-r5, r15
1800fdc6:	1421      	subi      	r14, r14, 4
1800fdc8:	6d03      	mov      	r4, r0
1800fdca:	6d47      	mov      	r5, r1
    spi_nor_qpi_write_enable(flash);
1800fdcc:	e3ffff56 	bsr      	0x1800fc78	// 1800fc78 <spi_nor_qpi_write_enable>
    write_buf[0] = SPI_NOR_QPI_BLOCK_ERASE;
1800fdd0:	3300      	movi      	r3, 0
1800fdd2:	2b27      	subi      	r3, 40
1800fdd4:	dc6e0000 	st.b      	r3, (r14, 0x0)
    write_buf[1] = addr >> 16;
1800fdd8:	4d70      	lsri      	r3, r5, 16
1800fdda:	dc6e0001 	st.b      	r3, (r14, 0x1)
    write_buf[2] = addr >> 8;
1800fdde:	4d68      	lsri      	r3, r5, 8
1800fde0:	dc6e0002 	st.b      	r3, (r14, 0x2)
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_QUAD_MODE, 0);
1800fde4:	3300      	movi      	r3, 0
1800fde6:	6c4f      	mov      	r1, r3
1800fde8:	3203      	movi      	r2, 3
1800fdea:	9403      	ld.w      	r0, (r4, 0xc)
    write_buf[3] = addr;
1800fdec:	dcae0003 	st.b      	r5, (r14, 0x3)
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_QUAD_MODE, 0);
1800fdf0:	e3ff99e6 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800fdf4:	3200      	movi      	r2, 0
1800fdf6:	9427      	ld.w      	r1, (r4, 0x1c)
1800fdf8:	9403      	ld.w      	r0, (r4, 0xc)
1800fdfa:	e3ff9a07 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, write_buf, 4);
1800fdfe:	3204      	movi      	r2, 4
1800fe00:	6c7b      	mov      	r1, r14
1800fe02:	9403      	ld.w      	r0, (r4, 0xc)
1800fe04:	e3ff99f6 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1800fe08:	3201      	movi      	r2, 1
1800fe0a:	9427      	ld.w      	r1, (r4, 0x1c)
1800fe0c:	9403      	ld.w      	r0, (r4, 0xc)
1800fe0e:	e3ff99fd 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_NORMAL_MODE, 0);
1800fe12:	3300      	movi      	r3, 0
1800fe14:	3201      	movi      	r2, 1
1800fe16:	6c4f      	mov      	r1, r3
1800fe18:	9403      	ld.w      	r0, (r4, 0xc)
1800fe1a:	e3ff99d1 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    while (spi_nor_qpi_read_status_register(flash) & SPI_NOR_STATUS_BUSY);
1800fe1e:	6c13      	mov      	r0, r4
1800fe20:	e3ffff50 	bsr      	0x1800fcc0	// 1800fcc0 <spi_nor_qpi_read_status_register>
1800fe24:	e4002001 	andi      	r0, r0, 1
1800fe28:	e920fffb 	bnez      	r0, 0x1800fe1e	// 1800fe1e <spi_nor_qpi_block_erase+0x5a>
    spi_nor_qpi_write_disable(flash);
1800fe2c:	6c13      	mov      	r0, r4
1800fe2e:	e3ffff75 	bsr      	0x1800fd18	// 1800fd18 <spi_nor_qpi_write_disable>
}
1800fe32:	1401      	addi      	r14, r14, 4
1800fe34:	1492      	pop      	r4-r5, r15
	...

1800fe38 <spi_nor_qpi_sector_erase>:
{
1800fe38:	14d2      	push      	r4-r5, r15
1800fe3a:	1421      	subi      	r14, r14, 4
1800fe3c:	6d03      	mov      	r4, r0
1800fe3e:	6d47      	mov      	r5, r1
    spi_nor_qpi_write_enable(flash);
1800fe40:	e3ffff1c 	bsr      	0x1800fc78	// 1800fc78 <spi_nor_qpi_write_enable>
    write_buf[0] = SPI_NOR_QPI_SECTOR_ERASE;
1800fe44:	3320      	movi      	r3, 32
1800fe46:	dc6e0000 	st.b      	r3, (r14, 0x0)
    write_buf[1] = addr >> 16;
1800fe4a:	4d70      	lsri      	r3, r5, 16
1800fe4c:	dc6e0001 	st.b      	r3, (r14, 0x1)
    write_buf[2] = addr >> 8;
1800fe50:	4d68      	lsri      	r3, r5, 8
1800fe52:	dc6e0002 	st.b      	r3, (r14, 0x2)
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_QUAD_MODE, 0);
1800fe56:	3300      	movi      	r3, 0
1800fe58:	6c4f      	mov      	r1, r3
1800fe5a:	3203      	movi      	r2, 3
1800fe5c:	9403      	ld.w      	r0, (r4, 0xc)
    write_buf[3] = addr;
1800fe5e:	dcae0003 	st.b      	r5, (r14, 0x3)
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_QUAD_MODE, 0);
1800fe62:	e3ff99ad 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800fe66:	3200      	movi      	r2, 0
1800fe68:	9427      	ld.w      	r1, (r4, 0x1c)
1800fe6a:	9403      	ld.w      	r0, (r4, 0xc)
1800fe6c:	e3ff99ce 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, write_buf, 4);
1800fe70:	3204      	movi      	r2, 4
1800fe72:	6c7b      	mov      	r1, r14
1800fe74:	9403      	ld.w      	r0, (r4, 0xc)
1800fe76:	e3ff99bd 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1800fe7a:	3201      	movi      	r2, 1
1800fe7c:	9427      	ld.w      	r1, (r4, 0x1c)
1800fe7e:	9403      	ld.w      	r0, (r4, 0xc)
1800fe80:	e3ff99c4 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_NORMAL_MODE, 0);
1800fe84:	3300      	movi      	r3, 0
1800fe86:	3201      	movi      	r2, 1
1800fe88:	6c4f      	mov      	r1, r3
1800fe8a:	9403      	ld.w      	r0, (r4, 0xc)
1800fe8c:	e3ff9998 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    while (spi_nor_qpi_read_status_register(flash) & SPI_NOR_STATUS_BUSY);
1800fe90:	6c13      	mov      	r0, r4
1800fe92:	e3ffff17 	bsr      	0x1800fcc0	// 1800fcc0 <spi_nor_qpi_read_status_register>
1800fe96:	e4002001 	andi      	r0, r0, 1
1800fe9a:	e920fffb 	bnez      	r0, 0x1800fe90	// 1800fe90 <spi_nor_qpi_sector_erase+0x58>
    spi_nor_qpi_write_disable(flash);
1800fe9e:	6c13      	mov      	r0, r4
1800fea0:	e3ffff3c 	bsr      	0x1800fd18	// 1800fd18 <spi_nor_qpi_write_disable>
}
1800fea4:	1401      	addi      	r14, r14, 4
1800fea6:	1492      	pop      	r4-r5, r15

1800fea8 <spi_nor_qpi_page_program>:
{
1800fea8:	14d4      	push      	r4-r7, r15
1800feaa:	1421      	subi      	r14, r14, 4
1800feac:	6d03      	mov      	r4, r0
1800feae:	6d47      	mov      	r5, r1
1800feb0:	6d8b      	mov      	r6, r2
1800feb2:	6dcf      	mov      	r7, r3
    spi_nor_qpi_write_enable(flash);
1800feb4:	e3fffee2 	bsr      	0x1800fc78	// 1800fc78 <spi_nor_qpi_write_enable>
    write_buf[0] = SPI_NOR_QPI_PAGE_PROGRAM;
1800feb8:	3302      	movi      	r3, 2
1800feba:	dc6e0000 	st.b      	r3, (r14, 0x0)
    write_buf[1] = addr >> 16;
1800febe:	4d70      	lsri      	r3, r5, 16
1800fec0:	dc6e0001 	st.b      	r3, (r14, 0x1)
    write_buf[2] = addr >> 8;
1800fec4:	4d68      	lsri      	r3, r5, 8
1800fec6:	dc6e0002 	st.b      	r3, (r14, 0x2)
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_QUAD_MODE, 0);
1800feca:	3300      	movi      	r3, 0
1800fecc:	6c4f      	mov      	r1, r3
1800fece:	3203      	movi      	r2, 3
1800fed0:	9403      	ld.w      	r0, (r4, 0xc)
    write_buf[3] = addr;
1800fed2:	dcae0003 	st.b      	r5, (r14, 0x3)
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_QUAD_MODE, 0);
1800fed6:	e3ff9973 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800feda:	3200      	movi      	r2, 0
1800fedc:	9427      	ld.w      	r1, (r4, 0x1c)
1800fede:	9403      	ld.w      	r0, (r4, 0xc)
1800fee0:	e3ff9994 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, write_buf, 4);
1800fee4:	3204      	movi      	r2, 4
1800fee6:	6c7b      	mov      	r1, r14
1800fee8:	9403      	ld.w      	r0, (r4, 0xc)
1800feea:	e3ff9983 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_write(flash->spidev, buf, buf_size);
1800feee:	6c9f      	mov      	r2, r7
1800fef0:	6c5b      	mov      	r1, r6
1800fef2:	9403      	ld.w      	r0, (r4, 0xc)
1800fef4:	e3ff997e 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1800fef8:	3201      	movi      	r2, 1
1800fefa:	9427      	ld.w      	r1, (r4, 0x1c)
1800fefc:	9403      	ld.w      	r0, (r4, 0xc)
1800fefe:	e3ff9985 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_NORMAL_MODE, 0);
1800ff02:	3300      	movi      	r3, 0
1800ff04:	3201      	movi      	r2, 1
1800ff06:	6c4f      	mov      	r1, r3
1800ff08:	9403      	ld.w      	r0, (r4, 0xc)
1800ff0a:	e3ff9959 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    while (spi_nor_qpi_read_status_register(flash) & SPI_NOR_STATUS_BUSY);
1800ff0e:	6c13      	mov      	r0, r4
1800ff10:	e3fffed8 	bsr      	0x1800fcc0	// 1800fcc0 <spi_nor_qpi_read_status_register>
1800ff14:	e4002001 	andi      	r0, r0, 1
1800ff18:	e920fffb 	bnez      	r0, 0x1800ff0e	// 1800ff0e <spi_nor_qpi_page_program+0x66>
    spi_nor_qpi_write_disable(flash);
1800ff1c:	6c13      	mov      	r0, r4
1800ff1e:	e3fffefd 	bsr      	0x1800fd18	// 1800fd18 <spi_nor_qpi_write_disable>
}
1800ff22:	1401      	addi      	r14, r14, 4
1800ff24:	1494      	pop      	r4-r7, r15
	...

1800ff28 <spi_nor_qpi_fast_read_quad_io>:
{
1800ff28:	14d3      	push      	r4-r6, r15
1800ff2a:	1422      	subi      	r14, r14, 8
1800ff2c:	6d8f      	mov      	r6, r3
    write_buf[0] = SPI_NOR_QPI_FAST_READ_QUAD_IO;
1800ff2e:	3300      	movi      	r3, 0
1800ff30:	2b14      	subi      	r3, 21
1800ff32:	dc6e0000 	st.b      	r3, (r14, 0x0)
    write_buf[1] = addr >> 16;
1800ff36:	4970      	lsri      	r3, r1, 16
1800ff38:	dc6e0001 	st.b      	r3, (r14, 0x1)
    write_buf[2] = addr >> 8;
1800ff3c:	4968      	lsri      	r3, r1, 8
1800ff3e:	dc6e0002 	st.b      	r3, (r14, 0x2)
    write_buf[4] = 0x00;
1800ff42:	3300      	movi      	r3, 0
{
1800ff44:	6d03      	mov      	r4, r0
    write_buf[4] = 0x00;
1800ff46:	dc6e0004 	st.b      	r3, (r14, 0x4)
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_QUAD_MODE, 0);
1800ff4a:	3300      	movi      	r3, 0
{
1800ff4c:	6d4b      	mov      	r5, r2
    write_buf[3] = addr;
1800ff4e:	dc2e0003 	st.b      	r1, (r14, 0x3)
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_QUAD_MODE, 0);
1800ff52:	3203      	movi      	r2, 3
1800ff54:	6c4f      	mov      	r1, r3
1800ff56:	9003      	ld.w      	r0, (r0, 0xc)
1800ff58:	e3ff9932 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800ff5c:	9427      	ld.w      	r1, (r4, 0x1c)
1800ff5e:	3200      	movi      	r2, 0
1800ff60:	9403      	ld.w      	r0, (r4, 0xc)
1800ff62:	e3ff9953 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, write_buf, 5);
1800ff66:	6c7b      	mov      	r1, r14
1800ff68:	3205      	movi      	r2, 5
1800ff6a:	9403      	ld.w      	r0, (r4, 0xc)
1800ff6c:	e3ff9942 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_read(flash->spidev, buf, buf_size);
1800ff70:	6c9b      	mov      	r2, r6
1800ff72:	6c57      	mov      	r1, r5
1800ff74:	9403      	ld.w      	r0, (r4, 0xc)
1800ff76:	e3ff9931 	bsr      	0x180031d8	// 180031d8 <spi_read>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1800ff7a:	9427      	ld.w      	r1, (r4, 0x1c)
1800ff7c:	3201      	movi      	r2, 1
1800ff7e:	9403      	ld.w      	r0, (r4, 0xc)
1800ff80:	e3ff9944 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_NORMAL_MODE, 0);
1800ff84:	3300      	movi      	r3, 0
1800ff86:	3201      	movi      	r2, 1
1800ff88:	6c4f      	mov      	r1, r3
1800ff8a:	9403      	ld.w      	r0, (r4, 0xc)
1800ff8c:	e3ff9918 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
}
1800ff90:	1402      	addi      	r14, r14, 8
1800ff92:	1493      	pop      	r4-r6, r15

1800ff94 <spi_nor_qpi_close>:
{
1800ff94:	14d1      	push      	r4, r15
1800ff96:	1421      	subi      	r14, r14, 4
    uint8 instruction = SPI_NOR_QPI_DISABLE_QPI;
1800ff98:	3300      	movi      	r3, 0
1800ff9a:	2b00      	subi      	r3, 1
{
1800ff9c:	6d03      	mov      	r4, r0
    uint8 instruction = SPI_NOR_QPI_DISABLE_QPI;
1800ff9e:	dc6e0003 	st.b      	r3, (r14, 0x3)
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_QUAD_MODE, 0);
1800ffa2:	3300      	movi      	r3, 0
1800ffa4:	6c4f      	mov      	r1, r3
1800ffa6:	3203      	movi      	r2, 3
1800ffa8:	9003      	ld.w      	r0, (r0, 0xc)
1800ffaa:	e3ff9909 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1800ffae:	9427      	ld.w      	r1, (r4, 0x1c)
1800ffb0:	3200      	movi      	r2, 0
1800ffb2:	9403      	ld.w      	r0, (r4, 0xc)
1800ffb4:	e3ff992a 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, &instruction, 1);
1800ffb8:	e42e0002 	addi      	r1, r14, 3
1800ffbc:	3201      	movi      	r2, 1
1800ffbe:	9403      	ld.w      	r0, (r4, 0xc)
1800ffc0:	e3ff9918 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1800ffc4:	9427      	ld.w      	r1, (r4, 0x1c)
1800ffc6:	3201      	movi      	r2, 1
1800ffc8:	9403      	ld.w      	r0, (r4, 0xc)
1800ffca:	e3ff991f 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_NORMAL_MODE, 0);
1800ffce:	3300      	movi      	r3, 0
1800ffd0:	3201      	movi      	r2, 1
1800ffd2:	6c4f      	mov      	r1, r3
1800ffd4:	9403      	ld.w      	r0, (r4, 0xc)
1800ffd6:	e3ff98f3 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
}
1800ffda:	1401      	addi      	r14, r14, 4
1800ffdc:	1491      	pop      	r4, r15
	...

1800ffe0 <spi_nor_quad_page_program>:
{
1800ffe0:	14d3      	push      	r4-r6, r15
1800ffe2:	1421      	subi      	r14, r14, 4
1800ffe4:	6d8f      	mov      	r6, r3
    write_buf[0] = SPI_NOR_QUAD_PAGE_PROGRAM;
1800ffe6:	3332      	movi      	r3, 50
1800ffe8:	dc6e0000 	st.b      	r3, (r14, 0x0)
    write_buf[1] = addr >> 16;
1800ffec:	4970      	lsri      	r3, r1, 16
1800ffee:	dc6e0001 	st.b      	r3, (r14, 0x1)
    write_buf[2] = addr >> 8;
1800fff2:	4968      	lsri      	r3, r1, 8
1800fff4:	dc6e0002 	st.b      	r3, (r14, 0x2)
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_NORMAL_MODE, 0);
1800fff8:	3300      	movi      	r3, 0
{
1800fffa:	6d03      	mov      	r4, r0
1800fffc:	6d4b      	mov      	r5, r2
    write_buf[3] = addr;
1800fffe:	dc2e0003 	st.b      	r1, (r14, 0x3)
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_NORMAL_MODE, 0);
18010002:	3201      	movi      	r2, 1
18010004:	6c4f      	mov      	r1, r3
18010006:	9003      	ld.w      	r0, (r0, 0xc)
18010008:	e3ff98da 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    spi_nor_standard_write_enable(flash);
1801000c:	6c13      	mov      	r0, r4
1801000e:	e3fffbe5 	bsr      	0x1800f7d8	// 1800f7d8 <spi_nor_standard_write_enable>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
18010012:	3200      	movi      	r2, 0
18010014:	9427      	ld.w      	r1, (r4, 0x1c)
18010016:	9403      	ld.w      	r0, (r4, 0xc)
18010018:	e3ff98f8 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, write_buf, 4);
1801001c:	3204      	movi      	r2, 4
1801001e:	6c7b      	mov      	r1, r14
18010020:	9403      	ld.w      	r0, (r4, 0xc)
18010022:	e3ff98e7 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_QUAD_MODE, 0);
18010026:	3300      	movi      	r3, 0
18010028:	6c4f      	mov      	r1, r3
1801002a:	3203      	movi      	r2, 3
1801002c:	9403      	ld.w      	r0, (r4, 0xc)
1801002e:	e3ff98c7 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    spi_write(flash->spidev, buf, buf_size);
18010032:	6c9b      	mov      	r2, r6
18010034:	6c57      	mov      	r1, r5
18010036:	9403      	ld.w      	r0, (r4, 0xc)
18010038:	e3ff98dc 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_NORMAL_MODE, 0);
1801003c:	3300      	movi      	r3, 0
1801003e:	3201      	movi      	r2, 1
18010040:	6c4f      	mov      	r1, r3
18010042:	9403      	ld.w      	r0, (r4, 0xc)
18010044:	e3ff98bc 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
18010048:	3201      	movi      	r2, 1
1801004a:	9427      	ld.w      	r1, (r4, 0x1c)
1801004c:	9403      	ld.w      	r0, (r4, 0xc)
1801004e:	e3ff98dd 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    while (spi_nor_standard_read_status_register(flash) & SPI_NOR_STATUS_BUSY);
18010052:	6c13      	mov      	r0, r4
18010054:	e3fffc14 	bsr      	0x1800f87c	// 1800f87c <spi_nor_standard_read_status_register>
18010058:	e4002001 	andi      	r0, r0, 1
1801005c:	e920fffb 	bnez      	r0, 0x18010052	// 18010052 <spi_nor_quad_page_program+0x72>
    spi_nor_standard_write_disable(flash);
18010060:	6c13      	mov      	r0, r4
18010062:	e3fffbd3 	bsr      	0x1800f808	// 1800f808 <spi_nor_standard_write_disable>
}
18010066:	1401      	addi      	r14, r14, 4
18010068:	1493      	pop      	r4-r6, r15
	...

1801006c <spi_nor_quad_fast_read_quad_output>:
{
1801006c:	14d3      	push      	r4-r6, r15
1801006e:	1422      	subi      	r14, r14, 8
18010070:	6d8f      	mov      	r6, r3
    write_buf[0] = SPI_NOR_QUAD_FAST_READ_QUAD_OUTPUT;
18010072:	336b      	movi      	r3, 107
18010074:	dc6e0000 	st.b      	r3, (r14, 0x0)
    write_buf[1] = addr >> 16;
18010078:	4970      	lsri      	r3, r1, 16
1801007a:	dc6e0001 	st.b      	r3, (r14, 0x1)
    write_buf[2] = addr >> 8;
1801007e:	4968      	lsri      	r3, r1, 8
{
18010080:	6d03      	mov      	r4, r0
18010082:	6d4b      	mov      	r5, r2
    write_buf[2] = addr >> 8;
18010084:	dc6e0002 	st.b      	r3, (r14, 0x2)
    write_buf[3] = addr;
18010088:	dc2e0003 	st.b      	r1, (r14, 0x3)
    write_buf[4] = 0x00;    //dummy clock
1801008c:	3300      	movi      	r3, 0
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1801008e:	9027      	ld.w      	r1, (r0, 0x1c)
18010090:	3200      	movi      	r2, 0
18010092:	9003      	ld.w      	r0, (r0, 0xc)
    write_buf[4] = 0x00;    //dummy clock
18010094:	dc6e0004 	st.b      	r3, (r14, 0x4)
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
18010098:	e3ff98b8 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_NORMAL_MODE, 0);
1801009c:	3300      	movi      	r3, 0
1801009e:	6c4f      	mov      	r1, r3
180100a0:	3201      	movi      	r2, 1
180100a2:	9403      	ld.w      	r0, (r4, 0xc)
180100a4:	e3ff988c 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    spi_write(flash->spidev, write_buf, 5);
180100a8:	6c7b      	mov      	r1, r14
180100aa:	3205      	movi      	r2, 5
180100ac:	9403      	ld.w      	r0, (r4, 0xc)
180100ae:	e3ff98a1 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_QUAD_MODE, 0);
180100b2:	3300      	movi      	r3, 0
180100b4:	6c4f      	mov      	r1, r3
180100b6:	3203      	movi      	r2, 3
180100b8:	9403      	ld.w      	r0, (r4, 0xc)
180100ba:	e3ff9881 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    spi_read(flash->spidev, buf, buf_size);
180100be:	6c9b      	mov      	r2, r6
180100c0:	6c57      	mov      	r1, r5
180100c2:	9403      	ld.w      	r0, (r4, 0xc)
180100c4:	e3ff988a 	bsr      	0x180031d8	// 180031d8 <spi_read>
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_NORMAL_MODE, 0);
180100c8:	3300      	movi      	r3, 0
180100ca:	6c4f      	mov      	r1, r3
180100cc:	3201      	movi      	r2, 1
180100ce:	9403      	ld.w      	r0, (r4, 0xc)
180100d0:	e3ff9876 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
180100d4:	3201      	movi      	r2, 1
180100d6:	9427      	ld.w      	r1, (r4, 0x1c)
180100d8:	9403      	ld.w      	r0, (r4, 0xc)
180100da:	e3ff9897 	bsr      	0x18003208	// 18003208 <spi_set_cs>
}
180100de:	1402      	addi      	r14, r14, 8
180100e0:	1493      	pop      	r4-r6, r15
	...

180100e4 <spi_nor_dual_fast_read_dual_output>:
{
180100e4:	14d3      	push      	r4-r6, r15
180100e6:	1422      	subi      	r14, r14, 8
180100e8:	6d8f      	mov      	r6, r3
    write_buf[0] = SPI_NOR_DUAL_FAST_READ_DUAL_OUTPUT;
180100ea:	333b      	movi      	r3, 59
180100ec:	dc6e0000 	st.b      	r3, (r14, 0x0)
    write_buf[1] = addr >> 16;
180100f0:	4970      	lsri      	r3, r1, 16
180100f2:	dc6e0001 	st.b      	r3, (r14, 0x1)
    write_buf[2] = addr >> 8;
180100f6:	4968      	lsri      	r3, r1, 8
{
180100f8:	6d03      	mov      	r4, r0
180100fa:	6d4b      	mov      	r5, r2
    write_buf[2] = addr >> 8;
180100fc:	dc6e0002 	st.b      	r3, (r14, 0x2)
    write_buf[3] = addr;
18010100:	dc2e0003 	st.b      	r1, (r14, 0x3)
    write_buf[4] = 0x00;    //dummy clock
18010104:	3300      	movi      	r3, 0
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
18010106:	9027      	ld.w      	r1, (r0, 0x1c)
18010108:	3200      	movi      	r2, 0
1801010a:	9003      	ld.w      	r0, (r0, 0xc)
    write_buf[4] = 0x00;    //dummy clock
1801010c:	dc6e0004 	st.b      	r3, (r14, 0x4)
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
18010110:	e3ff987c 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_NORMAL_MODE, 0);
18010114:	3300      	movi      	r3, 0
18010116:	6c4f      	mov      	r1, r3
18010118:	3201      	movi      	r2, 1
1801011a:	9403      	ld.w      	r0, (r4, 0xc)
1801011c:	e3ff9850 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    spi_write(flash->spidev, write_buf, 5);
18010120:	6c7b      	mov      	r1, r14
18010122:	3205      	movi      	r2, 5
18010124:	9403      	ld.w      	r0, (r4, 0xc)
18010126:	e3ff9865 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_DUAL_MODE, 0);
1801012a:	3300      	movi      	r3, 0
1801012c:	6c4f      	mov      	r1, r3
1801012e:	3202      	movi      	r2, 2
18010130:	9403      	ld.w      	r0, (r4, 0xc)
18010132:	e3ff9845 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    spi_read(flash->spidev, buf, buf_size);
18010136:	6c9b      	mov      	r2, r6
18010138:	6c57      	mov      	r1, r5
1801013a:	9403      	ld.w      	r0, (r4, 0xc)
1801013c:	e3ff984e 	bsr      	0x180031d8	// 180031d8 <spi_read>
    spi_ioctl(flash->spidev, SPI_WIRE_MODE_SET, SPI_WIRE_NORMAL_MODE, 0);
18010140:	3300      	movi      	r3, 0
18010142:	6c4f      	mov      	r1, r3
18010144:	3201      	movi      	r2, 1
18010146:	9403      	ld.w      	r0, (r4, 0xc)
18010148:	e3ff983a 	bsr      	0x180031bc	// 180031bc <spi_ioctl>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1801014c:	3201      	movi      	r2, 1
1801014e:	9427      	ld.w      	r1, (r4, 0x1c)
18010150:	9403      	ld.w      	r0, (r4, 0xc)
18010152:	e3ff985b 	bsr      	0x18003208	// 18003208 <spi_set_cs>
}
18010156:	1402      	addi      	r14, r14, 8
18010158:	1493      	pop      	r4-r6, r15
	...

1801015c <spi_nor_qpi_open>:
{
1801015c:	14d1      	push      	r4, r15
1801015e:	1421      	subi      	r14, r14, 4
18010160:	6d03      	mov      	r4, r0
    spi_nor_qpi_release_power_down(flash);
18010162:	e3fffaff 	bsr      	0x1800f760	// 1800f760 <spi_nor_qpi_release_power_down>
    os_sleep_us(50);
18010166:	3032      	movi      	r0, 50
18010168:	e3ffe55e 	bsr      	0x1800cc24	// 1800cc24 <os_sleep_us>
    status = spi_nor_standard_read_status_register(flash);
1801016c:	6c13      	mov      	r0, r4
1801016e:	e3fffb87 	bsr      	0x1800f87c	// 1800f87c <spi_nor_standard_read_status_register>
18010172:	7441      	zexth      	r1, r0
    spi_nor_standard_write_status_register(flash, status);
18010174:	ec210200 	ori      	r1, r1, 512
18010178:	6c13      	mov      	r0, r4
1801017a:	e3fffb5f 	bsr      	0x1800f838	// 1800f838 <spi_nor_standard_write_status_register>
    uint8 instruction = SPI_NOR_STANDARD_ENABLE_QPI;
1801017e:	3338      	movi      	r3, 56
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
18010180:	9427      	ld.w      	r1, (r4, 0x1c)
18010182:	3200      	movi      	r2, 0
18010184:	9403      	ld.w      	r0, (r4, 0xc)
    uint8 instruction = SPI_NOR_STANDARD_ENABLE_QPI;
18010186:	dc6e0003 	st.b      	r3, (r14, 0x3)
    spi_set_cs(flash->spidev, flash->spi_config.cs, 0);
1801018a:	e3ff983f 	bsr      	0x18003208	// 18003208 <spi_set_cs>
    spi_write(flash->spidev, &instruction, 1);
1801018e:	e42e0002 	addi      	r1, r14, 3
18010192:	3201      	movi      	r2, 1
18010194:	9403      	ld.w      	r0, (r4, 0xc)
18010196:	e3ff982d 	bsr      	0x180031f0	// 180031f0 <spi_write>
    spi_set_cs(flash->spidev, flash->spi_config.cs, 1);
1801019a:	3201      	movi      	r2, 1
1801019c:	9427      	ld.w      	r1, (r4, 0x1c)
1801019e:	9403      	ld.w      	r0, (r4, 0xc)
180101a0:	e3ff9834 	bsr      	0x18003208	// 18003208 <spi_set_cs>
}
180101a4:	1401      	addi      	r14, r14, 4
180101a6:	1491      	pop      	r4, r15

180101a8 <spi_nor_quad_open>:
{
180101a8:	14d1      	push      	r4, r15
180101aa:	6d03      	mov      	r4, r0
    spi_nor_standard_release_power_down(flash);
180101ac:	e3fffada 	bsr      	0x1800f760	// 1800f760 <spi_nor_qpi_release_power_down>
    os_sleep_us(50);
180101b0:	3032      	movi      	r0, 50
180101b2:	e3ffe539 	bsr      	0x1800cc24	// 1800cc24 <os_sleep_us>
    status = spi_nor_standard_read_status_register(flash);
180101b6:	6c13      	mov      	r0, r4
180101b8:	e3fffb62 	bsr      	0x1800f87c	// 1800f87c <spi_nor_standard_read_status_register>
180101bc:	7441      	zexth      	r1, r0
    spi_nor_standard_write_status_register(flash, status);
180101be:	ec210200 	ori      	r1, r1, 512
180101c2:	6c13      	mov      	r0, r4
180101c4:	e3fffb3a 	bsr      	0x1800f838	// 1800f838 <spi_nor_standard_write_status_register>
}
180101c8:	1491      	pop      	r4, r15
	...

180101cc <spi_nor_xip_open>:
180101cc:	783c      	jmp      	r15
	...

180101d0 <spi_nor_standard_open>:
180101d0:	783c      	jmp      	r15
	...

180101d4 <spi_nor_bus_get>:
        spi_nor_xip_ioctl,
	},
};

const struct spi_nor_bus *	spi_nor_bus_get(enum spi_nor_mode mode)
{
180101d4:	14d1      	push      	r4, r15
    ASSERT(mode < ARRAY_SIZE(spinor_bus_list));
180101d6:	3804      	cmphsi      	r0, 5
{
180101d8:	6d03      	mov      	r4, r0
    ASSERT(mode < ARRAY_SIZE(spinor_bus_list));
180101da:	0c07      	bf      	0x180101e8	// 180101e8 <spi_nor_bus_get+0x14>
180101dc:	1045      	lrw      	r2, 0x180178a2	// 180101f0 <spi_nor_bus_get+0x1c>
180101de:	ea0103cb 	movi      	r1, 971
180101e2:	1005      	lrw      	r0, 0x18017892	// 180101f4 <spi_nor_bus_get+0x20>
180101e4:	e3ff9718 	bsr      	0x18003014	// 18003014 <assert_internal>
    return &spinor_bus_list[mode];
180101e8:	4406      	lsli      	r0, r4, 6
}
180101ea:	1064      	lrw      	r3, 0x180178c8	// 180101f8 <spi_nor_bus_get+0x24>
180101ec:	600c      	addu      	r0, r3
180101ee:	1491      	pop      	r4, r15
180101f0:	180178a2 	.long	0x180178a2
180101f4:	18017892 	.long	0x18017892
180101f8:	180178c8 	.long	0x180178c8

180101fc <__get_unaligned_le32>:
180101fc:	8061      	ld.b      	r3, (r0, 0x1)
180101fe:	8040      	ld.b      	r2, (r0, 0x0)
18010200:	4368      	lsli      	r3, r3, 8
18010202:	6c8c      	or      	r2, r3
18010204:	8062      	ld.b      	r3, (r0, 0x2)
18010206:	4370      	lsli      	r3, r3, 16
18010208:	8003      	ld.b      	r0, (r0, 0x3)
1801020a:	6cc8      	or      	r3, r2
1801020c:	4018      	lsli      	r0, r0, 24
1801020e:	6c0c      	or      	r0, r3
18010210:	783c      	jmp      	r15
	...

18010214 <save_boot_loader_addr>:
18010214:	14d1      	push      	r4, r15
18010216:	108f      	lrw      	r4, 0x20043de8	// 18010250 <save_boot_loader_addr+0x3c>
18010218:	106f      	lrw      	r3, 0x20043e74	// 18010254 <save_boot_loader_addr+0x40>
1801021a:	d804009e 	ld.b      	r0, (r4, 0x9e)
1801021e:	4002      	lsli      	r0, r0, 2
18010220:	600c      	addu      	r0, r3
18010222:	e3ffffed 	bsr      	0x180101fc	// 180101fc <__get_unaligned_le32>
18010226:	106d      	lrw      	r3, 0x20001fec	// 18010258 <save_boot_loader_addr+0x44>
18010228:	b300      	st.w      	r0, (r3, 0x0)
1801022a:	100d      	lrw      	r0, 0x20043e58	// 1801025c <save_boot_loader_addr+0x48>
1801022c:	e3ffffe8 	bsr      	0x180101fc	// 180101fc <__get_unaligned_le32>
18010230:	106c      	lrw      	r3, 0x20001fe8	// 18010260 <save_boot_loader_addr+0x4c>
18010232:	104d      	lrw      	r2, 0x20001ff1	// 18010264 <save_boot_loader_addr+0x50>
18010234:	b300      	st.w      	r0, (r3, 0x0)
18010236:	d864009f 	ld.b      	r3, (r4, 0x9f)
1801023a:	c4035483 	zext      	r3, r3, 4, 0
1801023e:	a260      	st.b      	r3, (r2, 0x0)
18010240:	d864009f 	ld.b      	r3, (r4, 0x9f)
18010244:	1049      	lrw      	r2, 0x20001ff0	// 18010268 <save_boot_loader_addr+0x54>
18010246:	c4e354e3 	zext      	r3, r3, 7, 7
1801024a:	a260      	st.b      	r3, (r2, 0x0)
1801024c:	1491      	pop      	r4, r15
1801024e:	0000      	.short	0x0000
18010250:	20043de8 	.long	0x20043de8
18010254:	20043e74 	.long	0x20043e74
18010258:	20001fec 	.long	0x20001fec
1801025c:	20043e58 	.long	0x20043e58
18010260:	20001fe8 	.long	0x20001fe8
18010264:	20001ff1 	.long	0x20001ff1
18010268:	20001ff0 	.long	0x20001ff0

1801026c <get_boot_loader_addr>:
1801026c:	1062      	lrw      	r3, 0x20001fec	// 18010274 <get_boot_loader_addr+0x8>
1801026e:	9300      	ld.w      	r0, (r3, 0x0)
18010270:	783c      	jmp      	r15
18010272:	0000      	.short	0x0000
18010274:	20001fec 	.long	0x20001fec

18010278 <get_psram_status>:
18010278:	1062      	lrw      	r3, 0x20001ff0	// 18010280 <get_psram_status+0x8>
1801027a:	8300      	ld.b      	r0, (r3, 0x0)
1801027c:	783c      	jmp      	r15
1801027e:	0000      	.short	0x0000
18010280:	20001ff0 	.long	0x20001ff0

18010284 <get_flash_cap>:
18010284:	1069      	lrw      	r3, 0x20001ff1	// 180102a8 <get_flash_cap+0x24>
18010286:	102a      	lrw      	r1, 0x18017d08	// 180102ac <get_flash_cap+0x28>
18010288:	8300      	ld.b      	r0, (r3, 0x0)
1801028a:	3300      	movi      	r3, 0
1801028c:	4343      	lsli      	r2, r3, 3
1801028e:	6084      	addu      	r2, r1
18010290:	8244      	ld.b      	r2, (r2, 0x4)
18010292:	640a      	cmpne      	r2, r0
18010294:	0804      	bt      	0x1801029c	// 1801029c <get_flash_cap+0x18>
18010296:	d0610900 	ldr.w      	r0, (r1, r3 << 3)
1801029a:	783c      	jmp      	r15
1801029c:	2300      	addi      	r3, 1
1801029e:	3b47      	cmpnei      	r3, 7
180102a0:	0bf6      	bt      	0x1801028c	// 1801028c <get_flash_cap+0x8>
180102a2:	3000      	movi      	r0, 0
180102a4:	07fb      	br      	0x1801029a	// 1801029a <get_flash_cap+0x16>
180102a6:	0000      	.short	0x0000
180102a8:	20001ff1 	.long	0x20001ff1
180102ac:	18017d08 	.long	0x18017d08

180102b0 <get_boot_svn_version>:
180102b0:	1062      	lrw      	r3, 0x20001fe8	// 180102b8 <get_boot_svn_version+0x8>
180102b2:	9300      	ld.w      	r0, (r3, 0x0)
180102b4:	783c      	jmp      	r15
180102b6:	0000      	.short	0x0000
180102b8:	20001fe8 	.long	0x20001fe8

180102bc <sysctrl_efuse_config_and_read>:
180102bc:	14d8      	push      	r4-r11, r15
180102be:	6dcb      	mov      	r7, r2
180102c0:	6d83      	mov      	r6, r0
180102c2:	6d47      	mov      	r5, r1
180102c4:	e000076e 	bsr      	0x180111a0	// 180111a0 <system_clock_get>
180102c8:	1372      	lrw      	r3, 0xf423f	// 18010490 <sysctrl_efuse_config_and_read+0x1d4>
180102ca:	60c0      	addu      	r3, r0
180102cc:	ea00f424 	movi      	r0, 62500
180102d0:	c4804900 	rotli      	r0, r0, 4
180102d4:	c4038023 	divu      	r3, r3, r0
180102d8:	e46320ff 	andi      	r3, r3, 255
180102dc:	e5230012 	addi      	r9, r3, 19
180102e0:	3214      	movi      	r2, 20
180102e2:	e4830095 	addi      	r4, r3, 150
180102e6:	c4498049 	divs      	r9, r9, r2
180102ea:	3297      	movi      	r2, 151
180102ec:	e5830008 	addi      	r12, r3, 9
180102f0:	c4448044 	divs      	r4, r4, r2
180102f4:	320a      	movi      	r2, 10
180102f6:	c44c804c 	divs      	r12, r12, r2
180102fa:	2300      	addi      	r3, 1
180102fc:	eb2c0007 	cmplti      	r12, 8
18010300:	3207      	movi      	r2, 7
18010302:	5361      	asri      	r3, r3, 1
18010304:	c5820c20 	incf      	r12, r2, 0
18010308:	eb23003f 	cmplti      	r3, 64
1801030c:	323f      	movi      	r2, 63
1801030e:	c4620c20 	incf      	r3, r2, 0
18010312:	ea0d0000 	movi      	r13, 0
18010316:	ea00a000 	movi      	r0, 40960
1801031a:	38be      	bseti      	r0, 30
1801031c:	9044      	ld.w      	r2, (r0, 0x10)
1801031e:	e4422004 	andi      	r2, r2, 4
18010322:	e902fffd 	bez      	r2, 0x1801031c	// 1801031c <sysctrl_efuse_config_and_read+0x60>
18010326:	c0006022 	mfcr      	r2, cr<0, 0>
1801032a:	c0807020 	psrclr      	ie
1801032e:	ea214002 	movih      	r1, 16386
18010332:	ea880059 	lrw      	r8, 0x4c5de9b3	// 18010494 <sysctrl_efuse_config_and_read+0x1d8>
18010336:	ea0a00f0 	movi      	r10, 240
1801033a:	dd012000 	st.w      	r8, (r1, 0x0)
1801033e:	c6ea482a 	lsli      	r10, r10, 23
18010342:	dda02001 	st.w      	r13, (r0, 0x4)
18010346:	ea0b00c0 	movi      	r11, 192
1801034a:	dda02002 	st.w      	r13, (r0, 0x8)
1801034e:	dda02003 	st.w      	r13, (r0, 0xc)
18010352:	dda02005 	st.w      	r13, (r0, 0x14)
18010356:	dda02000 	st.w      	r13, (r0, 0x0)
1801035a:	dda02004 	st.w      	r13, (r0, 0x10)
1801035e:	dda02006 	st.w      	r13, (r0, 0x18)
18010362:	c769482d 	lsli      	r13, r9, 27
18010366:	6b68      	and      	r13, r10
18010368:	c5eb482b 	lsli      	r11, r11, 15
1801036c:	c6a4482a 	lsli      	r10, r4, 21
18010370:	6aac      	and      	r10, r11
18010372:	ea0b00c0 	movi      	r11, 192
18010376:	6f68      	or      	r13, r10
18010378:	c5ab482b 	lsli      	r11, r11, 13
1801037c:	c664482a 	lsli      	r10, r4, 19
18010380:	6aac      	and      	r10, r11
18010382:	6f68      	or      	r13, r10
18010384:	ea0a00f0 	movi      	r10, 240
18010388:	c56a482a 	lsli      	r10, r10, 11
1801038c:	c5e94829 	lsli      	r9, r9, 15
18010390:	6a68      	and      	r9, r10
18010392:	6f64      	or      	r13, r9
18010394:	ea0900fc 	movi      	r9, 252
18010398:	c4c94829 	lsli      	r9, r9, 6
1801039c:	4368      	lsli      	r3, r3, 8
1801039e:	68e4      	and      	r3, r9
180103a0:	6cf4      	or      	r3, r13
180103a2:	ea0d00e0 	movi      	r13, 224
180103a6:	c5ed482d 	lsli      	r13, r13, 15
180103aa:	c68c482c 	lsli      	r12, r12, 20
180103ae:	d9002001 	ld.w      	r8, (r0, 0x4)
180103b2:	6b34      	and      	r12, r13
180103b4:	ea0d00ff 	movi      	r13, 255
180103b8:	6ce0      	or      	r3, r8
180103ba:	c58d482d 	lsli      	r13, r13, 12
180103be:	448c      	lsli      	r4, r4, 12
180103c0:	b061      	st.w      	r3, (r0, 0x4)
180103c2:	6934      	and      	r4, r13
180103c4:	9062      	ld.w      	r3, (r0, 0x8)
180103c6:	6f10      	or      	r12, r4
180103c8:	6f0c      	or      	r12, r3
180103ca:	3303      	movi      	r3, 3
180103cc:	dd802002 	st.w      	r12, (r0, 0x8)
180103d0:	b060      	st.w      	r3, (r0, 0x0)
180103d2:	6c03      	mov      	r0, r0
180103d4:	6c03      	mov      	r0, r0
180103d6:	6c03      	mov      	r0, r0
180103d8:	e4422040 	andi      	r2, r2, 64
180103dc:	116f      	lrw      	r3, 0xb3a2164c	// 18010498 <sysctrl_efuse_config_and_read+0x1dc>
180103de:	b160      	st.w      	r3, (r1, 0x0)
180103e0:	e9220031 	bnez      	r2, 0x18010442	// 18010442 <sysctrl_efuse_config_and_read+0x186>
180103e4:	6196      	subu      	r6, r5
180103e6:	ea0c0000 	movi      	r12, 0
180103ea:	ea204002 	movih      	r0, 16386
180103ee:	ea8d002a 	lrw      	r13, 0x4c5de9b3	// 18010494 <sysctrl_efuse_config_and_read+0x1d8>
180103f2:	ea03a000 	movi      	r3, 40960
180103f6:	3bbe      	bseti      	r3, 30
180103f8:	3403      	movi      	r4, 3
180103fa:	ea880028 	lrw      	r8, 0xb3a2164c	// 18010498 <sysctrl_efuse_config_and_read+0x1dc>
180103fe:	2f00      	subi      	r7, 1
18010400:	75dd      	zexth      	r7, r7
18010402:	eb47ffff 	cmpnei      	r7, 65535
18010406:	5e34      	addu      	r1, r6, r5
18010408:	0820      	bt      	0x18010448	// 18010448 <sysctrl_efuse_config_and_read+0x18c>
1801040a:	c0006023 	mfcr      	r3, cr<0, 0>
1801040e:	c0807020 	psrclr      	ie
18010412:	ea214002 	movih      	r1, 16386
18010416:	ea00a000 	movi      	r0, 40960
1801041a:	38be      	bseti      	r0, 30
1801041c:	105e      	lrw      	r2, 0x4c5de9b3	// 18010494 <sysctrl_efuse_config_and_read+0x1d8>
1801041e:	b140      	st.w      	r2, (r1, 0x0)
18010420:	9040      	ld.w      	r2, (r0, 0x0)
18010422:	3a80      	bclri      	r2, 0
18010424:	b040      	st.w      	r2, (r0, 0x0)
18010426:	6c03      	mov      	r0, r0
18010428:	6c03      	mov      	r0, r0
1801042a:	6c03      	mov      	r0, r0
1801042c:	e4632040 	andi      	r3, r3, 64
18010430:	105a      	lrw      	r2, 0xb3a2164c	// 18010498 <sysctrl_efuse_config_and_read+0x1dc>
18010432:	b140      	st.w      	r2, (r1, 0x0)
18010434:	e9030004 	bez      	r3, 0x1801043c	// 1801043c <sysctrl_efuse_config_and_read+0x180>
18010438:	c0807420 	psrset      	ie
1801043c:	ea00ffff 	movi      	r0, 65535
18010440:	1498      	pop      	r4-r11, r15
18010442:	c0807420 	psrset      	ie
18010446:	07cf      	br      	0x180103e4	// 180103e4 <sysctrl_efuse_config_and_read+0x128>
18010448:	c0006022 	mfcr      	r2, cr<0, 0>
1801044c:	c0807020 	psrclr      	ie
18010450:	e42121ff 	andi      	r1, r1, 511
18010454:	dda02000 	st.w      	r13, (r0, 0x0)
18010458:	b380      	st.w      	r4, (r3, 0x0)
1801045a:	b325      	st.w      	r1, (r3, 0x14)
1801045c:	dd832004 	st.w      	r12, (r3, 0x10)
18010460:	9320      	ld.w      	r1, (r3, 0x0)
18010462:	ec210040 	ori      	r1, r1, 64
18010466:	e4422040 	andi      	r2, r2, 64
1801046a:	b320      	st.w      	r1, (r3, 0x0)
1801046c:	9324      	ld.w      	r1, (r3, 0x10)
1801046e:	e4212002 	andi      	r1, r1, 2
18010472:	e901fffd 	bez      	r1, 0x1801046c	// 1801046c <sysctrl_efuse_config_and_read+0x1b0>
18010476:	9326      	ld.w      	r1, (r3, 0x18)
18010478:	a520      	st.b      	r1, (r5, 0x0)
1801047a:	6c03      	mov      	r0, r0
1801047c:	6c03      	mov      	r0, r0
1801047e:	6c03      	mov      	r0, r0
18010480:	dd002000 	st.w      	r8, (r0, 0x0)
18010484:	e9020004 	bez      	r2, 0x1801048c	// 1801048c <sysctrl_efuse_config_and_read+0x1d0>
18010488:	c0807420 	psrset      	ie
1801048c:	2500      	addi      	r5, 1
1801048e:	07b8      	br      	0x180103fe	// 180103fe <sysctrl_efuse_config_and_read+0x142>
18010490:	000f423f 	.long	0x000f423f
18010494:	4c5de9b3 	.long	0x4c5de9b3
18010498:	b3a2164c 	.long	0xb3a2164c

1801049c <sysctrl_efuse_adda_vref_get>:
1801049c:	14d0      	push      	r15
1801049e:	1421      	subi      	r14, r14, 4
180104a0:	6c7b      	mov      	r1, r14
180104a2:	3202      	movi      	r2, 2
180104a4:	302a      	movi      	r0, 42
180104a6:	e3ffff0b 	bsr      	0x180102bc	// 180102bc <sysctrl_efuse_config_and_read>
180104aa:	d86e0001 	ld.b      	r3, (r14, 0x1)
180104ae:	4368      	lsli      	r3, r3, 8
180104b0:	d80e0000 	ld.b      	r0, (r14, 0x0)
180104b4:	e4632300 	andi      	r3, r3, 768
180104b8:	6c0c      	or      	r0, r3
180104ba:	1401      	addi      	r14, r14, 4
180104bc:	1490      	pop      	r15
	...

180104c0 <sysctrl_efuse_tsensor_get>:
180104c0:	14d0      	push      	r15
180104c2:	1421      	subi      	r14, r14, 4
180104c4:	6c7b      	mov      	r1, r14
180104c6:	3202      	movi      	r2, 2
180104c8:	3024      	movi      	r0, 36
180104ca:	e3fffef9 	bsr      	0x180102bc	// 180102bc <sysctrl_efuse_config_and_read>
180104ce:	d86e0001 	ld.b      	r3, (r14, 0x1)
180104d2:	4368      	lsli      	r3, r3, 8
180104d4:	d80e0000 	ld.b      	r0, (r14, 0x0)
180104d8:	e4632f00 	andi      	r3, r3, 3840
180104dc:	6c0c      	or      	r0, r3
180104de:	1401      	addi      	r14, r14, 4
180104e0:	1490      	pop      	r15
	...

180104e4 <sysctrl_efuse_aubias_sel_vref100_vdd>:
180104e4:	14d0      	push      	r15
180104e6:	1421      	subi      	r14, r14, 4
180104e8:	6c7b      	mov      	r1, r14
180104ea:	3202      	movi      	r2, 2
180104ec:	302b      	movi      	r0, 43
180104ee:	e3fffee7 	bsr      	0x180102bc	// 180102bc <sysctrl_efuse_config_and_read>
180104f2:	d80e0000 	ld.b      	r0, (r14, 0x0)
180104f6:	c44054a0 	zext      	r0, r0, 5, 2
180104fa:	1401      	addi      	r14, r14, 4
180104fc:	1490      	pop      	r15
	...

18010500 <sysctrl_efuse_aubias_sel_vcmau_vdd>:
18010500:	14d0      	push      	r15
18010502:	1421      	subi      	r14, r14, 4
18010504:	6c7b      	mov      	r1, r14
18010506:	3202      	movi      	r2, 2
18010508:	302b      	movi      	r0, 43
1801050a:	e3fffed9 	bsr      	0x180102bc	// 180102bc <sysctrl_efuse_config_and_read>
1801050e:	d86e0001 	ld.b      	r3, (r14, 0x1)
18010512:	d80e0000 	ld.b      	r0, (r14, 0x0)
18010516:	4362      	lsli      	r3, r3, 2
18010518:	e463200c 	andi      	r3, r3, 12
1801051c:	4806      	lsri      	r0, r0, 6
1801051e:	6c0c      	or      	r0, r3
18010520:	1401      	addi      	r14, r14, 4
18010522:	1490      	pop      	r15

18010524 <sysctrl_efuse_aubias_sel_vcc27au_vdd>:
18010524:	14d0      	push      	r15
18010526:	1421      	subi      	r14, r14, 4
18010528:	6c7b      	mov      	r1, r14
1801052a:	3202      	movi      	r2, 2
1801052c:	302b      	movi      	r0, 43
1801052e:	e3fffec7 	bsr      	0x180102bc	// 180102bc <sysctrl_efuse_config_and_read>
18010532:	d80e0001 	ld.b      	r0, (r14, 0x1)
18010536:	c4405480 	zext      	r0, r0, 4, 2
1801053a:	1401      	addi      	r14, r14, 4
1801053c:	1490      	pop      	r15
	...

18010540 <sysctrl_efuse_audio_en>:
18010540:	14d0      	push      	r15
18010542:	1421      	subi      	r14, r14, 4
18010544:	6c7b      	mov      	r1, r14
18010546:	3201      	movi      	r2, 1
18010548:	3076      	movi      	r0, 118
1801054a:	e3fffeb9 	bsr      	0x180102bc	// 180102bc <sysctrl_efuse_config_and_read>
1801054e:	d80e0000 	ld.b      	r0, (r14, 0x0)
18010552:	c4805480 	zext      	r0, r0, 4, 4
18010556:	1401      	addi      	r14, r14, 4
18010558:	1490      	pop      	r15
	...

1801055c <sysctrl_efuse_sys_param_handle>:
1801055c:	14d3      	push      	r4-r6, r15
1801055e:	8066      	ld.b      	r3, (r0, 0x6)
18010560:	4b64      	lsri      	r3, r3, 4
18010562:	3b40      	cmpnei      	r3, 0
18010564:	ea068003 	movi      	r6, 32771
18010568:	c5e64906 	rotli      	r6, r6, 15
1801056c:	3208      	movi      	r2, 8
1801056e:	c4620c20 	incf      	r3, r2, 0
18010572:	3200      	movi      	r2, 0
18010574:	9629      	ld.w      	r1, (r6, 0x24)
18010576:	2af0      	subi      	r2, 241
18010578:	6d03      	mov      	r4, r0
1801057a:	6848      	and      	r1, r2
1801057c:	4364      	lsli      	r3, r3, 4
1801057e:	6c4c      	or      	r1, r3
18010580:	101c      	lrw      	r0, 0x40018024	// 180105f0 <sysctrl_efuse_sys_param_handle+0x94>
18010582:	e000014f 	bsr      	0x18010820	// 18010820 <pmu_reg_write>
18010586:	ea254002 	movih      	r5, 16386
1801058a:	846b      	ld.b      	r3, (r4, 0xb)
1801058c:	3b40      	cmpnei      	r3, 0
1801058e:	3288      	movi      	r2, 136
18010590:	c4620c20 	incf      	r3, r2, 0
18010594:	ea0101fe 	movi      	r1, 510
18010598:	6c46      	nor      	r1, r1
1801059a:	d845203b 	ld.w      	r2, (r5, 0xec)
1801059e:	6884      	and      	r2, r1
180105a0:	60cc      	addu      	r3, r3
180105a2:	6cc8      	or      	r3, r2
180105a4:	dc65203b 	st.w      	r3, (r5, 0xec)
180105a8:	846a      	ld.b      	r3, (r4, 0xa)
180105aa:	c4435463 	zext      	r3, r3, 3, 2
180105ae:	3b40      	cmpnei      	r3, 0
180105b0:	3202      	movi      	r2, 2
180105b2:	c4620c20 	incf      	r3, r2, 0
180105b6:	9628      	ld.w      	r1, (r6, 0x20)
180105b8:	4377      	lsli      	r3, r3, 23
180105ba:	3997      	bclri      	r1, 23
180105bc:	3998      	bclri      	r1, 24
180105be:	6c4c      	or      	r1, r3
180105c0:	100d      	lrw      	r0, 0x40018020	// 180105f4 <sysctrl_efuse_sys_param_handle+0x98>
180105c2:	e000012f 	bsr      	0x18010820	// 18010820 <pmu_reg_write>
180105c6:	8471      	ld.b      	r3, (r4, 0x11)
180105c8:	8450      	ld.b      	r2, (r4, 0x10)
180105ca:	60cc      	addu      	r3, r3
180105cc:	4a47      	lsri      	r2, r2, 7
180105ce:	e4632006 	andi      	r3, r3, 6
180105d2:	6cc8      	or      	r3, r2
180105d4:	3b40      	cmpnei      	r3, 0
180105d6:	3203      	movi      	r2, 3
180105d8:	ea21fff9 	movih      	r1, 65529
180105dc:	c4620c20 	incf      	r3, r2, 0
180105e0:	2900      	subi      	r1, 1
180105e2:	9546      	ld.w      	r2, (r5, 0x18)
180105e4:	6884      	and      	r2, r1
180105e6:	4370      	lsli      	r3, r3, 16
180105e8:	6cc8      	or      	r3, r2
180105ea:	b566      	st.w      	r3, (r5, 0x18)
180105ec:	1493      	pop      	r4-r6, r15
180105ee:	0000      	.short	0x0000
180105f0:	40018024 	.long	0x40018024
180105f4:	40018020 	.long	0x40018020

180105f8 <sysctrl_chipdcn_compid_check_do>:
180105f8:	ea234002 	movih      	r3, 16386
180105fc:	9357      	ld.w      	r2, (r3, 0x5c)
180105fe:	c60256e2 	zext      	r2, r2, 23, 16
18010602:	1067      	lrw      	r3, 0x20001ff4	// 1801061c <sysctrl_chipdcn_compid_check_do+0x24>
18010604:	e9020008 	bez      	r2, 0x18010614	// 18010614 <sysctrl_chipdcn_compid_check_do+0x1c>
18010608:	8343      	ld.b      	r2, (r3, 0x3)
1801060a:	3100      	movi      	r1, 0
1801060c:	c4415c04 	ins      	r2, r1, 4, 4
18010610:	a343      	st.b      	r2, (r3, 0x3)
18010612:	783c      	jmp      	r15
18010614:	8343      	ld.b      	r2, (r3, 0x3)
18010616:	3101      	movi      	r1, 1
18010618:	07fa      	br      	0x1801060c	// 1801060c <sysctrl_chipdcn_compid_check_do+0x14>
1801061a:	0000      	.short	0x0000
1801061c:	20001ff4 	.long	0x20001ff4

18010620 <sysctrl_efuse_validity_handle>:
18010620:	14d5      	push      	r4-r8, r15
18010622:	1429      	subi      	r14, r14, 36
18010624:	3080      	movi      	r0, 128
18010626:	e3ffe17d 	bsr      	0x1800c920	// 1800c920 <_os_malloc>
1801062a:	6d43      	mov      	r5, r0
1801062c:	303b      	movi      	r0, 59
1801062e:	e3ff9521 	bsr      	0x18003070	// 18003070 <dev_get>
18010632:	6d83      	mov      	r6, r0
18010634:	e9200008 	bnez      	r0, 0x18010644	// 18010644 <sysctrl_efuse_validity_handle+0x24>
18010638:	124c      	lrw      	r2, 0x18017da4	// 18010768 <sysctrl_efuse_validity_handle+0x148>
1801063a:	ea0101ef 	movi      	r1, 495
1801063e:	120c      	lrw      	r0, 0x18017d40	// 1801076c <sysctrl_efuse_validity_handle+0x14c>
18010640:	e3ff94ea 	bsr      	0x18003014	// 18003014 <assert_internal>
18010644:	3700      	movi      	r7, 0
18010646:	128b      	lrw      	r4, 0x20001ff4	// 18010770 <sysctrl_efuse_validity_handle+0x150>
18010648:	3280      	movi      	r2, 128
1801064a:	6c57      	mov      	r1, r5
1801064c:	6c1f      	mov      	r0, r7
1801064e:	b4e0      	st.w      	r7, (r4, 0x0)
18010650:	b4e1      	st.w      	r7, (r4, 0x4)
18010652:	e3fffe35 	bsr      	0x180102bc	// 180102bc <sysctrl_efuse_config_and_read>
18010656:	3303      	movi      	r3, 3
18010658:	dc6e100c 	st.h      	r3, (r14, 0x18)
1801065c:	5d66      	addi      	r3, r5, 2
1801065e:	b867      	st.w      	r3, (r14, 0x1c)
18010660:	3307      	movi      	r3, 7
18010662:	b868      	st.w      	r3, (r14, 0x20)
18010664:	1a05      	addi      	r2, r14, 20
18010666:	6cdf      	mov      	r3, r7
18010668:	1906      	addi      	r1, r14, 24
1801066a:	6c1b      	mov      	r0, r6
1801066c:	e3ffc310 	bsr      	0x18008c8c	// 18008c8c <hg_crc8_calc_nonos>
18010670:	e920000d 	bnez      	r0, 0x1801068a	// 1801068a <sysctrl_efuse_validity_handle+0x6a>
18010674:	9865      	ld.w      	r3, (r14, 0x14)
18010676:	e4634055 	xori      	r3, r3, 85
1801067a:	8549      	ld.b      	r2, (r5, 0x9)
1801067c:	648e      	cmpne      	r3, r2
1801067e:	0806      	bt      	0x1801068a	// 1801068a <sysctrl_efuse_validity_handle+0x6a>
18010680:	8460      	ld.b      	r3, (r4, 0x0)
18010682:	3201      	movi      	r2, 1
18010684:	c4625c00 	ins      	r3, r2, 0, 0
18010688:	a460      	st.b      	r3, (r4, 0x0)
1801068a:	e4650018 	addi      	r3, r5, 25
1801068e:	b867      	st.w      	r3, (r14, 0x1c)
18010690:	3314      	movi      	r3, 20
18010692:	b868      	st.w      	r3, (r14, 0x20)
18010694:	1a05      	addi      	r2, r14, 20
18010696:	3300      	movi      	r3, 0
18010698:	1906      	addi      	r1, r14, 24
1801069a:	6c1b      	mov      	r0, r6
1801069c:	e3ffc2f8 	bsr      	0x18008c8c	// 18008c8c <hg_crc8_calc_nonos>
180106a0:	e9200023 	bnez      	r0, 0x180106e6	// 180106e6 <sysctrl_efuse_validity_handle+0xc6>
180106a4:	9865      	ld.w      	r3, (r14, 0x14)
180106a6:	e4634055 	xori      	r3, r3, 85
180106aa:	d845002d 	ld.b      	r2, (r5, 0x2d)
180106ae:	648e      	cmpne      	r3, r2
180106b0:	081b      	bt      	0x180106e6	// 180106e6 <sysctrl_efuse_validity_handle+0xc6>
180106b2:	8460      	ld.b      	r3, (r4, 0x0)
180106b4:	3201      	movi      	r2, 1
180106b6:	c4625c02 	ins      	r3, r2, 2, 2
180106ba:	a460      	st.b      	r3, (r4, 0x0)
180106bc:	8c60      	ld.h      	r3, (r4, 0x0)
180106be:	c4605ce4 	ins      	r3, r0, 11, 4
180106c2:	ac60      	st.h      	r3, (r4, 0x0)
180106c4:	9460      	ld.w      	r3, (r4, 0x0)
180106c6:	d8450024 	ld.b      	r2, (r5, 0x24)
180106ca:	c4625cec 	ins      	r3, r2, 19, 12
180106ce:	b460      	st.w      	r3, (r4, 0x0)
180106d0:	8c61      	ld.h      	r3, (r4, 0x2)
180106d2:	d8450025 	ld.b      	r2, (r5, 0x25)
180106d6:	c4625ce4 	ins      	r3, r2, 11, 4
180106da:	b401      	st.w      	r0, (r4, 0x4)
180106dc:	e4050017 	addi      	r0, r5, 24
180106e0:	ac61      	st.h      	r3, (r4, 0x2)
180106e2:	e3ffff3d 	bsr      	0x1801055c	// 1801055c <sysctrl_efuse_sys_param_handle>
180106e6:	3303      	movi      	r3, 3
180106e8:	dc6e100c 	st.h      	r3, (r14, 0x18)
180106ec:	e465002e 	addi      	r3, r5, 47
180106f0:	b867      	st.w      	r3, (r14, 0x1c)
180106f2:	3343      	movi      	r3, 67
180106f4:	b868      	st.w      	r3, (r14, 0x20)
180106f6:	1a05      	addi      	r2, r14, 20
180106f8:	3300      	movi      	r3, 0
180106fa:	1906      	addi      	r1, r14, 24
180106fc:	6c1b      	mov      	r0, r6
180106fe:	e3ffc2c7 	bsr      	0x18008c8c	// 18008c8c <hg_crc8_calc_nonos>
18010702:	e920000e 	bnez      	r0, 0x1801071e	// 1801071e <sysctrl_efuse_validity_handle+0xfe>
18010706:	9865      	ld.w      	r3, (r14, 0x14)
18010708:	e4634055 	xori      	r3, r3, 85
1801070c:	d8450072 	ld.b      	r2, (r5, 0x72)
18010710:	648e      	cmpne      	r3, r2
18010712:	0806      	bt      	0x1801071e	// 1801071e <sysctrl_efuse_validity_handle+0xfe>
18010714:	8460      	ld.b      	r3, (r4, 0x0)
18010716:	3201      	movi      	r2, 1
18010718:	c4625c03 	ins      	r3, r2, 3, 3
1801071c:	a460      	st.b      	r3, (r4, 0x0)
1801071e:	e3ffff6d 	bsr      	0x180105f8	// 180105f8 <sysctrl_chipdcn_compid_check_do>
18010722:	6d97      	mov      	r6, r5
18010724:	e4e5007f 	addi      	r7, r5, 128
18010728:	ea880013 	lrw      	r8, 0x18017d67	// 18010774 <sysctrl_efuse_validity_handle+0x154>
1801072c:	8607      	ld.b      	r0, (r6, 0x7)
1801072e:	8662      	ld.b      	r3, (r6, 0x2)
18010730:	8641      	ld.b      	r2, (r6, 0x1)
18010732:	8620      	ld.b      	r1, (r6, 0x0)
18010734:	b804      	st.w      	r0, (r14, 0x10)
18010736:	8606      	ld.b      	r0, (r6, 0x6)
18010738:	b803      	st.w      	r0, (r14, 0xc)
1801073a:	8605      	ld.b      	r0, (r6, 0x5)
1801073c:	b802      	st.w      	r0, (r14, 0x8)
1801073e:	8604      	ld.b      	r0, (r6, 0x4)
18010740:	b801      	st.w      	r0, (r14, 0x4)
18010742:	8603      	ld.b      	r0, (r6, 0x3)
18010744:	b800      	st.w      	r0, (r14, 0x0)
18010746:	2607      	addi      	r6, 8
18010748:	6c23      	mov      	r0, r8
1801074a:	e3ffe1bd 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
1801074e:	659e      	cmpne      	r7, r6
18010750:	0bee      	bt      	0x1801072c	// 1801072c <sysctrl_efuse_validity_handle+0x10c>
18010752:	e00006b5 	bsr      	0x180114bc	// 180114bc <system_clocks_show>
18010756:	9420      	ld.w      	r1, (r4, 0x0)
18010758:	1008      	lrw      	r0, 0x18017d92	// 18010778 <sysctrl_efuse_validity_handle+0x158>
1801075a:	e3ffe1b5 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
1801075e:	6c17      	mov      	r0, r5
18010760:	e3ffe108 	bsr      	0x1800c970	// 1800c970 <_os_free>
18010764:	1409      	addi      	r14, r14, 36
18010766:	1495      	pop      	r4-r8, r15
18010768:	18017da4 	.long	0x18017da4
1801076c:	18017d40 	.long	0x18017d40
18010770:	20001ff4 	.long	0x20001ff4
18010774:	18017d67 	.long	0x18017d67
18010778:	18017d92 	.long	0x18017d92

1801077c <sysctrl_efuse_mac_addr_calc>:
1801077c:	14d1      	push      	r4, r15
1801077e:	1422      	subi      	r14, r14, 8
18010780:	6d03      	mov      	r4, r0
18010782:	3206      	movi      	r2, 6
18010784:	6c7b      	mov      	r1, r14
18010786:	3010      	movi      	r0, 16
18010788:	e3fffd9a 	bsr      	0x180102bc	// 180102bc <sysctrl_efuse_config_and_read>
1801078c:	d84e0001 	ld.b      	r2, (r14, 0x1)
18010790:	d86e0000 	ld.b      	r3, (r14, 0x0)
18010794:	6cc8      	or      	r3, r2
18010796:	d84e0002 	ld.b      	r2, (r14, 0x2)
1801079a:	6cc8      	or      	r3, r2
1801079c:	d84e0003 	ld.b      	r2, (r14, 0x3)
180107a0:	6cc8      	or      	r3, r2
180107a2:	d84e0004 	ld.b      	r2, (r14, 0x4)
180107a6:	6cc8      	or      	r3, r2
180107a8:	d84e0005 	ld.b      	r2, (r14, 0x5)
180107ac:	6cc8      	or      	r3, r2
180107ae:	e9230024 	bnez      	r3, 0x180107f6	// 180107f6 <sysctrl_efuse_mac_addr_calc+0x7a>
180107b2:	3206      	movi      	r2, 6
180107b4:	6c7b      	mov      	r1, r14
180107b6:	3018      	movi      	r0, 24
180107b8:	e3fffd82 	bsr      	0x180102bc	// 180102bc <sysctrl_efuse_config_and_read>
180107bc:	d86e0000 	ld.b      	r3, (r14, 0x0)
180107c0:	e923000a 	bnez      	r3, 0x180107d4	// 180107d4 <sysctrl_efuse_mac_addr_calc+0x58>
180107c4:	d86e0001 	ld.b      	r3, (r14, 0x1)
180107c8:	e9230006 	bnez      	r3, 0x180107d4	// 180107d4 <sysctrl_efuse_mac_addr_calc+0x58>
180107cc:	3106      	movi      	r1, 6
180107ce:	6c3b      	mov      	r0, r14
180107d0:	e3ffe100 	bsr      	0x1800c9d0	// 1800c9d0 <os_random_bytes>
180107d4:	d86e0003 	ld.b      	r3, (r14, 0x3)
180107d8:	d84e0000 	ld.b      	r2, (r14, 0x0)
180107dc:	4362      	lsli      	r3, r3, 2
180107de:	e4422001 	andi      	r2, r2, 1
180107e2:	74cc      	zextb      	r3, r3
180107e4:	dc6e0003 	st.b      	r3, (r14, 0x3)
180107e8:	e9020007 	bez      	r2, 0x180107f6	// 180107f6 <sysctrl_efuse_mac_addr_calc+0x7a>
180107ec:	3200      	movi      	r2, 0
180107ee:	2a7f      	subi      	r2, 128
180107f0:	6cc8      	or      	r3, r2
180107f2:	dc6e0003 	st.b      	r3, (r14, 0x3)
180107f6:	d86e0000 	ld.b      	r3, (r14, 0x0)
180107fa:	3b80      	bclri      	r3, 0
180107fc:	a460      	st.b      	r3, (r4, 0x0)
180107fe:	d86e0001 	ld.b      	r3, (r14, 0x1)
18010802:	a461      	st.b      	r3, (r4, 0x1)
18010804:	d86e0002 	ld.b      	r3, (r14, 0x2)
18010808:	a462      	st.b      	r3, (r4, 0x2)
1801080a:	d86e0005 	ld.b      	r3, (r14, 0x5)
1801080e:	a463      	st.b      	r3, (r4, 0x3)
18010810:	d86e0004 	ld.b      	r3, (r14, 0x4)
18010814:	a464      	st.b      	r3, (r4, 0x4)
18010816:	d86e0003 	ld.b      	r3, (r14, 0x3)
1801081a:	a465      	st.b      	r3, (r4, 0x5)
1801081c:	1402      	addi      	r14, r14, 8
1801081e:	1491      	pop      	r4, r15

18010820 <pmu_reg_write>:
18010820:	c0006023 	mfcr      	r3, cr<0, 0>
18010824:	c0807020 	psrclr      	ie
18010828:	ea22bffe 	movih      	r2, 49150
1801082c:	3aaf      	bseti      	r2, 15
1801082e:	6008      	addu      	r0, r2
18010830:	ea028003 	movi      	r2, 32771
18010834:	c5e24902 	rotli      	r2, r2, 15
18010838:	e4632040 	andi      	r3, r3, 64
1801083c:	dc02202e 	st.w      	r0, (r2, 0xb8)
18010840:	dc22202d 	st.w      	r1, (r2, 0xb4)
18010844:	1024      	lrw      	r1, 0xc053781b	// 18010854 <pmu_reg_write+0x34>
18010846:	dc22202f 	st.w      	r1, (r2, 0xbc)
1801084a:	e9030004 	bez      	r3, 0x18010852	// 18010852 <pmu_reg_write+0x32>
1801084e:	c0807420 	psrset      	ie
18010852:	783c      	jmp      	r15
18010854:	c053781b 	.long	0xc053781b

18010858 <jtag_map_set>:
18010858:	14d0      	push      	r15
1801085a:	e900000c 	bez      	r0, 0x18010872	// 18010872 <jtag_map_set+0x1a>
1801085e:	ea038003 	movi      	r3, 32771
18010862:	c5e34903 	rotli      	r3, r3, 15
18010866:	1005      	lrw      	r0, 0x40018038	// 18010878 <jtag_map_set+0x20>
18010868:	932e      	ld.w      	r1, (r3, 0x38)
1801086a:	ec210001 	ori      	r1, r1, 1
1801086e:	e3ffffd9 	bsr      	0x18010820	// 18010820 <pmu_reg_write>
18010872:	3000      	movi      	r0, 0
18010874:	1490      	pop      	r15
18010876:	0000      	.short	0x0000
18010878:	40018038 	.long	0x40018038

1801087c <sys_reset_detect>:
1801087c:	126e      	lrw      	r3, 0x20002bd4	// 180109b4 <sys_reset_detect+0x138>
1801087e:	3200      	movi      	r2, 0
18010880:	a340      	st.b      	r2, (r3, 0x0)
18010882:	a341      	st.b      	r2, (r3, 0x1)
18010884:	a342      	st.b      	r2, (r3, 0x2)
18010886:	a343      	st.b      	r2, (r3, 0x3)
18010888:	ea028003 	movi      	r2, 32771
1801088c:	c5e24902 	rotli      	r2, r2, 15
18010890:	d8222029 	ld.w      	r1, (r2, 0xa4)
18010894:	c7815781 	zext      	r1, r1, 28, 28
18010898:	a320      	st.b      	r1, (r3, 0x0)
1801089a:	ea214002 	movih      	r1, 16386
1801089e:	8300      	ld.b      	r0, (r3, 0x0)
180108a0:	d8212024 	ld.w      	r1, (r1, 0x90)
180108a4:	493f      	lsri      	r1, r1, 31
180108a6:	c4015c01 	ins      	r0, r1, 1, 1
180108aa:	a300      	st.b      	r0, (r3, 0x0)
180108ac:	922d      	ld.w      	r1, (r2, 0x34)
180108ae:	e4212001 	andi      	r1, r1, 1
180108b2:	e9210007 	bnez      	r1, 0x180108c0	// 180108c0 <sys_reset_detect+0x44>
180108b6:	9247      	ld.w      	r2, (r2, 0x1c)
180108b8:	e4422080 	andi      	r2, r2, 128
180108bc:	e9020074 	bez      	r2, 0x180109a4	// 180109a4 <sys_reset_detect+0x128>
180108c0:	115e      	lrw      	r2, 0x40015000	// 180109b8 <sys_reset_detect+0x13c>
180108c2:	9240      	ld.w      	r2, (r2, 0x0)
180108c4:	c4c254c2 	zext      	r2, r2, 6, 6
180108c8:	8320      	ld.b      	r1, (r3, 0x0)
180108ca:	c4225c02 	ins      	r1, r2, 2, 2
180108ce:	ea204002 	movih      	r0, 16386
180108d2:	a320      	st.b      	r1, (r3, 0x0)
180108d4:	d8402023 	ld.w      	r2, (r0, 0x8c)
180108d8:	c4425442 	zext      	r2, r2, 2, 2
180108dc:	8321      	ld.b      	r1, (r3, 0x1)
180108de:	c4225c03 	ins      	r1, r2, 3, 3
180108e2:	ea028003 	movi      	r2, 32771
180108e6:	c5e24902 	rotli      	r2, r2, 15
180108ea:	a321      	st.b      	r1, (r3, 0x1)
180108ec:	d8222029 	ld.w      	r1, (r2, 0xa4)
180108f0:	d9830000 	ld.b      	r12, (r3, 0x0)
180108f4:	c7c157c1 	zext      	r1, r1, 30, 30
180108f8:	c5815c03 	ins      	r12, r1, 3, 3
180108fc:	dd830000 	st.b      	r12, (r3, 0x0)
18010900:	9220      	ld.w      	r1, (r2, 0x0)
18010902:	d9830000 	ld.b      	r12, (r3, 0x0)
18010906:	c7c157c1 	zext      	r1, r1, 30, 30
1801090a:	c5815c04 	ins      	r12, r1, 4, 4
1801090e:	dd830000 	st.b      	r12, (r3, 0x0)
18010912:	9220      	ld.w      	r1, (r2, 0x0)
18010914:	d9830000 	ld.b      	r12, (r3, 0x0)
18010918:	c7a157a1 	zext      	r1, r1, 29, 29
1801091c:	c5815c05 	ins      	r12, r1, 5, 5
18010920:	dd830000 	st.b      	r12, (r3, 0x0)
18010924:	ea0c0080 	movi      	r12, 128
18010928:	9220      	ld.w      	r1, (r2, 0x0)
1801092a:	c6ac482c 	lsli      	r12, r12, 21
1801092e:	6c71      	xor      	r1, r12
18010930:	c7815781 	zext      	r1, r1, 28, 28
18010934:	d9830000 	ld.b      	r12, (r3, 0x0)
18010938:	c5815c06 	ins      	r12, r1, 6, 6
1801093c:	dd830000 	st.b      	r12, (r3, 0x0)
18010940:	9241      	ld.w      	r2, (r2, 0x4)
18010942:	e9a20036 	bhsz      	r2, 0x180109ae	// 180109ae <sys_reset_detect+0x132>
18010946:	904f      	ld.w      	r2, (r0, 0x3c)
18010948:	c6025602 	zext      	r2, r2, 16, 16
1801094c:	8321      	ld.b      	r1, (r3, 0x1)
1801094e:	c4225c04 	ins      	r1, r2, 4, 4
18010952:	ea028003 	movi      	r2, 32771
18010956:	c5e24902 	rotli      	r2, r2, 15
1801095a:	a321      	st.b      	r1, (r3, 0x1)
1801095c:	9221      	ld.w      	r1, (r2, 0x4)
1801095e:	8301      	ld.b      	r0, (r3, 0x1)
18010960:	c7c157c1 	zext      	r1, r1, 30, 30
18010964:	c4015c05 	ins      	r0, r1, 5, 5
18010968:	a301      	st.b      	r0, (r3, 0x1)
1801096a:	9220      	ld.w      	r1, (r2, 0x0)
1801096c:	8300      	ld.b      	r0, (r3, 0x0)
1801096e:	c7615761 	zext      	r1, r1, 27, 27
18010972:	c4015c07 	ins      	r0, r1, 7, 7
18010976:	a300      	st.b      	r0, (r3, 0x0)
18010978:	9220      	ld.w      	r1, (r2, 0x0)
1801097a:	8301      	ld.b      	r0, (r3, 0x1)
1801097c:	c7415741 	zext      	r1, r1, 26, 26
18010980:	c4015c00 	ins      	r0, r1, 0, 0
18010984:	a301      	st.b      	r0, (r3, 0x1)
18010986:	9220      	ld.w      	r1, (r2, 0x0)
18010988:	8301      	ld.b      	r0, (r3, 0x1)
1801098a:	c7215721 	zext      	r1, r1, 25, 25
1801098e:	c4015c01 	ins      	r0, r1, 1, 1
18010992:	a301      	st.b      	r0, (r3, 0x1)
18010994:	9240      	ld.w      	r2, (r2, 0x0)
18010996:	8321      	ld.b      	r1, (r3, 0x1)
18010998:	c7025702 	zext      	r2, r2, 24, 24
1801099c:	c4225c02 	ins      	r1, r2, 2, 2
180109a0:	a321      	st.b      	r1, (r3, 0x1)
180109a2:	783c      	jmp      	r15
180109a4:	1046      	lrw      	r2, 0x20043c00	// 180109bc <sys_reset_detect+0x140>
180109a6:	9257      	ld.w      	r2, (r2, 0x5c)
180109a8:	c4225422 	zext      	r2, r2, 1, 1
180109ac:	078e      	br      	0x180108c8	// 180108c8 <sys_reset_detect+0x4c>
180109ae:	3200      	movi      	r2, 0
180109b0:	07ce      	br      	0x1801094c	// 1801094c <sys_reset_detect+0xd0>
180109b2:	0000      	.short	0x0000
180109b4:	20002bd4 	.long	0x20002bd4
180109b8:	40015000 	.long	0x40015000
180109bc:	20043c00 	.long	0x20043c00

180109c0 <sys_reset_pending_clr>:
180109c0:	14d0      	push      	r15
180109c2:	1023      	lrw      	r1, 0x60403f50	// 180109cc <sys_reset_pending_clr+0xc>
180109c4:	1003      	lrw      	r0, 0x40018050	// 180109d0 <sys_reset_pending_clr+0x10>
180109c6:	e3ffff2d 	bsr      	0x18010820	// 18010820 <pmu_reg_write>
180109ca:	1490      	pop      	r15
180109cc:	60403f50 	.long	0x60403f50
180109d0:	40018050 	.long	0x40018050

180109d4 <sys_reset_lvd_show>:
180109d4:	14d1      	push      	r4, r15
180109d6:	118d      	lrw      	r4, 0x20002bd4	// 18010a88 <sys_reset_lvd_show+0xb4>
180109d8:	8441      	ld.b      	r2, (r4, 0x1)
180109da:	8460      	ld.b      	r3, (r4, 0x0)
180109dc:	4248      	lsli      	r2, r2, 8
180109de:	6c8c      	or      	r2, r3
180109e0:	8462      	ld.b      	r3, (r4, 0x2)
180109e2:	4370      	lsli      	r3, r3, 16
180109e4:	6c8c      	or      	r2, r3
180109e6:	8463      	ld.b      	r3, (r4, 0x3)
180109e8:	4378      	lsli      	r3, r3, 24
180109ea:	6cc8      	or      	r3, r2
180109ec:	e9030005 	bez      	r3, 0x180109f6	// 180109f6 <sys_reset_lvd_show+0x22>
180109f0:	1107      	lrw      	r0, 0x18017dab	// 18010a8c <sys_reset_lvd_show+0xb8>
180109f2:	e3ffe069 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
180109f6:	8460      	ld.b      	r3, (r4, 0x0)
180109f8:	e4632008 	andi      	r3, r3, 8
180109fc:	e9030005 	bez      	r3, 0x18010a06	// 18010a06 <sys_reset_lvd_show+0x32>
18010a00:	1104      	lrw      	r0, 0x18017dcd	// 18010a90 <sys_reset_lvd_show+0xbc>
18010a02:	e3ffe061 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18010a06:	d8644000 	ld.bs      	r3, (r4, 0x0)
18010a0a:	e9a30005 	bhsz      	r3, 0x18010a14	// 18010a14 <sys_reset_lvd_show+0x40>
18010a0e:	1102      	lrw      	r0, 0x18017dd6	// 18010a94 <sys_reset_lvd_show+0xc0>
18010a10:	e3ffe05a 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18010a14:	8461      	ld.b      	r3, (r4, 0x1)
18010a16:	e4632001 	andi      	r3, r3, 1
18010a1a:	e9030005 	bez      	r3, 0x18010a24	// 18010a24 <sys_reset_lvd_show+0x50>
18010a1e:	101f      	lrw      	r0, 0x18017dfa	// 18010a98 <sys_reset_lvd_show+0xc4>
18010a20:	e3ffe052 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18010a24:	8461      	ld.b      	r3, (r4, 0x1)
18010a26:	e4632004 	andi      	r3, r3, 4
18010a2a:	e9030005 	bez      	r3, 0x18010a34	// 18010a34 <sys_reset_lvd_show+0x60>
18010a2e:	101c      	lrw      	r0, 0x18017e1e	// 18010a9c <sys_reset_lvd_show+0xc8>
18010a30:	e3ffe04a 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18010a34:	8461      	ld.b      	r3, (r4, 0x1)
18010a36:	e4632002 	andi      	r3, r3, 2
18010a3a:	e9030005 	bez      	r3, 0x18010a44	// 18010a44 <sys_reset_lvd_show+0x70>
18010a3e:	1019      	lrw      	r0, 0x18017e44	// 18010aa0 <sys_reset_lvd_show+0xcc>
18010a40:	e3ffe042 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18010a44:	8460      	ld.b      	r3, (r4, 0x0)
18010a46:	e4632020 	andi      	r3, r3, 32
18010a4a:	e9030005 	bez      	r3, 0x18010a54	// 18010a54 <sys_reset_lvd_show+0x80>
18010a4e:	1016      	lrw      	r0, 0x18017e69	// 18010aa4 <sys_reset_lvd_show+0xd0>
18010a50:	e3ffe03a 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18010a54:	8460      	ld.b      	r3, (r4, 0x0)
18010a56:	e4632040 	andi      	r3, r3, 64
18010a5a:	e9030005 	bez      	r3, 0x18010a64	// 18010a64 <sys_reset_lvd_show+0x90>
18010a5e:	1013      	lrw      	r0, 0x18017e8e	// 18010aa8 <sys_reset_lvd_show+0xd4>
18010a60:	e3ffe032 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18010a64:	8461      	ld.b      	r3, (r4, 0x1)
18010a66:	e4632010 	andi      	r3, r3, 16
18010a6a:	e9030005 	bez      	r3, 0x18010a74	// 18010a74 <sys_reset_lvd_show+0xa0>
18010a6e:	1010      	lrw      	r0, 0x18017eb1	// 18010aac <sys_reset_lvd_show+0xd8>
18010a70:	e3ffe02a 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18010a74:	8461      	ld.b      	r3, (r4, 0x1)
18010a76:	e4632020 	andi      	r3, r3, 32
18010a7a:	e9030005 	bez      	r3, 0x18010a84	// 18010a84 <sys_reset_lvd_show+0xb0>
18010a7e:	100d      	lrw      	r0, 0x18017ed6	// 18010ab0 <sys_reset_lvd_show+0xdc>
18010a80:	e3ffe022 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18010a84:	1491      	pop      	r4, r15
18010a86:	0000      	.short	0x0000
18010a88:	20002bd4 	.long	0x20002bd4
18010a8c:	18017dab 	.long	0x18017dab
18010a90:	18017dcd 	.long	0x18017dcd
18010a94:	18017dd6 	.long	0x18017dd6
18010a98:	18017dfa 	.long	0x18017dfa
18010a9c:	18017e1e 	.long	0x18017e1e
18010aa0:	18017e44 	.long	0x18017e44
18010aa4:	18017e69 	.long	0x18017e69
18010aa8:	18017e8e 	.long	0x18017e8e
18010aac:	18017eb1 	.long	0x18017eb1
18010ab0:	18017ed6 	.long	0x18017ed6

18010ab4 <sys_reset_show>:
18010ab4:	14d1      	push      	r4, r15
18010ab6:	1096      	lrw      	r4, 0x20002bd4	// 18010b0c <sys_reset_show+0x58>
18010ab8:	1016      	lrw      	r0, 0x18017efb	// 18010b10 <sys_reset_show+0x5c>
18010aba:	e3ffe005 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18010abe:	8460      	ld.b      	r3, (r4, 0x0)
18010ac0:	e4632001 	andi      	r3, r3, 1
18010ac4:	e9030005 	bez      	r3, 0x18010ace	// 18010ace <sys_reset_show+0x1a>
18010ac8:	1013      	lrw      	r0, 0x18017f28	// 18010b14 <sys_reset_show+0x60>
18010aca:	e3ffdffd 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18010ace:	8460      	ld.b      	r3, (r4, 0x0)
18010ad0:	e4632002 	andi      	r3, r3, 2
18010ad4:	e9030005 	bez      	r3, 0x18010ade	// 18010ade <sys_reset_show+0x2a>
18010ad8:	1010      	lrw      	r0, 0x18017f32	// 18010b18 <sys_reset_show+0x64>
18010ada:	e3ffdff5 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18010ade:	8460      	ld.b      	r3, (r4, 0x0)
18010ae0:	e4632004 	andi      	r3, r3, 4
18010ae4:	e9030005 	bez      	r3, 0x18010aee	// 18010aee <sys_reset_show+0x3a>
18010ae8:	100d      	lrw      	r0, 0x18017f42	// 18010b1c <sys_reset_show+0x68>
18010aea:	e3ffdfed 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18010aee:	8461      	ld.b      	r3, (r4, 0x1)
18010af0:	e4632008 	andi      	r3, r3, 8
18010af4:	e9030005 	bez      	r3, 0x18010afe	// 18010afe <sys_reset_show+0x4a>
18010af8:	100a      	lrw      	r0, 0x18017f4b	// 18010b20 <sys_reset_show+0x6c>
18010afa:	e3ffdfe5 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18010afe:	e3ffff6b 	bsr      	0x180109d4	// 180109d4 <sys_reset_lvd_show>
18010b02:	1009      	lrw      	r0, 0x18017f5b	// 18010b24 <sys_reset_show+0x70>
18010b04:	e3ffdfe0 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18010b08:	1491      	pop      	r4, r15
18010b0a:	0000      	.short	0x0000
18010b0c:	20002bd4 	.long	0x20002bd4
18010b10:	18017efb 	.long	0x18017efb
18010b14:	18017f28 	.long	0x18017f28
18010b18:	18017f32 	.long	0x18017f32
18010b1c:	18017f42 	.long	0x18017f42
18010b20:	18017f4b 	.long	0x18017f4b
18010b24:	18017f5b 	.long	0x18017f5b

18010b28 <lvd_irq_handler>:
18010b28:	14d1      	push      	r4, r15
18010b2a:	e3fffea9 	bsr      	0x1801087c	// 1801087c <sys_reset_detect>
18010b2e:	1070      	lrw      	r3, 0x20002bd4	// 18010b6c <lvd_irq_handler+0x44>
18010b30:	8360      	ld.b      	r3, (r3, 0x0)
18010b32:	e4632010 	andi      	r3, r3, 16
18010b36:	e9030015 	bez      	r3, 0x18010b60	// 18010b60 <lvd_irq_handler+0x38>
18010b3a:	ea048003 	movi      	r4, 32771
18010b3e:	c5e44904 	rotli      	r4, r4, 15
18010b42:	100c      	lrw      	r0, 0x40018044	// 18010b70 <lvd_irq_handler+0x48>
18010b44:	9431      	ld.w      	r1, (r4, 0x44)
18010b46:	398f      	bclri      	r1, 15
18010b48:	e3fffe6c 	bsr      	0x18010820	// 18010820 <pmu_reg_write>
18010b4c:	9420      	ld.w      	r1, (r4, 0x0)
18010b4e:	39bf      	bseti      	r1, 31
18010b50:	6c13      	mov      	r0, r4
18010b52:	e3fffe67 	bsr      	0x18010820	// 18010820 <pmu_reg_write>
18010b56:	9431      	ld.w      	r1, (r4, 0x44)
18010b58:	398e      	bclri      	r1, 14
18010b5a:	1006      	lrw      	r0, 0x40018044	// 18010b70 <lvd_irq_handler+0x48>
18010b5c:	e3fffe62 	bsr      	0x18010820	// 18010820 <pmu_reg_write>
18010b60:	e3ffff30 	bsr      	0x180109c0	// 180109c0 <sys_reset_pending_clr>
18010b64:	e3ffff38 	bsr      	0x180109d4	// 180109d4 <sys_reset_lvd_show>
18010b68:	1491      	pop      	r4, r15
18010b6a:	0000      	.short	0x0000
18010b6c:	20002bd4 	.long	0x20002bd4
18010b70:	40018044 	.long	0x40018044

18010b74 <pmu_vdd_core_set>:
18010b74:	14d2      	push      	r4-r5, r15
18010b76:	3801      	cmphsi      	r0, 2
18010b78:	0c22      	bf      	0x18010bbc	// 18010bbc <pmu_vdd_core_set+0x48>
18010b7a:	ea058003 	movi      	r5, 32771
18010b7e:	c5e54905 	rotli      	r5, r5, 15
18010b82:	e4802007 	andi      	r4, r0, 7
18010b86:	9528      	ld.w      	r1, (r5, 0x20)
18010b88:	c78157c1 	zext      	r1, r1, 30, 28
18010b8c:	5c25      	subu      	r1, r4, r1
18010b8e:	3200      	movi      	r2, 0
18010b90:	4121      	lsli      	r1, r1, 1
18010b92:	ea001000 	movi      	r0, 4096
18010b96:	38be      	bseti      	r0, 30
18010b98:	e0000c98 	bsr      	0x180124c8	// 180124c8 <hg_xspi_sample_offset>
18010b9c:	ea033000 	movi      	r3, 12288
18010ba0:	3bb4      	bseti      	r3, 20
18010ba2:	9520      	ld.w      	r1, (r5, 0x0)
18010ba4:	6c4c      	or      	r1, r3
18010ba6:	6c17      	mov      	r0, r5
18010ba8:	e3fffe3c 	bsr      	0x18010820	// 18010820 <pmu_reg_write>
18010bac:	9528      	ld.w      	r1, (r5, 0x20)
18010bae:	1065      	lrw      	r3, 0x8ffffbff	// 18010bc0 <pmu_vdd_core_set+0x4c>
18010bb0:	684c      	and      	r1, r3
18010bb2:	449c      	lsli      	r4, r4, 28
18010bb4:	6c50      	or      	r1, r4
18010bb6:	1004      	lrw      	r0, 0x40018020	// 18010bc4 <pmu_vdd_core_set+0x50>
18010bb8:	e3fffe34 	bsr      	0x18010820	// 18010820 <pmu_reg_write>
18010bbc:	1492      	pop      	r4-r5, r15
18010bbe:	0000      	.short	0x0000
18010bc0:	8ffffbff 	.long	0x8ffffbff
18010bc4:	40018020 	.long	0x40018020

18010bc8 <csi_dcache_enable>:
18010bc8:	1065      	lrw      	r3, 0xe000f000	// 18010bdc <csi_dcache_enable+0x14>
18010bca:	3201      	movi      	r2, 1
18010bcc:	b341      	st.w      	r2, (r3, 0x4)
18010bce:	3215      	movi      	r2, 21
18010bd0:	b340      	st.w      	r2, (r3, 0x0)
18010bd2:	6c03      	mov      	r0, r0
18010bd4:	6c03      	mov      	r0, r0
18010bd6:	6c03      	mov      	r0, r0
18010bd8:	6c03      	mov      	r0, r0
18010bda:	783c      	jmp      	r15
18010bdc:	e000f000 	.long	0xe000f000

18010be0 <csi_dcache_disable>:
18010be0:	1066      	lrw      	r3, 0xe000f000	// 18010bf8 <csi_dcache_disable+0x18>
18010be2:	9340      	ld.w      	r2, (r3, 0x0)
18010be4:	3a80      	bclri      	r2, 0
18010be6:	b340      	st.w      	r2, (r3, 0x0)
18010be8:	3201      	movi      	r2, 1
18010bea:	b341      	st.w      	r2, (r3, 0x4)
18010bec:	6c03      	mov      	r0, r0
18010bee:	6c03      	mov      	r0, r0
18010bf0:	6c03      	mov      	r0, r0
18010bf2:	6c03      	mov      	r0, r0
18010bf4:	783c      	jmp      	r15
18010bf6:	0000      	.short	0x0000
18010bf8:	e000f000 	.long	0xe000f000

18010bfc <sysctrl_clk_src_2_freq>:
18010bfc:	3843      	cmpnei      	r0, 3
18010bfe:	0c1a      	bf      	0x18010c32	// 18010c32 <sysctrl_clk_src_2_freq+0x36>
18010c00:	3803      	cmphsi      	r0, 4
18010c02:	080a      	bt      	0x18010c16	// 18010c16 <sysctrl_clk_src_2_freq+0x1a>
18010c04:	3841      	cmpnei      	r0, 1
18010c06:	0c13      	bf      	0x18010c2c	// 18010c2c <sysctrl_clk_src_2_freq+0x30>
18010c08:	33fa      	movi      	r3, 250
18010c0a:	3801      	cmphsi      	r0, 2
18010c0c:	4369      	lsli      	r3, r3, 9
18010c0e:	100f      	lrw      	r0, 0x1c9c3800	// 18010c48 <sysctrl_clk_src_2_freq+0x4c>
18010c10:	c4030c20 	incf      	r0, r3, 0
18010c14:	783c      	jmp      	r15
18010c16:	3845      	cmpnei      	r0, 5
18010c18:	0c12      	bf      	0x18010c3c	// 18010c3c <sysctrl_clk_src_2_freq+0x40>
18010c1a:	3804      	cmphsi      	r0, 5
18010c1c:	0c0d      	bf      	0x18010c36	// 18010c36 <sysctrl_clk_src_2_freq+0x3a>
18010c1e:	3846      	cmpnei      	r0, 6
18010c20:	0c0e      	bf      	0x18010c3c	// 18010c3c <sysctrl_clk_src_2_freq+0x40>
18010c22:	eb4000f0 	cmpnei      	r0, 240
18010c26:	0c0e      	bf      	0x18010c42	// 18010c42 <sysctrl_clk_src_2_freq+0x46>
18010c28:	3000      	movi      	r0, 0
18010c2a:	07f5      	br      	0x18010c14	// 18010c14 <sysctrl_clk_src_2_freq+0x18>
18010c2c:	1068      	lrw      	r3, 0x20001ffc	// 18010c4c <sysctrl_clk_src_2_freq+0x50>
18010c2e:	9301      	ld.w      	r0, (r3, 0x4)
18010c30:	07f2      	br      	0x18010c14	// 18010c14 <sysctrl_clk_src_2_freq+0x18>
18010c32:	1006      	lrw      	r0, 0x1c9c3800	// 18010c48 <sysctrl_clk_src_2_freq+0x4c>
18010c34:	07f0      	br      	0x18010c14	// 18010c14 <sysctrl_clk_src_2_freq+0x18>
18010c36:	1066      	lrw      	r3, 0x20001ffc	// 18010c4c <sysctrl_clk_src_2_freq+0x50>
18010c38:	9302      	ld.w      	r0, (r3, 0x8)
18010c3a:	07ed      	br      	0x18010c14	// 18010c14 <sysctrl_clk_src_2_freq+0x18>
18010c3c:	30fa      	movi      	r0, 250
18010c3e:	4007      	lsli      	r0, r0, 7
18010c40:	07ea      	br      	0x18010c14	// 18010c14 <sysctrl_clk_src_2_freq+0x18>
18010c42:	1063      	lrw      	r3, 0x20001ffc	// 18010c4c <sysctrl_clk_src_2_freq+0x50>
18010c44:	9303      	ld.w      	r0, (r3, 0xc)
18010c46:	07e7      	br      	0x18010c14	// 18010c14 <sysctrl_clk_src_2_freq+0x18>
18010c48:	1c9c3800 	.long	0x1c9c3800
18010c4c:	20001ffc 	.long	0x20001ffc

18010c50 <ll_clock_get_qspi_src_clk>:
18010c50:	14d0      	push      	r15
18010c52:	ea224002 	movih      	r2, 16386
18010c56:	3180      	movi      	r1, 128
18010c58:	9271      	ld.w      	r3, (r2, 0x44)
18010c5a:	e4632008 	andi      	r3, r3, 8
18010c5e:	9252      	ld.w      	r2, (r2, 0x48)
18010c60:	4133      	lsli      	r1, r1, 19
18010c62:	3b40      	cmpnei      	r3, 0
18010c64:	6884      	and      	r2, r1
18010c66:	c4000503 	mvc      	r3
18010c6a:	4361      	lsli      	r3, r3, 1
18010c6c:	e9020004 	bez      	r2, 0x18010c74	// 18010c74 <ll_clock_get_qspi_src_clk+0x24>
18010c70:	ec630001 	ori      	r3, r3, 1
18010c74:	1043      	lrw      	r2, 0x1801805c	// 18010c80 <ll_clock_get_qspi_src_clk+0x30>
18010c76:	d0620020 	ldr.b      	r0, (r2, r3 << 0)
18010c7a:	e3ffffc1 	bsr      	0x18010bfc	// 18010bfc <sysctrl_clk_src_2_freq>
18010c7e:	1490      	pop      	r15
18010c80:	1801805c 	.long	0x1801805c

18010c84 <ll_clock_get_ospi_src_clk>:
18010c84:	14d0      	push      	r15
18010c86:	ea234002 	movih      	r3, 16386
18010c8a:	1045      	lrw      	r2, 0x1801805c	// 18010c9c <ll_clock_get_ospi_src_clk+0x18>
18010c8c:	9375      	ld.w      	r3, (r3, 0x54)
18010c8e:	c6a356c3 	zext      	r3, r3, 22, 21
18010c92:	d0620020 	ldr.b      	r0, (r2, r3 << 0)
18010c96:	e3ffffb3 	bsr      	0x18010bfc	// 18010bfc <sysctrl_clk_src_2_freq>
18010c9a:	1490      	pop      	r15
18010c9c:	1801805c 	.long	0x1801805c

18010ca0 <ll_clock_set_sys_clk_src>:
18010ca0:	14d2      	push      	r4-r5, r15
18010ca2:	106c      	lrw      	r3, 0xe000f000	// 18010cd0 <ll_clock_set_sys_clk_src+0x30>
18010ca4:	6d43      	mov      	r5, r0
18010ca6:	9381      	ld.w      	r4, (r3, 0x4)
18010ca8:	e4842001 	andi      	r4, r4, 1
18010cac:	e9040008 	bez      	r4, 0x18010cbc	// 18010cbc <ll_clock_set_sys_clk_src+0x1c>
18010cb0:	3205      	movi      	r2, 5
18010cb2:	b341      	st.w      	r2, (r3, 0x4)
18010cb4:	c0000420 	sync
18010cb8:	e3ffff94 	bsr      	0x18010be0	// 18010be0 <csi_dcache_disable>
18010cbc:	6c17      	mov      	r0, r5
18010cbe:	e00028ed 	bsr      	0x18015e98	// 18015e98 <sha1_vector+0x80>
18010cc2:	1065      	lrw      	r3, 0x20001ffc	// 18010cd4 <ll_clock_set_sys_clk_src+0x34>
18010cc4:	a3a0      	st.b      	r5, (r3, 0x0)
18010cc6:	e9040004 	bez      	r4, 0x18010cce	// 18010cce <ll_clock_set_sys_clk_src+0x2e>
18010cca:	e3ffff7f 	bsr      	0x18010bc8	// 18010bc8 <csi_dcache_enable>
18010cce:	1492      	pop      	r4-r5, r15
18010cd0:	e000f000 	.long	0xe000f000
18010cd4:	20001ffc 	.long	0x20001ffc

18010cd8 <ll_clock_set_sys_clk_div>:
18010cd8:	14d1      	push      	r4, r15
18010cda:	1421      	subi      	r14, r14, 4
18010cdc:	106b      	lrw      	r3, 0xe000f000	// 18010d08 <ll_clock_set_sys_clk_div+0x30>
18010cde:	9381      	ld.w      	r4, (r3, 0x4)
18010ce0:	e4842001 	andi      	r4, r4, 1
18010ce4:	e904000a 	bez      	r4, 0x18010cf8	// 18010cf8 <ll_clock_set_sys_clk_div+0x20>
18010ce8:	3205      	movi      	r2, 5
18010cea:	b800      	st.w      	r0, (r14, 0x0)
18010cec:	b341      	st.w      	r2, (r3, 0x4)
18010cee:	c0000420 	sync
18010cf2:	e3ffff77 	bsr      	0x18010be0	// 18010be0 <csi_dcache_disable>
18010cf6:	9800      	ld.w      	r0, (r14, 0x0)
18010cf8:	e00028ca 	bsr      	0x18015e8c	// 18015e8c <sha1_vector+0x74>
18010cfc:	e9040004 	bez      	r4, 0x18010d04	// 18010d04 <ll_clock_set_sys_clk_div+0x2c>
18010d00:	e3ffff64 	bsr      	0x18010bc8	// 18010bc8 <csi_dcache_enable>
18010d04:	1401      	addi      	r14, r14, 4
18010d06:	1491      	pop      	r4, r15
18010d08:	e000f000 	.long	0xe000f000

18010d0c <ll_oqspi_get_div>:
18010d0c:	3380      	movi      	r3, 128
18010d0e:	4377      	lsli      	r3, r3, 23
18010d10:	64c2      	cmpne      	r0, r3
18010d12:	ea234002 	movih      	r3, 16386
18010d16:	080e      	bt      	0x18010d32	// 18010d32 <ll_oqspi_get_div+0x26>
18010d18:	9374      	ld.w      	r3, (r3, 0x50)
18010d1a:	9000      	ld.w      	r0, (r0, 0x0)
18010d1c:	e4602008 	andi      	r3, r0, 8
18010d20:	e903000b 	bez      	r3, 0x18010d36	// 18010d36 <ll_oqspi_get_div+0x2a>
18010d24:	ea234002 	movih      	r3, 16386
18010d28:	9315      	ld.w      	r0, (r3, 0x54)
18010d2a:	c7005780 	zext      	r0, r0, 28, 24
18010d2e:	2000      	addi      	r0, 1
18010d30:	783c      	jmp      	r15
18010d32:	9375      	ld.w      	r3, (r3, 0x54)
18010d34:	07f3      	br      	0x18010d1a	// 18010d1a <ll_oqspi_get_div+0xe>
18010d36:	c66056c0 	zext      	r0, r0, 22, 19
18010d3a:	2000      	addi      	r0, 1
18010d3c:	6000      	addu      	r0, r0
18010d3e:	07f9      	br      	0x18010d30	// 18010d30 <ll_oqspi_get_div+0x24>

18010d40 <ll_clock_is_exist>:
18010d40:	ea234002 	movih      	r3, 16386
18010d44:	ea0c0088 	movi      	r12, 136
18010d48:	c70c482c 	lsli      	r12, r12, 24
18010d4c:	9343      	ld.w      	r2, (r3, 0xc)
18010d4e:	e58c1000 	subi      	r12, r12, 1
18010d52:	68b0      	and      	r2, r12
18010d54:	ea0c00e0 	movi      	r12, 224
18010d58:	b343      	st.w      	r2, (r3, 0xc)
18010d5a:	401b      	lsli      	r0, r0, 27
18010d5c:	c6cc482c 	lsli      	r12, r12, 22
18010d60:	9343      	ld.w      	r2, (r3, 0xc)
18010d62:	6830      	and      	r0, r12
18010d64:	6c08      	or      	r0, r2
18010d66:	b303      	st.w      	r0, (r3, 0xc)
18010d68:	9343      	ld.w      	r2, (r3, 0xc)
18010d6a:	3abe      	bseti      	r2, 30
18010d6c:	b343      	st.w      	r2, (r3, 0xc)
18010d6e:	e9210009 	bnez      	r1, 0x18010d80	// 18010d80 <ll_clock_is_exist+0x40>
18010d72:	6c07      	mov      	r0, r1
18010d74:	ea224002 	movih      	r2, 16386
18010d78:	9263      	ld.w      	r3, (r2, 0xc)
18010d7a:	3b9e      	bclri      	r3, 30
18010d7c:	b263      	st.w      	r3, (r2, 0xc)
18010d7e:	783c      	jmp      	r15
18010d80:	9340      	ld.w      	r2, (r3, 0x0)
18010d82:	e4422008 	andi      	r2, r2, 8
18010d86:	2900      	subi      	r1, 1
18010d88:	e902fff3 	bez      	r2, 0x18010d6e	// 18010d6e <ll_clock_is_exist+0x2e>
18010d8c:	3001      	movi      	r0, 1
18010d8e:	07f3      	br      	0x18010d74	// 18010d74 <ll_clock_is_exist+0x34>

18010d90 <ll_clock_usbpll_config>:
18010d90:	14d2      	push      	r4-r5, r15
18010d92:	3844      	cmpnei      	r0, 4
18010d94:	6d43      	mov      	r5, r0
18010d96:	084a      	bt      	0x18010e2a	// 18010e2a <ll_clock_usbpll_config+0x9a>
18010d98:	ea224002 	movih      	r2, 16386
18010d9c:	9271      	ld.w      	r3, (r2, 0x44)
18010d9e:	ec630100 	ori      	r3, r3, 256
18010da2:	b271      	st.w      	r3, (r2, 0x44)
18010da4:	1169      	lrw      	r3, 0x20001ffc	// 18010e48 <ll_clock_usbpll_config+0xb8>
18010da6:	9342      	ld.w      	r2, (r3, 0x8)
18010da8:	ea244002 	movih      	r4, 16386
18010dac:	1128      	lrw      	r1, 0xff87ff80	// 18010e4c <ll_clock_usbpll_config+0xbc>
18010dae:	9466      	ld.w      	r3, (r4, 0x18)
18010db0:	ec630010 	ori      	r3, r3, 16
18010db4:	b466      	st.w      	r3, (r4, 0x18)
18010db6:	9466      	ld.w      	r3, (r4, 0x18)
18010db8:	68c4      	and      	r3, r1
18010dba:	1126      	lrw      	r1, 0x210003f	// 18010e50 <ll_clock_usbpll_config+0xc0>
18010dbc:	6cc4      	or      	r3, r1
18010dbe:	30e0      	movi      	r0, 224
18010dc0:	b466      	st.w      	r3, (r4, 0x18)
18010dc2:	4016      	lsli      	r0, r0, 22
18010dc4:	3300      	movi      	r3, 0
18010dc6:	ea011c9c 	movi      	r1, 7324
18010dca:	e3ff7ecd 	bsr      	0x18000b64	// 18000b64 <__udivdi3>
18010dce:	946d      	ld.w      	r3, (r4, 0x34)
18010dd0:	ea01c07f 	movi      	r1, 49279
18010dd4:	4050      	lsli      	r2, r0, 16
18010dd6:	68c4      	and      	r3, r1
18010dd8:	6cc8      	or      	r3, r2
18010dda:	32fe      	movi      	r2, 254
18010ddc:	4809      	lsri      	r0, r0, 9
18010dde:	4246      	lsli      	r2, r2, 6
18010de0:	3d44      	cmpnei      	r5, 4
18010de2:	6808      	and      	r0, r2
18010de4:	6c0c      	or      	r0, r3
18010de6:	082c      	bt      	0x18010e3e	// 18010e3e <ll_clock_usbpll_config+0xae>
18010de8:	ec004000 	ori      	r0, r0, 16384
18010dec:	b40d      	st.w      	r0, (r4, 0x34)
18010dee:	946d      	ld.w      	r3, (r4, 0x34)
18010df0:	ec630001 	ori      	r3, r3, 1
18010df4:	b46d      	st.w      	r3, (r4, 0x34)
18010df6:	946d      	ld.w      	r3, (r4, 0x34)
18010df8:	e4634002 	xori      	r3, r3, 2
18010dfc:	b46d      	st.w      	r3, (r4, 0x34)
18010dfe:	30fa      	movi      	r0, 250
18010e00:	1092      	lrw      	r4, 0x20001ffc	// 18010e48 <ll_clock_usbpll_config+0xb8>
18010e02:	4001      	lsli      	r0, r0, 1
18010e04:	e3ffa178 	bsr      	0x180050f4	// 180050f4 <delay_us>
18010e08:	8461      	ld.b      	r3, (r4, 0x1)
18010e0a:	3b83      	bclri      	r3, 3
18010e0c:	310c      	movi      	r1, 12
18010e0e:	3007      	movi      	r0, 7
18010e10:	a461      	st.b      	r3, (r4, 0x1)
18010e12:	e3ffff97 	bsr      	0x18010d40	// 18010d40 <ll_clock_is_exist>
18010e16:	e9000006 	bez      	r0, 0x18010e22	// 18010e22 <ll_clock_usbpll_config+0x92>
18010e1a:	8461      	ld.b      	r3, (r4, 0x1)
18010e1c:	ec630008 	ori      	r3, r3, 8
18010e20:	a461      	st.b      	r3, (r4, 0x1)
18010e22:	8401      	ld.b      	r0, (r4, 0x1)
18010e24:	c4605460 	zext      	r0, r0, 3, 3
18010e28:	1492      	pop      	r4-r5, r15
18010e2a:	3841      	cmpnei      	r0, 1
18010e2c:	080b      	bt      	0x18010e42	// 18010e42 <ll_clock_usbpll_config+0xb2>
18010e2e:	ea224002 	movih      	r2, 16386
18010e32:	9271      	ld.w      	r3, (r2, 0x44)
18010e34:	3b88      	bclri      	r3, 8
18010e36:	b271      	st.w      	r3, (r2, 0x44)
18010e38:	1064      	lrw      	r3, 0x20001ffc	// 18010e48 <ll_clock_usbpll_config+0xb8>
18010e3a:	9341      	ld.w      	r2, (r3, 0x4)
18010e3c:	07b6      	br      	0x18010da8	// 18010da8 <ll_clock_usbpll_config+0x18>
18010e3e:	388e      	bclri      	r0, 14
18010e40:	07d6      	br      	0x18010dec	// 18010dec <ll_clock_usbpll_config+0x5c>
18010e42:	3000      	movi      	r0, 0
18010e44:	07f2      	br      	0x18010e28	// 18010e28 <ll_clock_usbpll_config+0x98>
18010e46:	0000      	.short	0x0000
18010e48:	20001ffc 	.long	0x20001ffc
18010e4c:	ff87ff80 	.long	0xff87ff80
18010e50:	0210003f 	.long	0x0210003f

18010e54 <ll_sys_clock_init>:
18010e54:	14d1      	push      	r4, r15
18010e56:	ea048003 	movi      	r4, 32771
18010e5a:	c5e44904 	rotli      	r4, r4, 15
18010e5e:	1012      	lrw      	r0, 0x40018024	// 18010ea4 <ll_sys_clock_init+0x50>
18010e60:	9429      	ld.w      	r1, (r4, 0x24)
18010e62:	39b8      	bseti      	r1, 24
18010e64:	e3fffcde 	bsr      	0x18010820	// 18010820 <pmu_reg_write>
18010e68:	942a      	ld.w      	r1, (r4, 0x28)
18010e6a:	ec210001 	ori      	r1, r1, 1
18010e6e:	100f      	lrw      	r0, 0x40018028	// 18010ea8 <ll_sys_clock_init+0x54>
18010e70:	108f      	lrw      	r4, 0x20001ffc	// 18010eac <ll_sys_clock_init+0x58>
18010e72:	e3fffcd7 	bsr      	0x18010820	// 18010820 <pmu_reg_write>
18010e76:	3301      	movi      	r3, 1
18010e78:	3180      	movi      	r1, 128
18010e7a:	3000      	movi      	r0, 0
18010e7c:	a461      	st.b      	r3, (r4, 0x1)
18010e7e:	e3ffff61 	bsr      	0x18010d40	// 18010d40 <ll_clock_is_exist>
18010e82:	e9000006 	bez      	r0, 0x18010e8e	// 18010e8e <ll_sys_clock_init+0x3a>
18010e86:	8461      	ld.b      	r3, (r4, 0x1)
18010e88:	ec630010 	ori      	r3, r3, 16
18010e8c:	a461      	st.b      	r3, (r4, 0x1)
18010e8e:	3180      	movi      	r1, 128
18010e90:	3001      	movi      	r0, 1
18010e92:	e3ffff57 	bsr      	0x18010d40	// 18010d40 <ll_clock_is_exist>
18010e96:	e9000006 	bez      	r0, 0x18010ea2	// 18010ea2 <ll_sys_clock_init+0x4e>
18010e9a:	8461      	ld.b      	r3, (r4, 0x1)
18010e9c:	ec630002 	ori      	r3, r3, 2
18010ea0:	a461      	st.b      	r3, (r4, 0x1)
18010ea2:	1491      	pop      	r4, r15
18010ea4:	40018024 	.long	0x40018024
18010ea8:	40018028 	.long	0x40018028
18010eac:	20001ffc 	.long	0x20001ffc

18010eb0 <sysctrl_cmu_init>:
18010eb0:	14d2      	push      	r4-r5, r15
18010eb2:	1421      	subi      	r14, r14, 4
18010eb4:	1188      	lrw      	r4, 0x20001ffc	// 18010f54 <sysctrl_cmu_init+0xa4>
18010eb6:	1169      	lrw      	r3, 0x2625a00	// 18010f58 <sysctrl_cmu_init+0xa8>
18010eb8:	b461      	st.w      	r3, (r4, 0x4)
18010eba:	11a9      	lrw      	r5, 0x989680	// 18010f5c <sysctrl_cmu_init+0xac>
18010ebc:	1169      	lrw      	r3, 0xe4e1c00	// 18010f60 <sysctrl_cmu_init+0xb0>
18010ebe:	3203      	movi      	r2, 3
18010ec0:	6c7b      	mov      	r1, r14
18010ec2:	307d      	movi      	r0, 125
18010ec4:	b463      	st.w      	r3, (r4, 0xc)
18010ec6:	b4a2      	st.w      	r5, (r4, 0x8)
18010ec8:	e3fff9fa 	bsr      	0x180102bc	// 180102bc <sysctrl_efuse_config_and_read>
18010ecc:	d86e4002 	ld.bs      	r3, (r14, 0x2)
18010ed0:	e9a3003d 	bhsz      	r3, 0x18010f4a	// 18010f4a <sysctrl_cmu_init+0x9a>
18010ed4:	ea038003 	movi      	r3, 32771
18010ed8:	c5e34903 	rotli      	r3, r3, 15
18010edc:	32e2      	movi      	r2, 226
18010ede:	9329      	ld.w      	r1, (r3, 0x24)
18010ee0:	4258      	lsli      	r2, r2, 24
18010ee2:	d86e0000 	ld.b      	r3, (r14, 0x0)
18010ee6:	2a00      	subi      	r2, 1
18010ee8:	e463201f 	andi      	r3, r3, 31
18010eec:	4379      	lsli      	r3, r3, 25
18010eee:	6848      	and      	r1, r2
18010ef0:	6c4c      	or      	r1, r3
18010ef2:	101d      	lrw      	r0, 0x40018024	// 18010f64 <sysctrl_cmu_init+0xb4>
18010ef4:	e3fffc96 	bsr      	0x18010820	// 18010820 <pmu_reg_write>
18010ef8:	d86e0000 	ld.b      	r3, (r14, 0x0)
18010efc:	e4432020 	andi      	r2, r3, 32
18010f00:	3a40      	cmpnei      	r2, 0
18010f02:	105a      	lrw      	r2, 0x895440	// 18010f68 <sysctrl_cmu_init+0xb8>
18010f04:	c4a20c20 	incf      	r5, r2, 0
18010f08:	748e      	sextb      	r2, r3
18010f0a:	b4a2      	st.w      	r5, (r4, 0x8)
18010f0c:	e9a20009 	bhsz      	r2, 0x18010f1e	// 18010f1e <sysctrl_cmu_init+0x6e>
18010f10:	6c97      	mov      	r2, r5
18010f12:	ea01f424 	movi      	r1, 62500
18010f16:	c4614901 	rotli      	r1, r1, 3
18010f1a:	6084      	addu      	r2, r1
18010f1c:	b442      	st.w      	r2, (r4, 0x8)
18010f1e:	e4632040 	andi      	r3, r3, 64
18010f22:	e9030009 	bez      	r3, 0x18010f34	// 18010f34 <sysctrl_cmu_init+0x84>
18010f26:	9462      	ld.w      	r3, (r4, 0x8)
18010f28:	ea02f424 	movi      	r2, 62500
18010f2c:	c4424902 	rotli      	r2, r2, 2
18010f30:	60c8      	addu      	r3, r2
18010f32:	b462      	st.w      	r3, (r4, 0x8)
18010f34:	ea02f424 	movi      	r2, 62500
18010f38:	c4824902 	rotli      	r2, r2, 4
18010f3c:	d86e0001 	ld.b      	r3, (r14, 0x1)
18010f40:	7cc8      	mult      	r3, r2
18010f42:	4b6a      	lsri      	r3, r3, 10
18010f44:	9442      	ld.w      	r2, (r4, 0x8)
18010f46:	60c8      	addu      	r3, r2
18010f48:	b462      	st.w      	r3, (r4, 0x8)
18010f4a:	e3ffff85 	bsr      	0x18010e54	// 18010e54 <ll_sys_clock_init>
18010f4e:	1401      	addi      	r14, r14, 4
18010f50:	1492      	pop      	r4-r5, r15
18010f52:	0000      	.short	0x0000
18010f54:	20001ffc 	.long	0x20001ffc
18010f58:	02625a00 	.long	0x02625a00
18010f5c:	00989680 	.long	0x00989680
18010f60:	0e4e1c00 	.long	0x0e4e1c00
18010f64:	40018024 	.long	0x40018024
18010f68:	00895440 	.long	0x00895440

18010f6c <sysctrl_cmu_sysclk_set>:
18010f6c:	14d3      	push      	r4-r6, r15
18010f6e:	6d03      	mov      	r4, r0
18010f70:	3000      	movi      	r0, 0
18010f72:	e3ff7d07 	bsr      	0x18000980	// 18000980 <__get_PC>
18010f76:	e90400c2 	bez      	r4, 0x180110fa	// 180110fa <sysctrl_cmu_sysclk_set+0x18e>
18010f7a:	33f0      	movi      	r3, 240
18010f7c:	4374      	lsli      	r3, r3, 20
18010f7e:	680c      	and      	r0, r3
18010f80:	3380      	movi      	r3, 128
18010f82:	4374      	lsli      	r3, r3, 20
18010f84:	64c2      	cmpne      	r0, r3
18010f86:	13dd      	lrw      	r6, 0x20001ffc	// 18011178 <sysctrl_cmu_sysclk_set+0x20c>
18010f88:	0cbb      	bf      	0x180110fe	// 180110fe <sysctrl_cmu_sysclk_set+0x192>
18010f8a:	eb047d00 	cmphsi      	r4, 32001
18010f8e:	081f      	bt      	0x18010fcc	// 18010fcc <sysctrl_cmu_sysclk_set+0x60>
18010f90:	8661      	ld.b      	r3, (r6, 0x1)
18010f92:	e4632020 	andi      	r3, r3, 32
18010f96:	e903001f 	bez      	r3, 0x18010fd4	// 18010fd4 <sysctrl_cmu_sysclk_set+0x68>
18010f9a:	ea037cff 	movi      	r3, 31999
18010f9e:	5c0c      	addu      	r0, r4, r3
18010fa0:	c4808020 	divu      	r0, r0, r4
18010fa4:	2800      	subi      	r0, 1
18010fa6:	7400      	zextb      	r0, r0
18010fa8:	e3fffe98 	bsr      	0x18010cd8	// 18010cd8 <ll_clock_set_sys_clk_div>
18010fac:	3005      	movi      	r0, 5
18010fae:	e3fffe79 	bsr      	0x18010ca0	// 18010ca0 <ll_clock_set_sys_clk_src>
18010fb2:	ea234002 	movih      	r3, 16386
18010fb6:	9372      	ld.w      	r3, (r3, 0x48)
18010fb8:	e463203f 	andi      	r3, r3, 63
18010fbc:	5b42      	addi      	r2, r3, 1
18010fbe:	33fa      	movi      	r3, 250
18010fc0:	4367      	lsli      	r3, r3, 7
18010fc2:	c4438023 	divu      	r3, r3, r2
18010fc6:	b663      	st.w      	r3, (r6, 0xc)
18010fc8:	3001      	movi      	r0, 1
18010fca:	0455      	br      	0x18011074	// 18011074 <sysctrl_cmu_sysclk_set+0x108>
18010fcc:	33fa      	movi      	r3, 250
18010fce:	4369      	lsli      	r3, r3, 9
18010fd0:	650c      	cmphs      	r3, r4
18010fd2:	0c18      	bf      	0x18011002	// 18011002 <sysctrl_cmu_sysclk_set+0x96>
18010fd4:	ea230002 	movih      	r3, 2
18010fd8:	e4631c00 	subi      	r3, r3, 3073
18010fdc:	5c0c      	addu      	r0, r4, r3
18010fde:	c4808020 	divu      	r0, r0, r4
18010fe2:	2800      	subi      	r0, 1
18010fe4:	7400      	zextb      	r0, r0
18010fe6:	e3fffe79 	bsr      	0x18010cd8	// 18010cd8 <ll_clock_set_sys_clk_div>
18010fea:	3000      	movi      	r0, 0
18010fec:	e3fffe5a 	bsr      	0x18010ca0	// 18010ca0 <ll_clock_set_sys_clk_src>
18010ff0:	ea234002 	movih      	r3, 16386
18010ff4:	9372      	ld.w      	r3, (r3, 0x48)
18010ff6:	e463203f 	andi      	r3, r3, 63
18010ffa:	5b42      	addi      	r2, r3, 1
18010ffc:	33fa      	movi      	r3, 250
18010ffe:	4369      	lsli      	r3, r3, 9
18011000:	07e1      	br      	0x18010fc2	// 18010fc2 <sysctrl_cmu_sysclk_set+0x56>
18011002:	9661      	ld.w      	r3, (r6, 0x4)
18011004:	650c      	cmphs      	r3, r4
18011006:	0cab      	bf      	0x1801115c	// 1801115c <sysctrl_cmu_sysclk_set+0x1f0>
18011008:	8641      	ld.b      	r2, (r6, 0x1)
1801100a:	e4222002 	andi      	r1, r2, 2
1801100e:	e9010017 	bez      	r1, 0x1801103c	// 1801103c <sysctrl_cmu_sysclk_set+0xd0>
18011012:	5b02      	addi      	r0, r3, 1
18011014:	6010      	addu      	r0, r4
18011016:	c4808020 	divu      	r0, r0, r4
1801101a:	2800      	subi      	r0, 1
1801101c:	7400      	zextb      	r0, r0
1801101e:	e3fffe5d 	bsr      	0x18010cd8	// 18010cd8 <ll_clock_set_sys_clk_div>
18011022:	3001      	movi      	r0, 1
18011024:	e3fffe3e 	bsr      	0x18010ca0	// 18010ca0 <ll_clock_set_sys_clk_src>
18011028:	ea234002 	movih      	r3, 16386
1801102c:	9641      	ld.w      	r2, (r6, 0x4)
1801102e:	9372      	ld.w      	r3, (r3, 0x48)
18011030:	e463203f 	andi      	r3, r3, 63
18011034:	2300      	addi      	r3, 1
18011036:	c4628023 	divu      	r3, r2, r3
1801103a:	07c6      	br      	0x18010fc6	// 18010fc6 <sysctrl_cmu_sysclk_set+0x5a>
1801103c:	e4422010 	andi      	r2, r2, 16
18011040:	e902008e 	bez      	r2, 0x1801115c	// 1801115c <sysctrl_cmu_sysclk_set+0x1f0>
18011044:	9602      	ld.w      	r0, (r6, 0x8)
18011046:	2000      	addi      	r0, 1
18011048:	6010      	addu      	r0, r4
1801104a:	c4808020 	divu      	r0, r0, r4
1801104e:	2800      	subi      	r0, 1
18011050:	7400      	zextb      	r0, r0
18011052:	e3fffe43 	bsr      	0x18010cd8	// 18010cd8 <ll_clock_set_sys_clk_div>
18011056:	3004      	movi      	r0, 4
18011058:	e3fffe24 	bsr      	0x18010ca0	// 18010ca0 <ll_clock_set_sys_clk_src>
1801105c:	ea234002 	movih      	r3, 16386
18011060:	9642      	ld.w      	r2, (r6, 0x8)
18011062:	9372      	ld.w      	r3, (r3, 0x48)
18011064:	e463203f 	andi      	r3, r3, 63
18011068:	2300      	addi      	r3, 1
1801106a:	07e6      	br      	0x18011036	// 18011036 <sysctrl_cmu_sysclk_set+0xca>
1801106c:	e4002010 	andi      	r0, r0, 16
18011070:	e9200081 	bnez      	r0, 0x18011172	// 18011172 <sysctrl_cmu_sysclk_set+0x206>
18011074:	1493      	pop      	r4-r6, r15
18011076:	12a2      	lrw      	r5, 0x9896800	// 1801117c <sysctrl_cmu_sysclk_set+0x210>
18011078:	c4858023 	divu      	r3, r5, r4
1801107c:	7cd0      	mult      	r3, r4
1801107e:	5d6d      	subu      	r3, r5, r3
18011080:	e923001f 	bnez      	r3, 0x180110be	// 180110be <sysctrl_cmu_sysclk_set+0x152>
18011084:	ea234002 	movih      	r3, 16386
18011088:	9353      	ld.w      	r2, (r3, 0x4c)
1801108a:	3a89      	bclri      	r2, 9
1801108c:	b353      	st.w      	r2, (r3, 0x4c)
1801108e:	9344      	ld.w      	r2, (r3, 0x10)
18011090:	ec421000 	ori      	r2, r2, 4096
18011094:	b344      	st.w      	r2, (r3, 0x10)
18011096:	5c03      	subi      	r0, r4, 1
18011098:	6014      	addu      	r0, r5
1801109a:	c4808020 	divu      	r0, r0, r4
1801109e:	7400      	zextb      	r0, r0
180110a0:	e3fffe1c 	bsr      	0x18010cd8	// 18010cd8 <ll_clock_set_sys_clk_div>
180110a4:	3003      	movi      	r0, 3
180110a6:	e3fffdfd 	bsr      	0x18010ca0	// 18010ca0 <ll_clock_set_sys_clk_src>
180110aa:	ea234002 	movih      	r3, 16386
180110ae:	9372      	ld.w      	r3, (r3, 0x48)
180110b0:	e463203f 	andi      	r3, r3, 63
180110b4:	2300      	addi      	r3, 1
180110b6:	c4658025 	divu      	r5, r5, r3
180110ba:	b6a3      	st.w      	r5, (r6, 0xc)
180110bc:	0786      	br      	0x18010fc8	// 18010fc8 <sysctrl_cmu_sysclk_set+0x5c>
180110be:	ea05b71b 	movi      	r5, 46875
180110c2:	c5854905 	rotli      	r5, r5, 12
180110c6:	c4858022 	divu      	r2, r5, r4
180110ca:	7c90      	mult      	r2, r4
180110cc:	5d49      	subu      	r2, r5, r2
180110ce:	ea234002 	movih      	r3, 16386
180110d2:	e922000a 	bnez      	r2, 0x180110e6	// 180110e6 <sysctrl_cmu_sysclk_set+0x17a>
180110d6:	9350      	ld.w      	r2, (r3, 0x40)
180110d8:	ec420020 	ori      	r2, r2, 32
180110dc:	b350      	st.w      	r2, (r3, 0x40)
180110de:	9353      	ld.w      	r2, (r3, 0x4c)
180110e0:	ec420200 	ori      	r2, r2, 512
180110e4:	0438      	br      	0x18011154	// 18011154 <sysctrl_cmu_sysclk_set+0x1e8>
180110e6:	9344      	ld.w      	r2, (r3, 0x10)
180110e8:	ec421000 	ori      	r2, r2, 4096
180110ec:	b344      	st.w      	r2, (r3, 0x10)
180110ee:	9353      	ld.w      	r2, (r3, 0x4c)
180110f0:	ec420200 	ori      	r2, r2, 512
180110f4:	b353      	st.w      	r2, (r3, 0x4c)
180110f6:	11a3      	lrw      	r5, 0xe4e1c00	// 18011180 <sysctrl_cmu_sysclk_set+0x214>
180110f8:	07cf      	br      	0x18011096	// 18011096 <sysctrl_cmu_sysclk_set+0x12a>
180110fa:	6c13      	mov      	r0, r4
180110fc:	07bc      	br      	0x18011074	// 18011074 <sysctrl_cmu_sysclk_set+0x108>
180110fe:	ea234002 	movih      	r3, 16386
18011102:	3101      	movi      	r1, 1
18011104:	93b1      	ld.w      	r5, (r3, 0x44)
18011106:	8661      	ld.b      	r3, (r6, 0x1)
18011108:	ec630008 	ori      	r3, r3, 8
1801110c:	a661      	st.b      	r3, (r6, 0x1)
1801110e:	e4a52007 	andi      	r5, r5, 7
18011112:	ea234002 	movih      	r3, 16386
18011116:	9355      	ld.w      	r2, (r3, 0x54)
18011118:	3a95      	bclri      	r2, 21
1801111a:	3a96      	bclri      	r2, 22
1801111c:	3ab5      	bseti      	r2, 21
1801111e:	b355      	st.w      	r2, (r3, 0x54)
18011120:	9351      	ld.w      	r2, (r3, 0x44)
18011122:	3a83      	bclri      	r2, 3
18011124:	b351      	st.w      	r2, (r3, 0x44)
18011126:	9352      	ld.w      	r2, (r3, 0x48)
18011128:	3aba      	bseti      	r2, 26
1801112a:	b352      	st.w      	r2, (r3, 0x48)
1801112c:	e9210005 	bnez      	r1, 0x18011136	// 18011136 <sysctrl_cmu_sysclk_set+0x1ca>
18011130:	6c17      	mov      	r0, r5
18011132:	e3fffe2f 	bsr      	0x18010d90	// 18010d90 <ll_clock_usbpll_config>
18011136:	8661      	ld.b      	r3, (r6, 0x1)
18011138:	ec630008 	ori      	r3, r3, 8
1801113c:	10b2      	lrw      	r5, 0x7270e00	// 18011184 <sysctrl_cmu_sysclk_set+0x218>
1801113e:	a661      	st.b      	r3, (r6, 0x1)
18011140:	c4858023 	divu      	r3, r5, r4
18011144:	7cd0      	mult      	r3, r4
18011146:	5d6d      	subu      	r3, r5, r3
18011148:	e923ff97 	bnez      	r3, 0x18011076	// 18011076 <sysctrl_cmu_sysclk_set+0x10a>
1801114c:	ea234002 	movih      	r3, 16386
18011150:	9353      	ld.w      	r2, (r3, 0x4c)
18011152:	3a89      	bclri      	r2, 9
18011154:	b353      	st.w      	r2, (r3, 0x4c)
18011156:	9344      	ld.w      	r2, (r3, 0x10)
18011158:	3a8c      	bclri      	r2, 12
1801115a:	079d      	br      	0x18011094	// 18011094 <sysctrl_cmu_sysclk_set+0x128>
1801115c:	8601      	ld.b      	r0, (r6, 0x1)
1801115e:	e4602002 	andi      	r3, r0, 2
18011162:	e903ff85 	bez      	r3, 0x1801106c	// 1801106c <sysctrl_cmu_sysclk_set+0x100>
18011166:	3501      	movi      	r5, 1
18011168:	6c17      	mov      	r0, r5
1801116a:	e3fffd9b 	bsr      	0x18010ca0	// 18010ca0 <ll_clock_set_sys_clk_src>
1801116e:	3100      	movi      	r1, 0
18011170:	07d1      	br      	0x18011112	// 18011112 <sysctrl_cmu_sysclk_set+0x1a6>
18011172:	3504      	movi      	r5, 4
18011174:	07fa      	br      	0x18011168	// 18011168 <sysctrl_cmu_sysclk_set+0x1fc>
18011176:	0000      	.short	0x0000
18011178:	20001ffc 	.long	0x20001ffc
1801117c:	09896800 	.long	0x09896800
18011180:	0e4e1c00 	.long	0x0e4e1c00
18011184:	07270e00 	.long	0x07270e00

18011188 <sys_get_apbclk>:
18011188:	1062      	lrw      	r3, 0x20001ffc	// 18011190 <sys_get_apbclk+0x8>
1801118a:	9303      	ld.w      	r0, (r3, 0xc)
1801118c:	783c      	jmp      	r15
1801118e:	0000      	.short	0x0000
18011190:	20001ffc 	.long	0x20001ffc

18011194 <sys_get_sysclk>:
18011194:	1062      	lrw      	r3, 0x20001ffc	// 1801119c <sys_get_sysclk+0x8>
18011196:	9303      	ld.w      	r0, (r3, 0xc)
18011198:	783c      	jmp      	r15
1801119a:	0000      	.short	0x0000
1801119c:	20001ffc 	.long	0x20001ffc

180111a0 <system_clock_get>:
180111a0:	1062      	lrw      	r3, 0x20001ffc	// 180111a8 <system_clock_get+0x8>
180111a2:	9303      	ld.w      	r0, (r3, 0xc)
180111a4:	783c      	jmp      	r15
180111a6:	0000      	.short	0x0000
180111a8:	20001ffc 	.long	0x20001ffc

180111ac <peripheral_clock_get>:
180111ac:	14d0      	push      	r15
180111ae:	eb000031 	cmphsi      	r0, 50
180111b2:	0807      	bt      	0x180111c0	// 180111c0 <peripheral_clock_get+0x14>
180111b4:	1062      	lrw      	r3, 0x18017f88	// 180111bc <peripheral_clock_get+0x10>
180111b6:	d0030883 	ldr.w      	r3, (r3, r0 << 2)
180111ba:	780c      	jmp      	r3
180111bc:	18017f88 	.long	0x18017f88
180111c0:	3000      	movi      	r0, 0
180111c2:	1490      	pop      	r15
180111c4:	ea234002 	movih      	r3, 16386
180111c8:	1149      	lrw      	r2, 0x18018050	// 1801126c <peripheral_clock_get+0xc0>
180111ca:	9372      	ld.w      	r3, (r3, 0x48)
180111cc:	c7635783 	zext      	r3, r3, 28, 27
180111d0:	d0620020 	ldr.b      	r0, (r2, r3 << 0)
180111d4:	e3fffd14 	bsr      	0x18010bfc	// 18010bfc <sysctrl_clk_src_2_freq>
180111d8:	07f5      	br      	0x180111c2	// 180111c2 <peripheral_clock_get+0x16>
180111da:	e3fffd3b 	bsr      	0x18010c50	// 18010c50 <ll_clock_get_qspi_src_clk>
180111de:	07f2      	br      	0x180111c2	// 180111c2 <peripheral_clock_get+0x16>
180111e0:	e3fffd52 	bsr      	0x18010c84	// 18010c84 <ll_clock_get_ospi_src_clk>
180111e4:	07ef      	br      	0x180111c2	// 180111c2 <peripheral_clock_get+0x16>
180111e6:	ea234002 	movih      	r3, 16386
180111ea:	9374      	ld.w      	r3, (r3, 0x50)
180111ec:	c6a356c3 	zext      	r3, r3, 22, 21
180111f0:	1140      	lrw      	r2, 0x18018058	// 18011270 <peripheral_clock_get+0xc4>
180111f2:	07ef      	br      	0x180111d0	// 180111d0 <peripheral_clock_get+0x24>
180111f4:	ea234002 	movih      	r3, 16386
180111f8:	9361      	ld.w      	r3, (r3, 0x4)
180111fa:	c5435563 	zext      	r3, r3, 11, 10
180111fe:	105e      	lrw      	r2, 0x18018054	// 18011274 <peripheral_clock_get+0xc8>
18011200:	07e8      	br      	0x180111d0	// 180111d0 <peripheral_clock_get+0x24>
18011202:	ea234002 	movih      	r3, 16386
18011206:	9361      	ld.w      	r3, (r3, 0x4)
18011208:	4b7e      	lsri      	r3, r3, 30
1801120a:	07fa      	br      	0x180111fe	// 180111fe <peripheral_clock_get+0x52>
1801120c:	ea234002 	movih      	r3, 16386
18011210:	9363      	ld.w      	r3, (r3, 0xc)
18011212:	c6435663 	zext      	r3, r3, 19, 18
18011216:	07f4      	br      	0x180111fe	// 180111fe <peripheral_clock_get+0x52>
18011218:	ea234002 	movih      	r3, 16386
1801121c:	9364      	ld.w      	r3, (r3, 0x10)
1801121e:	c68356a3 	zext      	r3, r3, 21, 20
18011222:	07e7      	br      	0x180111f0	// 180111f0 <peripheral_clock_get+0x44>
18011224:	ea234002 	movih      	r3, 16386
18011228:	9364      	ld.w      	r3, (r3, 0x10)
1801122a:	c6c356e3 	zext      	r3, r3, 23, 22
1801122e:	07e1      	br      	0x180111f0	// 180111f0 <peripheral_clock_get+0x44>
18011230:	ea234002 	movih      	r3, 16386
18011234:	9364      	ld.w      	r3, (r3, 0x10)
18011236:	c7035723 	zext      	r3, r3, 25, 24
1801123a:	07db      	br      	0x180111f0	// 180111f0 <peripheral_clock_get+0x44>
1801123c:	106f      	lrw      	r3, 0x20001ffc	// 18011278 <peripheral_clock_get+0xcc>
1801123e:	9303      	ld.w      	r0, (r3, 0xc)
18011240:	07c1      	br      	0x180111c2	// 180111c2 <peripheral_clock_get+0x16>
18011242:	ea234002 	movih      	r3, 16386
18011246:	9312      	ld.w      	r0, (r3, 0x48)
18011248:	c50055e0 	zext      	r0, r0, 15, 8
1801124c:	104b      	lrw      	r2, 0x20001ffc	// 18011278 <peripheral_clock_get+0xcc>
1801124e:	5862      	addi      	r3, r0, 1
18011250:	9203      	ld.w      	r0, (r2, 0xc)
18011252:	c4608020 	divu      	r0, r0, r3
18011256:	07b6      	br      	0x180111c2	// 180111c2 <peripheral_clock_get+0x16>
18011258:	ea234002 	movih      	r3, 16386
1801125c:	9312      	ld.w      	r0, (r3, 0x48)
1801125e:	33ff      	movi      	r3, 255
18011260:	4808      	lsri      	r0, r0, 8
18011262:	4368      	lsli      	r3, r3, 8
18011264:	680c      	and      	r0, r3
18011266:	07f3      	br      	0x1801124c	// 1801124c <peripheral_clock_get+0xa0>
18011268:	1005      	lrw      	r0, 0x1c9c3800	// 1801127c <peripheral_clock_get+0xd0>
1801126a:	07ac      	br      	0x180111c2	// 180111c2 <peripheral_clock_get+0x16>
1801126c:	18018050 	.long	0x18018050
18011270:	18018058 	.long	0x18018058
18011274:	18018054 	.long	0x18018054
18011278:	20001ffc 	.long	0x20001ffc
1801127c:	1c9c3800 	.long	0x1c9c3800

18011280 <pmu_reg_reset>:
18011280:	14d4      	push      	r4-r7, r15
18011282:	3500      	movi      	r5, 0
18011284:	ea048003 	movi      	r4, 32771
18011288:	c5e44904 	rotli      	r4, r4, 15
1801128c:	10e9      	lrw      	r7, 0x18018060	// 180112b0 <pmu_reg_reset+0x30>
1801128e:	2d00      	subi      	r5, 1
18011290:	10c9      	lrw      	r6, 0x400180ec	// 180112b4 <pmu_reg_reset+0x34>
18011292:	ea23bffe 	movih      	r3, 49150
18011296:	3baf      	bseti      	r3, 15
18011298:	60d0      	addu      	r3, r4
1801129a:	d0670821 	ldr.w      	r1, (r7, r3 << 0)
1801129e:	6546      	cmpne      	r1, r5
180112a0:	0c04      	bf      	0x180112a8	// 180112a8 <pmu_reg_reset+0x28>
180112a2:	6c13      	mov      	r0, r4
180112a4:	e3fffabe 	bsr      	0x18010820	// 18010820 <pmu_reg_write>
180112a8:	2403      	addi      	r4, 4
180112aa:	6592      	cmpne      	r4, r6
180112ac:	0bf3      	bt      	0x18011292	// 18011292 <pmu_reg_reset+0x12>
180112ae:	1494      	pop      	r4-r7, r15
180112b0:	18018060 	.long	0x18018060
180112b4:	400180ec 	.long	0x400180ec

180112b8 <mcu_reset>:
180112b8:	14d1      	push      	r4, r15
180112ba:	ea048003 	movi      	r4, 32771
180112be:	c5e44904 	rotli      	r4, r4, 15
180112c2:	1013      	lrw      	r0, 0x40018034	// 1801130c <mcu_reset+0x54>
180112c4:	942d      	ld.w      	r1, (r4, 0x34)
180112c6:	3981      	bclri      	r1, 1
180112c8:	e3fffaac 	bsr      	0x18010820	// 18010820 <pmu_reg_write>
180112cc:	942d      	ld.w      	r1, (r4, 0x34)
180112ce:	3980      	bclri      	r1, 0
180112d0:	100f      	lrw      	r0, 0x40018034	// 1801130c <mcu_reset+0x54>
180112d2:	e3fffaa7 	bsr      	0x18010820	// 18010820 <pmu_reg_write>
180112d6:	e3ffffd5 	bsr      	0x18011280	// 18011280 <pmu_reg_reset>
180112da:	942d      	ld.w      	r1, (r4, 0x34)
180112dc:	3981      	bclri      	r1, 1
180112de:	100c      	lrw      	r0, 0x40018034	// 1801130c <mcu_reset+0x54>
180112e0:	e3fffaa0 	bsr      	0x18010820	// 18010820 <pmu_reg_write>
180112e4:	942d      	ld.w      	r1, (r4, 0x34)
180112e6:	3980      	bclri      	r1, 0
180112e8:	1009      	lrw      	r0, 0x40018034	// 1801130c <mcu_reset+0x54>
180112ea:	e3fffa9b 	bsr      	0x18010820	// 18010820 <pmu_reg_write>
180112ee:	c01f6023 	mfcr      	r3, cr<31, 0>
180112f2:	ea025432 	movi      	r2, 21554
180112f6:	6c8a      	nor      	r2, r2
180112f8:	c4625df0 	ins      	r3, r2, 31, 16
180112fc:	c0000420 	sync
18011300:	c003643f 	mtcr      	r3, cr<31, 0>
18011304:	c0000420 	sync
18011308:	6c03      	mov      	r0, r0
1801130a:	07ff      	br      	0x18011308	// 18011308 <mcu_reset+0x50>
1801130c:	40018034 	.long	0x40018034

18011310 <mcu_watchdog_timeout>:
18011310:	1071      	lrw      	r3, 0x40015000	// 18011354 <mcu_watchdog_timeout+0x44>
18011312:	ea02dddd 	movi      	r2, 56797
18011316:	b341      	st.w      	r2, (r3, 0x4)
18011318:	e900001c 	bez      	r0, 0x18011350	// 18011350 <mcu_watchdog_timeout+0x40>
1801131c:	ea02aa55 	movi      	r2, 43605
18011320:	b341      	st.w      	r2, (r3, 0x4)
18011322:	3106      	movi      	r1, 6
18011324:	4801      	lsri      	r0, r0, 1
18011326:	2100      	addi      	r1, 1
18011328:	e920fffe 	bnez      	r0, 0x18011324	// 18011324 <mcu_watchdog_timeout+0x14>
1801132c:	106a      	lrw      	r3, 0x40015000	// 18011354 <mcu_watchdog_timeout+0x44>
1801132e:	ea025555 	movi      	r2, 21845
18011332:	b341      	st.w      	r2, (r3, 0x4)
18011334:	3000      	movi      	r0, 0
18011336:	9340      	ld.w      	r2, (r3, 0x0)
18011338:	280f      	subi      	r0, 16
1801133a:	6880      	and      	r2, r0
1801133c:	e421200f 	andi      	r1, r1, 15
18011340:	6c84      	or      	r2, r1
18011342:	b340      	st.w      	r2, (r3, 0x0)
18011344:	ea02aaaa 	movi      	r2, 43690
18011348:	b341      	st.w      	r2, (r3, 0x4)
1801134a:	ea02cccc 	movi      	r2, 52428
1801134e:	b341      	st.w      	r2, (r3, 0x4)
18011350:	783c      	jmp      	r15
18011352:	0000      	.short	0x0000
18011354:	40015000 	.long	0x40015000

18011358 <mcu_watchdog_timeout_level>:
18011358:	106e      	lrw      	r3, 0x40015000	// 18011390 <mcu_watchdog_timeout_level+0x38>
1801135a:	ea02dddd 	movi      	r2, 56797
1801135e:	b341      	st.w      	r2, (r3, 0x4)
18011360:	e9000016 	bez      	r0, 0x1801138c	// 1801138c <mcu_watchdog_timeout_level+0x34>
18011364:	ea02aa55 	movi      	r2, 43605
18011368:	b341      	st.w      	r2, (r3, 0x4)
1801136a:	3100      	movi      	r1, 0
1801136c:	ea025555 	movi      	r2, 21845
18011370:	b341      	st.w      	r2, (r3, 0x4)
18011372:	290f      	subi      	r1, 16
18011374:	9340      	ld.w      	r2, (r3, 0x0)
18011376:	6884      	and      	r2, r1
18011378:	e400200f 	andi      	r0, r0, 15
1801137c:	6c08      	or      	r0, r2
1801137e:	ea02aaaa 	movi      	r2, 43690
18011382:	b300      	st.w      	r0, (r3, 0x0)
18011384:	b341      	st.w      	r2, (r3, 0x4)
18011386:	ea02cccc 	movi      	r2, 52428
1801138a:	b341      	st.w      	r2, (r3, 0x4)
1801138c:	783c      	jmp      	r15
1801138e:	0000      	.short	0x0000
18011390:	40015000 	.long	0x40015000

18011394 <mcu_watchdog_feed>:
18011394:	1063      	lrw      	r3, 0x40015000	// 180113a0 <mcu_watchdog_feed+0xc>
18011396:	ea02aaaa 	movi      	r2, 43690
1801139a:	b341      	st.w      	r2, (r3, 0x4)
1801139c:	783c      	jmp      	r15
1801139e:	0000      	.short	0x0000
180113a0:	40015000 	.long	0x40015000

180113a4 <sysctrl_rst_lmac_phy>:
180113a4:	ea234002 	movih      	r3, 16386
180113a8:	ea21fda0 	movih      	r1, 64928
180113ac:	9342      	ld.w      	r2, (r3, 0x8)
180113ae:	2900      	subi      	r1, 1
180113b0:	6884      	and      	r2, r1
180113b2:	b342      	st.w      	r2, (r3, 0x8)
180113b4:	9342      	ld.w      	r2, (r3, 0x8)
180113b6:	3ab5      	bseti      	r2, 21
180113b8:	3ab9      	bseti      	r2, 25
180113ba:	b342      	st.w      	r2, (r3, 0x8)
180113bc:	783c      	jmp      	r15
	...

180113c0 <ll_sysctrl_dma2ahb_burst_pos_reallocate>:
180113c0:	14c5      	push      	r4-r8
180113c2:	e9a10020 	bhsz      	r1, 0x18011402	// 18011402 <ll_sysctrl_dma2ahb_burst_pos_reallocate+0x42>
180113c6:	3200      	movi      	r2, 0
180113c8:	6086      	subu      	r2, r1
180113ca:	7488      	zextb      	r2, r2
180113cc:	c602482c 	lsli      	r12, r2, 16
180113d0:	4278      	lsli      	r3, r2, 24
180113d2:	6cf0      	or      	r3, r12
180113d4:	6cc8      	or      	r3, r2
180113d6:	4248      	lsli      	r2, r2, 8
180113d8:	6c8c      	or      	r2, r3
180113da:	e580201c 	andi      	r12, r0, 28
180113de:	ea03200c 	movi      	r3, 8204
180113e2:	3bbe      	bseti      	r3, 30
180113e4:	630c      	addu      	r12, r3
180113e6:	e4002003 	andi      	r0, r0, 3
180113ea:	3300      	movi      	r3, 0
180113ec:	4003      	lsli      	r0, r0, 3
180113ee:	2b00      	subi      	r3, 1
180113f0:	70c0      	lsl      	r3, r0
180113f2:	68c8      	and      	r3, r2
180113f4:	ea06202b 	movi      	r6, 8235
180113f8:	3ebe      	bseti      	r6, 30
180113fa:	6718      	cmphs      	r6, r12
180113fc:	0805      	bt      	0x18011406	// 18011406 <ll_sysctrl_dma2ahb_burst_pos_reallocate+0x46>
180113fe:	3000      	movi      	r0, 0
18011400:	1485      	pop      	r4-r8
18011402:	7484      	zextb      	r2, r1
18011404:	07e4      	br      	0x180113cc	// 180113cc <ll_sysctrl_dma2ahb_burst_pos_reallocate+0xc>
18011406:	d80c2000 	ld.w      	r0, (r12, 0x0)
1801140a:	e9a10018 	bhsz      	r1, 0x1801143a	// 1801143a <ll_sysctrl_dma2ahb_burst_pos_reallocate+0x7a>
1801140e:	3404      	movi      	r4, 4
18011410:	ea0d00ff 	movi      	r13, 255
18011414:	c5a32025 	and      	r5, r3, r13
18011418:	c5a02028 	and      	r8, r0, r13
1801141c:	58f5      	subu      	r7, r0, r5
1801141e:	6560      	cmphs      	r8, r5
18011420:	2c00      	subi      	r4, 1
18011422:	c4070c40 	inct      	r0, r7, 0
18011426:	c50d482d 	lsli      	r13, r13, 8
1801142a:	e924fff5 	bnez      	r4, 0x18011414	// 18011414 <ll_sysctrl_dma2ahb_burst_pos_reallocate+0x54>
1801142e:	dc0c2000 	st.w      	r0, (r12, 0x0)
18011432:	e58c0003 	addi      	r12, r12, 4
18011436:	6ccb      	mov      	r3, r2
18011438:	07e1      	br      	0x180113fa	// 180113fa <ll_sysctrl_dma2ahb_burst_pos_reallocate+0x3a>
1801143a:	60c0      	addu      	r3, r0
1801143c:	dc6c2000 	st.w      	r3, (r12, 0x0)
18011440:	07f9      	br      	0x18011432	// 18011432 <ll_sysctrl_dma2ahb_burst_pos_reallocate+0x72>
	...

18011444 <ll_sysctrl_dma2ahb_burst_set>:
18011444:	14d3      	push      	r4-r6, r15
18011446:	4842      	lsri      	r2, r0, 2
18011448:	ea032004 	movi      	r3, 8196
1801144c:	3bbe      	bseti      	r3, 30
1801144e:	e4422004 	andi      	r2, r2, 4
18011452:	608c      	addu      	r2, r3
18011454:	e580200f 	andi      	r12, r0, 15
18011458:	6330      	addu      	r12, r12
1801145a:	3303      	movi      	r3, 3
1801145c:	d9a22000 	ld.w      	r13, (r2, 0x0)
18011460:	70f0      	lsl      	r3, r12
18011462:	1095      	lrw      	r4, 0x18018181	// 180114b4 <ll_sysctrl_dma2ahb_burst_set+0x70>
18011464:	6b4c      	and      	r13, r3
18011466:	7371      	lsr      	r13, r12
18011468:	d0240026 	ldr.b      	r6, (r4, r1 << 0)
1801146c:	d1a40024 	ldr.b      	r4, (r4, r13 << 0)
18011470:	651a      	cmpne      	r6, r4
18011472:	0c1b      	bf      	0x180114a8	// 180114a8 <ll_sysctrl_dma2ahb_burst_set+0x64>
18011474:	10b1      	lrw      	r5, 0x20000b98	// 180114b8 <ll_sysctrl_dma2ahb_burst_set+0x74>
18011476:	d9a52000 	ld.w      	r13, (r5, 0x0)
1801147a:	6350      	addu      	r13, r4
1801147c:	65b4      	cmphs      	r13, r6
1801147e:	0c17      	bf      	0x180114ac	// 180114ac <ll_sysctrl_dma2ahb_burst_set+0x68>
18011480:	d9a22000 	ld.w      	r13, (r2, 0x0)
18011484:	e4212003 	andi      	r1, r1, 3
18011488:	c46d2043 	andn      	r3, r13, r3
1801148c:	7070      	lsl      	r1, r12
1801148e:	6c4c      	or      	r1, r3
18011490:	b220      	st.w      	r1, (r2, 0x0)
18011492:	5e31      	subu      	r1, r6, r4
18011494:	5123      	asri      	r1, r1, 3
18011496:	2000      	addi      	r0, 1
18011498:	e3ffff94 	bsr      	0x180113c0	// 180113c0 <ll_sysctrl_dma2ahb_burst_pos_reallocate>
1801149c:	9560      	ld.w      	r3, (r5, 0x0)
1801149e:	60d0      	addu      	r3, r4
180114a0:	b560      	st.w      	r3, (r5, 0x0)
180114a2:	9560      	ld.w      	r3, (r5, 0x0)
180114a4:	5bd9      	subu      	r6, r3, r6
180114a6:	b5c0      	st.w      	r6, (r5, 0x0)
180114a8:	3000      	movi      	r0, 0
180114aa:	1493      	pop      	r4-r6, r15
180114ac:	3000      	movi      	r0, 0
180114ae:	2800      	subi      	r0, 1
180114b0:	07fd      	br      	0x180114aa	// 180114aa <ll_sysctrl_dma2ahb_burst_set+0x66>
180114b2:	0000      	.short	0x0000
180114b4:	18018181 	.long	0x18018181
180114b8:	20000b98 	.long	0x20000b98

180114bc <system_clocks_show>:
180114bc:	14d5      	push      	r4-r8, r15
180114be:	1073      	lrw      	r3, 0x20001ffc	// 18011508 <system_clocks_show+0x4c>
180114c0:	ea05f424 	movi      	r5, 62500
180114c4:	c4854905 	rotli      	r5, r5, 4
180114c8:	9383      	ld.w      	r4, (r3, 0xc)
180114ca:	e3fffbc3 	bsr      	0x18010c50	// 18010c50 <ll_clock_get_qspi_src_clk>
180114ce:	6d83      	mov      	r6, r0
180114d0:	3080      	movi      	r0, 128
180114d2:	4017      	lsli      	r0, r0, 23
180114d4:	e3fffc1c 	bsr      	0x18010d0c	// 18010d0c <ll_oqspi_get_div>
180114d8:	6e03      	mov      	r8, r0
180114da:	e3fffbd5 	bsr      	0x18010c84	// 18010c84 <ll_clock_get_ospi_src_clk>
180114de:	6dc3      	mov      	r7, r0
180114e0:	ea001000 	movi      	r0, 4096
180114e4:	38be      	bseti      	r0, 30
180114e6:	e3fffc13 	bsr      	0x18010d0c	// 18010d0c <ll_oqspi_get_div>
180114ea:	c4078023 	divu      	r3, r7, r0
180114ee:	c4a48044 	divs      	r4, r4, r5
180114f2:	c5068022 	divu      	r2, r6, r8
180114f6:	c4a38023 	divu      	r3, r3, r5
180114fa:	c4a28022 	divu      	r2, r2, r5
180114fe:	6c53      	mov      	r1, r4
18011500:	1003      	lrw      	r0, 0x18018185	// 1801150c <system_clocks_show+0x50>
18011502:	e3ffdae1 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18011506:	1495      	pop      	r4-r8, r15
18011508:	20001ffc 	.long	0x20001ffc
1801150c:	18018185 	.long	0x18018185

18011510 <system_qspi_pretect_all>:
18011510:	3380      	movi      	r3, 128
18011512:	4377      	lsli      	r3, r3, 23
18011514:	6c8f      	mov      	r2, r3
18011516:	d9832015 	ld.w      	r12, (r3, 0x54)
1801151a:	1017      	lrw      	r0, 0x2000192c	// 18011574 <system_qspi_pretect_all+0x64>
1801151c:	1037      	lrw      	r1, 0x20001928	// 18011578 <system_qspi_pretect_all+0x68>
1801151e:	e92c0027 	bnez      	r12, 0x1801156c	// 1801156c <system_qspi_pretect_all+0x5c>
18011522:	d9832014 	ld.w      	r12, (r3, 0x50)
18011526:	e92c0023 	bnez      	r12, 0x1801156c	// 1801156c <system_qspi_pretect_all+0x5c>
1801152a:	9349      	ld.w      	r2, (r3, 0x24)
1801152c:	ea8c0014 	lrw      	r12, 0x1801ab95	// 1801157c <system_qspi_pretect_all+0x6c>
18011530:	60b0      	addu      	r2, r12
18011532:	ea8c0014 	lrw      	r12, 0x18000000	// 18011580 <system_qspi_pretect_all+0x70>
18011536:	60b2      	subu      	r2, r12
18011538:	ea0c01ff 	movi      	r12, 511
1801153c:	6f32      	nor      	r12, r12
1801153e:	68b0      	and      	r2, r12
18011540:	b040      	st.w      	r2, (r0, 0x0)
18011542:	9369      	ld.w      	r3, (r3, 0x24)
18011544:	ea22ffff 	movih      	r2, 65535
18011548:	68c8      	and      	r3, r2
1801154a:	b160      	st.w      	r3, (r1, 0x0)
1801154c:	3380      	movi      	r3, 128
1801154e:	4377      	lsli      	r3, r3, 23
18011550:	ea020103 	movi      	r2, 259
18011554:	b342      	st.w      	r2, (r3, 0x8)
18011556:	3200      	movi      	r2, 0
18011558:	2a00      	subi      	r2, 1
1801155a:	b355      	st.w      	r2, (r3, 0x54)
1801155c:	3200      	movi      	r2, 0
1801155e:	b354      	st.w      	r2, (r3, 0x50)
18011560:	3202      	movi      	r2, 2
18011562:	b356      	st.w      	r2, (r3, 0x58)
18011564:	c6e05022 	bmaski      	r2, 24
18011568:	b351      	st.w      	r2, (r3, 0x44)
1801156a:	783c      	jmp      	r15
1801156c:	9275      	ld.w      	r3, (r2, 0x54)
1801156e:	b060      	st.w      	r3, (r0, 0x0)
18011570:	9274      	ld.w      	r3, (r2, 0x50)
18011572:	07ec      	br      	0x1801154a	// 1801154a <system_qspi_pretect_all+0x3a>
18011574:	2000192c 	.long	0x2000192c
18011578:	20001928 	.long	0x20001928
1801157c:	1801ab95 	.long	0x1801ab95
18011580:	18000000 	.long	0x18000000

18011584 <qsip_flash_protect>:
18011584:	14d0      	push      	r15
18011586:	3080      	movi      	r0, 128
18011588:	3101      	movi      	r1, 1
1801158a:	4017      	lsli      	r0, r0, 23
1801158c:	e3ff9c44 	bsr      	0x18004e14	// 18004e14 <hg_qspi_flash_protect>
18011590:	1490      	pop      	r15
	...

18011594 <hgusb20_switch_stable_otg>:
18011594:	3303      	movi      	r3, 3
18011596:	dc600038 	st.b      	r3, (r0, 0x38)
1801159a:	3300      	movi      	r3, 0
1801159c:	dc600039 	st.b      	r3, (r0, 0x39)
180115a0:	783c      	jmp      	r15
	...

180115a4 <hgusb20_init_globle>:
180115a4:	783c      	jmp      	r15
	...

180115a8 <usb_intr_dis>:
180115a8:	9063      	ld.w      	r3, (r0, 0xc)
180115aa:	3200      	movi      	r2, 0
180115ac:	a34b      	st.b      	r2, (r3, 0xb)
180115ae:	a346      	st.b      	r2, (r3, 0x6)
180115b0:	a347      	st.b      	r2, (r3, 0x7)
180115b2:	a348      	st.b      	r2, (r3, 0x8)
180115b4:	a349      	st.b      	r2, (r3, 0x9)
180115b6:	783c      	jmp      	r15

180115b8 <hgusb20_reset2host_mode>:
180115b8:	14d3      	push      	r4-r6, r15
180115ba:	ea234002 	movih      	r3, 16386
180115be:	90a3      	ld.w      	r5, (r0, 0xc)
180115c0:	9342      	ld.w      	r2, (r3, 0x8)
180115c2:	3a9d      	bclri      	r2, 29
180115c4:	6d03      	mov      	r4, r0
180115c6:	b342      	st.w      	r2, (r3, 0x8)
180115c8:	6c03      	mov      	r0, r0
180115ca:	6c03      	mov      	r0, r0
180115cc:	6c03      	mov      	r0, r0
180115ce:	6c03      	mov      	r0, r0
180115d0:	6c03      	mov      	r0, r0
180115d2:	6c03      	mov      	r0, r0
180115d4:	6c03      	mov      	r0, r0
180115d6:	6c03      	mov      	r0, r0
180115d8:	9342      	ld.w      	r2, (r3, 0x8)
180115da:	3abd      	bseti      	r2, 29
180115dc:	b342      	st.w      	r2, (r3, 0x8)
180115de:	9342      	ld.w      	r2, (r3, 0x8)
180115e0:	3a92      	bclri      	r2, 18
180115e2:	b342      	st.w      	r2, (r3, 0x8)
180115e4:	6c03      	mov      	r0, r0
180115e6:	6c03      	mov      	r0, r0
180115e8:	6c03      	mov      	r0, r0
180115ea:	6c03      	mov      	r0, r0
180115ec:	6c03      	mov      	r0, r0
180115ee:	6c03      	mov      	r0, r0
180115f0:	6c03      	mov      	r0, r0
180115f2:	6c03      	mov      	r0, r0
180115f4:	d843203a 	ld.w      	r2, (r3, 0xe8)
180115f8:	c40257c2 	zext      	r2, r2, 30, 0
180115fc:	dc43203a 	st.w      	r2, (r3, 0xe8)
18011600:	d843203b 	ld.w      	r2, (r3, 0xec)
18011604:	3abf      	bseti      	r2, 31
18011606:	dc43203b 	st.w      	r2, (r3, 0xec)
1801160a:	d843203c 	ld.w      	r2, (r3, 0xf0)
1801160e:	3abf      	bseti      	r2, 31
18011610:	dc43203c 	st.w      	r2, (r3, 0xf0)
18011614:	d843203d 	ld.w      	r2, (r3, 0xf4)
18011618:	c6c05021 	bmaski      	r1, 23
1801161c:	2107      	addi      	r1, 8
1801161e:	6c84      	or      	r2, r1
18011620:	dc43203d 	st.w      	r2, (r3, 0xf4)
18011624:	9342      	ld.w      	r2, (r3, 0x8)
18011626:	3ab2      	bseti      	r2, 18
18011628:	b342      	st.w      	r2, (r3, 0x8)
1801162a:	3303      	movi      	r3, 3
1801162c:	dc650060 	st.b      	r3, (r5, 0x60)
18011630:	e4600083 	addi      	r3, r0, 132
18011634:	dc6520e0 	st.w      	r3, (r5, 0x380)
18011638:	e3ffffb8 	bsr      	0x180115a8	// 180115a8 <usb_intr_dis>
1801163c:	c0006023 	mfcr      	r3, cr<0, 0>
18011640:	c0807020 	psrclr      	ie
18011644:	3200      	movi      	r2, 0
18011646:	a54e      	st.b      	r2, (r5, 0xe)
18011648:	e4632040 	andi      	r3, r3, 64
1801164c:	3200      	movi      	r2, 0
1801164e:	2a3f      	subi      	r2, 64
18011650:	a552      	st.b      	r2, (r5, 0x12)
18011652:	e9030004 	bez      	r3, 0x1801165a	// 1801165a <hgusb20_reset2host_mode+0xa2>
18011656:	c0807420 	psrset      	ie
1801165a:	3600      	movi      	r6, 0
1801165c:	a5ce      	st.b      	r6, (r5, 0xe)
1801165e:	320c      	movi      	r2, 12
18011660:	3100      	movi      	r1, 0
18011662:	e404003b 	addi      	r0, r4, 60
18011666:	e0002401 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
1801166a:	3396      	movi      	r3, 150
1801166c:	4361      	lsli      	r3, r3, 1
1801166e:	dc641032 	st.h      	r3, (r4, 0x64)
18011672:	3300      	movi      	r3, 0
18011674:	2b00      	subi      	r3, 1
18011676:	dc640060 	st.b      	r3, (r4, 0x60)
1801167a:	ea03f03c 	movi      	r3, 61500
1801167e:	c4834903 	rotli      	r3, r3, 4
18011682:	dcc40063 	st.b      	r6, (r4, 0x63)
18011686:	dcc40062 	st.b      	r6, (r4, 0x62)
1801168a:	dcc40067 	st.b      	r6, (r4, 0x67)
1801168e:	dc6520eb 	st.w      	r3, (r5, 0x3ac)
18011692:	dc6520f7 	st.w      	r3, (r5, 0x3dc)
18011696:	1493      	pop      	r4-r6, r15

18011698 <hgusb20_host_reset_phy>:
18011698:	14d2      	push      	r4-r5, r15
1801169a:	ea234002 	movih      	r3, 16386
1801169e:	9083      	ld.w      	r4, (r0, 0xc)
180116a0:	9342      	ld.w      	r2, (r3, 0x8)
180116a2:	3a9d      	bclri      	r2, 29
180116a4:	6d43      	mov      	r5, r0
180116a6:	b342      	st.w      	r2, (r3, 0x8)
180116a8:	6c03      	mov      	r0, r0
180116aa:	6c03      	mov      	r0, r0
180116ac:	6c03      	mov      	r0, r0
180116ae:	6c03      	mov      	r0, r0
180116b0:	6c03      	mov      	r0, r0
180116b2:	6c03      	mov      	r0, r0
180116b4:	6c03      	mov      	r0, r0
180116b6:	6c03      	mov      	r0, r0
180116b8:	9342      	ld.w      	r2, (r3, 0x8)
180116ba:	3abd      	bseti      	r2, 29
180116bc:	b342      	st.w      	r2, (r3, 0x8)
180116be:	9342      	ld.w      	r2, (r3, 0x8)
180116c0:	3a92      	bclri      	r2, 18
180116c2:	b342      	st.w      	r2, (r3, 0x8)
180116c4:	6c03      	mov      	r0, r0
180116c6:	6c03      	mov      	r0, r0
180116c8:	6c03      	mov      	r0, r0
180116ca:	6c03      	mov      	r0, r0
180116cc:	6c03      	mov      	r0, r0
180116ce:	6c03      	mov      	r0, r0
180116d0:	6c03      	mov      	r0, r0
180116d2:	6c03      	mov      	r0, r0
180116d4:	9342      	ld.w      	r2, (r3, 0x8)
180116d6:	3ab2      	bseti      	r2, 18
180116d8:	b342      	st.w      	r2, (r3, 0x8)
180116da:	3303      	movi      	r3, 3
180116dc:	dc640060 	st.b      	r3, (r4, 0x60)
180116e0:	e3ffff64 	bsr      	0x180115a8	// 180115a8 <usb_intr_dis>
180116e4:	c0006023 	mfcr      	r3, cr<0, 0>
180116e8:	c0807020 	psrclr      	ie
180116ec:	3200      	movi      	r2, 0
180116ee:	a44e      	st.b      	r2, (r4, 0xe)
180116f0:	e4632040 	andi      	r3, r3, 64
180116f4:	3200      	movi      	r2, 0
180116f6:	2a3f      	subi      	r2, 64
180116f8:	a452      	st.b      	r2, (r4, 0x12)
180116fa:	e9030004 	bez      	r3, 0x18011702	// 18011702 <hgusb20_host_reset_phy+0x6a>
180116fe:	c0807420 	psrset      	ie
18011702:	3300      	movi      	r3, 0
18011704:	a46e      	st.b      	r3, (r4, 0xe)
18011706:	2583      	addi      	r5, 132
18011708:	ea03f03c 	movi      	r3, 61500
1801170c:	c4834903 	rotli      	r3, r3, 4
18011710:	dca420e0 	st.w      	r5, (r4, 0x380)
18011714:	dc6420eb 	st.w      	r3, (r4, 0x3ac)
18011718:	dc6420f7 	st.w      	r3, (r4, 0x3dc)
1801171c:	3334      	movi      	r3, 52
1801171e:	a46b      	st.b      	r3, (r4, 0xb)
18011720:	1492      	pop      	r4-r5, r15
	...

18011724 <csi_vic_disable_irq>:
18011724:	c4a054c3 	zext      	r3, r0, 6, 5
18011728:	3201      	movi      	r2, 1
1801172a:	e400201f 	andi      	r0, r0, 31
1801172e:	c4024020 	lsl      	r0, r2, r0
18011732:	231f      	addi      	r3, 32
18011734:	1042      	lrw      	r2, 0xe000e100	// 1801173c <csi_vic_disable_irq+0x18>
18011736:	d4620880 	str.w      	r0, (r2, r3 << 2)
1801173a:	783c      	jmp      	r15
1801173c:	e000e100 	.long	0xe000e100

18011740 <hgusb20_is_host_mode>:
18011740:	9063      	ld.w      	r3, (r0, 0xc)
18011742:	d8030060 	ld.b      	r0, (r3, 0x60)
18011746:	c4405440 	zext      	r0, r0, 2, 2
1801174a:	783c      	jmp      	r15

1801174c <hgusb20_dev_free>:
1801174c:	14d1      	push      	r4, r15
1801174e:	6d03      	mov      	r4, r0
18011750:	e000029a 	bsr      	0x18011c84	// 18011c84 <hgusb20_dev_exit>
18011754:	d8040078 	ld.b      	r0, (r4, 0x78)
18011758:	e3ffffe6 	bsr      	0x18011724	// 18011724 <csi_vic_disable_irq>
1801175c:	d8040079 	ld.b      	r0, (r4, 0x79)
18011760:	e3ffffe2 	bsr      	0x18011724	// 18011724 <csi_vic_disable_irq>
18011764:	1491      	pop      	r4, r15
	...

18011768 <hgusb20_dev_close>:
18011768:	14d2      	push      	r4-r5, r15
1801176a:	9065      	ld.w      	r3, (r0, 0x14)
1801176c:	6d03      	mov      	r4, r0
1801176e:	e9a3002a 	bhsz      	r3, 0x180117c2	// 180117c2 <hgusb20_dev_close+0x5a>
18011772:	d8000078 	ld.b      	r0, (r0, 0x78)
18011776:	e3ffffd7 	bsr      	0x18011724	// 18011724 <csi_vic_disable_irq>
1801177a:	d8040079 	ld.b      	r0, (r4, 0x79)
1801177e:	e3ffffd3 	bsr      	0x18011724	// 18011724 <csi_vic_disable_irq>
18011782:	3100      	movi      	r1, 0
18011784:	9400      	ld.w      	r0, (r4, 0x0)
18011786:	e3ff94d1 	bsr      	0x18004128	// 18004128 <pin_func>
1801178a:	ea224002 	movih      	r2, 16386
1801178e:	e4040143 	addi      	r0, r4, 324
18011792:	9273      	ld.w      	r3, (r2, 0x4c)
18011794:	3b92      	bclri      	r3, 18
18011796:	b273      	st.w      	r3, (r2, 0x4c)
18011798:	e00017cc 	bsr      	0x18014730	// 18014730 <os_event_del>
1801179c:	e404014b 	addi      	r0, r4, 332
180117a0:	e00017c8 	bsr      	0x18014730	// 18014730 <os_event_del>
180117a4:	9407      	ld.w      	r0, (r4, 0x1c)
180117a6:	e3ffd8e5 	bsr      	0x1800c970	// 1800c970 <_os_free>
180117aa:	9465      	ld.w      	r3, (r4, 0x14)
180117ac:	3500      	movi      	r5, 0
180117ae:	c40357c3 	zext      	r3, r3, 30, 0
180117b2:	b4a7      	st.w      	r5, (r4, 0x1c)
180117b4:	b4a6      	st.w      	r5, (r4, 0x18)
180117b6:	b4a9      	st.w      	r5, (r4, 0x24)
180117b8:	b4a8      	st.w      	r5, (r4, 0x20)
180117ba:	b465      	st.w      	r3, (r4, 0x14)
180117bc:	6c13      	mov      	r0, r4
180117be:	e3ffffc7 	bsr      	0x1801174c	// 1801174c <hgusb20_dev_free>
180117c2:	3000      	movi      	r0, 0
180117c4:	1492      	pop      	r4-r5, r15
	...

180117c8 <hgusb20_ep_rx_kick>:
180117c8:	14d4      	push      	r4-r7, r15
180117ca:	6d47      	mov      	r5, r1
180117cc:	6d8b      	mov      	r6, r2
180117ce:	6dcf      	mov      	r7, r3
180117d0:	9083      	ld.w      	r4, (r0, 0xc)
180117d2:	e921001b 	bnez      	r1, 0x18011808	// 18011808 <hgusb20_ep_rx_kick+0x40>
180117d6:	e9020014 	bez      	r2, 0x180117fe	// 180117fe <hgusb20_ep_rx_kick+0x36>
180117da:	dc4420e0 	st.w      	r2, (r4, 0x380)
180117de:	c0006023 	mfcr      	r3, cr<0, 0>
180117e2:	c0807020 	psrclr      	ie
180117e6:	3200      	movi      	r2, 0
180117e8:	e4632040 	andi      	r3, r3, 64
180117ec:	a44e      	st.b      	r2, (r4, 0xe)
180117ee:	3240      	movi      	r2, 64
180117f0:	a452      	st.b      	r2, (r4, 0x12)
180117f2:	e9030004 	bez      	r3, 0x180117fa	// 180117fa <hgusb20_ep_rx_kick+0x32>
180117f6:	c0807420 	psrset      	ie
180117fa:	3001      	movi      	r0, 1
180117fc:	1494      	pop      	r4-r7, r15
180117fe:	e5800083 	addi      	r12, r0, 132
18011802:	dd8420e0 	st.w      	r12, (r4, 0x380)
18011806:	07ec      	br      	0x180117de	// 180117de <hgusb20_ep_rx_kick+0x16>
18011808:	e3ffff9c 	bsr      	0x18011740	// 18011740 <hgusb20_is_host_mode>
1801180c:	e9000010 	bez      	r0, 0x1801182c	// 1801182c <hgusb20_ep_rx_kick+0x64>
18011810:	c0006023 	mfcr      	r3, cr<0, 0>
18011814:	c0807020 	psrclr      	ie
18011818:	3200      	movi      	r2, 0
1801181a:	e4632040 	andi      	r3, r3, 64
1801181e:	2a3f      	subi      	r2, 64
18011820:	a4ae      	st.b      	r5, (r4, 0xe)
18011822:	a457      	st.b      	r2, (r4, 0x17)
18011824:	e9030004 	bez      	r3, 0x1801182c	// 1801182c <hgusb20_ep_rx_kick+0x64>
18011828:	c0807420 	psrset      	ie
1801182c:	3d42      	cmpnei      	r5, 2
1801182e:	0c2b      	bf      	0x18011884	// 18011884 <hgusb20_ep_rx_kick+0xbc>
18011830:	3d02      	cmphsi      	r5, 3
18011832:	0815      	bt      	0x1801185c	// 1801185c <hgusb20_ep_rx_kick+0x94>
18011834:	3d41      	cmpnei      	r5, 1
18011836:	0be2      	bt      	0x180117fa	// 180117fa <hgusb20_ep_rx_kick+0x32>
18011838:	d86420eb 	ld.w      	r3, (r4, 0x3ac)
1801183c:	3b82      	bclri      	r3, 2
1801183e:	3b92      	bclri      	r3, 18
18011840:	3bb2      	bseti      	r3, 18
18011842:	dc6420eb 	st.w      	r3, (r4, 0x3ac)
18011846:	dcc420e3 	st.w      	r6, (r4, 0x38c)
1801184a:	dce420e4 	st.w      	r7, (r4, 0x390)
1801184e:	d86420eb 	ld.w      	r3, (r4, 0x3ac)
18011852:	3ba2      	bseti      	r3, 2
18011854:	3bb2      	bseti      	r3, 18
18011856:	dc6420eb 	st.w      	r3, (r4, 0x3ac)
1801185a:	07d0      	br      	0x180117fa	// 180117fa <hgusb20_ep_rx_kick+0x32>
1801185c:	3d43      	cmpnei      	r5, 3
1801185e:	0c23      	bf      	0x180118a4	// 180118a4 <hgusb20_ep_rx_kick+0xdc>
18011860:	3d44      	cmpnei      	r5, 4
18011862:	0bcc      	bt      	0x180117fa	// 180117fa <hgusb20_ep_rx_kick+0x32>
18011864:	d84420f7 	ld.w      	r2, (r4, 0x3dc)
18011868:	3a83      	bclri      	r2, 3
1801186a:	3a93      	bclri      	r2, 19
1801186c:	3ab3      	bseti      	r2, 19
1801186e:	dc4420f7 	st.w      	r2, (r4, 0x3dc)
18011872:	dcc420f4 	st.w      	r6, (r4, 0x3d0)
18011876:	dce420f5 	st.w      	r7, (r4, 0x3d4)
1801187a:	d86420f7 	ld.w      	r3, (r4, 0x3dc)
1801187e:	3ba3      	bseti      	r3, 3
18011880:	3bb3      	bseti      	r3, 19
18011882:	0420      	br      	0x180118c2	// 180118c2 <hgusb20_ep_rx_kick+0xfa>
18011884:	d84420eb 	ld.w      	r2, (r4, 0x3ac)
18011888:	3a83      	bclri      	r2, 3
1801188a:	3a93      	bclri      	r2, 19
1801188c:	3ab3      	bseti      	r2, 19
1801188e:	dc4420eb 	st.w      	r2, (r4, 0x3ac)
18011892:	dcc420e8 	st.w      	r6, (r4, 0x3a0)
18011896:	dce420e9 	st.w      	r7, (r4, 0x3a4)
1801189a:	d86420eb 	ld.w      	r3, (r4, 0x3ac)
1801189e:	3ba3      	bseti      	r3, 3
180118a0:	3bb3      	bseti      	r3, 19
180118a2:	07da      	br      	0x18011856	// 18011856 <hgusb20_ep_rx_kick+0x8e>
180118a4:	d84420f7 	ld.w      	r2, (r4, 0x3dc)
180118a8:	3a82      	bclri      	r2, 2
180118aa:	3a92      	bclri      	r2, 18
180118ac:	3ab2      	bseti      	r2, 18
180118ae:	dc4420f7 	st.w      	r2, (r4, 0x3dc)
180118b2:	dcc420ef 	st.w      	r6, (r4, 0x3bc)
180118b6:	dce420f0 	st.w      	r7, (r4, 0x3c0)
180118ba:	d86420f7 	ld.w      	r3, (r4, 0x3dc)
180118be:	3ba2      	bseti      	r3, 2
180118c0:	3bb2      	bseti      	r3, 18
180118c2:	dc6420f7 	st.w      	r3, (r4, 0x3dc)
180118c6:	079a      	br      	0x180117fa	// 180117fa <hgusb20_ep_rx_kick+0x32>

180118c8 <hgusb20_ep_rx_abort>:
180118c8:	14d2      	push      	r4-r5, r15
180118ca:	5963      	subi      	r3, r1, 1
180118cc:	74cc      	zextb      	r3, r3
180118ce:	3b03      	cmphsi      	r3, 4
180118d0:	0836      	bt      	0x1801193c	// 1801193c <hgusb20_ep_rx_abort+0x74>
180118d2:	9083      	ld.w      	r4, (r0, 0xc)
180118d4:	c0006025 	mfcr      	r5, cr<0, 0>
180118d8:	c0807020 	psrclr      	ie
180118dc:	3902      	cmphsi      	r1, 3
180118de:	e4a52040 	andi      	r5, r5, 64
180118e2:	5962      	addi      	r3, r1, 1
180118e4:	3201      	movi      	r2, 1
180118e6:	e5810010 	addi      	r12, r1, 17
180118ea:	0c1c      	bf      	0x18011922	// 18011922 <hgusb20_ep_rx_abort+0x5a>
180118ec:	d9a420f7 	ld.w      	r13, (r4, 0x3dc)
180118f0:	c4624023 	lsl      	r3, r2, r3
180118f4:	c46d2043 	andn      	r3, r13, r3
180118f8:	70b0      	lsl      	r2, r12
180118fa:	6cc8      	or      	r3, r2
180118fc:	dc6420f7 	st.w      	r3, (r4, 0x3dc)
18011900:	a42e      	st.b      	r1, (r4, 0xe)
18011902:	e3ffff1f 	bsr      	0x18011740	// 18011740 <hgusb20_is_host_mode>
18011906:	e9000019 	bez      	r0, 0x18011938	// 18011938 <hgusb20_ep_rx_abort+0x70>
1801190a:	8476      	ld.b      	r3, (r4, 0x16)
1801190c:	e46320cf 	andi      	r3, r3, 207
18011910:	ec630010 	ori      	r3, r3, 16
18011914:	a476      	st.b      	r3, (r4, 0x16)
18011916:	e9050004 	bez      	r5, 0x1801191e	// 1801191e <hgusb20_ep_rx_abort+0x56>
1801191a:	c0807420 	psrset      	ie
1801191e:	3001      	movi      	r0, 1
18011920:	040f      	br      	0x1801193e	// 1801193e <hgusb20_ep_rx_abort+0x76>
18011922:	d9a420eb 	ld.w      	r13, (r4, 0x3ac)
18011926:	c4624023 	lsl      	r3, r2, r3
1801192a:	c46d2043 	andn      	r3, r13, r3
1801192e:	70b0      	lsl      	r2, r12
18011930:	6cc8      	or      	r3, r2
18011932:	dc6420eb 	st.w      	r3, (r4, 0x3ac)
18011936:	07e5      	br      	0x18011900	// 18011900 <hgusb20_ep_rx_abort+0x38>
18011938:	3309      	movi      	r3, 9
1801193a:	07ed      	br      	0x18011914	// 18011914 <hgusb20_ep_rx_abort+0x4c>
1801193c:	3000      	movi      	r0, 0
1801193e:	1492      	pop      	r4-r5, r15

18011940 <hgusb20_dev_read>:
18011940:	14d7      	push      	r4-r10, r15
18011942:	1421      	subi      	r14, r14, 4
18011944:	6e8f      	mov      	r10, r3
18011946:	9065      	ld.w      	r3, (r0, 0x14)
18011948:	6d43      	mov      	r5, r0
1801194a:	6d87      	mov      	r6, r1
1801194c:	6e4b      	mov      	r9, r2
1801194e:	d88e0024 	ld.b      	r4, (r14, 0x24)
18011952:	e9830007 	blz      	r3, 0x18011960	// 18011960 <hgusb20_dev_read+0x20>
18011956:	3400      	movi      	r4, 0
18011958:	2c00      	subi      	r4, 1
1801195a:	6c13      	mov      	r0, r4
1801195c:	1401      	addi      	r14, r14, 4
1801195e:	1497      	pop      	r4-r10, r15
18011960:	3904      	cmphsi      	r1, 5
18011962:	0bfa      	bt      	0x18011956	// 18011956 <hgusb20_dev_read+0x16>
18011964:	e9040020 	bez      	r4, 0x180119a4	// 180119a4 <hgusb20_dev_read+0x64>
18011968:	e461000f 	addi      	r3, r1, 16
1801196c:	3701      	movi      	r7, 1
1801196e:	ea080000 	movi      	r8, 0
18011972:	71cc      	lsl      	r7, r3
18011974:	e5081000 	subi      	r8, r8, 1
18011978:	3200      	movi      	r2, 0
1801197a:	dd0e2000 	st.w      	r8, (r14, 0x0)
1801197e:	3302      	movi      	r3, 2
18011980:	6c5f      	mov      	r1, r7
18011982:	e4000143 	addi      	r0, r0, 324
18011986:	e000172f 	bsr      	0x180147e4	// 180147e4 <os_event_wait>
1801198a:	6c83      	mov      	r2, r0
1801198c:	e9000007 	bez      	r0, 0x1801199a	// 1801199a <hgusb20_dev_read+0x5a>
18011990:	101a      	lrw      	r0, 0x18018197	// 180119f8 <hgusb20_dev_read+0xb8>
18011992:	e3ffd899 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18011996:	6d23      	mov      	r4, r8
18011998:	07e1      	br      	0x1801195a	// 1801195a <hgusb20_dev_read+0x1a>
1801199a:	6c5f      	mov      	r1, r7
1801199c:	e405014b 	addi      	r0, r5, 332
180119a0:	e0001702 	bsr      	0x180147a4	// 180147a4 <os_event_clear>
180119a4:	6ceb      	mov      	r3, r10
180119a6:	6ca7      	mov      	r2, r9
180119a8:	6c5b      	mov      	r1, r6
180119aa:	6c17      	mov      	r0, r5
180119ac:	e3ffff0e 	bsr      	0x180117c8	// 180117c8 <hgusb20_ep_rx_kick>
180119b0:	e900ffd3 	bez      	r0, 0x18011956	// 18011956 <hgusb20_dev_read+0x16>
180119b4:	e904ffd3 	bez      	r4, 0x1801195a	// 1801195a <hgusb20_dev_read+0x1a>
180119b8:	e466000f 	addi      	r3, r6, 16
180119bc:	3701      	movi      	r7, 1
180119be:	71cc      	lsl      	r7, r3
180119c0:	33fa      	movi      	r3, 250
180119c2:	4363      	lsli      	r3, r3, 3
180119c4:	b860      	st.w      	r3, (r14, 0x0)
180119c6:	3200      	movi      	r2, 0
180119c8:	3302      	movi      	r3, 2
180119ca:	6c5f      	mov      	r1, r7
180119cc:	e405014b 	addi      	r0, r5, 332
180119d0:	e000170a 	bsr      	0x180147e4	// 180147e4 <os_event_wait>
180119d4:	6d03      	mov      	r4, r0
180119d6:	e9000009 	bez      	r0, 0x180119e8	// 180119e8 <hgusb20_dev_read+0xa8>
180119da:	1009      	lrw      	r0, 0x180181b4	// 180119fc <hgusb20_dev_read+0xbc>
180119dc:	e3ffd874 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
180119e0:	6c5b      	mov      	r1, r6
180119e2:	6c17      	mov      	r0, r5
180119e4:	e3ffff72 	bsr      	0x180118c8	// 180118c8 <hgusb20_ep_rx_abort>
180119e8:	3200      	movi      	r2, 0
180119ea:	6c5f      	mov      	r1, r7
180119ec:	e4050143 	addi      	r0, r5, 324
180119f0:	e00016ba 	bsr      	0x18014764	// 18014764 <os_event_set>
180119f4:	07b3      	br      	0x1801195a	// 1801195a <hgusb20_dev_read+0x1a>
180119f6:	0000      	.short	0x0000
180119f8:	18018197 	.long	0x18018197
180119fc:	180181b4 	.long	0x180181b4

18011a00 <hgusb20_ep_tx_abort>:
18011a00:	14c1      	push      	r4
18011a02:	5963      	subi      	r3, r1, 1
18011a04:	748c      	zextb      	r2, r3
18011a06:	3a03      	cmphsi      	r2, 4
18011a08:	0835      	bt      	0x18011a72	// 18011a72 <hgusb20_ep_tx_abort+0x72>
18011a0a:	9003      	ld.w      	r0, (r0, 0xc)
18011a0c:	c000602c 	mfcr      	r12, cr<0, 0>
18011a10:	c0807020 	psrclr      	ie
18011a14:	3902      	cmphsi      	r1, 3
18011a16:	e58c2040 	andi      	r12, r12, 64
18011a1a:	3201      	movi      	r2, 1
18011a1c:	e5a1000e 	addi      	r13, r1, 15
18011a20:	0c1e      	bf      	0x18011a5c	// 18011a5c <hgusb20_ep_tx_abort+0x5c>
18011a22:	d88020f7 	ld.w      	r4, (r0, 0x3dc)
18011a26:	c4624023 	lsl      	r3, r2, r3
18011a2a:	c4642043 	andn      	r3, r4, r3
18011a2e:	70b4      	lsl      	r2, r13
18011a30:	6cc8      	or      	r3, r2
18011a32:	dc6020f7 	st.w      	r3, (r0, 0x3dc)
18011a36:	c0006023 	mfcr      	r3, cr<0, 0>
18011a3a:	c0807020 	psrclr      	ie
18011a3e:	e4632040 	andi      	r3, r3, 64
18011a42:	3208      	movi      	r2, 8
18011a44:	a02e      	st.b      	r1, (r0, 0xe)
18011a46:	a052      	st.b      	r2, (r0, 0x12)
18011a48:	e9030004 	bez      	r3, 0x18011a50	// 18011a50 <hgusb20_ep_tx_abort+0x50>
18011a4c:	c0807420 	psrset      	ie
18011a50:	e90c0004 	bez      	r12, 0x18011a58	// 18011a58 <hgusb20_ep_tx_abort+0x58>
18011a54:	c0807420 	psrset      	ie
18011a58:	3001      	movi      	r0, 1
18011a5a:	040d      	br      	0x18011a74	// 18011a74 <hgusb20_ep_tx_abort+0x74>
18011a5c:	d88020eb 	ld.w      	r4, (r0, 0x3ac)
18011a60:	c4624023 	lsl      	r3, r2, r3
18011a64:	c4642043 	andn      	r3, r4, r3
18011a68:	70b4      	lsl      	r2, r13
18011a6a:	6cc8      	or      	r3, r2
18011a6c:	dc6020eb 	st.w      	r3, (r0, 0x3ac)
18011a70:	07e3      	br      	0x18011a36	// 18011a36 <hgusb20_ep_tx_abort+0x36>
18011a72:	3000      	movi      	r0, 0
18011a74:	1481      	pop      	r4
	...

18011a78 <hgusb20_ep_tx_kick>:
18011a78:	d9802003 	ld.w      	r12, (r0, 0xc)
18011a7c:	3b9f      	bclri      	r3, 31
18011a7e:	e921001e 	bnez      	r1, 0x18011aba	// 18011aba <hgusb20_ep_tx_kick+0x42>
18011a82:	2083      	addi      	r0, 132
18011a84:	dc0c20e0 	st.w      	r0, (r12, 0x380)
18011a88:	c0006020 	mfcr      	r0, cr<0, 0>
18011a8c:	c0807020 	psrclr      	ie
18011a90:	dc2c000e 	st.b      	r1, (r12, 0xe)
18011a94:	3140      	movi      	r1, 64
18011a96:	dc2c0012 	st.b      	r1, (r12, 0x12)
18011a9a:	e4202040 	andi      	r1, r0, 64
18011a9e:	e9010004 	bez      	r1, 0x18011aa6	// 18011aa6 <hgusb20_ep_tx_kick+0x2e>
18011aa2:	c0807420 	psrset      	ie
18011aa6:	60c8      	addu      	r3, r2
18011aa8:	64ca      	cmpne      	r2, r3
18011aaa:	0803      	bt      	0x18011ab0	// 18011ab0 <hgusb20_ep_tx_kick+0x38>
18011aac:	3001      	movi      	r0, 1
18011aae:	783c      	jmp      	r15
18011ab0:	8220      	ld.b      	r1, (r2, 0x0)
18011ab2:	dc2c0020 	st.b      	r1, (r12, 0x20)
18011ab6:	2200      	addi      	r2, 1
18011ab8:	07f8      	br      	0x18011aa8	// 18011aa8 <hgusb20_ep_tx_kick+0x30>
18011aba:	774d      	zexth      	r13, r3
18011abc:	dda0103b 	st.h      	r13, (r0, 0x76)
18011ac0:	c000602d 	mfcr      	r13, cr<0, 0>
18011ac4:	c0807020 	psrclr      	ie
18011ac8:	3000      	movi      	r0, 0
18011aca:	dc0c000e 	st.b      	r0, (r12, 0xe)
18011ace:	3081      	movi      	r0, 129
18011ad0:	4001      	lsli      	r0, r0, 1
18011ad2:	dc0c1009 	st.h      	r0, (r12, 0x12)
18011ad6:	e40d2040 	andi      	r0, r13, 64
18011ada:	e9000004 	bez      	r0, 0x18011ae2	// 18011ae2 <hgusb20_ep_tx_kick+0x6a>
18011ade:	c0807420 	psrset      	ie
18011ae2:	3942      	cmpnei      	r1, 2
18011ae4:	0c2b      	bf      	0x18011b3a	// 18011b3a <hgusb20_ep_tx_kick+0xc2>
18011ae6:	3902      	cmphsi      	r1, 3
18011ae8:	0815      	bt      	0x18011b12	// 18011b12 <hgusb20_ep_tx_kick+0x9a>
18011aea:	3941      	cmpnei      	r1, 1
18011aec:	0be0      	bt      	0x18011aac	// 18011aac <hgusb20_ep_tx_kick+0x34>
18011aee:	d82c20eb 	ld.w      	r1, (r12, 0x3ac)
18011af2:	3980      	bclri      	r1, 0
18011af4:	3990      	bclri      	r1, 16
18011af6:	39b0      	bseti      	r1, 16
18011af8:	dc2c20eb 	st.w      	r1, (r12, 0x3ac)
18011afc:	dc4c20e1 	st.w      	r2, (r12, 0x384)
18011b00:	dc6c20e2 	st.w      	r3, (r12, 0x388)
18011b04:	d86c20eb 	ld.w      	r3, (r12, 0x3ac)
18011b08:	3ba0      	bseti      	r3, 0
18011b0a:	3bb0      	bseti      	r3, 16
18011b0c:	dc6c20eb 	st.w      	r3, (r12, 0x3ac)
18011b10:	07ce      	br      	0x18011aac	// 18011aac <hgusb20_ep_tx_kick+0x34>
18011b12:	3943      	cmpnei      	r1, 3
18011b14:	0c23      	bf      	0x18011b5a	// 18011b5a <hgusb20_ep_tx_kick+0xe2>
18011b16:	3944      	cmpnei      	r1, 4
18011b18:	0bca      	bt      	0x18011aac	// 18011aac <hgusb20_ep_tx_kick+0x34>
18011b1a:	d82c20f7 	ld.w      	r1, (r12, 0x3dc)
18011b1e:	3981      	bclri      	r1, 1
18011b20:	3991      	bclri      	r1, 17
18011b22:	39b1      	bseti      	r1, 17
18011b24:	dc2c20f7 	st.w      	r1, (r12, 0x3dc)
18011b28:	dc4c20f2 	st.w      	r2, (r12, 0x3c8)
18011b2c:	dc6c20f3 	st.w      	r3, (r12, 0x3cc)
18011b30:	d86c20f7 	ld.w      	r3, (r12, 0x3dc)
18011b34:	3ba1      	bseti      	r3, 1
18011b36:	3bb1      	bseti      	r3, 17
18011b38:	0420      	br      	0x18011b78	// 18011b78 <hgusb20_ep_tx_kick+0x100>
18011b3a:	d82c20eb 	ld.w      	r1, (r12, 0x3ac)
18011b3e:	3981      	bclri      	r1, 1
18011b40:	3991      	bclri      	r1, 17
18011b42:	39b1      	bseti      	r1, 17
18011b44:	dc2c20eb 	st.w      	r1, (r12, 0x3ac)
18011b48:	dc4c20e6 	st.w      	r2, (r12, 0x398)
18011b4c:	dc6c20e7 	st.w      	r3, (r12, 0x39c)
18011b50:	d86c20eb 	ld.w      	r3, (r12, 0x3ac)
18011b54:	3ba1      	bseti      	r3, 1
18011b56:	3bb1      	bseti      	r3, 17
18011b58:	07da      	br      	0x18011b0c	// 18011b0c <hgusb20_ep_tx_kick+0x94>
18011b5a:	d82c20f7 	ld.w      	r1, (r12, 0x3dc)
18011b5e:	3980      	bclri      	r1, 0
18011b60:	3990      	bclri      	r1, 16
18011b62:	39b0      	bseti      	r1, 16
18011b64:	dc2c20f7 	st.w      	r1, (r12, 0x3dc)
18011b68:	dc4c20ed 	st.w      	r2, (r12, 0x3b4)
18011b6c:	dc6c20ee 	st.w      	r3, (r12, 0x3b8)
18011b70:	d86c20f7 	ld.w      	r3, (r12, 0x3dc)
18011b74:	3ba0      	bseti      	r3, 0
18011b76:	3bb0      	bseti      	r3, 16
18011b78:	dc6c20f7 	st.w      	r3, (r12, 0x3dc)
18011b7c:	0798      	br      	0x18011aac	// 18011aac <hgusb20_ep_tx_kick+0x34>
	...

18011b80 <hgusb20_dev_write>:
18011b80:	14d8      	push      	r4-r11, r15
18011b82:	1422      	subi      	r14, r14, 8
18011b84:	6ecf      	mov      	r11, r3
18011b86:	9065      	ld.w      	r3, (r0, 0x14)
18011b88:	6d43      	mov      	r5, r0
18011b8a:	6d87      	mov      	r6, r1
18011b8c:	6e8b      	mov      	r10, r2
18011b8e:	d88e002c 	ld.b      	r4, (r14, 0x2c)
18011b92:	e9a3005f 	bhsz      	r3, 0x18011c50	// 18011c50 <hgusb20_dev_write+0xd0>
18011b96:	3904      	cmphsi      	r1, 5
18011b98:	085c      	bt      	0x18011c50	// 18011c50 <hgusb20_dev_write+0xd0>
18011b9a:	e9040035 	bez      	r4, 0x18011c04	// 18011c04 <hgusb20_dev_write+0x84>
18011b9e:	ea0c0001 	movi      	r12, 1
18011ba2:	7304      	lsl      	r12, r1
18011ba4:	3700      	movi      	r7, 0
18011ba6:	ed2c0001 	ori      	r9, r12, 1
18011baa:	e5000143 	addi      	r8, r0, 324
18011bae:	2f00      	subi      	r7, 1
18011bb0:	3200      	movi      	r2, 0
18011bb2:	b8e0      	st.w      	r7, (r14, 0x0)
18011bb4:	3302      	movi      	r3, 2
18011bb6:	6c67      	mov      	r1, r9
18011bb8:	6c23      	mov      	r0, r8
18011bba:	dd8e2001 	st.w      	r12, (r14, 0x4)
18011bbe:	e0001613 	bsr      	0x180147e4	// 180147e4 <os_event_wait>
18011bc2:	6c83      	mov      	r2, r0
18011bc4:	d98e2001 	ld.w      	r12, (r14, 0x4)
18011bc8:	e9000009 	bez      	r0, 0x18011bda	// 18011bda <hgusb20_dev_write+0x5a>
18011bcc:	1103      	lrw      	r0, 0x18018197	// 18011c58 <hgusb20_dev_write+0xd8>
18011bce:	e3ffd77b 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18011bd2:	6d1f      	mov      	r4, r7
18011bd4:	6c13      	mov      	r0, r4
18011bd6:	1402      	addi      	r14, r14, 8
18011bd8:	1498      	pop      	r4-r11, r15
18011bda:	9565      	ld.w      	r3, (r5, 0x14)
18011bdc:	e4632001 	andi      	r3, r3, 1
18011be0:	e923000d 	bnez      	r3, 0x18011bfa	// 18011bfa <hgusb20_dev_write+0x7a>
18011be4:	101e      	lrw      	r0, 0x180181cd	// 18011c5c <hgusb20_dev_write+0xdc>
18011be6:	b861      	st.w      	r3, (r14, 0x4)
18011be8:	e3ffd76e 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18011bec:	9861      	ld.w      	r3, (r14, 0x4)
18011bee:	6c8f      	mov      	r2, r3
18011bf0:	6c67      	mov      	r1, r9
18011bf2:	6c23      	mov      	r0, r8
18011bf4:	e00015b8 	bsr      	0x18014764	// 18014764 <os_event_set>
18011bf8:	07ed      	br      	0x18011bd2	// 18011bd2 <hgusb20_dev_write+0x52>
18011bfa:	6c73      	mov      	r1, r12
18011bfc:	e405014b 	addi      	r0, r5, 332
18011c00:	e00015d2 	bsr      	0x180147a4	// 180147a4 <os_event_clear>
18011c04:	6cef      	mov      	r3, r11
18011c06:	6cab      	mov      	r2, r10
18011c08:	6c5b      	mov      	r1, r6
18011c0a:	6c17      	mov      	r0, r5
18011c0c:	e3ffff36 	bsr      	0x18011a78	// 18011a78 <hgusb20_ep_tx_kick>
18011c10:	e904ffe2 	bez      	r4, 0x18011bd4	// 18011bd4 <hgusb20_dev_write+0x54>
18011c14:	3701      	movi      	r7, 1
18011c16:	33fa      	movi      	r3, 250
18011c18:	4363      	lsli      	r3, r3, 3
18011c1a:	71d8      	lsl      	r7, r6
18011c1c:	b860      	st.w      	r3, (r14, 0x0)
18011c1e:	3200      	movi      	r2, 0
18011c20:	3302      	movi      	r3, 2
18011c22:	6c5f      	mov      	r1, r7
18011c24:	e405014b 	addi      	r0, r5, 332
18011c28:	e00015de 	bsr      	0x180147e4	// 180147e4 <os_event_wait>
18011c2c:	6d03      	mov      	r4, r0
18011c2e:	e9000009 	bez      	r0, 0x18011c40	// 18011c40 <hgusb20_dev_write+0xc0>
18011c32:	100c      	lrw      	r0, 0x180181e5	// 18011c60 <hgusb20_dev_write+0xe0>
18011c34:	e3ffd748 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18011c38:	6c5b      	mov      	r1, r6
18011c3a:	6c17      	mov      	r0, r5
18011c3c:	e3fffee2 	bsr      	0x18011a00	// 18011a00 <hgusb20_ep_tx_abort>
18011c40:	3200      	movi      	r2, 0
18011c42:	ec270001 	ori      	r1, r7, 1
18011c46:	e4050143 	addi      	r0, r5, 324
18011c4a:	e000158d 	bsr      	0x18014764	// 18014764 <os_event_set>
18011c4e:	07c3      	br      	0x18011bd4	// 18011bd4 <hgusb20_dev_write+0x54>
18011c50:	3400      	movi      	r4, 0
18011c52:	2c00      	subi      	r4, 1
18011c54:	07c0      	br      	0x18011bd4	// 18011bd4 <hgusb20_dev_write+0x54>
18011c56:	0000      	.short	0x0000
18011c58:	18018197 	.long	0x18018197
18011c5c:	180181cd 	.long	0x180181cd
18011c60:	180181e5 	.long	0x180181e5

18011c64 <hgusb20_ep_get_sie_rx_len>:
18011c64:	9043      	ld.w      	r2, (r0, 0xc)
18011c66:	a22e      	st.b      	r1, (r2, 0xe)
18011c68:	8279      	ld.b      	r3, (r2, 0x19)
18011c6a:	4368      	lsli      	r3, r3, 8
18011c6c:	8218      	ld.b      	r0, (r2, 0x18)
18011c6e:	6c0c      	or      	r0, r3
18011c70:	783c      	jmp      	r15
	...

18011c74 <hgusb20_ep_get_tx_len>:
18011c74:	3904      	cmphsi      	r1, 5
18011c76:	0805      	bt      	0x18011c80	// 18011c80 <hgusb20_ep_get_tx_len+0xc>
18011c78:	d800103b 	ld.h      	r0, (r0, 0x76)
18011c7c:	7401      	zexth      	r0, r0
18011c7e:	783c      	jmp      	r15
18011c80:	3000      	movi      	r0, 0
18011c82:	07fe      	br      	0x18011c7e	// 18011c7e <hgusb20_ep_get_tx_len+0xa>

18011c84 <hgusb20_dev_exit>:
18011c84:	14d0      	push      	r15
18011c86:	e3fffc87 	bsr      	0x18011594	// 18011594 <hgusb20_switch_stable_otg>
18011c8a:	1490      	pop      	r15

18011c8c <csi_vic_disable_irq>:
18011c8c:	c4a054c3 	zext      	r3, r0, 6, 5
18011c90:	3201      	movi      	r2, 1
18011c92:	e400201f 	andi      	r0, r0, 31
18011c96:	c4024020 	lsl      	r0, r2, r0
18011c9a:	231f      	addi      	r3, 32
18011c9c:	1042      	lrw      	r2, 0xe000e100	// 18011ca4 <csi_vic_disable_irq+0x18>
18011c9e:	d4620880 	str.w      	r0, (r2, r3 << 2)
18011ca2:	783c      	jmp      	r15
18011ca4:	e000e100 	.long	0xe000e100

18011ca8 <hgusb20_host_ctrl_irq_hdl>:
18011ca8:	14d4      	push      	r4-r7, r15
18011caa:	90c3      	ld.w      	r6, (r0, 0xc)
18011cac:	6d03      	mov      	r4, r0
18011cae:	86ee      	ld.b      	r7, (r6, 0xe)
18011cb0:	86aa      	ld.b      	r5, (r6, 0xa)
18011cb2:	866b      	ld.b      	r3, (r6, 0xb)
18011cb4:	694c      	and      	r5, r3
18011cb6:	8664      	ld.b      	r3, (r6, 0x4)
18011cb8:	e4652010 	andi      	r3, r5, 16
18011cbc:	75dc      	zextb      	r7, r7
18011cbe:	e903000b 	bez      	r3, 0x18011cd4	// 18011cd4 <hgusb20_host_ctrl_irq_hdl+0x2c>
18011cc2:	d9802006 	ld.w      	r12, (r0, 0x18)
18011cc6:	e90c0007 	bez      	r12, 0x18011cd4	// 18011cd4 <hgusb20_host_ctrl_irq_hdl+0x2c>
18011cca:	3300      	movi      	r3, 0
18011ccc:	9029      	ld.w      	r1, (r0, 0x24)
18011cce:	6c8f      	mov      	r2, r3
18011cd0:	3007      	movi      	r0, 7
18011cd2:	7bf1      	jsr      	r12
18011cd4:	e4652004 	andi      	r3, r5, 4
18011cd8:	e903000e 	bez      	r3, 0x18011cf4	// 18011cf4 <hgusb20_host_ctrl_irq_hdl+0x4c>
18011cdc:	6c13      	mov      	r0, r4
18011cde:	e3fffcdd 	bsr      	0x18011698	// 18011698 <hgusb20_host_reset_phy>
18011ce2:	d9842006 	ld.w      	r12, (r4, 0x18)
18011ce6:	e90c0007 	bez      	r12, 0x18011cf4	// 18011cf4 <hgusb20_host_ctrl_irq_hdl+0x4c>
18011cea:	3300      	movi      	r3, 0
18011cec:	6c8f      	mov      	r2, r3
18011cee:	9429      	ld.w      	r1, (r4, 0x24)
18011cf0:	3009      	movi      	r0, 9
18011cf2:	7bf1      	jsr      	r12
18011cf4:	e4a52020 	andi      	r5, r5, 32
18011cf8:	e905000b 	bez      	r5, 0x18011d0e	// 18011d0e <hgusb20_host_ctrl_irq_hdl+0x66>
18011cfc:	d9842006 	ld.w      	r12, (r4, 0x18)
18011d00:	e90c0007 	bez      	r12, 0x18011d0e	// 18011d0e <hgusb20_host_ctrl_irq_hdl+0x66>
18011d04:	3300      	movi      	r3, 0
18011d06:	6c8f      	mov      	r2, r3
18011d08:	9429      	ld.w      	r1, (r4, 0x24)
18011d0a:	3008      	movi      	r0, 8
18011d0c:	7bf1      	jsr      	r12
18011d0e:	a6ee      	st.b      	r7, (r6, 0xe)
18011d10:	1494      	pop      	r4-r7, r15
	...

18011d14 <hgusb20_host_dma_irq_hdl>:
18011d14:	14d7      	push      	r4-r10, r15
18011d16:	90a3      	ld.w      	r5, (r0, 0xc)
18011d18:	6d03      	mov      	r4, r0
18011d1a:	85ee      	ld.b      	r7, (r5, 0xe)
18011d1c:	d8c520ec 	ld.w      	r6, (r5, 0x3b0)
18011d20:	e4662001 	andi      	r3, r6, 1
18011d24:	75dc      	zextb      	r7, r7
18011d26:	e9030018 	bez      	r3, 0x18011d56	// 18011d56 <hgusb20_host_dma_irq_hdl+0x42>
18011d2a:	d9202006 	ld.w      	r9, (r0, 0x18)
18011d2e:	ea080001 	movi      	r8, 1
18011d32:	dd0520ec 	st.w      	r8, (r5, 0x3b0)
18011d36:	e909000c 	bez      	r9, 0x18011d4e	// 18011d4e <hgusb20_host_dma_irq_hdl+0x3a>
18011d3a:	6c63      	mov      	r1, r8
18011d3c:	d9402009 	ld.w      	r10, (r0, 0x24)
18011d40:	e3ffff9a 	bsr      	0x18011c74	// 18011c74 <hgusb20_ep_get_tx_len>
18011d44:	6cc3      	mov      	r3, r0
18011d46:	6ca3      	mov      	r2, r8
18011d48:	6c6b      	mov      	r1, r10
18011d4a:	3006      	movi      	r0, 6
18011d4c:	7be5      	jsr      	r9
18011d4e:	9404      	ld.w      	r0, (r4, 0x10)
18011d50:	204b      	addi      	r0, 76
18011d52:	e00013ef 	bsr      	0x18014530	// 18014530 <os_sema_up>
18011d56:	e4662004 	andi      	r3, r6, 4
18011d5a:	e903001d 	bez      	r3, 0x18011d94	// 18011d94 <hgusb20_host_dma_irq_hdl+0x80>
18011d5e:	3304      	movi      	r3, 4
18011d60:	dc6520ec 	st.w      	r3, (r5, 0x3b0)
18011d64:	d86520ec 	ld.w      	r3, (r5, 0x3b0)
18011d68:	e4632010 	andi      	r3, r3, 16
18011d6c:	e9030005 	bez      	r3, 0x18011d76	// 18011d76 <hgusb20_host_dma_irq_hdl+0x62>
18011d70:	3310      	movi      	r3, 16
18011d72:	dc6520ec 	st.w      	r3, (r5, 0x3b0)
18011d76:	d9042006 	ld.w      	r8, (r4, 0x18)
18011d7a:	e908000d 	bez      	r8, 0x18011d94	// 18011d94 <hgusb20_host_dma_irq_hdl+0x80>
18011d7e:	3101      	movi      	r1, 1
18011d80:	6c13      	mov      	r0, r4
18011d82:	d9242009 	ld.w      	r9, (r4, 0x24)
18011d86:	e3ffff6f 	bsr      	0x18011c64	// 18011c64 <hgusb20_ep_get_sie_rx_len>
18011d8a:	6cc3      	mov      	r3, r0
18011d8c:	3201      	movi      	r2, 1
18011d8e:	6c67      	mov      	r1, r9
18011d90:	3005      	movi      	r0, 5
18011d92:	7be1      	jsr      	r8
18011d94:	e4662002 	andi      	r3, r6, 2
18011d98:	e9030019 	bez      	r3, 0x18011dca	// 18011dca <hgusb20_host_dma_irq_hdl+0xb6>
18011d9c:	d9242006 	ld.w      	r9, (r4, 0x18)
18011da0:	ea080002 	movi      	r8, 2
18011da4:	dd0520ec 	st.w      	r8, (r5, 0x3b0)
18011da8:	e909000d 	bez      	r9, 0x18011dc2	// 18011dc2 <hgusb20_host_dma_irq_hdl+0xae>
18011dac:	6c63      	mov      	r1, r8
18011dae:	6c13      	mov      	r0, r4
18011db0:	d9442009 	ld.w      	r10, (r4, 0x24)
18011db4:	e3ffff60 	bsr      	0x18011c74	// 18011c74 <hgusb20_ep_get_tx_len>
18011db8:	6cc3      	mov      	r3, r0
18011dba:	6ca3      	mov      	r2, r8
18011dbc:	6c6b      	mov      	r1, r10
18011dbe:	3006      	movi      	r0, 6
18011dc0:	7be5      	jsr      	r9
18011dc2:	9404      	ld.w      	r0, (r4, 0x10)
18011dc4:	204b      	addi      	r0, 76
18011dc6:	e00013b5 	bsr      	0x18014530	// 18014530 <os_sema_up>
18011dca:	e4c62008 	andi      	r6, r6, 8
18011dce:	e906001c 	bez      	r6, 0x18011e06	// 18011e06 <hgusb20_host_dma_irq_hdl+0xf2>
18011dd2:	3308      	movi      	r3, 8
18011dd4:	dc6520ec 	st.w      	r3, (r5, 0x3b0)
18011dd8:	d86520ec 	ld.w      	r3, (r5, 0x3b0)
18011ddc:	e4632020 	andi      	r3, r3, 32
18011de0:	e9030005 	bez      	r3, 0x18011dea	// 18011dea <hgusb20_host_dma_irq_hdl+0xd6>
18011de4:	3320      	movi      	r3, 32
18011de6:	dc6520ec 	st.w      	r3, (r5, 0x3b0)
18011dea:	94c6      	ld.w      	r6, (r4, 0x18)
18011dec:	e906000d 	bez      	r6, 0x18011e06	// 18011e06 <hgusb20_host_dma_irq_hdl+0xf2>
18011df0:	3102      	movi      	r1, 2
18011df2:	6c13      	mov      	r0, r4
18011df4:	d9042009 	ld.w      	r8, (r4, 0x24)
18011df8:	e3ffff36 	bsr      	0x18011c64	// 18011c64 <hgusb20_ep_get_sie_rx_len>
18011dfc:	6cc3      	mov      	r3, r0
18011dfe:	3202      	movi      	r2, 2
18011e00:	6c63      	mov      	r1, r8
18011e02:	3005      	movi      	r0, 5
18011e04:	7bd9      	jsr      	r6
18011e06:	a5ee      	st.b      	r7, (r5, 0xe)
18011e08:	1497      	pop      	r4-r10, r15
	...

18011e0c <hgusb20_host_request_irq>:
18011e0c:	14d3      	push      	r4-r6, r15
18011e0e:	9065      	ld.w      	r3, (r0, 0x14)
18011e10:	6d03      	mov      	r4, r0
18011e12:	6d4b      	mov      	r5, r2
18011e14:	90c3      	ld.w      	r6, (r0, 0xc)
18011e16:	e9a3004e 	bhsz      	r3, 0x18011eb2	// 18011eb2 <hgusb20_host_request_irq+0xa6>
18011e1a:	b449      	st.w      	r2, (r4, 0x24)
18011e1c:	b026      	st.w      	r1, (r0, 0x18)
18011e1e:	d8000078 	ld.b      	r0, (r0, 0x78)
18011e22:	e902003e 	bez      	r2, 0x18011e9e	// 18011e9e <hgusb20_host_request_irq+0x92>
18011e26:	6c93      	mov      	r2, r4
18011e28:	1124      	lrw      	r1, 0x18011ca8	// 18011eb8 <hgusb20_host_request_irq+0xac>
18011e2a:	e3ff8c59 	bsr      	0x180036dc	// 180036dc <request_irq>
18011e2e:	6d43      	mov      	r5, r0
18011e30:	e9000008 	bez      	r0, 0x18011e40	// 18011e40 <hgusb20_host_request_irq+0x34>
18011e34:	319b      	movi      	r1, 155
18011e36:	1142      	lrw      	r2, 0x18016760	// 18011ebc <hgusb20_host_request_irq+0xb0>
18011e38:	4122      	lsli      	r1, r1, 2
18011e3a:	1102      	lrw      	r0, 0x18018210	// 18011ec0 <hgusb20_host_request_irq+0xb4>
18011e3c:	e3ff88ec 	bsr      	0x18003014	// 18003014 <assert_internal>
18011e40:	6c93      	mov      	r2, r4
18011e42:	1121      	lrw      	r1, 0x18011d14	// 18011ec4 <hgusb20_host_request_irq+0xb8>
18011e44:	d8040079 	ld.b      	r0, (r4, 0x79)
18011e48:	e3ff8c4a 	bsr      	0x180036dc	// 180036dc <request_irq>
18011e4c:	e9050008 	bez      	r5, 0x18011e5c	// 18011e5c <hgusb20_host_request_irq+0x50>
18011e50:	105b      	lrw      	r2, 0x18016760	// 18011ebc <hgusb20_host_request_irq+0xb0>
18011e52:	ea01026e 	movi      	r1, 622
18011e56:	101b      	lrw      	r0, 0x18018210	// 18011ec0 <hgusb20_host_request_irq+0xb4>
18011e58:	e3ff88de 	bsr      	0x18003014	// 18003014 <assert_internal>
18011e5c:	d86620eb 	ld.w      	r3, (r6, 0x3ac)
18011e60:	ec6303c0 	ori      	r3, r3, 960
18011e64:	dc6620eb 	st.w      	r3, (r6, 0x3ac)
18011e68:	3334      	movi      	r3, 52
18011e6a:	a66b      	st.b      	r3, (r6, 0xb)
18011e6c:	9443      	ld.w      	r2, (r4, 0xc)
18011e6e:	1037      	lrw      	r1, 0xe000e100	// 18011ec8 <hgusb20_host_request_irq+0xbc>
18011e70:	a26b      	st.b      	r3, (r2, 0xb)
18011e72:	d8640078 	ld.b      	r3, (r4, 0x78)
18011e76:	c4a354c0 	zext      	r0, r3, 6, 5
18011e7a:	3201      	movi      	r2, 1
18011e7c:	e463201f 	andi      	r3, r3, 31
18011e80:	c4624023 	lsl      	r3, r2, r3
18011e84:	d4010883 	str.w      	r3, (r1, r0 << 2)
18011e88:	d8640079 	ld.b      	r3, (r4, 0x79)
18011e8c:	c4a354c0 	zext      	r0, r3, 6, 5
18011e90:	e463201f 	andi      	r3, r3, 31
18011e94:	708c      	lsl      	r2, r3
18011e96:	d4010882 	str.w      	r2, (r1, r0 << 2)
18011e9a:	3000      	movi      	r0, 0
18011e9c:	1493      	pop      	r4-r6, r15
18011e9e:	e3fffef7 	bsr      	0x18011c8c	// 18011c8c <csi_vic_disable_irq>
18011ea2:	d8040079 	ld.b      	r0, (r4, 0x79)
18011ea6:	e3fffef3 	bsr      	0x18011c8c	// 18011c8c <csi_vic_disable_irq>
18011eaa:	a6ab      	st.b      	r5, (r6, 0xb)
18011eac:	dca620eb 	st.w      	r5, (r6, 0x3ac)
18011eb0:	07f5      	br      	0x18011e9a	// 18011e9a <hgusb20_host_request_irq+0x8e>
18011eb2:	3000      	movi      	r0, 0
18011eb4:	2800      	subi      	r0, 1
18011eb6:	07f3      	br      	0x18011e9c	// 18011e9c <hgusb20_host_request_irq+0x90>
18011eb8:	18011ca8 	.long	0x18011ca8
18011ebc:	18016760 	.long	0x18016760
18011ec0:	18018210 	.long	0x18018210
18011ec4:	18011d14 	.long	0x18011d14
18011ec8:	e000e100 	.long	0xe000e100

18011ecc <hgusb20_host_init>:
18011ecc:	14d1      	push      	r4, r15
18011ece:	9083      	ld.w      	r4, (r0, 0xc)
18011ed0:	e3fffb74 	bsr      	0x180115b8	// 180115b8 <hgusb20_reset2host_mode>
18011ed4:	3334      	movi      	r3, 52
18011ed6:	3001      	movi      	r0, 1
18011ed8:	a46b      	st.b      	r3, (r4, 0xb)
18011eda:	1491      	pop      	r4, r15

18011edc <hgusb20_host_hw_init>:
18011edc:	14d2      	push      	r4-r5, r15
18011ede:	6d03      	mov      	r4, r0
18011ee0:	350c      	movi      	r5, 12
18011ee2:	e3fffb61 	bsr      	0x180115a4	// 180115a4 <hgusb20_init_globle>
18011ee6:	6c97      	mov      	r2, r5
18011ee8:	3100      	movi      	r1, 0
18011eea:	e404003b 	addi      	r0, r4, 60
18011eee:	e0001fbd 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
18011ef2:	6c97      	mov      	r2, r5
18011ef4:	3100      	movi      	r1, 0
18011ef6:	e4040047 	addi      	r0, r4, 72
18011efa:	e0001fb7 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
18011efe:	6c13      	mov      	r0, r4
18011f00:	e3ffffe6 	bsr      	0x18011ecc	// 18011ecc <hgusb20_host_init>
18011f04:	1492      	pop      	r4-r5, r15
	...

18011f08 <hgusb20_host_open>:
18011f08:	14d2      	push      	r4-r5, r15
18011f0a:	9065      	ld.w      	r3, (r0, 0x14)
18011f0c:	6d43      	mov      	r5, r0
18011f0e:	e983003b 	blz      	r3, 0x18011f84	// 18011f84 <hgusb20_host_open+0x7c>
18011f12:	9004      	ld.w      	r0, (r0, 0x10)
18011f14:	2043      	addi      	r0, 68
18011f16:	e0001259 	bsr      	0x180143c8	// 180143c8 <os_mutex_init>
18011f1a:	6d03      	mov      	r4, r0
18011f1c:	e900000a 	bez      	r0, 0x18011f30	// 18011f30 <hgusb20_host_open+0x28>
18011f20:	3100      	movi      	r1, 0
18011f22:	9500      	ld.w      	r0, (r5, 0x0)
18011f24:	e3ff9102 	bsr      	0x18004128	// 18004128 <pin_func>
18011f28:	1059      	lrw      	r2, 0x18016760	// 18011f8c <hgusb20_host_open+0x84>
18011f2a:	31ea      	movi      	r1, 234
18011f2c:	4121      	lsli      	r1, r1, 1
18011f2e:	0414      	br      	0x18011f56	// 18011f56 <hgusb20_host_open+0x4e>
18011f30:	9504      	ld.w      	r0, (r5, 0x10)
18011f32:	6c53      	mov      	r1, r4
18011f34:	204b      	addi      	r0, 76
18011f36:	e00012b1 	bsr      	0x18014498	// 18014498 <os_sema_init>
18011f3a:	6d03      	mov      	r4, r0
18011f3c:	e9000012 	bez      	r0, 0x18011f60	// 18011f60 <hgusb20_host_open+0x58>
18011f40:	3100      	movi      	r1, 0
18011f42:	9500      	ld.w      	r0, (r5, 0x0)
18011f44:	e3ff90f2 	bsr      	0x18004128	// 18004128 <pin_func>
18011f48:	9504      	ld.w      	r0, (r5, 0x10)
18011f4a:	2043      	addi      	r0, 68
18011f4c:	e000128e 	bsr      	0x18014468	// 18014468 <os_mutex_del>
18011f50:	104f      	lrw      	r2, 0x18016760	// 18011f8c <hgusb20_host_open+0x84>
18011f52:	ea0101dd 	movi      	r1, 477
18011f56:	100f      	lrw      	r0, 0x180181fe	// 18011f90 <hgusb20_host_open+0x88>
18011f58:	e3ff885e 	bsr      	0x18003014	// 18003014 <assert_internal>
18011f5c:	6c13      	mov      	r0, r4
18011f5e:	1492      	pop      	r4-r5, r15
18011f60:	3101      	movi      	r1, 1
18011f62:	9500      	ld.w      	r0, (r5, 0x0)
18011f64:	e3ff90e2 	bsr      	0x18004128	// 18004128 <pin_func>
18011f68:	6d03      	mov      	r4, r0
18011f6a:	e9000005 	bez      	r0, 0x18011f74	// 18011f74 <hgusb20_host_open+0x6c>
18011f6e:	1048      	lrw      	r2, 0x18016760	// 18011f8c <hgusb20_host_open+0x84>
18011f70:	31f2      	movi      	r1, 242
18011f72:	07dd      	br      	0x18011f2c	// 18011f2c <hgusb20_host_open+0x24>
18011f74:	6c17      	mov      	r0, r5
18011f76:	e3ffffb3 	bsr      	0x18011edc	// 18011edc <hgusb20_host_hw_init>
18011f7a:	9565      	ld.w      	r3, (r5, 0x14)
18011f7c:	3bbf      	bseti      	r3, 31
18011f7e:	b588      	st.w      	r4, (r5, 0x20)
18011f80:	b565      	st.w      	r3, (r5, 0x14)
18011f82:	07ed      	br      	0x18011f5c	// 18011f5c <hgusb20_host_open+0x54>
18011f84:	3400      	movi      	r4, 0
18011f86:	2c0f      	subi      	r4, 16
18011f88:	07ea      	br      	0x18011f5c	// 18011f5c <hgusb20_host_open+0x54>
18011f8a:	0000      	.short	0x0000
18011f8c:	18016760 	.long	0x18016760
18011f90:	180181fe 	.long	0x180181fe

18011f94 <hgusb20_host_attach>:
18011f94:	14d3      	push      	r4-r6, r15
18011f96:	6d07      	mov      	r4, r1
18011f98:	1075      	lrw      	r3, 0x1801822c	// 18011fec <hgusb20_host_attach+0x58>
18011f9a:	6d83      	mov      	r6, r0
18011f9c:	3508      	movi      	r5, 8
18011f9e:	9104      	ld.w      	r0, (r1, 0x10)
18011fa0:	b162      	st.w      	r3, (r1, 0x8)
18011fa2:	6c97      	mov      	r2, r5
18011fa4:	3100      	movi      	r1, 0
18011fa6:	2043      	addi      	r0, 68
18011fa8:	e0001f60 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
18011fac:	9404      	ld.w      	r0, (r4, 0x10)
18011fae:	6c97      	mov      	r2, r5
18011fb0:	3100      	movi      	r1, 0
18011fb2:	204b      	addi      	r0, 76
18011fb4:	e0001f5a 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
18011fb8:	3301      	movi      	r3, 1
18011fba:	dc64103d 	st.h      	r3, (r4, 0x7a)
18011fbe:	9465      	ld.w      	r3, (r4, 0x14)
18011fc0:	3500      	movi      	r5, 0
18011fc2:	c40357c3 	zext      	r3, r3, 30, 0
18011fc6:	b465      	st.w      	r3, (r4, 0x14)
18011fc8:	d8040078 	ld.b      	r0, (r4, 0x78)
18011fcc:	b4a6      	st.w      	r5, (r4, 0x18)
18011fce:	b4a9      	st.w      	r5, (r4, 0x24)
18011fd0:	b4a7      	st.w      	r5, (r4, 0x1c)
18011fd2:	b4a8      	st.w      	r5, (r4, 0x20)
18011fd4:	e3fffe5c 	bsr      	0x18011c8c	// 18011c8c <csi_vic_disable_irq>
18011fd8:	d8040079 	ld.b      	r0, (r4, 0x79)
18011fdc:	e3fffe58 	bsr      	0x18011c8c	// 18011c8c <csi_vic_disable_irq>
18011fe0:	6c53      	mov      	r1, r4
18011fe2:	6c1b      	mov      	r0, r6
18011fe4:	e3ff8860 	bsr      	0x180030a4	// 180030a4 <dev_register>
18011fe8:	6c17      	mov      	r0, r5
18011fea:	1493      	pop      	r4-r6, r15
18011fec:	1801822c 	.long	0x1801822c

18011ff0 <JPG_IRQHandler_action>:
18011ff0:	14d8      	push      	r4-r11, r15
18011ff2:	1421      	subi      	r14, r14, 4
18011ff4:	ea8b0053 	lrw      	r11, 0x20002bd8	// 18012140 <JPG_IRQHandler_action+0x150>
18011ff8:	d90b2000 	ld.w      	r8, (r11, 0x0)
18011ffc:	e908008f 	bez      	r8, 0x1801211a	// 1801211a <JPG_IRQHandler_action+0x12a>
18012000:	d8e82003 	ld.w      	r7, (r8, 0xc)
18012004:	3500      	movi      	r5, 0
18012006:	d9272005 	ld.w      	r9, (r7, 0x14)
1801200a:	9764      	ld.w      	r3, (r7, 0x10)
1801200c:	e529200f 	andi      	r9, r9, 15
18012010:	4b6c      	lsri      	r3, r3, 12
18012012:	6a4c      	and      	r9, r3
18012014:	3403      	movi      	r4, 3
18012016:	6d97      	mov      	r6, r5
18012018:	ea8c004b 	lrw      	r12, 0x20002c00	// 18012144 <JPG_IRQHandler_action+0x154>
1801201c:	ea8a004b 	lrw      	r10, 0x20002018	// 18012148 <JPG_IRQHandler_action+0x158>
18012020:	c4894043 	lsr      	r3, r9, r4
18012024:	e4632001 	andi      	r3, r3, 1
18012028:	e9030025 	bez      	r3, 0x18012072	// 18012072 <JPG_IRQHandler_action+0x82>
1801202c:	74d2      	sextb      	r3, r4
1801202e:	e9240067 	bnez      	r4, 0x180120fc	// 180120fc <JPG_IRQHandler_action+0x10c>
18012032:	97c9      	ld.w      	r6, (r7, 0x24)
18012034:	9765      	ld.w      	r3, (r7, 0x14)
18012036:	d84a0000 	ld.b      	r2, (r10, 0x0)
1801203a:	c60356e3 	zext      	r3, r3, 23, 16
1801203e:	64ca      	cmpne      	r2, r3
18012040:	3301      	movi      	r3, 1
18012042:	dc882007 	st.w      	r4, (r8, 0x1c)
18012046:	c4a30c40 	inct      	r5, r3, 0
1801204a:	dc8a0000 	st.b      	r4, (r10, 0x0)
1801204e:	d08c088d 	ldr.w      	r13, (r12, r4 << 2)
18012052:	e90d000d 	bez      	r13, 0x1801206c	// 1801206c <JPG_IRQHandler_action+0x7c>
18012056:	113e      	lrw      	r1, 0x20002be0	// 1801214c <JPG_IRQHandler_action+0x15c>
18012058:	6cd7      	mov      	r3, r5
1801205a:	6c9b      	mov      	r2, r6
1801205c:	d0810881 	ldr.w      	r1, (r1, r4 << 2)
18012060:	6c13      	mov      	r0, r4
18012062:	dd8e2000 	st.w      	r12, (r14, 0x0)
18012066:	7bf5      	jsr      	r13
18012068:	d98e2000 	ld.w      	r12, (r14, 0x0)
1801206c:	3301      	movi      	r3, 1
1801206e:	70d0      	lsl      	r3, r4
18012070:	b765      	st.w      	r3, (r7, 0x14)
18012072:	3300      	movi      	r3, 0
18012074:	2c00      	subi      	r4, 1
18012076:	2b00      	subi      	r3, 1
18012078:	64d2      	cmpne      	r4, r3
1801207a:	0bd3      	bt      	0x18012020	// 18012020 <JPG_IRQHandler_action+0x30>
1801207c:	d94b2001 	ld.w      	r10, (r11, 0x4)
18012080:	e90a003c 	bez      	r10, 0x180120f8	// 180120f8 <JPG_IRQHandler_action+0x108>
18012084:	d8ea2003 	ld.w      	r7, (r10, 0xc)
18012088:	3403      	movi      	r4, 3
1801208a:	d9072005 	ld.w      	r8, (r7, 0x14)
1801208e:	9764      	ld.w      	r3, (r7, 0x10)
18012090:	e508200f 	andi      	r8, r8, 15
18012094:	4b6c      	lsri      	r3, r3, 12
18012096:	6a0c      	and      	r8, r3
18012098:	ea0b0001 	movi      	r11, 1
1801209c:	ea89002d 	lrw      	r9, 0x20002019	// 18012150 <JPG_IRQHandler_action+0x160>
180120a0:	c4884043 	lsr      	r3, r8, r4
180120a4:	e4632001 	andi      	r3, r3, 1
180120a8:	e9030023 	bez      	r3, 0x180120ee	// 180120ee <JPG_IRQHandler_action+0xfe>
180120ac:	74d2      	sextb      	r3, r4
180120ae:	e9240039 	bnez      	r4, 0x18012120	// 18012120 <JPG_IRQHandler_action+0x130>
180120b2:	97c9      	ld.w      	r6, (r7, 0x24)
180120b4:	9765      	ld.w      	r3, (r7, 0x14)
180120b6:	d8490000 	ld.b      	r2, (r9, 0x0)
180120ba:	c60356e3 	zext      	r3, r3, 23, 16
180120be:	64ca      	cmpne      	r2, r3
180120c0:	dc8a2007 	st.w      	r4, (r10, 0x1c)
180120c4:	c4ab0c40 	inct      	r5, r11, 0
180120c8:	dc890000 	st.b      	r4, (r9, 0x0)
180120cc:	4462      	lsli      	r3, r4, 2
180120ce:	105e      	lrw      	r2, 0x20002c00	// 18012144 <JPG_IRQHandler_action+0x154>
180120d0:	608c      	addu      	r2, r3
180120d2:	d9822004 	ld.w      	r12, (r2, 0x10)
180120d6:	e90c0009 	bez      	r12, 0x180120e8	// 180120e8 <JPG_IRQHandler_action+0xf8>
180120da:	105d      	lrw      	r2, 0x20002be0	// 1801214c <JPG_IRQHandler_action+0x15c>
180120dc:	5b28      	addu      	r1, r3, r2
180120de:	6c13      	mov      	r0, r4
180120e0:	6cd7      	mov      	r3, r5
180120e2:	6c9b      	mov      	r2, r6
180120e4:	9124      	ld.w      	r1, (r1, 0x10)
180120e6:	7bf1      	jsr      	r12
180120e8:	c48b4023 	lsl      	r3, r11, r4
180120ec:	b765      	st.w      	r3, (r7, 0x14)
180120ee:	3300      	movi      	r3, 0
180120f0:	2c00      	subi      	r4, 1
180120f2:	2b00      	subi      	r3, 1
180120f4:	64d2      	cmpne      	r4, r3
180120f6:	0bd5      	bt      	0x180120a0	// 180120a0 <JPG_IRQHandler_action+0xb0>
180120f8:	1401      	addi      	r14, r14, 4
180120fa:	1498      	pop      	r4-r11, r15
180120fc:	3b42      	cmpnei      	r3, 2
180120fe:	0808      	bt      	0x1801210e	// 1801210e <JPG_IRQHandler_action+0x11e>
18012100:	3300      	movi      	r3, 0
18012102:	dc682007 	st.w      	r3, (r8, 0x1c)
18012106:	97c9      	ld.w      	r6, (r7, 0x24)
18012108:	dc6a0000 	st.b      	r3, (r10, 0x0)
1801210c:	07a1      	br      	0x1801204e	// 1801204e <JPG_IRQHandler_action+0x5e>
1801210e:	3b41      	cmpnei      	r3, 1
18012110:	0b9f      	bt      	0x1801204e	// 1801204e <JPG_IRQHandler_action+0x5e>
18012112:	d86a0000 	ld.b      	r3, (r10, 0x0)
18012116:	2300      	addi      	r3, 1
18012118:	07f8      	br      	0x18012108	// 18012108 <JPG_IRQHandler_action+0x118>
1801211a:	6d63      	mov      	r5, r8
1801211c:	6da3      	mov      	r6, r8
1801211e:	07af      	br      	0x1801207c	// 1801207c <JPG_IRQHandler_action+0x8c>
18012120:	3b42      	cmpnei      	r3, 2
18012122:	0808      	bt      	0x18012132	// 18012132 <JPG_IRQHandler_action+0x142>
18012124:	3300      	movi      	r3, 0
18012126:	dc6a2007 	st.w      	r3, (r10, 0x1c)
1801212a:	97c9      	ld.w      	r6, (r7, 0x24)
1801212c:	dc690000 	st.b      	r3, (r9, 0x0)
18012130:	07ce      	br      	0x180120cc	// 180120cc <JPG_IRQHandler_action+0xdc>
18012132:	3b41      	cmpnei      	r3, 1
18012134:	0bcc      	bt      	0x180120cc	// 180120cc <JPG_IRQHandler_action+0xdc>
18012136:	d8690000 	ld.b      	r3, (r9, 0x0)
1801213a:	2300      	addi      	r3, 1
1801213c:	07f8      	br      	0x1801212c	// 1801212c <JPG_IRQHandler_action+0x13c>
1801213e:	0000      	.short	0x0000
18012140:	20002bd8 	.long	0x20002bd8
18012144:	20002c00 	.long	0x20002c00
18012148:	20002018 	.long	0x20002018
1801214c:	20002be0 	.long	0x20002be0
18012150:	20002019 	.long	0x20002019

18012154 <hgjpg_open>:
18012154:	9043      	ld.w      	r2, (r0, 0xc)
18012156:	3301      	movi      	r3, 1
18012158:	b066      	st.w      	r3, (r0, 0x18)
1801215a:	9264      	ld.w      	r3, (r2, 0x10)
1801215c:	ec630001 	ori      	r3, r3, 1
18012160:	3000      	movi      	r0, 0
18012162:	b264      	st.w      	r3, (r2, 0x10)
18012164:	783c      	jmp      	r15
	...

18012168 <hgjpg_close>:
18012168:	9043      	ld.w      	r2, (r0, 0xc)
1801216a:	9264      	ld.w      	r3, (r2, 0x10)
1801216c:	3b80      	bclri      	r3, 0
1801216e:	b264      	st.w      	r3, (r2, 0x10)
18012170:	3300      	movi      	r3, 0
18012172:	1043      	lrw      	r2, 0x2000201a	// 1801217c <hgjpg_close+0x14>
18012174:	b066      	st.w      	r3, (r0, 0x18)
18012176:	6c0f      	mov      	r0, r3
18012178:	a260      	st.b      	r3, (r2, 0x0)
1801217a:	783c      	jmp      	r15
1801217c:	2000201a 	.long	0x2000201a

18012180 <hgjpg_decode>:
18012180:	9063      	ld.w      	r3, (r0, 0xc)
18012182:	9344      	ld.w      	r2, (r3, 0x10)
18012184:	e4422001 	andi      	r2, r2, 1
18012188:	e9020005 	bez      	r2, 0x18012192	// 18012192 <hgjpg_decode+0x12>
1801218c:	9344      	ld.w      	r2, (r3, 0x10)
1801218e:	3a80      	bclri      	r2, 0
18012190:	b344      	st.w      	r2, (r3, 0x10)
18012192:	9344      	ld.w      	r2, (r3, 0x10)
18012194:	3abf      	bseti      	r2, 31
18012196:	b344      	st.w      	r2, (r3, 0x10)
18012198:	9344      	ld.w      	r2, (r3, 0x10)
1801219a:	c40257c2 	zext      	r2, r2, 30, 0
1801219e:	b344      	st.w      	r2, (r3, 0x10)
180121a0:	3208      	movi      	r2, 8
180121a2:	b341      	st.w      	r2, (r3, 0x4)
180121a4:	b326      	st.w      	r1, (r3, 0x18)
180121a6:	9344      	ld.w      	r2, (r3, 0x10)
180121a8:	ec420001 	ori      	r2, r2, 1
180121ac:	3000      	movi      	r0, 0
180121ae:	b344      	st.w      	r2, (r3, 0x10)
180121b0:	783c      	jmp      	r15
	...

180121b4 <jpgirq_register>:
180121b4:	14d5      	push      	r4-r8, r15
180121b6:	90a3      	ld.w      	r5, (r0, 0xc)
180121b8:	6dcf      	mov      	r7, r3
180121ba:	ea035200 	movi      	r3, 20992
180121be:	3bbe      	bseti      	r3, 30
180121c0:	64d6      	cmpne      	r5, r3
180121c2:	6503      	mvcv      	r4
180121c4:	107b      	lrw      	r3, 0x20002bd8	// 18012230 <jpgirq_register+0x7c>
180121c6:	6e0b      	mov      	r8, r2
180121c8:	d4830880 	str.w      	r0, (r3, r4 << 2)
180121cc:	6d87      	mov      	r6, r1
180121ce:	3200      	movi      	r2, 0
180121d0:	1039      	lrw      	r1, 0x18011ff0	// 18012234 <jpgirq_register+0x80>
180121d2:	3028      	movi      	r0, 40
180121d4:	e3ff8a84 	bsr      	0x180036dc	// 180036dc <request_irq>
180121d8:	eb480001 	cmpnei      	r8, 1
180121dc:	0c24      	bf      	0x18012224	// 18012224 <jpgirq_register+0x70>
180121de:	eb480002 	cmpnei      	r8, 2
180121e2:	0c23      	bf      	0x18012228	// 18012228 <jpgirq_register+0x74>
180121e4:	eb480004 	cmpnei      	r8, 4
180121e8:	0c22      	bf      	0x1801222c	// 1801222c <jpgirq_register+0x78>
180121ea:	eb480008 	cmpnei      	r8, 8
180121ee:	3303      	movi      	r3, 3
180121f0:	3200      	movi      	r2, 0
180121f2:	c4430c20 	incf      	r2, r3, 0
180121f6:	3101      	movi      	r1, 1
180121f8:	e402000b 	addi      	r0, r2, 12
180121fc:	9564      	ld.w      	r3, (r5, 0x10)
180121fe:	c4014020 	lsl      	r0, r1, r0
18012202:	4482      	lsli      	r4, r4, 2
18012204:	6108      	addu      	r4, r2
18012206:	6c0c      	or      	r0, r3
18012208:	106c      	lrw      	r3, 0x20002c00	// 18012238 <jpgirq_register+0x84>
1801220a:	c4414022 	lsl      	r2, r1, r2
1801220e:	b504      	st.w      	r0, (r5, 0x10)
18012210:	d4830886 	str.w      	r6, (r3, r4 << 2)
18012214:	3000      	movi      	r0, 0
18012216:	106a      	lrw      	r3, 0x20002be0	// 1801223c <jpgirq_register+0x88>
18012218:	d4830887 	str.w      	r7, (r3, r4 << 2)
1801221c:	9565      	ld.w      	r3, (r5, 0x14)
1801221e:	6c8c      	or      	r2, r3
18012220:	b545      	st.w      	r2, (r5, 0x14)
18012222:	1495      	pop      	r4-r8, r15
18012224:	3200      	movi      	r2, 0
18012226:	07e8      	br      	0x180121f6	// 180121f6 <jpgirq_register+0x42>
18012228:	3201      	movi      	r2, 1
1801222a:	07e6      	br      	0x180121f6	// 180121f6 <jpgirq_register+0x42>
1801222c:	3202      	movi      	r2, 2
1801222e:	07e4      	br      	0x180121f6	// 180121f6 <jpgirq_register+0x42>
18012230:	20002bd8 	.long	0x20002bd8
18012234:	18011ff0 	.long	0x18011ff0
18012238:	20002c00 	.long	0x20002c00
1801223c:	20002be0 	.long	0x20002be0

18012240 <irq_jpg_enable>:
18012240:	220b      	addi      	r2, 12
18012242:	3301      	movi      	r3, 1
18012244:	e9010007 	bez      	r1, 0x18012252	// 18012252 <irq_jpg_enable+0x12>
18012248:	9024      	ld.w      	r1, (r0, 0x10)
1801224a:	70c8      	lsl      	r3, r2
1801224c:	6cc4      	or      	r3, r1
1801224e:	b064      	st.w      	r3, (r0, 0x10)
18012250:	783c      	jmp      	r15
18012252:	9024      	ld.w      	r1, (r0, 0x10)
18012254:	70c8      	lsl      	r3, r2
18012256:	c4612043 	andn      	r3, r1, r3
1801225a:	07fa      	br      	0x1801224e	// 1801224e <irq_jpg_enable+0xe>

1801225c <jpgirq_unregister>:
1801225c:	14d3      	push      	r4-r6, r15
1801225e:	90c3      	ld.w      	r6, (r0, 0xc)
18012260:	ea035200 	movi      	r3, 20992
18012264:	3bbe      	bseti      	r3, 30
18012266:	64da      	cmpne      	r6, r3
18012268:	6543      	mvcv      	r5
1801226a:	3941      	cmpnei      	r1, 1
1801226c:	7554      	zextb      	r5, r5
1801226e:	0c1f      	bf      	0x180122ac	// 180122ac <jpgirq_unregister+0x50>
18012270:	3942      	cmpnei      	r1, 2
18012272:	0c1f      	bf      	0x180122b0	// 180122b0 <jpgirq_unregister+0x54>
18012274:	3944      	cmpnei      	r1, 4
18012276:	0c1f      	bf      	0x180122b4	// 180122b4 <jpgirq_unregister+0x58>
18012278:	3948      	cmpnei      	r1, 8
1801227a:	3303      	movi      	r3, 3
1801227c:	3400      	movi      	r4, 0
1801227e:	c4830c20 	incf      	r4, r3, 0
18012282:	6c93      	mov      	r2, r4
18012284:	6c1b      	mov      	r0, r6
18012286:	3100      	movi      	r1, 0
18012288:	e3ffffdc 	bsr      	0x18012240	// 18012240 <irq_jpg_enable>
1801228c:	4562      	lsli      	r3, r5, 2
1801228e:	60d0      	addu      	r3, r4
18012290:	3000      	movi      	r0, 0
18012292:	104a      	lrw      	r2, 0x20002c00	// 180122b8 <jpgirq_unregister+0x5c>
18012294:	d4620880 	str.w      	r0, (r2, r3 << 2)
18012298:	1049      	lrw      	r2, 0x20002be0	// 180122bc <jpgirq_unregister+0x60>
1801229a:	d4620880 	str.w      	r0, (r2, r3 << 2)
1801229e:	3301      	movi      	r3, 1
180122a0:	9645      	ld.w      	r2, (r6, 0x14)
180122a2:	c4834024 	lsl      	r4, r3, r4
180122a6:	6d08      	or      	r4, r2
180122a8:	b685      	st.w      	r4, (r6, 0x14)
180122aa:	1493      	pop      	r4-r6, r15
180122ac:	3400      	movi      	r4, 0
180122ae:	07ea      	br      	0x18012282	// 18012282 <jpgirq_unregister+0x26>
180122b0:	3401      	movi      	r4, 1
180122b2:	07e8      	br      	0x18012282	// 18012282 <jpgirq_unregister+0x26>
180122b4:	3402      	movi      	r4, 2
180122b6:	07e6      	br      	0x18012282	// 18012282 <jpgirq_unregister+0x26>
180122b8:	20002c00 	.long	0x20002c00
180122bc:	20002be0 	.long	0x20002be0

180122c0 <jpg_table_init>:
180122c0:	4127      	lsli      	r1, r1, 7
180122c2:	1067      	lrw      	r3, 0x18017a08	// 180122dc <jpg_table_init+0x1c>
180122c4:	604c      	addu      	r1, r3
180122c6:	3300      	movi      	r3, 0
180122c8:	d0610882 	ldr.w      	r2, (r1, r3 << 2)
180122cc:	d4600882 	str.w      	r2, (r0, r3 << 2)
180122d0:	2300      	addi      	r3, 1
180122d2:	eb430020 	cmpnei      	r3, 32
180122d6:	0bf9      	bt      	0x180122c8	// 180122c8 <jpg_table_init+0x8>
180122d8:	783c      	jmp      	r15
180122da:	0000      	.short	0x0000
180122dc:	18017a08 	.long	0x18017a08

180122e0 <hgjpg_init>:
180122e0:	14d4      	push      	r4-r7, r15
180122e2:	ea234002 	movih      	r3, 16386
180122e6:	6d0b      	mov      	r4, r2
180122e8:	9354      	ld.w      	r2, (r3, 0x50)
180122ea:	ec424000 	ori      	r2, r2, 16384
180122ee:	90e3      	ld.w      	r7, (r0, 0xc)
180122f0:	6d43      	mov      	r5, r0
180122f2:	9004      	ld.w      	r0, (r0, 0x10)
180122f4:	b354      	st.w      	r2, (r3, 0x50)
180122f6:	9341      	ld.w      	r2, (r3, 0x4)
180122f8:	ec420004 	ori      	r2, r2, 4
180122fc:	3600      	movi      	r6, 0
180122fe:	b341      	st.w      	r2, (r3, 0x4)
18012300:	e3ffffe0 	bsr      	0x180122c0	// 180122c0 <jpg_table_init>
18012304:	6110      	addu      	r4, r4
18012306:	6c1b      	mov      	r0, r6
18012308:	b784      	st.w      	r4, (r7, 0x10)
1801230a:	b5c7      	st.w      	r6, (r5, 0x1c)
1801230c:	1494      	pop      	r4-r7, r15
	...

18012310 <jpg_csr_encode_config>:
18012310:	4170      	lsli      	r3, r1, 16
18012312:	ec630004 	ori      	r3, r3, 4
18012316:	b061      	st.w      	r3, (r0, 0x4)
18012318:	e461200f 	andi      	r3, r1, 15
1801231c:	e9030006 	bez      	r3, 0x18012328	// 18012328 <jpg_csr_encode_config+0x18>
18012320:	3300      	movi      	r3, 0
18012322:	2b0f      	subi      	r3, 16
18012324:	684c      	and      	r1, r3
18012326:	210f      	addi      	r1, 16
18012328:	7c48      	mult      	r1, r2
1801232a:	4a64      	lsri      	r3, r2, 4
1801232c:	2b00      	subi      	r3, 1
1801232e:	4928      	lsri      	r1, r1, 8
18012330:	4250      	lsli      	r2, r2, 16
18012332:	2900      	subi      	r1, 1
18012334:	6c8c      	or      	r2, r3
18012336:	b022      	st.w      	r1, (r0, 0x8)
18012338:	b043      	st.w      	r2, (r0, 0xc)
1801233a:	783c      	jmp      	r15

1801233c <hgjpg_set_addr>:
1801233c:	ea8d001b 	lrw      	r13, 0x2000201a	// 180123a8 <hgjpg_set_addr+0x6c>
18012340:	d9802003 	ld.w      	r12, (r0, 0xc)
18012344:	d86d0000 	ld.b      	r3, (r13, 0x0)
18012348:	e923000d 	bnez      	r3, 0x18012362	// 18012362 <hgjpg_set_addr+0x26>
1801234c:	3301      	movi      	r3, 1
1801234e:	dc6d0000 	st.b      	r3, (r13, 0x0)
18012352:	ea8d0017 	lrw      	r13, 0x20000b9c	// 180123ac <hgjpg_set_addr+0x70>
18012356:	dc6d0000 	st.b      	r3, (r13, 0x0)
1801235a:	ea8d0016 	lrw      	r13, 0x20000b9d	// 180123b0 <hgjpg_set_addr+0x74>
1801235e:	dc6d0000 	st.b      	r3, (r13, 0x0)
18012362:	9067      	ld.w      	r3, (r0, 0x1c)
18012364:	e5a32001 	andi      	r13, r3, 1
18012368:	e90d001a 	bez      	r13, 0x1801239c	// 1801239c <hgjpg_set_addr+0x60>
1801236c:	dc2c2008 	st.w      	r1, (r12, 0x20)
18012370:	ea015100 	movi      	r1, 20736
18012374:	39be      	bseti      	r1, 30
18012376:	6472      	cmpne      	r12, r1
18012378:	0815      	bt      	0x180123a2	// 180123a2 <hgjpg_set_addr+0x66>
1801237a:	102d      	lrw      	r1, 0x20000b9c	// 180123ac <hgjpg_set_addr+0x70>
1801237c:	d9a10000 	ld.b      	r13, (r1, 0x0)
18012380:	e90d000a 	bez      	r13, 0x18012394	// 18012394 <hgjpg_set_addr+0x58>
18012384:	d9ac2004 	ld.w      	r13, (r12, 0x10)
18012388:	4250      	lsli      	r2, r2, 16
1801238a:	6cb4      	or      	r2, r13
1801238c:	dc4c2004 	st.w      	r2, (r12, 0x10)
18012390:	3200      	movi      	r2, 0
18012392:	a140      	st.b      	r2, (r1, 0x0)
18012394:	2300      	addi      	r3, 1
18012396:	b067      	st.w      	r3, (r0, 0x1c)
18012398:	3000      	movi      	r0, 0
1801239a:	783c      	jmp      	r15
1801239c:	dc2c2007 	st.w      	r1, (r12, 0x1c)
180123a0:	07e8      	br      	0x18012370	// 18012370 <hgjpg_set_addr+0x34>
180123a2:	1024      	lrw      	r1, 0x20000b9d	// 180123b0 <hgjpg_set_addr+0x74>
180123a4:	07ec      	br      	0x1801237c	// 1801237c <hgjpg_set_addr+0x40>
180123a6:	0000      	.short	0x0000
180123a8:	2000201a 	.long	0x2000201a
180123ac:	20000b9c 	.long	0x20000b9c
180123b0:	20000b9d 	.long	0x20000b9d

180123b4 <hgjpg_ioctl>:
180123b4:	14d0      	push      	r15
180123b6:	6f47      	mov      	r13, r1
180123b8:	eb0d000a 	cmphsi      	r13, 11
180123bc:	6c4b      	mov      	r1, r2
180123be:	d9802003 	ld.w      	r12, (r0, 0xc)
180123c2:	6c8f      	mov      	r2, r3
180123c4:	0866      	bt      	0x18012490	// 18012490 <hgjpg_ioctl+0xdc>
180123c6:	1063      	lrw      	r3, 0x18018248	// 180123d0 <hgjpg_ioctl+0x1c>
180123c8:	d1a30883 	ldr.w      	r3, (r3, r13 << 2)
180123cc:	780c      	jmp      	r3
180123ce:	0000      	.short	0x0000
180123d0:	18018248 	.long	0x18018248
180123d4:	9026      	ld.w      	r1, (r0, 0x18)
180123d6:	6c07      	mov      	r0, r1
180123d8:	1490      	pop      	r15
180123da:	e3ffffb1 	bsr      	0x1801233c	// 1801233c <hgjpg_set_addr>
180123de:	3100      	movi      	r1, 0
180123e0:	07fb      	br      	0x180123d6	// 180123d6 <hgjpg_ioctl+0x22>
180123e2:	3200      	movi      	r2, 0
180123e4:	d86c2004 	ld.w      	r3, (r12, 0x10)
180123e8:	2a1e      	subi      	r2, 31
180123ea:	68c8      	and      	r3, r2
180123ec:	dc6c2004 	st.w      	r3, (r12, 0x10)
180123f0:	d86c2004 	ld.w      	r3, (r12, 0x10)
180123f4:	5904      	addu      	r0, r1, r1
180123f6:	6c0c      	or      	r0, r3
180123f8:	dc0c2004 	st.w      	r0, (r12, 0x10)
180123fc:	07f1      	br      	0x180123de	// 180123de <hgjpg_ioctl+0x2a>
180123fe:	6c33      	mov      	r0, r12
18012400:	e3ffff88 	bsr      	0x18012310	// 18012310 <jpg_csr_encode_config>
18012404:	07ed      	br      	0x180123de	// 180123de <hgjpg_ioctl+0x2a>
18012406:	9044      	ld.w      	r2, (r0, 0x10)
18012408:	3300      	movi      	r3, 0
1801240a:	d0610880 	ldr.w      	r0, (r1, r3 << 2)
1801240e:	d4620880 	str.w      	r0, (r2, r3 << 2)
18012412:	2300      	addi      	r3, 1
18012414:	eb430020 	cmpnei      	r3, 32
18012418:	0bf9      	bt      	0x1801240a	// 1801240a <hgjpg_ioctl+0x56>
1801241a:	07e2      	br      	0x180123de	// 180123de <hgjpg_ioctl+0x2a>
1801241c:	d86c2004 	ld.w      	r3, (r12, 0x10)
18012420:	e9010007 	bez      	r1, 0x1801242e	// 1801242e <hgjpg_ioctl+0x7a>
18012424:	ec630100 	ori      	r3, r3, 256
18012428:	dc6c2004 	st.w      	r3, (r12, 0x10)
1801242c:	07d9      	br      	0x180123de	// 180123de <hgjpg_ioctl+0x2a>
1801242e:	3b88      	bclri      	r3, 8
18012430:	dc6c2004 	st.w      	r3, (r12, 0x10)
18012434:	07d1      	br      	0x180123d6	// 180123d6 <hgjpg_ioctl+0x22>
18012436:	d86c2004 	ld.w      	r3, (r12, 0x10)
1801243a:	e9010005 	bez      	r1, 0x18012444	// 18012444 <hgjpg_ioctl+0x90>
1801243e:	ec630400 	ori      	r3, r3, 1024
18012442:	07f3      	br      	0x18012428	// 18012428 <hgjpg_ioctl+0x74>
18012444:	3b8a      	bclri      	r3, 10
18012446:	07f5      	br      	0x18012430	// 18012430 <hgjpg_ioctl+0x7c>
18012448:	d86c2004 	ld.w      	r3, (r12, 0x10)
1801244c:	ec630200 	ori      	r3, r3, 512
18012450:	07ec      	br      	0x18012428	// 18012428 <hgjpg_ioctl+0x74>
18012452:	3200      	movi      	r2, 0
18012454:	d86c2004 	ld.w      	r3, (r12, 0x10)
18012458:	2ae0      	subi      	r2, 225
1801245a:	68c8      	and      	r3, r2
1801245c:	dc6c2004 	st.w      	r3, (r12, 0x10)
18012460:	d80c2004 	ld.w      	r0, (r12, 0x10)
18012464:	4125      	lsli      	r1, r1, 5
18012466:	6c40      	or      	r1, r0
18012468:	dc2c2004 	st.w      	r1, (r12, 0x10)
1801246c:	07b9      	br      	0x180123de	// 180123de <hgjpg_ioctl+0x2a>
1801246e:	d86c2004 	ld.w      	r3, (r12, 0x10)
18012472:	e9010005 	bez      	r1, 0x1801247c	// 1801247c <hgjpg_ioctl+0xc8>
18012476:	ec630800 	ori      	r3, r3, 2048
1801247a:	07d7      	br      	0x18012428	// 18012428 <hgjpg_ioctl+0x74>
1801247c:	3b8b      	bclri      	r3, 11
1801247e:	07d9      	br      	0x18012430	// 18012430 <hgjpg_ioctl+0x7c>
18012480:	32e0      	movi      	r2, 224
18012482:	d86c2005 	ld.w      	r3, (r12, 0x14)
18012486:	4254      	lsli      	r2, r2, 20
18012488:	68c8      	and      	r3, r2
1801248a:	3b40      	cmpnei      	r3, 0
1801248c:	6443      	mvcv      	r1
1801248e:	07a4      	br      	0x180123d6	// 180123d6 <hgjpg_ioctl+0x22>
18012490:	ea01020b 	movi      	r1, 523
18012494:	6c46      	nor      	r1, r1
18012496:	07a0      	br      	0x180123d6	// 180123d6 <hgjpg_ioctl+0x22>

18012498 <hgjpg_attach>:
18012498:	14d0      	push      	r15
1801249a:	9165      	ld.w      	r3, (r1, 0x14)
1801249c:	ea0c0001 	movi      	r12, 1
180124a0:	1048      	lrw      	r2, 0x18018274	// 180124c0 <hgjpg_attach+0x28>
180124a2:	b142      	st.w      	r2, (r1, 0x8)
180124a4:	c4a354c2 	zext      	r2, r3, 6, 5
180124a8:	e463201f 	andi      	r3, r3, 31
180124ac:	c46c4023 	lsl      	r3, r12, r3
180124b0:	221f      	addi      	r2, 32
180124b2:	ea8c0005 	lrw      	r12, 0xe000e100	// 180124c4 <hgjpg_attach+0x2c>
180124b6:	d44c0883 	str.w      	r3, (r12, r2 << 2)
180124ba:	e3ff85f5 	bsr      	0x180030a4	// 180030a4 <dev_register>
180124be:	1490      	pop      	r15
180124c0:	18018274 	.long	0x18018274
180124c4:	e000e100 	.long	0xe000e100

180124c8 <hg_xspi_sample_offset>:
180124c8:	d980202d 	ld.w      	r12, (r0, 0xb4)
180124cc:	e58c207f 	andi      	r12, r12, 127
180124d0:	d860202d 	ld.w      	r3, (r0, 0xb4)
180124d4:	6070      	addu      	r1, r12
180124d6:	c60356c3 	zext      	r3, r3, 22, 16
180124da:	7446      	sextb      	r1, r1
180124dc:	608c      	addu      	r2, r3
180124de:	748a      	sextb      	r2, r2
180124e0:	3301      	movi      	r3, 1
180124e2:	39df      	btsti      	r1, 31
180124e4:	c4230c40 	inct      	r1, r3, 0
180124e8:	ea2cff81 	movih      	r12, 65409
180124ec:	3adf      	btsti      	r2, 31
180124ee:	c4430c40 	inct      	r2, r3, 0
180124f2:	e58c1000 	subi      	r12, r12, 1
180124f6:	d860202d 	ld.w      	r3, (r0, 0xb4)
180124fa:	68f0      	and      	r3, r12
180124fc:	ea0c00fe 	movi      	r12, 254
18012500:	c5ec482c 	lsli      	r12, r12, 15
18012504:	4250      	lsli      	r2, r2, 16
18012506:	3bbe      	bseti      	r3, 30
18012508:	68b0      	and      	r2, r12
1801250a:	6c8c      	or      	r2, r3
1801250c:	dc40202d 	st.w      	r2, (r0, 0xb4)
18012510:	3200      	movi      	r2, 0
18012512:	d860202d 	ld.w      	r3, (r0, 0xb4)
18012516:	2a7f      	subi      	r2, 128
18012518:	68c8      	and      	r3, r2
1801251a:	3bbe      	bseti      	r3, 30
1801251c:	6c4c      	or      	r1, r3
1801251e:	dc20202d 	st.w      	r1, (r0, 0xb4)
18012522:	d860202d 	ld.w      	r3, (r0, 0xb4)
18012526:	c40357a3 	zext      	r3, r3, 29, 0
1801252a:	3bbe      	bseti      	r3, 30
1801252c:	dc60202d 	st.w      	r3, (r0, 0xb4)
18012530:	d860202d 	ld.w      	r3, (r0, 0xb4)
18012534:	3bbe      	bseti      	r3, 30
18012536:	3bbf      	bseti      	r3, 31
18012538:	dc60202d 	st.w      	r3, (r0, 0xb4)
1801253c:	783c      	jmp      	r15
	...

18012540 <csi_dcache_invalid_range>:
18012540:	c7c05023 	bmaski      	r3, 31
18012544:	230f      	addi      	r3, 16
18012546:	68c0      	and      	r3, r0
18012548:	e9a30007 	bhsz      	r3, 0x18012556	// 18012556 <csi_dcache_invalid_range+0x16>
1801254c:	3200      	movi      	r2, 0
1801254e:	2b00      	subi      	r3, 1
18012550:	2a0f      	subi      	r2, 16
18012552:	6cc8      	or      	r3, r2
18012554:	2300      	addi      	r3, 1
18012556:	3200      	movi      	r2, 0
18012558:	2a0f      	subi      	r2, 16
1801255a:	6808      	and      	r0, r2
1801255c:	60c4      	addu      	r3, r1
1801255e:	ec000002 	ori      	r0, r0, 2
18012562:	1055      	lrw      	r2, 0xe000f000	// 180125b4 <csi_dcache_invalid_range+0x74>
18012564:	eb23007f 	cmplti      	r3, 128
18012568:	0c09      	bf      	0x1801257a	// 1801257a <csi_dcache_invalid_range+0x3a>
1801256a:	600c      	addu      	r0, r3
1801256c:	1032      	lrw      	r1, 0xe000f000	// 180125b4 <csi_dcache_invalid_range+0x74>
1801256e:	584d      	subu      	r2, r0, r3
18012570:	e943001e 	bhz      	r3, 0x180125ac	// 180125ac <csi_dcache_invalid_range+0x6c>
18012574:	c0000420 	sync
18012578:	783c      	jmp      	r15
1801257a:	e420000f 	addi      	r1, r0, 16
1801257e:	b201      	st.w      	r0, (r2, 0x4)
18012580:	b221      	st.w      	r1, (r2, 0x4)
18012582:	e420001f 	addi      	r1, r0, 32
18012586:	b221      	st.w      	r1, (r2, 0x4)
18012588:	e420002f 	addi      	r1, r0, 48
1801258c:	b221      	st.w      	r1, (r2, 0x4)
1801258e:	e420003f 	addi      	r1, r0, 64
18012592:	b221      	st.w      	r1, (r2, 0x4)
18012594:	e420004f 	addi      	r1, r0, 80
18012598:	b221      	st.w      	r1, (r2, 0x4)
1801259a:	e420005f 	addi      	r1, r0, 96
1801259e:	b221      	st.w      	r1, (r2, 0x4)
180125a0:	e420006f 	addi      	r1, r0, 112
180125a4:	b221      	st.w      	r1, (r2, 0x4)
180125a6:	207f      	addi      	r0, 128
180125a8:	2b7f      	subi      	r3, 128
180125aa:	07dd      	br      	0x18012564	// 18012564 <csi_dcache_invalid_range+0x24>
180125ac:	b141      	st.w      	r2, (r1, 0x4)
180125ae:	2b0f      	subi      	r3, 16
180125b0:	07df      	br      	0x1801256e	// 1801256e <csi_dcache_invalid_range+0x2e>
180125b2:	0000      	.short	0x0000
180125b4:	e000f000 	.long	0xe000f000

180125b8 <hgspi_xip_open>:
180125b8:	3000      	movi      	r0, 0
180125ba:	783c      	jmp      	r15

180125bc <hgspi_xip_close>:
180125bc:	3000      	movi      	r0, 0
180125be:	783c      	jmp      	r15

180125c0 <get_csi_cache_addr_range.isra.0>:
180125c0:	3000      	movi      	r0, 0
180125c2:	ea0c0080 	movi      	r12, 128
180125c6:	6cc3      	mov      	r3, r0
180125c8:	c64c482c 	lsli      	r12, r12, 18
180125cc:	ea0d0001 	movi      	r13, 1
180125d0:	104d      	lrw      	r2, 0xe000f000	// 18012604 <get_csi_cache_addr_range.isra.0+0x44>
180125d2:	4322      	lsli      	r1, r3, 2
180125d4:	6048      	addu      	r1, r2
180125d6:	9142      	ld.w      	r2, (r1, 0x8)
180125d8:	9122      	ld.w      	r1, (r1, 0x8)
180125da:	e4212001 	andi      	r1, r1, 1
180125de:	e901000f 	bez      	r1, 0x180125fc	// 180125fc <get_csi_cache_addr_range.isra.0+0x3c>
180125e2:	ea0103ff 	movi      	r1, 1023
180125e6:	6c46      	nor      	r1, r1
180125e8:	6884      	and      	r2, r1
180125ea:	31e8      	movi      	r1, 232
180125ec:	4138      	lsli      	r1, r1, 24
180125ee:	6084      	addu      	r2, r1
180125f0:	64b0      	cmphs      	r12, r2
180125f2:	0c05      	bf      	0x180125fc	// 180125fc <get_csi_cache_addr_range.isra.0+0x3c>
180125f4:	c46d4022 	lsl      	r2, r13, r3
180125f8:	6c08      	or      	r0, r2
180125fa:	7400      	zextb      	r0, r0
180125fc:	2300      	addi      	r3, 1
180125fe:	3b44      	cmpnei      	r3, 4
18012600:	0be8      	bt      	0x180125d0	// 180125d0 <get_csi_cache_addr_range.isra.0+0x10>
18012602:	783c      	jmp      	r15
18012604:	e000f000 	.long	0xe000f000

18012608 <csi_cache_enable_range.part.1>:
18012608:	ea0d0001 	movi      	r13, 1
1801260c:	3300      	movi      	r3, 0
1801260e:	6874      	and      	r1, r13
18012610:	c46d4022 	lsl      	r2, r13, r3
18012614:	6880      	and      	r2, r0
18012616:	e902000b 	bez      	r2, 0x1801262c	// 1801262c <csi_cache_enable_range.part.1+0x24>
1801261a:	ea8c0007 	lrw      	r12, 0xe000f000	// 18012634 <csi_cache_enable_range.part.1+0x2c>
1801261e:	4342      	lsli      	r2, r3, 2
18012620:	60b0      	addu      	r2, r12
18012622:	d9822002 	ld.w      	r12, (r2, 0x8)
18012626:	6f04      	or      	r12, r1
18012628:	dd822002 	st.w      	r12, (r2, 0x8)
1801262c:	2300      	addi      	r3, 1
1801262e:	3b44      	cmpnei      	r3, 4
18012630:	0bf0      	bt      	0x18012610	// 18012610 <csi_cache_enable_range.part.1+0x8>
18012632:	783c      	jmp      	r15
18012634:	e000f000 	.long	0xe000f000

18012638 <csi_cache_enable_range.constprop.4>:
18012638:	3300      	movi      	r3, 0
1801263a:	ea0c0001 	movi      	r12, 1
1801263e:	c46c4022 	lsl      	r2, r12, r3
18012642:	6880      	and      	r2, r0
18012644:	e9020008 	bez      	r2, 0x18012654	// 18012654 <csi_cache_enable_range.constprop.4+0x1c>
18012648:	1025      	lrw      	r1, 0xe000f000	// 1801265c <csi_cache_enable_range.constprop.4+0x24>
1801264a:	4342      	lsli      	r2, r3, 2
1801264c:	6084      	addu      	r2, r1
1801264e:	9222      	ld.w      	r1, (r2, 0x8)
18012650:	3980      	bclri      	r1, 0
18012652:	b222      	st.w      	r1, (r2, 0x8)
18012654:	2300      	addi      	r3, 1
18012656:	3b44      	cmpnei      	r3, 4
18012658:	0bf3      	bt      	0x1801263e	// 1801263e <csi_cache_enable_range.constprop.4+0x6>
1801265a:	783c      	jmp      	r15
1801265c:	e000f000 	.long	0xe000f000

18012660 <set_qspi_protect>:
18012660:	14d0      	push      	r15
18012662:	1423      	subi      	r14, r14, 12
18012664:	6cc3      	mov      	r3, r0
18012666:	1019      	lrw      	r0, 0x20000098	// 180126c8 <set_qspi_protect+0x68>
18012668:	9000      	ld.w      	r0, (r0, 0x0)
1801266a:	e9220020 	bnez      	r2, 0x180126aa	// 180126aa <set_qspi_protect+0x4a>
1801266e:	d9802009 	ld.w      	r12, (r0, 0x24)
18012672:	9049      	ld.w      	r2, (r0, 0x24)
18012674:	2a00      	subi      	r2, 1
18012676:	6048      	addu      	r1, r2
18012678:	604c      	addu      	r1, r3
1801267a:	60f0      	addu      	r3, r12
1801267c:	1054      	lrw      	r2, 0x20001928	// 180126cc <set_qspi_protect+0x6c>
1801267e:	d9822000 	ld.w      	r12, (r2, 0x0)
18012682:	6704      	cmphs      	r1, r12
18012684:	0c05      	bf      	0x1801268e	// 1801268e <set_qspi_protect+0x2e>
18012686:	d9a22001 	ld.w      	r13, (r2, 0x4)
1801268a:	64f4      	cmphs      	r13, r3
1801268c:	0812      	bt      	0x180126b0	// 180126b0 <set_qspi_protect+0x50>
1801268e:	ea8d0011 	lrw      	r13, 0x2000201c	// 180126d0 <set_qspi_protect+0x70>
18012692:	d9ad2000 	ld.w      	r13, (r13, 0x0)
18012696:	6744      	cmphs      	r1, r13
18012698:	080c      	bt      	0x180126b0	// 180126b0 <set_qspi_protect+0x50>
1801269a:	b035      	st.w      	r1, (r0, 0x54)
1801269c:	b074      	st.w      	r3, (r0, 0x50)
1801269e:	9076      	ld.w      	r3, (r0, 0x58)
180126a0:	ec630001 	ori      	r3, r3, 1
180126a4:	b076      	st.w      	r3, (r0, 0x58)
180126a6:	1403      	addi      	r14, r14, 12
180126a8:	1490      	pop      	r15
180126aa:	2900      	subi      	r1, 1
180126ac:	604c      	addu      	r1, r3
180126ae:	07e7      	br      	0x1801267c	// 1801267c <set_qspi_protect+0x1c>
180126b0:	9241      	ld.w      	r2, (r2, 0x4)
180126b2:	b842      	st.w      	r2, (r14, 0x8)
180126b4:	b820      	st.w      	r1, (r14, 0x0)
180126b6:	dd8e2001 	st.w      	r12, (r14, 0x4)
180126ba:	32f1      	movi      	r2, 241
180126bc:	1026      	lrw      	r1, 0x18018304	// 180126d4 <set_qspi_protect+0x74>
180126be:	1007      	lrw      	r0, 0x18018315	// 180126d8 <set_qspi_protect+0x78>
180126c0:	e3ffd202 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
180126c4:	07f1      	br      	0x180126a6	// 180126a6 <set_qspi_protect+0x46>
180126c6:	0000      	.short	0x0000
180126c8:	20000098 	.long	0x20000098
180126cc:	20001928 	.long	0x20001928
180126d0:	2000201c 	.long	0x2000201c
180126d4:	18018304 	.long	0x18018304
180126d8:	18018315 	.long	0x18018315

180126dc <set_qspi_protect_custom>:
180126dc:	106b      	lrw      	r3, 0x20000098	// 18012708 <set_qspi_protect_custom+0x2c>
180126de:	9360      	ld.w      	r3, (r3, 0x0)
180126e0:	e9220010 	bnez      	r2, 0x18012700	// 18012700 <set_qspi_protect_custom+0x24>
180126e4:	d9832009 	ld.w      	r12, (r3, 0x24)
180126e8:	9349      	ld.w      	r2, (r3, 0x24)
180126ea:	2a00      	subi      	r2, 1
180126ec:	6048      	addu      	r1, r2
180126ee:	6040      	addu      	r1, r0
180126f0:	6030      	addu      	r0, r12
180126f2:	b335      	st.w      	r1, (r3, 0x54)
180126f4:	b314      	st.w      	r0, (r3, 0x50)
180126f6:	9356      	ld.w      	r2, (r3, 0x58)
180126f8:	ec420001 	ori      	r2, r2, 1
180126fc:	b356      	st.w      	r2, (r3, 0x58)
180126fe:	783c      	jmp      	r15
18012700:	2900      	subi      	r1, 1
18012702:	6040      	addu      	r1, r0
18012704:	07f7      	br      	0x180126f2	// 180126f2 <set_qspi_protect_custom+0x16>
18012706:	0000      	.short	0x0000
18012708:	20000098 	.long	0x20000098

1801270c <qspi_protect_all_flash>:
1801270c:	1065      	lrw      	r3, 0x20000098	// 18012720 <qspi_protect_all_flash+0x14>
1801270e:	3200      	movi      	r2, 0
18012710:	9360      	ld.w      	r3, (r3, 0x0)
18012712:	2a00      	subi      	r2, 1
18012714:	b355      	st.w      	r2, (r3, 0x54)
18012716:	3200      	movi      	r2, 0
18012718:	b354      	st.w      	r2, (r3, 0x50)
1801271a:	3202      	movi      	r2, 2
1801271c:	b356      	st.w      	r2, (r3, 0x58)
1801271e:	783c      	jmp      	r15
18012720:	20000098 	.long	0x20000098

18012724 <TXW81X_xip_read>:
18012724:	14d6      	push      	r4-r9, r15
18012726:	10b6      	lrw      	r5, 0x20002028	// 1801277c <TXW81X_xip_read+0x58>
18012728:	6dc3      	mov      	r7, r0
1801272a:	9580      	ld.w      	r4, (r5, 0x0)
1801272c:	e4842001 	andi      	r4, r4, 1
18012730:	6e07      	mov      	r8, r1
18012732:	6e4b      	mov      	r9, r2
18012734:	e9040005 	bez      	r4, 0x1801273e	// 1801273e <TXW81X_xip_read+0x1a>
18012738:	e3ffff44 	bsr      	0x180125c0	// 180125c0 <get_csi_cache_addr_range.isra.0>
1801273c:	6d03      	mov      	r4, r0
1801273e:	9560      	ld.w      	r3, (r5, 0x0)
18012740:	3b80      	bclri      	r3, 0
18012742:	b560      	st.w      	r3, (r5, 0x0)
18012744:	c0006026 	mfcr      	r6, cr<0, 0>
18012748:	c0807020 	psrclr      	ie
1801274c:	e4c62040 	andi      	r6, r6, 64
18012750:	e9040005 	bez      	r4, 0x1801275a	// 1801275a <TXW81X_xip_read+0x36>
18012754:	6c13      	mov      	r0, r4
18012756:	e3ffff71 	bsr      	0x18012638	// 18012638 <csi_cache_enable_range.constprop.4>
1801275a:	9560      	ld.w      	r3, (r5, 0x0)
1801275c:	6ca7      	mov      	r2, r9
1801275e:	6c63      	mov      	r1, r8
18012760:	6c1f      	mov      	r0, r7
18012762:	e0001b89 	bsr      	0x18015e74	// 18015e74 <sha1_vector+0x5c>
18012766:	e9040006 	bez      	r4, 0x18012772	// 18012772 <TXW81X_xip_read+0x4e>
1801276a:	3101      	movi      	r1, 1
1801276c:	6c13      	mov      	r0, r4
1801276e:	e3ffff4d 	bsr      	0x18012608	// 18012608 <csi_cache_enable_range.part.1>
18012772:	e9060004 	bez      	r6, 0x1801277a	// 1801277a <TXW81X_xip_read+0x56>
18012776:	c0807420 	psrset      	ie
1801277a:	1496      	pop      	r4-r9, r15
1801277c:	20002028 	.long	0x20002028

18012780 <hgspi_xip_read>:
18012780:	14d0      	push      	r15
18012782:	1064      	lrw      	r3, 0x2000202c	// 18012790 <hgspi_xip_read+0x10>
18012784:	9300      	ld.w      	r0, (r3, 0x0)
18012786:	e3ffffcf 	bsr      	0x18012724	// 18012724 <TXW81X_xip_read>
1801278a:	3000      	movi      	r0, 0
1801278c:	1490      	pop      	r15
1801278e:	0000      	.short	0x0000
18012790:	2000202c 	.long	0x2000202c

18012794 <TXW81X_xip_write>:
18012794:	14d6      	push      	r4-r9, r15
18012796:	11a3      	lrw      	r5, 0x20002028	// 18012820 <TXW81X_xip_write+0x8c>
18012798:	6d83      	mov      	r6, r0
1801279a:	9580      	ld.w      	r4, (r5, 0x0)
1801279c:	e4842001 	andi      	r4, r4, 1
180127a0:	6e47      	mov      	r9, r1
180127a2:	6dcb      	mov      	r7, r2
180127a4:	e9040005 	bez      	r4, 0x180127ae	// 180127ae <TXW81X_xip_write+0x1a>
180127a8:	e3ffff0c 	bsr      	0x180125c0	// 180125c0 <get_csi_cache_addr_range.isra.0>
180127ac:	6d03      	mov      	r4, r0
180127ae:	9560      	ld.w      	r3, (r5, 0x0)
180127b0:	3b80      	bclri      	r3, 0
180127b2:	b560      	st.w      	r3, (r5, 0x0)
180127b4:	c0006028 	mfcr      	r8, cr<0, 0>
180127b8:	c0807020 	psrclr      	ie
180127bc:	107a      	lrw      	r3, 0x20002020	// 18012824 <TXW81X_xip_write+0x90>
180127be:	e5082040 	andi      	r8, r8, 64
180127c2:	8360      	ld.b      	r3, (r3, 0x0)
180127c4:	e9230027 	bnez      	r3, 0x18012812	// 18012812 <TXW81X_xip_write+0x7e>
180127c8:	9540      	ld.w      	r2, (r5, 0x0)
180127ca:	e4422002 	andi      	r2, r2, 2
180127ce:	6c5f      	mov      	r1, r7
180127d0:	6c1b      	mov      	r0, r6
180127d2:	e3ffff47 	bsr      	0x18012660	// 18012660 <set_qspi_protect>
180127d6:	e9040005 	bez      	r4, 0x180127e0	// 180127e0 <TXW81X_xip_write+0x4c>
180127da:	6c13      	mov      	r0, r4
180127dc:	e3ffff2e 	bsr      	0x18012638	// 18012638 <csi_cache_enable_range.constprop.4>
180127e0:	9560      	ld.w      	r3, (r5, 0x0)
180127e2:	6c9f      	mov      	r2, r7
180127e4:	6c67      	mov      	r1, r9
180127e6:	6c1b      	mov      	r0, r6
180127e8:	e0001b64 	bsr      	0x18015eb0	// 18015eb0 <sha1_vector+0x98>
180127ec:	e904000c 	bez      	r4, 0x18012804	// 18012804 <TXW81X_xip_write+0x70>
180127f0:	33c0      	movi      	r3, 192
180127f2:	4375      	lsli      	r3, r3, 21
180127f4:	6c5f      	mov      	r1, r7
180127f6:	5e0c      	addu      	r0, r6, r3
180127f8:	e3fffea4 	bsr      	0x18012540	// 18012540 <csi_dcache_invalid_range>
180127fc:	3101      	movi      	r1, 1
180127fe:	6c13      	mov      	r0, r4
18012800:	e3ffff04 	bsr      	0x18012608	// 18012608 <csi_cache_enable_range.part.1>
18012804:	e3ffff84 	bsr      	0x1801270c	// 1801270c <qspi_protect_all_flash>
18012808:	e9080004 	bez      	r8, 0x18012810	// 18012810 <TXW81X_xip_write+0x7c>
1801280c:	c0807420 	psrset      	ie
18012810:	1496      	pop      	r4-r9, r15
18012812:	1066      	lrw      	r3, 0x20002024	// 18012828 <TXW81X_xip_write+0x94>
18012814:	3201      	movi      	r2, 1
18012816:	9300      	ld.w      	r0, (r3, 0x0)
18012818:	6c5f      	mov      	r1, r7
1801281a:	6018      	addu      	r0, r6
1801281c:	07db      	br      	0x180127d2	// 180127d2 <TXW81X_xip_write+0x3e>
1801281e:	0000      	.short	0x0000
18012820:	20002028 	.long	0x20002028
18012824:	20002020 	.long	0x20002020
18012828:	20002024 	.long	0x20002024

1801282c <hgspi_xip_write>:
1801282c:	14d0      	push      	r15
1801282e:	1064      	lrw      	r3, 0x2000202c	// 1801283c <hgspi_xip_write+0x10>
18012830:	9300      	ld.w      	r0, (r3, 0x0)
18012832:	e3ffffb1 	bsr      	0x18012794	// 18012794 <TXW81X_xip_write>
18012836:	3000      	movi      	r0, 0
18012838:	1490      	pop      	r15
1801283a:	0000      	.short	0x0000
1801283c:	2000202c 	.long	0x2000202c

18012840 <TXW81X_xip_erase>:
18012840:	14d7      	push      	r4-r10, r15
18012842:	33c0      	movi      	r3, 192
18012844:	4361      	lsli      	r3, r3, 1
18012846:	1187      	lrw      	r4, 0x20002028	// 180128e0 <TXW81X_xip_erase+0xa0>
18012848:	6e83      	mov      	r10, r0
1801284a:	d9232005 	ld.w      	r9, (r3, 0x14)
1801284e:	6e07      	mov      	r8, r1
18012850:	1165      	lrw      	r3, 0x20000098	// 180128e4 <TXW81X_xip_erase+0xa4>
18012852:	93c0      	ld.w      	r6, (r3, 0x0)
18012854:	e3fffeb6 	bsr      	0x180125c0	// 180125c0 <get_csi_cache_addr_range.isra.0>
18012858:	9460      	ld.w      	r3, (r4, 0x0)
1801285a:	6dc3      	mov      	r7, r0
1801285c:	e4632001 	andi      	r3, r3, 1
18012860:	c0006025 	mfcr      	r5, cr<0, 0>
18012864:	c0807020 	psrclr      	ie
18012868:	e4a52040 	andi      	r5, r5, 64
1801286c:	e903000a 	bez      	r3, 0x18012880	// 18012880 <TXW81X_xip_erase+0x40>
18012870:	107e      	lrw      	r3, 0x2000202c	// 180128e8 <TXW81X_xip_erase+0xa8>
18012872:	6c63      	mov      	r1, r8
18012874:	9300      	ld.w      	r0, (r3, 0x0)
18012876:	33c0      	movi      	r3, 192
18012878:	4375      	lsli      	r3, r3, 21
1801287a:	600c      	addu      	r0, r3
1801287c:	e3fffe62 	bsr      	0x18012540	// 18012540 <csi_dcache_invalid_range>
18012880:	9460      	ld.w      	r3, (r4, 0x0)
18012882:	3b80      	bclri      	r3, 0
18012884:	3100      	movi      	r1, 0
18012886:	6c1b      	mov      	r0, r6
18012888:	b460      	st.w      	r3, (r4, 0x0)
1801288a:	e3ff92c3 	bsr      	0x18004e10	// 18004e10 <hg_qspi_flash_xip_mode>
1801288e:	3100      	movi      	r1, 0
18012890:	6c1b      	mov      	r0, r6
18012892:	e3ff92c1 	bsr      	0x18004e14	// 18004e14 <hg_qspi_flash_protect>
18012896:	9440      	ld.w      	r2, (r4, 0x0)
18012898:	6c63      	mov      	r1, r8
1801289a:	6c2b      	mov      	r0, r10
1801289c:	7be5      	jsr      	r9
1801289e:	3101      	movi      	r1, 1
180128a0:	6c1b      	mov      	r0, r6
180128a2:	e3ff92b9 	bsr      	0x18004e14	// 18004e14 <hg_qspi_flash_protect>
180128a6:	3101      	movi      	r1, 1
180128a8:	6c1b      	mov      	r0, r6
180128aa:	e3ff92b3 	bsr      	0x18004e10	// 18004e10 <hg_qspi_flash_xip_mode>
180128ae:	e9070006 	bez      	r7, 0x180128ba	// 180128ba <TXW81X_xip_erase+0x7a>
180128b2:	3101      	movi      	r1, 1
180128b4:	6c1f      	mov      	r0, r7
180128b6:	e3fffea9 	bsr      	0x18012608	// 18012608 <csi_cache_enable_range.part.1>
180128ba:	ea234002 	movih      	r3, 16386
180128be:	9377      	ld.w      	r3, (r3, 0x5c)
180128c0:	4b70      	lsri      	r3, r3, 16
180128c2:	e9030007 	bez      	r3, 0x180128d0	// 180128d0 <TXW81X_xip_erase+0x90>
180128c6:	e9050004 	bez      	r5, 0x180128ce	// 180128ce <TXW81X_xip_erase+0x8e>
180128ca:	c0807420 	psrset      	ie
180128ce:	1497      	pop      	r4-r10, r15
180128d0:	e925ffff 	bnez      	r5, 0x180128ce	// 180128ce <TXW81X_xip_erase+0x8e>
180128d4:	c0006023 	mfcr      	r3, cr<0, 0>
180128d8:	c0807020 	psrclr      	ie
180128dc:	07f9      	br      	0x180128ce	// 180128ce <TXW81X_xip_erase+0x8e>
180128de:	0000      	.short	0x0000
180128e0:	20002028 	.long	0x20002028
180128e4:	20000098 	.long	0x20000098
180128e8:	2000202c 	.long	0x2000202c

180128ec <flash_erase_security_reg>:
180128ec:	14d0      	push      	r15
180128ee:	1423      	subi      	r14, r14, 12
180128f0:	b821      	st.w      	r1, (r14, 0x4)
180128f2:	3344      	movi      	r3, 68
180128f4:	3200      	movi      	r2, 0
180128f6:	6c7b      	mov      	r1, r14
180128f8:	dc6e0001 	st.b      	r3, (r14, 0x1)
180128fc:	e0001aaa 	bsr      	0x18015e50	// 18015e50 <sha1_vector+0x38>
18012900:	1403      	addi      	r14, r14, 12
18012902:	1490      	pop      	r15

18012904 <flash_program_security_reg>:
18012904:	14d0      	push      	r15
18012906:	1423      	subi      	r14, r14, 12
18012908:	3342      	movi      	r3, 66
1801290a:	dc6e0001 	st.b      	r3, (r14, 0x1)
1801290e:	b822      	st.w      	r1, (r14, 0x8)
18012910:	dc4e1001 	st.h      	r2, (r14, 0x2)
18012914:	6c7b      	mov      	r1, r14
18012916:	1066      	lrw      	r3, 0x2000202c	// 1801292c <flash_program_security_reg+0x28>
18012918:	3200      	movi      	r2, 0
1801291a:	9360      	ld.w      	r3, (r3, 0x0)
1801291c:	b861      	st.w      	r3, (r14, 0x4)
1801291e:	3300      	movi      	r3, 0
18012920:	dc6e0000 	st.b      	r3, (r14, 0x0)
18012924:	e0001aae 	bsr      	0x18015e80	// 18015e80 <sha1_vector+0x68>
18012928:	1403      	addi      	r14, r14, 12
1801292a:	1490      	pop      	r15
1801292c:	2000202c 	.long	0x2000202c

18012930 <flash_read_security_reg>:
18012930:	14d0      	push      	r15
18012932:	1423      	subi      	r14, r14, 12
18012934:	3348      	movi      	r3, 72
18012936:	dc6e0001 	st.b      	r3, (r14, 0x1)
1801293a:	b822      	st.w      	r1, (r14, 0x8)
1801293c:	dc4e1001 	st.h      	r2, (r14, 0x2)
18012940:	6c7b      	mov      	r1, r14
18012942:	1066      	lrw      	r3, 0x2000202c	// 18012958 <flash_read_security_reg+0x28>
18012944:	3200      	movi      	r2, 0
18012946:	9360      	ld.w      	r3, (r3, 0x0)
18012948:	b861      	st.w      	r3, (r14, 0x4)
1801294a:	3308      	movi      	r3, 8
1801294c:	dc6e0000 	st.b      	r3, (r14, 0x0)
18012950:	e0001aaa 	bsr      	0x18015ea4	// 18015ea4 <sha1_vector+0x8c>
18012954:	1403      	addi      	r14, r14, 12
18012956:	1490      	pop      	r15
18012958:	2000202c 	.long	0x2000202c

1801295c <hgspi_xip_ioctl>:
1801295c:	14d0      	push      	r15
1801295e:	1423      	subi      	r14, r14, 12
18012960:	290b      	subi      	r1, 12
18012962:	391a      	cmphsi      	r1, 27
18012964:	6f0b      	mov      	r12, r2
18012966:	6c8f      	mov      	r2, r3
18012968:	08fa      	bt      	0x18012b5c	// 18012b5c <hgspi_xip_ioctl+0x200>
1801296a:	1063      	lrw      	r3, 0x18018298	// 18012974 <hgspi_xip_ioctl+0x18>
1801296c:	d0230883 	ldr.w      	r3, (r3, r1 << 2)
18012970:	780c      	jmp      	r3
18012972:	0000      	.short	0x0000
18012974:	18018298 	.long	0x18018298
18012978:	137b      	lrw      	r3, 0x20002020	// 18012b64 <hgspi_xip_ioctl+0x208>
1801297a:	133c      	lrw      	r1, 0x2000202c	// 18012b68 <hgspi_xip_ioctl+0x20c>
1801297c:	8360      	ld.b      	r3, (r3, 0x0)
1801297e:	e9230031 	bnez      	r3, 0x180129e0	// 180129e0 <hgspi_xip_ioctl+0x84>
18012982:	137b      	lrw      	r3, 0x20000098	// 18012b6c <hgspi_xip_ioctl+0x210>
18012984:	9360      	ld.w      	r3, (r3, 0x0)
18012986:	9309      	ld.w      	r0, (r3, 0x24)
18012988:	6700      	cmphs      	r0, r12
1801298a:	081d      	bt      	0x180129c4	// 180129c4 <hgspi_xip_ioctl+0x68>
1801298c:	9369      	ld.w      	r3, (r3, 0x24)
1801298e:	c46c0083 	subu      	r3, r12, r3
18012992:	b160      	st.w      	r3, (r1, 0x0)
18012994:	e9220005 	bnez      	r2, 0x1801299e	// 1801299e <hgspi_xip_ioctl+0x42>
18012998:	1376      	lrw      	r3, 0x20002028	// 18012b70 <hgspi_xip_ioctl+0x214>
1801299a:	b340      	st.w      	r2, (r3, 0x0)
1801299c:	040b      	br      	0x180129b2	// 180129b2 <hgspi_xip_ioctl+0x56>
1801299e:	3a41      	cmpnei      	r2, 1
180129a0:	0ffc      	bf      	0x18012998	// 18012998 <hgspi_xip_ioctl+0x3c>
180129a2:	2a03      	subi      	r2, 4
180129a4:	3a01      	cmphsi      	r2, 2
180129a6:	0806      	bt      	0x180129b2	// 180129b2 <hgspi_xip_ioctl+0x56>
180129a8:	1372      	lrw      	r3, 0x20002028	// 18012b70 <hgspi_xip_ioctl+0x214>
180129aa:	3203      	movi      	r2, 3
180129ac:	b340      	st.w      	r2, (r3, 0x0)
180129ae:	dd812000 	st.w      	r12, (r1, 0x0)
180129b2:	ea234002 	movih      	r3, 16386
180129b6:	d8632062 	ld.w      	r3, (r3, 0x188)
180129ba:	e983000d 	blz      	r3, 0x180129d4	// 180129d4 <hgspi_xip_ioctl+0x78>
180129be:	3000      	movi      	r0, 0
180129c0:	1403      	addi      	r14, r14, 12
180129c2:	1490      	pop      	r15
180129c4:	2a03      	subi      	r2, 4
180129c6:	3a01      	cmphsi      	r2, 2
180129c8:	0ff0      	bf      	0x180129a8	// 180129a8 <hgspi_xip_ioctl+0x4c>
180129ca:	dd812000 	st.w      	r12, (r1, 0x0)
180129ce:	3203      	movi      	r2, 3
180129d0:	1368      	lrw      	r3, 0x20002028	// 18012b70 <hgspi_xip_ioctl+0x214>
180129d2:	07e4      	br      	0x1801299a	// 1801299a <hgspi_xip_ioctl+0x3e>
180129d4:	1347      	lrw      	r2, 0x20002028	// 18012b70 <hgspi_xip_ioctl+0x214>
180129d6:	9260      	ld.w      	r3, (r2, 0x0)
180129d8:	ec630004 	ori      	r3, r3, 4
180129dc:	b260      	st.w      	r3, (r2, 0x0)
180129de:	07f0      	br      	0x180129be	// 180129be <hgspi_xip_ioctl+0x62>
180129e0:	1365      	lrw      	r3, 0x20002024	// 18012b74 <hgspi_xip_ioctl+0x218>
180129e2:	3201      	movi      	r2, 1
180129e4:	9300      	ld.w      	r0, (r3, 0x0)
180129e6:	6302      	subu      	r12, r0
180129e8:	1362      	lrw      	r3, 0x20002028	// 18012b70 <hgspi_xip_ioctl+0x214>
180129ea:	dd812000 	st.w      	r12, (r1, 0x0)
180129ee:	b340      	st.w      	r2, (r3, 0x0)
180129f0:	07e7      	br      	0x180129be	// 180129be <hgspi_xip_ioctl+0x62>
180129f2:	127f      	lrw      	r3, 0x20000098	// 18012b6c <hgspi_xip_ioctl+0x210>
180129f4:	1321      	lrw      	r1, 0x20001928	// 18012b78 <hgspi_xip_ioctl+0x21c>
180129f6:	9340      	ld.w      	r2, (r3, 0x0)
180129f8:	9160      	ld.w      	r3, (r1, 0x0)
180129fa:	9121      	ld.w      	r1, (r1, 0x4)
180129fc:	6470      	cmphs      	r12, r1
180129fe:	0805      	bt      	0x18012a08	// 18012a08 <hgspi_xip_ioctl+0xac>
18012a00:	e4630fff 	addi      	r3, r3, 4096
18012a04:	670c      	cmphs      	r3, r12
18012a06:	0cab      	bf      	0x18012b5c	// 18012b5c <hgspi_xip_ioctl+0x200>
18012a08:	127a      	lrw      	r3, 0x20002028	// 18012b70 <hgspi_xip_ioctl+0x214>
18012a0a:	3102      	movi      	r1, 2
18012a0c:	b320      	st.w      	r1, (r3, 0x0)
18012a0e:	9229      	ld.w      	r1, (r2, 0x24)
18012a10:	6704      	cmphs      	r1, r12
18012a12:	0808      	bt      	0x18012a22	// 18012a22 <hgspi_xip_ioctl+0xc6>
18012a14:	3103      	movi      	r1, 3
18012a16:	b320      	st.w      	r1, (r3, 0x0)
18012a18:	9249      	ld.w      	r2, (r2, 0x24)
18012a1a:	c44c0082 	subu      	r2, r12, r2
18012a1e:	1233      	lrw      	r1, 0x2000202c	// 18012b68 <hgspi_xip_ioctl+0x20c>
18012a20:	b140      	st.w      	r2, (r1, 0x0)
18012a22:	ea224002 	movih      	r2, 16386
18012a26:	d8422062 	ld.w      	r2, (r2, 0x188)
18012a2a:	e9a20006 	bhsz      	r2, 0x18012a36	// 18012a36 <hgspi_xip_ioctl+0xda>
18012a2e:	9340      	ld.w      	r2, (r3, 0x0)
18012a30:	ec420004 	ori      	r2, r2, 4
18012a34:	b340      	st.w      	r2, (r3, 0x0)
18012a36:	1272      	lrw      	r3, 0x20000b9e	// 18012b7c <hgspi_xip_ioctl+0x220>
18012a38:	8360      	ld.b      	r3, (r3, 0x0)
18012a3a:	3b43      	cmpnei      	r3, 3
18012a3c:	0807      	bt      	0x18012a4a	// 18012a4a <hgspi_xip_ioctl+0xee>
18012a3e:	3180      	movi      	r1, 128
18012a40:	4125      	lsli      	r1, r1, 5
18012a42:	6c33      	mov      	r0, r12
18012a44:	e3fffefe 	bsr      	0x18012840	// 18012840 <TXW81X_xip_erase>
18012a48:	07bb      	br      	0x180129be	// 180129be <hgspi_xip_ioctl+0x62>
18012a4a:	3b44      	cmpnei      	r3, 4
18012a4c:	0bb9      	bt      	0x180129be	// 180129be <hgspi_xip_ioctl+0x62>
18012a4e:	3320      	movi      	r3, 32
18012a50:	dc6e0001 	st.b      	r3, (r14, 0x1)
18012a54:	dd8e2001 	st.w      	r12, (r14, 0x4)
18012a58:	3200      	movi      	r2, 0
18012a5a:	6c7b      	mov      	r1, r14
18012a5c:	e00019fa 	bsr      	0x18015e50	// 18015e50 <sha1_vector+0x38>
18012a60:	07af      	br      	0x180129be	// 180129be <hgspi_xip_ioctl+0x62>
18012a62:	1263      	lrw      	r3, 0x20000098	// 18012b6c <hgspi_xip_ioctl+0x210>
18012a64:	1225      	lrw      	r1, 0x20001928	// 18012b78 <hgspi_xip_ioctl+0x21c>
18012a66:	9340      	ld.w      	r2, (r3, 0x0)
18012a68:	9160      	ld.w      	r3, (r1, 0x0)
18012a6a:	9121      	ld.w      	r1, (r1, 0x4)
18012a6c:	6470      	cmphs      	r12, r1
18012a6e:	0806      	bt      	0x18012a7a	// 18012a7a <hgspi_xip_ioctl+0x11e>
18012a70:	3180      	movi      	r1, 128
18012a72:	4129      	lsli      	r1, r1, 9
18012a74:	60c4      	addu      	r3, r1
18012a76:	670c      	cmphs      	r3, r12
18012a78:	0c72      	bf      	0x18012b5c	// 18012b5c <hgspi_xip_ioctl+0x200>
18012a7a:	117e      	lrw      	r3, 0x20002028	// 18012b70 <hgspi_xip_ioctl+0x214>
18012a7c:	3102      	movi      	r1, 2
18012a7e:	b320      	st.w      	r1, (r3, 0x0)
18012a80:	9229      	ld.w      	r1, (r2, 0x24)
18012a82:	6704      	cmphs      	r1, r12
18012a84:	0808      	bt      	0x18012a94	// 18012a94 <hgspi_xip_ioctl+0x138>
18012a86:	3103      	movi      	r1, 3
18012a88:	b320      	st.w      	r1, (r3, 0x0)
18012a8a:	9249      	ld.w      	r2, (r2, 0x24)
18012a8c:	c44c0082 	subu      	r2, r12, r2
18012a90:	1136      	lrw      	r1, 0x2000202c	// 18012b68 <hgspi_xip_ioctl+0x20c>
18012a92:	b140      	st.w      	r2, (r1, 0x0)
18012a94:	ea224002 	movih      	r2, 16386
18012a98:	d8422062 	ld.w      	r2, (r2, 0x188)
18012a9c:	e9a20006 	bhsz      	r2, 0x18012aa8	// 18012aa8 <hgspi_xip_ioctl+0x14c>
18012aa0:	9340      	ld.w      	r2, (r3, 0x0)
18012aa2:	ec420004 	ori      	r2, r2, 4
18012aa6:	b340      	st.w      	r2, (r3, 0x0)
18012aa8:	1175      	lrw      	r3, 0x20000b9e	// 18012b7c <hgspi_xip_ioctl+0x220>
18012aaa:	8360      	ld.b      	r3, (r3, 0x0)
18012aac:	3b43      	cmpnei      	r3, 3
18012aae:	0804      	bt      	0x18012ab6	// 18012ab6 <hgspi_xip_ioctl+0x15a>
18012ab0:	3180      	movi      	r1, 128
18012ab2:	4129      	lsli      	r1, r1, 9
18012ab4:	07c7      	br      	0x18012a42	// 18012a42 <hgspi_xip_ioctl+0xe6>
18012ab6:	3b44      	cmpnei      	r3, 4
18012ab8:	0b83      	bt      	0x180129be	// 180129be <hgspi_xip_ioctl+0x62>
18012aba:	3300      	movi      	r3, 0
18012abc:	2b27      	subi      	r3, 40
18012abe:	07c9      	br      	0x18012a50	// 18012a50 <hgspi_xip_ioctl+0xf4>
18012ac0:	6c73      	mov      	r1, r12
18012ac2:	e3ffff15 	bsr      	0x180128ec	// 180128ec <flash_erase_security_reg>
18012ac6:	077c      	br      	0x180129be	// 180129be <hgspi_xip_ioctl+0x62>
18012ac8:	6c73      	mov      	r1, r12
18012aca:	e3ffff1d 	bsr      	0x18012904	// 18012904 <flash_program_security_reg>
18012ace:	0778      	br      	0x180129be	// 180129be <hgspi_xip_ioctl+0x62>
18012ad0:	6c73      	mov      	r1, r12
18012ad2:	e3ffff2f 	bsr      	0x18012930	// 18012930 <flash_read_security_reg>
18012ad6:	0774      	br      	0x180129be	// 180129be <hgspi_xip_ioctl+0x62>
18012ad8:	6c73      	mov      	r1, r12
18012ada:	e00019e5 	bsr      	0x18015ea4	// 18015ea4 <sha1_vector+0x8c>
18012ade:	0770      	br      	0x180129be	// 180129be <hgspi_xip_ioctl+0x62>
18012ae0:	6c73      	mov      	r1, r12
18012ae2:	e00019cf 	bsr      	0x18015e80	// 18015e80 <sha1_vector+0x68>
18012ae6:	076c      	br      	0x180129be	// 180129be <hgspi_xip_ioctl+0x62>
18012ae8:	6c73      	mov      	r1, r12
18012aea:	07b9      	br      	0x18012a5c	// 18012a5c <hgspi_xip_ioctl+0x100>
18012aec:	1162      	lrw      	r3, 0x20002024	// 18012b74 <hgspi_xip_ioctl+0x218>
18012aee:	dd832000 	st.w      	r12, (r3, 0x0)
18012af2:	0766      	br      	0x180129be	// 180129be <hgspi_xip_ioctl+0x62>
18012af4:	107c      	lrw      	r3, 0x20002020	// 18012b64 <hgspi_xip_ioctl+0x208>
18012af6:	dd830000 	st.b      	r12, (r3, 0x0)
18012afa:	0762      	br      	0x180129be	// 180129be <hgspi_xip_ioctl+0x62>
18012afc:	107c      	lrw      	r3, 0x20000098	// 18012b6c <hgspi_xip_ioctl+0x210>
18012afe:	9340      	ld.w      	r2, (r3, 0x0)
18012b00:	c0006023 	mfcr      	r3, cr<0, 0>
18012b04:	c0807020 	psrclr      	ie
18012b08:	e4632040 	andi      	r3, r3, 64
18012b0c:	dd822009 	st.w      	r12, (r2, 0x24)
18012b10:	e903ff57 	bez      	r3, 0x180129be	// 180129be <hgspi_xip_ioctl+0x62>
18012b14:	c0807420 	psrset      	ie
18012b18:	0753      	br      	0x180129be	// 180129be <hgspi_xip_ioctl+0x62>
18012b1a:	c0006022 	mfcr      	r2, cr<0, 0>
18012b1e:	c0807020 	psrclr      	ie
18012b22:	ea234002 	movih      	r3, 16386
18012b26:	e4422040 	andi      	r2, r2, 64
18012b2a:	d8232062 	ld.w      	r1, (r3, 0x188)
18012b2e:	e90c0008 	bez      	r12, 0x18012b3e	// 18012b3e <hgspi_xip_ioctl+0x1e2>
18012b32:	39bf      	bseti      	r1, 31
18012b34:	dc232062 	st.w      	r1, (r3, 0x188)
18012b38:	e922ffee 	bnez      	r2, 0x18012b14	// 18012b14 <hgspi_xip_ioctl+0x1b8>
18012b3c:	0741      	br      	0x180129be	// 180129be <hgspi_xip_ioctl+0x62>
18012b3e:	c40157c1 	zext      	r1, r1, 30, 0
18012b42:	07f9      	br      	0x18012b34	// 18012b34 <hgspi_xip_ioctl+0x1d8>
18012b44:	106a      	lrw      	r3, 0x20000098	// 18012b6c <hgspi_xip_ioctl+0x210>
18012b46:	9360      	ld.w      	r3, (r3, 0x0)
18012b48:	9349      	ld.w      	r2, (r3, 0x24)
18012b4a:	6708      	cmphs      	r2, r12
18012b4c:	0b39      	bt      	0x180129be	// 180129be <hgspi_xip_ioctl+0x62>
18012b4e:	9309      	ld.w      	r0, (r3, 0x24)
18012b50:	33c0      	movi      	r3, 192
18012b52:	c40c0080 	subu      	r0, r12, r0
18012b56:	4375      	lsli      	r3, r3, 21
18012b58:	600c      	addu      	r0, r3
18012b5a:	0733      	br      	0x180129c0	// 180129c0 <hgspi_xip_ioctl+0x64>
18012b5c:	ea00020b 	movi      	r0, 523
18012b60:	6c02      	nor      	r0, r0
18012b62:	072f      	br      	0x180129c0	// 180129c0 <hgspi_xip_ioctl+0x64>
18012b64:	20002020 	.long	0x20002020
18012b68:	2000202c 	.long	0x2000202c
18012b6c:	20000098 	.long	0x20000098
18012b70:	20002028 	.long	0x20002028
18012b74:	20002024 	.long	0x20002024
18012b78:	20001928 	.long	0x20001928
18012b7c:	20000b9e 	.long	0x20000b9e

18012b80 <hgspi_pre_init>:
18012b80:	14d4      	push      	r4-r7, r15
18012b82:	1421      	subi      	r14, r14, 4
18012b84:	116b      	lrw      	r3, 0x20000098	// 18012c30 <hgspi_pre_init+0xb0>
18012b86:	114c      	lrw      	r2, 0x20001928	// 18012c34 <hgspi_pre_init+0xb4>
18012b88:	9380      	ld.w      	r4, (r3, 0x0)
18012b8a:	9261      	ld.w      	r3, (r2, 0x4)
18012b8c:	e9230014 	bnez      	r3, 0x18012bb4	// 18012bb4 <hgspi_pre_init+0x34>
18012b90:	9260      	ld.w      	r3, (r2, 0x0)
18012b92:	e9230011 	bnez      	r3, 0x18012bb4	// 18012bb4 <hgspi_pre_init+0x34>
18012b96:	9469      	ld.w      	r3, (r4, 0x24)
18012b98:	1128      	lrw      	r1, 0x1801ab95	// 18012c38 <hgspi_pre_init+0xb8>
18012b9a:	60c4      	addu      	r3, r1
18012b9c:	1128      	lrw      	r1, 0x18000000	// 18012c3c <hgspi_pre_init+0xbc>
18012b9e:	60c6      	subu      	r3, r1
18012ba0:	ea0101ff 	movi      	r1, 511
18012ba4:	6c46      	nor      	r1, r1
18012ba6:	68c4      	and      	r3, r1
18012ba8:	b261      	st.w      	r3, (r2, 0x4)
18012baa:	ea21ffff 	movih      	r1, 65535
18012bae:	9469      	ld.w      	r3, (r4, 0x24)
18012bb0:	68c4      	and      	r3, r1
18012bb2:	b260      	st.w      	r3, (r2, 0x0)
18012bb4:	ea22ffe1 	movih      	r2, 65505
18012bb8:	9465      	ld.w      	r3, (r4, 0x14)
18012bba:	2a00      	subi      	r2, 1
18012bbc:	68c8      	and      	r3, r2
18012bbe:	3700      	movi      	r7, 0
18012bc0:	b465      	st.w      	r3, (r4, 0x14)
18012bc2:	2f00      	subi      	r7, 1
18012bc4:	3300      	movi      	r3, 0
18012bc6:	3602      	movi      	r6, 2
18012bc8:	b4f5      	st.w      	r7, (r4, 0x54)
18012bca:	b474      	st.w      	r3, (r4, 0x50)
18012bcc:	b4d6      	st.w      	r6, (r4, 0x58)
18012bce:	b860      	st.w      	r3, (r14, 0x0)
18012bd0:	e3ffeb5a 	bsr      	0x18010284	// 18010284 <get_flash_cap>
18012bd4:	3280      	movi      	r2, 128
18012bd6:	4250      	lsli      	r2, r2, 16
18012bd8:	6408      	cmphs      	r2, r0
18012bda:	6d43      	mov      	r5, r0
18012bdc:	1059      	lrw      	r2, 0x20000b9e	// 18012c40 <hgspi_pre_init+0xc0>
18012bde:	9860      	ld.w      	r3, (r14, 0x0)
18012be0:	0c16      	bf      	0x18012c0c	// 18012c0c <hgspi_pre_init+0x8c>
18012be2:	3103      	movi      	r1, 3
18012be4:	a220      	st.b      	r1, (r2, 0x0)
18012be6:	6c13      	mov      	r0, r4
18012be8:	6c9b      	mov      	r2, r6
18012bea:	6c4f      	mov      	r1, r3
18012bec:	e0001968 	bsr      	0x18015ebc	// 18015ebc <sha1_vector+0xa4>
18012bf0:	3d40      	cmpnei      	r5, 0
18012bf2:	c4a70c20 	incf      	r5, r7, 0
18012bf6:	1074      	lrw      	r3, 0x2000201c	// 18012c44 <hgspi_pre_init+0xc4>
18012bf8:	3101      	movi      	r1, 1
18012bfa:	b3a0      	st.w      	r5, (r3, 0x0)
18012bfc:	c6e05023 	bmaski      	r3, 24
18012c00:	b471      	st.w      	r3, (r4, 0x44)
18012c02:	6c13      	mov      	r0, r4
18012c04:	e3ff9106 	bsr      	0x18004e10	// 18004e10 <hg_qspi_flash_xip_mode>
18012c08:	1401      	addi      	r14, r14, 4
18012c0a:	1494      	pop      	r4-r7, r15
18012c0c:	3180      	movi      	r1, 128
18012c0e:	4131      	lsli      	r1, r1, 17
18012c10:	6404      	cmphs      	r1, r0
18012c12:	0c09      	bf      	0x18012c24	// 18012c24 <hgspi_pre_init+0xa4>
18012c14:	3103      	movi      	r1, 3
18012c16:	a220      	st.b      	r1, (r2, 0x0)
18012c18:	6c9b      	mov      	r2, r6
18012c1a:	3101      	movi      	r1, 1
18012c1c:	6c13      	mov      	r0, r4
18012c1e:	e000194f 	bsr      	0x18015ebc	// 18015ebc <sha1_vector+0xa4>
18012c22:	07ea      	br      	0x18012bf6	// 18012bf6 <hgspi_pre_init+0x76>
18012c24:	3304      	movi      	r3, 4
18012c26:	a260      	st.b      	r3, (r2, 0x0)
18012c28:	6c5b      	mov      	r1, r6
18012c2a:	33b7      	movi      	r3, 183
18012c2c:	3203      	movi      	r2, 3
18012c2e:	07f7      	br      	0x18012c1c	// 18012c1c <hgspi_pre_init+0x9c>
18012c30:	20000098 	.long	0x20000098
18012c34:	20001928 	.long	0x20001928
18012c38:	1801ab95 	.long	0x1801ab95
18012c3c:	18000000 	.long	0x18000000
18012c40:	20000b9e 	.long	0x20000b9e
18012c44:	2000201c 	.long	0x2000201c

18012c48 <hgspi_xip_attach>:
18012c48:	14d0      	push      	r15
18012c4a:	1422      	subi      	r14, r14, 8
18012c4c:	b801      	st.w      	r0, (r14, 0x4)
18012c4e:	b820      	st.w      	r1, (r14, 0x0)
18012c50:	e3ffff98 	bsr      	0x18012b80	// 18012b80 <hgspi_pre_init>
18012c54:	9820      	ld.w      	r1, (r14, 0x0)
18012c56:	9801      	ld.w      	r0, (r14, 0x4)
18012c58:	1064      	lrw      	r3, 0x18018340	// 18012c68 <hgspi_xip_attach+0x20>
18012c5a:	b162      	st.w      	r3, (r1, 0x8)
18012c5c:	e3ff8224 	bsr      	0x180030a4	// 180030a4 <dev_register>
18012c60:	3000      	movi      	r0, 0
18012c62:	1402      	addi      	r14, r14, 8
18012c64:	1490      	pop      	r15
18012c66:	0000      	.short	0x0000
18012c68:	18018340 	.long	0x18018340

18012c6c <hg_audio_v0_attach>:
18012c6c:	14d2      	push      	r4-r5, r15
18012c6e:	6d43      	mov      	r5, r0
18012c70:	6d07      	mov      	r4, r1
18012c72:	e3ffec67 	bsr      	0x18010540	// 18010540 <sysctrl_efuse_audio_en>
18012c76:	7400      	zextb      	r0, r0
18012c78:	e900000a 	bez      	r0, 0x18012c8c	// 18012c8c <hg_audio_v0_attach+0x20>
18012c7c:	1014      	lrw      	r0, 0x180183ac	// 18012ccc <hg_audio_v0_attach+0x60>
18012c7e:	e3ffcf23 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18012c82:	3300      	movi      	r3, 0
18012c84:	b462      	st.w      	r3, (r4, 0x8)
18012c86:	3000      	movi      	r0, 0
18012c88:	2800      	subi      	r0, 1
18012c8a:	0412      	br      	0x18012cae	// 18012cae <hg_audio_v0_attach+0x42>
18012c8c:	8c71      	ld.h      	r3, (r4, 0x22)
18012c8e:	3b42      	cmpnei      	r3, 2
18012c90:	0c10      	bf      	0x18012cb0	// 18012cb0 <hg_audio_v0_attach+0x44>
18012c92:	3b50      	cmpnei      	r3, 16
18012c94:	0c13      	bf      	0x18012cba	// 18012cba <hg_audio_v0_attach+0x4e>
18012c96:	3b41      	cmpnei      	r3, 1
18012c98:	0815      	bt      	0x18012cc2	// 18012cc2 <hg_audio_v0_attach+0x56>
18012c9a:	6c13      	mov      	r0, r4
18012c9c:	e0000066 	bsr      	0x18012d68	// 18012d68 <hg_auadc_v0_init>
18012ca0:	106c      	lrw      	r3, 0x18018360	// 18012cd0 <hg_audio_v0_attach+0x64>
18012ca2:	b462      	st.w      	r3, (r4, 0x8)
18012ca4:	6c53      	mov      	r1, r4
18012ca6:	6c17      	mov      	r0, r5
18012ca8:	e3ff81fe 	bsr      	0x180030a4	// 180030a4 <dev_register>
18012cac:	3000      	movi      	r0, 0
18012cae:	1492      	pop      	r4-r5, r15
18012cb0:	6c13      	mov      	r0, r4
18012cb2:	e00003ff 	bsr      	0x180134b0	// 180134b0 <hg_audac_v0_init>
18012cb6:	1068      	lrw      	r3, 0x18018394	// 18012cd4 <hg_audio_v0_attach+0x68>
18012cb8:	07f5      	br      	0x18012ca2	// 18012ca2 <hg_audio_v0_attach+0x36>
18012cba:	e000023d 	bsr      	0x18013134	// 18013134 <hg_aualaw_v0_init>
18012cbe:	1067      	lrw      	r3, 0x18018378	// 18012cd8 <hg_audio_v0_attach+0x6c>
18012cc0:	07f1      	br      	0x18012ca2	// 18012ca2 <hg_audio_v0_attach+0x36>
18012cc2:	6c57      	mov      	r1, r5
18012cc4:	1006      	lrw      	r0, 0x180183c4	// 18012cdc <hg_audio_v0_attach+0x70>
18012cc6:	e3ffceff 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18012cca:	07de      	br      	0x18012c86	// 18012c86 <hg_audio_v0_attach+0x1a>
18012ccc:	180183ac 	.long	0x180183ac
18012cd0:	18018360 	.long	0x18018360
18012cd4:	18018394 	.long	0x18018394
18012cd8:	18018378 	.long	0x18018378
18012cdc:	180183c4 	.long	0x180183c4

18012ce0 <hg_auadc_v0_irq_handler>:
18012ce0:	14d2      	push      	r4-r5, r15
18012ce2:	107c      	lrw      	r3, 0x20002030	// 18012d50 <hg_auadc_v0_irq_handler+0x70>
18012ce4:	6d4f      	mov      	r5, r3
18012ce6:	9340      	ld.w      	r2, (r3, 0x0)
18012ce8:	9283      	ld.w      	r4, (r2, 0xc)
18012cea:	9429      	ld.w      	r1, (r4, 0x24)
18012cec:	e4212008 	andi      	r1, r1, 8
18012cf0:	e901000f 	bez      	r1, 0x18012d0e	// 18012d0e <hg_auadc_v0_irq_handler+0x2e>
18012cf4:	946a      	ld.w      	r3, (r4, 0x28)
18012cf6:	e4632008 	andi      	r3, r3, 8
18012cfa:	e903000a 	bez      	r3, 0x18012d0e	// 18012d0e <hg_auadc_v0_irq_handler+0x2e>
18012cfe:	3308      	movi      	r3, 8
18012d00:	b469      	st.w      	r3, (r4, 0x24)
18012d02:	9266      	ld.w      	r3, (r2, 0x18)
18012d04:	e9030005 	bez      	r3, 0x18012d0e	// 18012d0e <hg_auadc_v0_irq_handler+0x2e>
18012d08:	9227      	ld.w      	r1, (r2, 0x1c)
18012d0a:	3002      	movi      	r0, 2
18012d0c:	7bcd      	jsr      	r3
18012d0e:	9469      	ld.w      	r3, (r4, 0x24)
18012d10:	e4632010 	andi      	r3, r3, 16
18012d14:	e9030010 	bez      	r3, 0x18012d34	// 18012d34 <hg_auadc_v0_irq_handler+0x54>
18012d18:	946a      	ld.w      	r3, (r4, 0x28)
18012d1a:	e4632010 	andi      	r3, r3, 16
18012d1e:	e903000b 	bez      	r3, 0x18012d34	// 18012d34 <hg_auadc_v0_irq_handler+0x54>
18012d22:	9540      	ld.w      	r2, (r5, 0x0)
18012d24:	3310      	movi      	r3, 16
18012d26:	b469      	st.w      	r3, (r4, 0x24)
18012d28:	9266      	ld.w      	r3, (r2, 0x18)
18012d2a:	e9030005 	bez      	r3, 0x18012d34	// 18012d34 <hg_auadc_v0_irq_handler+0x54>
18012d2e:	9227      	ld.w      	r1, (r2, 0x1c)
18012d30:	3001      	movi      	r0, 1
18012d32:	7bcd      	jsr      	r3
18012d34:	9469      	ld.w      	r3, (r4, 0x24)
18012d36:	e4632020 	andi      	r3, r3, 32
18012d3a:	e9030009 	bez      	r3, 0x18012d4c	// 18012d4c <hg_auadc_v0_irq_handler+0x6c>
18012d3e:	946a      	ld.w      	r3, (r4, 0x28)
18012d40:	e4632020 	andi      	r3, r3, 32
18012d44:	e9030004 	bez      	r3, 0x18012d4c	// 18012d4c <hg_auadc_v0_irq_handler+0x6c>
18012d48:	3320      	movi      	r3, 32
18012d4a:	b469      	st.w      	r3, (r4, 0x24)
18012d4c:	1492      	pop      	r4-r5, r15
18012d4e:	0000      	.short	0x0000
18012d50:	20002030 	.long	0x20002030

18012d54 <hg_auadc_v0_set_digital_gain>:
18012d54:	9060      	ld.w      	r3, (r0, 0x0)
18012d56:	4138      	lsli      	r1, r1, 24
18012d58:	9343      	ld.w      	r2, (r3, 0xc)
18012d5a:	3000      	movi      	r0, 0
18012d5c:	926f      	ld.w      	r3, (r2, 0x3c)
18012d5e:	c40356e3 	zext      	r3, r3, 23, 0
18012d62:	6cc4      	or      	r3, r1
18012d64:	b26f      	st.w      	r3, (r2, 0x3c)
18012d66:	783c      	jmp      	r15

18012d68 <hg_auadc_v0_init>:
18012d68:	14d1      	push      	r4, r15
18012d6a:	1422      	subi      	r14, r14, 8
18012d6c:	105c      	lrw      	r2, 0x20002030	// 18012ddc <hg_auadc_v0_init+0x74>
18012d6e:	3300      	movi      	r3, 0
18012d70:	b260      	st.w      	r3, (r2, 0x0)
18012d72:	b261      	st.w      	r3, (r2, 0x4)
18012d74:	e9000031 	bez      	r0, 0x18012dd6	// 18012dd6 <hg_auadc_v0_init+0x6e>
18012d78:	9085      	ld.w      	r4, (r0, 0x14)
18012d7a:	b200      	st.w      	r0, (r2, 0x0)
18012d7c:	b860      	st.w      	r3, (r14, 0x0)
18012d7e:	b861      	st.w      	r3, (r14, 0x4)
18012d80:	8460      	ld.b      	r3, (r4, 0x0)
18012d82:	e4632020 	andi      	r3, r3, 32
18012d86:	e9230025 	bnez      	r3, 0x18012dd0	// 18012dd0 <hg_auadc_v0_init+0x68>
18012d8a:	e3ffebad 	bsr      	0x180104e4	// 180104e4 <sysctrl_efuse_aubias_sel_vref100_vdd>
18012d8e:	d86e0004 	ld.b      	r3, (r14, 0x4)
18012d92:	c4605c60 	ins      	r3, r0, 3, 0
18012d96:	dc6e0004 	st.b      	r3, (r14, 0x4)
18012d9a:	e3ffebb3 	bsr      	0x18010500	// 18010500 <sysctrl_efuse_aubias_sel_vcmau_vdd>
18012d9e:	d86e0004 	ld.b      	r3, (r14, 0x4)
18012da2:	c4605c64 	ins      	r3, r0, 7, 4
18012da6:	dc6e0004 	st.b      	r3, (r14, 0x4)
18012daa:	e3ffebbd 	bsr      	0x18010524	// 18010524 <sysctrl_efuse_aubias_sel_vcc27au_vdd>
18012dae:	d86e0005 	ld.b      	r3, (r14, 0x5)
18012db2:	c4605c40 	ins      	r3, r0, 2, 0
18012db6:	6c3b      	mov      	r0, r14
18012db8:	dc6e0005 	st.b      	r3, (r14, 0x5)
18012dbc:	e000052c 	bsr      	0x18013814	// 18013814 <audio_ana_config_power_on>
18012dc0:	8460      	ld.b      	r3, (r4, 0x0)
18012dc2:	3201      	movi      	r2, 1
18012dc4:	c4625c05 	ins      	r3, r2, 5, 5
18012dc8:	a460      	st.b      	r3, (r4, 0x0)
18012dca:	1006      	lrw      	r0, 0x180183ef	// 18012de0 <hg_auadc_v0_init+0x78>
18012dcc:	e3ffce7c 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18012dd0:	3000      	movi      	r0, 0
18012dd2:	1402      	addi      	r14, r14, 8
18012dd4:	1491      	pop      	r4, r15
18012dd6:	3000      	movi      	r0, 0
18012dd8:	2800      	subi      	r0, 1
18012dda:	07fc      	br      	0x18012dd2	// 18012dd2 <hg_auadc_v0_init+0x6a>
18012ddc:	20002030 	.long	0x20002030
18012de0:	180183ef 	.long	0x180183ef

18012de4 <hg_auadc_v0_open>:
18012de4:	14d4      	push      	r4-r7, r15
18012de6:	1422      	subi      	r14, r14, 8
18012de8:	119c      	lrw      	r4, 0x20002030	// 18012ed8 <hg_auadc_v0_open+0xf4>
18012dea:	90c3      	ld.w      	r6, (r0, 0xc)
18012dec:	8467      	ld.b      	r3, (r4, 0x7)
18012dee:	e4632002 	andi      	r3, r3, 2
18012df2:	b400      	st.w      	r0, (r4, 0x0)
18012df4:	90e5      	ld.w      	r7, (r0, 0x14)
18012df6:	e9230007 	bnez      	r3, 0x18012e04	// 18012e04 <hg_auadc_v0_open+0x20>
18012dfa:	e9270008 	bnez      	r7, 0x18012e0a	// 18012e0a <hg_auadc_v0_open+0x26>
18012dfe:	1118      	lrw      	r0, 0x18018401	// 18012edc <hg_auadc_v0_open+0xf8>
18012e00:	e3ffce62 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18012e04:	3000      	movi      	r0, 0
18012e06:	2800      	subi      	r0, 1
18012e08:	045b      	br      	0x18012ebe	// 18012ebe <hg_auadc_v0_open+0xda>
18012e0a:	3941      	cmpnei      	r1, 1
18012e0c:	0c0e      	bf      	0x18012e28	// 18012e28 <hg_auadc_v0_open+0x44>
18012e0e:	3940      	cmpnei      	r1, 0
18012e10:	0c07      	bf      	0x18012e1e	// 18012e1e <hg_auadc_v0_open+0x3a>
18012e12:	3942      	cmpnei      	r1, 2
18012e14:	0c57      	bf      	0x18012ec2	// 18012ec2 <hg_auadc_v0_open+0xde>
18012e16:	3943      	cmpnei      	r1, 3
18012e18:	0c5b      	bf      	0x18012ece	// 18012ece <hg_auadc_v0_open+0xea>
18012e1a:	1112      	lrw      	r0, 0x1801843f	// 18012ee0 <hg_auadc_v0_open+0xfc>
18012e1c:	07f2      	br      	0x18012e00	// 18012e00 <hg_auadc_v0_open+0x1c>
18012e1e:	3304      	movi      	r3, 4
18012e20:	a464      	st.b      	r3, (r4, 0x4)
18012e22:	3302      	movi      	r3, 2
18012e24:	a465      	st.b      	r3, (r4, 0x5)
18012e26:	0452      	br      	0x18012eca	// 18012eca <hg_auadc_v0_open+0xe6>
18012e28:	3304      	movi      	r3, 4
18012e2a:	a464      	st.b      	r3, (r4, 0x4)
18012e2c:	3302      	movi      	r3, 2
18012e2e:	a465      	st.b      	r3, (r4, 0x5)
18012e30:	a426      	st.b      	r1, (r4, 0x6)
18012e32:	3903      	cmphsi      	r1, 4
18012e34:	3500      	movi      	r5, 0
18012e36:	b8a1      	st.w      	r5, (r14, 0x4)
18012e38:	0be6      	bt      	0x18012e04	// 18012e04 <hg_auadc_v0_open+0x20>
18012e3a:	116b      	lrw      	r3, 0x180183eb	// 18012ee4 <hg_auadc_v0_open+0x100>
18012e3c:	d0231022 	ldr.bs      	r2, (r3, r1 << 0)
18012e40:	3300      	movi      	r3, 0
18012e42:	2b00      	subi      	r3, 1
18012e44:	64ca      	cmpne      	r2, r3
18012e46:	0fdf      	bf      	0x18012e04	// 18012e04 <hg_auadc_v0_open+0x20>
18012e48:	3302      	movi      	r3, 2
18012e4a:	dc4e1000 	st.h      	r2, (r14, 0x0)
18012e4e:	dc6e1001 	st.h      	r3, (r14, 0x2)
18012e52:	8760      	ld.b      	r3, (r7, 0x0)
18012e54:	e4632020 	andi      	r3, r3, 32
18012e58:	e903003e 	bez      	r3, 0x18012ed4	// 18012ed4 <hg_auadc_v0_open+0xf0>
18012e5c:	6c3b      	mov      	r0, r14
18012e5e:	e0000573 	bsr      	0x18013944	// 18013944 <audio_ana_config_adc_on>
18012e62:	1102      	lrw      	r0, 0x18018415	// 18012ee8 <hg_auadc_v0_open+0x104>
18012e64:	e3ffce30 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18012e68:	ea214002 	movih      	r1, 16386
18012e6c:	8464      	ld.b      	r3, (r4, 0x4)
18012e6e:	9155      	ld.w      	r2, (r1, 0x54)
18012e70:	ea0007c0 	movi      	r0, 1984
18012e74:	6c02      	nor      	r0, r0
18012e76:	4366      	lsli      	r3, r3, 6
18012e78:	6880      	and      	r2, r0
18012e7a:	e46327c0 	andi      	r3, r3, 1984
18012e7e:	6cc8      	or      	r3, r2
18012e80:	b175      	st.w      	r3, (r1, 0x54)
18012e82:	8465      	ld.b      	r3, (r4, 0x5)
18012e84:	8426      	ld.b      	r1, (r4, 0x6)
18012e86:	4362      	lsli      	r3, r3, 2
18012e88:	e4212003 	andi      	r1, r1, 3
18012e8c:	e463200c 	andi      	r3, r3, 12
18012e90:	6cc4      	or      	r3, r1
18012e92:	3100      	movi      	r1, 0
18012e94:	964f      	ld.w      	r2, (r6, 0x3c)
18012e96:	290f      	subi      	r1, 16
18012e98:	6884      	and      	r2, r1
18012e9a:	6cc8      	or      	r3, r2
18012e9c:	b66f      	st.w      	r3, (r6, 0x3c)
18012e9e:	9660      	ld.w      	r3, (r6, 0x0)
18012ea0:	ec630008 	ori      	r3, r3, 8
18012ea4:	b660      	st.w      	r3, (r6, 0x0)
18012ea6:	8467      	ld.b      	r3, (r4, 0x7)
18012ea8:	3201      	movi      	r2, 1
18012eaa:	c4625c01 	ins      	r3, r2, 1, 1
18012eae:	c4655c00 	ins      	r3, r5, 0, 0
18012eb2:	a467      	st.b      	r3, (r4, 0x7)
18012eb4:	8760      	ld.b      	r3, (r7, 0x0)
18012eb6:	c4625c00 	ins      	r3, r2, 0, 0
18012eba:	a760      	st.b      	r3, (r7, 0x0)
18012ebc:	6c17      	mov      	r0, r5
18012ebe:	1402      	addi      	r14, r14, 8
18012ec0:	1494      	pop      	r4-r7, r15
18012ec2:	3209      	movi      	r2, 9
18012ec4:	a444      	st.b      	r2, (r4, 0x4)
18012ec6:	3201      	movi      	r2, 1
18012ec8:	a445      	st.b      	r2, (r4, 0x5)
18012eca:	a466      	st.b      	r3, (r4, 0x6)
18012ecc:	07b3      	br      	0x18012e32	// 18012e32 <hg_auadc_v0_open+0x4e>
18012ece:	3209      	movi      	r2, 9
18012ed0:	a444      	st.b      	r2, (r4, 0x4)
18012ed2:	07a9      	br      	0x18012e24	// 18012e24 <hg_auadc_v0_open+0x40>
18012ed4:	1006      	lrw      	r0, 0x18018427	// 18012eec <hg_auadc_v0_open+0x108>
18012ed6:	0795      	br      	0x18012e00	// 18012e00 <hg_auadc_v0_open+0x1c>
18012ed8:	20002030 	.long	0x20002030
18012edc:	18018401 	.long	0x18018401
18012ee0:	1801843f 	.long	0x1801843f
18012ee4:	180183eb 	.long	0x180183eb
18012ee8:	18018415 	.long	0x18018415
18012eec:	18018427 	.long	0x18018427

18012ef0 <hg_auadc_v0_close>:
18012ef0:	104b      	lrw      	r2, 0x20002030	// 18012f1c <hg_auadc_v0_close+0x2c>
18012ef2:	9260      	ld.w      	r3, (r2, 0x0)
18012ef4:	9325      	ld.w      	r1, (r3, 0x14)
18012ef6:	8267      	ld.b      	r3, (r2, 0x7)
18012ef8:	e4032002 	andi      	r0, r3, 2
18012efc:	e900000d 	bez      	r0, 0x18012f16	// 18012f16 <hg_auadc_v0_close+0x26>
18012f00:	3000      	movi      	r0, 0
18012f02:	e46320fd 	andi      	r3, r3, 253
18012f06:	c4605c00 	ins      	r3, r0, 0, 0
18012f0a:	a267      	st.b      	r3, (r2, 0x7)
18012f0c:	8160      	ld.b      	r3, (r1, 0x0)
18012f0e:	c4605c00 	ins      	r3, r0, 0, 0
18012f12:	a160      	st.b      	r3, (r1, 0x0)
18012f14:	783c      	jmp      	r15
18012f16:	3000      	movi      	r0, 0
18012f18:	2800      	subi      	r0, 1
18012f1a:	07fd      	br      	0x18012f14	// 18012f14 <hg_auadc_v0_close+0x24>
18012f1c:	20002030 	.long	0x20002030

18012f20 <hg_auadc_v0_read>:
18012f20:	14d1      	push      	r4, r15
18012f22:	ea8c0025 	lrw      	r12, 0x20002030	// 18012fb4 <hg_auadc_v0_read+0x94>
18012f26:	d9ac0007 	ld.b      	r13, (r12, 0x7)
18012f2a:	d86c2000 	ld.w      	r3, (r12, 0x0)
18012f2e:	e40d2002 	andi      	r0, r13, 2
18012f32:	9363      	ld.w      	r3, (r3, 0xc)
18012f34:	e9000007 	bez      	r0, 0x18012f42	// 18012f42 <hg_auadc_v0_read+0x22>
18012f38:	e9210008 	bnez      	r1, 0x18012f48	// 18012f48 <hg_auadc_v0_read+0x28>
18012f3c:	101f      	lrw      	r0, 0x18018462	// 18012fb8 <hg_auadc_v0_read+0x98>
18012f3e:	e3ffcdc3 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18012f42:	3000      	movi      	r0, 0
18012f44:	2800      	subi      	r0, 1
18012f46:	0436      	br      	0x18012fb2	// 18012fb2 <hg_auadc_v0_read+0x92>
18012f48:	e4022001 	andi      	r0, r2, 1
18012f4c:	e9000004 	bez      	r0, 0x18012f54	// 18012f54 <hg_auadc_v0_read+0x34>
18012f50:	101b      	lrw      	r0, 0x18018488	// 18012fbc <hg_auadc_v0_read+0x9c>
18012f52:	07f6      	br      	0x18012f3e	// 18012f3e <hg_auadc_v0_read+0x1e>
18012f54:	eb0200ff 	cmphsi      	r2, 256
18012f58:	0803      	bt      	0x18012f5e	// 18012f5e <hg_auadc_v0_read+0x3e>
18012f5a:	101a      	lrw      	r0, 0x180184ae	// 18012fc0 <hg_auadc_v0_read+0xa0>
18012f5c:	07f1      	br      	0x18012f3e	// 18012f3e <hg_auadc_v0_read+0x1e>
18012f5e:	b324      	st.w      	r1, (r3, 0x10)
18012f60:	4a21      	lsri      	r1, r2, 1
18012f62:	2900      	subi      	r1, 1
18012f64:	b326      	st.w      	r1, (r3, 0x18)
18012f66:	9322      	ld.w      	r1, (r3, 0x8)
18012f68:	ec210010 	ori      	r1, r1, 16
18012f6c:	b322      	st.w      	r1, (r3, 0x8)
18012f6e:	4a27      	lsri      	r1, r2, 7
18012f70:	9382      	ld.w      	r4, (r3, 0x8)
18012f72:	2900      	subi      	r1, 1
18012f74:	c40455e4 	zext      	r4, r4, 15, 0
18012f78:	4138      	lsli      	r1, r1, 24
18012f7a:	4a48      	lsri      	r2, r2, 8
18012f7c:	6c50      	or      	r1, r4
18012f7e:	2a00      	subi      	r2, 1
18012f80:	34ff      	movi      	r4, 255
18012f82:	4250      	lsli      	r2, r2, 16
18012f84:	4490      	lsli      	r4, r4, 16
18012f86:	6890      	and      	r2, r4
18012f88:	6c84      	or      	r2, r1
18012f8a:	b342      	st.w      	r2, (r3, 0x8)
18012f8c:	e44d2001 	andi      	r2, r13, 1
18012f90:	e9220011 	bnez      	r2, 0x18012fb2	// 18012fb2 <hg_auadc_v0_read+0x92>
18012f94:	d82c0007 	ld.b      	r1, (r12, 0x7)
18012f98:	3001      	movi      	r0, 1
18012f9a:	c4205c00 	ins      	r1, r0, 0, 0
18012f9e:	dc2c0007 	st.b      	r1, (r12, 0x7)
18012fa2:	9322      	ld.w      	r1, (r3, 0x8)
18012fa4:	6c40      	or      	r1, r0
18012fa6:	b322      	st.w      	r1, (r3, 0x8)
18012fa8:	9320      	ld.w      	r1, (r3, 0x0)
18012faa:	ec210002 	ori      	r1, r1, 2
18012fae:	b320      	st.w      	r1, (r3, 0x0)
18012fb0:	6c0b      	mov      	r0, r2
18012fb2:	1491      	pop      	r4, r15
18012fb4:	20002030 	.long	0x20002030
18012fb8:	18018462 	.long	0x18018462
18012fbc:	18018488 	.long	0x18018488
18012fc0:	180184ae 	.long	0x180184ae

18012fc4 <hg_auadc_v0_ioctl>:
18012fc4:	14d0      	push      	r15
18012fc6:	1014      	lrw      	r0, 0x20002030	// 18013014 <hg_auadc_v0_ioctl+0x50>
18012fc8:	6f07      	mov      	r12, r1
18012fca:	d9a00007 	ld.b      	r13, (r0, 0x7)
18012fce:	e5ad2002 	andi      	r13, r13, 2
18012fd2:	6c4b      	mov      	r1, r2
18012fd4:	e90d000e 	bez      	r13, 0x18012ff0	// 18012ff0 <hg_auadc_v0_ioctl+0x2c>
18012fd8:	eb4c0001 	cmpnei      	r12, 1
18012fdc:	0c0d      	bf      	0x18012ff6	// 18012ff6 <hg_auadc_v0_ioctl+0x32>
18012fde:	eb4c0000 	cmpnei      	r12, 0
18012fe2:	0c13      	bf      	0x18013008	// 18013008 <hg_auadc_v0_ioctl+0x44>
18012fe4:	eb4c0002 	cmpnei      	r12, 2
18012fe8:	0c12      	bf      	0x1801300c	// 1801300c <hg_auadc_v0_ioctl+0x48>
18012fea:	eb4c0003 	cmpnei      	r12, 3
18012fee:	0c0d      	bf      	0x18013008	// 18013008 <hg_auadc_v0_ioctl+0x44>
18012ff0:	3000      	movi      	r0, 0
18012ff2:	2800      	subi      	r0, 1
18012ff4:	040f      	br      	0x18013012	// 18013012 <hg_auadc_v0_ioctl+0x4e>
18012ff6:	9060      	ld.w      	r3, (r0, 0x0)
18012ff8:	e4212003 	andi      	r1, r1, 3
18012ffc:	9343      	ld.w      	r2, (r3, 0xc)
18012ffe:	9262      	ld.w      	r3, (r2, 0x8)
18013000:	3b82      	bclri      	r3, 2
18013002:	3b83      	bclri      	r3, 3
18013004:	6c4c      	or      	r1, r3
18013006:	b222      	st.w      	r1, (r2, 0x8)
18013008:	3000      	movi      	r0, 0
1801300a:	0404      	br      	0x18013012	// 18013012 <hg_auadc_v0_ioctl+0x4e>
1801300c:	6c8f      	mov      	r2, r3
1801300e:	e3fffea3 	bsr      	0x18012d54	// 18012d54 <hg_auadc_v0_set_digital_gain>
18013012:	1490      	pop      	r15
18013014:	20002030 	.long	0x20002030

18013018 <hg_auadc_v0_request_irq>:
18013018:	14d2      	push      	r4-r5, r15
1801301a:	ea8d001b 	lrw      	r13, 0x20002030	// 18013084 <hg_auadc_v0_request_irq+0x6c>
1801301e:	6d37      	mov      	r4, r13
18013020:	d98d0007 	ld.b      	r12, (r13, 0x7)
18013024:	d8ad2000 	ld.w      	r5, (r13, 0x0)
18013028:	e58c2002 	andi      	r12, r12, 2
1801302c:	9503      	ld.w      	r0, (r5, 0xc)
1801302e:	e90c0027 	bez      	r12, 0x1801307c	// 1801307c <hg_auadc_v0_request_irq+0x64>
18013032:	b567      	st.w      	r3, (r5, 0x1c)
18013034:	e4612001 	andi      	r3, r1, 1
18013038:	b546      	st.w      	r2, (r5, 0x18)
1801303a:	e9030006 	bez      	r3, 0x18013046	// 18013046 <hg_auadc_v0_request_irq+0x2e>
1801303e:	906a      	ld.w      	r3, (r0, 0x28)
18013040:	ec630010 	ori      	r3, r3, 16
18013044:	b06a      	st.w      	r3, (r0, 0x28)
18013046:	e4212002 	andi      	r1, r1, 2
1801304a:	e9010006 	bez      	r1, 0x18013056	// 18013056 <hg_auadc_v0_request_irq+0x3e>
1801304e:	906a      	ld.w      	r3, (r0, 0x28)
18013050:	ec630008 	ori      	r3, r3, 8
18013054:	b06a      	st.w      	r3, (r0, 0x28)
18013056:	104c      	lrw      	r2, 0x20002030	// 18013084 <hg_auadc_v0_request_irq+0x6c>
18013058:	102c      	lrw      	r1, 0x18012ce0	// 18013088 <hg_auadc_v0_request_irq+0x70>
1801305a:	8d10      	ld.h      	r0, (r5, 0x20)
1801305c:	e3ff8340 	bsr      	0x180036dc	// 180036dc <request_irq>
18013060:	9460      	ld.w      	r3, (r4, 0x0)
18013062:	3201      	movi      	r2, 1
18013064:	8b70      	ld.h      	r3, (r3, 0x20)
18013066:	c4a354c1 	zext      	r1, r3, 6, 5
1801306a:	e463201f 	andi      	r3, r3, 31
1801306e:	c4624023 	lsl      	r3, r2, r3
18013072:	1047      	lrw      	r2, 0xe000e100	// 1801308c <hg_auadc_v0_request_irq+0x74>
18013074:	d4220883 	str.w      	r3, (r2, r1 << 2)
18013078:	3000      	movi      	r0, 0
1801307a:	1492      	pop      	r4-r5, r15
1801307c:	3000      	movi      	r0, 0
1801307e:	2800      	subi      	r0, 1
18013080:	07fd      	br      	0x1801307a	// 1801307a <hg_auadc_v0_request_irq+0x62>
18013082:	0000      	.short	0x0000
18013084:	20002030 	.long	0x20002030
18013088:	18012ce0 	.long	0x18012ce0
1801308c:	e000e100 	.long	0xe000e100

18013090 <hg_auadc_v0_release_irq>:
18013090:	104e      	lrw      	r2, 0x20002030	// 180130c8 <hg_auadc_v0_release_irq+0x38>
18013092:	9260      	ld.w      	r3, (r2, 0x0)
18013094:	8247      	ld.b      	r2, (r2, 0x7)
18013096:	e4422002 	andi      	r2, r2, 2
1801309a:	9363      	ld.w      	r3, (r3, 0xc)
1801309c:	e9020012 	bez      	r2, 0x180130c0	// 180130c0 <hg_auadc_v0_release_irq+0x30>
180130a0:	e4412001 	andi      	r2, r1, 1
180130a4:	e9020005 	bez      	r2, 0x180130ae	// 180130ae <hg_auadc_v0_release_irq+0x1e>
180130a8:	934a      	ld.w      	r2, (r3, 0x28)
180130aa:	3a84      	bclri      	r2, 4
180130ac:	b34a      	st.w      	r2, (r3, 0x28)
180130ae:	e4012002 	andi      	r0, r1, 2
180130b2:	e9000006 	bez      	r0, 0x180130be	// 180130be <hg_auadc_v0_release_irq+0x2e>
180130b6:	934a      	ld.w      	r2, (r3, 0x28)
180130b8:	3a83      	bclri      	r2, 3
180130ba:	b34a      	st.w      	r2, (r3, 0x28)
180130bc:	3000      	movi      	r0, 0
180130be:	783c      	jmp      	r15
180130c0:	3000      	movi      	r0, 0
180130c2:	2800      	subi      	r0, 1
180130c4:	07fd      	br      	0x180130be	// 180130be <hg_auadc_v0_release_irq+0x2e>
180130c6:	0000      	.short	0x0000
180130c8:	20002030 	.long	0x20002030

180130cc <hg_aualaw_v0_irq_handler>:
180130cc:	14d2      	push      	r4-r5, r15
180130ce:	10b8      	lrw      	r5, 0x20002038	// 1801312c <hg_aualaw_v0_irq_handler+0x60>
180130d0:	3380      	movi      	r3, 128
180130d2:	9540      	ld.w      	r2, (r5, 0x0)
180130d4:	4366      	lsli      	r3, r3, 6
180130d6:	9283      	ld.w      	r4, (r2, 0xc)
180130d8:	9429      	ld.w      	r1, (r4, 0x24)
180130da:	684c      	and      	r1, r3
180130dc:	e901000d 	bez      	r1, 0x180130f6	// 180130f6 <hg_aualaw_v0_irq_handler+0x2a>
180130e0:	942a      	ld.w      	r1, (r4, 0x28)
180130e2:	684c      	and      	r1, r3
180130e4:	e9010009 	bez      	r1, 0x180130f6	// 180130f6 <hg_aualaw_v0_irq_handler+0x2a>
180130e8:	b469      	st.w      	r3, (r4, 0x24)
180130ea:	9266      	ld.w      	r3, (r2, 0x18)
180130ec:	e9030005 	bez      	r3, 0x180130f6	// 180130f6 <hg_aualaw_v0_irq_handler+0x2a>
180130f0:	9227      	ld.w      	r1, (r2, 0x1c)
180130f2:	3001      	movi      	r0, 1
180130f4:	7bcd      	jsr      	r3
180130f6:	3380      	movi      	r3, 128
180130f8:	9449      	ld.w      	r2, (r4, 0x24)
180130fa:	4367      	lsli      	r3, r3, 7
180130fc:	688c      	and      	r2, r3
180130fe:	e9020016 	bez      	r2, 0x1801312a	// 1801312a <hg_aualaw_v0_irq_handler+0x5e>
18013102:	944a      	ld.w      	r2, (r4, 0x28)
18013104:	688c      	and      	r2, r3
18013106:	e9020012 	bez      	r2, 0x1801312a	// 1801312a <hg_aualaw_v0_irq_handler+0x5e>
1801310a:	9520      	ld.w      	r1, (r5, 0x0)
1801310c:	b469      	st.w      	r3, (r4, 0x24)
1801310e:	9146      	ld.w      	r2, (r1, 0x18)
18013110:	e902000a 	bez      	r2, 0x18013124	// 18013124 <hg_aualaw_v0_irq_handler+0x58>
18013114:	8574      	ld.b      	r3, (r5, 0x14)
18013116:	e4632002 	andi      	r3, r3, 2
1801311a:	e9030005 	bez      	r3, 0x18013124	// 18013124 <hg_aualaw_v0_irq_handler+0x58>
1801311e:	9127      	ld.w      	r1, (r1, 0x1c)
18013120:	3002      	movi      	r0, 2
18013122:	7bc9      	jsr      	r2
18013124:	1003      	lrw      	r0, 0x20002044	// 18013130 <hg_aualaw_v0_irq_handler+0x64>
18013126:	e0000a05 	bsr      	0x18014530	// 18014530 <os_sema_up>
1801312a:	1492      	pop      	r4-r5, r15
1801312c:	20002038 	.long	0x20002038
18013130:	20002044 	.long	0x20002044

18013134 <hg_aualaw_v0_init>:
18013134:	3000      	movi      	r0, 0
18013136:	783c      	jmp      	r15

18013138 <hg_aualaw_v0_close>:
18013138:	106d      	lrw      	r3, 0x20002038	// 1801316c <hg_aualaw_v0_close+0x34>
1801313a:	9340      	ld.w      	r2, (r3, 0x0)
1801313c:	9203      	ld.w      	r0, (r2, 0xc)
1801313e:	9225      	ld.w      	r1, (r2, 0x14)
18013140:	8354      	ld.b      	r2, (r3, 0x14)
18013142:	e4422001 	andi      	r2, r2, 1
18013146:	e902000f 	bez      	r2, 0x18013164	// 18013164 <hg_aualaw_v0_close+0x2c>
1801314a:	904a      	ld.w      	r2, (r0, 0x28)
1801314c:	3a8e      	bclri      	r2, 14
1801314e:	b04a      	st.w      	r2, (r0, 0x28)
18013150:	8354      	ld.b      	r2, (r3, 0x14)
18013152:	3000      	movi      	r0, 0
18013154:	c4405c00 	ins      	r2, r0, 0, 0
18013158:	a354      	st.b      	r2, (r3, 0x14)
1801315a:	8160      	ld.b      	r3, (r1, 0x0)
1801315c:	c4605c03 	ins      	r3, r0, 3, 3
18013160:	a160      	st.b      	r3, (r1, 0x0)
18013162:	783c      	jmp      	r15
18013164:	3000      	movi      	r0, 0
18013166:	2800      	subi      	r0, 1
18013168:	07fd      	br      	0x18013162	// 18013162 <hg_aualaw_v0_close+0x2a>
1801316a:	0000      	.short	0x0000
1801316c:	20002038 	.long	0x20002038

18013170 <hg_aualaw_v0_encode>:
18013170:	14d6      	push      	r4-r9, r15
18013172:	11c4      	lrw      	r6, 0x20002038	// 18013200 <hg_aualaw_v0_encode+0x90>
18013174:	6d4b      	mov      	r5, r2
18013176:	8654      	ld.b      	r2, (r6, 0x14)
18013178:	6e0f      	mov      	r8, r3
1801317a:	e4422001 	andi      	r2, r2, 1
1801317e:	9660      	ld.w      	r3, (r6, 0x0)
18013180:	6e47      	mov      	r9, r1
18013182:	93e3      	ld.w      	r7, (r3, 0xc)
18013184:	e9020009 	bez      	r2, 0x18013196	// 18013196 <hg_aualaw_v0_encode+0x26>
18013188:	e9010004 	bez      	r1, 0x18013190	// 18013190 <hg_aualaw_v0_encode+0x20>
1801318c:	e9280008 	bnez      	r8, 0x1801319c	// 1801319c <hg_aualaw_v0_encode+0x2c>
18013190:	101d      	lrw      	r0, 0x180184ee	// 18013204 <hg_aualaw_v0_encode+0x94>
18013192:	e3ffcc99 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18013196:	3000      	movi      	r0, 0
18013198:	2800      	subi      	r0, 1
1801319a:	0431      	br      	0x180131fc	// 180131fc <hg_aualaw_v0_encode+0x8c>
1801319c:	e4852001 	andi      	r4, r5, 1
180131a0:	e9040004 	bez      	r4, 0x180131a8	// 180131a8 <hg_aualaw_v0_encode+0x38>
180131a4:	1019      	lrw      	r0, 0x18018515	// 18013208 <hg_aualaw_v0_encode+0x98>
180131a6:	07f6      	br      	0x18013192	// 18013192 <hg_aualaw_v0_encode+0x22>
180131a8:	3d0f      	cmphsi      	r5, 16
180131aa:	0803      	bt      	0x180131b0	// 180131b0 <hg_aualaw_v0_encode+0x40>
180131ac:	1018      	lrw      	r0, 0x1801853c	// 1801320c <hg_aualaw_v0_encode+0x9c>
180131ae:	07f2      	br      	0x18013192	// 18013192 <hg_aualaw_v0_encode+0x22>
180131b0:	3100      	movi      	r1, 0
180131b2:	2900      	subi      	r1, 1
180131b4:	5e0e      	addi      	r0, r6, 4
180131b6:	4da1      	lsri      	r5, r5, 1
180131b8:	e000092a 	bsr      	0x1801440c	// 1801440c <os_mutex_lock>
180131bc:	2d00      	subi      	r5, 1
180131be:	3302      	movi      	r3, 2
180131c0:	dd272020 	st.w      	r9, (r7, 0x80)
180131c4:	dd072021 	st.w      	r8, (r7, 0x84)
180131c8:	dca72022 	st.w      	r5, (r7, 0x88)
180131cc:	b77f      	st.w      	r3, (r7, 0x7c)
180131ce:	977f      	ld.w      	r3, (r7, 0x7c)
180131d0:	ec630020 	ori      	r3, r3, 32
180131d4:	b77f      	st.w      	r3, (r7, 0x7c)
180131d6:	ea011388 	movi      	r1, 5000
180131da:	e406000b 	addi      	r0, r6, 12
180131de:	e000098d 	bsr      	0x180144f8	// 180144f8 <os_sema_down>
180131e2:	e9200009 	bnez      	r0, 0x180131f4	// 180131f4 <hg_aualaw_v0_encode+0x84>
180131e6:	100b      	lrw      	r0, 0x18018562	// 18013210 <hg_aualaw_v0_encode+0xa0>
180131e8:	e3ffcc6e 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
180131ec:	5e0e      	addi      	r0, r6, 4
180131ee:	e0000929 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
180131f2:	07d2      	br      	0x18013196	// 18013196 <hg_aualaw_v0_encode+0x26>
180131f4:	5e0e      	addi      	r0, r6, 4
180131f6:	e0000925 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
180131fa:	6c13      	mov      	r0, r4
180131fc:	1496      	pop      	r4-r9, r15
180131fe:	0000      	.short	0x0000
18013200:	20002038 	.long	0x20002038
18013204:	180184ee 	.long	0x180184ee
18013208:	18018515 	.long	0x18018515
1801320c:	1801853c 	.long	0x1801853c
18013210:	18018562 	.long	0x18018562

18013214 <hg_aualaw_v0_decode>:
18013214:	14d6      	push      	r4-r9, r15
18013216:	11c4      	lrw      	r6, 0x20002038	// 180132a4 <hg_aualaw_v0_decode+0x90>
18013218:	6d4b      	mov      	r5, r2
1801321a:	8654      	ld.b      	r2, (r6, 0x14)
1801321c:	6e0f      	mov      	r8, r3
1801321e:	e4422001 	andi      	r2, r2, 1
18013222:	9660      	ld.w      	r3, (r6, 0x0)
18013224:	6e47      	mov      	r9, r1
18013226:	93e3      	ld.w      	r7, (r3, 0xc)
18013228:	e9020009 	bez      	r2, 0x1801323a	// 1801323a <hg_aualaw_v0_decode+0x26>
1801322c:	e9010004 	bez      	r1, 0x18013234	// 18013234 <hg_aualaw_v0_decode+0x20>
18013230:	e9280008 	bnez      	r8, 0x18013240	// 18013240 <hg_aualaw_v0_decode+0x2c>
18013234:	101d      	lrw      	r0, 0x180184ee	// 180132a8 <hg_aualaw_v0_decode+0x94>
18013236:	e3ffcc47 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
1801323a:	3000      	movi      	r0, 0
1801323c:	2800      	subi      	r0, 1
1801323e:	0431      	br      	0x180132a0	// 180132a0 <hg_aualaw_v0_decode+0x8c>
18013240:	e4852001 	andi      	r4, r5, 1
18013244:	e9040004 	bez      	r4, 0x1801324c	// 1801324c <hg_aualaw_v0_decode+0x38>
18013248:	1019      	lrw      	r0, 0x18018515	// 180132ac <hg_aualaw_v0_decode+0x98>
1801324a:	07f6      	br      	0x18013236	// 18013236 <hg_aualaw_v0_decode+0x22>
1801324c:	3d0f      	cmphsi      	r5, 16
1801324e:	0803      	bt      	0x18013254	// 18013254 <hg_aualaw_v0_decode+0x40>
18013250:	1018      	lrw      	r0, 0x1801853c	// 180132b0 <hg_aualaw_v0_decode+0x9c>
18013252:	07f2      	br      	0x18013236	// 18013236 <hg_aualaw_v0_decode+0x22>
18013254:	3100      	movi      	r1, 0
18013256:	2900      	subi      	r1, 1
18013258:	5e0e      	addi      	r0, r6, 4
1801325a:	4da1      	lsri      	r5, r5, 1
1801325c:	e00008d8 	bsr      	0x1801440c	// 1801440c <os_mutex_lock>
18013260:	2d00      	subi      	r5, 1
18013262:	3301      	movi      	r3, 1
18013264:	dd272020 	st.w      	r9, (r7, 0x80)
18013268:	dd072021 	st.w      	r8, (r7, 0x84)
1801326c:	dca72022 	st.w      	r5, (r7, 0x88)
18013270:	b77f      	st.w      	r3, (r7, 0x7c)
18013272:	977f      	ld.w      	r3, (r7, 0x7c)
18013274:	ec630010 	ori      	r3, r3, 16
18013278:	b77f      	st.w      	r3, (r7, 0x7c)
1801327a:	ea011388 	movi      	r1, 5000
1801327e:	e406000b 	addi      	r0, r6, 12
18013282:	e000093b 	bsr      	0x180144f8	// 180144f8 <os_sema_down>
18013286:	e9200009 	bnez      	r0, 0x18013298	// 18013298 <hg_aualaw_v0_decode+0x84>
1801328a:	100b      	lrw      	r0, 0x180184d4	// 180132b4 <hg_aualaw_v0_decode+0xa0>
1801328c:	e3ffcc1c 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18013290:	5e0e      	addi      	r0, r6, 4
18013292:	e00008d7 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
18013296:	07d2      	br      	0x1801323a	// 1801323a <hg_aualaw_v0_decode+0x26>
18013298:	5e0e      	addi      	r0, r6, 4
1801329a:	e00008d3 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
1801329e:	6c13      	mov      	r0, r4
180132a0:	1496      	pop      	r4-r9, r15
180132a2:	0000      	.short	0x0000
180132a4:	20002038 	.long	0x20002038
180132a8:	180184ee 	.long	0x180184ee
180132ac:	18018515 	.long	0x18018515
180132b0:	1801853c 	.long	0x1801853c
180132b4:	180184d4 	.long	0x180184d4

180132b8 <hg_aualaw_v0_ioctl>:
180132b8:	1063      	lrw      	r3, 0x20002038	// 180132c4 <hg_aualaw_v0_ioctl+0xc>
180132ba:	8314      	ld.b      	r0, (r3, 0x14)
180132bc:	6c02      	nor      	r0, r0
180132be:	c4005800 	sext      	r0, r0, 0, 0
180132c2:	783c      	jmp      	r15
180132c4:	20002038 	.long	0x20002038

180132c8 <hg_aualaw_v0_request_irq>:
180132c8:	14c2      	push      	r4-r5
180132ca:	1014      	lrw      	r0, 0x20002038	// 18013318 <hg_aualaw_v0_request_irq+0x50>
180132cc:	6f03      	mov      	r12, r0
180132ce:	8094      	ld.b      	r4, (r0, 0x14)
180132d0:	d9a02000 	ld.w      	r13, (r0, 0x0)
180132d4:	e4842001 	andi      	r4, r4, 1
180132d8:	d8ad2003 	ld.w      	r5, (r13, 0xc)
180132dc:	e904001b 	bez      	r4, 0x18013312	// 18013312 <hg_aualaw_v0_request_irq+0x4a>
180132e0:	dc6d2007 	st.w      	r3, (r13, 0x1c)
180132e4:	e4612001 	andi      	r3, r1, 1
180132e8:	dc4d2006 	st.w      	r2, (r13, 0x18)
180132ec:	e9030006 	bez      	r3, 0x180132f8	// 180132f8 <hg_aualaw_v0_request_irq+0x30>
180132f0:	956a      	ld.w      	r3, (r5, 0x28)
180132f2:	ec632000 	ori      	r3, r3, 8192
180132f6:	b56a      	st.w      	r3, (r5, 0x28)
180132f8:	e4012002 	andi      	r0, r1, 2
180132fc:	e900000a 	bez      	r0, 0x18013310	// 18013310 <hg_aualaw_v0_request_irq+0x48>
18013300:	d86c0014 	ld.b      	r3, (r12, 0x14)
18013304:	3201      	movi      	r2, 1
18013306:	c4625c01 	ins      	r3, r2, 1, 1
1801330a:	dc6c0014 	st.b      	r3, (r12, 0x14)
1801330e:	3000      	movi      	r0, 0
18013310:	1482      	pop      	r4-r5
18013312:	3000      	movi      	r0, 0
18013314:	2800      	subi      	r0, 1
18013316:	07fd      	br      	0x18013310	// 18013310 <hg_aualaw_v0_request_irq+0x48>
18013318:	20002038 	.long	0x20002038

1801331c <hg_aualaw_v0_release_irq>:
1801331c:	106f      	lrw      	r3, 0x20002038	// 18013358 <hg_aualaw_v0_release_irq+0x3c>
1801331e:	8354      	ld.b      	r2, (r3, 0x14)
18013320:	e4422001 	andi      	r2, r2, 1
18013324:	e9020016 	bez      	r2, 0x18013350	// 18013350 <hg_aualaw_v0_release_irq+0x34>
18013328:	e4412001 	andi      	r2, r1, 1
1801332c:	e9020007 	bez      	r2, 0x1801333a	// 1801333a <hg_aualaw_v0_release_irq+0x1e>
18013330:	9340      	ld.w      	r2, (r3, 0x0)
18013332:	9203      	ld.w      	r0, (r2, 0xc)
18013334:	904a      	ld.w      	r2, (r0, 0x28)
18013336:	3a8d      	bclri      	r2, 13
18013338:	b04a      	st.w      	r2, (r0, 0x28)
1801333a:	e4012002 	andi      	r0, r1, 2
1801333e:	3100      	movi      	r1, 0
18013340:	e9000007 	bez      	r0, 0x1801334e	// 1801334e <hg_aualaw_v0_release_irq+0x32>
18013344:	8354      	ld.b      	r2, (r3, 0x14)
18013346:	c4415c01 	ins      	r2, r1, 1, 1
1801334a:	a354      	st.b      	r2, (r3, 0x14)
1801334c:	6c07      	mov      	r0, r1
1801334e:	783c      	jmp      	r15
18013350:	3000      	movi      	r0, 0
18013352:	2800      	subi      	r0, 1
18013354:	07fd      	br      	0x1801334e	// 1801334e <hg_aualaw_v0_release_irq+0x32>
18013356:	0000      	.short	0x0000
18013358:	20002038 	.long	0x20002038

1801335c <hg_aualaw_v0_open>:
1801335c:	14d4      	push      	r4-r7, r15
1801335e:	10bd      	lrw      	r5, 0x20002038	// 180133d0 <hg_aualaw_v0_open+0x74>
18013360:	9043      	ld.w      	r2, (r0, 0xc)
18013362:	8594      	ld.b      	r4, (r5, 0x14)
18013364:	e4842001 	andi      	r4, r4, 1
18013368:	b500      	st.w      	r0, (r5, 0x0)
1801336a:	90c5      	ld.w      	r6, (r0, 0x14)
1801336c:	e9240007 	bnez      	r4, 0x1801337a	// 1801337a <hg_aualaw_v0_open+0x1e>
18013370:	e9260008 	bnez      	r6, 0x18013380	// 18013380 <hg_aualaw_v0_open+0x24>
18013374:	1018      	lrw      	r0, 0x1801857c	// 180133d4 <hg_aualaw_v0_open+0x78>
18013376:	e3ffcba7 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
1801337a:	3000      	movi      	r0, 0
1801337c:	2800      	subi      	r0, 1
1801337e:	0427      	br      	0x180133cc	// 180133cc <hg_aualaw_v0_open+0x70>
18013380:	926a      	ld.w      	r3, (r2, 0x28)
18013382:	ec634000 	ori      	r3, r3, 16384
18013386:	b26a      	st.w      	r3, (r2, 0x28)
18013388:	8810      	ld.h      	r0, (r0, 0x20)
1801338a:	6c97      	mov      	r2, r5
1801338c:	1033      	lrw      	r1, 0x180130cc	// 180133d8 <hg_aualaw_v0_open+0x7c>
1801338e:	e3ff81a7 	bsr      	0x180036dc	// 180036dc <request_irq>
18013392:	9560      	ld.w      	r3, (r5, 0x0)
18013394:	3701      	movi      	r7, 1
18013396:	8b70      	ld.h      	r3, (r3, 0x20)
18013398:	c4a354c1 	zext      	r1, r3, 6, 5
1801339c:	e463201f 	andi      	r3, r3, 31
180133a0:	c4674023 	lsl      	r3, r7, r3
180133a4:	104e      	lrw      	r2, 0xe000e100	// 180133dc <hg_aualaw_v0_open+0x80>
180133a6:	d4220883 	str.w      	r3, (r2, r1 << 2)
180133aa:	5d0e      	addi      	r0, r5, 4
180133ac:	e000080e 	bsr      	0x180143c8	// 180143c8 <os_mutex_init>
180133b0:	6c53      	mov      	r1, r4
180133b2:	e405000b 	addi      	r0, r5, 12
180133b6:	e0000871 	bsr      	0x18014498	// 18014498 <os_sema_init>
180133ba:	8574      	ld.b      	r3, (r5, 0x14)
180133bc:	c4675c00 	ins      	r3, r7, 0, 0
180133c0:	a574      	st.b      	r3, (r5, 0x14)
180133c2:	8660      	ld.b      	r3, (r6, 0x0)
180133c4:	c4675c03 	ins      	r3, r7, 3, 3
180133c8:	a660      	st.b      	r3, (r6, 0x0)
180133ca:	6c13      	mov      	r0, r4
180133cc:	1494      	pop      	r4-r7, r15
180133ce:	0000      	.short	0x0000
180133d0:	20002038 	.long	0x20002038
180133d4:	1801857c 	.long	0x1801857c
180133d8:	180130cc 	.long	0x180130cc
180133dc:	e000e100 	.long	0xe000e100

180133e0 <hg_audac_v0_irq_handler>:
180133e0:	14d2      	push      	r4-r5, r15
180133e2:	11a3      	lrw      	r5, 0x20002050	// 1801346c <hg_audac_v0_irq_handler+0x8c>
180133e4:	9520      	ld.w      	r1, (r5, 0x0)
180133e6:	9183      	ld.w      	r4, (r1, 0xc)
180133e8:	9469      	ld.w      	r3, (r4, 0x24)
180133ea:	e4632001 	andi      	r3, r3, 1
180133ee:	e903001e 	bez      	r3, 0x1801342a	// 1801342a <hg_audac_v0_irq_handler+0x4a>
180133f2:	946a      	ld.w      	r3, (r4, 0x28)
180133f4:	e4632001 	andi      	r3, r3, 1
180133f8:	e9030019 	bez      	r3, 0x1801342a	// 1801342a <hg_audac_v0_irq_handler+0x4a>
180133fc:	3301      	movi      	r3, 1
180133fe:	b469      	st.w      	r3, (r4, 0x24)
18013400:	8d64      	ld.h      	r3, (r5, 0x8)
18013402:	2b00      	subi      	r3, 1
18013404:	32ff      	movi      	r2, 255
18013406:	4250      	lsli      	r2, r2, 16
18013408:	4370      	lsli      	r3, r3, 16
1801340a:	68c8      	and      	r3, r2
1801340c:	8d45      	ld.h      	r2, (r5, 0xa)
1801340e:	2a00      	subi      	r2, 1
18013410:	9401      	ld.w      	r0, (r4, 0x4)
18013412:	4258      	lsli      	r2, r2, 24
18013414:	6cc8      	or      	r3, r2
18013416:	c40055e2 	zext      	r2, r0, 15, 0
1801341a:	6cc8      	or      	r3, r2
1801341c:	b461      	st.w      	r3, (r4, 0x4)
1801341e:	9166      	ld.w      	r3, (r1, 0x18)
18013420:	e9030005 	bez      	r3, 0x1801342a	// 1801342a <hg_audac_v0_irq_handler+0x4a>
18013424:	9127      	ld.w      	r1, (r1, 0x1c)
18013426:	3002      	movi      	r0, 2
18013428:	7bcd      	jsr      	r3
1801342a:	9469      	ld.w      	r3, (r4, 0x24)
1801342c:	e4632002 	andi      	r3, r3, 2
18013430:	e9030010 	bez      	r3, 0x18013450	// 18013450 <hg_audac_v0_irq_handler+0x70>
18013434:	946a      	ld.w      	r3, (r4, 0x28)
18013436:	e4632002 	andi      	r3, r3, 2
1801343a:	e903000b 	bez      	r3, 0x18013450	// 18013450 <hg_audac_v0_irq_handler+0x70>
1801343e:	9540      	ld.w      	r2, (r5, 0x0)
18013440:	3302      	movi      	r3, 2
18013442:	b469      	st.w      	r3, (r4, 0x24)
18013444:	9266      	ld.w      	r3, (r2, 0x18)
18013446:	e9030005 	bez      	r3, 0x18013450	// 18013450 <hg_audac_v0_irq_handler+0x70>
1801344a:	9227      	ld.w      	r1, (r2, 0x1c)
1801344c:	3001      	movi      	r0, 1
1801344e:	7bcd      	jsr      	r3
18013450:	9469      	ld.w      	r3, (r4, 0x24)
18013452:	e4632004 	andi      	r3, r3, 4
18013456:	e9030009 	bez      	r3, 0x18013468	// 18013468 <hg_audac_v0_irq_handler+0x88>
1801345a:	946a      	ld.w      	r3, (r4, 0x28)
1801345c:	e4632004 	andi      	r3, r3, 4
18013460:	e9030004 	bez      	r3, 0x18013468	// 18013468 <hg_audac_v0_irq_handler+0x88>
18013464:	3304      	movi      	r3, 4
18013466:	b469      	st.w      	r3, (r4, 0x24)
18013468:	1492      	pop      	r4-r5, r15
1801346a:	0000      	.short	0x0000
1801346c:	20002050 	.long	0x20002050

18013470 <hg_audac_v0_set_digital_gain>:
18013470:	9060      	ld.w      	r3, (r0, 0x0)
18013472:	30ff      	movi      	r0, 255
18013474:	9343      	ld.w      	r2, (r3, 0xc)
18013476:	4010      	lsli      	r0, r0, 16
18013478:	4130      	lsli      	r1, r1, 16
1801347a:	6840      	and      	r1, r0
1801347c:	ea20ff01 	movih      	r0, 65281
18013480:	926b      	ld.w      	r3, (r2, 0x2c)
18013482:	2800      	subi      	r0, 1
18013484:	68c0      	and      	r3, r0
18013486:	6c4c      	or      	r1, r3
18013488:	3000      	movi      	r0, 0
1801348a:	b22b      	st.w      	r1, (r2, 0x2c)
1801348c:	783c      	jmp      	r15
	...

18013490 <hg_audac_v0_soft_mute>:
18013490:	1067      	lrw      	r3, 0x20002050	// 180134ac <hg_audac_v0_soft_mute+0x1c>
18013492:	9360      	ld.w      	r3, (r3, 0x0)
18013494:	9363      	ld.w      	r3, (r3, 0xc)
18013496:	9340      	ld.w      	r2, (r3, 0x0)
18013498:	e9010007 	bez      	r1, 0x180134a6	// 180134a6 <hg_audac_v0_soft_mute+0x16>
1801349c:	ec420004 	ori      	r2, r2, 4
180134a0:	3000      	movi      	r0, 0
180134a2:	b340      	st.w      	r2, (r3, 0x0)
180134a4:	783c      	jmp      	r15
180134a6:	3a82      	bclri      	r2, 2
180134a8:	07fc      	br      	0x180134a0	// 180134a0 <hg_audac_v0_soft_mute+0x10>
180134aa:	0000      	.short	0x0000
180134ac:	20002050 	.long	0x20002050

180134b0 <hg_audac_v0_init>:
180134b0:	14d2      	push      	r4-r5, r15
180134b2:	1422      	subi      	r14, r14, 8
180134b4:	6d03      	mov      	r4, r0
180134b6:	10bc      	lrw      	r5, 0x20002050	// 18013524 <hg_audac_v0_init+0x74>
180134b8:	320c      	movi      	r2, 12
180134ba:	3100      	movi      	r1, 0
180134bc:	6c17      	mov      	r0, r5
180134be:	e00014d5 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
180134c2:	3300      	movi      	r3, 0
180134c4:	b580      	st.w      	r4, (r5, 0x0)
180134c6:	9485      	ld.w      	r4, (r4, 0x14)
180134c8:	b860      	st.w      	r3, (r14, 0x0)
180134ca:	b861      	st.w      	r3, (r14, 0x4)
180134cc:	8460      	ld.b      	r3, (r4, 0x0)
180134ce:	e4632020 	andi      	r3, r3, 32
180134d2:	e9230025 	bnez      	r3, 0x1801351c	// 1801351c <hg_audac_v0_init+0x6c>
180134d6:	e3ffe807 	bsr      	0x180104e4	// 180104e4 <sysctrl_efuse_aubias_sel_vref100_vdd>
180134da:	d86e0004 	ld.b      	r3, (r14, 0x4)
180134de:	c4605c60 	ins      	r3, r0, 3, 0
180134e2:	dc6e0004 	st.b      	r3, (r14, 0x4)
180134e6:	e3ffe80d 	bsr      	0x18010500	// 18010500 <sysctrl_efuse_aubias_sel_vcmau_vdd>
180134ea:	d86e0004 	ld.b      	r3, (r14, 0x4)
180134ee:	c4605c64 	ins      	r3, r0, 7, 4
180134f2:	dc6e0004 	st.b      	r3, (r14, 0x4)
180134f6:	e3ffe817 	bsr      	0x18010524	// 18010524 <sysctrl_efuse_aubias_sel_vcc27au_vdd>
180134fa:	d86e0005 	ld.b      	r3, (r14, 0x5)
180134fe:	c4605c40 	ins      	r3, r0, 2, 0
18013502:	6c3b      	mov      	r0, r14
18013504:	dc6e0005 	st.b      	r3, (r14, 0x5)
18013508:	e0000186 	bsr      	0x18013814	// 18013814 <audio_ana_config_power_on>
1801350c:	8460      	ld.b      	r3, (r4, 0x0)
1801350e:	3201      	movi      	r2, 1
18013510:	c4625c05 	ins      	r3, r2, 5, 5
18013514:	a460      	st.b      	r3, (r4, 0x0)
18013516:	1005      	lrw      	r0, 0x180183ef	// 18013528 <hg_audac_v0_init+0x78>
18013518:	e3ffcad6 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
1801351c:	3000      	movi      	r0, 0
1801351e:	1402      	addi      	r14, r14, 8
18013520:	1492      	pop      	r4-r5, r15
18013522:	0000      	.short	0x0000
18013524:	20002050 	.long	0x20002050
18013528:	180183ef 	.long	0x180183ef

1801352c <hg_audac_v0_open>:
1801352c:	14d4      	push      	r4-r7, r15
1801352e:	1422      	subi      	r14, r14, 8
18013530:	1198      	lrw      	r4, 0x20002050	// 18013610 <hg_audac_v0_open+0xe4>
18013532:	90c3      	ld.w      	r6, (r0, 0xc)
18013534:	8467      	ld.b      	r3, (r4, 0x7)
18013536:	e4632002 	andi      	r3, r3, 2
1801353a:	b400      	st.w      	r0, (r4, 0x0)
1801353c:	90e5      	ld.w      	r7, (r0, 0x14)
1801353e:	e9230010 	bnez      	r3, 0x1801355e	// 1801355e <hg_audac_v0_open+0x32>
18013542:	e9270006 	bnez      	r7, 0x1801354e	// 1801354e <hg_audac_v0_open+0x22>
18013546:	1114      	lrw      	r0, 0x180185a8	// 18013614 <hg_audac_v0_open+0xe8>
18013548:	e3ffcabe 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
1801354c:	0409      	br      	0x1801355e	// 1801355e <hg_audac_v0_open+0x32>
1801354e:	3941      	cmpnei      	r1, 1
18013550:	0c0f      	bf      	0x1801356e	// 1801356e <hg_audac_v0_open+0x42>
18013552:	3940      	cmpnei      	r1, 0
18013554:	0c08      	bf      	0x18013564	// 18013564 <hg_audac_v0_open+0x38>
18013556:	3942      	cmpnei      	r1, 2
18013558:	0c1a      	bf      	0x1801358c	// 1801358c <hg_audac_v0_open+0x60>
1801355a:	3943      	cmpnei      	r1, 3
1801355c:	0c1e      	bf      	0x18013598	// 18013598 <hg_audac_v0_open+0x6c>
1801355e:	3000      	movi      	r0, 0
18013560:	2800      	subi      	r0, 1
18013562:	0454      	br      	0x1801360a	// 1801360a <hg_audac_v0_open+0xde>
18013564:	330e      	movi      	r3, 14
18013566:	a464      	st.b      	r3, (r4, 0x4)
18013568:	3302      	movi      	r3, 2
1801356a:	a465      	st.b      	r3, (r4, 0x5)
1801356c:	0414      	br      	0x18013594	// 18013594 <hg_audac_v0_open+0x68>
1801356e:	330e      	movi      	r3, 14
18013570:	a464      	st.b      	r3, (r4, 0x4)
18013572:	3302      	movi      	r3, 2
18013574:	a465      	st.b      	r3, (r4, 0x5)
18013576:	a426      	st.b      	r1, (r4, 0x6)
18013578:	3500      	movi      	r5, 0
1801357a:	b8a0      	st.w      	r5, (r14, 0x0)
1801357c:	b8a1      	st.w      	r5, (r14, 0x4)
1801357e:	8760      	ld.b      	r3, (r7, 0x0)
18013580:	e4632020 	andi      	r3, r3, 32
18013584:	e923000d 	bnez      	r3, 0x1801359e	// 1801359e <hg_audac_v0_open+0x72>
18013588:	1104      	lrw      	r0, 0x180185ce	// 18013618 <hg_audac_v0_open+0xec>
1801358a:	07df      	br      	0x18013548	// 18013548 <hg_audac_v0_open+0x1c>
1801358c:	3209      	movi      	r2, 9
1801358e:	a444      	st.b      	r2, (r4, 0x4)
18013590:	3201      	movi      	r2, 1
18013592:	a445      	st.b      	r2, (r4, 0x5)
18013594:	a466      	st.b      	r3, (r4, 0x6)
18013596:	07f1      	br      	0x18013578	// 18013578 <hg_audac_v0_open+0x4c>
18013598:	3209      	movi      	r2, 9
1801359a:	a444      	st.b      	r2, (r4, 0x4)
1801359c:	07e7      	br      	0x1801356a	// 1801356a <hg_audac_v0_open+0x3e>
1801359e:	6c3b      	mov      	r0, r14
180135a0:	e000023c 	bsr      	0x18013a18	// 18013a18 <audio_ana_config_dac_on>
180135a4:	101e      	lrw      	r0, 0x180185bc	// 1801361c <hg_audac_v0_open+0xf0>
180135a6:	e3ffca8f 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
180135aa:	ea214002 	movih      	r1, 16386
180135ae:	8464      	ld.b      	r3, (r4, 0x4)
180135b0:	9155      	ld.w      	r2, (r1, 0x54)
180135b2:	ea00f800 	movi      	r0, 63488
180135b6:	6c02      	nor      	r0, r0
180135b8:	436b      	lsli      	r3, r3, 11
180135ba:	6880      	and      	r2, r0
180135bc:	c40355e3 	zext      	r3, r3, 15, 0
180135c0:	6cc8      	or      	r3, r2
180135c2:	b175      	st.w      	r3, (r1, 0x54)
180135c4:	8465      	ld.b      	r3, (r4, 0x5)
180135c6:	8426      	ld.b      	r1, (r4, 0x6)
180135c8:	4362      	lsli      	r3, r3, 2
180135ca:	e4212003 	andi      	r1, r1, 3
180135ce:	e463200c 	andi      	r3, r3, 12
180135d2:	6cc4      	or      	r3, r1
180135d4:	3100      	movi      	r1, 0
180135d6:	964b      	ld.w      	r2, (r6, 0x2c)
180135d8:	290f      	subi      	r1, 16
180135da:	6884      	and      	r2, r1
180135dc:	6cc8      	or      	r3, r2
180135de:	b66b      	st.w      	r3, (r6, 0x2c)
180135e0:	9661      	ld.w      	r3, (r6, 0x4)
180135e2:	3b82      	bclri      	r3, 2
180135e4:	3b83      	bclri      	r3, 3
180135e6:	ec630008 	ori      	r3, r3, 8
180135ea:	b661      	st.w      	r3, (r6, 0x4)
180135ec:	9660      	ld.w      	r3, (r6, 0x0)
180135ee:	3b82      	bclri      	r3, 2
180135f0:	b660      	st.w      	r3, (r6, 0x0)
180135f2:	8467      	ld.b      	r3, (r4, 0x7)
180135f4:	3201      	movi      	r2, 1
180135f6:	c4625c01 	ins      	r3, r2, 1, 1
180135fa:	c4655c00 	ins      	r3, r5, 0, 0
180135fe:	a467      	st.b      	r3, (r4, 0x7)
18013600:	8760      	ld.b      	r3, (r7, 0x0)
18013602:	c4625c01 	ins      	r3, r2, 1, 1
18013606:	a760      	st.b      	r3, (r7, 0x0)
18013608:	6c17      	mov      	r0, r5
1801360a:	1402      	addi      	r14, r14, 8
1801360c:	1494      	pop      	r4-r7, r15
1801360e:	0000      	.short	0x0000
18013610:	20002050 	.long	0x20002050
18013614:	180185a8 	.long	0x180185a8
18013618:	180185ce 	.long	0x180185ce
1801361c:	180185bc 	.long	0x180185bc

18013620 <hg_audac_v0_close>:
18013620:	104b      	lrw      	r2, 0x20002050	// 1801364c <hg_audac_v0_close+0x2c>
18013622:	9260      	ld.w      	r3, (r2, 0x0)
18013624:	9325      	ld.w      	r1, (r3, 0x14)
18013626:	8267      	ld.b      	r3, (r2, 0x7)
18013628:	e4032002 	andi      	r0, r3, 2
1801362c:	e900000d 	bez      	r0, 0x18013646	// 18013646 <hg_audac_v0_close+0x26>
18013630:	3000      	movi      	r0, 0
18013632:	e46320fd 	andi      	r3, r3, 253
18013636:	c4605c00 	ins      	r3, r0, 0, 0
1801363a:	a267      	st.b      	r3, (r2, 0x7)
1801363c:	8160      	ld.b      	r3, (r1, 0x0)
1801363e:	c4605c01 	ins      	r3, r0, 1, 1
18013642:	a160      	st.b      	r3, (r1, 0x0)
18013644:	783c      	jmp      	r15
18013646:	3000      	movi      	r0, 0
18013648:	2800      	subi      	r0, 1
1801364a:	07fd      	br      	0x18013644	// 18013644 <hg_audac_v0_close+0x24>
1801364c:	20002050 	.long	0x20002050

18013650 <hg_audac_v0_write>:
18013650:	14d2      	push      	r4-r5, r15
18013652:	1188      	lrw      	r4, 0x20002050	// 180136f0 <hg_audac_v0_write+0xa0>
18013654:	84a7      	ld.b      	r5, (r4, 0x7)
18013656:	9460      	ld.w      	r3, (r4, 0x0)
18013658:	e4052002 	andi      	r0, r5, 2
1801365c:	9363      	ld.w      	r3, (r3, 0xc)
1801365e:	e9000007 	bez      	r0, 0x1801366c	// 1801366c <hg_audac_v0_write+0x1c>
18013662:	e9210008 	bnez      	r1, 0x18013672	// 18013672 <hg_audac_v0_write+0x22>
18013666:	1104      	lrw      	r0, 0x180185e6	// 180136f4 <hg_audac_v0_write+0xa4>
18013668:	e3ffca2e 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
1801366c:	3000      	movi      	r0, 0
1801366e:	2800      	subi      	r0, 1
18013670:	043e      	br      	0x180136ec	// 180136ec <hg_audac_v0_write+0x9c>
18013672:	e4022001 	andi      	r0, r2, 1
18013676:	e9000004 	bez      	r0, 0x1801367e	// 1801367e <hg_audac_v0_write+0x2e>
1801367a:	1100      	lrw      	r0, 0x1801860c	// 180136f8 <hg_audac_v0_write+0xa8>
1801367c:	07f6      	br      	0x18013668	// 18013668 <hg_audac_v0_write+0x18>
1801367e:	eb0200ff 	cmphsi      	r2, 256
18013682:	0803      	bt      	0x18013688	// 18013688 <hg_audac_v0_write+0x38>
18013684:	101e      	lrw      	r0, 0x18018632	// 180136fc <hg_audac_v0_write+0xac>
18013686:	07f1      	br      	0x18013668	// 18013668 <hg_audac_v0_write+0x18>
18013688:	c502484d 	lsri      	r13, r2, 8
1801368c:	c4e2484c 	lsri      	r12, r2, 7
18013690:	4a41      	lsri      	r2, r2, 1
18013692:	2a00      	subi      	r2, 1
18013694:	b323      	st.w      	r1, (r3, 0xc)
18013696:	b345      	st.w      	r2, (r3, 0x14)
18013698:	e4452001 	andi      	r2, r5, 1
1801369c:	dda41004 	st.h      	r13, (r4, 0x8)
180136a0:	dd841005 	st.h      	r12, (r4, 0xa)
180136a4:	e9220024 	bnez      	r2, 0x180136ec	// 180136ec <hg_audac_v0_write+0x9c>
180136a8:	8427      	ld.b      	r1, (r4, 0x7)
180136aa:	3001      	movi      	r0, 1
180136ac:	c4205c00 	ins      	r1, r0, 0, 0
180136b0:	a427      	st.b      	r1, (r4, 0x7)
180136b2:	9321      	ld.w      	r1, (r3, 0x4)
180136b4:	ec210010 	ori      	r1, r1, 16
180136b8:	b321      	st.w      	r1, (r3, 0x4)
180136ba:	9321      	ld.w      	r1, (r3, 0x4)
180136bc:	e58c1000 	subi      	r12, r12, 1
180136c0:	c40155e1 	zext      	r1, r1, 15, 0
180136c4:	c70c482c 	lsli      	r12, r12, 24
180136c8:	6f04      	or      	r12, r1
180136ca:	e5ad1000 	subi      	r13, r13, 1
180136ce:	31ff      	movi      	r1, 255
180136d0:	4130      	lsli      	r1, r1, 16
180136d2:	c60d482d 	lsli      	r13, r13, 16
180136d6:	6b44      	and      	r13, r1
180136d8:	6f34      	or      	r12, r13
180136da:	dd832001 	st.w      	r12, (r3, 0x4)
180136de:	9321      	ld.w      	r1, (r3, 0x4)
180136e0:	6c40      	or      	r1, r0
180136e2:	b321      	st.w      	r1, (r3, 0x4)
180136e4:	9320      	ld.w      	r1, (r3, 0x0)
180136e6:	6c40      	or      	r1, r0
180136e8:	b320      	st.w      	r1, (r3, 0x0)
180136ea:	6c0b      	mov      	r0, r2
180136ec:	1492      	pop      	r4-r5, r15
180136ee:	0000      	.short	0x0000
180136f0:	20002050 	.long	0x20002050
180136f4:	180185e6 	.long	0x180185e6
180136f8:	1801860c 	.long	0x1801860c
180136fc:	18018632 	.long	0x18018632

18013700 <hg_audac_v0_ioctl>:
18013700:	14d0      	push      	r15
18013702:	1009      	lrw      	r0, 0x20002050	// 18013724 <hg_audac_v0_ioctl+0x24>
18013704:	6f47      	mov      	r13, r1
18013706:	d9800007 	ld.b      	r12, (r0, 0x7)
1801370a:	e58c2002 	andi      	r12, r12, 2
1801370e:	6c4b      	mov      	r1, r2
18013710:	e90c0022 	bez      	r12, 0x18013754	// 18013754 <hg_audac_v0_ioctl+0x54>
18013714:	eb0d0004 	cmphsi      	r13, 5
18013718:	081e      	bt      	0x18013754	// 18013754 <hg_audac_v0_ioctl+0x54>
1801371a:	1044      	lrw      	r2, 0x18018594	// 18013728 <hg_audac_v0_ioctl+0x28>
1801371c:	d1a20882 	ldr.w      	r2, (r2, r13 << 2)
18013720:	7808      	jmp      	r2
18013722:	0000      	.short	0x0000
18013724:	20002050 	.long	0x20002050
18013728:	18018594 	.long	0x18018594
1801372c:	9060      	ld.w      	r3, (r0, 0x0)
1801372e:	e4212003 	andi      	r1, r1, 3
18013732:	9343      	ld.w      	r2, (r3, 0xc)
18013734:	9261      	ld.w      	r3, (r2, 0x4)
18013736:	3b82      	bclri      	r3, 2
18013738:	3b83      	bclri      	r3, 3
1801373a:	6c4c      	or      	r1, r3
1801373c:	b221      	st.w      	r1, (r2, 0x4)
1801373e:	3000      	movi      	r0, 0
18013740:	0405      	br      	0x1801374a	// 1801374a <hg_audac_v0_ioctl+0x4a>
18013742:	6c8f      	mov      	r2, r3
18013744:	1006      	lrw      	r0, 0x20002050	// 1801375c <hg_audac_v0_ioctl+0x5c>
18013746:	e3fffe95 	bsr      	0x18013470	// 18013470 <hg_audac_v0_set_digital_gain>
1801374a:	1490      	pop      	r15
1801374c:	1004      	lrw      	r0, 0x20002050	// 1801375c <hg_audac_v0_ioctl+0x5c>
1801374e:	e3fffea1 	bsr      	0x18013490	// 18013490 <hg_audac_v0_soft_mute>
18013752:	07fc      	br      	0x1801374a	// 1801374a <hg_audac_v0_ioctl+0x4a>
18013754:	3000      	movi      	r0, 0
18013756:	2800      	subi      	r0, 1
18013758:	07f9      	br      	0x1801374a	// 1801374a <hg_audac_v0_ioctl+0x4a>
1801375a:	0000      	.short	0x0000
1801375c:	20002050 	.long	0x20002050

18013760 <hg_audac_v0_request_irq>:
18013760:	14d2      	push      	r4-r5, r15
18013762:	ea8d001b 	lrw      	r13, 0x20002050	// 180137cc <hg_audac_v0_request_irq+0x6c>
18013766:	6d37      	mov      	r4, r13
18013768:	d98d0007 	ld.b      	r12, (r13, 0x7)
1801376c:	d8ad2000 	ld.w      	r5, (r13, 0x0)
18013770:	e58c2002 	andi      	r12, r12, 2
18013774:	9503      	ld.w      	r0, (r5, 0xc)
18013776:	e90c0027 	bez      	r12, 0x180137c4	// 180137c4 <hg_audac_v0_request_irq+0x64>
1801377a:	b567      	st.w      	r3, (r5, 0x1c)
1801377c:	e4612001 	andi      	r3, r1, 1
18013780:	b546      	st.w      	r2, (r5, 0x18)
18013782:	e9030006 	bez      	r3, 0x1801378e	// 1801378e <hg_audac_v0_request_irq+0x2e>
18013786:	906a      	ld.w      	r3, (r0, 0x28)
18013788:	ec630002 	ori      	r3, r3, 2
1801378c:	b06a      	st.w      	r3, (r0, 0x28)
1801378e:	e4212002 	andi      	r1, r1, 2
18013792:	e9010006 	bez      	r1, 0x1801379e	// 1801379e <hg_audac_v0_request_irq+0x3e>
18013796:	906a      	ld.w      	r3, (r0, 0x28)
18013798:	ec630001 	ori      	r3, r3, 1
1801379c:	b06a      	st.w      	r3, (r0, 0x28)
1801379e:	104c      	lrw      	r2, 0x20002050	// 180137cc <hg_audac_v0_request_irq+0x6c>
180137a0:	102c      	lrw      	r1, 0x180133e0	// 180137d0 <hg_audac_v0_request_irq+0x70>
180137a2:	8d10      	ld.h      	r0, (r5, 0x20)
180137a4:	e3ff7f9c 	bsr      	0x180036dc	// 180036dc <request_irq>
180137a8:	9460      	ld.w      	r3, (r4, 0x0)
180137aa:	3201      	movi      	r2, 1
180137ac:	8b70      	ld.h      	r3, (r3, 0x20)
180137ae:	c4a354c1 	zext      	r1, r3, 6, 5
180137b2:	e463201f 	andi      	r3, r3, 31
180137b6:	c4624023 	lsl      	r3, r2, r3
180137ba:	1047      	lrw      	r2, 0xe000e100	// 180137d4 <hg_audac_v0_request_irq+0x74>
180137bc:	d4220883 	str.w      	r3, (r2, r1 << 2)
180137c0:	3000      	movi      	r0, 0
180137c2:	1492      	pop      	r4-r5, r15
180137c4:	3000      	movi      	r0, 0
180137c6:	2800      	subi      	r0, 1
180137c8:	07fd      	br      	0x180137c2	// 180137c2 <hg_audac_v0_request_irq+0x62>
180137ca:	0000      	.short	0x0000
180137cc:	20002050 	.long	0x20002050
180137d0:	180133e0 	.long	0x180133e0
180137d4:	e000e100 	.long	0xe000e100

180137d8 <hg_audac_v0_release_irq>:
180137d8:	104e      	lrw      	r2, 0x20002050	// 18013810 <hg_audac_v0_release_irq+0x38>
180137da:	9260      	ld.w      	r3, (r2, 0x0)
180137dc:	8247      	ld.b      	r2, (r2, 0x7)
180137de:	e4422002 	andi      	r2, r2, 2
180137e2:	9363      	ld.w      	r3, (r3, 0xc)
180137e4:	e9020012 	bez      	r2, 0x18013808	// 18013808 <hg_audac_v0_release_irq+0x30>
180137e8:	e4412001 	andi      	r2, r1, 1
180137ec:	e9020005 	bez      	r2, 0x180137f6	// 180137f6 <hg_audac_v0_release_irq+0x1e>
180137f0:	934a      	ld.w      	r2, (r3, 0x28)
180137f2:	3a81      	bclri      	r2, 1
180137f4:	b34a      	st.w      	r2, (r3, 0x28)
180137f6:	e4012002 	andi      	r0, r1, 2
180137fa:	e9000006 	bez      	r0, 0x18013806	// 18013806 <hg_audac_v0_release_irq+0x2e>
180137fe:	934a      	ld.w      	r2, (r3, 0x28)
18013800:	3a80      	bclri      	r2, 0
18013802:	b34a      	st.w      	r2, (r3, 0x28)
18013804:	3000      	movi      	r0, 0
18013806:	783c      	jmp      	r15
18013808:	3000      	movi      	r0, 0
1801380a:	2800      	subi      	r0, 1
1801380c:	07fd      	br      	0x18013806	// 18013806 <hg_audac_v0_release_irq+0x2e>
1801380e:	0000      	.short	0x0000
18013810:	20002050 	.long	0x20002050

18013814 <audio_ana_config_power_on>:
18013814:	14d2      	push      	r4-r5, r15
18013816:	1422      	subi      	r14, r14, 8
18013818:	ea048000 	movi      	r4, 32768
1801381c:	3cbe      	bseti      	r4, 30
1801381e:	3300      	movi      	r3, 0
18013820:	b860      	st.w      	r3, (r14, 0x0)
18013822:	b861      	st.w      	r3, (r14, 0x4)
18013824:	d864202b 	ld.w      	r3, (r4, 0xac)
18013828:	3bb9      	bseti      	r3, 25
1801382a:	6d43      	mov      	r5, r0
1801382c:	30fa      	movi      	r0, 250
1801382e:	dc64202b 	st.w      	r3, (r4, 0xac)
18013832:	4002      	lsli      	r0, r0, 2
18013834:	e3ff8c60 	bsr      	0x180050f4	// 180050f4 <delay_us>
18013838:	d864202b 	ld.w      	r3, (r4, 0xac)
1801383c:	3bbb      	bseti      	r3, 27
1801383e:	30fa      	movi      	r0, 250
18013840:	dc64202b 	st.w      	r3, (r4, 0xac)
18013844:	4002      	lsli      	r0, r0, 2
18013846:	e3ff8c57 	bsr      	0x180050f4	// 180050f4 <delay_us>
1801384a:	d864202b 	ld.w      	r3, (r4, 0xac)
1801384e:	3bbc      	bseti      	r3, 28
18013850:	30fa      	movi      	r0, 250
18013852:	dc64202b 	st.w      	r3, (r4, 0xac)
18013856:	4002      	lsli      	r0, r0, 2
18013858:	e3ff8c4e 	bsr      	0x180050f4	// 180050f4 <delay_us>
1801385c:	d864202b 	ld.w      	r3, (r4, 0xac)
18013860:	3bbd      	bseti      	r3, 29
18013862:	dc64202b 	st.w      	r3, (r4, 0xac)
18013866:	d864202b 	ld.w      	r3, (r4, 0xac)
1801386a:	3bba      	bseti      	r3, 26
1801386c:	dc64202b 	st.w      	r3, (r4, 0xac)
18013870:	8524      	ld.b      	r1, (r5, 0x4)
18013872:	7484      	zextb      	r2, r1
18013874:	d86e0004 	ld.b      	r3, (r14, 0x4)
18013878:	e9220003 	bnez      	r2, 0x1801387e	// 1801387e <audio_ana_config_power_on+0x6a>
1801387c:	310a      	movi      	r1, 10
1801387e:	c4615c60 	ins      	r3, r1, 3, 0
18013882:	8525      	ld.b      	r1, (r5, 0x5)
18013884:	dc6e0004 	st.b      	r3, (r14, 0x4)
18013888:	e4612007 	andi      	r3, r1, 7
1801388c:	e923004f 	bnez      	r3, 0x1801392a	// 1801392a <audio_ana_config_power_on+0x116>
18013890:	d86e0005 	ld.b      	r3, (r14, 0x5)
18013894:	3104      	movi      	r1, 4
18013896:	e44220f0 	andi      	r2, r2, 240
1801389a:	c4615c40 	ins      	r3, r1, 2, 0
1801389e:	dc6e0005 	st.b      	r3, (r14, 0x5)
180138a2:	e9220047 	bnez      	r2, 0x18013930	// 18013930 <audio_ana_config_power_on+0x11c>
180138a6:	d86e0004 	ld.b      	r3, (r14, 0x4)
180138aa:	3208      	movi      	r2, 8
180138ac:	c4625c64 	ins      	r3, r2, 7, 4
180138b0:	dc6e0004 	st.b      	r3, (r14, 0x4)
180138b4:	ea038000 	movi      	r3, 32768
180138b8:	3bbe      	bseti      	r3, 30
180138ba:	d84e0004 	ld.b      	r2, (r14, 0x4)
180138be:	ea20ffc4 	movih      	r0, 65476
180138c2:	d823202b 	ld.w      	r1, (r3, 0xac)
180138c6:	2800      	subi      	r0, 1
180138c8:	e442200f 	andi      	r2, r2, 15
180138cc:	6840      	and      	r1, r0
180138ce:	4252      	lsli      	r2, r2, 18
180138d0:	6c84      	or      	r2, r1
180138d2:	dc43202b 	st.w      	r2, (r3, 0xac)
180138d6:	d843202b 	ld.w      	r2, (r3, 0xac)
180138da:	ec420003 	ori      	r2, r2, 3
180138de:	dc43202b 	st.w      	r2, (r3, 0xac)
180138e2:	d843202b 	ld.w      	r2, (r3, 0xac)
180138e6:	ec4200f0 	ori      	r2, r2, 240
180138ea:	dc43202b 	st.w      	r2, (r3, 0xac)
180138ee:	d84e0005 	ld.b      	r2, (r14, 0x5)
180138f2:	ea20fe40 	movih      	r0, 65088
180138f6:	d823202b 	ld.w      	r1, (r3, 0xac)
180138fa:	2800      	subi      	r0, 1
180138fc:	e4422007 	andi      	r2, r2, 7
18013900:	6840      	and      	r1, r0
18013902:	4256      	lsli      	r2, r2, 22
18013904:	6c84      	or      	r2, r1
18013906:	dc43202b 	st.w      	r2, (r3, 0xac)
1801390a:	d84e0004 	ld.b      	r2, (r14, 0x4)
1801390e:	d823202b 	ld.w      	r1, (r3, 0xac)
18013912:	c7605020 	bmaski      	r0, 28
18013916:	c6404900 	rotli      	r0, r0, 18
1801391a:	4a44      	lsri      	r2, r2, 4
1801391c:	6840      	and      	r1, r0
1801391e:	424e      	lsli      	r2, r2, 14
18013920:	6c84      	or      	r2, r1
18013922:	dc43202b 	st.w      	r2, (r3, 0xac)
18013926:	1402      	addi      	r14, r14, 8
18013928:	1492      	pop      	r4-r5, r15
1801392a:	d86e0005 	ld.b      	r3, (r14, 0x5)
1801392e:	07b4      	br      	0x18013896	// 18013896 <audio_ana_config_power_on+0x82>
18013930:	8564      	ld.b      	r3, (r5, 0x4)
18013932:	d84e0004 	ld.b      	r2, (r14, 0x4)
18013936:	c48354e3 	zext      	r3, r3, 7, 4
1801393a:	c4435c64 	ins      	r2, r3, 7, 4
1801393e:	dc4e0004 	st.b      	r2, (r14, 0x4)
18013942:	07b9      	br      	0x180138b4	// 180138b4 <audio_ana_config_power_on+0xa0>

18013944 <audio_ana_config_adc_on>:
18013944:	14d3      	push      	r4-r6, r15
18013946:	8860      	ld.h      	r3, (r0, 0x0)
18013948:	3202      	movi      	r2, 2
1801394a:	2b02      	subi      	r3, 3
1801394c:	ea048000 	movi      	r4, 32768
18013950:	3cbe      	bseti      	r4, 30
18013952:	64c8      	cmphs      	r2, r3
18013954:	6d83      	mov      	r6, r0
18013956:	30fa      	movi      	r0, 250
18013958:	c4000505 	mvc      	r5
1801395c:	7008      	lsl      	r0, r2
1801395e:	e3ff8bcb 	bsr      	0x180050f4	// 180050f4 <delay_us>
18013962:	2500      	addi      	r5, 1
18013964:	d864202b 	ld.w      	r3, (r4, 0xac)
18013968:	3b82      	bclri      	r3, 2
1801396a:	3b83      	bclri      	r3, 3
1801396c:	45a2      	lsli      	r5, r5, 2
1801396e:	6cd4      	or      	r3, r5
18013970:	30fa      	movi      	r0, 250
18013972:	dc64202b 	st.w      	r3, (r4, 0xac)
18013976:	4002      	lsli      	r0, r0, 2
18013978:	e3ff8bbe 	bsr      	0x180050f4	// 180050f4 <delay_us>
1801397c:	d864202b 	ld.w      	r3, (r4, 0xac)
18013980:	ec630100 	ori      	r3, r3, 256
18013984:	30fa      	movi      	r0, 250
18013986:	dc64202b 	st.w      	r3, (r4, 0xac)
1801398a:	4002      	lsli      	r0, r0, 2
1801398c:	e3ff8bb4 	bsr      	0x180050f4	// 180050f4 <delay_us>
18013990:	d864202b 	ld.w      	r3, (r4, 0xac)
18013994:	ec630200 	ori      	r3, r3, 512
18013998:	dc64202b 	st.w      	r3, (r4, 0xac)
1801399c:	d864202b 	ld.w      	r3, (r4, 0xac)
180139a0:	ec630800 	ori      	r3, r3, 2048
180139a4:	dc64202b 	st.w      	r3, (r4, 0xac)
180139a8:	d864202e 	ld.w      	r3, (r4, 0xb8)
180139ac:	3b80      	bclri      	r3, 0
180139ae:	3b81      	bclri      	r3, 1
180139b0:	ec630002 	ori      	r3, r3, 2
180139b4:	dc64202e 	st.w      	r3, (r4, 0xb8)
180139b8:	d864202e 	ld.w      	r3, (r4, 0xb8)
180139bc:	ec63000c 	ori      	r3, r3, 12
180139c0:	dc64202e 	st.w      	r3, (r4, 0xb8)
180139c4:	3200      	movi      	r2, 0
180139c6:	d864202e 	ld.w      	r3, (r4, 0xb8)
180139ca:	2a70      	subi      	r2, 113
180139cc:	68c8      	and      	r3, r2
180139ce:	dc64202e 	st.w      	r3, (r4, 0xb8)
180139d2:	8e61      	ld.h      	r3, (r6, 0x2)
180139d4:	3b41      	cmpnei      	r3, 1
180139d6:	0815      	bt      	0x18013a00	// 18013a00 <audio_ana_config_adc_on+0xbc>
180139d8:	d864202e 	ld.w      	r3, (r4, 0xb8)
180139dc:	ec630080 	ori      	r3, r3, 128
180139e0:	dc64202e 	st.w      	r3, (r4, 0xb8)
180139e4:	d864202e 	ld.w      	r3, (r4, 0xb8)
180139e8:	3b88      	bclri      	r3, 8
180139ea:	dc64202e 	st.w      	r3, (r4, 0xb8)
180139ee:	ea028000 	movi      	r2, 32768
180139f2:	3abe      	bseti      	r2, 30
180139f4:	d862202a 	ld.w      	r3, (r2, 0xa8)
180139f8:	3b9b      	bclri      	r3, 27
180139fa:	dc62202a 	st.w      	r3, (r2, 0xa8)
180139fe:	1493      	pop      	r4-r6, r15
18013a00:	3b42      	cmpnei      	r3, 2
18013a02:	0bf6      	bt      	0x180139ee	// 180139ee <audio_ana_config_adc_on+0xaa>
18013a04:	d864202e 	ld.w      	r3, (r4, 0xb8)
18013a08:	3b87      	bclri      	r3, 7
18013a0a:	dc64202e 	st.w      	r3, (r4, 0xb8)
18013a0e:	d864202e 	ld.w      	r3, (r4, 0xb8)
18013a12:	ec630100 	ori      	r3, r3, 256
18013a16:	07ea      	br      	0x180139ea	// 180139ea <audio_ana_config_adc_on+0xa6>

18013a18 <audio_ana_config_dac_on>:
18013a18:	14d3      	push      	r4-r6, r15
18013a1a:	ea048000 	movi      	r4, 32768
18013a1e:	3cbe      	bseti      	r4, 30
18013a20:	30fa      	movi      	r0, 250
18013a22:	4002      	lsli      	r0, r0, 2
18013a24:	e3ff8b68 	bsr      	0x180050f4	// 180050f4 <delay_us>
18013a28:	d864202a 	ld.w      	r3, (r4, 0xa8)
18013a2c:	3bb3      	bseti      	r3, 19
18013a2e:	30fa      	movi      	r0, 250
18013a30:	dc64202a 	st.w      	r3, (r4, 0xa8)
18013a34:	4002      	lsli      	r0, r0, 2
18013a36:	e3ff8b5f 	bsr      	0x180050f4	// 180050f4 <delay_us>
18013a3a:	d864202a 	ld.w      	r3, (r4, 0xa8)
18013a3e:	3bb0      	bseti      	r3, 16
18013a40:	30fa      	movi      	r0, 250
18013a42:	dc64202a 	st.w      	r3, (r4, 0xa8)
18013a46:	4002      	lsli      	r0, r0, 2
18013a48:	e3ff8b56 	bsr      	0x180050f4	// 180050f4 <delay_us>
18013a4c:	d864202a 	ld.w      	r3, (r4, 0xa8)
18013a50:	3b92      	bclri      	r3, 18
18013a52:	dc64202a 	st.w      	r3, (r4, 0xa8)
18013a56:	d864202a 	ld.w      	r3, (r4, 0xa8)
18013a5a:	3b8d      	bclri      	r3, 13
18013a5c:	30fa      	movi      	r0, 250
18013a5e:	dc64202a 	st.w      	r3, (r4, 0xa8)
18013a62:	4002      	lsli      	r0, r0, 2
18013a64:	e3ff8b48 	bsr      	0x180050f4	// 180050f4 <delay_us>
18013a68:	d864202a 	ld.w      	r3, (r4, 0xa8)
18013a6c:	ec638000 	ori      	r3, r3, 32768
18013a70:	3680      	movi      	r6, 128
18013a72:	dc64202a 	st.w      	r3, (r4, 0xa8)
18013a76:	3500      	movi      	r5, 0
18013a78:	46d4      	lsli      	r6, r6, 20
18013a7a:	30fa      	movi      	r0, 250
18013a7c:	4002      	lsli      	r0, r0, 2
18013a7e:	e3ff8b3b 	bsr      	0x180050f4	// 180050f4 <delay_us>
18013a82:	ea22f810 	movih      	r2, 63504
18013a86:	d864202a 	ld.w      	r3, (r4, 0xa8)
18013a8a:	2a00      	subi      	r2, 1
18013a8c:	68c8      	and      	r3, r2
18013a8e:	6cd4      	or      	r3, r5
18013a90:	dc64202a 	st.w      	r3, (r4, 0xa8)
18013a94:	3380      	movi      	r3, 128
18013a96:	436d      	lsli      	r3, r3, 13
18013a98:	614c      	addu      	r5, r3
18013a9a:	6596      	cmpne      	r5, r6
18013a9c:	0bef      	bt      	0x18013a7a	// 18013a7a <audio_ana_config_dac_on+0x62>
18013a9e:	30fa      	movi      	r0, 250
18013aa0:	4002      	lsli      	r0, r0, 2
18013aa2:	e3ff8b29 	bsr      	0x180050f4	// 180050f4 <delay_us>
18013aa6:	d864202a 	ld.w      	r3, (r4, 0xa8)
18013aaa:	3bb1      	bseti      	r3, 17
18013aac:	30fa      	movi      	r0, 250
18013aae:	dc64202a 	st.w      	r3, (r4, 0xa8)
18013ab2:	4002      	lsli      	r0, r0, 2
18013ab4:	e3ff8b20 	bsr      	0x180050f4	// 180050f4 <delay_us>
18013ab8:	d864202a 	ld.w      	r3, (r4, 0xa8)
18013abc:	3b8e      	bclri      	r3, 14
18013abe:	dc64202a 	st.w      	r3, (r4, 0xa8)
18013ac2:	946b      	ld.w      	r3, (r4, 0x2c)
18013ac4:	ec632000 	ori      	r3, r3, 8192
18013ac8:	b46b      	st.w      	r3, (r4, 0x2c)
18013aca:	1493      	pop      	r4-r6, r15

18013acc <sysheap_init>:
18013acc:	14d5      	push      	r4-r8, r15
18013ace:	58ce      	addi      	r6, r0, 4
18013ad0:	6d03      	mov      	r4, r0
18013ad2:	6dc7      	mov      	r7, r1
18013ad4:	6e0b      	mov      	r8, r2
18013ad6:	3100      	movi      	r1, 0
18013ad8:	3228      	movi      	r2, 40
18013ada:	6c1b      	mov      	r0, r6
18013adc:	6d4f      	mov      	r5, r3
18013ade:	e00011c5 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
18013ae2:	3308      	movi      	r3, 8
18013ae4:	a469      	st.b      	r3, (r4, 0x9)
18013ae6:	e4652002 	andi      	r3, r5, 2
18013aea:	3204      	movi      	r2, 4
18013aec:	b4ab      	st.w      	r5, (r4, 0x2c)
18013aee:	e903000f 	bez      	r3, 0x18013b0c	// 18013b0c <sysheap_init+0x40>
18013af2:	8c65      	ld.h      	r3, (r4, 0xa)
18013af4:	c4625c67 	ins      	r3, r2, 10, 7
18013af8:	ac65      	st.h      	r3, (r4, 0xa)
18013afa:	3108      	movi      	r1, 8
18013afc:	8469      	ld.b      	r3, (r4, 0x9)
18013afe:	c4615ca1 	ins      	r3, r1, 6, 1
18013b02:	a469      	st.b      	r3, (r4, 0x9)
18013b04:	9462      	ld.w      	r3, (r4, 0x8)
18013b06:	c4625c6f 	ins      	r3, r2, 18, 15
18013b0a:	b462      	st.w      	r3, (r4, 0x8)
18013b0c:	e4652001 	andi      	r3, r5, 1
18013b10:	e903000d 	bez      	r3, 0x18013b2a	// 18013b2a <sysheap_init+0x5e>
18013b14:	8469      	ld.b      	r3, (r4, 0x9)
18013b16:	c42354c2 	zext      	r2, r3, 6, 1
18013b1a:	842a      	ld.b      	r1, (r4, 0xa)
18013b1c:	c4225c63 	ins      	r1, r2, 6, 3
18013b20:	2213      	addi      	r2, 20
18013b22:	c4625ca1 	ins      	r3, r2, 6, 1
18013b26:	a42a      	st.b      	r1, (r4, 0xa)
18013b28:	a469      	st.b      	r3, (r4, 0x9)
18013b2a:	e4a52004 	andi      	r5, r5, 4
18013b2e:	e9050007 	bez      	r5, 0x18013b3c	// 18013b3c <sysheap_init+0x70>
18013b32:	8c64      	ld.h      	r3, (r4, 0x8)
18013b34:	3210      	movi      	r2, 16
18013b36:	c4625c84 	ins      	r3, r2, 8, 4
18013b3a:	ac64      	st.h      	r3, (r4, 0x8)
18013b3c:	6ca3      	mov      	r2, r8
18013b3e:	6c5f      	mov      	r1, r7
18013b40:	6c1b      	mov      	r0, r6
18013b42:	e00001d7 	bsr      	0x18013ef0	// 18013ef0 <mmpool_init>
18013b46:	1495      	pop      	r4-r8, r15

18013b48 <sysheap_alloc>:
18013b48:	14d5      	push      	r4-r8, r15
18013b4a:	1422      	subi      	r14, r14, 8
18013b4c:	6dc3      	mov      	r7, r0
18013b4e:	2003      	addi      	r0, 4
18013b50:	6e07      	mov      	r8, r1
18013b52:	6d4b      	mov      	r5, r2
18013b54:	6d8f      	mov      	r6, r3
18013b56:	e000004b 	bsr      	0x18013bec	// 18013bec <mmpool_alloc>
18013b5a:	6d03      	mov      	r4, r0
18013b5c:	e920000e 	bnez      	r0, 0x18013b78	// 18013b78 <sysheap_alloc+0x30>
18013b60:	9720      	ld.w      	r1, (r7, 0x0)
18013b62:	e906000e 	bez      	r6, 0x18013b7e	// 18013b7e <sysheap_alloc+0x36>
18013b66:	6cd7      	mov      	r3, r5
18013b68:	6d43      	mov      	r5, r0
18013b6a:	b860      	st.w      	r3, (r14, 0x0)
18013b6c:	b8c1      	st.w      	r6, (r14, 0x4)
18013b6e:	6cd7      	mov      	r3, r5
18013b70:	6ca3      	mov      	r2, r8
18013b72:	1005      	lrw      	r0, 0x18018691	// 18013b84 <sysheap_alloc+0x3c>
18013b74:	e3ffc7a8 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18013b78:	6c13      	mov      	r0, r4
18013b7a:	1402      	addi      	r14, r14, 8
18013b7c:	1495      	pop      	r4-r8, r15
18013b7e:	1063      	lrw      	r3, 0x180166c5	// 18013b88 <sysheap_alloc+0x40>
18013b80:	07f5      	br      	0x18013b6a	// 18013b6a <sysheap_alloc+0x22>
18013b82:	0000      	.short	0x0000
18013b84:	18018691 	.long	0x18018691
18013b88:	180166c5 	.long	0x180166c5

18013b8c <sysheap_free>:
18013b8c:	14d0      	push      	r15
18013b8e:	e9010005 	bez      	r1, 0x18013b98	// 18013b98 <sysheap_free+0xc>
18013b92:	2003      	addi      	r0, 4
18013b94:	e00000ce 	bsr      	0x18013d30	// 18013d30 <mmpool_free>
18013b98:	1490      	pop      	r15
	...

18013b9c <sysheap_freesize>:
18013b9c:	14d0      	push      	r15
18013b9e:	2003      	addi      	r0, 4
18013ba0:	3100      	movi      	r1, 0
18013ba2:	e00001d1 	bsr      	0x18013f44	// 18013f44 <mmpool_free_size>
18013ba6:	1490      	pop      	r15

18013ba8 <list_del>:
18013ba8:	9061      	ld.w      	r3, (r0, 0x4)
18013baa:	9040      	ld.w      	r2, (r0, 0x0)
18013bac:	e9030006 	bez      	r3, 0x18013bb8	// 18013bb8 <list_del+0x10>
18013bb0:	e9020004 	bez      	r2, 0x18013bb8	// 18013bb8 <list_del+0x10>
18013bb4:	b261      	st.w      	r3, (r2, 0x4)
18013bb6:	b340      	st.w      	r2, (r3, 0x0)
18013bb8:	3300      	movi      	r3, 0
18013bba:	b060      	st.w      	r3, (r0, 0x0)
18013bbc:	b061      	st.w      	r3, (r0, 0x4)
18013bbe:	783c      	jmp      	r15

18013bc0 <mmpool_valid_addr>:
18013bc0:	8064      	ld.b      	r3, (r0, 0x4)
18013bc2:	e463200f 	andi      	r3, r3, 15
18013bc6:	2007      	addi      	r0, 8
18013bc8:	3200      	movi      	r2, 0
18013bca:	64c9      	cmplt      	r2, r3
18013bcc:	0803      	bt      	0x18013bd2	// 18013bd2 <mmpool_valid_addr+0x12>
18013bce:	3000      	movi      	r0, 0
18013bd0:	783c      	jmp      	r15
18013bd2:	d9802000 	ld.w      	r12, (r0, 0x0)
18013bd6:	6704      	cmphs      	r1, r12
18013bd8:	0c05      	bf      	0x18013be2	// 18013be2 <mmpool_valid_addr+0x22>
18013bda:	d9802001 	ld.w      	r12, (r0, 0x4)
18013bde:	6704      	cmphs      	r1, r12
18013be0:	0c04      	bf      	0x18013be8	// 18013be8 <mmpool_valid_addr+0x28>
18013be2:	2200      	addi      	r2, 1
18013be4:	2007      	addi      	r0, 8
18013be6:	07f2      	br      	0x18013bca	// 18013bca <mmpool_valid_addr+0xa>
18013be8:	3001      	movi      	r0, 1
18013bea:	07f3      	br      	0x18013bd0	// 18013bd0 <mmpool_valid_addr+0x10>

18013bec <mmpool_alloc>:
18013bec:	14d7      	push      	r4-r10, r15
18013bee:	6dcb      	mov      	r7, r2
18013bf0:	8085      	ld.b      	r4, (r0, 0x5)
18013bf2:	9041      	ld.w      	r2, (r0, 0x4)
18013bf4:	c5e25642 	zext      	r2, r2, 18, 15
18013bf8:	c42454c4 	zext      	r4, r4, 6, 1
18013bfc:	6108      	addu      	r4, r2
18013bfe:	6104      	addu      	r4, r1
18013c00:	6e0f      	mov      	r8, r3
18013c02:	3c2b      	cmplti      	r4, 12
18013c04:	8862      	ld.h      	r3, (r0, 0x4)
18013c06:	320c      	movi      	r2, 12
18013c08:	c4820c40 	inct      	r4, r2, 0
18013c0c:	c4835503 	zext      	r3, r3, 8, 4
18013c10:	610c      	addu      	r4, r3
18013c12:	3200      	movi      	r2, 0
18013c14:	5a6d      	subu      	r3, r2, r3
18013c16:	2c00      	subi      	r4, 1
18013c18:	6d83      	mov      	r6, r0
18013c1a:	690c      	and      	r4, r3
18013c1c:	c0006025 	mfcr      	r5, cr<0, 0>
18013c20:	c0807020 	psrclr      	ie
18013c24:	e4a52040 	andi      	r5, r5, 64
18013c28:	d9202006 	ld.w      	r9, (r0, 0x18)
18013c2c:	e4600017 	addi      	r3, r0, 24
18013c30:	64e6      	cmpne      	r9, r3
18013c32:	080b      	bt      	0x18013c48	// 18013c48 <mmpool_alloc+0x5c>
18013c34:	e9050008 	bez      	r5, 0x18013c44	// 18013c44 <mmpool_alloc+0x58>
18013c38:	ea0a0000 	movi      	r10, 0
18013c3c:	c0807420 	psrset      	ie
18013c40:	e92a0066 	bnez      	r10, 0x18013d0c	// 18013d0c <mmpool_alloc+0x120>
18013c44:	3000      	movi      	r0, 0
18013c46:	1497      	pop      	r4-r10, r15
18013c48:	d9492002 	ld.w      	r10, (r9, 0x8)
18013c4c:	6528      	cmphs      	r10, r4
18013c4e:	0c69      	bf      	0x18013d20	// 18013d20 <mmpool_alloc+0x134>
18013c50:	8625      	ld.b      	r1, (r6, 0x5)
18013c52:	9601      	ld.w      	r0, (r6, 0x4)
18013c54:	c5e05640 	zext      	r0, r0, 18, 15
18013c58:	c42154c1 	zext      	r1, r1, 6, 1
18013c5c:	6040      	addu      	r1, r0
18013c5e:	392b      	cmplti      	r1, 12
18013c60:	300c      	movi      	r0, 12
18013c62:	8e42      	ld.h      	r2, (r6, 0x4)
18013c64:	c4200c40 	inct      	r1, r0, 0
18013c68:	c4825502 	zext      	r2, r2, 8, 4
18013c6c:	6048      	addu      	r1, r2
18013c6e:	3000      	movi      	r0, 0
18013c70:	2102      	addi      	r1, 3
18013c72:	5849      	subu      	r2, r0, r2
18013c74:	c48a0083 	subu      	r3, r10, r4
18013c78:	6848      	and      	r1, r2
18013c7a:	644c      	cmphs      	r3, r1
18013c7c:	0c4d      	bf      	0x18013d16	// 18013d16 <mmpool_alloc+0x12a>
18013c7e:	c4890022 	addu      	r2, r9, r4
18013c82:	b262      	st.w      	r3, (r2, 0x8)
18013c84:	d8692000 	ld.w      	r3, (r9, 0x0)
18013c88:	b260      	st.w      	r3, (r2, 0x0)
18013c8a:	d8692001 	ld.w      	r3, (r9, 0x4)
18013c8e:	b261      	st.w      	r3, (r2, 0x4)
18013c90:	d8692001 	ld.w      	r3, (r9, 0x4)
18013c94:	b340      	st.w      	r2, (r3, 0x0)
18013c96:	d8692000 	ld.w      	r3, (r9, 0x0)
18013c9a:	b341      	st.w      	r2, (r3, 0x4)
18013c9c:	dc892000 	st.w      	r4, (r9, 0x0)
18013ca0:	8666      	ld.b      	r3, (r6, 0x6)
18013ca2:	e4432078 	andi      	r2, r3, 120
18013ca6:	6ea7      	mov      	r10, r9
18013ca8:	e902001f 	bez      	r2, 0x18013ce6	// 18013ce6 <mmpool_alloc+0xfa>
18013cac:	c46354c3 	zext      	r3, r3, 6, 3
18013cb0:	9648      	ld.w      	r2, (r6, 0x20)
18013cb2:	60e4      	addu      	r3, r9
18013cb4:	b261      	st.w      	r3, (r2, 0x4)
18013cb6:	b340      	st.w      	r2, (r3, 0x0)
18013cb8:	e446001f 	addi      	r2, r6, 32
18013cbc:	b341      	st.w      	r2, (r3, 0x4)
18013cbe:	b668      	st.w      	r3, (r6, 0x20)
18013cc0:	8666      	ld.b      	r3, (r6, 0x6)
18013cc2:	c46354c3 	zext      	r3, r3, 6, 3
18013cc6:	60e4      	addu      	r3, r9
18013cc8:	b3e2      	st.w      	r7, (r3, 0x8)
18013cca:	8666      	ld.b      	r3, (r6, 0x6)
18013ccc:	c46354c3 	zext      	r3, r3, 6, 3
18013cd0:	60e4      	addu      	r3, r9
18013cd2:	dd032003 	st.w      	r8, (r3, 0xc)
18013cd6:	86e6      	ld.b      	r7, (r6, 0x6)
18013cd8:	c46754c7 	zext      	r7, r7, 6, 3
18013cdc:	270f      	addi      	r7, 16
18013cde:	61e4      	addu      	r7, r9
18013ce0:	e0000522 	bsr      	0x18014724	// 18014724 <os_jiffies>
18013ce4:	b700      	st.w      	r0, (r7, 0x0)
18013ce6:	8e63      	ld.h      	r3, (r6, 0x6)
18013ce8:	e4432780 	andi      	r2, r3, 1920
18013cec:	e902000e 	bez      	r2, 0x18013d08	// 18013d08 <mmpool_alloc+0x11c>
18013cf0:	c4e35543 	zext      	r3, r3, 10, 7
18013cf4:	104d      	lrw      	r2, 0x695abeaf	// 18013d28 <mmpool_alloc+0x13c>
18013cf6:	d4690822 	str.w      	r2, (r9, r3 << 0)
18013cfa:	9661      	ld.w      	r3, (r6, 0x4)
18013cfc:	c5e35643 	zext      	r3, r3, 18, 15
18013d00:	624e      	subu      	r9, r3
18013d02:	106b      	lrw      	r3, 0xfaeba596	// 18013d2c <mmpool_alloc+0x140>
18013d04:	d4890823 	str.w      	r3, (r9, r4 << 0)
18013d08:	e925ff9a 	bnez      	r5, 0x18013c3c	// 18013c3c <mmpool_alloc+0x50>
18013d0c:	8605      	ld.b      	r0, (r6, 0x5)
18013d0e:	c42054c0 	zext      	r0, r0, 6, 1
18013d12:	6028      	addu      	r0, r10
18013d14:	0799      	br      	0x18013c46	// 18013c46 <mmpool_alloc+0x5a>
18013d16:	6c27      	mov      	r0, r9
18013d18:	e3ffff48 	bsr      	0x18013ba8	// 18013ba8 <list_del>
18013d1c:	6d2b      	mov      	r4, r10
18013d1e:	07bf      	br      	0x18013c9c	// 18013c9c <mmpool_alloc+0xb0>
18013d20:	d9292000 	ld.w      	r9, (r9, 0x0)
18013d24:	0786      	br      	0x18013c30	// 18013c30 <mmpool_alloc+0x44>
18013d26:	0000      	.short	0x0000
18013d28:	695abeaf 	.long	0x695abeaf
18013d2c:	faeba596 	.long	0xfaeba596

18013d30 <mmpool_free>:
18013d30:	14d5      	push      	r4-r8, r15
18013d32:	6d43      	mov      	r5, r0
18013d34:	6d07      	mov      	r4, r1
18013d36:	e3ffff45 	bsr      	0x18013bc0	// 18013bc0 <mmpool_valid_addr>
18013d3a:	e9200008 	bnez      	r0, 0x18013d4a	// 18013d4a <mmpool_free+0x1a>
18013d3e:	6c93      	mov      	r2, r4
18013d40:	6c57      	mov      	r1, r5
18013d42:	111e      	lrw      	r0, 0x180186ca	// 18013e38 <mmpool_free+0x108>
18013d44:	e3ffc6c0 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18013d48:	1495      	pop      	r4-r8, r15
18013d4a:	8565      	ld.b      	r3, (r5, 0x5)
18013d4c:	c42354c3 	zext      	r3, r3, 6, 1
18013d50:	610e      	subu      	r4, r3
18013d52:	8d63      	ld.h      	r3, (r5, 0x6)
18013d54:	e4432780 	andi      	r2, r3, 1920
18013d58:	94c0      	ld.w      	r6, (r4, 0x0)
18013d5a:	e902002c 	bez      	r2, 0x18013db2	// 18013db2 <mmpool_free+0x82>
18013d5e:	c4e35543 	zext      	r3, r3, 10, 7
18013d62:	d0830822 	ldr.w      	r2, (r3, r4 << 0)
18013d66:	1176      	lrw      	r3, 0x695abeaf	// 18013e3c <mmpool_free+0x10c>
18013d68:	64ca      	cmpne      	r2, r3
18013d6a:	0c06      	bf      	0x18013d76	// 18013d76 <mmpool_free+0x46>
18013d6c:	1155      	lrw      	r2, 0x180186f4	// 18013e40 <mmpool_free+0x110>
18013d6e:	316c      	movi      	r1, 108
18013d70:	1115      	lrw      	r0, 0x180186be	// 18013e44 <mmpool_free+0x114>
18013d72:	e3ff7951 	bsr      	0x18003014	// 18003014 <assert_internal>
18013d76:	9561      	ld.w      	r3, (r5, 0x4)
18013d78:	c5e35643 	zext      	r3, r3, 18, 15
18013d7c:	5c6d      	subu      	r3, r4, r3
18013d7e:	d0c30822 	ldr.w      	r2, (r3, r6 << 0)
18013d82:	1172      	lrw      	r3, 0xfaeba596	// 18013e48 <mmpool_free+0x118>
18013d84:	64ca      	cmpne      	r2, r3
18013d86:	0c06      	bf      	0x18013d92	// 18013d92 <mmpool_free+0x62>
18013d88:	1151      	lrw      	r2, 0x18018724	// 18013e4c <mmpool_free+0x11c>
18013d8a:	316c      	movi      	r1, 108
18013d8c:	110e      	lrw      	r0, 0x180186be	// 18013e44 <mmpool_free+0x114>
18013d8e:	e3ff7943 	bsr      	0x18003014	// 18003014 <assert_internal>
18013d92:	8d63      	ld.h      	r3, (r5, 0x6)
18013d94:	e4432780 	andi      	r2, r3, 1920
18013d98:	e902000d 	bez      	r2, 0x18013db2	// 18013db2 <mmpool_free+0x82>
18013d9c:	c4e35543 	zext      	r3, r3, 10, 7
18013da0:	3200      	movi      	r2, 0
18013da2:	d4830822 	str.w      	r2, (r3, r4 << 0)
18013da6:	9561      	ld.w      	r3, (r5, 0x4)
18013da8:	c5e35643 	zext      	r3, r3, 18, 15
18013dac:	5c6d      	subu      	r3, r4, r3
18013dae:	d4c30822 	str.w      	r2, (r3, r6 << 0)
18013db2:	c0006028 	mfcr      	r8, cr<0, 0>
18013db6:	c0807020 	psrclr      	ie
18013dba:	8506      	ld.b      	r0, (r5, 0x6)
18013dbc:	e4602078 	andi      	r3, r0, 120
18013dc0:	e5082040 	andi      	r8, r8, 64
18013dc4:	e9030007 	bez      	r3, 0x18013dd2	// 18013dd2 <mmpool_free+0xa2>
18013dc8:	c46054c0 	zext      	r0, r0, 6, 3
18013dcc:	6010      	addu      	r0, r4
18013dce:	e3fffeed 	bsr      	0x18013ba8	// 18013ba8 <list_del>
18013dd2:	b4c2      	st.w      	r6, (r4, 0x8)
18013dd4:	9566      	ld.w      	r3, (r5, 0x18)
18013dd6:	e4e50017 	addi      	r7, r5, 24
18013dda:	65ce      	cmpne      	r3, r7
18013ddc:	0807      	bt      	0x18013dea	// 18013dea <mmpool_free+0xba>
18013dde:	9567      	ld.w      	r3, (r5, 0x1c)
18013de0:	b587      	st.w      	r4, (r5, 0x1c)
18013de2:	b4e0      	st.w      	r7, (r4, 0x0)
18013de4:	b461      	st.w      	r3, (r4, 0x4)
18013de6:	b380      	st.w      	r4, (r3, 0x0)
18013de8:	0408      	br      	0x18013df8	// 18013df8 <mmpool_free+0xc8>
18013dea:	64d0      	cmphs      	r4, r3
18013dec:	0823      	bt      	0x18013e32	// 18013e32 <mmpool_free+0x102>
18013dee:	9341      	ld.w      	r2, (r3, 0x4)
18013df0:	b381      	st.w      	r4, (r3, 0x4)
18013df2:	b460      	st.w      	r3, (r4, 0x0)
18013df4:	b441      	st.w      	r2, (r4, 0x4)
18013df6:	b280      	st.w      	r4, (r2, 0x0)
18013df8:	9400      	ld.w      	r0, (r4, 0x0)
18013dfa:	641e      	cmpne      	r7, r0
18013dfc:	0c09      	bf      	0x18013e0e	// 18013e0e <mmpool_free+0xde>
18013dfe:	5c78      	addu      	r3, r4, r6
18013e00:	64c2      	cmpne      	r0, r3
18013e02:	0806      	bt      	0x18013e0e	// 18013e0e <mmpool_free+0xde>
18013e04:	9062      	ld.w      	r3, (r0, 0x8)
18013e06:	618c      	addu      	r6, r3
18013e08:	b4c2      	st.w      	r6, (r4, 0x8)
18013e0a:	e3fffecf 	bsr      	0x18013ba8	// 18013ba8 <list_del>
18013e0e:	9461      	ld.w      	r3, (r4, 0x4)
18013e10:	64de      	cmpne      	r7, r3
18013e12:	0c0b      	bf      	0x18013e28	// 18013e28 <mmpool_free+0xf8>
18013e14:	9322      	ld.w      	r1, (r3, 0x8)
18013e16:	5b44      	addu      	r2, r3, r1
18013e18:	6492      	cmpne      	r4, r2
18013e1a:	0807      	bt      	0x18013e28	// 18013e28 <mmpool_free+0xf8>
18013e1c:	9442      	ld.w      	r2, (r4, 0x8)
18013e1e:	6084      	addu      	r2, r1
18013e20:	b342      	st.w      	r2, (r3, 0x8)
18013e22:	6c13      	mov      	r0, r4
18013e24:	e3fffec2 	bsr      	0x18013ba8	// 18013ba8 <list_del>
18013e28:	e908ff90 	bez      	r8, 0x18013d48	// 18013d48 <mmpool_free+0x18>
18013e2c:	c0807420 	psrset      	ie
18013e30:	078c      	br      	0x18013d48	// 18013d48 <mmpool_free+0x18>
18013e32:	9360      	ld.w      	r3, (r3, 0x0)
18013e34:	07d3      	br      	0x18013dda	// 18013dda <mmpool_free+0xaa>
18013e36:	0000      	.short	0x0000
18013e38:	180186ca 	.long	0x180186ca
18013e3c:	695abeaf 	.long	0x695abeaf
18013e40:	180186f4 	.long	0x180186f4
18013e44:	180186be 	.long	0x180186be
18013e48:	faeba596 	.long	0xfaeba596
18013e4c:	18018724 	.long	0x18018724

18013e50 <mmpool_add_region>:
18013e50:	14c2      	push      	r4-r5
18013e52:	8862      	ld.h      	r3, (r0, 0x4)
18013e54:	c4835504 	zext      	r4, r3, 8, 4
18013e58:	3300      	movi      	r3, 0
18013e5a:	5bb1      	subu      	r5, r3, r4
18013e5c:	d9800005 	ld.b      	r12, (r0, 0x5)
18013e60:	9061      	ld.w      	r3, (r0, 0x4)
18013e62:	c42c54cc 	zext      	r12, r12, 6, 1
18013e66:	c5e35643 	zext      	r3, r3, 18, 15
18013e6a:	60f0      	addu      	r3, r12
18013e6c:	3b2b      	cmplti      	r3, 12
18013e6e:	ea0c000c 	movi      	r12, 12
18013e72:	c46c0c40 	inct      	r3, r12, 0
18013e76:	e5a11000 	subi      	r13, r1, 1
18013e7a:	60d0      	addu      	r3, r4
18013e7c:	6350      	addu      	r13, r4
18013e7e:	2302      	addi      	r3, 3
18013e80:	6b54      	and      	r13, r5
18013e82:	6084      	addu      	r2, r1
18013e84:	68d4      	and      	r3, r5
18013e86:	c5a20081 	subu      	r1, r2, r13
18013e8a:	60d0      	addu      	r3, r4
18013e8c:	64c4      	cmphs      	r1, r3
18013e8e:	0c2c      	bf      	0x18013ee6	// 18013ee6 <mmpool_add_region+0x96>
18013e90:	dc2d2002 	st.w      	r1, (r13, 0x8)
18013e94:	c000602c 	mfcr      	r12, cr<0, 0>
18013e98:	c0807020 	psrclr      	ie
18013e9c:	8064      	ld.b      	r3, (r0, 0x4)
18013e9e:	e463200f 	andi      	r3, r3, 15
18013ea2:	3b23      	cmplti      	r3, 4
18013ea4:	e58c2040 	andi      	r12, r12, 64
18013ea8:	0c0b      	bf      	0x18013ebe	// 18013ebe <mmpool_add_region+0x6e>
18013eaa:	5b82      	addi      	r4, r3, 1
18013eac:	4363      	lsli      	r3, r3, 3
18013eae:	60c0      	addu      	r3, r0
18013eb0:	d480090d 	str.w      	r13, (r0, r4 << 3)
18013eb4:	b343      	st.w      	r2, (r3, 0xc)
18013eb6:	8064      	ld.b      	r3, (r0, 0x4)
18013eb8:	c4645c60 	ins      	r3, r4, 3, 0
18013ebc:	a064      	st.b      	r3, (r0, 0x4)
18013ebe:	9060      	ld.w      	r3, (r0, 0x0)
18013ec0:	604c      	addu      	r1, r3
18013ec2:	9066      	ld.w      	r3, (r0, 0x18)
18013ec4:	b020      	st.w      	r1, (r0, 0x0)
18013ec6:	dda32001 	st.w      	r13, (r3, 0x4)
18013eca:	dc6d2000 	st.w      	r3, (r13, 0x0)
18013ece:	e4600017 	addi      	r3, r0, 24
18013ed2:	dc6d2001 	st.w      	r3, (r13, 0x4)
18013ed6:	dda02006 	st.w      	r13, (r0, 0x18)
18013eda:	e90c0009 	bez      	r12, 0x18013eec	// 18013eec <mmpool_add_region+0x9c>
18013ede:	c0807420 	psrset      	ie
18013ee2:	3000      	movi      	r0, 0
18013ee4:	1482      	pop      	r4-r5
18013ee6:	3000      	movi      	r0, 0
18013ee8:	2800      	subi      	r0, 1
18013eea:	07fd      	br      	0x18013ee4	// 18013ee4 <mmpool_add_region+0x94>
18013eec:	6c33      	mov      	r0, r12
18013eee:	07fb      	br      	0x18013ee4	// 18013ee4 <mmpool_add_region+0x94>

18013ef0 <mmpool_init>:
18013ef0:	14d1      	push      	r4, r15
18013ef2:	8862      	ld.h      	r3, (r0, 0x4)
18013ef4:	e58321f0 	andi      	r12, r3, 496
18013ef8:	e92c0007 	bnez      	r12, 0x18013f06	// 18013f06 <mmpool_init+0x16>
18013efc:	ea0c0004 	movi      	r12, 4
18013f00:	c46c5c84 	ins      	r3, r12, 8, 4
18013f04:	a862      	st.h      	r3, (r0, 0x4)
18013f06:	d9a01002 	ld.h      	r13, (r0, 0x4)
18013f0a:	d9800005 	ld.b      	r12, (r0, 0x5)
18013f0e:	c48d550d 	zext      	r13, r13, 8, 4
18013f12:	c42c54c4 	zext      	r4, r12, 6, 1
18013f16:	74f4      	zextb      	r3, r13
18013f18:	60d0      	addu      	r3, r4
18013f1a:	3400      	movi      	r4, 0
18013f1c:	c5a4008d 	subu      	r13, r4, r13
18013f20:	2b00      	subi      	r3, 1
18013f22:	68f4      	and      	r3, r13
18013f24:	c5835ca1 	ins      	r12, r3, 6, 1
18013f28:	e4600017 	addi      	r3, r0, 24
18013f2c:	b066      	st.w      	r3, (r0, 0x18)
18013f2e:	b067      	st.w      	r3, (r0, 0x1c)
18013f30:	e460001f 	addi      	r3, r0, 32
18013f34:	dd800005 	st.b      	r12, (r0, 0x5)
18013f38:	b068      	st.w      	r3, (r0, 0x20)
18013f3a:	b069      	st.w      	r3, (r0, 0x24)
18013f3c:	e3ffff8a 	bsr      	0x18013e50	// 18013e50 <mmpool_add_region>
18013f40:	1491      	pop      	r4, r15
	...

18013f44 <mmpool_free_size>:
18013f44:	14c1      	push      	r4
18013f46:	c000602c 	mfcr      	r12, cr<0, 0>
18013f4a:	c0807020 	psrclr      	ie
18013f4e:	3300      	movi      	r3, 0
18013f50:	9046      	ld.w      	r2, (r0, 0x18)
18013f52:	e58c2040 	andi      	r12, r12, 64
18013f56:	2017      	addi      	r0, 24
18013f58:	640a      	cmpne      	r2, r0
18013f5a:	0807      	bt      	0x18013f68	// 18013f68 <mmpool_free_size+0x24>
18013f5c:	e90c0004 	bez      	r12, 0x18013f64	// 18013f64 <mmpool_free_size+0x20>
18013f60:	c0807420 	psrset      	ie
18013f64:	6c0f      	mov      	r0, r3
18013f66:	1481      	pop      	r4
18013f68:	d9a22002 	ld.w      	r13, (r2, 0x8)
18013f6c:	c5a30024 	addu      	r4, r3, r13
18013f70:	6474      	cmphs      	r13, r1
18013f72:	c4640c40 	inct      	r3, r4, 0
18013f76:	9240      	ld.w      	r2, (r2, 0x0)
18013f78:	07f0      	br      	0x18013f58	// 18013f58 <mmpool_free_size+0x14>
	...

18013f7c <skbpool_init>:
18013f7c:	14d5      	push      	r4-r8, r15
18013f7e:	1421      	subi      	r14, r14, 4
18013f80:	1096      	lrw      	r4, 0x2000205c	// 18013fd8 <skbpool_init+0x5c>
18013f82:	6d83      	mov      	r6, r0
18013f84:	6d47      	mov      	r5, r1
18013f86:	6dcb      	mov      	r7, r2
18013f88:	3100      	movi      	r1, 0
18013f8a:	3238      	movi      	r2, 56
18013f8c:	6c13      	mov      	r0, r4
18013f8e:	6e0f      	mov      	r8, r3
18013f90:	e0000f6c 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
18013f94:	3308      	movi      	r3, 8
18013f96:	6c97      	mov      	r2, r5
18013f98:	6c5b      	mov      	r1, r6
18013f9a:	6c13      	mov      	r0, r4
18013f9c:	a465      	st.b      	r3, (r4, 0x5)
18013f9e:	dd040031 	st.b      	r8, (r4, 0x31)
18013fa2:	e3ffffa7 	bsr      	0x18013ef0	// 18013ef0 <mmpool_init>
18013fa6:	e4671031 	subi      	r3, r7, 50
18013faa:	eb030032 	cmphsi      	r3, 51
18013fae:	3350      	movi      	r3, 80
18013fb0:	c4670c20 	incf      	r3, r7, 0
18013fb4:	9440      	ld.w      	r2, (r4, 0x0)
18013fb6:	dc640030 	st.b      	r3, (r4, 0x30)
18013fba:	7cc8      	mult      	r3, r2
18013fbc:	3264      	movi      	r2, 100
18013fbe:	c4438023 	divu      	r3, r3, r2
18013fc2:	b46d      	st.w      	r3, (r4, 0x34)
18013fc4:	b8e0      	st.w      	r7, (r14, 0x0)
18013fc6:	5e74      	addu      	r3, r6, r5
18013fc8:	6c9b      	mov      	r2, r6
18013fca:	6c57      	mov      	r1, r5
18013fcc:	1004      	lrw      	r0, 0x1801875a	// 18013fdc <skbpool_init+0x60>
18013fce:	e3ffc57b 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18013fd2:	3000      	movi      	r0, 0
18013fd4:	1401      	addi      	r14, r14, 4
18013fd6:	1495      	pop      	r4-r8, r15
18013fd8:	2000205c 	.long	0x2000205c
18013fdc:	1801875a 	.long	0x1801875a

18013fe0 <module_version_show>:
18013fe0:	14d3      	push      	r4-r6, r15
18013fe2:	1088      	lrw      	r4, 0x18019424	// 18014000 <module_version_show+0x20>
18013fe4:	10a8      	lrw      	r5, 0x18019440	// 18014004 <module_version_show+0x24>
18013fe6:	10c9      	lrw      	r6, 0x1801878a	// 18014008 <module_version_show+0x28>
18013fe8:	6550      	cmphs      	r4, r5
18013fea:	0c05      	bf      	0x18013ff4	// 18013ff4 <module_version_show+0x14>
18013fec:	1008      	lrw      	r0, 0x18018797	// 1801400c <module_version_show+0x2c>
18013fee:	e3ffc56b 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18013ff2:	1493      	pop      	r4-r6, r15
18013ff4:	9420      	ld.w      	r1, (r4, 0x0)
18013ff6:	6c1b      	mov      	r0, r6
18013ff8:	e3ffc566 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18013ffc:	2403      	addi      	r4, 4
18013ffe:	07f5      	br      	0x18013fe8	// 18013fe8 <module_version_show+0x8>
18014000:	18019424 	.long	0x18019424
18014004:	18019440 	.long	0x18019440
18014008:	1801878a 	.long	0x1801878a
1801400c:	18018797 	.long	0x18018797

18014010 <_syscfg_read>:
18014010:	14d4      	push      	r4-r7, r15
18014012:	1424      	subi      	r14, r14, 16
18014014:	6d43      	mov      	r5, r0
18014016:	320c      	movi      	r2, 12
18014018:	6d87      	mov      	r6, r1
1801401a:	1801      	addi      	r0, r14, 4
1801401c:	3100      	movi      	r1, 0
1801401e:	e0000f25 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
18014022:	6c17      	mov      	r0, r5
18014024:	e3ff7902 	bsr      	0x18003228	// 18003228 <spi_nor_open>
18014028:	6c5b      	mov      	r1, r6
1801402a:	330c      	movi      	r3, 12
1801402c:	1a01      	addi      	r2, r14, 4
1801402e:	6c17      	mov      	r0, r5
18014030:	e3ff7954 	bsr      	0x180032d8	// 180032d8 <spi_nor_read>
18014034:	6c17      	mov      	r0, r5
18014036:	e3ff792f 	bsr      	0x18003294	// 18003294 <spi_nor_close>
1801403a:	d82e1002 	ld.h      	r1, (r14, 0x4)
1801403e:	eb411234 	cmpnei      	r1, 4660
18014042:	0842      	bt      	0x180140c6	// 180140c6 <_syscfg_read+0xb6>
18014044:	d80e1004 	ld.h      	r0, (r14, 0x8)
18014048:	200b      	addi      	r0, 12
1801404a:	e3ffc46b 	bsr      	0x1800c920	// 1800c920 <_os_malloc>
1801404e:	6d03      	mov      	r4, r0
18014050:	e9000035 	bez      	r0, 0x180140ba	// 180140ba <_syscfg_read+0xaa>
18014054:	6c17      	mov      	r0, r5
18014056:	e4e4000b 	addi      	r7, r4, 12
1801405a:	e3ff78e7 	bsr      	0x18003228	// 18003228 <spi_nor_open>
1801405e:	d86e1004 	ld.h      	r3, (r14, 0x8)
18014062:	6c9f      	mov      	r2, r7
18014064:	e426000b 	addi      	r1, r6, 12
18014068:	6c17      	mov      	r0, r5
1801406a:	e3ff7937 	bsr      	0x180032d8	// 180032d8 <spi_nor_read>
1801406e:	6c17      	mov      	r0, r5
18014070:	e3ff7912 	bsr      	0x18003294	// 18003294 <spi_nor_close>
18014074:	d84e1004 	ld.h      	r2, (r14, 0x8)
18014078:	6c5f      	mov      	r1, r7
1801407a:	3006      	movi      	r0, 6
1801407c:	e3ffc4d0 	bsr      	0x1800ca1c	// 1800ca1c <hw_crc>
18014080:	74c1      	zexth      	r3, r0
18014082:	d84e1003 	ld.h      	r2, (r14, 0x6)
18014086:	64ca      	cmpne      	r2, r3
18014088:	6d43      	mov      	r5, r0
1801408a:	0809      	bt      	0x1801409c	// 1801409c <_syscfg_read+0x8c>
1801408c:	320c      	movi      	r2, 12
1801408e:	1901      	addi      	r1, r14, 4
18014090:	6c13      	mov      	r0, r4
18014092:	e0000ee5 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
18014096:	6c13      	mov      	r0, r4
18014098:	1404      	addi      	r14, r14, 16
1801409a:	1494      	pop      	r4-r7, r15
1801409c:	6c13      	mov      	r0, r4
1801409e:	e3ffc469 	bsr      	0x1800c970	// 1800c970 <_os_free>
180140a2:	d86e1003 	ld.h      	r3, (r14, 0x6)
180140a6:	b860      	st.w      	r3, (r14, 0x0)
180140a8:	d84e1004 	ld.h      	r2, (r14, 0x8)
180140ac:	74d5      	zexth      	r3, r5
180140ae:	6c5b      	mov      	r1, r6
180140b0:	1008      	lrw      	r0, 0x1801881f	// 180140d0 <_syscfg_read+0xc0>
180140b2:	e3ffc509 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
180140b6:	3400      	movi      	r4, 0
180140b8:	07ef      	br      	0x18014096	// 18014096 <_syscfg_read+0x86>
180140ba:	d82e1004 	ld.h      	r1, (r14, 0x8)
180140be:	1006      	lrw      	r0, 0x1801885c	// 180140d4 <_syscfg_read+0xc4>
180140c0:	e3ffc502 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
180140c4:	07e9      	br      	0x18014096	// 18014096 <_syscfg_read+0x86>
180140c6:	6c9b      	mov      	r2, r6
180140c8:	1004      	lrw      	r0, 0x18018881	// 180140d8 <_syscfg_read+0xc8>
180140ca:	e3ffc4fd 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
180140ce:	07f4      	br      	0x180140b6	// 180140b6 <_syscfg_read+0xa6>
180140d0:	1801881f 	.long	0x1801881f
180140d4:	1801885c 	.long	0x1801885c
180140d8:	18018881 	.long	0x18018881

180140dc <syscfg_read>:
180140dc:	14d3      	push      	r4-r6, r15
180140de:	1425      	subi      	r14, r14, 20
180140e0:	6d83      	mov      	r6, r0
180140e2:	6c3b      	mov      	r0, r14
180140e4:	6d47      	mov      	r5, r1
180140e6:	e3ff76e7 	bsr      	0x18002eb4	// 18002eb4 <syscfg_info_get>
180140ea:	e900000a 	bez      	r0, 0x180140fe	// 180140fe <syscfg_read+0x22>
180140ee:	101c      	lrw      	r0, 0x180188af	// 1801415c <syscfg_read+0x80>
180140f0:	3400      	movi      	r4, 0
180140f2:	e3ffc4e9 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
180140f6:	2c05      	subi      	r4, 6
180140f8:	6c13      	mov      	r0, r4
180140fa:	1405      	addi      	r14, r14, 20
180140fc:	1493      	pop      	r4-r6, r15
180140fe:	3100      	movi      	r1, 0
18014100:	2900      	subi      	r1, 1
18014102:	1018      	lrw      	r0, 0x20002098	// 18014160 <syscfg_read+0x84>
18014104:	e0000184 	bsr      	0x1801440c	// 1801440c <os_mutex_lock>
18014108:	9822      	ld.w      	r1, (r14, 0x8)
1801410a:	9800      	ld.w      	r0, (r14, 0x0)
1801410c:	e3ffff82 	bsr      	0x18014010	// 18014010 <_syscfg_read>
18014110:	6d03      	mov      	r4, r0
18014112:	e9200009 	bnez      	r0, 0x18014124	// 18014124 <syscfg_read+0x48>
18014116:	9823      	ld.w      	r1, (r14, 0xc)
18014118:	9801      	ld.w      	r0, (r14, 0x4)
1801411a:	e3ffff7b 	bsr      	0x18014010	// 18014010 <_syscfg_read>
1801411e:	6d03      	mov      	r4, r0
18014120:	e900001b 	bez      	r0, 0x18014156	// 18014156 <syscfg_read+0x7a>
18014124:	8c42      	ld.h      	r2, (r4, 0x4)
18014126:	220b      	addi      	r2, 12
18014128:	6495      	cmplt      	r5, r2
1801412a:	6c53      	mov      	r1, r4
1801412c:	c4450c40 	inct      	r2, r5, 0
18014130:	6c1b      	mov      	r0, r6
18014132:	e0000e95 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
18014136:	6c13      	mov      	r0, r4
18014138:	e3ffc41c 	bsr      	0x1800c970	// 1800c970 <_os_free>
1801413c:	3400      	movi      	r4, 0
1801413e:	1009      	lrw      	r0, 0x20002098	// 18014160 <syscfg_read+0x84>
18014140:	e0000180 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
18014144:	3c40      	cmpnei      	r4, 0
18014146:	1068      	lrw      	r3, 0x1801676b	// 18014164 <syscfg_read+0x88>
18014148:	1028      	lrw      	r1, 0x180188aa	// 18014168 <syscfg_read+0x8c>
1801414a:	c4230c20 	incf      	r1, r3, 0
1801414e:	1008      	lrw      	r0, 0x180188c2	// 1801416c <syscfg_read+0x90>
18014150:	e3ffc4ba 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18014154:	07d2      	br      	0x180140f8	// 180140f8 <syscfg_read+0x1c>
18014156:	3400      	movi      	r4, 0
18014158:	2c00      	subi      	r4, 1
1801415a:	07f2      	br      	0x1801413e	// 1801413e <syscfg_read+0x62>
1801415c:	180188af 	.long	0x180188af
18014160:	20002098 	.long	0x20002098
18014164:	1801676b 	.long	0x1801676b
18014168:	180188aa 	.long	0x180188aa
1801416c:	180188c2 	.long	0x180188c2

18014170 <syscfg_write>:
18014170:	14d8      	push      	r4-r11, r15
18014172:	1429      	subi      	r14, r14, 36
18014174:	6dc3      	mov      	r7, r0
18014176:	3300      	movi      	r3, 0
18014178:	1804      	addi      	r0, r14, 16
1801417a:	6e07      	mov      	r8, r1
1801417c:	dc6e1006 	st.h      	r3, (r14, 0xc)
18014180:	dc6e1007 	st.h      	r3, (r14, 0xe)
18014184:	e3ff7698 	bsr      	0x18002eb4	// 18002eb4 <syscfg_info_get>
18014188:	e900000a 	bez      	r0, 0x1801419c	// 1801419c <syscfg_write+0x2c>
1801418c:	1317      	lrw      	r0, 0x180188af	// 18014368 <syscfg_write+0x1f8>
1801418e:	e3ffc49b 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18014192:	3400      	movi      	r4, 0
18014194:	2c00      	subi      	r4, 1
18014196:	6c13      	mov      	r0, r4
18014198:	1409      	addi      	r14, r14, 36
1801419a:	1498      	pop      	r4-r11, r15
1801419c:	6c23      	mov      	r0, r8
1801419e:	e3ffc3c1 	bsr      	0x1800c920	// 1800c920 <_os_malloc>
180141a2:	6d43      	mov      	r5, r0
180141a4:	e9200007 	bnez      	r0, 0x180141b2	// 180141b2 <syscfg_write+0x42>
180141a8:	6c63      	mov      	r1, r8
180141aa:	1311      	lrw      	r0, 0x180188d5	// 1801436c <syscfg_write+0x1fc>
180141ac:	e3ffc48c 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
180141b0:	07f1      	br      	0x18014192	// 18014192 <syscfg_write+0x22>
180141b2:	3100      	movi      	r1, 0
180141b4:	9884      	ld.w      	r4, (r14, 0x10)
180141b6:	2900      	subi      	r1, 1
180141b8:	130e      	lrw      	r0, 0x20002098	// 18014370 <syscfg_write+0x200>
180141ba:	98c6      	ld.w      	r6, (r14, 0x18)
180141bc:	d92e2005 	ld.w      	r9, (r14, 0x14)
180141c0:	d94e2007 	ld.w      	r10, (r14, 0x1c)
180141c4:	e0000124 	bsr      	0x1801440c	// 1801440c <os_mutex_lock>
180141c8:	6c13      	mov      	r0, r4
180141ca:	e3ff782f 	bsr      	0x18003228	// 18003228 <spi_nor_open>
180141ce:	3302      	movi      	r3, 2
180141d0:	1a03      	addi      	r2, r14, 12
180141d2:	6c5b      	mov      	r1, r6
180141d4:	6c13      	mov      	r0, r4
180141d6:	e3ff7881 	bsr      	0x180032d8	// 180032d8 <spi_nor_read>
180141da:	d86e1006 	ld.h      	r3, (r14, 0xc)
180141de:	eb431234 	cmpnei      	r3, 4660
180141e2:	080d      	bt      	0x180141fc	// 180141fc <syscfg_write+0x8c>
180141e4:	6c13      	mov      	r0, r4
180141e6:	e3ff7857 	bsr      	0x18003294	// 18003294 <spi_nor_close>
180141ea:	9885      	ld.w      	r4, (r14, 0x14)
180141ec:	6c13      	mov      	r0, r4
180141ee:	98c7      	ld.w      	r6, (r14, 0x1c)
180141f0:	d92e2004 	ld.w      	r9, (r14, 0x10)
180141f4:	d94e2006 	ld.w      	r10, (r14, 0x18)
180141f8:	e3ff7818 	bsr      	0x18003228	// 18003228 <spi_nor_open>
180141fc:	9864      	ld.w      	r3, (r14, 0x10)
180141fe:	9828      	ld.w      	r1, (r14, 0x20)
18014200:	9369      	ld.w      	r3, (r3, 0x24)
18014202:	c4618021 	divu      	r1, r1, r3
18014206:	76c4      	zextb      	r11, r1
18014208:	6c6f      	mov      	r1, r11
1801420a:	121b      	lrw      	r0, 0x180188ed	// 18014374 <syscfg_write+0x204>
1801420c:	e3ffc45c 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18014210:	3300      	movi      	r3, 0
18014212:	748c      	zextb      	r2, r3
18014214:	66c8      	cmphs      	r2, r11
18014216:	0c85      	bf      	0x18014320	// 18014320 <syscfg_write+0x1b0>
18014218:	3300      	movi      	r3, 0
1801421a:	e588100b 	subi      	r12, r8, 12
1801421e:	2b00      	subi      	r3, 1
18014220:	6cb3      	mov      	r2, r12
18014222:	dd871002 	st.h      	r12, (r7, 0x4)
18014226:	af60      	st.h      	r3, (r7, 0x0)
18014228:	e427000b 	addi      	r1, r7, 12
1801422c:	3006      	movi      	r0, 6
1801422e:	dd8e2002 	st.w      	r12, (r14, 0x8)
18014232:	e3ffc3f5 	bsr      	0x1800ca1c	// 1800ca1c <hw_crc>
18014236:	af01      	st.h      	r0, (r7, 0x2)
18014238:	6c63      	mov      	r1, r8
1801423a:	1210      	lrw      	r0, 0x1801890c	// 18014378 <syscfg_write+0x208>
1801423c:	e3ffc444 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18014240:	6ce3      	mov      	r3, r8
18014242:	6c9f      	mov      	r2, r7
18014244:	6c5b      	mov      	r1, r6
18014246:	6c13      	mov      	r0, r4
18014248:	e3ff7864 	bsr      	0x18003310	// 18003310 <spi_nor_write>
1801424c:	ea0b0000 	movi      	r11, 0
18014250:	120b      	lrw      	r0, 0x18018929	// 1801437c <syscfg_write+0x20c>
18014252:	e3ffc439 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18014256:	6ce3      	mov      	r3, r8
18014258:	6c97      	mov      	r2, r5
1801425a:	6c5b      	mov      	r1, r6
1801425c:	6c13      	mov      	r0, r4
1801425e:	dd651000 	st.h      	r11, (r5, 0x0)
18014262:	dd651001 	st.h      	r11, (r5, 0x2)
18014266:	dd651002 	st.h      	r11, (r5, 0x4)
1801426a:	e3ff7837 	bsr      	0x180032d8	// 180032d8 <spi_nor_read>
1801426e:	d98e2002 	ld.w      	r12, (r14, 0x8)
18014272:	6cb3      	mov      	r2, r12
18014274:	e425000b 	addi      	r1, r5, 12
18014278:	3006      	movi      	r0, 6
1801427a:	e3ffc3d1 	bsr      	0x1800ca1c	// 1800ca1c <hw_crc>
1801427e:	8d60      	ld.h      	r3, (r5, 0x0)
18014280:	eb43ffff 	cmpnei      	r3, 65535
18014284:	7401      	zexth      	r0, r0
18014286:	ad01      	st.h      	r0, (r5, 0x2)
18014288:	085c      	bt      	0x18014340	// 18014340 <syscfg_write+0x1d0>
1801428a:	8d42      	ld.h      	r2, (r5, 0x4)
1801428c:	8f62      	ld.h      	r3, (r7, 0x4)
1801428e:	64ca      	cmpne      	r2, r3
18014290:	0858      	bt      	0x18014340	// 18014340 <syscfg_write+0x1d0>
18014292:	8f61      	ld.h      	r3, (r7, 0x2)
18014294:	640e      	cmpne      	r3, r0
18014296:	0855      	bt      	0x18014340	// 18014340 <syscfg_write+0x1d0>
18014298:	111a      	lrw      	r0, 0x1801893c	// 18014380 <syscfg_write+0x210>
1801429a:	e3ffc415 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
1801429e:	111a      	lrw      	r0, 0x18018941	// 18014384 <syscfg_write+0x214>
180142a0:	e3ffc412 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
180142a4:	ea031234 	movi      	r3, 4660
180142a8:	dc6e1006 	st.h      	r3, (r14, 0xc)
180142ac:	1a03      	addi      	r2, r14, 12
180142ae:	3302      	movi      	r3, 2
180142b0:	6c5b      	mov      	r1, r6
180142b2:	6c13      	mov      	r0, r4
180142b4:	e3ff782e 	bsr      	0x18003310	// 18003310 <spi_nor_write>
180142b8:	3302      	movi      	r3, 2
180142ba:	e44e000d 	addi      	r2, r14, 14
180142be:	6c5b      	mov      	r1, r6
180142c0:	6c13      	mov      	r0, r4
180142c2:	e3ff780b 	bsr      	0x180032d8	// 180032d8 <spi_nor_read>
180142c6:	6c13      	mov      	r0, r4
180142c8:	e3ff77e6 	bsr      	0x18003294	// 18003294 <spi_nor_close>
180142cc:	d86e1007 	ld.h      	r3, (r14, 0xe)
180142d0:	eb431234 	cmpnei      	r3, 4660
180142d4:	0830      	bt      	0x18014334	// 18014334 <syscfg_write+0x1c4>
180142d6:	6c27      	mov      	r0, r9
180142d8:	dd6e1006 	st.h      	r11, (r14, 0xc)
180142dc:	e3ff77a6 	bsr      	0x18003228	// 18003228 <spi_nor_open>
180142e0:	3302      	movi      	r3, 2
180142e2:	1a03      	addi      	r2, r14, 12
180142e4:	6c6b      	mov      	r1, r10
180142e6:	6c27      	mov      	r0, r9
180142e8:	e3ff7814 	bsr      	0x18003310	// 18003310 <spi_nor_write>
180142ec:	6c27      	mov      	r0, r9
180142ee:	e3ff77d3 	bsr      	0x18003294	// 18003294 <spi_nor_close>
180142f2:	1104      	lrw      	r0, 0x1801893c	// 18014380 <syscfg_write+0x210>
180142f4:	e3ffc3e8 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
180142f8:	3400      	movi      	r4, 0
180142fa:	101e      	lrw      	r0, 0x20002098	// 18014370 <syscfg_write+0x200>
180142fc:	e00000a2 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
18014300:	6c17      	mov      	r0, r5
18014302:	e3ffc337 	bsr      	0x1800c970	// 1800c970 <_os_free>
18014306:	e924002c 	bnez      	r4, 0x1801435e	// 1801435e <syscfg_write+0x1ee>
1801430a:	1120      	lrw      	r1, 0x1801676b	// 18014388 <syscfg_write+0x218>
1801430c:	8f61      	ld.h      	r3, (r7, 0x2)
1801430e:	dd4e2001 	st.w      	r10, (r14, 0x4)
18014312:	dd0e2000 	st.w      	r8, (r14, 0x0)
18014316:	6c9b      	mov      	r2, r6
18014318:	101d      	lrw      	r0, 0x18018966	// 1801438c <syscfg_write+0x21c>
1801431a:	e3ffc3d5 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
1801431e:	073c      	br      	0x18014196	// 18014196 <syscfg_write+0x26>
18014320:	9429      	ld.w      	r1, (r4, 0x24)
18014322:	7c4c      	mult      	r1, r3
18014324:	6058      	addu      	r1, r6
18014326:	6c13      	mov      	r0, r4
18014328:	b862      	st.w      	r3, (r14, 0x8)
1801432a:	e3ff782f 	bsr      	0x18003388	// 18003388 <spi_nor_sector_erase>
1801432e:	9862      	ld.w      	r3, (r14, 0x8)
18014330:	2300      	addi      	r3, 1
18014332:	0770      	br      	0x18014212	// 18014212 <syscfg_write+0xa2>
18014334:	1017      	lrw      	r0, 0x1801895f	// 18014390 <syscfg_write+0x220>
18014336:	e3ffc3c7 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
1801433a:	3400      	movi      	r4, 0
1801433c:	2c00      	subi      	r4, 1
1801433e:	07de      	br      	0x180142fa	// 180142fa <syscfg_write+0x18a>
18014340:	1014      	lrw      	r0, 0x1801895f	// 18014390 <syscfg_write+0x220>
18014342:	e3ffc3c1 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18014346:	e9040006 	bez      	r4, 0x18014352	// 18014352 <syscfg_write+0x1e2>
1801434a:	6c13      	mov      	r0, r4
1801434c:	e3ff77a4 	bsr      	0x18003294	// 18003294 <spi_nor_close>
18014350:	07f5      	br      	0x1801433a	// 1801433a <syscfg_write+0x1ca>
18014352:	1008      	lrw      	r0, 0x20002098	// 18014370 <syscfg_write+0x200>
18014354:	e0000076 	bsr      	0x18014440	// 18014440 <os_mutex_unlock>
18014358:	6c17      	mov      	r0, r5
1801435a:	e3ffc30b 	bsr      	0x1800c970	// 1800c970 <_os_free>
1801435e:	3400      	movi      	r4, 0
18014360:	2c00      	subi      	r4, 1
18014362:	102d      	lrw      	r1, 0x180188aa	// 18014394 <syscfg_write+0x224>
18014364:	07d4      	br      	0x1801430c	// 1801430c <syscfg_write+0x19c>
18014366:	0000      	.short	0x0000
18014368:	180188af 	.long	0x180188af
1801436c:	180188d5 	.long	0x180188d5
18014370:	20002098 	.long	0x20002098
18014374:	180188ed 	.long	0x180188ed
18014378:	1801890c 	.long	0x1801890c
1801437c:	18018929 	.long	0x18018929
18014380:	1801893c 	.long	0x1801893c
18014384:	18018941 	.long	0x18018941
18014388:	1801676b 	.long	0x1801676b
1801438c:	18018966 	.long	0x18018966
18014390:	1801895f 	.long	0x1801895f
18014394:	180188aa 	.long	0x180188aa

18014398 <syscfg_init>:
18014398:	14d2      	push      	r4-r5, r15
1801439a:	6d03      	mov      	r4, r0
1801439c:	1008      	lrw      	r0, 0x20002098	// 180143bc <syscfg_init+0x24>
1801439e:	6d47      	mov      	r5, r1
180143a0:	e0000014 	bsr      	0x180143c8	// 180143c8 <os_mutex_init>
180143a4:	e9000007 	bez      	r0, 0x180143b2	// 180143b2 <syscfg_init+0x1a>
180143a8:	1046      	lrw      	r2, 0x1801653b	// 180143c0 <syscfg_init+0x28>
180143aa:	31b8      	movi      	r1, 184
180143ac:	1006      	lrw      	r0, 0x18018813	// 180143c4 <syscfg_init+0x2c>
180143ae:	e3ff7633 	bsr      	0x18003014	// 18003014 <assert_internal>
180143b2:	6c57      	mov      	r1, r5
180143b4:	6c13      	mov      	r0, r4
180143b6:	e3fffe93 	bsr      	0x180140dc	// 180140dc <syscfg_read>
180143ba:	1492      	pop      	r4-r5, r15
180143bc:	20002098 	.long	0x20002098
180143c0:	1801653b 	.long	0x1801653b
180143c4:	18018813 	.long	0x18018813

180143c8 <os_mutex_init>:
180143c8:	14d2      	push      	r4-r5, r15
180143ca:	6cff      	mov      	r3, r15
180143cc:	6d03      	mov      	r4, r0
180143ce:	e9000012 	bez      	r0, 0x180143f2	// 180143f2 <os_mutex_init+0x2a>
180143d2:	9040      	ld.w      	r2, (r0, 0x0)
180143d4:	10ab      	lrw      	r5, 0xa8b4c2d5	// 18014400 <os_mutex_init+0x38>
180143d6:	654a      	cmpne      	r2, r5
180143d8:	0c0d      	bf      	0x180143f2	// 180143f2 <os_mutex_init+0x2a>
180143da:	e3ffc653 	bsr      	0x1800d080	// 1800d080 <csi_kernel_mutex_new>
180143de:	b401      	st.w      	r0, (r4, 0x4)
180143e0:	e9000003 	bez      	r0, 0x180143e6	// 180143e6 <os_mutex_init+0x1e>
180143e4:	b4a0      	st.w      	r5, (r4, 0x0)
180143e6:	9461      	ld.w      	r3, (r4, 0x4)
180143e8:	3b40      	cmpnei      	r3, 0
180143ea:	64c3      	mvcv      	r3
180143ec:	3000      	movi      	r0, 0
180143ee:	600e      	subu      	r0, r3
180143f0:	1492      	pop      	r4-r5, r15
180143f2:	3211      	movi      	r2, 17
180143f4:	1024      	lrw      	r1, 0x180189a3	// 18014404 <os_mutex_init+0x3c>
180143f6:	1005      	lrw      	r0, 0x180189dc	// 18014408 <os_mutex_init+0x40>
180143f8:	e3ffc366 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
180143fc:	07f5      	br      	0x180143e6	// 180143e6 <os_mutex_init+0x1e>
180143fe:	0000      	.short	0x0000
18014400:	a8b4c2d5 	.long	0xa8b4c2d5
18014404:	180189a3 	.long	0x180189a3
18014408:	180189dc 	.long	0x180189dc

1801440c <os_mutex_lock>:
1801440c:	14d2      	push      	r4-r5, r15
1801440e:	6d03      	mov      	r4, r0
18014410:	6d47      	mov      	r5, r1
18014412:	e9000005 	bez      	r0, 0x1801441c	// 1801441c <os_mutex_lock+0x10>
18014416:	9061      	ld.w      	r3, (r0, 0x4)
18014418:	e9230007 	bnez      	r3, 0x18014426	// 18014426 <os_mutex_lock+0x1a>
1801441c:	1047      	lrw      	r2, 0x18018a07	// 18014438 <os_mutex_lock+0x2c>
1801441e:	3118      	movi      	r1, 24
18014420:	1007      	lrw      	r0, 0x180189b1	// 1801443c <os_mutex_lock+0x30>
18014422:	e3ff75f9 	bsr      	0x18003014	// 18003014 <assert_internal>
18014426:	6c17      	mov      	r0, r5
18014428:	9481      	ld.w      	r4, (r4, 0x4)
1801442a:	e3ffc51b 	bsr      	0x1800ce60	// 1800ce60 <csi_kernel_ms2tick>
1801442e:	6c43      	mov      	r1, r0
18014430:	6c13      	mov      	r0, r4
18014432:	e3ffc64f 	bsr      	0x1800d0d0	// 1800d0d0 <csi_kernel_mutex_lock>
18014436:	1492      	pop      	r4-r5, r15
18014438:	18018a07 	.long	0x18018a07
1801443c:	180189b1 	.long	0x180189b1

18014440 <os_mutex_unlock>:
18014440:	14d1      	push      	r4, r15
18014442:	6d03      	mov      	r4, r0
18014444:	e9000005 	bez      	r0, 0x1801444e	// 1801444e <os_mutex_unlock+0xe>
18014448:	9061      	ld.w      	r3, (r0, 0x4)
1801444a:	e9230007 	bnez      	r3, 0x18014458	// 18014458 <os_mutex_unlock+0x18>
1801444e:	1045      	lrw      	r2, 0x18018a07	// 18014460 <os_mutex_unlock+0x20>
18014450:	311e      	movi      	r1, 30
18014452:	1005      	lrw      	r0, 0x180189bf	// 18014464 <os_mutex_unlock+0x24>
18014454:	e3ff75e0 	bsr      	0x18003014	// 18003014 <assert_internal>
18014458:	9401      	ld.w      	r0, (r4, 0x4)
1801445a:	e3ffc65b 	bsr      	0x1800d110	// 1800d110 <csi_kernel_mutex_unlock>
1801445e:	1491      	pop      	r4, r15
18014460:	18018a07 	.long	0x18018a07
18014464:	180189bf 	.long	0x180189bf

18014468 <os_mutex_del>:
18014468:	14d1      	push      	r4, r15
1801446a:	6d03      	mov      	r4, r0
1801446c:	e9000005 	bez      	r0, 0x18014476	// 18014476 <os_mutex_del+0xe>
18014470:	9061      	ld.w      	r3, (r0, 0x4)
18014472:	e9230007 	bnez      	r3, 0x18014480	// 18014480 <os_mutex_del+0x18>
18014476:	1047      	lrw      	r2, 0x18018a07	// 18014490 <os_mutex_del+0x28>
18014478:	3125      	movi      	r1, 37
1801447a:	1007      	lrw      	r0, 0x180189cf	// 18014494 <os_mutex_del+0x2c>
1801447c:	e3ff75cc 	bsr      	0x18003014	// 18003014 <assert_internal>
18014480:	9401      	ld.w      	r0, (r4, 0x4)
18014482:	e3ffc613 	bsr      	0x1800d0a8	// 1800d0a8 <csi_kernel_mutex_del>
18014486:	3300      	movi      	r3, 0
18014488:	b461      	st.w      	r3, (r4, 0x4)
1801448a:	b460      	st.w      	r3, (r4, 0x0)
1801448c:	1491      	pop      	r4, r15
1801448e:	0000      	.short	0x0000
18014490:	18018a07 	.long	0x18018a07
18014494:	180189cf 	.long	0x180189cf

18014498 <os_sema_init>:
18014498:	14d4      	push      	r4-r7, r15
1801449a:	6dbf      	mov      	r6, r15
1801449c:	6d03      	mov      	r4, r0
1801449e:	6dc7      	mov      	r7, r1
180144a0:	e9200007 	bnez      	r0, 0x180144ae	// 180144ae <os_sema_init+0x16>
180144a4:	1050      	lrw      	r2, 0x18017778	// 180144e4 <os_sema_init+0x4c>
180144a6:	310c      	movi      	r1, 12
180144a8:	1010      	lrw      	r0, 0x18018a28	// 180144e8 <os_sema_init+0x50>
180144aa:	e3ff75b5 	bsr      	0x18003014	// 18003014 <assert_internal>
180144ae:	9460      	ld.w      	r3, (r4, 0x0)
180144b0:	10af      	lrw      	r5, 0x3a8d7c1d	// 180144ec <os_sema_init+0x54>
180144b2:	654e      	cmpne      	r3, r5
180144b4:	0c10      	bf      	0x180144d4	// 180144d4 <os_sema_init+0x3c>
180144b6:	6c5f      	mov      	r1, r7
180144b8:	ea00ffff 	movi      	r0, 65535
180144bc:	e3ffc63c 	bsr      	0x1800d134	// 1800d134 <csi_kernel_sem_new>
180144c0:	b401      	st.w      	r0, (r4, 0x4)
180144c2:	e9000003 	bez      	r0, 0x180144c8	// 180144c8 <os_sema_init+0x30>
180144c6:	b4a0      	st.w      	r5, (r4, 0x0)
180144c8:	9461      	ld.w      	r3, (r4, 0x4)
180144ca:	3b40      	cmpnei      	r3, 0
180144cc:	64c3      	mvcv      	r3
180144ce:	3000      	movi      	r0, 0
180144d0:	600e      	subu      	r0, r3
180144d2:	1494      	pop      	r4-r7, r15
180144d4:	6cdb      	mov      	r3, r6
180144d6:	3213      	movi      	r2, 19
180144d8:	1026      	lrw      	r1, 0x18018a1b	// 180144f0 <os_sema_init+0x58>
180144da:	1007      	lrw      	r0, 0x180189dc	// 180144f4 <os_sema_init+0x5c>
180144dc:	e3ffc2f4 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
180144e0:	07f4      	br      	0x180144c8	// 180144c8 <os_sema_init+0x30>
180144e2:	0000      	.short	0x0000
180144e4:	18017778 	.long	0x18017778
180144e8:	18018a28 	.long	0x18018a28
180144ec:	3a8d7c1d 	.long	0x3a8d7c1d
180144f0:	18018a1b 	.long	0x18018a1b
180144f4:	180189dc 	.long	0x180189dc

180144f8 <os_sema_down>:
180144f8:	14d2      	push      	r4-r5, r15
180144fa:	6d03      	mov      	r4, r0
180144fc:	6d47      	mov      	r5, r1
180144fe:	e9000005 	bez      	r0, 0x18014508	// 18014508 <os_sema_down+0x10>
18014502:	9061      	ld.w      	r3, (r0, 0x4)
18014504:	e9230007 	bnez      	r3, 0x18014512	// 18014512 <os_sema_down+0x1a>
18014508:	1048      	lrw      	r2, 0x18018a59	// 18014528 <os_sema_down+0x30>
1801450a:	311b      	movi      	r1, 27
1801450c:	1008      	lrw      	r0, 0x18018a35	// 1801452c <os_sema_down+0x34>
1801450e:	e3ff7583 	bsr      	0x18003014	// 18003014 <assert_internal>
18014512:	6c17      	mov      	r0, r5
18014514:	9481      	ld.w      	r4, (r4, 0x4)
18014516:	e3ffc4a5 	bsr      	0x1800ce60	// 1800ce60 <csi_kernel_ms2tick>
1801451a:	6c43      	mov      	r1, r0
1801451c:	6c13      	mov      	r0, r4
1801451e:	e3ffc63b 	bsr      	0x1800d194	// 1800d194 <csi_kernel_sem_wait>
18014522:	3840      	cmpnei      	r0, 0
18014524:	6403      	mvcv      	r0
18014526:	1492      	pop      	r4-r5, r15
18014528:	18018a59 	.long	0x18018a59
1801452c:	18018a35 	.long	0x18018a35

18014530 <os_sema_up>:
18014530:	14d1      	push      	r4, r15
18014532:	6d03      	mov      	r4, r0
18014534:	e9000005 	bez      	r0, 0x1801453e	// 1801453e <os_sema_up+0xe>
18014538:	9061      	ld.w      	r3, (r0, 0x4)
1801453a:	e9230007 	bnez      	r3, 0x18014548	// 18014548 <os_sema_up+0x18>
1801453e:	1045      	lrw      	r2, 0x18018a59	// 18014550 <os_sema_up+0x20>
18014540:	3122      	movi      	r1, 34
18014542:	1005      	lrw      	r0, 0x18018a42	// 18014554 <os_sema_up+0x24>
18014544:	e3ff7568 	bsr      	0x18003014	// 18003014 <assert_internal>
18014548:	9401      	ld.w      	r0, (r4, 0x4)
1801454a:	e3ffc641 	bsr      	0x1800d1cc	// 1800d1cc <csi_kernel_sem_post>
1801454e:	1491      	pop      	r4, r15
18014550:	18018a59 	.long	0x18018a59
18014554:	18018a42 	.long	0x18018a42

18014558 <os_sema_del>:
18014558:	14d1      	push      	r4, r15
1801455a:	6d03      	mov      	r4, r0
1801455c:	e9000005 	bez      	r0, 0x18014566	// 18014566 <os_sema_del+0xe>
18014560:	9061      	ld.w      	r3, (r0, 0x4)
18014562:	e9230007 	bnez      	r3, 0x18014570	// 18014570 <os_sema_del+0x18>
18014566:	1047      	lrw      	r2, 0x18018a59	// 18014580 <os_sema_del+0x28>
18014568:	3128      	movi      	r1, 40
1801456a:	1007      	lrw      	r0, 0x18018a4d	// 18014584 <os_sema_del+0x2c>
1801456c:	e3ff7554 	bsr      	0x18003014	// 18003014 <assert_internal>
18014570:	9401      	ld.w      	r0, (r4, 0x4)
18014572:	e3ffc5fd 	bsr      	0x1800d16c	// 1800d16c <csi_kernel_sem_del>
18014576:	3300      	movi      	r3, 0
18014578:	b461      	st.w      	r3, (r4, 0x4)
1801457a:	b460      	st.w      	r3, (r4, 0x0)
1801457c:	1491      	pop      	r4, r15
1801457e:	0000      	.short	0x0000
18014580:	18018a59 	.long	0x18018a59
18014584:	18018a4d 	.long	0x18018a4d

18014588 <os_task_entry>:
18014588:	14d0      	push      	r15
1801458a:	9061      	ld.w      	r3, (r0, 0x4)
1801458c:	9003      	ld.w      	r0, (r0, 0xc)
1801458e:	7bcd      	jsr      	r3
18014590:	1490      	pop      	r15
	...

18014594 <os_task_init>:
18014594:	14d4      	push      	r4-r7, r15
18014596:	6d07      	mov      	r4, r1
18014598:	6d43      	mov      	r5, r0
1801459a:	6d8b      	mov      	r6, r2
1801459c:	3100      	movi      	r1, 0
1801459e:	3214      	movi      	r2, 20
180145a0:	6c13      	mov      	r0, r4
180145a2:	6dcf      	mov      	r7, r3
180145a4:	e0000c62 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
180145a8:	3000      	movi      	r0, 0
180145aa:	b4e3      	st.w      	r7, (r4, 0xc)
180145ac:	b4c1      	st.w      	r6, (r4, 0x4)
180145ae:	b4a2      	st.w      	r5, (r4, 0x8)
180145b0:	1494      	pop      	r4-r7, r15
	...

180145b4 <_os_task_set_priority>:
180145b4:	14d0      	push      	r15
180145b6:	390f      	cmphsi      	r1, 16
180145b8:	0c41      	bf      	0x1801463a	// 1801463a <_os_task_set_priority+0x86>
180145ba:	391f      	cmphsi      	r1, 32
180145bc:	0811      	bt      	0x180145de	// 180145de <_os_task_set_priority+0x2a>
180145be:	290e      	subi      	r1, 15
180145c0:	3928      	cmplti      	r1, 9
180145c2:	3308      	movi      	r3, 8
180145c4:	c4230c20 	incf      	r1, r3, 0
180145c8:	8868      	ld.h      	r3, (r0, 0x10)
180145ca:	c4615d20 	ins      	r3, r1, 9, 0
180145ce:	a868      	st.h      	r3, (r0, 0x10)
180145d0:	9000      	ld.w      	r0, (r0, 0x0)
180145d2:	e9000004 	bez      	r0, 0x180145da	// 180145da <_os_task_set_priority+0x26>
180145d6:	e3ffc417 	bsr      	0x1800ce04	// 1800ce04 <csi_kernel_task_set_prio>
180145da:	3000      	movi      	r0, 0
180145dc:	1490      	pop      	r15
180145de:	e461101f 	subi      	r3, r1, 32
180145e2:	74cc      	zextb      	r3, r3
180145e4:	3b0f      	cmphsi      	r3, 16
180145e6:	0805      	bt      	0x180145f0	// 180145f0 <_os_task_set_priority+0x3c>
180145e8:	2916      	subi      	r1, 23
180145ea:	3930      	cmplti      	r1, 17
180145ec:	3310      	movi      	r3, 16
180145ee:	07eb      	br      	0x180145c4	// 180145c4 <_os_task_set_priority+0x10>
180145f0:	e461102f 	subi      	r3, r1, 48
180145f4:	74cc      	zextb      	r3, r3
180145f6:	3b0f      	cmphsi      	r3, 16
180145f8:	0805      	bt      	0x18014602	// 18014602 <_os_task_set_priority+0x4e>
180145fa:	291e      	subi      	r1, 31
180145fc:	3938      	cmplti      	r1, 25
180145fe:	3318      	movi      	r3, 24
18014600:	07e2      	br      	0x180145c4	// 180145c4 <_os_task_set_priority+0x10>
18014602:	e461103f 	subi      	r3, r1, 64
18014606:	74cc      	zextb      	r3, r3
18014608:	3b0f      	cmphsi      	r3, 16
1801460a:	0806      	bt      	0x18014616	// 18014616 <_os_task_set_priority+0x62>
1801460c:	2926      	subi      	r1, 39
1801460e:	eb210020 	cmplti      	r1, 33
18014612:	3320      	movi      	r3, 32
18014614:	07d8      	br      	0x180145c4	// 180145c4 <_os_task_set_priority+0x10>
18014616:	e461104f 	subi      	r3, r1, 80
1801461a:	74cc      	zextb      	r3, r3
1801461c:	3b0f      	cmphsi      	r3, 16
1801461e:	0806      	bt      	0x1801462a	// 1801462a <_os_task_set_priority+0x76>
18014620:	292e      	subi      	r1, 47
18014622:	eb210028 	cmplti      	r1, 41
18014626:	3328      	movi      	r3, 40
18014628:	07ce      	br      	0x180145c4	// 180145c4 <_os_task_set_priority+0x10>
1801462a:	eb4100ff 	cmpnei      	r1, 255
1801462e:	0c08      	bf      	0x1801463e	// 1801463e <_os_task_set_priority+0x8a>
18014630:	2936      	subi      	r1, 55
18014632:	eb210030 	cmplti      	r1, 49
18014636:	3330      	movi      	r3, 48
18014638:	07c6      	br      	0x180145c4	// 180145c4 <_os_task_set_priority+0x10>
1801463a:	3101      	movi      	r1, 1
1801463c:	07c6      	br      	0x180145c8	// 180145c8 <_os_task_set_priority+0x14>
1801463e:	3131      	movi      	r1, 49
18014640:	07c4      	br      	0x180145c8	// 180145c8 <_os_task_set_priority+0x14>
	...

18014644 <os_task_set_priority>:
18014644:	14d1      	push      	r4, r15
18014646:	eb01004f 	cmphsi      	r1, 80
1801464a:	6d03      	mov      	r4, r0
1801464c:	0c05      	bf      	0x18014656	// 18014656 <os_task_set_priority+0x12>
1801464e:	1005      	lrw      	r0, 0x18018a69	// 18014660 <os_task_set_priority+0x1c>
18014650:	e3ffc23a 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
18014654:	314f      	movi      	r1, 79
18014656:	6c13      	mov      	r0, r4
18014658:	e3ffffae 	bsr      	0x180145b4	// 180145b4 <_os_task_set_priority>
1801465c:	1491      	pop      	r4, r15
1801465e:	0000      	.short	0x0000
18014660:	18018a69 	.long	0x18018a69

18014664 <os_task_set_stacksize>:
18014664:	9064      	ld.w      	r3, (r0, 0x10)
18014666:	c4615eaa 	ins      	r3, r1, 31, 10
1801466a:	b064      	st.w      	r3, (r0, 0x10)
1801466c:	3000      	movi      	r0, 0
1801466e:	783c      	jmp      	r15

18014670 <os_task_run>:
18014670:	14d0      	push      	r15
18014672:	1424      	subi      	r14, r14, 16
18014674:	8868      	ld.h      	r3, (r0, 0x10)
18014676:	9022      	ld.w      	r1, (r0, 0x8)
18014678:	b803      	st.w      	r0, (r14, 0xc)
1801467a:	6c83      	mov      	r2, r0
1801467c:	9004      	ld.w      	r0, (r0, 0x10)
1801467e:	c54057e0 	zext      	r0, r0, 31, 10
18014682:	b802      	st.w      	r0, (r14, 0x8)
18014684:	3000      	movi      	r0, 0
18014686:	b801      	st.w      	r0, (r14, 0x4)
18014688:	b800      	st.w      	r0, (r14, 0x0)
1801468a:	e46323ff 	andi      	r3, r3, 1023
1801468e:	1003      	lrw      	r0, 0x18014588	// 18014698 <os_task_run+0x28>
18014690:	e3ffc376 	bsr      	0x1800cd7c	// 1800cd7c <csi_kernel_task_new>
18014694:	1404      	addi      	r14, r14, 16
18014696:	1490      	pop      	r15
18014698:	18014588 	.long	0x18014588

1801469c <_os_timer_cb>:
1801469c:	14d0      	push      	r15
1801469e:	9064      	ld.w      	r3, (r0, 0x10)
180146a0:	2300      	addi      	r3, 1
180146a2:	b064      	st.w      	r3, (r0, 0x10)
180146a4:	9062      	ld.w      	r3, (r0, 0x8)
180146a6:	9003      	ld.w      	r0, (r0, 0xc)
180146a8:	7bcd      	jsr      	r3
180146aa:	1490      	pop      	r15

180146ac <os_timer_init>:
180146ac:	14d2      	push      	r4-r5, r15
180146ae:	6d03      	mov      	r4, r0
180146b0:	10ae      	lrw      	r5, 0x6a7b3c4d	// 180146e8 <os_timer_init+0x3c>
180146b2:	6c0b      	mov      	r0, r2
180146b4:	9440      	ld.w      	r2, (r4, 0x0)
180146b6:	654a      	cmpne      	r2, r5
180146b8:	0c12      	bf      	0x180146dc	// 180146dc <os_timer_init+0x30>
180146ba:	e9010011 	bez      	r1, 0x180146dc	// 180146dc <os_timer_init+0x30>
180146be:	b463      	st.w      	r3, (r4, 0xc)
180146c0:	3300      	movi      	r3, 0
180146c2:	b422      	st.w      	r1, (r4, 0x8)
180146c4:	b465      	st.w      	r3, (r4, 0x14)
180146c6:	6c43      	mov      	r1, r0
180146c8:	b466      	st.w      	r3, (r4, 0x18)
180146ca:	b464      	st.w      	r3, (r4, 0x10)
180146cc:	6c93      	mov      	r2, r4
180146ce:	1008      	lrw      	r0, 0x1801469c	// 180146ec <os_timer_init+0x40>
180146d0:	e3ffc3d4 	bsr      	0x1800ce78	// 1800ce78 <csi_kernel_timer_new>
180146d4:	b401      	st.w      	r0, (r4, 0x4)
180146d6:	e9000003 	bez      	r0, 0x180146dc	// 180146dc <os_timer_init+0x30>
180146da:	b4a0      	st.w      	r5, (r4, 0x0)
180146dc:	9461      	ld.w      	r3, (r4, 0x4)
180146de:	3b40      	cmpnei      	r3, 0
180146e0:	64c3      	mvcv      	r3
180146e2:	3000      	movi      	r0, 0
180146e4:	600e      	subu      	r0, r3
180146e6:	1492      	pop      	r4-r5, r15
180146e8:	6a7b3c4d 	.long	0x6a7b3c4d
180146ec:	1801469c 	.long	0x1801469c

180146f0 <os_timer_start>:
180146f0:	14d1      	push      	r4, r15
180146f2:	9081      	ld.w      	r4, (r0, 0x4)
180146f4:	e904000a 	bez      	r4, 0x18014708	// 18014708 <os_timer_start+0x18>
180146f8:	6c07      	mov      	r0, r1
180146fa:	e3ffc3b3 	bsr      	0x1800ce60	// 1800ce60 <csi_kernel_ms2tick>
180146fe:	6c43      	mov      	r1, r0
18014700:	6c13      	mov      	r0, r4
18014702:	e3ffc405 	bsr      	0x1800cf0c	// 1800cf0c <csi_kernel_timer_start>
18014706:	1491      	pop      	r4, r15
18014708:	6c13      	mov      	r0, r4
1801470a:	07fe      	br      	0x18014706	// 18014706 <os_timer_start+0x16>

1801470c <os_timer_stop>:
1801470c:	14d0      	push      	r15
1801470e:	9001      	ld.w      	r0, (r0, 0x4)
18014710:	e9000004 	bez      	r0, 0x18014718	// 18014718 <os_timer_stop+0xc>
18014714:	e3ffc426 	bsr      	0x1800cf60	// 1800cf60 <csi_kernel_timer_stop>
18014718:	3000      	movi      	r0, 0
1801471a:	1490      	pop      	r15

1801471c <os_sleep_ms>:
1801471c:	14d0      	push      	r15
1801471e:	e3ffc3a3 	bsr      	0x1800ce64	// 1800ce64 <csi_kernel_delay_ms>
18014722:	1490      	pop      	r15

18014724 <os_jiffies>:
18014724:	1062      	lrw      	r3, 0x20002bcc	// 1801472c <os_jiffies+0x8>
18014726:	9300      	ld.w      	r0, (r3, 0x0)
18014728:	9321      	ld.w      	r1, (r3, 0x4)
1801472a:	783c      	jmp      	r15
1801472c:	20002bcc 	.long	0x20002bcc

18014730 <os_event_del>:
18014730:	14d1      	push      	r4, r15
18014732:	6d03      	mov      	r4, r0
18014734:	e9000006 	bez      	r0, 0x18014740	// 18014740 <os_event_del+0x10>
18014738:	9040      	ld.w      	r2, (r0, 0x0)
1801473a:	1068      	lrw      	r3, 0xa67b3cd4	// 18014758 <os_event_del+0x28>
1801473c:	64ca      	cmpne      	r2, r3
1801473e:	0c06      	bf      	0x1801474a	// 1801474a <os_event_del+0x1a>
18014740:	1047      	lrw      	r2, 0x18018ab4	// 1801475c <os_event_del+0x2c>
18014742:	311c      	movi      	r1, 28
18014744:	1007      	lrw      	r0, 0x18018a7d	// 18014760 <os_event_del+0x30>
18014746:	e3ff7467 	bsr      	0x18003014	// 18003014 <assert_internal>
1801474a:	9401      	ld.w      	r0, (r4, 0x4)
1801474c:	e3ffc41a 	bsr      	0x1800cf80	// 1800cf80 <csi_kernel_event_del>
18014750:	3300      	movi      	r3, 0
18014752:	b461      	st.w      	r3, (r4, 0x4)
18014754:	b460      	st.w      	r3, (r4, 0x0)
18014756:	1491      	pop      	r4, r15
18014758:	a67b3cd4 	.long	0xa67b3cd4
1801475c:	18018ab4 	.long	0x18018ab4
18014760:	18018a7d 	.long	0x18018a7d

18014764 <os_event_set>:
18014764:	14d3      	push      	r4-r6, r15
18014766:	1421      	subi      	r14, r14, 4
18014768:	6d03      	mov      	r4, r0
1801476a:	6d87      	mov      	r6, r1
1801476c:	6d4b      	mov      	r5, r2
1801476e:	e9000006 	bez      	r0, 0x1801477a	// 1801477a <os_event_set+0x16>
18014772:	9040      	ld.w      	r2, (r0, 0x0)
18014774:	1069      	lrw      	r3, 0xa67b3cd4	// 18014798 <os_event_set+0x34>
18014776:	64ca      	cmpne      	r2, r3
18014778:	0c06      	bf      	0x18014784	// 18014784 <os_event_set+0x20>
1801477a:	1049      	lrw      	r2, 0x18018ab4	// 1801479c <os_event_set+0x38>
1801477c:	3126      	movi      	r1, 38
1801477e:	1009      	lrw      	r0, 0x18018a8a	// 180147a0 <os_event_set+0x3c>
18014780:	e3ff744a 	bsr      	0x18003014	// 18003014 <assert_internal>
18014784:	e9250003 	bnez      	r5, 0x1801478a	// 1801478a <os_event_set+0x26>
18014788:	6d7b      	mov      	r5, r14
1801478a:	6c97      	mov      	r2, r5
1801478c:	6c5b      	mov      	r1, r6
1801478e:	9401      	ld.w      	r0, (r4, 0x4)
18014790:	e3ffc40c 	bsr      	0x1800cfa8	// 1800cfa8 <csi_kernel_event_set>
18014794:	1401      	addi      	r14, r14, 4
18014796:	1493      	pop      	r4-r6, r15
18014798:	a67b3cd4 	.long	0xa67b3cd4
1801479c:	18018ab4 	.long	0x18018ab4
180147a0:	18018a8a 	.long	0x18018a8a

180147a4 <os_event_clear>:
180147a4:	14d3      	push      	r4-r6, r15
180147a6:	1421      	subi      	r14, r14, 4
180147a8:	6d03      	mov      	r4, r0
180147aa:	6d87      	mov      	r6, r1
180147ac:	6d4b      	mov      	r5, r2
180147ae:	e9000006 	bez      	r0, 0x180147ba	// 180147ba <os_event_clear+0x16>
180147b2:	9040      	ld.w      	r2, (r0, 0x0)
180147b4:	1069      	lrw      	r3, 0xa67b3cd4	// 180147d8 <os_event_clear+0x34>
180147b6:	64ca      	cmpne      	r2, r3
180147b8:	0c06      	bf      	0x180147c4	// 180147c4 <os_event_clear+0x20>
180147ba:	1049      	lrw      	r2, 0x18018ab4	// 180147dc <os_event_clear+0x38>
180147bc:	312e      	movi      	r1, 46
180147be:	1009      	lrw      	r0, 0x18018a97	// 180147e0 <os_event_clear+0x3c>
180147c0:	e3ff742a 	bsr      	0x18003014	// 18003014 <assert_internal>
180147c4:	e9250003 	bnez      	r5, 0x180147ca	// 180147ca <os_event_clear+0x26>
180147c8:	6d7b      	mov      	r5, r14
180147ca:	6c97      	mov      	r2, r5
180147cc:	6c5b      	mov      	r1, r6
180147ce:	9401      	ld.w      	r0, (r4, 0x4)
180147d0:	e3ffc402 	bsr      	0x1800cfd4	// 1800cfd4 <csi_kernel_event_clear>
180147d4:	1401      	addi      	r14, r14, 4
180147d6:	1493      	pop      	r4-r6, r15
180147d8:	a67b3cd4 	.long	0xa67b3cd4
180147dc:	18018ab4 	.long	0x18018ab4
180147e0:	18018a97 	.long	0x18018a97

180147e4 <os_event_wait>:
180147e4:	14d6      	push      	r4-r9, r15
180147e6:	1423      	subi      	r14, r14, 12
180147e8:	6d0f      	mov      	r4, r3
180147ea:	986a      	ld.w      	r3, (r14, 0x28)
180147ec:	6d83      	mov      	r6, r0
180147ee:	6dc7      	mov      	r7, r1
180147f0:	6d4b      	mov      	r5, r2
180147f2:	6e4f      	mov      	r9, r3
180147f4:	c4245428 	zext      	r8, r4, 1, 1
180147f8:	e9000006 	bez      	r0, 0x18014804	// 18014804 <os_event_wait+0x20>
180147fc:	9040      	ld.w      	r2, (r0, 0x0)
180147fe:	106d      	lrw      	r3, 0xa67b3cd4	// 18014830 <os_event_wait+0x4c>
18014800:	64ca      	cmpne      	r2, r3
18014802:	0c06      	bf      	0x1801480e	// 1801480e <os_event_wait+0x2a>
18014804:	104c      	lrw      	r2, 0x18018ab4	// 18014834 <os_event_wait+0x50>
18014806:	313f      	movi      	r1, 63
18014808:	100c      	lrw      	r0, 0x18018aa6	// 18014838 <os_event_wait+0x54>
1801480a:	e3ff7405 	bsr      	0x18003014	// 18003014 <assert_internal>
1801480e:	c4842482 	nor      	r2, r4, r4
18014812:	e4422001 	andi      	r2, r2, 1
18014816:	e9250003 	bnez      	r5, 0x1801481c	// 1801481c <os_event_wait+0x38>
1801481a:	1d02      	addi      	r5, r14, 8
1801481c:	9601      	ld.w      	r0, (r6, 0x4)
1801481e:	dd2e2001 	st.w      	r9, (r14, 0x4)
18014822:	b8a0      	st.w      	r5, (r14, 0x0)
18014824:	6ce3      	mov      	r3, r8
18014826:	6c5f      	mov      	r1, r7
18014828:	e3ffc3ee 	bsr      	0x1800d004	// 1800d004 <csi_kernel_event_wait>
1801482c:	1403      	addi      	r14, r14, 12
1801482e:	1496      	pop      	r4-r9, r15
18014830:	a67b3cd4 	.long	0xa67b3cd4
18014834:	18018ab4 	.long	0x18018ab4
18014838:	18018aa6 	.long	0x18018aa6

1801483c <list_del>:
1801483c:	9061      	ld.w      	r3, (r0, 0x4)
1801483e:	9040      	ld.w      	r2, (r0, 0x0)
18014840:	e9030006 	bez      	r3, 0x1801484c	// 1801484c <list_del+0x10>
18014844:	e9020004 	bez      	r2, 0x1801484c	// 1801484c <list_del+0x10>
18014848:	b261      	st.w      	r3, (r2, 0x4)
1801484a:	b340      	st.w      	r2, (r3, 0x0)
1801484c:	3300      	movi      	r3, 0
1801484e:	b060      	st.w      	r3, (r0, 0x0)
18014850:	b061      	st.w      	r3, (r0, 0x4)
18014852:	783c      	jmp      	r15

18014854 <os_work_func_cb>:
18014854:	14d0      	push      	r15
18014856:	9068      	ld.w      	r3, (r0, 0x20)
18014858:	904b      	ld.w      	r2, (r0, 0x2c)
1801485a:	902a      	ld.w      	r1, (r0, 0x28)
1801485c:	9009      	ld.w      	r0, (r0, 0x24)
1801485e:	7bcd      	jsr      	r3
18014860:	3000      	movi      	r0, 0
18014862:	1490      	pop      	r15

18014864 <mainwkq_mntr_cb>:
18014864:	14d3      	push      	r4-r6, r15
18014866:	1421      	subi      	r14, r14, 4
18014868:	c0006023 	mfcr      	r3, cr<0, 0>
1801486c:	c0807020 	psrclr      	ie
18014870:	1055      	lrw      	r2, 0x20002c20	// 180148c4 <mainwkq_mntr_cb+0x60>
18014872:	e4632040 	andi      	r3, r3, 64
18014876:	9294      	ld.w      	r4, (r2, 0x50)
18014878:	6d4b      	mov      	r5, r2
1801487a:	e904001b 	bez      	r4, 0x180148b0	// 180148b0 <mainwkq_mntr_cb+0x4c>
1801487e:	94c7      	ld.w      	r6, (r4, 0x1c)
18014880:	e923001b 	bnez      	r3, 0x180148b6	// 180148b6 <mainwkq_mntr_cb+0x52>
18014884:	e3ffff50 	bsr      	0x18014724	// 18014724 <os_jiffies>
18014888:	d9852015 	ld.w      	r12, (r5, 0x54)
1801488c:	d9a52016 	ld.w      	r13, (r5, 0x58)
18014890:	6400      	cmphs      	r0, r0
18014892:	6033      	subc      	r0, r12
18014894:	6077      	subc      	r1, r13
18014896:	e9210005 	bnez      	r1, 0x180148a0	// 180148a0 <mainwkq_mntr_cb+0x3c>
1801489a:	eb000064 	cmphsi      	r0, 101
1801489e:	0c10      	bf      	0x180148be	// 180148be <mainwkq_mntr_cb+0x5a>
180148a0:	b820      	st.w      	r1, (r14, 0x0)
180148a2:	6cc3      	mov      	r3, r0
180148a4:	6c9b      	mov      	r2, r6
180148a6:	6c53      	mov      	r1, r4
180148a8:	1008      	lrw      	r0, 0x18018ad5	// 180148c8 <mainwkq_mntr_cb+0x64>
180148aa:	e3ffc10d 	bsr      	0x1800cac4	// 1800cac4 <__cskyvprintfprintf>
180148ae:	0408      	br      	0x180148be	// 180148be <mainwkq_mntr_cb+0x5a>
180148b0:	e9030007 	bez      	r3, 0x180148be	// 180148be <mainwkq_mntr_cb+0x5a>
180148b4:	6d93      	mov      	r6, r4
180148b6:	c0807420 	psrset      	ie
180148ba:	e924ffe5 	bnez      	r4, 0x18014884	// 18014884 <mainwkq_mntr_cb+0x20>
180148be:	1401      	addi      	r14, r14, 4
180148c0:	1493      	pop      	r4-r6, r15
180148c2:	0000      	.short	0x0000
180148c4:	20002c20 	.long	0x20002c20
180148c8:	18018ad5 	.long	0x18018ad5

180148cc <os_workqueue_add>:
180148cc:	14d0      	push      	r15
180148ce:	816c      	ld.b      	r3, (r1, 0xc)
180148d0:	3200      	movi      	r2, 0
180148d2:	e46320fe 	andi      	r3, r3, 254
180148d6:	c4625c02 	ins      	r3, r2, 2, 2
180148da:	a16c      	st.b      	r3, (r1, 0xc)
180148dc:	9163      	ld.w      	r3, (r1, 0xc)
180148de:	1056      	lrw      	r2, 0xa763d3	// 18014934 <os_workqueue_add+0x68>
180148e0:	c4625ee8 	ins      	r3, r2, 31, 8
180148e4:	748c      	zextb      	r2, r3
180148e6:	b163      	st.w      	r3, (r1, 0xc)
180148e8:	e46220f8 	andi      	r3, r2, 248
180148ec:	b102      	st.w      	r0, (r1, 0x8)
180148ee:	e5800037 	addi      	r12, r0, 56
180148f2:	e9030009 	bez      	r3, 0x18014904	// 18014904 <os_workqueue_add+0x38>
180148f6:	906e      	ld.w      	r3, (r0, 0x38)
180148f8:	64f2      	cmpne      	r12, r3
180148fa:	0c05      	bf      	0x18014904	// 18014904 <os_workqueue_add+0x38>
180148fc:	c46254e2 	zext      	r2, r2, 7, 3
18014900:	64f2      	cmpne      	r12, r3
18014902:	0806      	bt      	0x1801490e	// 1801490e <os_workqueue_add+0x42>
18014904:	906f      	ld.w      	r3, (r0, 0x3c)
18014906:	b02f      	st.w      	r1, (r0, 0x3c)
18014908:	dd812000 	st.w      	r12, (r1, 0x0)
1801490c:	040b      	br      	0x18014922	// 18014922 <os_workqueue_add+0x56>
1801490e:	d9a3000c 	ld.b      	r13, (r3, 0xc)
18014912:	c46d484d 	lsri      	r13, r13, 3
18014916:	64b5      	cmplt      	r13, r2
18014918:	0c0b      	bf      	0x1801492e	// 1801492e <os_workqueue_add+0x62>
1801491a:	9361      	ld.w      	r3, (r3, 0x4)
1801491c:	9340      	ld.w      	r2, (r3, 0x0)
1801491e:	b221      	st.w      	r1, (r2, 0x4)
18014920:	b140      	st.w      	r2, (r1, 0x0)
18014922:	b161      	st.w      	r3, (r1, 0x4)
18014924:	2047      	addi      	r0, 72
18014926:	b320      	st.w      	r1, (r3, 0x0)
18014928:	e3fffe04 	bsr      	0x18014530	// 18014530 <os_sema_up>
1801492c:	1490      	pop      	r15
1801492e:	9360      	ld.w      	r3, (r3, 0x0)
18014930:	07e8      	br      	0x18014900	// 18014900 <os_workqueue_add+0x34>
18014932:	0000      	.short	0x0000
18014934:	00a763d3 	.long	0x00a763d3

18014938 <os_workqueue_task>:
18014938:	14d8      	push      	r4-r11, r15
1801493a:	1422      	subi      	r14, r14, 8
1801493c:	6dc3      	mov      	r7, r0
1801493e:	3500      	movi      	r5, 0
18014940:	e5400047 	addi      	r10, r0, 72
18014944:	ea080000 	movi      	r8, 0
18014948:	ea090000 	movi      	r9, 0
1801494c:	8745      	ld.b      	r2, (r7, 0x5)
1801494e:	3101      	movi      	r1, 1
18014950:	c4415c03 	ins      	r2, r1, 3, 3
18014954:	3100      	movi      	r1, 0
18014956:	a745      	st.b      	r2, (r7, 0x5)
18014958:	2900      	subi      	r1, 1
1801495a:	6c2b      	mov      	r0, r10
1801495c:	e3fffdce 	bsr      	0x180144f8	// 180144f8 <os_sema_down>
18014960:	3600      	movi      	r6, 0
18014962:	8745      	ld.b      	r2, (r7, 0x5)
18014964:	c4465c03 	ins      	r2, r6, 3, 3
18014968:	a745      	st.b      	r2, (r7, 0x5)
1801496a:	e5670037 	addi      	r11, r7, 56
1801496e:	c0006022 	mfcr      	r2, cr<0, 0>
18014972:	c0807020 	psrclr      	ie
18014976:	978e      	ld.w      	r4, (r7, 0x38)
18014978:	66d2      	cmpne      	r4, r11
1801497a:	e4422040 	andi      	r2, r2, 64
1801497e:	0c53      	bf      	0x18014a24	// 18014a24 <os_workqueue_task+0xec>
18014980:	e9040052 	bez      	r4, 0x18014a24	// 18014a24 <os_workqueue_task+0xec>
18014984:	b794      	st.w      	r4, (r7, 0x50)
18014986:	6c13      	mov      	r0, r4
18014988:	b841      	st.w      	r2, (r14, 0x4)
1801498a:	e3ffff59 	bsr      	0x1801483c	// 1801483c <list_del>
1801498e:	94a3      	ld.w      	r5, (r4, 0xc)
18014990:	1127      	lrw      	r1, 0x3d367a	// 18014a2c <os_workqueue_task+0xf4>
18014992:	c4a15ee8 	ins      	r5, r1, 31, 8
18014996:	b4a3      	st.w      	r5, (r4, 0xc)
18014998:	3101      	movi      	r1, 1
1801499a:	c4a15c00 	ins      	r5, r1, 0, 0
1801499e:	9841      	ld.w      	r2, (r14, 0x4)
180149a0:	9424      	ld.w      	r1, (r4, 0x10)
180149a2:	2900      	subi      	r1, 1
180149a4:	9467      	ld.w      	r3, (r4, 0x1c)
180149a6:	a4ac      	st.b      	r5, (r4, 0xc)
180149a8:	b4c2      	st.w      	r6, (r4, 0x8)
180149aa:	b424      	st.w      	r1, (r4, 0x10)
180149ac:	c4255425 	zext      	r5, r5, 1, 1
180149b0:	b860      	st.w      	r3, (r14, 0x0)
180149b2:	e9020006 	bez      	r2, 0x180149be	// 180149be <os_workqueue_task+0x86>
180149b6:	c0807420 	psrset      	ie
180149ba:	e904ffc9 	bez      	r4, 0x1801494c	// 1801494c <os_workqueue_task+0x14>
180149be:	e3fffeb3 	bsr      	0x18014724	// 18014724 <os_jiffies>
180149c2:	b715      	st.w      	r0, (r7, 0x54)
180149c4:	b736      	st.w      	r1, (r7, 0x58)
180149c6:	9860      	ld.w      	r3, (r14, 0x0)
180149c8:	6c13      	mov      	r0, r4
180149ca:	7bcd      	jsr      	r3
180149cc:	dd072015 	st.w      	r8, (r7, 0x54)
180149d0:	dd272016 	st.w      	r9, (r7, 0x58)
180149d4:	b7d4      	st.w      	r6, (r7, 0x50)
180149d6:	e9050006 	bez      	r5, 0x180149e2	// 180149e2 <os_workqueue_task+0xaa>
180149da:	6c13      	mov      	r0, r4
180149dc:	e3ffbfca 	bsr      	0x1800c970	// 1800c970 <_os_free>
180149e0:	07c7      	br      	0x1801496e	// 1801496e <os_workqueue_task+0x36>
180149e2:	e920ffc6 	bnez      	r0, 0x1801496e	// 1801496e <os_workqueue_task+0x36>
180149e6:	c0006022 	mfcr      	r2, cr<0, 0>
180149ea:	c0807020 	psrclr      	ie
180149ee:	842c      	ld.b      	r1, (r4, 0xc)
180149f0:	c4255c00 	ins      	r1, r5, 0, 0
180149f4:	a42c      	st.b      	r1, (r4, 0xc)
180149f6:	9424      	ld.w      	r1, (r4, 0x10)
180149f8:	e4422040 	andi      	r2, r2, 64
180149fc:	e901000f 	bez      	r1, 0x18014a1a	// 18014a1a <os_workqueue_task+0xe2>
18014a00:	3300      	movi      	r3, 0
18014a02:	9423      	ld.w      	r1, (r4, 0xc)
18014a04:	2bff      	subi      	r3, 256
18014a06:	684c      	and      	r1, r3
18014a08:	100a      	lrw      	r0, 0xa763d300	// 18014a30 <os_workqueue_task+0xf8>
18014a0a:	6406      	cmpne      	r1, r0
18014a0c:	0c07      	bf      	0x18014a1a	// 18014a1a <os_workqueue_task+0xe2>
18014a0e:	6c53      	mov      	r1, r4
18014a10:	6c1f      	mov      	r0, r7
18014a12:	b841      	st.w      	r2, (r14, 0x4)
18014a14:	e3ffff5c 	bsr      	0x180148cc	// 180148cc <os_workqueue_add>
18014a18:	9841      	ld.w      	r2, (r14, 0x4)
18014a1a:	e902ffaa 	bez      	r2, 0x1801496e	// 1801496e <os_workqueue_task+0x36>
18014a1e:	c0807420 	psrset      	ie
18014a22:	07a6      	br      	0x1801496e	// 1801496e <os_workqueue_task+0x36>
18014a24:	e902ff94 	bez      	r2, 0x1801494c	// 1801494c <os_workqueue_task+0x14>
18014a28:	3400      	movi      	r4, 0
18014a2a:	07c6      	br      	0x180149b6	// 180149b6 <os_workqueue_task+0x7e>
18014a2c:	003d367a 	.long	0x003d367a
18014a30:	a763d300 	.long	0xa763d300

18014a34 <os_workqueue_check_expired>:
18014a34:	14d8      	push      	r4-r11, r15
18014a36:	1421      	subi      	r14, r14, 4
18014a38:	6d03      	mov      	r4, r0
18014a3a:	e3fffe75 	bsr      	0x18014724	// 18014724 <os_jiffies>
18014a3e:	6e03      	mov      	r8, r0
18014a40:	6e47      	mov      	r9, r1
18014a42:	9430      	ld.w      	r1, (r4, 0x40)
18014a44:	e544003f 	addi      	r10, r4, 64
18014a48:	91a0      	ld.w      	r5, (r1, 0x0)
18014a4a:	ea0b0000 	movi      	r11, 0
18014a4e:	3600      	movi      	r6, 0
18014a50:	3700      	movi      	r7, 0
18014a52:	6686      	cmpne      	r1, r10
18014a54:	080a      	bt      	0x18014a68	// 18014a68 <os_workqueue_check_expired+0x34>
18014a56:	9410      	ld.w      	r0, (r4, 0x40)
18014a58:	6406      	cmpne      	r1, r0
18014a5a:	0c26      	bf      	0x18014aa6	// 18014aa6 <os_workqueue_check_expired+0x72>
18014a5c:	e9000004 	bez      	r0, 0x18014a64	// 18014a64 <os_workqueue_check_expired+0x30>
18014a60:	9005      	ld.w      	r0, (r0, 0x14)
18014a62:	6022      	subu      	r0, r8
18014a64:	1401      	addi      	r14, r14, 4
18014a66:	1498      	pop      	r4-r11, r15
18014a68:	9145      	ld.w      	r2, (r1, 0x14)
18014a6a:	9166      	ld.w      	r3, (r1, 0x18)
18014a6c:	64a2      	cmpne      	r8, r2
18014a6e:	0803      	bt      	0x18014a74	// 18014a74 <os_workqueue_check_expired+0x40>
18014a70:	64e6      	cmpne      	r9, r3
18014a72:	0c06      	bf      	0x18014a7e	// 18014a7e <os_workqueue_check_expired+0x4a>
18014a74:	6488      	cmphs      	r2, r2
18014a76:	60a3      	subc      	r2, r8
18014a78:	60e7      	subc      	r3, r9
18014a7a:	e9a30013 	bhsz      	r3, 0x18014aa0	// 18014aa0 <os_workqueue_check_expired+0x6c>
18014a7e:	816c      	ld.b      	r3, (r1, 0xc)
18014a80:	c46b5c02 	ins      	r3, r11, 2, 2
18014a84:	a16c      	st.b      	r3, (r1, 0xc)
18014a86:	9164      	ld.w      	r3, (r1, 0x10)
18014a88:	2300      	addi      	r3, 1
18014a8a:	6c07      	mov      	r0, r1
18014a8c:	b1c5      	st.w      	r6, (r1, 0x14)
18014a8e:	b1e6      	st.w      	r7, (r1, 0x18)
18014a90:	b164      	st.w      	r3, (r1, 0x10)
18014a92:	b820      	st.w      	r1, (r14, 0x0)
18014a94:	e3fffed4 	bsr      	0x1801483c	// 1801483c <list_del>
18014a98:	9820      	ld.w      	r1, (r14, 0x0)
18014a9a:	6c13      	mov      	r0, r4
18014a9c:	e3ffff18 	bsr      	0x180148cc	// 180148cc <os_workqueue_add>
18014aa0:	6c57      	mov      	r1, r5
18014aa2:	95a0      	ld.w      	r5, (r5, 0x0)
18014aa4:	07d7      	br      	0x18014a52	// 18014a52 <os_workqueue_check_expired+0x1e>
18014aa6:	3000      	movi      	r0, 0
18014aa8:	07de      	br      	0x18014a64	// 18014a64 <os_workqueue_check_expired+0x30>
	...

18014aac <os_workqueue_timer_cb>:
18014aac:	14d3      	push      	r4-r6, r15
18014aae:	58be      	addi      	r5, r0, 8
18014ab0:	6d83      	mov      	r6, r0
18014ab2:	6c17      	mov      	r0, r5
18014ab4:	e3fffe2c 	bsr      	0x1801470c	// 1801470c <os_timer_stop>
18014ab8:	c0006024 	mfcr      	r4, cr<0, 0>
18014abc:	c0807020 	psrclr      	ie
18014ac0:	6c1b      	mov      	r0, r6
18014ac2:	e4842040 	andi      	r4, r4, 64
18014ac6:	e3ffffb7 	bsr      	0x18014a34	// 18014a34 <os_workqueue_check_expired>
18014aca:	6c43      	mov      	r1, r0
18014acc:	e9040004 	bez      	r4, 0x18014ad4	// 18014ad4 <os_workqueue_timer_cb+0x28>
18014ad0:	c0807420 	psrset      	ie
18014ad4:	e9010005 	bez      	r1, 0x18014ade	// 18014ade <os_workqueue_timer_cb+0x32>
18014ad8:	6c17      	mov      	r0, r5
18014ada:	e3fffe0b 	bsr      	0x180146f0	// 180146f0 <os_timer_start>
18014ade:	1493      	pop      	r4-r6, r15

18014ae0 <mainwkq_monitor_init>:
18014ae0:	14d1      	push      	r4, r15
18014ae2:	1088      	lrw      	r4, 0x200020a0	// 18014b00 <mainwkq_monitor_init+0x20>
18014ae4:	3300      	movi      	r3, 0
18014ae6:	3201      	movi      	r2, 1
18014ae8:	1027      	lrw      	r1, 0x18014864	// 18014b04 <mainwkq_monitor_init+0x24>
18014aea:	6c13      	mov      	r0, r4
18014aec:	e3fffde0 	bsr      	0x180146ac	// 180146ac <os_timer_init>
18014af0:	ea011388 	movi      	r1, 5000
18014af4:	6c13      	mov      	r0, r4
18014af6:	e3fffdfd 	bsr      	0x180146f0	// 180146f0 <os_timer_start>
18014afa:	3000      	movi      	r0, 0
18014afc:	1491      	pop      	r4, r15
18014afe:	0000      	.short	0x0000
18014b00:	200020a0 	.long	0x200020a0
18014b04:	18014864 	.long	0x18014864

18014b08 <os_workqueue_init>:
18014b08:	14d2      	push      	r4-r5, r15
18014b0a:	b020      	st.w      	r1, (r0, 0x0)
18014b0c:	a863      	st.h      	r3, (r0, 0x6)
18014b0e:	8822      	ld.h      	r1, (r0, 0x4)
18014b10:	e4600037 	addi      	r3, r0, 56
18014b14:	c4225d20 	ins      	r1, r2, 9, 0
18014b18:	b06e      	st.w      	r3, (r0, 0x38)
18014b1a:	b06f      	st.w      	r3, (r0, 0x3c)
18014b1c:	e460003f 	addi      	r3, r0, 64
18014b20:	6d03      	mov      	r4, r0
18014b22:	a822      	st.h      	r1, (r0, 0x4)
18014b24:	b070      	st.w      	r3, (r0, 0x40)
18014b26:	b071      	st.w      	r3, (r0, 0x44)
18014b28:	3100      	movi      	r1, 0
18014b2a:	2047      	addi      	r0, 72
18014b2c:	e3fffcb6 	bsr      	0x18014498	// 18014498 <os_sema_init>
18014b30:	e4a40023 	addi      	r5, r4, 36
18014b34:	6cd3      	mov      	r3, r4
18014b36:	3200      	movi      	r2, 0
18014b38:	102e      	lrw      	r1, 0x18014aac	// 18014b70 <os_workqueue_init+0x68>
18014b3a:	5c1e      	addi      	r0, r4, 8
18014b3c:	e3fffdb8 	bsr      	0x180146ac	// 180146ac <os_timer_init>
18014b40:	6cd3      	mov      	r3, r4
18014b42:	104d      	lrw      	r2, 0x18014938	// 18014b74 <os_workqueue_init+0x6c>
18014b44:	6c57      	mov      	r1, r5
18014b46:	9400      	ld.w      	r0, (r4, 0x0)
18014b48:	e3fffd26 	bsr      	0x18014594	// 18014594 <os_task_init>
18014b4c:	8c23      	ld.h      	r1, (r4, 0x6)
18014b4e:	6c17      	mov      	r0, r5
18014b50:	e3fffd8a 	bsr      	0x18014664	// 18014664 <os_task_set_stacksize>
18014b54:	8424      	ld.b      	r1, (r4, 0x4)
18014b56:	6c17      	mov      	r0, r5
18014b58:	e3fffd76 	bsr      	0x18014644	// 18014644 <os_task_set_priority>
18014b5c:	6c17      	mov      	r0, r5
18014b5e:	e3fffd89 	bsr      	0x18014670	// 18014670 <os_task_run>
18014b62:	8465      	ld.b      	r3, (r4, 0x5)
18014b64:	3201      	movi      	r2, 1
18014b66:	c4625c02 	ins      	r3, r2, 2, 2
18014b6a:	3000      	movi      	r0, 0
18014b6c:	a465      	st.b      	r3, (r4, 0x5)
18014b6e:	1492      	pop      	r4-r5, r15
18014b70:	18014aac 	.long	0x18014aac
18014b74:	18014938 	.long	0x18014938

18014b78 <os_work_schedule>:
18014b78:	14d3      	push      	r4-r6, r15
18014b7a:	6d83      	mov      	r6, r0
18014b7c:	6d07      	mov      	r4, r1
18014b7e:	c0006025 	mfcr      	r5, cr<0, 0>
18014b82:	c0807020 	psrclr      	ie
18014b86:	3200      	movi      	r2, 0
18014b88:	2aff      	subi      	r2, 256
18014b8a:	9163      	ld.w      	r3, (r1, 0xc)
18014b8c:	c4432021 	and      	r1, r3, r2
18014b90:	104f      	lrw      	r2, 0xa763d300	// 18014bcc <os_work_schedule+0x54>
18014b92:	6486      	cmpne      	r1, r2
18014b94:	e4a52040 	andi      	r5, r5, 64
18014b98:	080d      	bt      	0x18014bb2	// 18014bb2 <os_work_schedule+0x3a>
18014b9a:	3200      	movi      	r2, 0
18014b9c:	2afb      	subi      	r2, 252
18014b9e:	68c8      	and      	r3, r2
18014ba0:	104c      	lrw      	r2, 0xa763d304	// 18014bd0 <os_work_schedule+0x58>
18014ba2:	648e      	cmpne      	r3, r2
18014ba4:	080b      	bt      	0x18014bba	// 18014bba <os_work_schedule+0x42>
18014ba6:	9460      	ld.w      	r3, (r4, 0x0)
18014ba8:	e9030005 	bez      	r3, 0x18014bb2	// 18014bb2 <os_work_schedule+0x3a>
18014bac:	6c13      	mov      	r0, r4
18014bae:	e3fffe47 	bsr      	0x1801483c	// 1801483c <list_del>
18014bb2:	6c53      	mov      	r1, r4
18014bb4:	6c1b      	mov      	r0, r6
18014bb6:	e3fffe8b 	bsr      	0x180148cc	// 180148cc <os_workqueue_add>
18014bba:	9464      	ld.w      	r3, (r4, 0x10)
18014bbc:	2300      	addi      	r3, 1
18014bbe:	b464      	st.w      	r3, (r4, 0x10)
18014bc0:	e9050004 	bez      	r5, 0x18014bc8	// 18014bc8 <os_work_schedule+0x50>
18014bc4:	c0807420 	psrset      	ie
18014bc8:	1493      	pop      	r4-r6, r15
18014bca:	0000      	.short	0x0000
18014bcc:	a763d300 	.long	0xa763d300
18014bd0:	a763d304 	.long	0xa763d304

18014bd4 <os_run_func>:
18014bd4:	14d5      	push      	r4-r8, r15
18014bd6:	1096      	lrw      	r4, 0x20002c20	// 18014c2c <os_run_func+0x58>
18014bd8:	6d43      	mov      	r5, r0
18014bda:	8405      	ld.b      	r0, (r4, 0x5)
18014bdc:	e4002004 	andi      	r0, r0, 4
18014be0:	6e07      	mov      	r8, r1
18014be2:	6dcb      	mov      	r7, r2
18014be4:	6d8f      	mov      	r6, r3
18014be6:	e900001d 	bez      	r0, 0x18014c20	// 18014c20 <os_run_func+0x4c>
18014bea:	e905001b 	bez      	r5, 0x18014c20	// 18014c20 <os_run_func+0x4c>
18014bee:	3030      	movi      	r0, 48
18014bf0:	e3ffbea2 	bsr      	0x1800c934	// 1800c934 <_os_zalloc>
18014bf4:	e9000019 	bez      	r0, 0x18014c26	// 18014c26 <os_run_func+0x52>
18014bf8:	106e      	lrw      	r3, 0x18014854	// 18014c30 <os_run_func+0x5c>
18014bfa:	d980000c 	ld.b      	r12, (r0, 0xc)
18014bfe:	b067      	st.w      	r3, (r0, 0x1c)
18014c00:	3301      	movi      	r3, 1
18014c02:	c5835c01 	ins      	r12, r3, 1, 1
18014c06:	dd80000c 	st.b      	r12, (r0, 0xc)
18014c0a:	b0a8      	st.w      	r5, (r0, 0x20)
18014c0c:	dd002009 	st.w      	r8, (r0, 0x24)
18014c10:	b0ea      	st.w      	r7, (r0, 0x28)
18014c12:	b0cb      	st.w      	r6, (r0, 0x2c)
18014c14:	6c43      	mov      	r1, r0
18014c16:	6c13      	mov      	r0, r4
18014c18:	e3ffffb0 	bsr      	0x18014b78	// 18014b78 <os_work_schedule>
18014c1c:	3000      	movi      	r0, 0
18014c1e:	1495      	pop      	r4-r8, r15
18014c20:	3000      	movi      	r0, 0
18014c22:	2815      	subi      	r0, 22
18014c24:	07fd      	br      	0x18014c1e	// 18014c1e <os_run_func+0x4a>
18014c26:	3000      	movi      	r0, 0
18014c28:	280b      	subi      	r0, 12
18014c2a:	07fa      	br      	0x18014c1e	// 18014c1e <os_run_func+0x4a>
18014c2c:	20002c20 	.long	0x20002c20
18014c30:	18014854 	.long	0x18014854

18014c34 <pbkdf2_sha1>:
18014c34:	14d8      	push      	r4-r11, r15
18014c36:	143b      	subi      	r14, r14, 108
18014c38:	b865      	st.w      	r3, (r14, 0x14)
18014c3a:	9964      	ld.w      	r3, (r14, 0x90)
18014c3c:	6e03      	mov      	r8, r0
18014c3e:	b823      	st.w      	r1, (r14, 0xc)
18014c40:	b844      	st.w      	r2, (r14, 0x10)
18014c42:	b862      	st.w      	r3, (r14, 0x8)
18014c44:	9985      	ld.w      	r4, (r14, 0x94)
18014c46:	3500      	movi      	r5, 0
18014c48:	e52e0057 	addi      	r9, r14, 88
18014c4c:	e9240005 	bnez      	r4, 0x18014c56	// 18014c56 <pbkdf2_sha1+0x22>
18014c50:	6c13      	mov      	r0, r4
18014c52:	141b      	addi      	r14, r14, 108
18014c54:	1498      	pop      	r4-r11, r15
18014c56:	6c23      	mov      	r0, r8
18014c58:	e3ff6886 	bsr      	0x18001d64	// 18001d64 <__strlen_fast>
18014c5c:	2500      	addi      	r5, 1
18014c5e:	3104      	movi      	r1, 4
18014c60:	9863      	ld.w      	r3, (r14, 0xc)
18014c62:	b82b      	st.w      	r1, (r14, 0x2c)
18014c64:	4d38      	lsri      	r1, r5, 24
18014c66:	b868      	st.w      	r3, (r14, 0x20)
18014c68:	dc2e001c 	st.b      	r1, (r14, 0x1c)
18014c6c:	9864      	ld.w      	r3, (r14, 0x10)
18014c6e:	4d30      	lsri      	r1, r5, 16
18014c70:	1a0a      	addi      	r2, r14, 40
18014c72:	b86a      	st.w      	r3, (r14, 0x28)
18014c74:	dc2e001d 	st.b      	r1, (r14, 0x1d)
18014c78:	1b07      	addi      	r3, r14, 28
18014c7a:	4d28      	lsri      	r1, r5, 8
18014c7c:	1e11      	addi      	r6, r14, 68
18014c7e:	6e83      	mov      	r10, r0
18014c80:	b869      	st.w      	r3, (r14, 0x24)
18014c82:	dc2e001e 	st.b      	r1, (r14, 0x1e)
18014c86:	b840      	st.w      	r2, (r14, 0x0)
18014c88:	6c43      	mov      	r1, r0
18014c8a:	b8c1      	st.w      	r6, (r14, 0x4)
18014c8c:	1b08      	addi      	r3, r14, 32
18014c8e:	3202      	movi      	r2, 2
18014c90:	6c23      	mov      	r0, r8
18014c92:	dcae001f 	st.b      	r5, (r14, 0x1f)
18014c96:	e0000053 	bsr      	0x18014d3c	// 18014d3c <hmac_sha1_vector>
18014c9a:	e9200039 	bnez      	r0, 0x18014d0c	// 18014d0c <pbkdf2_sha1+0xd8>
18014c9e:	1f0c      	addi      	r7, r14, 48
18014ca0:	3214      	movi      	r2, 20
18014ca2:	6c5b      	mov      	r1, r6
18014ca4:	6c1f      	mov      	r0, r7
18014ca6:	e00008db 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
18014caa:	ea0b0001 	movi      	r11, 1
18014cae:	9865      	ld.w      	r3, (r14, 0x14)
18014cb0:	64ed      	cmplt      	r11, r3
18014cb2:	080f      	bt      	0x18014cd0	// 18014cd0 <pbkdf2_sha1+0x9c>
18014cb4:	3c14      	cmphsi      	r4, 21
18014cb6:	3614      	movi      	r6, 20
18014cb8:	c4c40c20 	incf      	r6, r4, 0
18014cbc:	6c9b      	mov      	r2, r6
18014cbe:	6c5f      	mov      	r1, r7
18014cc0:	9802      	ld.w      	r0, (r14, 0x8)
18014cc2:	e00008cd 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
18014cc6:	9862      	ld.w      	r3, (r14, 0x8)
18014cc8:	60d8      	addu      	r3, r6
18014cca:	b862      	st.w      	r3, (r14, 0x8)
18014ccc:	611a      	subu      	r4, r6
18014cce:	07bf      	br      	0x18014c4c	// 18014c4c <pbkdf2_sha1+0x18>
18014cd0:	dd2e2000 	st.w      	r9, (r14, 0x0)
18014cd4:	3314      	movi      	r3, 20
18014cd6:	6c9b      	mov      	r2, r6
18014cd8:	6c6b      	mov      	r1, r10
18014cda:	6c23      	mov      	r0, r8
18014cdc:	e00000a2 	bsr      	0x18014e20	// 18014e20 <hmac_sha1>
18014ce0:	b806      	st.w      	r0, (r14, 0x18)
18014ce2:	e9200015 	bnez      	r0, 0x18014d0c	// 18014d0c <pbkdf2_sha1+0xd8>
18014ce6:	3214      	movi      	r2, 20
18014ce8:	6c67      	mov      	r1, r9
18014cea:	6c1b      	mov      	r0, r6
18014cec:	e00008b8 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
18014cf0:	9866      	ld.w      	r3, (r14, 0x18)
18014cf2:	d0670022 	ldr.b      	r2, (r7, r3 << 0)
18014cf6:	d1230021 	ldr.b      	r1, (r3, r9 << 0)
18014cfa:	6c85      	xor      	r2, r1
18014cfc:	d4670022 	str.b      	r2, (r7, r3 << 0)
18014d00:	2300      	addi      	r3, 1
18014d02:	3b54      	cmpnei      	r3, 20
18014d04:	0bf7      	bt      	0x18014cf2	// 18014cf2 <pbkdf2_sha1+0xbe>
18014d06:	e56b0000 	addi      	r11, r11, 1
18014d0a:	07d2      	br      	0x18014cae	// 18014cae <pbkdf2_sha1+0x7a>
18014d0c:	3000      	movi      	r0, 0
18014d0e:	2800      	subi      	r0, 1
18014d10:	07a1      	br      	0x18014c52	// 18014c52 <pbkdf2_sha1+0x1e>
	...

18014d14 <wpa_passphrase>:
18014d14:	14d3      	push      	r4-r6, r15
18014d16:	1422      	subi      	r14, r14, 8
18014d18:	6d07      	mov      	r4, r1
18014d1a:	6d8b      	mov      	r6, r2
18014d1c:	6d43      	mov      	r5, r0
18014d1e:	e3ff6823 	bsr      	0x18001d64	// 18001d64 <__strlen_fast>
18014d22:	3320      	movi      	r3, 32
18014d24:	b861      	st.w      	r3, (r14, 0x4)
18014d26:	3380      	movi      	r3, 128
18014d28:	6c83      	mov      	r2, r0
18014d2a:	b8c0      	st.w      	r6, (r14, 0x0)
18014d2c:	4365      	lsli      	r3, r3, 5
18014d2e:	6c57      	mov      	r1, r5
18014d30:	6c13      	mov      	r0, r4
18014d32:	e3ffff81 	bsr      	0x18014c34	// 18014c34 <pbkdf2_sha1>
18014d36:	1402      	addi      	r14, r14, 8
18014d38:	1493      	pop      	r4-r6, r15
	...

18014d3c <hmac_sha1_vector>:
18014d3c:	14d7      	push      	r4-r10, r15
18014d3e:	1523      	subi      	r14, r14, 140
18014d40:	3a05      	cmphsi      	r2, 6
18014d42:	6e4f      	mov      	r9, r3
18014d44:	996b      	ld.w      	r3, (r14, 0xac)
18014d46:	b801      	st.w      	r0, (r14, 0x4)
18014d48:	b820      	st.w      	r1, (r14, 0x0)
18014d4a:	6d0b      	mov      	r4, r2
18014d4c:	6e8f      	mov      	r10, r3
18014d4e:	d90e202c 	ld.w      	r8, (r14, 0xb0)
18014d52:	0c05      	bf      	0x18014d5c	// 18014d5c <hmac_sha1_vector+0x20>
18014d54:	3000      	movi      	r0, 0
18014d56:	2800      	subi      	r0, 1
18014d58:	1503      	addi      	r14, r14, 140
18014d5a:	1497      	pop      	r4-r10, r15
18014d5c:	eb010040 	cmphsi      	r1, 65
18014d60:	0c0d      	bf      	0x18014d7a	// 18014d7a <hmac_sha1_vector+0x3e>
18014d62:	1d02      	addi      	r5, r14, 8
18014d64:	6cd7      	mov      	r3, r5
18014d66:	6cbb      	mov      	r2, r14
18014d68:	1901      	addi      	r1, r14, 4
18014d6a:	3001      	movi      	r0, 1
18014d6c:	e0000856 	bsr      	0x18015e18	// 18015e18 <sha1_vector>
18014d70:	e920fff2 	bnez      	r0, 0x18014d54	// 18014d54 <hmac_sha1_vector+0x18>
18014d74:	3314      	movi      	r3, 20
18014d76:	b8a1      	st.w      	r5, (r14, 0x4)
18014d78:	b860      	st.w      	r3, (r14, 0x0)
18014d7a:	1d13      	addi      	r5, r14, 76
18014d7c:	3240      	movi      	r2, 64
18014d7e:	3100      	movi      	r1, 0
18014d80:	6c17      	mov      	r0, r5
18014d82:	e0000873 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
18014d86:	9840      	ld.w      	r2, (r14, 0x0)
18014d88:	9821      	ld.w      	r1, (r14, 0x4)
18014d8a:	6c17      	mov      	r0, r5
18014d8c:	e0000868 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
18014d90:	3300      	movi      	r3, 0
18014d92:	d0650022 	ldr.b      	r2, (r5, r3 << 0)
18014d96:	e4424036 	xori      	r2, r2, 54
18014d9a:	d4650022 	str.b      	r2, (r5, r3 << 0)
18014d9e:	2300      	addi      	r3, 1
18014da0:	eb430040 	cmpnei      	r3, 64
18014da4:	0bf7      	bt      	0x18014d92	// 18014d92 <hmac_sha1_vector+0x56>
18014da6:	1e07      	addi      	r6, r14, 28
18014da8:	1f0d      	addi      	r7, r14, 52
18014daa:	b6a0      	st.w      	r5, (r6, 0x0)
18014dac:	b760      	st.w      	r3, (r7, 0x0)
18014dae:	3000      	movi      	r0, 0
18014db0:	6502      	cmpne      	r0, r4
18014db2:	2000      	addi      	r0, 1
18014db4:	082b      	bt      	0x18014e0a	// 18014e0a <hmac_sha1_vector+0xce>
18014db6:	6ce3      	mov      	r3, r8
18014db8:	6c9f      	mov      	r2, r7
18014dba:	6c5b      	mov      	r1, r6
18014dbc:	e000082e 	bsr      	0x18015e18	// 18015e18 <sha1_vector>
18014dc0:	6d03      	mov      	r4, r0
18014dc2:	e920ffc9 	bnez      	r0, 0x18014d54	// 18014d54 <hmac_sha1_vector+0x18>
18014dc6:	6c43      	mov      	r1, r0
18014dc8:	3240      	movi      	r2, 64
18014dca:	6c17      	mov      	r0, r5
18014dcc:	e000084e 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
18014dd0:	9840      	ld.w      	r2, (r14, 0x0)
18014dd2:	9821      	ld.w      	r1, (r14, 0x4)
18014dd4:	6c17      	mov      	r0, r5
18014dd6:	e0000843 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
18014dda:	6c13      	mov      	r0, r4
18014ddc:	d0050023 	ldr.b      	r3, (r5, r0 << 0)
18014de0:	e463405c 	xori      	r3, r3, 92
18014de4:	d4050023 	str.b      	r3, (r5, r0 << 0)
18014de8:	2000      	addi      	r0, 1
18014dea:	eb400040 	cmpnei      	r0, 64
18014dee:	0bf7      	bt      	0x18014ddc	// 18014ddc <hmac_sha1_vector+0xa0>
18014df0:	3314      	movi      	r3, 20
18014df2:	b700      	st.w      	r0, (r7, 0x0)
18014df4:	b761      	st.w      	r3, (r7, 0x4)
18014df6:	6c9f      	mov      	r2, r7
18014df8:	6ce3      	mov      	r3, r8
18014dfa:	6c5b      	mov      	r1, r6
18014dfc:	3002      	movi      	r0, 2
18014dfe:	b6a0      	st.w      	r5, (r6, 0x0)
18014e00:	dd062001 	st.w      	r8, (r6, 0x4)
18014e04:	e000080a 	bsr      	0x18015e18	// 18015e18 <sha1_vector>
18014e08:	07a8      	br      	0x18014d58	// 18014d58 <hmac_sha1_vector+0x1c>
18014e0a:	4062      	lsli      	r3, r0, 2
18014e0c:	2b03      	subi      	r3, 4
18014e0e:	d0690822 	ldr.w      	r2, (r9, r3 << 0)
18014e12:	d06a0823 	ldr.w      	r3, (r10, r3 << 0)
18014e16:	d4060882 	str.w      	r2, (r6, r0 << 2)
18014e1a:	d4070883 	str.w      	r3, (r7, r0 << 2)
18014e1e:	07c9      	br      	0x18014db0	// 18014db0 <hmac_sha1_vector+0x74>

18014e20 <hmac_sha1>:
18014e20:	14d0      	push      	r15
18014e22:	1424      	subi      	r14, r14, 16
18014e24:	b843      	st.w      	r2, (r14, 0xc)
18014e26:	b862      	st.w      	r3, (r14, 0x8)
18014e28:	1a02      	addi      	r2, r14, 8
18014e2a:	9865      	ld.w      	r3, (r14, 0x14)
18014e2c:	b861      	st.w      	r3, (r14, 0x4)
18014e2e:	b840      	st.w      	r2, (r14, 0x0)
18014e30:	1b03      	addi      	r3, r14, 12
18014e32:	3201      	movi      	r2, 1
18014e34:	e3ffff84 	bsr      	0x18014d3c	// 18014d3c <hmac_sha1_vector>
18014e38:	1404      	addi      	r14, r14, 16
18014e3a:	1490      	pop      	r15

18014e3c <SHA1Transform>:
18014e3c:	14d8      	push      	r4-r11, r15
18014e3e:	1525      	subi      	r14, r14, 148
18014e40:	b800      	st.w      	r0, (r14, 0x0)
18014e42:	3240      	movi      	r2, 64
18014e44:	1815      	addi      	r0, r14, 84
18014e46:	e000080b 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
18014e4a:	9860      	ld.w      	r3, (r14, 0x0)
18014e4c:	ea81039d 	lrw      	r1, 0x5a827999	// 18015cc0 <SHA1Transform+0xe84>
18014e50:	9360      	ld.w      	r3, (r3, 0x0)
18014e52:	b871      	st.w      	r3, (r14, 0x44)
18014e54:	9860      	ld.w      	r3, (r14, 0x0)
18014e56:	9361      	ld.w      	r3, (r3, 0x4)
18014e58:	b873      	st.w      	r3, (r14, 0x4c)
18014e5a:	9860      	ld.w      	r3, (r14, 0x0)
18014e5c:	9362      	ld.w      	r3, (r3, 0x8)
18014e5e:	b861      	st.w      	r3, (r14, 0x4)
18014e60:	9860      	ld.w      	r3, (r14, 0x0)
18014e62:	9363      	ld.w      	r3, (r3, 0xc)
18014e64:	b872      	st.w      	r3, (r14, 0x48)
18014e66:	9860      	ld.w      	r3, (r14, 0x0)
18014e68:	9852      	ld.w      	r2, (r14, 0x48)
18014e6a:	9364      	ld.w      	r3, (r3, 0x10)
18014e6c:	b874      	st.w      	r3, (r14, 0x50)
18014e6e:	9875      	ld.w      	r3, (r14, 0x54)
18014e70:	78ce      	revb      	r3, r3
18014e72:	b863      	st.w      	r3, (r14, 0xc)
18014e74:	9861      	ld.w      	r3, (r14, 0x4)
18014e76:	c4432446 	xor      	r6, r3, r2
18014e7a:	9873      	ld.w      	r3, (r14, 0x4c)
18014e7c:	698c      	and      	r6, r3
18014e7e:	6d89      	xor      	r6, r2
18014e80:	9871      	ld.w      	r3, (r14, 0x44)
18014e82:	9854      	ld.w      	r2, (r14, 0x50)
18014e84:	6084      	addu      	r2, r1
18014e86:	c4a34903 	rotli      	r3, r3, 5
18014e8a:	60c8      	addu      	r3, r2
18014e8c:	618c      	addu      	r6, r3
18014e8e:	9863      	ld.w      	r3, (r14, 0xc)
18014e90:	618c      	addu      	r6, r3
18014e92:	9873      	ld.w      	r3, (r14, 0x4c)
18014e94:	c7c3490c 	rotli      	r12, r3, 30
18014e98:	9876      	ld.w      	r3, (r14, 0x58)
18014e9a:	78ce      	revb      	r3, r3
18014e9c:	b864      	st.w      	r3, (r14, 0x10)
18014e9e:	9861      	ld.w      	r3, (r14, 0x4)
18014ea0:	c5832445 	xor      	r5, r3, r12
18014ea4:	9871      	ld.w      	r3, (r14, 0x44)
18014ea6:	694c      	and      	r5, r3
18014ea8:	9861      	ld.w      	r3, (r14, 0x4)
18014eaa:	6d4d      	xor      	r5, r3
18014eac:	9872      	ld.w      	r3, (r14, 0x48)
18014eae:	60c4      	addu      	r3, r1
18014eb0:	614c      	addu      	r5, r3
18014eb2:	9864      	ld.w      	r3, (r14, 0x10)
18014eb4:	614c      	addu      	r5, r3
18014eb6:	9871      	ld.w      	r3, (r14, 0x44)
18014eb8:	c7c34907 	rotli      	r7, r3, 30
18014ebc:	c4a64901 	rotli      	r1, r6, 5
18014ec0:	c4ec2444 	xor      	r4, r12, r7
18014ec4:	9877      	ld.w      	r3, (r14, 0x5c)
18014ec6:	6144      	addu      	r5, r1
18014ec8:	9841      	ld.w      	r2, (r14, 0x4)
18014eca:	ea81037e 	lrw      	r1, 0x5a827999	// 18015cc0 <SHA1Transform+0xe84>
18014ece:	6918      	and      	r4, r6
18014ed0:	7ace      	revb      	r11, r3
18014ed2:	c5842443 	xor      	r3, r4, r12
18014ed6:	5a84      	addu      	r4, r2, r1
18014ed8:	612c      	addu      	r4, r11
18014eda:	610c      	addu      	r4, r3
18014edc:	9878      	ld.w      	r3, (r14, 0x60)
18014ede:	c7c64906 	rotli      	r6, r6, 30
18014ee2:	78ce      	revb      	r3, r3
18014ee4:	b866      	st.w      	r3, (r14, 0x18)
18014ee6:	c4a54902 	rotli      	r2, r5, 5
18014eea:	c4c72443 	xor      	r3, r7, r6
18014eee:	6108      	addu      	r4, r2
18014ef0:	6304      	addu      	r12, r1
18014ef2:	9846      	ld.w      	r2, (r14, 0x18)
18014ef4:	68d4      	and      	r3, r5
18014ef6:	6cdd      	xor      	r3, r7
18014ef8:	c44c002d 	addu      	r13, r12, r2
18014efc:	c5a3002c 	addu      	r12, r3, r13
18014f00:	c4a4490d 	rotli      	r13, r4, 5
18014f04:	6370      	addu      	r13, r12
18014f06:	d98e2019 	ld.w      	r12, (r14, 0x64)
18014f0a:	c7c54905 	rotli      	r5, r5, 30
18014f0e:	78f2      	revb      	r3, r12
18014f10:	b86b      	st.w      	r3, (r14, 0x2c)
18014f12:	c4a62443 	xor      	r3, r6, r5
18014f16:	984b      	ld.w      	r2, (r14, 0x2c)
18014f18:	61c4      	addu      	r7, r1
18014f1a:	68d0      	and      	r3, r4
18014f1c:	981a      	ld.w      	r0, (r14, 0x68)
18014f1e:	6cd9      	xor      	r3, r6
18014f20:	c447002c 	addu      	r12, r7, r2
18014f24:	c5830027 	addu      	r7, r3, r12
18014f28:	78c2      	revb      	r3, r0
18014f2a:	c7c44904 	rotli      	r4, r4, 30
18014f2e:	b86c      	st.w      	r3, (r14, 0x30)
18014f30:	984c      	ld.w      	r2, (r14, 0x30)
18014f32:	c4852443 	xor      	r3, r5, r4
18014f36:	5a04      	addu      	r0, r2, r1
18014f38:	c4ad490c 	rotli      	r12, r13, 5
18014f3c:	68f4      	and      	r3, r13
18014f3e:	631c      	addu      	r12, r7
18014f40:	6018      	addu      	r0, r6
18014f42:	6cd5      	xor      	r3, r5
18014f44:	983b      	ld.w      	r1, (r14, 0x6c)
18014f46:	60c0      	addu      	r3, r0
18014f48:	c4ac4900 	rotli      	r0, r12, 5
18014f4c:	600c      	addu      	r0, r3
18014f4e:	78c6      	revb      	r3, r1
18014f50:	c7cd490d 	rotli      	r13, r13, 30
18014f54:	b86d      	st.w      	r3, (r14, 0x34)
18014f56:	984d      	ld.w      	r2, (r14, 0x34)
18014f58:	c5a42443 	xor      	r3, r4, r13
18014f5c:	ea810359 	lrw      	r1, 0x5a827999	// 18015cc0 <SHA1Transform+0xe84>
18014f60:	68f0      	and      	r3, r12
18014f62:	6048      	addu      	r1, r2
18014f64:	6054      	addu      	r1, r5
18014f66:	6cd1      	xor      	r3, r4
18014f68:	985c      	ld.w      	r2, (r14, 0x70)
18014f6a:	60c4      	addu      	r3, r1
18014f6c:	c4a04901 	rotli      	r1, r0, 5
18014f70:	604c      	addu      	r1, r3
18014f72:	78ca      	revb      	r3, r2
18014f74:	c7cc490c 	rotli      	r12, r12, 30
18014f78:	b86e      	st.w      	r3, (r14, 0x38)
18014f7a:	984e      	ld.w      	r2, (r14, 0x38)
18014f7c:	c58d2443 	xor      	r3, r13, r12
18014f80:	ea850350 	lrw      	r5, 0x5a827999	// 18015cc0 <SHA1Transform+0xe84>
18014f84:	68c0      	and      	r3, r0
18014f86:	6094      	addu      	r2, r5
18014f88:	6090      	addu      	r2, r4
18014f8a:	6cf5      	xor      	r3, r13
18014f8c:	60c8      	addu      	r3, r2
18014f8e:	c4a14902 	rotli      	r2, r1, 5
18014f92:	c7c04900 	rotli      	r0, r0, 30
18014f96:	608c      	addu      	r2, r3
18014f98:	987d      	ld.w      	r3, (r14, 0x74)
18014f9a:	798e      	revb      	r6, r3
18014f9c:	c40c2444 	xor      	r4, r12, r0
18014fa0:	5e74      	addu      	r3, r6, r5
18014fa2:	6904      	and      	r4, r1
18014fa4:	98be      	ld.w      	r5, (r14, 0x78)
18014fa6:	60f4      	addu      	r3, r13
18014fa8:	6d31      	xor      	r4, r12
18014faa:	7b56      	revb      	r13, r5
18014fac:	c7c14901 	rotli      	r1, r1, 30
18014fb0:	ddae2007 	st.w      	r13, (r14, 0x1c)
18014fb4:	610c      	addu      	r4, r3
18014fb6:	c4a24903 	rotli      	r3, r2, 5
18014fba:	60d0      	addu      	r3, r4
18014fbc:	c420244d 	xor      	r13, r0, r1
18014fc0:	9887      	ld.w      	r4, (r14, 0x1c)
18014fc2:	ea850340 	lrw      	r5, 0x5a827999	// 18015cc0 <SHA1Transform+0xe84>
18014fc6:	c4a40029 	addu      	r9, r4, r5
18014fca:	6b48      	and      	r13, r2
18014fcc:	98bf      	ld.w      	r5, (r14, 0x7c)
18014fce:	6270      	addu      	r9, r12
18014fd0:	6f41      	xor      	r13, r0
18014fd2:	7b16      	revb      	r12, r5
18014fd4:	dd8e2008 	st.w      	r12, (r14, 0x20)
18014fd8:	6364      	addu      	r13, r9
18014fda:	c4a34909 	rotli      	r9, r3, 5
18014fde:	6274      	addu      	r9, r13
18014fe0:	ea840338 	lrw      	r4, 0x5a827999	// 18015cc0 <SHA1Transform+0xe84>
18014fe4:	d9ae2008 	ld.w      	r13, (r14, 0x20)
18014fe8:	99a0      	ld.w      	r5, (r14, 0x80)
18014fea:	c48d0028 	addu      	r8, r13, r4
18014fee:	c7c24902 	rotli      	r2, r2, 30
18014ff2:	6200      	addu      	r8, r0
18014ff4:	7816      	revb      	r0, r5
18014ff6:	b809      	st.w      	r0, (r14, 0x24)
18014ff8:	c441244c 	xor      	r12, r1, r2
18014ffc:	ea850331 	lrw      	r5, 0x5a827999	// 18015cc0 <SHA1Transform+0xe84>
18015000:	9889      	ld.w      	r4, (r14, 0x24)
18015002:	6b0c      	and      	r12, r3
18015004:	c7c34903 	rotli      	r3, r3, 30
18015008:	c4622440 	xor      	r0, r2, r3
1801500c:	5cf4      	addu      	r7, r4, r5
1801500e:	6f05      	xor      	r12, r1
18015010:	6320      	addu      	r12, r8
18015012:	61c4      	addu      	r7, r1
18015014:	c4a94908 	rotli      	r8, r9, 5
18015018:	9921      	ld.w      	r1, (r14, 0x84)
1801501a:	6824      	and      	r0, r9
1801501c:	6230      	addu      	r8, r12
1801501e:	6c09      	xor      	r0, r2
18015020:	7846      	revb      	r1, r1
18015022:	c7c94909 	rotli      	r9, r9, 30
18015026:	b82a      	st.w      	r1, (r14, 0x28)
18015028:	601c      	addu      	r0, r7
1801502a:	c4a84907 	rotli      	r7, r8, 5
1801502e:	61c0      	addu      	r7, r0
18015030:	c5232441 	xor      	r1, r3, r9
18015034:	980a      	ld.w      	r0, (r14, 0x28)
18015036:	c4a0002a 	addu      	r10, r0, r5
1801503a:	6860      	and      	r1, r8
1801503c:	6288      	addu      	r10, r2
1801503e:	c7c84908 	rotli      	r8, r8, 30
18015042:	9982      	ld.w      	r4, (r14, 0x88)
18015044:	6c4d      	xor      	r1, r3
18015046:	7912      	revb      	r4, r4
18015048:	6068      	addu      	r1, r10
1801504a:	c5092442 	xor      	r2, r9, r8
1801504e:	c4a7490a 	rotli      	r10, r7, 5
18015052:	6284      	addu      	r10, r1
18015054:	d9ae2023 	ld.w      	r13, (r14, 0x8c)
18015058:	6c57      	mov      	r1, r5
1801505a:	6f17      	mov      	r12, r5
1801505c:	689c      	and      	r2, r7
1801505e:	6150      	addu      	r5, r4
18015060:	c7c74907 	rotli      	r7, r7, 30
18015064:	7b76      	revb      	r13, r13
18015066:	614c      	addu      	r5, r3
18015068:	6ca5      	xor      	r2, r9
1801506a:	c4e82443 	xor      	r3, r8, r7
1801506e:	6094      	addu      	r2, r5
18015070:	68e8      	and      	r3, r10
18015072:	c4aa4905 	rotli      	r5, r10, 5
18015076:	6334      	addu      	r12, r13
18015078:	6148      	addu      	r5, r2
1801507a:	6324      	addu      	r12, r9
1801507c:	6ce1      	xor      	r3, r8
1801507e:	60f0      	addu      	r3, r12
18015080:	c4a5490c 	rotli      	r12, r5, 5
18015084:	630c      	addu      	r12, r3
18015086:	9964      	ld.w      	r3, (r14, 0x90)
18015088:	78ce      	revb      	r3, r3
1801508a:	c7ca490a 	rotli      	r10, r10, 30
1801508e:	b862      	st.w      	r3, (r14, 0x8)
18015090:	9842      	ld.w      	r2, (r14, 0x8)
18015092:	c5472443 	xor      	r3, r7, r10
18015096:	5a04      	addu      	r0, r2, r1
18015098:	68d4      	and      	r3, r5
1801509a:	6020      	addu      	r0, r8
1801509c:	6cdd      	xor      	r3, r7
1801509e:	60c0      	addu      	r3, r0
180150a0:	c4ac4900 	rotli      	r0, r12, 5
180150a4:	600c      	addu      	r0, r3
180150a6:	9863      	ld.w      	r3, (r14, 0xc)
180150a8:	6ced      	xor      	r3, r11
180150aa:	6cd9      	xor      	r3, r6
180150ac:	6cd1      	xor      	r3, r4
180150ae:	c4234903 	rotli      	r3, r3, 1
180150b2:	c7c54905 	rotli      	r5, r5, 30
180150b6:	b863      	st.w      	r3, (r14, 0xc)
180150b8:	9843      	ld.w      	r2, (r14, 0xc)
180150ba:	c4aa2443 	xor      	r3, r10, r5
180150be:	68f0      	and      	r3, r12
180150c0:	6048      	addu      	r1, r2
180150c2:	605c      	addu      	r1, r7
180150c4:	6ce9      	xor      	r3, r10
180150c6:	60c4      	addu      	r3, r1
180150c8:	c4a04901 	rotli      	r1, r0, 5
180150cc:	9846      	ld.w      	r2, (r14, 0x18)
180150ce:	604c      	addu      	r1, r3
180150d0:	9864      	ld.w      	r3, (r14, 0x10)
180150d2:	6cc9      	xor      	r3, r2
180150d4:	9847      	ld.w      	r2, (r14, 0x1c)
180150d6:	6cc9      	xor      	r3, r2
180150d8:	6cf5      	xor      	r3, r13
180150da:	c4234903 	rotli      	r3, r3, 1
180150de:	c7cc490c 	rotli      	r12, r12, 30
180150e2:	b864      	st.w      	r3, (r14, 0x10)
180150e4:	9844      	ld.w      	r2, (r14, 0x10)
180150e6:	c5852443 	xor      	r3, r5, r12
180150ea:	ea8702f6 	lrw      	r7, 0x5a827999	// 18015cc0 <SHA1Transform+0xe84>
180150ee:	68c0      	and      	r3, r0
180150f0:	609c      	addu      	r2, r7
180150f2:	60a8      	addu      	r2, r10
180150f4:	6cd5      	xor      	r3, r5
180150f6:	60c8      	addu      	r3, r2
180150f8:	c4a14902 	rotli      	r2, r1, 5
180150fc:	608c      	addu      	r2, r3
180150fe:	986b      	ld.w      	r3, (r14, 0x2c)
18015100:	98e8      	ld.w      	r7, (r14, 0x20)
18015102:	6ced      	xor      	r3, r11
18015104:	c7c04900 	rotli      	r0, r0, 30
18015108:	6cdd      	xor      	r3, r7
1801510a:	98e2      	ld.w      	r7, (r14, 0x8)
1801510c:	6cdd      	xor      	r3, r7
1801510e:	c40c2447 	xor      	r7, r12, r0
18015112:	69c4      	and      	r7, r1
18015114:	c5872448 	xor      	r8, r7, r12
18015118:	c4234903 	rotli      	r3, r3, 1
1801511c:	ea8702e9 	lrw      	r7, 0x5a827999	// 18015cc0 <SHA1Transform+0xe84>
18015120:	b865      	st.w      	r3, (r14, 0x14)
18015122:	60dc      	addu      	r3, r7
18015124:	60d4      	addu      	r3, r5
18015126:	c4680027 	addu      	r7, r8, r3
1801512a:	c4a24903 	rotli      	r3, r2, 5
1801512e:	60dc      	addu      	r3, r7
18015130:	98a6      	ld.w      	r5, (r14, 0x18)
18015132:	98ec      	ld.w      	r7, (r14, 0x30)
18015134:	6d5d      	xor      	r5, r7
18015136:	98e9      	ld.w      	r7, (r14, 0x24)
18015138:	6d5d      	xor      	r5, r7
1801513a:	98e3      	ld.w      	r7, (r14, 0xc)
1801513c:	6d5d      	xor      	r5, r7
1801513e:	c4254905 	rotli      	r5, r5, 1
18015142:	b8a6      	st.w      	r5, (r14, 0x18)
18015144:	c7c14901 	rotli      	r1, r1, 30
18015148:	98e6      	ld.w      	r7, (r14, 0x18)
1801514a:	c4202445 	xor      	r5, r0, r1
1801514e:	ea8802dd 	lrw      	r8, 0x5a827999	// 18015cc0 <SHA1Transform+0xe84>
18015152:	c5070029 	addu      	r9, r7, r8
18015156:	6948      	and      	r5, r2
18015158:	6270      	addu      	r9, r12
1801515a:	6d41      	xor      	r5, r0
1801515c:	6164      	addu      	r5, r9
1801515e:	c4a34909 	rotli      	r9, r3, 5
18015162:	6254      	addu      	r9, r5
18015164:	d98e200b 	ld.w      	r12, (r14, 0x2c)
18015168:	98ad      	ld.w      	r5, (r14, 0x34)
1801516a:	6f15      	xor      	r12, r5
1801516c:	98aa      	ld.w      	r5, (r14, 0x28)
1801516e:	6f15      	xor      	r12, r5
18015170:	98a4      	ld.w      	r5, (r14, 0x10)
18015172:	6f15      	xor      	r12, r5
18015174:	c42c490c 	rotli      	r12, r12, 1
18015178:	c7c24902 	rotli      	r2, r2, 30
1801517c:	ea8702d2 	lrw      	r7, 0x6ed9eba1	// 18015cc4 <SHA1Transform+0xe88>
18015180:	c4412445 	xor      	r5, r1, r2
18015184:	c4ec0028 	addu      	r8, r12, r7
18015188:	6200      	addu      	r8, r0
1801518a:	6d4d      	xor      	r5, r3
1801518c:	6160      	addu      	r5, r8
1801518e:	c4a94908 	rotli      	r8, r9, 5
18015192:	6214      	addu      	r8, r5
18015194:	980c      	ld.w      	r0, (r14, 0x30)
18015196:	98ae      	ld.w      	r5, (r14, 0x38)
18015198:	6c15      	xor      	r0, r5
1801519a:	6c11      	xor      	r0, r4
1801519c:	98a5      	ld.w      	r5, (r14, 0x14)
1801519e:	6c15      	xor      	r0, r5
180151a0:	c4204900 	rotli      	r0, r0, 1
180151a4:	c7c34903 	rotli      	r3, r3, 30
180151a8:	c4622445 	xor      	r5, r2, r3
180151ac:	61c0      	addu      	r7, r0
180151ae:	61c4      	addu      	r7, r1
180151b0:	6d65      	xor      	r5, r9
180151b2:	982d      	ld.w      	r1, (r14, 0x34)
180151b4:	615c      	addu      	r5, r7
180151b6:	6c59      	xor      	r1, r6
180151b8:	c4a84907 	rotli      	r7, r8, 5
180151bc:	61d4      	addu      	r7, r5
180151be:	6c75      	xor      	r1, r13
180151c0:	98a6      	ld.w      	r5, (r14, 0x18)
180151c2:	6c55      	xor      	r1, r5
180151c4:	c4214901 	rotli      	r1, r1, 1
180151c8:	c7c94909 	rotli      	r9, r9, 30
180151cc:	ea8a02be 	lrw      	r10, 0x6ed9eba1	// 18015cc4 <SHA1Transform+0xe88>
180151d0:	c5232445 	xor      	r5, r3, r9
180151d4:	c541002b 	addu      	r11, r1, r10
180151d8:	62c8      	addu      	r11, r2
180151da:	6d61      	xor      	r5, r8
180151dc:	616c      	addu      	r5, r11
180151de:	c4a7490b 	rotli      	r11, r7, 5
180151e2:	62d4      	addu      	r11, r5
180151e4:	984e      	ld.w      	r2, (r14, 0x38)
180151e6:	98a7      	ld.w      	r5, (r14, 0x1c)
180151e8:	6c95      	xor      	r2, r5
180151ea:	98a2      	ld.w      	r5, (r14, 0x8)
180151ec:	6c95      	xor      	r2, r5
180151ee:	6cb1      	xor      	r2, r12
180151f0:	c4224902 	rotli      	r2, r2, 1
180151f4:	c7c84908 	rotli      	r8, r8, 30
180151f8:	c5092445 	xor      	r5, r9, r8
180151fc:	6288      	addu      	r10, r2
180151fe:	628c      	addu      	r10, r3
18015200:	6d5d      	xor      	r5, r7
18015202:	9868      	ld.w      	r3, (r14, 0x20)
18015204:	6168      	addu      	r5, r10
18015206:	c4ab490a 	rotli      	r10, r11, 5
1801520a:	6294      	addu      	r10, r5
1801520c:	6cd9      	xor      	r3, r6
1801520e:	98a3      	ld.w      	r5, (r14, 0xc)
18015210:	6cd5      	xor      	r3, r5
18015212:	6cc1      	xor      	r3, r0
18015214:	c4234903 	rotli      	r3, r3, 1
18015218:	c7c74907 	rotli      	r7, r7, 30
1801521c:	ea8502aa 	lrw      	r5, 0x6ed9eba1	// 18015cc4 <SHA1Transform+0xe88>
18015220:	c4e82446 	xor      	r6, r8, r7
18015224:	614c      	addu      	r5, r3
18015226:	6254      	addu      	r9, r5
18015228:	6dad      	xor      	r6, r11
1801522a:	61a4      	addu      	r6, r9
1801522c:	c4aa4909 	rotli      	r9, r10, 5
18015230:	6258      	addu      	r9, r6
18015232:	98a7      	ld.w      	r5, (r14, 0x1c)
18015234:	98c9      	ld.w      	r6, (r14, 0x24)
18015236:	6d59      	xor      	r5, r6
18015238:	98c4      	ld.w      	r6, (r14, 0x10)
1801523a:	6d59      	xor      	r5, r6
1801523c:	c7cb490b 	rotli      	r11, r11, 30
18015240:	6d45      	xor      	r5, r1
18015242:	c5672446 	xor      	r6, r7, r11
18015246:	c4254905 	rotli      	r5, r5, 1
1801524a:	b8a7      	st.w      	r5, (r14, 0x1c)
1801524c:	c5462445 	xor      	r5, r6, r10
18015250:	b8ab      	st.w      	r5, (r14, 0x2c)
18015252:	ea86029d 	lrw      	r6, 0x6ed9eba1	// 18015cc4 <SHA1Transform+0xe88>
18015256:	98a7      	ld.w      	r5, (r14, 0x1c)
18015258:	6158      	addu      	r5, r6
1801525a:	6214      	addu      	r8, r5
1801525c:	98cb      	ld.w      	r6, (r14, 0x2c)
1801525e:	61a0      	addu      	r6, r8
18015260:	c4a94908 	rotli      	r8, r9, 5
18015264:	6218      	addu      	r8, r6
18015266:	98a8      	ld.w      	r5, (r14, 0x20)
18015268:	98ca      	ld.w      	r6, (r14, 0x28)
1801526a:	6d59      	xor      	r5, r6
1801526c:	98c5      	ld.w      	r6, (r14, 0x14)
1801526e:	6d59      	xor      	r5, r6
18015270:	6d49      	xor      	r5, r2
18015272:	c7ca490a 	rotli      	r10, r10, 30
18015276:	c4254905 	rotli      	r5, r5, 1
1801527a:	b8a8      	st.w      	r5, (r14, 0x20)
1801527c:	c54b2445 	xor      	r5, r11, r10
18015280:	6d65      	xor      	r5, r9
18015282:	b8ab      	st.w      	r5, (r14, 0x2c)
18015284:	98c8      	ld.w      	r6, (r14, 0x20)
18015286:	ea850290 	lrw      	r5, 0x6ed9eba1	// 18015cc4 <SHA1Transform+0xe88>
1801528a:	6194      	addu      	r6, r5
1801528c:	619c      	addu      	r6, r7
1801528e:	98ab      	ld.w      	r5, (r14, 0x2c)
18015290:	6158      	addu      	r5, r6
18015292:	c4a84906 	rotli      	r6, r8, 5
18015296:	6194      	addu      	r6, r5
18015298:	98a9      	ld.w      	r5, (r14, 0x24)
1801529a:	98e6      	ld.w      	r7, (r14, 0x18)
1801529c:	6d51      	xor      	r5, r4
1801529e:	6d5d      	xor      	r5, r7
180152a0:	c7c94909 	rotli      	r9, r9, 30
180152a4:	6d4d      	xor      	r5, r3
180152a6:	c52a2447 	xor      	r7, r10, r9
180152aa:	c4254905 	rotli      	r5, r5, 1
180152ae:	b8a9      	st.w      	r5, (r14, 0x24)
180152b0:	c5072445 	xor      	r5, r7, r8
180152b4:	b8ab      	st.w      	r5, (r14, 0x2c)
180152b6:	ea870284 	lrw      	r7, 0x6ed9eba1	// 18015cc4 <SHA1Transform+0xe88>
180152ba:	98a9      	ld.w      	r5, (r14, 0x24)
180152bc:	615c      	addu      	r5, r7
180152be:	616c      	addu      	r5, r11
180152c0:	98eb      	ld.w      	r7, (r14, 0x2c)
180152c2:	61d4      	addu      	r7, r5
180152c4:	c4a64905 	rotli      	r5, r6, 5
180152c8:	615c      	addu      	r5, r7
180152ca:	b8ab      	st.w      	r5, (r14, 0x2c)
180152cc:	98aa      	ld.w      	r5, (r14, 0x28)
180152ce:	c5a52447 	xor      	r7, r5, r13
180152d2:	6df1      	xor      	r7, r12
180152d4:	98a7      	ld.w      	r5, (r14, 0x1c)
180152d6:	6dd5      	xor      	r7, r5
180152d8:	c4274907 	rotli      	r7, r7, 1
180152dc:	ea85027a 	lrw      	r5, 0x6ed9eba1	// 18015cc4 <SHA1Transform+0xe88>
180152e0:	b8ea      	st.w      	r7, (r14, 0x28)
180152e2:	61d4      	addu      	r7, r5
180152e4:	98ab      	ld.w      	r5, (r14, 0x2c)
180152e6:	c7c84908 	rotli      	r8, r8, 30
180152ea:	629c      	addu      	r10, r7
180152ec:	c4a54907 	rotli      	r7, r5, 5
180152f0:	98a2      	ld.w      	r5, (r14, 0x8)
180152f2:	c509244b 	xor      	r11, r9, r8
180152f6:	6d15      	xor      	r4, r5
180152f8:	6ed9      	xor      	r11, r6
180152fa:	98a8      	ld.w      	r5, (r14, 0x20)
180152fc:	6d01      	xor      	r4, r0
180152fe:	c7c64906 	rotli      	r6, r6, 30
18015302:	6d15      	xor      	r4, r5
18015304:	62e8      	addu      	r11, r10
18015306:	62dc      	addu      	r11, r7
18015308:	c424490a 	rotli      	r10, r4, 1
1801530c:	c4c82447 	xor      	r7, r8, r6
18015310:	988b      	ld.w      	r4, (r14, 0x2c)
18015312:	6dd1      	xor      	r7, r4
18015314:	ea84026c 	lrw      	r4, 0x6ed9eba1	// 18015cc4 <SHA1Transform+0xe88>
18015318:	6128      	addu      	r4, r10
1801531a:	6250      	addu      	r9, r4
1801531c:	61e4      	addu      	r7, r9
1801531e:	c4ab4904 	rotli      	r4, r11, 5
18015322:	61d0      	addu      	r7, r4
18015324:	988b      	ld.w      	r4, (r14, 0x2c)
18015326:	c7c44905 	rotli      	r5, r4, 30
1801532a:	9883      	ld.w      	r4, (r14, 0xc)
1801532c:	6f51      	xor      	r13, r4
1801532e:	6f45      	xor      	r13, r1
18015330:	9889      	ld.w      	r4, (r14, 0x24)
18015332:	6f51      	xor      	r13, r4
18015334:	ea890264 	lrw      	r9, 0x6ed9eba1	// 18015cc4 <SHA1Transform+0xe88>
18015338:	c42d490d 	rotli      	r13, r13, 1
1801533c:	ddae200b 	st.w      	r13, (r14, 0x2c)
18015340:	c4a62444 	xor      	r4, r6, r5
18015344:	6364      	addu      	r13, r9
18015346:	6234      	addu      	r8, r13
18015348:	6d2d      	xor      	r4, r11
1801534a:	6120      	addu      	r4, r8
1801534c:	c4a74908 	rotli      	r8, r7, 5
18015350:	6210      	addu      	r8, r4
18015352:	d9ae2002 	ld.w      	r13, (r14, 0x8)
18015356:	9884      	ld.w      	r4, (r14, 0x10)
18015358:	6f51      	xor      	r13, r4
1801535a:	6f49      	xor      	r13, r2
1801535c:	988a      	ld.w      	r4, (r14, 0x28)
1801535e:	6f51      	xor      	r13, r4
18015360:	c7cb490b 	rotli      	r11, r11, 30
18015364:	c42d490d 	rotli      	r13, r13, 1
18015368:	ddae2002 	st.w      	r13, (r14, 0x8)
1801536c:	c5652444 	xor      	r4, r5, r11
18015370:	6364      	addu      	r13, r9
18015372:	61b4      	addu      	r6, r13
18015374:	6d1d      	xor      	r4, r7
18015376:	6118      	addu      	r4, r6
18015378:	c4a84906 	rotli      	r6, r8, 5
1801537c:	6118      	addu      	r4, r6
1801537e:	d9ae2003 	ld.w      	r13, (r14, 0xc)
18015382:	98c5      	ld.w      	r6, (r14, 0x14)
18015384:	6f59      	xor      	r13, r6
18015386:	6f4d      	xor      	r13, r3
18015388:	6f69      	xor      	r13, r10
1801538a:	c7c74907 	rotli      	r7, r7, 30
1801538e:	c42d490d 	rotli      	r13, r13, 1
18015392:	ddae2003 	st.w      	r13, (r14, 0xc)
18015396:	c4eb2446 	xor      	r6, r11, r7
1801539a:	6364      	addu      	r13, r9
1801539c:	6174      	addu      	r5, r13
1801539e:	6da1      	xor      	r6, r8
180153a0:	6194      	addu      	r6, r5
180153a2:	c4a44905 	rotli      	r5, r4, 5
180153a6:	6158      	addu      	r5, r6
180153a8:	d9ae2004 	ld.w      	r13, (r14, 0x10)
180153ac:	98c6      	ld.w      	r6, (r14, 0x18)
180153ae:	6f59      	xor      	r13, r6
180153b0:	98c7      	ld.w      	r6, (r14, 0x1c)
180153b2:	6f59      	xor      	r13, r6
180153b4:	98cb      	ld.w      	r6, (r14, 0x2c)
180153b6:	6f59      	xor      	r13, r6
180153b8:	c7c84908 	rotli      	r8, r8, 30
180153bc:	c42d490d 	rotli      	r13, r13, 1
180153c0:	ddae2004 	st.w      	r13, (r14, 0x10)
180153c4:	c5072446 	xor      	r6, r7, r8
180153c8:	6364      	addu      	r13, r9
180153ca:	62f4      	addu      	r11, r13
180153cc:	6d91      	xor      	r6, r4
180153ce:	d9ae2005 	ld.w      	r13, (r14, 0x14)
180153d2:	61ac      	addu      	r6, r11
180153d4:	c4a5490b 	rotli      	r11, r5, 5
180153d8:	62d8      	addu      	r11, r6
180153da:	6f71      	xor      	r13, r12
180153dc:	98c8      	ld.w      	r6, (r14, 0x20)
180153de:	6f59      	xor      	r13, r6
180153e0:	98c2      	ld.w      	r6, (r14, 0x8)
180153e2:	6f59      	xor      	r13, r6
180153e4:	c42d490d 	rotli      	r13, r13, 1
180153e8:	ddae2005 	st.w      	r13, (r14, 0x14)
180153ec:	98c5      	ld.w      	r6, (r14, 0x14)
180153ee:	c7c44904 	rotli      	r4, r4, 30
180153f2:	c488244d 	xor      	r13, r8, r4
180153f6:	6258      	addu      	r9, r6
180153f8:	61e4      	addu      	r7, r9
180153fa:	6f55      	xor      	r13, r5
180153fc:	635c      	addu      	r13, r7
180153fe:	c4ab4907 	rotli      	r7, r11, 5
18015402:	61f4      	addu      	r7, r13
18015404:	d9ae2006 	ld.w      	r13, (r14, 0x18)
18015408:	98c9      	ld.w      	r6, (r14, 0x24)
1801540a:	6f41      	xor      	r13, r0
1801540c:	6f59      	xor      	r13, r6
1801540e:	98c3      	ld.w      	r6, (r14, 0xc)
18015410:	6f59      	xor      	r13, r6
18015412:	c42d490d 	rotli      	r13, r13, 1
18015416:	ddae2006 	st.w      	r13, (r14, 0x18)
1801541a:	98c6      	ld.w      	r6, (r14, 0x18)
1801541c:	c7c54905 	rotli      	r5, r5, 30
18015420:	ea890229 	lrw      	r9, 0x6ed9eba1	// 18015cc4 <SHA1Transform+0xe88>
18015424:	c4a4244d 	xor      	r13, r4, r5
18015428:	6258      	addu      	r9, r6
1801542a:	6224      	addu      	r8, r9
1801542c:	6f6d      	xor      	r13, r11
1801542e:	6360      	addu      	r13, r8
18015430:	c4a74908 	rotli      	r8, r7, 5
18015434:	6234      	addu      	r8, r13
18015436:	6f05      	xor      	r12, r1
18015438:	d9ae200a 	ld.w      	r13, (r14, 0x28)
1801543c:	6f35      	xor      	r12, r13
1801543e:	d9ae2004 	ld.w      	r13, (r14, 0x10)
18015442:	6f35      	xor      	r12, r13
18015444:	c42c4909 	rotli      	r9, r12, 1
18015448:	ea8c021f 	lrw      	r12, 0x6ed9eba1	// 18015cc4 <SHA1Transform+0xe88>
1801544c:	6324      	addu      	r12, r9
1801544e:	6c09      	xor      	r0, r2
18015450:	c7cb490b 	rotli      	r11, r11, 30
18015454:	6130      	addu      	r4, r12
18015456:	6c29      	xor      	r0, r10
18015458:	d98e2005 	ld.w      	r12, (r14, 0x14)
1801545c:	c565244d 	xor      	r13, r5, r11
18015460:	6c31      	xor      	r0, r12
18015462:	6f5d      	xor      	r13, r7
18015464:	c4204900 	rotli      	r0, r0, 1
18015468:	c7c74907 	rotli      	r7, r7, 30
1801546c:	b80c      	st.w      	r0, (r14, 0x30)
1801546e:	c4eb2440 	xor      	r0, r11, r7
18015472:	c500244c 	xor      	r12, r0, r8
18015476:	98cc      	ld.w      	r6, (r14, 0x30)
18015478:	ea800213 	lrw      	r0, 0x6ed9eba1	// 18015cc4 <SHA1Transform+0xe88>
1801547c:	6180      	addu      	r6, r0
1801547e:	6158      	addu      	r5, r6
18015480:	c4ac0020 	addu      	r0, r12, r5
18015484:	6c4d      	xor      	r1, r3
18015486:	d98e200b 	ld.w      	r12, (r14, 0x2c)
1801548a:	6c71      	xor      	r1, r12
1801548c:	d98e2006 	ld.w      	r12, (r14, 0x18)
18015490:	6c71      	xor      	r1, r12
18015492:	c4214901 	rotli      	r1, r1, 1
18015496:	b82d      	st.w      	r1, (r14, 0x34)
18015498:	6350      	addu      	r13, r4
1801549a:	d98e2007 	ld.w      	r12, (r14, 0x1c)
1801549e:	c4a84904 	rotli      	r4, r8, 5
180154a2:	6134      	addu      	r4, r13
180154a4:	6cb1      	xor      	r2, r12
180154a6:	d98e2002 	ld.w      	r12, (r14, 0x8)
180154aa:	c4a44905 	rotli      	r5, r4, 5
180154ae:	6cb1      	xor      	r2, r12
180154b0:	6014      	addu      	r0, r5
180154b2:	6ca5      	xor      	r2, r9
180154b4:	98ad      	ld.w      	r5, (r14, 0x34)
180154b6:	ea860204 	lrw      	r6, 0x6ed9eba1	// 18015cc4 <SHA1Transform+0xe88>
180154ba:	6194      	addu      	r6, r5
180154bc:	c4224902 	rotli      	r2, r2, 1
180154c0:	ea850201 	lrw      	r5, 0x6ed9eba1	// 18015cc4 <SHA1Transform+0xe88>
180154c4:	b84e      	st.w      	r2, (r14, 0x38)
180154c6:	c7c84908 	rotli      	r8, r8, 30
180154ca:	6094      	addu      	r2, r5
180154cc:	c5072441 	xor      	r1, r7, r8
180154d0:	61c8      	addu      	r7, r2
180154d2:	9848      	ld.w      	r2, (r14, 0x20)
180154d4:	6cc9      	xor      	r3, r2
180154d6:	9843      	ld.w      	r2, (r14, 0xc)
180154d8:	62d8      	addu      	r11, r6
180154da:	6c51      	xor      	r1, r4
180154dc:	6cc9      	xor      	r3, r2
180154de:	c7c44904 	rotli      	r4, r4, 30
180154e2:	984c      	ld.w      	r2, (r14, 0x30)
180154e4:	c488244c 	xor      	r12, r8, r4
180154e8:	606c      	addu      	r1, r11
180154ea:	6cc9      	xor      	r3, r2
180154ec:	c4a0490b 	rotli      	r11, r0, 5
180154f0:	606c      	addu      	r1, r11
180154f2:	6f01      	xor      	r12, r0
180154f4:	c4234903 	rotli      	r3, r3, 1
180154f8:	c7c04900 	rotli      	r0, r0, 30
180154fc:	b86f      	st.w      	r3, (r14, 0x3c)
180154fe:	c4012423 	or      	r3, r1, r0
18015502:	c483202d 	and      	r13, r3, r4
18015506:	c4012023 	and      	r3, r1, r0
1801550a:	984f      	ld.w      	r2, (r14, 0x3c)
1801550c:	6cf4      	or      	r3, r13
1801550e:	ea8d01ef 	lrw      	r13, 0x8f1bbcdc	// 18015cc8 <SHA1Transform+0xe8c>
18015512:	6348      	addu      	r13, r2
18015514:	6234      	addu      	r8, r13
18015516:	9847      	ld.w      	r2, (r14, 0x1c)
18015518:	d9ae2009 	ld.w      	r13, (r14, 0x24)
1801551c:	c5a22445 	xor      	r5, r2, r13
18015520:	9844      	ld.w      	r2, (r14, 0x10)
18015522:	6d49      	xor      	r5, r2
18015524:	984d      	ld.w      	r2, (r14, 0x34)
18015526:	631c      	addu      	r12, r7
18015528:	6d49      	xor      	r5, r2
1801552a:	c4a14907 	rotli      	r7, r1, 5
1801552e:	631c      	addu      	r12, r7
18015530:	c7c14901 	rotli      	r1, r1, 30
18015534:	c4254902 	rotli      	r2, r5, 1
18015538:	b847      	st.w      	r2, (r14, 0x1c)
1801553a:	c42c2422 	or      	r2, r12, r1
1801553e:	c402202d 	and      	r13, r2, r0
18015542:	c42c2022 	and      	r2, r12, r1
18015546:	6cb4      	or      	r2, r13
18015548:	ea8501e0 	lrw      	r5, 0x8f1bbcdc	// 18015cc8 <SHA1Transform+0xe8c>
1801554c:	d9ae2007 	ld.w      	r13, (r14, 0x1c)
18015550:	6354      	addu      	r13, r5
18015552:	60e0      	addu      	r3, r8
18015554:	c4ac4908 	rotli      	r8, r12, 5
18015558:	60e0      	addu      	r3, r8
1801555a:	6134      	addu      	r4, r13
1801555c:	6090      	addu      	r2, r4
1801555e:	c4a34904 	rotli      	r4, r3, 5
18015562:	6090      	addu      	r2, r4
18015564:	d9ae2008 	ld.w      	r13, (r14, 0x20)
18015568:	988a      	ld.w      	r4, (r14, 0x28)
1801556a:	c48d2445 	xor      	r5, r13, r4
1801556e:	d9ae2005 	ld.w      	r13, (r14, 0x14)
18015572:	6d75      	xor      	r5, r13
18015574:	d9ae200e 	ld.w      	r13, (r14, 0x38)
18015578:	6d75      	xor      	r5, r13
1801557a:	c7cc490c 	rotli      	r12, r12, 30
1801557e:	c4254904 	rotli      	r4, r5, 1
18015582:	b888      	st.w      	r4, (r14, 0x20)
18015584:	c5832424 	or      	r4, r3, r12
18015588:	c424202d 	and      	r13, r4, r1
1801558c:	c5832024 	and      	r4, r3, r12
18015590:	ea8501ce 	lrw      	r5, 0x8f1bbcdc	// 18015cc8 <SHA1Transform+0xe8c>
18015594:	6d34      	or      	r4, r13
18015596:	d9ae2008 	ld.w      	r13, (r14, 0x20)
1801559a:	6354      	addu      	r13, r5
1801559c:	6034      	addu      	r0, r13
1801559e:	6100      	addu      	r4, r0
180155a0:	c4a24900 	rotli      	r0, r2, 5
180155a4:	6100      	addu      	r4, r0
180155a6:	9809      	ld.w      	r0, (r14, 0x24)
180155a8:	d9ae2006 	ld.w      	r13, (r14, 0x18)
180155ac:	6c29      	xor      	r0, r10
180155ae:	6c35      	xor      	r0, r13
180155b0:	d9ae200f 	ld.w      	r13, (r14, 0x3c)
180155b4:	c7c34903 	rotli      	r3, r3, 30
180155b8:	6c35      	xor      	r0, r13
180155ba:	c4204900 	rotli      	r0, r0, 1
180155be:	c462242d 	or      	r13, r2, r3
180155c2:	b809      	st.w      	r0, (r14, 0x24)
180155c4:	c58d2020 	and      	r0, r13, r12
180155c8:	c462202d 	and      	r13, r2, r3
180155cc:	6f40      	or      	r13, r0
180155ce:	9809      	ld.w      	r0, (r14, 0x24)
180155d0:	6014      	addu      	r0, r5
180155d2:	6040      	addu      	r1, r0
180155d4:	6344      	addu      	r13, r1
180155d6:	c4a44901 	rotli      	r1, r4, 5
180155da:	6344      	addu      	r13, r1
180155dc:	980b      	ld.w      	r0, (r14, 0x2c)
180155de:	982a      	ld.w      	r1, (r14, 0x28)
180155e0:	6c41      	xor      	r1, r0
180155e2:	6c65      	xor      	r1, r9
180155e4:	9807      	ld.w      	r0, (r14, 0x1c)
180155e6:	c7c24902 	rotli      	r2, r2, 30
180155ea:	6c41      	xor      	r1, r0
180155ec:	c4214901 	rotli      	r1, r1, 1
180155f0:	c4442420 	or      	r0, r4, r2
180155f4:	b82a      	st.w      	r1, (r14, 0x28)
180155f6:	c4602021 	and      	r1, r0, r3
180155fa:	c4442020 	and      	r0, r4, r2
180155fe:	6c04      	or      	r0, r1
18015600:	982a      	ld.w      	r1, (r14, 0x28)
18015602:	6054      	addu      	r1, r5
18015604:	6304      	addu      	r12, r1
18015606:	9822      	ld.w      	r1, (r14, 0x8)
18015608:	c7c44908 	rotli      	r8, r4, 30
1801560c:	c42a2444 	xor      	r4, r10, r1
18015610:	982c      	ld.w      	r1, (r14, 0x30)
18015612:	6d05      	xor      	r4, r1
18015614:	9828      	ld.w      	r1, (r14, 0x20)
18015616:	6030      	addu      	r0, r12
18015618:	6d05      	xor      	r4, r1
1801561a:	c4ad490c 	rotli      	r12, r13, 5
1801561e:	6300      	addu      	r12, r0
18015620:	c4244901 	rotli      	r1, r4, 1
18015624:	c50d2420 	or      	r0, r13, r8
18015628:	b830      	st.w      	r1, (r14, 0x40)
1801562a:	c4402024 	and      	r4, r0, r2
1801562e:	6054      	addu      	r1, r5
18015630:	c50d2020 	and      	r0, r13, r8
18015634:	60c4      	addu      	r3, r1
18015636:	6c10      	or      	r0, r4
18015638:	600c      	addu      	r0, r3
1801563a:	c4ac4904 	rotli      	r4, r12, 5
1801563e:	6100      	addu      	r4, r0
18015640:	986b      	ld.w      	r3, (r14, 0x2c)
18015642:	9803      	ld.w      	r0, (r14, 0xc)
18015644:	c7cd4901 	rotli      	r1, r13, 30
18015648:	c403244d 	xor      	r13, r3, r0
1801564c:	986d      	ld.w      	r3, (r14, 0x34)
1801564e:	6f4d      	xor      	r13, r3
18015650:	9869      	ld.w      	r3, (r14, 0x24)
18015652:	6f4d      	xor      	r13, r3
18015654:	c42c2420 	or      	r0, r12, r1
18015658:	c42d4903 	rotli      	r3, r13, 1
1801565c:	b86b      	st.w      	r3, (r14, 0x2c)
1801565e:	c5002023 	and      	r3, r0, r8
18015662:	c42c2020 	and      	r0, r12, r1
18015666:	6c0c      	or      	r0, r3
18015668:	986b      	ld.w      	r3, (r14, 0x2c)
1801566a:	60d4      	addu      	r3, r5
1801566c:	608c      	addu      	r2, r3
1801566e:	6008      	addu      	r0, r2
18015670:	c4a44902 	rotli      	r2, r4, 5
18015674:	6080      	addu      	r2, r0
18015676:	9862      	ld.w      	r3, (r14, 0x8)
18015678:	9804      	ld.w      	r0, (r14, 0x10)
1801567a:	6cc1      	xor      	r3, r0
1801567c:	980e      	ld.w      	r0, (r14, 0x38)
1801567e:	6cc1      	xor      	r3, r0
18015680:	980a      	ld.w      	r0, (r14, 0x28)
18015682:	c7cc490c 	rotli      	r12, r12, 30
18015686:	6cc1      	xor      	r3, r0
18015688:	c4234903 	rotli      	r3, r3, 1
1801568c:	c5842420 	or      	r0, r4, r12
18015690:	b862      	st.w      	r3, (r14, 0x8)
18015692:	c4202026 	and      	r6, r0, r1
18015696:	60d4      	addu      	r3, r5
18015698:	c5842020 	and      	r0, r4, r12
1801569c:	6c18      	or      	r0, r6
1801569e:	c5030026 	addu      	r6, r3, r8
180156a2:	6018      	addu      	r0, r6
180156a4:	c4a24906 	rotli      	r6, r2, 5
180156a8:	6180      	addu      	r6, r0
180156aa:	9863      	ld.w      	r3, (r14, 0xc)
180156ac:	9805      	ld.w      	r0, (r14, 0x14)
180156ae:	6cc1      	xor      	r3, r0
180156b0:	980f      	ld.w      	r0, (r14, 0x3c)
180156b2:	6cc1      	xor      	r3, r0
180156b4:	9810      	ld.w      	r0, (r14, 0x40)
180156b6:	6cc1      	xor      	r3, r0
180156b8:	c4234903 	rotli      	r3, r3, 1
180156bc:	c7c44904 	rotli      	r4, r4, 30
180156c0:	b863      	st.w      	r3, (r14, 0xc)
180156c2:	9803      	ld.w      	r0, (r14, 0xc)
180156c4:	c4822423 	or      	r3, r2, r4
180156c8:	ea8d0180 	lrw      	r13, 0x8f1bbcdc	// 18015cc8 <SHA1Transform+0xe8c>
180156cc:	c5832025 	and      	r5, r3, r12
180156d0:	6340      	addu      	r13, r0
180156d2:	c4822023 	and      	r3, r2, r4
180156d6:	6344      	addu      	r13, r1
180156d8:	6cd4      	or      	r3, r5
180156da:	60f4      	addu      	r3, r13
180156dc:	c4a64905 	rotli      	r5, r6, 5
180156e0:	614c      	addu      	r5, r3
180156e2:	9826      	ld.w      	r1, (r14, 0x18)
180156e4:	9864      	ld.w      	r3, (r14, 0x10)
180156e6:	6cc5      	xor      	r3, r1
180156e8:	9827      	ld.w      	r1, (r14, 0x1c)
180156ea:	6cc5      	xor      	r3, r1
180156ec:	982b      	ld.w      	r1, (r14, 0x2c)
180156ee:	c7c24902 	rotli      	r2, r2, 30
180156f2:	6cc5      	xor      	r3, r1
180156f4:	ea800175 	lrw      	r0, 0x8f1bbcdc	// 18015cc8 <SHA1Transform+0xe8c>
180156f8:	c4462421 	or      	r1, r6, r2
180156fc:	c4234903 	rotli      	r3, r3, 1
18015700:	c4812027 	and      	r7, r1, r4
18015704:	b864      	st.w      	r3, (r14, 0x10)
18015706:	c4462021 	and      	r1, r6, r2
1801570a:	60c0      	addu      	r3, r0
1801570c:	630c      	addu      	r12, r3
1801570e:	6c5c      	or      	r1, r7
18015710:	9865      	ld.w      	r3, (r14, 0x14)
18015712:	6070      	addu      	r1, r12
18015714:	c523244c 	xor      	r12, r3, r9
18015718:	9868      	ld.w      	r3, (r14, 0x20)
1801571a:	c7c64906 	rotli      	r6, r6, 30
1801571e:	c4a54907 	rotli      	r7, r5, 5
18015722:	6f0d      	xor      	r12, r3
18015724:	9862      	ld.w      	r3, (r14, 0x8)
18015726:	61c4      	addu      	r7, r1
18015728:	6f0d      	xor      	r12, r3
1801572a:	c4c52421 	or      	r1, r5, r6
1801572e:	c42c490a 	rotli      	r10, r12, 1
18015732:	c4412023 	and      	r3, r1, r2
18015736:	c4c52021 	and      	r1, r5, r6
1801573a:	6c4c      	or      	r1, r3
1801573c:	c40a0023 	addu      	r3, r10, r0
18015740:	60d0      	addu      	r3, r4
18015742:	c4a7490c 	rotli      	r12, r7, 5
18015746:	604c      	addu      	r1, r3
18015748:	c42c0023 	addu      	r3, r12, r1
1801574c:	980c      	ld.w      	r0, (r14, 0x30)
1801574e:	9826      	ld.w      	r1, (r14, 0x18)
18015750:	6c05      	xor      	r0, r1
18015752:	9829      	ld.w      	r1, (r14, 0x24)
18015754:	6c05      	xor      	r0, r1
18015756:	9823      	ld.w      	r1, (r14, 0xc)
18015758:	6c05      	xor      	r0, r1
1801575a:	c7c54905 	rotli      	r5, r5, 30
1801575e:	c4204901 	rotli      	r1, r0, 1
18015762:	b825      	st.w      	r1, (r14, 0x14)
18015764:	c4a72421 	or      	r1, r7, r5
18015768:	c4c12020 	and      	r0, r1, r6
1801576c:	c4a72021 	and      	r1, r7, r5
18015770:	ea840156 	lrw      	r4, 0x8f1bbcdc	// 18015cc8 <SHA1Transform+0xe8c>
18015774:	6c40      	or      	r1, r0
18015776:	9805      	ld.w      	r0, (r14, 0x14)
18015778:	6010      	addu      	r0, r4
1801577a:	6008      	addu      	r0, r2
1801577c:	6040      	addu      	r1, r0
1801577e:	984d      	ld.w      	r2, (r14, 0x34)
18015780:	c4a34900 	rotli      	r0, r3, 5
18015784:	6004      	addu      	r0, r1
18015786:	c4492441 	xor      	r1, r9, r2
1801578a:	984a      	ld.w      	r2, (r14, 0x28)
1801578c:	6c49      	xor      	r1, r2
1801578e:	9844      	ld.w      	r2, (r14, 0x10)
18015790:	c7c74907 	rotli      	r7, r7, 30
18015794:	6c49      	xor      	r1, r2
18015796:	c4214909 	rotli      	r9, r1, 1
1801579a:	c4e3242c 	or      	r12, r3, r7
1801579e:	c4ac2021 	and      	r1, r12, r5
180157a2:	c4890022 	addu      	r2, r9, r4
180157a6:	c4e3202c 	and      	r12, r3, r7
180157aa:	6f04      	or      	r12, r1
180157ac:	5a38      	addu      	r1, r2, r6
180157ae:	6304      	addu      	r12, r1
180157b0:	c4a04901 	rotli      	r1, r0, 5
180157b4:	6070      	addu      	r1, r12
180157b6:	984e      	ld.w      	r2, (r14, 0x38)
180157b8:	c7c3490c 	rotli      	r12, r3, 30
180157bc:	986c      	ld.w      	r3, (r14, 0x30)
180157be:	6c8d      	xor      	r2, r3
180157c0:	9870      	ld.w      	r3, (r14, 0x40)
180157c2:	6c8d      	xor      	r2, r3
180157c4:	6ca9      	xor      	r2, r10
180157c6:	c4224903 	rotli      	r3, r2, 1
180157ca:	c5802422 	or      	r2, r0, r12
180157ce:	b866      	st.w      	r3, (r14, 0x18)
180157d0:	c4e2202b 	and      	r11, r2, r7
180157d4:	60d0      	addu      	r3, r4
180157d6:	c5802022 	and      	r2, r0, r12
180157da:	6cac      	or      	r2, r11
180157dc:	c4a3002b 	addu      	r11, r3, r5
180157e0:	60ac      	addu      	r2, r11
180157e2:	c4a1490b 	rotli      	r11, r1, 5
180157e6:	62c8      	addu      	r11, r2
180157e8:	986d      	ld.w      	r3, (r14, 0x34)
180157ea:	984f      	ld.w      	r2, (r14, 0x3c)
180157ec:	c4432445 	xor      	r5, r3, r2
180157f0:	986b      	ld.w      	r3, (r14, 0x2c)
180157f2:	6d4d      	xor      	r5, r3
180157f4:	9865      	ld.w      	r3, (r14, 0x14)
180157f6:	c7c04900 	rotli      	r0, r0, 30
180157fa:	6d4d      	xor      	r5, r3
180157fc:	c4254908 	rotli      	r8, r5, 1
18015800:	c401242d 	or      	r13, r1, r0
18015804:	c58d2022 	and      	r2, r13, r12
18015808:	c4880023 	addu      	r3, r8, r4
1801580c:	c401202d 	and      	r13, r1, r0
18015810:	6f48      	or      	r13, r2
18015812:	5b5c      	addu      	r2, r3, r7
18015814:	6348      	addu      	r13, r2
18015816:	c4ab4902 	rotli      	r2, r11, 5
1801581a:	60b4      	addu      	r2, r13
1801581c:	986e      	ld.w      	r3, (r14, 0x38)
1801581e:	d9ae2007 	ld.w      	r13, (r14, 0x1c)
18015822:	6cf5      	xor      	r3, r13
18015824:	d9ae2002 	ld.w      	r13, (r14, 0x8)
18015828:	c7c14901 	rotli      	r1, r1, 30
1801582c:	6cf5      	xor      	r3, r13
1801582e:	6ce5      	xor      	r3, r9
18015830:	c42b242d 	or      	r13, r11, r1
18015834:	c4234907 	rotli      	r7, r3, 1
18015838:	c40d2023 	and      	r3, r13, r0
1801583c:	c42b202d 	and      	r13, r11, r1
18015840:	6f4c      	or      	r13, r3
18015842:	5f70      	addu      	r3, r7, r4
18015844:	60f0      	addu      	r3, r12
18015846:	634c      	addu      	r13, r3
18015848:	c4a24903 	rotli      	r3, r2, 5
1801584c:	60f4      	addu      	r3, r13
1801584e:	d98e200f 	ld.w      	r12, (r14, 0x3c)
18015852:	d9ae2008 	ld.w      	r13, (r14, 0x20)
18015856:	c5ac2444 	xor      	r4, r12, r13
1801585a:	d98e2003 	ld.w      	r12, (r14, 0xc)
1801585e:	6d31      	xor      	r4, r12
18015860:	d98e2006 	ld.w      	r12, (r14, 0x18)
18015864:	c7cb490b 	rotli      	r11, r11, 30
18015868:	6d31      	xor      	r4, r12
1801586a:	c4244904 	rotli      	r4, r4, 1
1801586e:	c562242c 	or      	r12, r2, r11
18015872:	b88c      	st.w      	r4, (r14, 0x30)
18015874:	c42c2024 	and      	r4, r12, r1
18015878:	c562202c 	and      	r12, r2, r11
1801587c:	ea850113 	lrw      	r5, 0x8f1bbcdc	// 18015cc8 <SHA1Transform+0xe8c>
18015880:	6f10      	or      	r12, r4
18015882:	988c      	ld.w      	r4, (r14, 0x30)
18015884:	6114      	addu      	r4, r5
18015886:	6100      	addu      	r4, r0
18015888:	6310      	addu      	r12, r4
1801588a:	c4a34904 	rotli      	r4, r3, 5
1801588e:	6130      	addu      	r4, r12
18015890:	9807      	ld.w      	r0, (r14, 0x1c)
18015892:	d98e2009 	ld.w      	r12, (r14, 0x24)
18015896:	c580244d 	xor      	r13, r0, r12
1801589a:	9804      	ld.w      	r0, (r14, 0x10)
1801589c:	6f41      	xor      	r13, r0
1801589e:	6f61      	xor      	r13, r8
180158a0:	c7c24902 	rotli      	r2, r2, 30
180158a4:	c42d4900 	rotli      	r0, r13, 1
180158a8:	b807      	st.w      	r0, (r14, 0x1c)
180158aa:	c4432420 	or      	r0, r3, r2
180158ae:	c560202d 	and      	r13, r0, r11
180158b2:	d98e2007 	ld.w      	r12, (r14, 0x1c)
180158b6:	c4432020 	and      	r0, r3, r2
180158ba:	6c34      	or      	r0, r13
180158bc:	c4ac002d 	addu      	r13, r12, r5
180158c0:	6344      	addu      	r13, r1
180158c2:	6034      	addu      	r0, r13
180158c4:	c4a4490d 	rotli      	r13, r4, 5
180158c8:	6340      	addu      	r13, r0
180158ca:	9828      	ld.w      	r1, (r14, 0x20)
180158cc:	980a      	ld.w      	r0, (r14, 0x28)
180158ce:	c401244c 	xor      	r12, r1, r0
180158d2:	6f29      	xor      	r12, r10
180158d4:	6f1d      	xor      	r12, r7
180158d6:	c7c34903 	rotli      	r3, r3, 30
180158da:	c42c4901 	rotli      	r1, r12, 1
180158de:	b828      	st.w      	r1, (r14, 0x20)
180158e0:	c4642421 	or      	r1, r4, r3
180158e4:	c4412026 	and      	r6, r1, r2
180158e8:	9808      	ld.w      	r0, (r14, 0x20)
180158ea:	c4642021 	and      	r1, r4, r3
180158ee:	6c58      	or      	r1, r6
180158f0:	58d4      	addu      	r6, r0, r5
180158f2:	61ac      	addu      	r6, r11
180158f4:	6058      	addu      	r1, r6
180158f6:	c4ad4906 	rotli      	r6, r13, 5
180158fa:	6184      	addu      	r6, r1
180158fc:	9810      	ld.w      	r0, (r14, 0x40)
180158fe:	9829      	ld.w      	r1, (r14, 0x24)
18015900:	6c05      	xor      	r0, r1
18015902:	9825      	ld.w      	r1, (r14, 0x14)
18015904:	6c05      	xor      	r0, r1
18015906:	982c      	ld.w      	r1, (r14, 0x30)
18015908:	6c05      	xor      	r0, r1
1801590a:	c7c44904 	rotli      	r4, r4, 30
1801590e:	c4204901 	rotli      	r1, r0, 1
18015912:	b829      	st.w      	r1, (r14, 0x24)
18015914:	c48d2421 	or      	r1, r13, r4
18015918:	c4612025 	and      	r5, r1, r3
1801591c:	c48d2021 	and      	r1, r13, r4
18015920:	9809      	ld.w      	r0, (r14, 0x24)
18015922:	6c54      	or      	r1, r5
18015924:	00b6      	lrw      	r5, 0x8f1bbcdc	// 18015cc8 <SHA1Transform+0xe8c>
18015926:	6140      	addu      	r5, r0
18015928:	6148      	addu      	r5, r2
1801592a:	6054      	addu      	r1, r5
1801592c:	c4a64905 	rotli      	r5, r6, 5
18015930:	984a      	ld.w      	r2, (r14, 0x28)
18015932:	6144      	addu      	r5, r1
18015934:	982b      	ld.w      	r1, (r14, 0x2c)
18015936:	6c49      	xor      	r1, r2
18015938:	6c65      	xor      	r1, r9
1801593a:	9847      	ld.w      	r2, (r14, 0x1c)
1801593c:	6c49      	xor      	r1, r2
1801593e:	c4214902 	rotli      	r2, r1, 1
18015942:	b84a      	st.w      	r2, (r14, 0x28)
18015944:	c7cd490d 	rotli      	r13, r13, 30
18015948:	982a      	ld.w      	r1, (r14, 0x28)
1801594a:	001e      	lrw      	r0, 0xca62c1d6	// 18015ccc <SHA1Transform+0xe90>
1801594c:	c5a42442 	xor      	r2, r4, r13
18015950:	c401002c 	addu      	r12, r1, r0
18015954:	630c      	addu      	r12, r3
18015956:	6c99      	xor      	r2, r6
18015958:	60b0      	addu      	r2, r12
1801595a:	c4a5490c 	rotli      	r12, r5, 5
1801595e:	6308      	addu      	r12, r2
18015960:	9870      	ld.w      	r3, (r14, 0x40)
18015962:	9842      	ld.w      	r2, (r14, 0x8)
18015964:	6c8d      	xor      	r2, r3
18015966:	9866      	ld.w      	r3, (r14, 0x18)
18015968:	6c8d      	xor      	r2, r3
1801596a:	9868      	ld.w      	r3, (r14, 0x20)
1801596c:	6c8d      	xor      	r2, r3
1801596e:	c4224903 	rotli      	r3, r2, 1
18015972:	b86d      	st.w      	r3, (r14, 0x34)
18015974:	c7c64906 	rotli      	r6, r6, 30
18015978:	984d      	ld.w      	r2, (r14, 0x34)
1801597a:	c4cd2443 	xor      	r3, r13, r6
1801597e:	6c43      	mov      	r1, r0
18015980:	6008      	addu      	r0, r2
18015982:	6010      	addu      	r0, r4
18015984:	6cd5      	xor      	r3, r5
18015986:	60c0      	addu      	r3, r0
18015988:	c4ac4900 	rotli      	r0, r12, 5
1801598c:	9843      	ld.w      	r2, (r14, 0xc)
1801598e:	600c      	addu      	r0, r3
18015990:	986b      	ld.w      	r3, (r14, 0x2c)
18015992:	c4432444 	xor      	r4, r3, r2
18015996:	6d21      	xor      	r4, r8
18015998:	9869      	ld.w      	r3, (r14, 0x24)
1801599a:	6d0d      	xor      	r4, r3
1801599c:	c4244903 	rotli      	r3, r4, 1
180159a0:	b86b      	st.w      	r3, (r14, 0x2c)
180159a2:	c7c54905 	rotli      	r5, r5, 30
180159a6:	984b      	ld.w      	r2, (r14, 0x2c)
180159a8:	c4a62443 	xor      	r3, r6, r5
180159ac:	6048      	addu      	r1, r2
180159ae:	6074      	addu      	r1, r13
180159b0:	6cf1      	xor      	r3, r12
180159b2:	60c4      	addu      	r3, r1
180159b4:	c4a04901 	rotli      	r1, r0, 5
180159b8:	604c      	addu      	r1, r3
180159ba:	9844      	ld.w      	r2, (r14, 0x10)
180159bc:	9862      	ld.w      	r3, (r14, 0x8)
180159be:	6cc9      	xor      	r3, r2
180159c0:	6cdd      	xor      	r3, r7
180159c2:	984a      	ld.w      	r2, (r14, 0x28)
180159c4:	6cc9      	xor      	r3, r2
180159c6:	c7cc490c 	rotli      	r12, r12, 30
180159ca:	c4234903 	rotli      	r3, r3, 1
180159ce:	015f      	lrw      	r2, 0xca62c1d6	// 18015ccc <SHA1Transform+0xe90>
180159d0:	b862      	st.w      	r3, (r14, 0x8)
180159d2:	c585244d 	xor      	r13, r5, r12
180159d6:	60c8      	addu      	r3, r2
180159d8:	5b58      	addu      	r2, r3, r6
180159da:	6f41      	xor      	r13, r0
180159dc:	9863      	ld.w      	r3, (r14, 0xc)
180159de:	6348      	addu      	r13, r2
180159e0:	c4a14902 	rotli      	r2, r1, 5
180159e4:	60b4      	addu      	r2, r13
180159e6:	6ce9      	xor      	r3, r10
180159e8:	d9ae200c 	ld.w      	r13, (r14, 0x30)
180159ec:	6cf5      	xor      	r3, r13
180159ee:	d9ae200d 	ld.w      	r13, (r14, 0x34)
180159f2:	6cf5      	xor      	r3, r13
180159f4:	c4234903 	rotli      	r3, r3, 1
180159f8:	b863      	st.w      	r3, (r14, 0xc)
180159fa:	c7c04900 	rotli      	r0, r0, 30
180159fe:	d9ae2003 	ld.w      	r13, (r14, 0xc)
18015a02:	028c      	lrw      	r4, 0xca62c1d6	// 18015ccc <SHA1Transform+0xe90>
18015a04:	c40c2443 	xor      	r3, r12, r0
18015a08:	c48d002b 	addu      	r11, r13, r4
18015a0c:	62d4      	addu      	r11, r5
18015a0e:	6cc5      	xor      	r3, r1
18015a10:	60ec      	addu      	r3, r11
18015a12:	c4a2490b 	rotli      	r11, r2, 5
18015a16:	62cc      	addu      	r11, r3
18015a18:	d9ae2005 	ld.w      	r13, (r14, 0x14)
18015a1c:	9864      	ld.w      	r3, (r14, 0x10)
18015a1e:	6cf5      	xor      	r3, r13
18015a20:	d9ae2007 	ld.w      	r13, (r14, 0x1c)
18015a24:	6cf5      	xor      	r3, r13
18015a26:	d9ae200b 	ld.w      	r13, (r14, 0x2c)
18015a2a:	6cf5      	xor      	r3, r13
18015a2c:	c7c14901 	rotli      	r1, r1, 30
18015a30:	c4234903 	rotli      	r3, r3, 1
18015a34:	b864      	st.w      	r3, (r14, 0x10)
18015a36:	c420244d 	xor      	r13, r0, r1
18015a3a:	60d0      	addu      	r3, r4
18015a3c:	60f0      	addu      	r3, r12
18015a3e:	6f49      	xor      	r13, r2
18015a40:	634c      	addu      	r13, r3
18015a42:	c4ab4903 	rotli      	r3, r11, 5
18015a46:	60f4      	addu      	r3, r13
18015a48:	c52a244c 	xor      	r12, r10, r9
18015a4c:	d9ae2008 	ld.w      	r13, (r14, 0x20)
18015a50:	6f35      	xor      	r12, r13
18015a52:	d9ae2002 	ld.w      	r13, (r14, 0x8)
18015a56:	6f35      	xor      	r12, r13
18015a58:	c7c24902 	rotli      	r2, r2, 30
18015a5c:	c42c490c 	rotli      	r12, r12, 1
18015a60:	c441244d 	xor      	r13, r1, r2
18015a64:	6130      	addu      	r4, r12
18015a66:	6100      	addu      	r4, r0
18015a68:	6f6d      	xor      	r13, r11
18015a6a:	6350      	addu      	r13, r4
18015a6c:	c4a34904 	rotli      	r4, r3, 5
18015a70:	6134      	addu      	r4, r13
18015a72:	9805      	ld.w      	r0, (r14, 0x14)
18015a74:	d9ae2006 	ld.w      	r13, (r14, 0x18)
18015a78:	6c35      	xor      	r0, r13
18015a7a:	d9ae2009 	ld.w      	r13, (r14, 0x24)
18015a7e:	6c35      	xor      	r0, r13
18015a80:	d9ae2003 	ld.w      	r13, (r14, 0xc)
18015a84:	6c35      	xor      	r0, r13
18015a86:	c7cb490b 	rotli      	r11, r11, 30
18015a8a:	c4204900 	rotli      	r0, r0, 1
18015a8e:	ea8d0090 	lrw      	r13, 0xca62c1d6	// 18015ccc <SHA1Transform+0xe90>
18015a92:	c5622445 	xor      	r5, r2, r11
18015a96:	6340      	addu      	r13, r0
18015a98:	6344      	addu      	r13, r1
18015a9a:	6d4d      	xor      	r5, r3
18015a9c:	6174      	addu      	r5, r13
18015a9e:	c4a4490d 	rotli      	r13, r4, 5
18015aa2:	6354      	addu      	r13, r5
18015aa4:	c5092441 	xor      	r1, r9, r8
18015aa8:	98aa      	ld.w      	r5, (r14, 0x28)
18015aaa:	6c55      	xor      	r1, r5
18015aac:	98a4      	ld.w      	r5, (r14, 0x10)
18015aae:	6c55      	xor      	r1, r5
18015ab0:	c7c34903 	rotli      	r3, r3, 30
18015ab4:	c4214901 	rotli      	r1, r1, 1
18015ab8:	03da      	lrw      	r6, 0xca62c1d6	// 18015ccc <SHA1Transform+0xe90>
18015aba:	c46b2445 	xor      	r5, r11, r3
18015abe:	c4c1002a 	addu      	r10, r1, r6
18015ac2:	6288      	addu      	r10, r2
18015ac4:	6d51      	xor      	r5, r4
18015ac6:	6168      	addu      	r5, r10
18015ac8:	9846      	ld.w      	r2, (r14, 0x18)
18015aca:	c4ad490a 	rotli      	r10, r13, 5
18015ace:	6294      	addu      	r10, r5
18015ad0:	6c9d      	xor      	r2, r7
18015ad2:	98ad      	ld.w      	r5, (r14, 0x34)
18015ad4:	6c95      	xor      	r2, r5
18015ad6:	6cb1      	xor      	r2, r12
18015ad8:	c7c44904 	rotli      	r4, r4, 30
18015adc:	c4224902 	rotli      	r2, r2, 1
18015ae0:	c4832445 	xor      	r5, r3, r4
18015ae4:	c4c20029 	addu      	r9, r2, r6
18015ae8:	626c      	addu      	r9, r11
18015aea:	6d75      	xor      	r5, r13
18015aec:	6164      	addu      	r5, r9
18015aee:	c4aa4909 	rotli      	r9, r10, 5
18015af2:	6254      	addu      	r9, r5
18015af4:	98ac      	ld.w      	r5, (r14, 0x30)
18015af6:	98cb      	ld.w      	r6, (r14, 0x2c)
18015af8:	6d61      	xor      	r5, r8
18015afa:	6d59      	xor      	r5, r6
18015afc:	6d41      	xor      	r5, r0
18015afe:	c4254905 	rotli      	r5, r5, 1
18015b02:	b8a5      	st.w      	r5, (r14, 0x14)
18015b04:	c7cd490d 	rotli      	r13, r13, 30
18015b08:	98c5      	ld.w      	r6, (r14, 0x14)
18015b0a:	ea880071 	lrw      	r8, 0xca62c1d6	// 18015ccc <SHA1Transform+0xe90>
18015b0e:	c5a42445 	xor      	r5, r4, r13
18015b12:	6218      	addu      	r8, r6
18015b14:	620c      	addu      	r8, r3
18015b16:	6d69      	xor      	r5, r10
18015b18:	6160      	addu      	r5, r8
18015b1a:	9867      	ld.w      	r3, (r14, 0x1c)
18015b1c:	c4a94908 	rotli      	r8, r9, 5
18015b20:	6214      	addu      	r8, r5
18015b22:	6cdd      	xor      	r3, r7
18015b24:	98a2      	ld.w      	r5, (r14, 0x8)
18015b26:	6cd5      	xor      	r3, r5
18015b28:	6cc5      	xor      	r3, r1
18015b2a:	c7ca490a 	rotli      	r10, r10, 30
18015b2e:	c4234903 	rotli      	r3, r3, 1
18015b32:	13c7      	lrw      	r6, 0xca62c1d6	// 18015ccc <SHA1Transform+0xe90>
18015b34:	c54d2445 	xor      	r5, r13, r10
18015b38:	5bf8      	addu      	r7, r3, r6
18015b3a:	61d0      	addu      	r7, r4
18015b3c:	6d65      	xor      	r5, r9
18015b3e:	615c      	addu      	r5, r7
18015b40:	c4a84907 	rotli      	r7, r8, 5
18015b44:	61d4      	addu      	r7, r5
18015b46:	988c      	ld.w      	r4, (r14, 0x30)
18015b48:	98a8      	ld.w      	r5, (r14, 0x20)
18015b4a:	6d15      	xor      	r4, r5
18015b4c:	98a3      	ld.w      	r5, (r14, 0xc)
18015b4e:	6d15      	xor      	r4, r5
18015b50:	6d09      	xor      	r4, r2
18015b52:	c7c94909 	rotli      	r9, r9, 30
18015b56:	c4244904 	rotli      	r4, r4, 1
18015b5a:	c52a2445 	xor      	r5, r10, r9
18015b5e:	6190      	addu      	r6, r4
18015b60:	61b4      	addu      	r6, r13
18015b62:	6d61      	xor      	r5, r8
18015b64:	6158      	addu      	r5, r6
18015b66:	c4a74906 	rotli      	r6, r7, 5
18015b6a:	6194      	addu      	r6, r5
18015b6c:	d9ae2007 	ld.w      	r13, (r14, 0x1c)
18015b70:	98a9      	ld.w      	r5, (r14, 0x24)
18015b72:	6f55      	xor      	r13, r5
18015b74:	98a4      	ld.w      	r5, (r14, 0x10)
18015b76:	6f55      	xor      	r13, r5
18015b78:	98a5      	ld.w      	r5, (r14, 0x14)
18015b7a:	6f55      	xor      	r13, r5
18015b7c:	c7c84908 	rotli      	r8, r8, 30
18015b80:	c42d490d 	rotli      	r13, r13, 1
18015b84:	12b2      	lrw      	r5, 0xca62c1d6	// 18015ccc <SHA1Transform+0xe90>
18015b86:	c509244b 	xor      	r11, r9, r8
18015b8a:	6174      	addu      	r5, r13
18015b8c:	6168      	addu      	r5, r10
18015b8e:	6edd      	xor      	r11, r7
18015b90:	62d4      	addu      	r11, r5
18015b92:	c4a64905 	rotli      	r5, r6, 5
18015b96:	616c      	addu      	r5, r11
18015b98:	d94e2008 	ld.w      	r10, (r14, 0x20)
18015b9c:	d96e200a 	ld.w      	r11, (r14, 0x28)
18015ba0:	6ead      	xor      	r10, r11
18015ba2:	6f29      	xor      	r12, r10
18015ba4:	6f0d      	xor      	r12, r3
18015ba6:	c7c74907 	rotli      	r7, r7, 30
18015baa:	c42c490c 	rotli      	r12, r12, 1
18015bae:	ea8a0048 	lrw      	r10, 0xca62c1d6	// 18015ccc <SHA1Transform+0xe90>
18015bb2:	c4e8244b 	xor      	r11, r8, r7
18015bb6:	62b0      	addu      	r10, r12
18015bb8:	6268      	addu      	r9, r10
18015bba:	6ed9      	xor      	r11, r6
18015bbc:	62e4      	addu      	r11, r9
18015bbe:	c4a54909 	rotli      	r9, r5, 5
18015bc2:	62e4      	addu      	r11, r9
18015bc4:	d94e200d 	ld.w      	r10, (r14, 0x34)
18015bc8:	d92e2009 	ld.w      	r9, (r14, 0x24)
18015bcc:	6e69      	xor      	r9, r10
18015bce:	6c25      	xor      	r0, r9
18015bd0:	6d01      	xor      	r4, r0
18015bd2:	c7c64906 	rotli      	r6, r6, 30
18015bd6:	c4244904 	rotli      	r4, r4, 1
18015bda:	111d      	lrw      	r0, 0xca62c1d6	// 18015ccc <SHA1Transform+0xe90>
18015bdc:	c4c72449 	xor      	r9, r7, r6
18015be0:	6010      	addu      	r0, r4
18015be2:	6200      	addu      	r8, r0
18015be4:	6e55      	xor      	r9, r5
18015be6:	c4ab4900 	rotli      	r0, r11, 5
18015bea:	6260      	addu      	r9, r8
18015bec:	6240      	addu      	r9, r0
18015bee:	d90e200b 	ld.w      	r8, (r14, 0x2c)
18015bf2:	980a      	ld.w      	r0, (r14, 0x28)
18015bf4:	6c21      	xor      	r0, r8
18015bf6:	6c41      	xor      	r1, r0
18015bf8:	6f45      	xor      	r13, r1
18015bfa:	c7c54905 	rotli      	r5, r5, 30
18015bfe:	c42d490d 	rotli      	r13, r13, 1
18015c02:	1133      	lrw      	r1, 0xca62c1d6	// 18015ccc <SHA1Transform+0xe90>
18015c04:	c4a62440 	xor      	r0, r6, r5
18015c08:	6074      	addu      	r1, r13
18015c0a:	61c4      	addu      	r7, r1
18015c0c:	6c2d      	xor      	r0, r11
18015c0e:	601c      	addu      	r0, r7
18015c10:	c4a94901 	rotli      	r1, r9, 5
18015c14:	6040      	addu      	r1, r0
18015c16:	98e2      	ld.w      	r7, (r14, 0x8)
18015c18:	6c2b      	mov      	r0, r10
18015c1a:	6c1d      	xor      	r0, r7
18015c1c:	6c81      	xor      	r2, r0
18015c1e:	6cb1      	xor      	r2, r12
18015c20:	110b      	lrw      	r0, 0xca62c1d6	// 18015ccc <SHA1Transform+0xe90>
18015c22:	c4224902 	rotli      	r2, r2, 1
18015c26:	c7cb490b 	rotli      	r11, r11, 30
18015c2a:	6080      	addu      	r2, r0
18015c2c:	6098      	addu      	r2, r6
18015c2e:	c5652446 	xor      	r6, r5, r11
18015c32:	6da5      	xor      	r6, r9
18015c34:	6188      	addu      	r6, r2
18015c36:	c4a14902 	rotli      	r2, r1, 5
18015c3a:	9803      	ld.w      	r0, (r14, 0xc)
18015c3c:	6188      	addu      	r6, r2
18015c3e:	6ca3      	mov      	r2, r8
18015c40:	6c81      	xor      	r2, r0
18015c42:	9805      	ld.w      	r0, (r14, 0x14)
18015c44:	6c81      	xor      	r2, r0
18015c46:	6c91      	xor      	r2, r4
18015c48:	1101      	lrw      	r0, 0xca62c1d6	// 18015ccc <SHA1Transform+0xe90>
18015c4a:	c4224902 	rotli      	r2, r2, 1
18015c4e:	c7c94909 	rotli      	r9, r9, 30
18015c52:	6080      	addu      	r2, r0
18015c54:	6148      	addu      	r5, r2
18015c56:	c52b2442 	xor      	r2, r11, r9
18015c5a:	6c85      	xor      	r2, r1
18015c5c:	6148      	addu      	r5, r2
18015c5e:	c4a64902 	rotli      	r2, r6, 5
18015c62:	6148      	addu      	r5, r2
18015c64:	9804      	ld.w      	r0, (r14, 0x10)
18015c66:	6c9f      	mov      	r2, r7
18015c68:	6c81      	xor      	r2, r0
18015c6a:	6cc9      	xor      	r3, r2
18015c6c:	6f4d      	xor      	r13, r3
18015c6e:	1058      	lrw      	r2, 0xca62c1d6	// 18015ccc <SHA1Transform+0xe90>
18015c70:	9871      	ld.w      	r3, (r14, 0x44)
18015c72:	60c8      	addu      	r3, r2
18015c74:	c7c14901 	rotli      	r1, r1, 30
18015c78:	c42d490d 	rotli      	r13, r13, 1
18015c7c:	634c      	addu      	r13, r3
18015c7e:	c4292443 	xor      	r3, r9, r1
18015c82:	6cd9      	xor      	r3, r6
18015c84:	62f4      	addu      	r11, r13
18015c86:	62cc      	addu      	r11, r3
18015c88:	c4a54903 	rotli      	r3, r5, 5
18015c8c:	62cc      	addu      	r11, r3
18015c8e:	9860      	ld.w      	r3, (r14, 0x0)
18015c90:	c7c64906 	rotli      	r6, r6, 30
18015c94:	dd632000 	st.w      	r11, (r3, 0x0)
18015c98:	9873      	ld.w      	r3, (r14, 0x4c)
18015c9a:	614c      	addu      	r5, r3
18015c9c:	9860      	ld.w      	r3, (r14, 0x0)
18015c9e:	b3a1      	st.w      	r5, (r3, 0x4)
18015ca0:	9861      	ld.w      	r3, (r14, 0x4)
18015ca2:	618c      	addu      	r6, r3
18015ca4:	9860      	ld.w      	r3, (r14, 0x0)
18015ca6:	b3c2      	st.w      	r6, (r3, 0x8)
18015ca8:	9872      	ld.w      	r3, (r14, 0x48)
18015caa:	604c      	addu      	r1, r3
18015cac:	9860      	ld.w      	r3, (r14, 0x0)
18015cae:	b323      	st.w      	r1, (r3, 0xc)
18015cb0:	9874      	ld.w      	r3, (r14, 0x50)
18015cb2:	624c      	addu      	r9, r3
18015cb4:	9860      	ld.w      	r3, (r14, 0x0)
18015cb6:	dd232004 	st.w      	r9, (r3, 0x10)
18015cba:	1505      	addi      	r14, r14, 148
18015cbc:	1498      	pop      	r4-r11, r15
18015cbe:	0000      	.short	0x0000
18015cc0:	5a827999 	.long	0x5a827999
18015cc4:	6ed9eba1 	.long	0x6ed9eba1
18015cc8:	8f1bbcdc 	.long	0x8f1bbcdc
18015ccc:	ca62c1d6 	.long	0xca62c1d6

18015cd0 <SHA1Init>:
18015cd0:	1067      	lrw      	r3, 0x67452301	// 18015cec <SHA1Init+0x1c>
18015cd2:	b060      	st.w      	r3, (r0, 0x0)
18015cd4:	1067      	lrw      	r3, 0xefcdab89	// 18015cf0 <SHA1Init+0x20>
18015cd6:	b061      	st.w      	r3, (r0, 0x4)
18015cd8:	1067      	lrw      	r3, 0x98badcfe	// 18015cf4 <SHA1Init+0x24>
18015cda:	b062      	st.w      	r3, (r0, 0x8)
18015cdc:	1067      	lrw      	r3, 0x10325476	// 18015cf8 <SHA1Init+0x28>
18015cde:	b063      	st.w      	r3, (r0, 0xc)
18015ce0:	1067      	lrw      	r3, 0xc3d2e1f0	// 18015cfc <SHA1Init+0x2c>
18015ce2:	b064      	st.w      	r3, (r0, 0x10)
18015ce4:	3300      	movi      	r3, 0
18015ce6:	b066      	st.w      	r3, (r0, 0x18)
18015ce8:	b065      	st.w      	r3, (r0, 0x14)
18015cea:	783c      	jmp      	r15
18015cec:	67452301 	.long	0x67452301
18015cf0:	efcdab89 	.long	0xefcdab89
18015cf4:	98badcfe 	.long	0x98badcfe
18015cf8:	10325476 	.long	0x10325476
18015cfc:	c3d2e1f0 	.long	0xc3d2e1f0

18015d00 <SHA1Update>:
18015d00:	14d4      	push      	r4-r7, r15
18015d02:	9065      	ld.w      	r3, (r0, 0x14)
18015d04:	6d8b      	mov      	r6, r2
18015d06:	4243      	lsli      	r2, r2, 3
18015d08:	6d03      	mov      	r4, r0
18015d0a:	c4635500 	zext      	r0, r3, 8, 3
18015d0e:	60c8      	addu      	r3, r2
18015d10:	648c      	cmphs      	r3, r2
18015d12:	6dc7      	mov      	r7, r1
18015d14:	b465      	st.w      	r3, (r4, 0x14)
18015d16:	0804      	bt      	0x18015d1e	// 18015d1e <SHA1Update+0x1e>
18015d18:	9466      	ld.w      	r3, (r4, 0x18)
18015d1a:	2300      	addi      	r3, 1
18015d1c:	b466      	st.w      	r3, (r4, 0x18)
18015d1e:	9446      	ld.w      	r2, (r4, 0x18)
18015d20:	4e7d      	lsri      	r3, r6, 29
18015d22:	60c8      	addu      	r3, r2
18015d24:	b466      	st.w      	r3, (r4, 0x18)
18015d26:	5878      	addu      	r3, r0, r6
18015d28:	eb03003f 	cmphsi      	r3, 64
18015d2c:	0c20      	bf      	0x18015d6c	// 18015d6c <SHA1Update+0x6c>
18015d2e:	3540      	movi      	r5, 64
18015d30:	6142      	subu      	r5, r0
18015d32:	201b      	addi      	r0, 28
18015d34:	6c5f      	mov      	r1, r7
18015d36:	6c97      	mov      	r2, r5
18015d38:	6010      	addu      	r0, r4
18015d3a:	e0000091 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
18015d3e:	e424001b 	addi      	r1, r4, 28
18015d42:	6c13      	mov      	r0, r4
18015d44:	e3fff87c 	bsr      	0x18014e3c	// 18014e3c <SHA1Transform>
18015d48:	e465003e 	addi      	r3, r5, 63
18015d4c:	658c      	cmphs      	r3, r6
18015d4e:	0c09      	bf      	0x18015d60	// 18015d60 <SHA1Update+0x60>
18015d50:	3000      	movi      	r0, 0
18015d52:	201b      	addi      	r0, 28
18015d54:	5e55      	subu      	r2, r6, r5
18015d56:	5f34      	addu      	r1, r7, r5
18015d58:	6010      	addu      	r0, r4
18015d5a:	e0000081 	bsr      	0x18015e5c	// 18015e5c <sha1_vector+0x44>
18015d5e:	1494      	pop      	r4-r7, r15
18015d60:	5f34      	addu      	r1, r7, r5
18015d62:	6c13      	mov      	r0, r4
18015d64:	e3fff86c 	bsr      	0x18014e3c	// 18014e3c <SHA1Transform>
18015d68:	253f      	addi      	r5, 64
18015d6a:	07ef      	br      	0x18015d48	// 18015d48 <SHA1Update+0x48>
18015d6c:	3500      	movi      	r5, 0
18015d6e:	07f2      	br      	0x18015d52	// 18015d52 <SHA1Update+0x52>

18015d70 <SHA1Final>:
18015d70:	14d3      	push      	r4-r6, r15
18015d72:	1422      	subi      	r14, r14, 8
18015d74:	6d83      	mov      	r6, r0
18015d76:	6d07      	mov      	r4, r1
18015d78:	3300      	movi      	r3, 0
18015d7a:	3b03      	cmphsi      	r3, 4
18015d7c:	6443      	mvcv      	r1
18015d7e:	c4632482 	nor      	r2, r3, r3
18015d82:	2104      	addi      	r1, 5
18015d84:	e4422003 	andi      	r2, r2, 3
18015d88:	4243      	lsli      	r2, r2, 3
18015d8a:	d0240881 	ldr.w      	r1, (r4, r1 << 2)
18015d8e:	c4414042 	lsr      	r2, r1, r2
18015d92:	d5c30022 	str.b      	r2, (r3, r14 << 0)
18015d96:	2300      	addi      	r3, 1
18015d98:	3b48      	cmpnei      	r3, 8
18015d9a:	0bf0      	bt      	0x18015d7a	// 18015d7a <SHA1Final+0xa>
18015d9c:	3201      	movi      	r2, 1
18015d9e:	103d      	lrw      	r1, 0x18018bfb	// 18015e10 <SHA1Final+0xa0>
18015da0:	6c13      	mov      	r0, r4
18015da2:	e3ffffaf 	bsr      	0x18015d00	// 18015d00 <SHA1Update>
18015da6:	10bc      	lrw      	r5, 0x18015f1c	// 18015e14 <SHA1Final+0xa4>
18015da8:	9465      	ld.w      	r3, (r4, 0x14)
18015daa:	e46321f8 	andi      	r3, r3, 504
18015dae:	eb4301c0 	cmpnei      	r3, 448
18015db2:	0829      	bt      	0x18015e04	// 18015e04 <SHA1Final+0x94>
18015db4:	3208      	movi      	r2, 8
18015db6:	6c7b      	mov      	r1, r14
18015db8:	6c13      	mov      	r0, r4
18015dba:	e3ffffa3 	bsr      	0x18015d00	// 18015d00 <SHA1Update>
18015dbe:	3500      	movi      	r5, 0
18015dc0:	c4a52483 	nor      	r3, r5, r5
18015dc4:	4d42      	lsri      	r2, r5, 2
18015dc6:	e4632003 	andi      	r3, r3, 3
18015dca:	d0440882 	ldr.w      	r2, (r4, r2 << 2)
18015dce:	4363      	lsli      	r3, r3, 3
18015dd0:	c4624043 	lsr      	r3, r2, r3
18015dd4:	d4a60023 	str.b      	r3, (r6, r5 << 0)
18015dd8:	2500      	addi      	r5, 1
18015dda:	3d54      	cmpnei      	r5, 20
18015ddc:	0bf2      	bt      	0x18015dc0	// 18015dc0 <SHA1Final+0x50>
18015dde:	3240      	movi      	r2, 64
18015de0:	3100      	movi      	r1, 0
18015de2:	e404001b 	addi      	r0, r4, 28
18015de6:	e0000041 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
18015dea:	6c97      	mov      	r2, r5
18015dec:	3100      	movi      	r1, 0
18015dee:	6c13      	mov      	r0, r4
18015df0:	e000003c 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
18015df4:	3208      	movi      	r2, 8
18015df6:	3100      	movi      	r1, 0
18015df8:	e4040013 	addi      	r0, r4, 20
18015dfc:	e0000036 	bsr      	0x18015e68	// 18015e68 <sha1_vector+0x50>
18015e00:	1402      	addi      	r14, r14, 8
18015e02:	1493      	pop      	r4-r6, r15
18015e04:	3201      	movi      	r2, 1
18015e06:	6c57      	mov      	r1, r5
18015e08:	6c13      	mov      	r0, r4
18015e0a:	e3ffff7b 	bsr      	0x18015d00	// 18015d00 <SHA1Update>
18015e0e:	07cd      	br      	0x18015da8	// 18015da8 <SHA1Final+0x38>
18015e10:	18018bfb 	.long	0x18018bfb
18015e14:	18015f1c 	.long	0x18015f1c

18015e18 <sha1_vector>:
18015e18:	14d5      	push      	r4-r8, r15
18015e1a:	1437      	subi      	r14, r14, 92
18015e1c:	6d83      	mov      	r6, r0
18015e1e:	6c3b      	mov      	r0, r14
18015e20:	6dc7      	mov      	r7, r1
18015e22:	6e0b      	mov      	r8, r2
18015e24:	6d4f      	mov      	r5, r3
18015e26:	3400      	movi      	r4, 0
18015e28:	e3ffff54 	bsr      	0x18015cd0	// 18015cd0 <SHA1Init>
18015e2c:	6592      	cmpne      	r4, r6
18015e2e:	0808      	bt      	0x18015e3e	// 18015e3e <sha1_vector+0x26>
18015e30:	6c17      	mov      	r0, r5
18015e32:	6c7b      	mov      	r1, r14
18015e34:	e3ffff9e 	bsr      	0x18015d70	// 18015d70 <SHA1Final>
18015e38:	3000      	movi      	r0, 0
18015e3a:	1417      	addi      	r14, r14, 92
18015e3c:	1495      	pop      	r4-r8, r15
18015e3e:	d0880882 	ldr.w      	r2, (r8, r4 << 2)
18015e42:	d0870881 	ldr.w      	r1, (r7, r4 << 2)
18015e46:	6c3b      	mov      	r0, r14
18015e48:	e3ffff5c 	bsr      	0x18015d00	// 18015d00 <SHA1Update>
18015e4c:	2400      	addi      	r4, 1
18015e4e:	07ef      	br      	0x18015e2c	// 18015e2c <sha1_vector+0x14>
18015e50:	ea8d0002 	lrw      	r13, 0x20000fd8	// 18015e58 <sha1_vector+0x40>
18015e54:	7834      	jmp      	r13
18015e56:	6c03      	mov      	r0, r0
18015e58:	0fd8      	bf      	0x18015e08	// 18015e08 <SHA1Final+0x98>
18015e5a:	2000      	addi      	r0, 1
18015e5c:	ea8d0002 	lrw      	r13, 0x624	// 18015e64 <sha1_vector+0x4c>
18015e60:	7834      	jmp      	r13
18015e62:	6c03      	mov      	r0, r0
18015e64:	0624      	br      	0x18015aac	// 18015aac <SHA1Transform+0xc70>
18015e66:	0000      	bkpt
18015e68:	ea8d0002 	lrw      	r13, 0x584	// 18015e70 <sha1_vector+0x58>
18015e6c:	7834      	jmp      	r13
18015e6e:	6c03      	mov      	r0, r0
18015e70:	0584      	br      	0x18016178	// 18016178 <CSWTCH.1+0x144>
18015e72:	0000      	bkpt
18015e74:	ea8d0002 	lrw      	r13, 0x20000e34	// 18015e7c <sha1_vector+0x64>
18015e78:	7834      	jmp      	r13
18015e7a:	6c03      	mov      	r0, r0
18015e7c:	0e34      	bf      	0x18015ae4	// 18015ae4 <SHA1Transform+0xca8>
18015e7e:	2000      	addi      	r0, 1
18015e80:	ea8d0002 	lrw      	r13, 0x2000118c	// 18015e88 <sha1_vector+0x70>
18015e84:	7834      	jmp      	r13
18015e86:	6c03      	mov      	r0, r0
18015e88:	118c      	lrw      	r4, [pc, 176]	// from address pool at 0x18015f380xb0	// 4 <__data0_end__+0x4>
18015e8a:	2000      	addi      	r0, 1
18015e8c:	ea8d0002 	lrw      	r13, 0x20000cf8	// 18015e94 <sha1_vector+0x7c>
18015e90:	7834      	jmp      	r13
18015e92:	6c03      	mov      	r0, r0
18015e94:	0cf8      	bf      	0x18016084	// 18016084 <CSWTCH.1+0x50>
18015e96:	2000      	addi      	r0, 1
18015e98:	ea8d0002 	lrw      	r13, 0x20000ce0	// 18015ea0 <sha1_vector+0x88>
18015e9c:	7834      	jmp      	r13
18015e9e:	6c03      	mov      	r0, r0
18015ea0:	0ce0      	bf      	0x18016060	// 18016060 <CSWTCH.1+0x2c>
18015ea2:	2000      	addi      	r0, 1
18015ea4:	ea8d0002 	lrw      	r13, 0x200010e4	// 18015eac <sha1_vector+0x94>
18015ea8:	7834      	jmp      	r13
18015eaa:	6c03      	mov      	r0, r0
18015eac:	10e4      	lrw      	r7, 0x2ea8d	// 18015ebc <sha1_vector+0xa4>
18015eae:	2000      	addi      	r0, 1
18015eb0:	ea8d0002 	lrw      	r13, 0x20000ecc	// 18015eb8 <sha1_vector+0xa0>
18015eb4:	7834      	jmp      	r13
18015eb6:	6c03      	mov      	r0, r0
18015eb8:	0ecc      	bf      	0x18015c50	// 18015c50 <SHA1Transform+0xe14>
18015eba:	2000      	addi      	r0, 1
18015ebc:	ea8d0002 	lrw      	r13, 0x20001254	// 18015ec4 <sha1_vector+0xac>
18015ec0:	7834      	jmp      	r13
18015ec2:	6c03      	mov      	r0, r0
18015ec4:	1254      	lrw      	r2, [pc, 336]	// from address pool at 0x180160140x150	// 2 <__data0_end__+0x2>
18015ec6:	2000      	addi      	r0, 1
	...

Disassembly of section .ram_func:

18015ef0 <LMAC_IRQHandler>:
__attribute__((section(".ram_func"))) SYSTEM_IRQ_HANDLE_FUNC(LMAC_IRQHandler, LMAC_IRQn)
18015ef0:	1460      	nie
18015ef2:	1462      	ipush
18015ef4:	14d0      	push      	r15
18015ef6:	e3ffb7a5 	bsr      	0x1800ce40	// 1800ce40 <csi_kernel_intrpt_enter>
18015efa:	1048      	lrw      	r2, 0x2000195c	// 18015f18 <__etext+0x28>
18015efc:	d862202b 	ld.w      	r3, (r2, 0xac)
18015f00:	e9030005 	bez      	r3, 0x18015f0a	// 18015f0a <LMAC_IRQHandler+0x1a>
18015f04:	d802202a 	ld.w      	r0, (r2, 0xa8)
18015f08:	7bcd      	jsr      	r3
18015f0a:	e3ffb7a5 	bsr      	0x1800ce54	// 1800ce54 <csi_kernel_intrpt_exit>
18015f0e:	d9ee2000 	ld.w      	r15, (r14, 0x0)
18015f12:	1401      	addi      	r14, r14, 4
18015f14:	1463      	ipop
18015f16:	1461      	nir
18015f18:	2000195c 	.long	0x2000195c

Disassembly of section .data:

20000000 <__data_start__>:
	...
2000000c:	a000      	st.b      	r0, (r0, 0x0)
2000000e:	4001      	lsli      	r0, r0, 1
	...
20000018:	001c      	lrw      	r0, 0x0	// 200003a4 <gpioe+0x30>
	...

20000050 <auadc>:
	...
2000005c:	8000 4000 0000 0000 0060 2000 0000 0000     ...@....`.. ....
2000006c:	0000 0000 0010 0001                         ........

20000074 <audac>:
	...
20000080:	8000 4000 0000 0000 0060 2000 0000 0000     ...@....`.. ....
20000090:	0000 0000 0011 0002                         ........

20000098 <cqspi>:
20000098:	0000 4000 0005 0000 0000 0000 0000 0000     ...@............
200000a8:	0000 0000                                   ....

200000ac <crc32_module>:
	...
200000b8:	7000 4001 0000 0000 0000 0000 0000 0000     .p.@............
	...
200000d4:	001b 0000 0000 0000 0000 0000               ............

200000e0 <dvp>:
	...
200000ec:	5040 4000 0000 0000 0000 0000 0027 0000     @P.@........'...
200000fc:	0000 0000                                   ....

20000100 <ethernet_phy0>:
	...
2000010c:	0001 0000 0b88 2000 0000 0000 0000 0000     ....... ........
	...

20000148 <flash0>:
	...
20000154:	07c0 2000 1b00 00b7 0000 0000 0001 0000     ... ............
20000164:	0000 0000 0000 0020 1000 0000 1000 0000     ...... .........
20000174:	0000 0001 0000 0000 0000 0000 0004 0000     ................
	...

20000194 <gpioa>:
	...
200001a0:	0a00 4002 0025 0000 0000 0000 0000 0000     ...@%...........
	...
2000022c:	000f 0000 0044 0000                         ....D...

20000234 <gpiob>:
	...
20000240:	0b00 4002 0025 0000 0000 0000 0000 0000     ...@%...........
	...
200002c8:	0010 0000 001f 0000 0045 0000               ........E...

200002d4 <gpioc>:
	...
200002e0:	0c00 4002 0025 0000 0000 0000 0000 0000     ...@%...........
	...
20000368:	0020 0000 002f 0000 0046 0000                .../...F...

20000374 <gpioe>:
	...
20000380:	0e00 4002 0025 0000 0000 0000 0000 0000     ...@%...........
	...
20000408:	0030 0000 003f 0000 0047 0000               0...?...G...

20000414 <i2s0>:
	...
20000420:	80c0 4000 0000 0000 0000 0000 0023 0000     ...@........#...

20000430 <i2s1>:
	...
2000043c:	80e0 4000 0000 0000 0000 0000 0024 0000     ...@........$...

2000044c <iic2>:
	...
20000458:	4600 4000 0000 0000 0000 0000 0008 0000     .F.@............
	...

2000047c <jpg0>:
	...
20000488:	5100 4000 5180 4000 0028 0000 0000 0000     .Q.@.Q.@(.......
	...

200004a0 <jpg1>:
	...
200004ac:	5200 4000 5280 4000 0028 0000 0000 0000     .R.@.R.@(.......
	...

200004c4 <lcdc>:
	...
200004d0:	7000 4000 0000 0000 0000 0000 0004 0000     .p.@............
200004e0:	0000 0000                                   ....

200004e4 <mem_dma>:
	...
200004f0:	1200 4002 0000 0000 0000 0000               ...@........

200004fc <of>:
	...
20000508:	5020 4000 0000 0000 0000 0000 0000 0000      P.@............

20000518 <pdm>:
	...
20000524:	8110 4000 0000 0000 0000 0000 002d 0000     ...@........-...

20000534 <prc>:
	...
20000540:	5000 4000 0000 0000 0000 0000 002b 0000     .P.@........+...
20000550:	0000 0000                                   ....

20000554 <pwm>:
	...
20000560:	07fc 2000 0824 2000 084c 2000 0720 2000     ... $.. L..  .. 
	...

20000580 <scale1>:
	...
2000058c:	7100 4000 0000 0000 0000 0000 000e 0000     .q.@............
2000059c:	0000 0000                                   ....

200005a0 <scale2>:
	...
200005ac:	71a0 4000 0000 0000 0000 0000 002f 0000     .q.@......../...
200005bc:	0000 0000                                   ....

200005c0 <scale3>:
	...
200005cc:	7200 4000 0000 0000 0000 0000 0033 0000     .r.@........3...
200005dc:	0000 0000                                   ....

200005e0 <sdh>:
	...
20000710:	1400 4002 0000 0000 0014 0000 0000 0000     ...@............

20000720 <simtimer0>:
	...
2000072c:	5b00 4001 0000 0000 0000 0000 0000 0000     .[.@............
2000073c:	0000 0000 002c 0000 0000 0000               ....,.......

20000748 <spi0>:
	...
20000754:	4400 4000 0006 0000 0000 0000 0000 0000     .D.@............
	...

20000784 <spi1>:
	...
20000790:	4500 4000 0007 0000 0000 0000 0000 0000     .E.@............
	...

200007c0 <spi7>:
	...
200007cc:	0000 4000 0000 0000                         ...@....

200007d4 <sysaes>:
	...
200007e0:	2000 4001 0000 0000 0000 0000 0000 0000     . .@............
200007f0:	0000 0000 001a 0000 0000 0000               ............

200007fc <timer0>:
	...
20000808:	5100 4001 0000 0000 0000 0000 0000 0000     .Q.@............
20000818:	0000 0000 000a 0000 0000 0000               ............

20000824 <timer1>:
	...
20000830:	5200 4001 0000 0000 0000 0000 0000 0000     .R.@............
20000840:	0000 0000 000b 0000 0000 0000               ............

2000084c <timer2>:
	...
20000858:	5300 4001 0000 0000 0000 0000 0000 0000     .S.@............
20000868:	0000 0000 000c 0000 0000 0000               ............

20000874 <uart0>:
	...
20000880:	4000 4000 0000 0000 0000 0000 0002 0000     .@.@............

20000890 <uart1>:
	...
2000089c:	4100 4000 0000 0000 0000 0000 0003 0000     .A.@............

200008ac <uart4>:
	...
200008b8:	4b70 4000 0000 0000 0000 0000 0000 0000     pK.@............
	...
200008e8:	0042 0032 0000 0000                         B.2.....

200008f0 <usb20_dev>:
	...
200008fc:	0000 400f 20bc 2000 0000 0000 0000 0000     ...@. . ........
	...
20000968:	0001 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000a44 <vpp>:
	...
20000a50:	5080 4000 0000 0000 0000 0000 002a 0000     .P.@........*...
20000a60:	0000 0000                                   ....

20000a64 <sys_cfgs>:
20000a64:	0000 0000 0000 0103 0000 0200 0000 0000     ................
	...
20000ae0:	012c 0064 0000 0001 0004 0000 0003 0000     ,.d.............
20000af0:	a8c0 0101 ffff 00ff a8c0 0101 a8c0 6401     ...............d
20000b00:	a8c0 fe01 0e10 0000 0000 0000 0000 0000     ................
	...

20000b28 <custom_psram_heap>:
20000b28:	7739 1801 0000 0000 0000 0000 0000 0000     9w..............
	...

20000b58 <custom_sram_heap>:
20000b58:	7741 1801 0000 0000 0000 0000 0000 0000     Aw..............
	...

20000b88 <ip101g_driver>:
20000b88:	02cf 0000 f728 1800 f474 1800 f56c 1800     ....(...t...l...

20000b98 <sysctrl_dma2ahb_burst_limit>:
20000b98:	00d8 0000                                   ....

20000b9c <set_buf_len0.5988>:
20000b9c:	0101                                             .

20000b9d <set_buf_len1.5989>:
20000b9d:	0301                                             .

20000b9e <g_addr_width>:
20000b9e:	0003                                        ..

20000ba0 <sdk_version>:
20000ba0:	0107 0205                                   ....

20000ba4 <svn_version>:
20000ba4:	7954 0000                                   Ty..

20000ba8 <ll_sysclk_set_but_qspi_chaos_do>:
20000ba8:	14d6      	push      	r4-r9, r15
20000baa:	6f43      	mov      	r13, r0
20000bac:	9260      	ld.w      	r3, (r2, 0x0)
20000bae:	d9822001 	ld.w      	r12, (r2, 0x4)
20000bb2:	c0006025 	mfcr      	r5, cr<0, 0>
20000bb6:	c0807020 	psrclr      	ie
20000bba:	1209      	lrw      	r0, 0xe000f000	// 20000cdc <ll_sysclk_set_but_qspi_chaos_do+0x134>
20000bbc:	e4a52040 	andi      	r5, r5, 64
20000bc0:	9081      	ld.w      	r4, (r0, 0x4)
20000bc2:	e4842001 	andi      	r4, r4, 1
20000bc6:	e904000b 	bez      	r4, 0x20000bdc	// 20000bdc <ll_sysclk_set_but_qspi_chaos_do+0x34>
20000bca:	3605      	movi      	r6, 5
20000bcc:	b0c1      	st.w      	r6, (r0, 0x4)
20000bce:	c0000420 	sync
20000bd2:	90c0      	ld.w      	r6, (r0, 0x0)
20000bd4:	3e80      	bclri      	r6, 0
20000bd6:	b0c0      	st.w      	r6, (r0, 0x0)
20000bd8:	3601      	movi      	r6, 1
20000bda:	b0c1      	st.w      	r6, (r0, 0x4)
20000bdc:	9200      	ld.w      	r0, (r2, 0x0)
20000bde:	e980003d 	blz      	r0, 0x20000c58	// 20000c58 <ll_sysclk_set_but_qspi_chaos_do+0xb0>
20000be2:	9261      	ld.w      	r3, (r2, 0x4)
20000be4:	e9a30029 	bhsz      	r3, 0x20000c36	// 20000c36 <ll_sysclk_set_but_qspi_chaos_do+0x8e>
20000be8:	ea021000 	movi      	r2, 4096
20000bec:	3abe      	bseti      	r2, 30
20000bee:	9260      	ld.w      	r3, (r2, 0x0)
20000bf0:	e9a3ffff 	bhsz      	r3, 0x20000bee	// 20000bee <ll_sysclk_set_but_qspi_chaos_do+0x46>
20000bf4:	ea234002 	movih      	r3, 16386
20000bf8:	30e1      	movi      	r0, 225
20000bfa:	9355      	ld.w      	r2, (r3, 0x54)
20000bfc:	3a97      	bclri      	r2, 23
20000bfe:	b355      	st.w      	r2, (r3, 0x54)
20000c00:	4018      	lsli      	r0, r0, 24
20000c02:	9355      	ld.w      	r2, (r3, 0x54)
20000c04:	2800      	subi      	r0, 1
20000c06:	6808      	and      	r0, r2
20000c08:	c70c4822 	lsli      	r2, r12, 24
20000c0c:	6c80      	or      	r2, r0
20000c0e:	30ff      	movi      	r0, 255
20000c10:	c5ac482c 	lsli      	r12, r12, 13
20000c14:	4015      	lsli      	r0, r0, 21
20000c16:	b355      	st.w      	r2, (r3, 0x54)
20000c18:	6b00      	and      	r12, r0
20000c1a:	3a95      	bclri      	r2, 21
20000c1c:	3a96      	bclri      	r2, 22
20000c1e:	6f08      	or      	r12, r2
20000c20:	dd832015 	st.w      	r12, (r3, 0x54)
20000c24:	9355      	ld.w      	r2, (r3, 0x54)
20000c26:	3ab7      	bseti      	r2, 23
20000c28:	b355      	st.w      	r2, (r3, 0x54)
20000c2a:	ea021000 	movi      	r2, 4096
20000c2e:	3abe      	bseti      	r2, 30
20000c30:	9260      	ld.w      	r3, (r2, 0x0)
20000c32:	e9a3ffff 	bhsz      	r3, 0x20000c30	// 20000c30 <ll_sysclk_set_but_qspi_chaos_do+0x88>
20000c36:	6c07      	mov      	r0, r1
20000c38:	7bf5      	jsr      	r13
20000c3a:	6c03      	mov      	r0, r0
20000c3c:	6c03      	mov      	r0, r0
20000c3e:	6c03      	mov      	r0, r0
20000c40:	6c03      	mov      	r0, r0
20000c42:	6c03      	mov      	r0, r0
20000c44:	6c03      	mov      	r0, r0
20000c46:	6c03      	mov      	r0, r0
20000c48:	6c03      	mov      	r0, r0
20000c4a:	e9240042 	bnez      	r4, 0x20000cce	// 20000cce <ll_sysclk_set_but_qspi_chaos_do+0x126>
20000c4e:	e9050004 	bez      	r5, 0x20000c56	// 20000c56 <ll_sysclk_set_but_qspi_chaos_do+0xae>
20000c52:	c0807420 	psrset      	ie
20000c56:	1496      	pop      	r4-r9, r15
20000c58:	3080      	movi      	r0, 128
20000c5a:	4017      	lsli      	r0, r0, 23
20000c5c:	90c0      	ld.w      	r6, (r0, 0x0)
20000c5e:	e9a6ffff 	bhsz      	r6, 0x20000c5c	// 20000c5c <ll_sysclk_set_but_qspi_chaos_do+0xb4>
20000c62:	ea284002 	movih      	r8, 16386
20000c66:	ea0900e0 	movi      	r9, 224
20000c6a:	4bc5      	lsri      	r6, r3, 5
20000c6c:	c4c94829 	lsli      	r9, r9, 6
20000c70:	d8e82014 	ld.w      	r7, (r8, 0x50)
20000c74:	69a4      	and      	r6, r9
20000c76:	ea093800 	movi      	r9, 14336
20000c7a:	6e66      	nor      	r9, r9
20000c7c:	69e4      	and      	r7, r9
20000c7e:	6d9c      	or      	r6, r7
20000c80:	dcc82014 	st.w      	r6, (r8, 0x50)
20000c84:	ea0800f0 	movi      	r8, 240
20000c88:	43cb      	lsli      	r6, r3, 11
20000c8a:	c5e84828 	lsli      	r8, r8, 15
20000c8e:	69a0      	and      	r6, r8
20000c90:	ea28ff88 	movih      	r8, 65416
20000c94:	90e0      	ld.w      	r7, (r0, 0x0)
20000c96:	e5081000 	subi      	r8, r8, 1
20000c9a:	69e0      	and      	r7, r8
20000c9c:	6d9c      	or      	r6, r7
20000c9e:	b0c0      	st.w      	r6, (r0, 0x0)
20000ca0:	37f0      	movi      	r7, 240
20000ca2:	ea264000 	movih      	r6, 16384
20000ca6:	267f      	addi      	r6, 128
20000ca8:	47e9      	lsli      	r7, r7, 9
20000caa:	436d      	lsli      	r3, r3, 13
20000cac:	961a      	ld.w      	r0, (r6, 0x68)
20000cae:	68dc      	and      	r3, r7
20000cb0:	c7605027 	bmaski      	r7, 28
20000cb4:	c6274907 	rotli      	r7, r7, 17
20000cb8:	681c      	and      	r0, r7
20000cba:	ec000080 	ori      	r0, r0, 128
20000cbe:	6cc0      	or      	r3, r0
20000cc0:	b67a      	st.w      	r3, (r6, 0x68)
20000cc2:	3380      	movi      	r3, 128
20000cc4:	4377      	lsli      	r3, r3, 23
20000cc6:	9300      	ld.w      	r0, (r3, 0x0)
20000cc8:	e9a0ffff 	bhsz      	r0, 0x20000cc6	// 20000cc6 <ll_sysclk_set_but_qspi_chaos_do+0x11e>
20000ccc:	078b      	br      	0x20000be2	// 20000be2 <ll_sysclk_set_but_qspi_chaos_do+0x3a>
20000cce:	1064      	lrw      	r3, 0xe000f000	// 20000cdc <ll_sysclk_set_but_qspi_chaos_do+0x134>
20000cd0:	3201      	movi      	r2, 1
20000cd2:	b341      	st.w      	r2, (r3, 0x4)
20000cd4:	3215      	movi      	r2, 21
20000cd6:	b340      	st.w      	r2, (r3, 0x0)
20000cd8:	07bb      	br      	0x20000c4e	// 20000c4e <ll_sysclk_set_but_qspi_chaos_do+0xa6>
20000cda:	0000      	.short	0x0000
20000cdc:	e000f000 	.long	0xe000f000

20000ce0 <ll_clock_set_sys_clk_src_do>:
20000ce0:	ea224002 	movih      	r2, 16386
20000ce4:	3100      	movi      	r1, 0
20000ce6:	9271      	ld.w      	r3, (r2, 0x44)
20000ce8:	2907      	subi      	r1, 8
20000cea:	68c4      	and      	r3, r1
20000cec:	e4002007 	andi      	r0, r0, 7
20000cf0:	6cc0      	or      	r3, r0
20000cf2:	b271      	st.w      	r3, (r2, 0x44)
20000cf4:	783c      	jmp      	r15
	...

20000cf8 <ll_clock_set_sys_clk_div_do>:
20000cf8:	ea224002 	movih      	r2, 16386
20000cfc:	3100      	movi      	r1, 0
20000cfe:	9272      	ld.w      	r3, (r2, 0x48)
20000d00:	293f      	subi      	r1, 64
20000d02:	2800      	subi      	r0, 1
20000d04:	68c4      	and      	r3, r1
20000d06:	e400203f 	andi      	r0, r0, 63
20000d0a:	6c0c      	or      	r0, r3
20000d0c:	b212      	st.w      	r0, (r2, 0x48)
20000d0e:	783c      	jmp      	r15

20000d10 <ll_qspi_is_idle_81X>:
20000d10:	9000      	ld.w      	r0, (r0, 0x0)
20000d12:	481f      	lsri      	r0, r0, 31
20000d14:	783c      	jmp      	r15
20000d16:	0000      	bkpt
20000d18:	14d5      	push      	r4-r8, r15
20000d1a:	1424      	subi      	r14, r14, 16
20000d1c:	ea224002 	movih      	r2, 16386
20000d20:	33c0      	movi      	r3, 192
20000d22:	9257      	ld.w      	r2, (r2, 0x5c)
20000d24:	4361      	lsli      	r3, r3, 1
20000d26:	4a50      	lsri      	r2, r2, 16
20000d28:	6d83      	mov      	r6, r0
20000d2a:	6e07      	mov      	r8, r1
20000d2c:	938c      	ld.w      	r4, (r3, 0x30)
20000d2e:	e9020075 	bez      	r2, 0x20000e18	// 20000e18 <ll_qspi_is_idle_81X+0x108>
20000d32:	93e3      	ld.w      	r7, (r3, 0xc)
20000d34:	c0006025 	mfcr      	r5, cr<0, 0>
20000d38:	c0807020 	psrclr      	ie
20000d3c:	ea023c00 	movi      	r2, 15360
20000d40:	6c8a      	nor      	r2, r2
20000d42:	9660      	ld.w      	r3, (r6, 0x0)
20000d44:	68c8      	and      	r3, r2
20000d46:	ec633800 	ori      	r3, r3, 14336
20000d4a:	b660      	st.w      	r3, (r6, 0x0)
20000d4c:	3200      	movi      	r2, 0
20000d4e:	d86e0007 	ld.b      	r3, (r14, 0x7)
20000d52:	c4625c04 	ins      	r3, r2, 4, 4
20000d56:	dc6e0007 	st.b      	r3, (r14, 0x7)
20000d5a:	3305      	movi      	r3, 5
20000d5c:	dc6e0005 	st.b      	r3, (r14, 0x5)
20000d60:	3201      	movi      	r2, 1
20000d62:	d86e0004 	ld.b      	r3, (r14, 0x4)
20000d66:	c4625c00 	ins      	r3, r2, 0, 0
20000d6a:	e46320f1 	andi      	r3, r3, 241
20000d6e:	3202      	movi      	r2, 2
20000d70:	c4625c64 	ins      	r3, r2, 7, 4
20000d74:	dc6e0004 	st.b      	r3, (r14, 0x4)
20000d78:	1801      	addi      	r0, r14, 4
20000d7a:	ddce2003 	st.w      	r14, (r14, 0xc)
20000d7e:	7bd1      	jsr      	r4
20000d80:	3335      	movi      	r3, 53
20000d82:	dc6e0005 	st.b      	r3, (r14, 0x5)
20000d86:	e46e0001 	addi      	r3, r14, 2
20000d8a:	b863      	st.w      	r3, (r14, 0xc)
20000d8c:	1801      	addi      	r0, r14, 4
20000d8e:	7bd1      	jsr      	r4
20000d90:	d86e0000 	ld.b      	r3, (r14, 0x0)
20000d94:	e4a52040 	andi      	r5, r5, 64
20000d98:	e443201c 	andi      	r2, r3, 28
20000d9c:	e9080044 	bez      	r8, 0x20000e24	// 20000e24 <ll_qspi_is_idle_81X+0x114>
20000da0:	e902003e 	bez      	r2, 0x20000e1c	// 20000e1c <ll_qspi_is_idle_81X+0x10c>
20000da4:	b862      	st.w      	r3, (r14, 0x8)
20000da6:	9842      	ld.w      	r2, (r14, 0x8)
20000da8:	648e      	cmpne      	r3, r2
20000daa:	0c30      	bf      	0x20000e0a	// 20000e0a <ll_qspi_is_idle_81X+0xfa>
20000dac:	3350      	movi      	r3, 80
20000dae:	dc6e0005 	st.b      	r3, (r14, 0x5)
20000db2:	d86e0004 	ld.b      	r3, (r14, 0x4)
20000db6:	3200      	movi      	r2, 0
20000db8:	e46320f1 	andi      	r3, r3, 241
20000dbc:	c4625c64 	ins      	r3, r2, 7, 4
20000dc0:	dc6e0004 	st.b      	r3, (r14, 0x4)
20000dc4:	1801      	addi      	r0, r14, 4
20000dc6:	7bd1      	jsr      	r4
20000dc8:	3301      	movi      	r3, 1
20000dca:	3201      	movi      	r2, 1
20000dcc:	dc6e0005 	st.b      	r3, (r14, 0x5)
20000dd0:	d86e0004 	ld.b      	r3, (r14, 0x4)
20000dd4:	c4625c41 	ins      	r3, r2, 3, 1
20000dd8:	d84e0002 	ld.b      	r2, (r14, 0x2)
20000ddc:	eb4200ff 	cmpnei      	r2, 255
20000de0:	dc6e0004 	st.b      	r3, (r14, 0x4)
20000de4:	0c0c      	bf      	0x20000dfc	// 20000dfc <ll_qspi_is_idle_81X+0xec>
20000de6:	d86e0004 	ld.b      	r3, (r14, 0x4)
20000dea:	3102      	movi      	r1, 2
20000dec:	c4615c41 	ins      	r3, r1, 3, 1
20000df0:	dc6e0004 	st.b      	r3, (r14, 0x4)
20000df4:	9862      	ld.w      	r3, (r14, 0x8)
20000df6:	4368      	lsli      	r3, r3, 8
20000df8:	6cc8      	or      	r3, r2
20000dfa:	b862      	st.w      	r3, (r14, 0x8)
20000dfc:	1801      	addi      	r0, r14, 4
20000dfe:	7bd1      	jsr      	r4
20000e00:	3200      	movi      	r2, 0
20000e02:	2a00      	subi      	r2, 1
20000e04:	3100      	movi      	r1, 0
20000e06:	6c1b      	mov      	r0, r6
20000e08:	7bdd      	jsr      	r7
20000e0a:	e9050004 	bez      	r5, 0x20000e12	// 20000e12 <ll_qspi_is_idle_81X+0x102>
20000e0e:	c0807420 	psrset      	ie
20000e12:	3000      	movi      	r0, 0
20000e14:	1404      	addi      	r14, r14, 16
20000e16:	1495      	pop      	r4-r8, r15
20000e18:	10e6      	lrw      	r7, 0x6120	// 20000e30 <ll_qspi_is_idle_81X+0x120>
20000e1a:	078d      	br      	0x20000d34	// 20000d34 <ll_qspi_is_idle_81X+0x24>
20000e1c:	ec43001c 	ori      	r2, r3, 28
20000e20:	b842      	st.w      	r2, (r14, 0x8)
20000e22:	07c2      	br      	0x20000da6	// 20000da6 <ll_qspi_is_idle_81X+0x96>
20000e24:	e902ffc0 	bez      	r2, 0x20000da4	// 20000da4 <ll_qspi_is_idle_81X+0x94>
20000e28:	3200      	movi      	r2, 0
20000e2a:	2a1c      	subi      	r2, 29
20000e2c:	688c      	and      	r2, r3
20000e2e:	07f9      	br      	0x20000e20	// 20000e20 <ll_qspi_is_idle_81X+0x110>
20000e30:	00006120 	.long	0x00006120

20000e34 <hg_qspi_xip_read>:
20000e34:	14d8      	push      	r4-r11, r15
20000e36:	6d4f      	mov      	r5, r3
20000e38:	1162      	lrw      	r3, 0x20000098	// 20000ec0 <hg_qspi_xip_read+0x8c>
20000e3a:	6e4b      	mov      	r9, r2
20000e3c:	9380      	ld.w      	r4, (r3, 0x0)
20000e3e:	33c0      	movi      	r3, 192
20000e40:	4361      	lsli      	r3, r3, 1
20000e42:	6dc7      	mov      	r7, r1
20000e44:	9348      	ld.w      	r2, (r3, 0x20)
20000e46:	93c9      	ld.w      	r6, (r3, 0x24)
20000e48:	31c0      	movi      	r1, 192
20000e4a:	107f      	lrw      	r3, 0x20002020	// 20000ec4 <hg_qspi_xip_read+0x90>
20000e4c:	4135      	lsli      	r1, r1, 21
20000e4e:	8360      	ld.b      	r3, (r3, 0x0)
20000e50:	c4200028 	addu      	r8, r0, r1
20000e54:	e923000e 	bnez      	r3, 0x20000e70	// 20000e70 <hg_qspi_xip_read+0x3c>
20000e58:	6c57      	mov      	r1, r5
20000e5a:	6c13      	mov      	r0, r4
20000e5c:	7bc9      	jsr      	r2
20000e5e:	6c63      	mov      	r1, r8
20000e60:	6ca7      	mov      	r2, r9
20000e62:	6c1f      	mov      	r0, r7
20000e64:	e000023e 	bsr      	0x200012e0	// 200012e0 <set_spi_xip_cfg+0x8c>
20000e68:	6c57      	mov      	r1, r5
20000e6a:	6c13      	mov      	r0, r4
20000e6c:	7bd9      	jsr      	r6
20000e6e:	1498      	pop      	r4-r11, r15
20000e70:	ea234002 	movih      	r3, 16386
20000e74:	d9642009 	ld.w      	r11, (r4, 0x24)
20000e78:	d9432062 	ld.w      	r10, (r3, 0x188)
20000e7c:	e98a0007 	blz      	r10, 0x20000e8a	// 20000e8a <hg_qspi_xip_read+0x56>
20000e80:	d8232062 	ld.w      	r1, (r3, 0x188)
20000e84:	39bf      	bseti      	r1, 31
20000e86:	dc232062 	st.w      	r1, (r3, 0x188)
20000e8a:	1070      	lrw      	r3, 0x20002024	// 20000ec8 <hg_qspi_xip_read+0x94>
20000e8c:	6c57      	mov      	r1, r5
20000e8e:	9360      	ld.w      	r3, (r3, 0x0)
20000e90:	b469      	st.w      	r3, (r4, 0x24)
20000e92:	6c13      	mov      	r0, r4
20000e94:	7bc9      	jsr      	r2
20000e96:	6ca7      	mov      	r2, r9
20000e98:	6c63      	mov      	r1, r8
20000e9a:	6c1f      	mov      	r0, r7
20000e9c:	e0000222 	bsr      	0x200012e0	// 200012e0 <set_spi_xip_cfg+0x8c>
20000ea0:	6c57      	mov      	r1, r5
20000ea2:	6c13      	mov      	r0, r4
20000ea4:	7bd9      	jsr      	r6
20000ea6:	dd642009 	st.w      	r11, (r4, 0x24)
20000eaa:	e98affe2 	blz      	r10, 0x20000e6e	// 20000e6e <hg_qspi_xip_read+0x3a>
20000eae:	ea224002 	movih      	r2, 16386
20000eb2:	d8622062 	ld.w      	r3, (r2, 0x188)
20000eb6:	c40357c3 	zext      	r3, r3, 30, 0
20000eba:	dc622062 	st.w      	r3, (r2, 0x188)
20000ebe:	07d8      	br      	0x20000e6e	// 20000e6e <hg_qspi_xip_read+0x3a>
20000ec0:	20000098 	.long	0x20000098
20000ec4:	20002020 	.long	0x20002020
20000ec8:	20002024 	.long	0x20002024

20000ecc <hg_qspi_xip_write>:
20000ecc:	14d8      	push      	r4-r11, r15
20000ece:	1421      	subi      	r14, r14, 4
20000ed0:	6d4f      	mov      	r5, r3
20000ed2:	117f      	lrw      	r3, 0x20000098	// 20000fcc <hg_qspi_xip_write+0x100>
20000ed4:	6e03      	mov      	r8, r0
20000ed6:	9380      	ld.w      	r4, (r3, 0x0)
20000ed8:	33c0      	movi      	r3, 192
20000eda:	4361      	lsli      	r3, r3, 1
20000edc:	6e47      	mov      	r9, r1
20000ede:	d9832008 	ld.w      	r12, (r3, 0x20)
20000ee2:	3100      	movi      	r1, 0
20000ee4:	6c13      	mov      	r0, r4
20000ee6:	dd8e2000 	st.w      	r12, (r14, 0x0)
20000eea:	93e9      	ld.w      	r7, (r3, 0x24)
20000eec:	6e8b      	mov      	r10, r2
20000eee:	e00001db 	bsr      	0x200012a4	// 200012a4 <set_spi_xip_cfg+0x50>
20000ef2:	3100      	movi      	r1, 0
20000ef4:	6c13      	mov      	r0, r4
20000ef6:	e00001ef 	bsr      	0x200012d4	// 200012d4 <set_spi_xip_cfg+0x80>
20000efa:	1176      	lrw      	r3, 0x20002020	// 20000fd0 <hg_qspi_xip_write+0x104>
20000efc:	d98e2000 	ld.w      	r12, (r14, 0x0)
20000f00:	8360      	ld.b      	r3, (r3, 0x0)
20000f02:	e923002a 	bnez      	r3, 0x20000f56	// 20000f56 <hg_qspi_xip_write+0x8a>
20000f06:	6c57      	mov      	r1, r5
20000f08:	6c13      	mov      	r0, r4
20000f0a:	7bf1      	jsr      	r12
20000f0c:	3302      	movi      	r3, 2
20000f0e:	b462      	st.w      	r3, (r4, 0x8)
20000f10:	9462      	ld.w      	r3, (r4, 0x8)
20000f12:	3b42      	cmpnei      	r3, 2
20000f14:	0bfe      	bt      	0x20000f10	// 20000f10 <hg_qspi_xip_write+0x44>
20000f16:	33c0      	movi      	r3, 192
20000f18:	4375      	lsli      	r3, r3, 21
20000f1a:	6cab      	mov      	r2, r10
20000f1c:	6c67      	mov      	r1, r9
20000f1e:	c4680020 	addu      	r0, r8, r3
20000f22:	e00001df 	bsr      	0x200012e0	// 200012e0 <set_spi_xip_cfg+0x8c>
20000f26:	9460      	ld.w      	r3, (r4, 0x0)
20000f28:	e9a3ffff 	bhsz      	r3, 0x20000f26	// 20000f26 <hg_qspi_xip_write+0x5a>
20000f2c:	ea030103 	movi      	r3, 259
20000f30:	b462      	st.w      	r3, (r4, 0x8)
20000f32:	9462      	ld.w      	r3, (r4, 0x8)
20000f34:	eb430103 	cmpnei      	r3, 259
20000f38:	0bfd      	bt      	0x20000f32	// 20000f32 <hg_qspi_xip_write+0x66>
20000f3a:	6c57      	mov      	r1, r5
20000f3c:	6c13      	mov      	r0, r4
20000f3e:	7bdd      	jsr      	r7
20000f40:	3101      	movi      	r1, 1
20000f42:	6c13      	mov      	r0, r4
20000f44:	e00001c8 	bsr      	0x200012d4	// 200012d4 <set_spi_xip_cfg+0x80>
20000f48:	3101      	movi      	r1, 1
20000f4a:	6c13      	mov      	r0, r4
20000f4c:	e00001ac 	bsr      	0x200012a4	// 200012a4 <set_spi_xip_cfg+0x50>
20000f50:	3000      	movi      	r0, 0
20000f52:	1401      	addi      	r14, r14, 4
20000f54:	1498      	pop      	r4-r11, r15
20000f56:	ea234002 	movih      	r3, 16386
20000f5a:	d9642009 	ld.w      	r11, (r4, 0x24)
20000f5e:	d8c32062 	ld.w      	r6, (r3, 0x188)
20000f62:	e9860007 	blz      	r6, 0x20000f70	// 20000f70 <hg_qspi_xip_write+0xa4>
20000f66:	d8432062 	ld.w      	r2, (r3, 0x188)
20000f6a:	3abf      	bseti      	r2, 31
20000f6c:	dc432062 	st.w      	r2, (r3, 0x188)
20000f70:	1079      	lrw      	r3, 0x20002024	// 20000fd4 <hg_qspi_xip_write+0x108>
20000f72:	6c57      	mov      	r1, r5
20000f74:	9360      	ld.w      	r3, (r3, 0x0)
20000f76:	b469      	st.w      	r3, (r4, 0x24)
20000f78:	6c13      	mov      	r0, r4
20000f7a:	7bf1      	jsr      	r12
20000f7c:	3302      	movi      	r3, 2
20000f7e:	b462      	st.w      	r3, (r4, 0x8)
20000f80:	9462      	ld.w      	r3, (r4, 0x8)
20000f82:	3b42      	cmpnei      	r3, 2
20000f84:	0bfe      	bt      	0x20000f80	// 20000f80 <hg_qspi_xip_write+0xb4>
20000f86:	33c0      	movi      	r3, 192
20000f88:	4375      	lsli      	r3, r3, 21
20000f8a:	6cab      	mov      	r2, r10
20000f8c:	6c67      	mov      	r1, r9
20000f8e:	c4680020 	addu      	r0, r8, r3
20000f92:	e00001a7 	bsr      	0x200012e0	// 200012e0 <set_spi_xip_cfg+0x8c>
20000f96:	9460      	ld.w      	r3, (r4, 0x0)
20000f98:	e9a3ffff 	bhsz      	r3, 0x20000f96	// 20000f96 <hg_qspi_xip_write+0xca>
20000f9c:	ea030103 	movi      	r3, 259
20000fa0:	b462      	st.w      	r3, (r4, 0x8)
20000fa2:	9462      	ld.w      	r3, (r4, 0x8)
20000fa4:	eb430103 	cmpnei      	r3, 259
20000fa8:	0bfd      	bt      	0x20000fa2	// 20000fa2 <hg_qspi_xip_write+0xd6>
20000faa:	6c57      	mov      	r1, r5
20000fac:	6c13      	mov      	r0, r4
20000fae:	7bdd      	jsr      	r7
20000fb0:	dd642009 	st.w      	r11, (r4, 0x24)
20000fb4:	e986ffc6 	blz      	r6, 0x20000f40	// 20000f40 <hg_qspi_xip_write+0x74>
20000fb8:	ea224002 	movih      	r2, 16386
20000fbc:	d8622062 	ld.w      	r3, (r2, 0x188)
20000fc0:	c40357c3 	zext      	r3, r3, 30, 0
20000fc4:	dc622062 	st.w      	r3, (r2, 0x188)
20000fc8:	07bc      	br      	0x20000f40	// 20000f40 <hg_qspi_xip_write+0x74>
20000fca:	0000      	.short	0x0000
20000fcc:	20000098 	.long	0x20000098
20000fd0:	20002020 	.long	0x20002020
20000fd4:	20002024 	.long	0x20002024

20000fd8 <hgspi_custom_erase>:
20000fd8:	14d8      	push      	r4-r11, r15
20000fda:	1424      	subi      	r14, r14, 16
20000fdc:	6ec7      	mov      	r11, r1
20000fde:	9083      	ld.w      	r4, (r0, 0xc)
20000fe0:	e0000174 	bsr      	0x200012c8	// 200012c8 <set_spi_xip_cfg+0x74>
20000fe4:	ea224002 	movih      	r2, 16386
20000fe8:	3602      	movi      	r6, 2
20000fea:	d8622062 	ld.w      	r3, (r2, 0x188)
20000fee:	3bdf      	btsti      	r3, 31
20000ff0:	3306      	movi      	r3, 6
20000ff2:	3100      	movi      	r1, 0
20000ff4:	c4c30c40 	inct      	r6, r3, 0
20000ff8:	d86e0007 	ld.b      	r3, (r14, 0x7)
20000ffc:	c4615c04 	ins      	r3, r1, 4, 4
20001000:	dc6e0007 	st.b      	r3, (r14, 0x7)
20001004:	33c0      	movi      	r3, 192
20001006:	4361      	lsli      	r3, r3, 1
20001008:	9257      	ld.w      	r2, (r2, 0x5c)
2000100a:	4a50      	lsri      	r2, r2, 16
2000100c:	9329      	ld.w      	r1, (r3, 0x24)
2000100e:	93a8      	ld.w      	r5, (r3, 0x20)
20001010:	6e83      	mov      	r10, r0
20001012:	b820      	st.w      	r1, (r14, 0x0)
20001014:	d903200c 	ld.w      	r8, (r3, 0x30)
20001018:	e9020062 	bez      	r2, 0x200010dc	// 200010dc <hgspi_custom_erase+0x104>
2000101c:	d9232003 	ld.w      	r9, (r3, 0xc)
20001020:	c0006027 	mfcr      	r7, cr<0, 0>
20001024:	c0807020 	psrclr      	ie
20001028:	e4e72040 	andi      	r7, r7, 64
2000102c:	e90a0005 	bez      	r10, 0x20001036	// 20001036 <hgspi_custom_erase+0x5e>
20001030:	6c2b      	mov      	r0, r10
20001032:	e000013f 	bsr      	0x200012b0	// 200012b0 <set_spi_xip_cfg+0x5c>
20001036:	6c5b      	mov      	r1, r6
20001038:	6c13      	mov      	r0, r4
2000103a:	7bd5      	jsr      	r5
2000103c:	9460      	ld.w      	r3, (r4, 0x0)
2000103e:	ea023c00 	movi      	r2, 15360
20001042:	6c8a      	nor      	r2, r2
20001044:	68c8      	and      	r3, r2
20001046:	ec633800 	ori      	r3, r3, 14336
2000104a:	b460      	st.w      	r3, (r4, 0x0)
2000104c:	3306      	movi      	r3, 6
2000104e:	3500      	movi      	r5, 0
20001050:	dc6e0005 	st.b      	r3, (r14, 0x5)
20001054:	3300      	movi      	r3, 0
20001056:	dc6e0004 	st.b      	r3, (r14, 0x4)
2000105a:	1801      	addi      	r0, r14, 4
2000105c:	b8a2      	st.w      	r5, (r14, 0x8)
2000105e:	b8a3      	st.w      	r5, (r14, 0xc)
20001060:	7be1      	jsr      	r8
20001062:	d86b0001 	ld.b      	r3, (r11, 0x1)
20001066:	dc6e0005 	st.b      	r3, (r14, 0x5)
2000106a:	d86b2001 	ld.w      	r3, (r11, 0x4)
2000106e:	b862      	st.w      	r3, (r14, 0x8)
20001070:	d86e0004 	ld.b      	r3, (r14, 0x4)
20001074:	1355      	lrw      	r2, 0x20000b9e	// 20001248 <hgspi_custom_write+0xbc>
20001076:	e46320fe 	andi      	r3, r3, 254
2000107a:	8240      	ld.b      	r2, (r2, 0x0)
2000107c:	c4625c41 	ins      	r3, r2, 3, 1
20001080:	c4655c64 	ins      	r3, r5, 7, 4
20001084:	dc6e0004 	st.b      	r3, (r14, 0x4)
20001088:	1801      	addi      	r0, r14, 4
2000108a:	b8a3      	st.w      	r5, (r14, 0xc)
2000108c:	7be1      	jsr      	r8
2000108e:	9460      	ld.w      	r3, (r4, 0x0)
20001090:	ea023c00 	movi      	r2, 15360
20001094:	6c8a      	nor      	r2, r2
20001096:	68c8      	and      	r3, r2
20001098:	ec633400 	ori      	r3, r3, 13312
2000109c:	6c97      	mov      	r2, r5
2000109e:	6c57      	mov      	r1, r5
200010a0:	b460      	st.w      	r3, (r4, 0x0)
200010a2:	2a00      	subi      	r2, 1
200010a4:	6c13      	mov      	r0, r4
200010a6:	7be5      	jsr      	r9
200010a8:	3304      	movi      	r3, 4
200010aa:	dc6e0005 	st.b      	r3, (r14, 0x5)
200010ae:	3300      	movi      	r3, 0
200010b0:	dc6e0004 	st.b      	r3, (r14, 0x4)
200010b4:	1801      	addi      	r0, r14, 4
200010b6:	b8a2      	st.w      	r5, (r14, 0x8)
200010b8:	b8a3      	st.w      	r5, (r14, 0xc)
200010ba:	7be1      	jsr      	r8
200010bc:	6c5b      	mov      	r1, r6
200010be:	6c13      	mov      	r0, r4
200010c0:	9860      	ld.w      	r3, (r14, 0x0)
200010c2:	7bcd      	jsr      	r3
200010c4:	e90a0006 	bez      	r10, 0x200010d0	// 200010d0 <hgspi_custom_erase+0xf8>
200010c8:	3101      	movi      	r1, 1
200010ca:	6c2b      	mov      	r0, r10
200010cc:	e00000f8 	bsr      	0x200012bc	// 200012bc <set_spi_xip_cfg+0x68>
200010d0:	e9070004 	bez      	r7, 0x200010d8	// 200010d8 <hgspi_custom_erase+0x100>
200010d4:	c0807420 	psrset      	ie
200010d8:	1404      	addi      	r14, r14, 16
200010da:	1498      	pop      	r4-r11, r15
200010dc:	ea89005c 	lrw      	r9, 0x6120	// 2000124c <hgspi_custom_write+0xc0>
200010e0:	07a0      	br      	0x20001020	// 20001020 <hgspi_custom_erase+0x48>
	...

200010e4 <hgspi_custom_read>:
200010e4:	14d8      	push      	r4-r11, r15
200010e6:	1421      	subi      	r14, r14, 4
200010e8:	6d43      	mov      	r5, r0
200010ea:	6e87      	mov      	r10, r1
200010ec:	e00000ee 	bsr      	0x200012c8	// 200012c8 <set_spi_xip_cfg+0x74>
200010f0:	ea234002 	movih      	r3, 16386
200010f4:	3402      	movi      	r4, 2
200010f6:	d8632062 	ld.w      	r3, (r3, 0x188)
200010fa:	3bdf      	btsti      	r3, 31
200010fc:	3306      	movi      	r3, 6
200010fe:	c4830c40 	inct      	r4, r3, 0
20001102:	33c0      	movi      	r3, 192
20001104:	d8ca2001 	ld.w      	r6, (r10, 0x4)
20001108:	4375      	lsli      	r3, r3, 21
2000110a:	6ec3      	mov      	r11, r0
2000110c:	d9252003 	ld.w      	r9, (r5, 0xc)
20001110:	618c      	addu      	r6, r3
20001112:	c0006025 	mfcr      	r5, cr<0, 0>
20001116:	c0807020 	psrclr      	ie
2000111a:	33c0      	movi      	r3, 192
2000111c:	4361      	lsli      	r3, r3, 1
2000111e:	e4a52040 	andi      	r5, r5, 64
20001122:	d9092001 	ld.w      	r8, (r9, 0x4)
20001126:	9348      	ld.w      	r2, (r3, 0x20)
20001128:	93e9      	ld.w      	r7, (r3, 0x24)
2000112a:	e9000006 	bez      	r0, 0x20001136	// 20001136 <hgspi_custom_read+0x52>
2000112e:	b840      	st.w      	r2, (r14, 0x0)
20001130:	e00000c0 	bsr      	0x200012b0	// 200012b0 <set_spi_xip_cfg+0x5c>
20001134:	9840      	ld.w      	r2, (r14, 0x0)
20001136:	6c53      	mov      	r1, r4
20001138:	6c27      	mov      	r0, r9
2000113a:	7bc9      	jsr      	r2
2000113c:	d8692001 	ld.w      	r3, (r9, 0x4)
20001140:	1244      	lrw      	r2, 0xe0fccc00	// 20001250 <hgspi_custom_write+0xc4>
20001142:	68c8      	and      	r3, r2
20001144:	d84a0001 	ld.b      	r2, (r10, 0x1)
20001148:	6cc8      	or      	r3, r2
2000114a:	31f8      	movi      	r1, 248
2000114c:	d84a0000 	ld.b      	r2, (r10, 0x0)
20001150:	4135      	lsli      	r1, r1, 21
20001152:	4258      	lsli      	r2, r2, 24
20001154:	6884      	and      	r2, r1
20001156:	6cc8      	or      	r3, r2
20001158:	6c5b      	mov      	r1, r6
2000115a:	dc692001 	st.w      	r3, (r9, 0x4)
2000115e:	d84a1001 	ld.h      	r2, (r10, 0x2)
20001162:	d80a2002 	ld.w      	r0, (r10, 0x8)
20001166:	e00000bd 	bsr      	0x200012e0	// 200012e0 <set_spi_xip_cfg+0x8c>
2000116a:	dd092001 	st.w      	r8, (r9, 0x4)
2000116e:	6c53      	mov      	r1, r4
20001170:	6c27      	mov      	r0, r9
20001172:	7bdd      	jsr      	r7
20001174:	e90b0006 	bez      	r11, 0x20001180	// 20001180 <hgspi_custom_read+0x9c>
20001178:	3101      	movi      	r1, 1
2000117a:	6c2f      	mov      	r0, r11
2000117c:	e00000a0 	bsr      	0x200012bc	// 200012bc <set_spi_xip_cfg+0x68>
20001180:	e9050004 	bez      	r5, 0x20001188	// 20001188 <hgspi_custom_read+0xa4>
20001184:	c0807420 	psrset      	ie
20001188:	1401      	addi      	r14, r14, 4
2000118a:	1498      	pop      	r4-r11, r15

2000118c <hgspi_custom_write>:
2000118c:	14d8      	push      	r4-r11, r15
2000118e:	1421      	subi      	r14, r14, 4
20001190:	6dc3      	mov      	r7, r0
20001192:	6d07      	mov      	r4, r1
20001194:	e000009a 	bsr      	0x200012c8	// 200012c8 <set_spi_xip_cfg+0x74>
20001198:	ea234002 	movih      	r3, 16386
2000119c:	3502      	movi      	r5, 2
2000119e:	d8632062 	ld.w      	r3, (r3, 0x188)
200011a2:	3bdf      	btsti      	r3, 31
200011a4:	32c0      	movi      	r2, 192
200011a6:	3306      	movi      	r3, 6
200011a8:	4241      	lsli      	r2, r2, 1
200011aa:	c4a30c40 	inct      	r5, r3, 0
200011ae:	33c0      	movi      	r3, 192
200011b0:	d9272003 	ld.w      	r9, (r7, 0xc)
200011b4:	4375      	lsli      	r3, r3, 21
200011b6:	94e1      	ld.w      	r7, (r4, 0x4)
200011b8:	61cc      	addu      	r7, r3
200011ba:	9269      	ld.w      	r3, (r2, 0x24)
200011bc:	d9622008 	ld.w      	r11, (r2, 0x20)
200011c0:	6d83      	mov      	r6, r0
200011c2:	b860      	st.w      	r3, (r14, 0x0)
200011c4:	c0006028 	mfcr      	r8, cr<0, 0>
200011c8:	c0807020 	psrclr      	ie
200011cc:	6c97      	mov      	r2, r5
200011ce:	8c21      	ld.h      	r1, (r4, 0x2)
200011d0:	9401      	ld.w      	r0, (r4, 0x4)
200011d2:	e5082040 	andi      	r8, r8, 64
200011d6:	d9492002 	ld.w      	r10, (r9, 0x8)
200011da:	e000005f 	bsr      	0x20001298	// 20001298 <set_spi_xip_cfg+0x44>
200011de:	e9060005 	bez      	r6, 0x200011e8	// 200011e8 <hgspi_custom_write+0x5c>
200011e2:	6c1b      	mov      	r0, r6
200011e4:	e0000066 	bsr      	0x200012b0	// 200012b0 <set_spi_xip_cfg+0x5c>
200011e8:	6c57      	mov      	r1, r5
200011ea:	6c27      	mov      	r0, r9
200011ec:	7bed      	jsr      	r11
200011ee:	d8492000 	ld.w      	r2, (r9, 0x0)
200011f2:	e9a2fffe 	bhsz      	r2, 0x200011ee	// 200011ee <hgspi_custom_write+0x62>
200011f6:	8440      	ld.b      	r2, (r4, 0x0)
200011f8:	8421      	ld.b      	r1, (r4, 0x1)
200011fa:	e442201f 	andi      	r2, r2, 31
200011fe:	6c84      	or      	r2, r1
20001200:	dc492002 	st.w      	r2, (r9, 0x8)
20001204:	9422      	ld.w      	r1, (r4, 0x8)
20001206:	8c41      	ld.h      	r2, (r4, 0x2)
20001208:	6c1f      	mov      	r0, r7
2000120a:	e000006b 	bsr      	0x200012e0	// 200012e0 <set_spi_xip_cfg+0x8c>
2000120e:	d8492000 	ld.w      	r2, (r9, 0x0)
20001212:	e9a2fffe 	bhsz      	r2, 0x2000120e	// 2000120e <hgspi_custom_write+0x82>
20001216:	dd492002 	st.w      	r10, (r9, 0x8)
2000121a:	6c57      	mov      	r1, r5
2000121c:	6c27      	mov      	r0, r9
2000121e:	9860      	ld.w      	r3, (r14, 0x0)
20001220:	7bcd      	jsr      	r3
20001222:	e906000a 	bez      	r6, 0x20001236	// 20001236 <hgspi_custom_write+0xaa>
20001226:	8c21      	ld.h      	r1, (r4, 0x2)
20001228:	6c1f      	mov      	r0, r7
2000122a:	e0000061 	bsr      	0x200012ec	// 200012ec <set_spi_xip_cfg+0x98>
2000122e:	3101      	movi      	r1, 1
20001230:	6c1b      	mov      	r0, r6
20001232:	e0000045 	bsr      	0x200012bc	// 200012bc <set_spi_xip_cfg+0x68>
20001236:	e0000061 	bsr      	0x200012f8	// 200012f8 <set_spi_xip_cfg+0xa4>
2000123a:	e9080004 	bez      	r8, 0x20001242	// 20001242 <hgspi_custom_write+0xb6>
2000123e:	c0807420 	psrset      	ie
20001242:	1401      	addi      	r14, r14, 4
20001244:	1498      	pop      	r4-r11, r15
20001246:	0000      	.short	0x0000
20001248:	20000b9e 	.long	0x20000b9e
2000124c:	00006120 	.long	0x00006120
20001250:	e0fccc00 	.long	0xe0fccc00

20001254 <set_spi_xip_cfg>:
20001254:	14c1      	push      	r4
20001256:	c000602d 	mfcr      	r13, cr<0, 0>
2000125a:	c0807020 	psrclr      	ie
2000125e:	34c0      	movi      	r4, 192
20001260:	d9802005 	ld.w      	r12, (r0, 0x14)
20001264:	4135      	lsli      	r1, r1, 21
20001266:	448f      	lsli      	r4, r4, 15
20001268:	c6ac282c 	bclri      	r12, r12, 21
2000126c:	c6cc282c 	bclri      	r12, r12, 22
20001270:	6850      	and      	r1, r4
20001272:	6cb0      	or      	r2, r12
20001274:	6c48      	or      	r1, r2
20001276:	e5ad2040 	andi      	r13, r13, 64
2000127a:	b025      	st.w      	r1, (r0, 0x14)
2000127c:	e9030007 	bez      	r3, 0x2000128a	// 2000128a <set_spi_xip_cfg+0x36>
20001280:	4378      	lsli      	r3, r3, 24
20001282:	ec630001 	ori      	r3, r3, 1
20001286:	dc602024 	st.w      	r3, (r0, 0x90)
2000128a:	e90d0004 	bez      	r13, 0x20001292	// 20001292 <set_spi_xip_cfg+0x3e>
2000128e:	c0807420 	psrset      	ie
20001292:	1481      	pop      	r4
20001294:	0000      	bkpt
20001296:	0000      	bkpt
20001298:	ea8d0002 	lrw      	r13, 0x180126dc	// 200012a0 <set_spi_xip_cfg+0x4c>
2000129c:	7834      	jmp      	r13
2000129e:	6c03      	mov      	r0, r0
200012a0:	26dc      	addi      	r6, 221
200012a2:	1801      	addi      	r0, r14, 4
200012a4:	ea8d0002 	lrw      	r13, 0x18004e10	// 200012ac <set_spi_xip_cfg+0x58>
200012a8:	7834      	jmp      	r13
200012aa:	6c03      	mov      	r0, r0
200012ac:	4e10      	lsri      	r0, r6, 16
200012ae:	1800      	addi      	r0, r14, 0
200012b0:	ea8d0002 	lrw      	r13, 0x18012638	// 200012b8 <set_spi_xip_cfg+0x64>
200012b4:	7834      	jmp      	r13
200012b6:	6c03      	mov      	r0, r0
200012b8:	2638      	addi      	r6, 57
200012ba:	1801      	addi      	r0, r14, 4
200012bc:	ea8d0002 	lrw      	r13, 0x18012608	// 200012c4 <set_spi_xip_cfg+0x70>
200012c0:	7834      	jmp      	r13
200012c2:	6c03      	mov      	r0, r0
200012c4:	2608      	addi      	r6, 9
200012c6:	1801      	addi      	r0, r14, 4
200012c8:	ea8d0002 	lrw      	r13, 0x180125c0	// 200012d0 <set_spi_xip_cfg+0x7c>
200012cc:	7834      	jmp      	r13
200012ce:	6c03      	mov      	r0, r0
200012d0:	25c0      	addi      	r5, 193
200012d2:	1801      	addi      	r0, r14, 4
200012d4:	ea8d0002 	lrw      	r13, 0x18004e14	// 200012dc <set_spi_xip_cfg+0x88>
200012d8:	7834      	jmp      	r13
200012da:	6c03      	mov      	r0, r0
200012dc:	4e14      	lsri      	r0, r6, 20
200012de:	1800      	addi      	r0, r14, 0
200012e0:	ea8d0002 	lrw      	r13, 0x624	// 200012e8 <set_spi_xip_cfg+0x94>
200012e4:	7834      	jmp      	r13
200012e6:	6c03      	mov      	r0, r0
200012e8:	0624      	br      	0x20000f30	// 20000f30 <hg_qspi_xip_write+0x64>
200012ea:	0000      	bkpt
200012ec:	ea8d0002 	lrw      	r13, 0x18012540	// 200012f4 <set_spi_xip_cfg+0xa0>
200012f0:	7834      	jmp      	r13
200012f2:	6c03      	mov      	r0, r0
200012f4:	2540      	addi      	r5, 65
200012f6:	1801      	addi      	r0, r14, 4
200012f8:	ea8d0002 	lrw      	r13, 0x1801270c	// 20001300 <set_spi_xip_cfg+0xac>
200012fc:	7834      	jmp      	r13
200012fe:	6c03      	mov      	r0, r0
20001300:	270c      	addi      	r7, 13
20001302:	1801      	addi      	r0, r14, 4
	...

Disassembly of section .iis:

20001930 <demo_sram>:

__iis_sram_acton static void demo_sram(uint32 sys_con,uint32 con)
{
    /* 下面三句要放在SRAM上跑 */
    //enable iis0
    (*((volatile uint32 *)0x40004900)) |= BIT(0);
20001930:	ea024900 	movi      	r2, 18688
20001934:	3abe      	bseti      	r2, 30
20001936:	9260      	ld.w      	r3, (r2, 0x0)
20001938:	ec630001 	ori      	r3, r3, 1
2000193c:	b260      	st.w      	r3, (r2, 0x0)
    

    SYSCTRL_REG_OPT(
2000193e:	ea234002 	movih      	r3, 16386
20001942:	b303      	st.w      	r0, (r3, 0xc)
        SYSCTRL->SYS_CON2 = sys_con;
    );

    //iis 1 set rx
    (*((volatile uint32 *)0x40004A00)) = con;
20001944:	ea034a00 	movi      	r3, 18944
20001948:	3bbe      	bseti      	r3, 30
2000194a:	b320      	st.w      	r1, (r3, 0x0)
}
2000194c:	783c      	jmp      	r15
